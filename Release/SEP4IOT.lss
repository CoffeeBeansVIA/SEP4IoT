
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004d2  00800200  00007c60  00007cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c6c  008006d2  008006d2  000081c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000081c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008d8  00000000  00000000  00008264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008ee4  00000000  00000000  00008b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000264a  00000000  00000000  00011a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005e56  00000000  00000000  0001406a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002294  00000000  00000000  00019ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000371c  00000000  00000000  0001c154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005f47  00000000  00000000  0001f870  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f8  00000000  00000000  000257b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
       2:	00 00       	nop
       4:	cf c0       	rjmp	.+414    	; 0x1a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c0       	rjmp	.+410    	; 0x1a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c0       	rjmp	.+406    	; 0x1a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c0       	rjmp	.+398    	; 0x1a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c0       	rjmp	.+394    	; 0x1a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c0       	rjmp	.+386    	; 0x1a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c0       	rjmp	.+382    	; 0x1a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	bd c0       	rjmp	.+378    	; 0x1a4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bb c0       	rjmp	.+374    	; 0x1a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_12>
      34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	b5 c0       	rjmp	.+362    	; 0x1a4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b3 c0       	rjmp	.+358    	; 0x1a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c0       	rjmp	.+354    	; 0x1a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c0       	rjmp	.+350    	; 0x1a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c0       	rjmp	.+346    	; 0x1a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c0       	rjmp	.+342    	; 0x1a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c0       	rjmp	.+338    	; 0x1a4 <__bad_interrupt>
      52:	00 00       	nop
      54:	a7 c0       	rjmp	.+334    	; 0x1a4 <__bad_interrupt>
      56:	00 00       	nop
      58:	a5 c0       	rjmp	.+330    	; 0x1a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c0       	rjmp	.+326    	; 0x1a4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a1 c0       	rjmp	.+322    	; 0x1a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <__vector_25>
      68:	0c 94 4d 34 	jmp	0x689a	; 0x689a <__vector_26>
      6c:	9b c0       	rjmp	.+310    	; 0x1a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c0       	rjmp	.+306    	; 0x1a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c0       	rjmp	.+302    	; 0x1a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c0       	rjmp	.+298    	; 0x1a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c0       	rjmp	.+294    	; 0x1a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c0       	rjmp	.+290    	; 0x1a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c0       	rjmp	.+286    	; 0x1a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c0       	rjmp	.+282    	; 0x1a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c0       	rjmp	.+278    	; 0x1a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 91 34 	jmp	0x6922	; 0x6922 <__vector_36>
      94:	0c 94 e3 34 	jmp	0x69c6	; 0x69c6 <__vector_37>
      98:	85 c0       	rjmp	.+266    	; 0x1a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	83 c0       	rjmp	.+262    	; 0x1a4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	81 c0       	rjmp	.+258    	; 0x1a4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7f c0       	rjmp	.+254    	; 0x1a4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7d c0       	rjmp	.+250    	; 0x1a4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7b c0       	rjmp	.+246    	; 0x1a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c0       	rjmp	.+242    	; 0x1a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c0       	rjmp	.+238    	; 0x1a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	75 c0       	rjmp	.+234    	; 0x1a4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	73 c0       	rjmp	.+230    	; 0x1a4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	71 c0       	rjmp	.+226    	; 0x1a4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6f c0       	rjmp	.+222    	; 0x1a4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6d c0       	rjmp	.+218    	; 0x1a4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 27 35 	jmp	0x6a4e	; 0x6a4e <__vector_51>
      d0:	0c 94 79 35 	jmp	0x6af2	; 0x6af2 <__vector_52>
      d4:	67 c0       	rjmp	.+206    	; 0x1a4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 bd 35 	jmp	0x6b7a	; 0x6b7a <__vector_54>
      dc:	0c 94 0f 36 	jmp	0x6c1e	; 0x6c1e <__vector_55>
      e0:	61 c0       	rjmp	.+194    	; 0x1a4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	30 29       	or	r19, r0
      e6:	30 29       	or	r19, r0
      e8:	30 29       	or	r19, r0
      ea:	8f 29       	or	r24, r15
      ec:	9a 29       	or	r25, r10
      ee:	d1 29       	or	r29, r1
      f0:	30 29       	or	r19, r0
      f2:	30 29       	or	r19, r0
      f4:	8f 29       	or	r24, r15
      f6:	9a 29       	or	r25, r10

000000f8 <prvIdleTask>:
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
        }
        taskEXIT_CRITICAL();

        return ulReturn;
    }
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	1f 92       	push	r1
      fe:	1f 92       	push	r1
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <prvCheckTasksWaitingTermination>
     10c:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <pxReadyTasksLists>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	08 f0       	brcs	.+2      	; 0x116 <prvIdleTask+0x1e>
     114:	00 d7       	rcall	.+3584   	; 0xf16 <vPortYield>
     116:	0e 94 fe 2a 	call	0x55fc	; 0x55fc <vApplicationIdleHook>
     11a:	f6 cf       	rjmp	.-20     	; 0x108 <prvIdleTask+0x10>

0000011c <prvTimerTask>:
    {
        Timer_t * pxTimer = xTimer;

        configASSERT( xTimer );
        return pxTimer->pcTimerName;
    }
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	27 97       	sbiw	r28, 0x07	; 7
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	cd bf       	out	0x3d, r28	; 61
     130:	9f 83       	std	Y+7, r25	; 0x07
     132:	8e 83       	std	Y+6, r24	; 0x06
     134:	ce 01       	movw	r24, r28
     136:	05 96       	adiw	r24, 0x05	; 5
     138:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <prvGetNextExpireTime>
     13c:	dc 01       	movw	r26, r24
     13e:	cb 01       	movw	r24, r22
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	9a 83       	std	Y+2, r25	; 0x02
     144:	ab 83       	std	Y+3, r26	; 0x03
     146:	bc 83       	std	Y+4, r27	; 0x04
     148:	2d 81       	ldd	r18, Y+5	; 0x05
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	9a 81       	ldd	r25, Y+2	; 0x02
     14e:	ab 81       	ldd	r26, Y+3	; 0x03
     150:	bc 81       	ldd	r27, Y+4	; 0x04
     152:	42 2f       	mov	r20, r18
     154:	bc 01       	movw	r22, r24
     156:	cd 01       	movw	r24, r26
     158:	0e 94 43 27 	call	0x4e86	; 0x4e86 <prvProcessTimerOrBlockTask>
     15c:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <prvProcessReceivedCommands>
     160:	e9 cf       	rjmp	.-46     	; 0x134 <prvTimerTask+0x18>

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d1 e2       	ldi	r29, 0x21	; 33
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	00 e0       	ldi	r16, 0x00	; 0
     170:	0c bf       	out	0x3c, r16	; 60

00000172 <__do_copy_data>:
     172:	16 e0       	ldi	r17, 0x06	; 6
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b2 e0       	ldi	r27, 0x02	; 2
     178:	e0 e6       	ldi	r30, 0x60	; 96
     17a:	fc e7       	ldi	r31, 0x7C	; 124
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a2 3d       	cpi	r26, 0xD2	; 210
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	23 e1       	ldi	r18, 0x13	; 19
     18e:	a2 ed       	ldi	r26, 0xD2	; 210
     190:	b6 e0       	ldi	r27, 0x06	; 6
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ae 33       	cpi	r26, 0x3E	; 62
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <main>
     1a0:	0c 94 2e 3e 	jmp	0x7c5c	; 0x7c5c <_exit>

000001a4 <__bad_interrupt>:
     1a4:	2d cf       	rjmp	.-422    	; 0x0 <__vectors>

000001a6 <SensorDataPackage_create>:
	packet = NULL;
}

void SensorDataPackage_setCO2(SensorDataPackage_t packet, uint16_t _co2Data){
	packet->co2Data = _co2Data;
}
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	1f 92       	push	r1
     1ac:	1f 92       	push	r1
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	05 d2       	rcall	.+1034   	; 0x5c2 <pvPortMalloc>
     1b8:	9a 83       	std	Y+2, r25	; 0x02
     1ba:	89 83       	std	Y+1, r24	; 0x01
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	9a 81       	ldd	r25, Y+2	; 0x02
     1c0:	89 2b       	or	r24, r25
     1c2:	19 f4       	brne	.+6      	; 0x1ca <SensorDataPackage_create+0x24>
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <SensorDataPackage_create+0x28>
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <SensorDataPackage_free>:
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	1f 92       	push	r1
     1de:	1f 92       	push	r1
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	9a 81       	ldd	r25, Y+2	; 0x02
     1ec:	00 d3       	rcall	.+1536   	; 0x7ee <vPortFree>
     1ee:	1a 82       	std	Y+2, r1	; 0x02
     1f0:	19 82       	std	Y+1, r1	; 0x01
     1f2:	00 00       	nop
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <SensorDataPackage_getCO2>:

uint16_t SensorDataPackage_getCO2(SensorDataPackage_t packet){
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	1f 92       	push	r1
     204:	1f 92       	push	r1
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	9a 83       	std	Y+2, r25	; 0x02
     20c:	89 83       	std	Y+1, r24	; 0x01
	return packet->co2Data;
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	9a 81       	ldd	r25, Y+2	; 0x02
     212:	fc 01       	movw	r30, r24
     214:	80 81       	ld	r24, Z
     216:	91 81       	ldd	r25, Z+1	; 0x01
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <UL_handler_create>:
#define LORA_appEUI "926F9B5931FCA94C"
#define LORA_appKEY "1D2EB57B831FBDEF807978AE930786E4"

static char _out_buf[100];

void UL_handler_create(MessageBufferHandle_t _uplinkMessageBuffer ){
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	1f 92       	push	r1
     228:	1f 92       	push	r1
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
     22e:	9a 83       	std	Y+2, r25	; 0x02
     230:	89 83       	std	Y+1, r24	; 0x01
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <lora_driver_resetRn2483>
	vTaskDelay(2);
     238:	62 e0       	ldi	r22, 0x02	; 2
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <vTaskDelay>
	lora_driver_resetRn2483(0);
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     24a:	66 e9       	ldi	r22, 0x96	; 150
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     256:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <lora_driver_flushBuffers>

	_lora_setup();
     25a:	7e d0       	rcall	.+252    	; 0x358 <_lora_setup>
	
	uplinkMessageBuffer = _uplinkMessageBuffer;
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	9a 81       	ldd	r25, Y+2	; 0x02
     260:	90 93 31 13 	sts	0x1331, r25	; 0x801331 <uplinkMessageBuffer+0x1>
     264:	80 93 30 13 	sts	0x1330, r24	; 0x801330 <uplinkMessageBuffer>
}
     268:	00 00       	nop
     26a:	0f 90       	pop	r0
     26c:	0f 90       	pop	r0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <UL_handler_receive>:

 void UL_handler_receive( void *pvParameters )
 {
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	a2 97       	sbiw	r28, 0x22	; 34
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	9a a3       	std	Y+34, r25	; 0x22
     28e:	89 a3       	std	Y+33, r24	; 0x21

	for(;;){
		  SensorDataPackage_t sensorDataPackage = SensorDataPackage_create();
     290:	8a df       	rcall	.-236    	; 0x1a6 <SensorDataPackage_create>
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
		  
		  size_t xReceivedBytes;
		  const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	a0 e0       	ldi	r26, 0x00	; 0
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	8b 83       	std	Y+3, r24	; 0x03
     2a0:	9c 83       	std	Y+4, r25	; 0x04
     2a2:	ad 83       	std	Y+5, r26	; 0x05
     2a4:	be 83       	std	Y+6, r27	; 0x06

		  // Receive next message from the UL message buffer. Wait for a maximum of 100ms for a message to become available.
		  xReceivedBytes = xMessageBufferReceive( uplinkMessageBuffer,
     2a6:	e0 91 30 13 	lds	r30, 0x1330	; 0x801330 <uplinkMessageBuffer>
     2aa:	f0 91 31 13 	lds	r31, 0x1331	; 0x801331 <uplinkMessageBuffer+0x1>
     2ae:	8b 81       	ldd	r24, Y+3	; 0x03
     2b0:	9c 81       	ldd	r25, Y+4	; 0x04
     2b2:	ad 81       	ldd	r26, Y+5	; 0x05
     2b4:	be 81       	ldd	r27, Y+6	; 0x06
     2b6:	69 81       	ldd	r22, Y+1	; 0x01
     2b8:	7a 81       	ldd	r23, Y+2	; 0x02
     2ba:	8c 01       	movw	r16, r24
     2bc:	9d 01       	movw	r18, r26
     2be:	42 e0       	ldi	r20, 0x02	; 2
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	cf 01       	movw	r24, r30
     2c4:	0e 94 8a 10 	call	0x2114	; 0x2114 <xStreamBufferReceive>
     2c8:	98 87       	std	Y+8, r25	; 0x08
     2ca:	8f 83       	std	Y+7, r24	; 0x07
		  ( void * ) sensorDataPackage,
		  sizeof( SensorDataPackage_t ),
		  xBlockTime );
		  
		  if( xReceivedBytes > 0 )
     2cc:	8f 81       	ldd	r24, Y+7	; 0x07
     2ce:	98 85       	ldd	r25, Y+8	; 0x08
     2d0:	89 2b       	or	r24, r25
     2d2:	d9 f1       	breq	.+118    	; 0x34a <UL_handler_receive+0xd6>
		  {
			  // The sensorDataPackage contains the message to be transmitted. Serialize it here and send it using LoRaWan.
			  puts("UL_handler_receive -> OK");
     2d4:	8d e1       	ldi	r24, 0x1D	; 29
     2d6:	92 e0       	ldi	r25, 0x02	; 2
     2d8:	0e 94 23 3b 	call	0x7646	; 0x7646 <puts>
			  puts(xReceivedBytes);
     2dc:	8f 81       	ldd	r24, Y+7	; 0x07
     2de:	98 85       	ldd	r25, Y+8	; 0x08
     2e0:	0e 94 23 3b 	call	0x7646	; 0x7646 <puts>
			  
			  // take the data out of the packet
			  uint16_t co2_ppm = SensorDataPackage_getCO2(sensorDataPackage);
     2e4:	89 81       	ldd	r24, Y+1	; 0x01
     2e6:	9a 81       	ldd	r25, Y+2	; 0x02
     2e8:	8a df       	rcall	.-236    	; 0x1fe <SensorDataPackage_getCO2>
     2ea:	9a 87       	std	Y+10, r25	; 0x0a
     2ec:	89 87       	std	Y+9, r24	; 0x09
			  
			  // free up memory
			  SensorDataPackage_free(sensorDataPackage);
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	9a 81       	ldd	r25, Y+2	; 0x02
     2f2:	72 df       	rcall	.-284    	; 0x1d8 <SensorDataPackage_free>
			  
			  
			  lora_driver_payload_t _uplink_payload;
			  
			  _uplink_payload.bytes[0] = co2_ppm >> 8;
     2f4:	89 85       	ldd	r24, Y+9	; 0x09
     2f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     2f8:	89 2f       	mov	r24, r25
     2fa:	99 27       	eor	r25, r25
     2fc:	8d 87       	std	Y+13, r24	; 0x0d
			  _uplink_payload.bytes[1] = co2_ppm & 0xFF;
     2fe:	89 85       	ldd	r24, Y+9	; 0x09
     300:	8e 87       	std	Y+14, r24	; 0x0e
			  _uplink_payload.len = 2;
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	8c 87       	std	Y+12, r24	; 0x0c

			  status_leds_shortPuls(led_ST4);  // OPTIONAL
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	0e 94 3c 38 	call	0x7078	; 0x7078 <status_leds_shortPuls>
			  printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     30c:	ce 01       	movw	r24, r28
     30e:	0b 96       	adiw	r24, 0x0b	; 11
     310:	bc 01       	movw	r22, r24
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 51 30 	call	0x60a2	; 0x60a2 <lora_driver_sendUploadMessage>
     318:	0e 94 3e 32 	call	0x647c	; 0x647c <lora_driver_mapReturnCodeToText>
     31c:	29 2f       	mov	r18, r25
     31e:	2f 93       	push	r18
     320:	8f 93       	push	r24
     322:	86 e3       	ldi	r24, 0x36	; 54
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	89 2f       	mov	r24, r25
     328:	8f 93       	push	r24
     32a:	86 e3       	ldi	r24, 0x36	; 54
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	8f 93       	push	r24
     330:	0e 94 10 3b 	call	0x7620	; 0x7620 <printf>
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
			  vTaskDelay(pdMS_TO_TICKS(300000));
     33c:	68 ea       	ldi	r22, 0xA8	; 168
     33e:	78 e4       	ldi	r23, 0x48	; 72
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <vTaskDelay>
     348:	a3 cf       	rjmp	.-186    	; 0x290 <UL_handler_receive+0x1c>
			  }else{
			  // Wait 2.5 minutes to retry
			  vTaskDelay(pdMS_TO_TICKS(150000));
     34a:	64 e5       	ldi	r22, 0x54	; 84
     34c:	74 e2       	ldi	r23, 0x24	; 36
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <vTaskDelay>
		  }		
	}
     356:	9c cf       	rjmp	.-200    	; 0x290 <UL_handler_receive+0x1c>

00000358 <_lora_setup>:

 }
 
 static void _lora_setup(void)
 {
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	1f 92       	push	r1
     35e:	1f 92       	push	r1
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
	 lora_driver_returnCode_t rc;
	 status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <status_leds_slowBlink>

	 // Factory reset the transceiver
	 printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     36a:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <lora_driver_rn2483FactoryReset>
     36e:	0e 94 3e 32 	call	0x647c	; 0x647c <lora_driver_mapReturnCodeToText>
     372:	29 2f       	mov	r18, r25
     374:	2f 93       	push	r18
     376:	8f 93       	push	r24
     378:	8b e4       	ldi	r24, 0x4B	; 75
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	89 2f       	mov	r24, r25
     37e:	8f 93       	push	r24
     380:	8b e4       	ldi	r24, 0x4B	; 75
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	8f 93       	push	r24
     386:	0e 94 10 3b 	call	0x7620	; 0x7620 <printf>
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
	 
	 // Configure to EU868 LoRaWAN standards
	 printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     392:	0e 94 3f 31 	call	0x627e	; 0x627e <lora_driver_configureToEu868>
     396:	0e 94 3e 32 	call	0x647c	; 0x647c <lora_driver_mapReturnCodeToText>
     39a:	29 2f       	mov	r18, r25
     39c:	2f 93       	push	r18
     39e:	8f 93       	push	r24
     3a0:	8e e5       	ldi	r24, 0x5E	; 94
     3a2:	92 e0       	ldi	r25, 0x02	; 2
     3a4:	89 2f       	mov	r24, r25
     3a6:	8f 93       	push	r24
     3a8:	8e e5       	ldi	r24, 0x5E	; 94
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	8f 93       	push	r24
     3ae:	0e 94 10 3b 	call	0x7620	; 0x7620 <printf>
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0

	 // Get the transceivers HW EUI
	 rc = lora_driver_getRn2483Hweui(_out_buf);
     3ba:	82 ed       	ldi	r24, 0xD2	; 210
     3bc:	96 e0       	ldi	r25, 0x06	; 6
     3be:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <lora_driver_getRn2483Hweui>
     3c2:	8a 83       	std	Y+2, r24	; 0x02
	 printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	0e 94 3e 32 	call	0x647c	; 0x647c <lora_driver_mapReturnCodeToText>
     3ca:	9c 01       	movw	r18, r24
     3cc:	82 ed       	ldi	r24, 0xD2	; 210
     3ce:	96 e0       	ldi	r25, 0x06	; 6
     3d0:	89 2f       	mov	r24, r25
     3d2:	8f 93       	push	r24
     3d4:	82 ed       	ldi	r24, 0xD2	; 210
     3d6:	96 e0       	ldi	r25, 0x06	; 6
     3d8:	8f 93       	push	r24
     3da:	83 2f       	mov	r24, r19
     3dc:	8f 93       	push	r24
     3de:	82 2f       	mov	r24, r18
     3e0:	8f 93       	push	r24
     3e2:	87 e7       	ldi	r24, 0x77	; 119
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	89 2f       	mov	r24, r25
     3e8:	8f 93       	push	r24
     3ea:	87 e7       	ldi	r24, 0x77	; 119
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	8f 93       	push	r24
     3f0:	0e 94 10 3b 	call	0x7620	; 0x7620 <printf>
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0

	 // Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	 printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     400:	82 ed       	ldi	r24, 0xD2	; 210
     402:	96 e0       	ldi	r25, 0x06	; 6
     404:	0e 94 ef 2f 	call	0x5fde	; 0x5fde <lora_driver_setDeviceIdentifier>
     408:	0e 94 3e 32 	call	0x647c	; 0x647c <lora_driver_mapReturnCodeToText>
     40c:	29 2f       	mov	r18, r25
     40e:	2f 93       	push	r18
     410:	8f 93       	push	r24
     412:	82 ed       	ldi	r24, 0xD2	; 210
     414:	96 e0       	ldi	r25, 0x06	; 6
     416:	89 2f       	mov	r24, r25
     418:	8f 93       	push	r24
     41a:	82 ed       	ldi	r24, 0xD2	; 210
     41c:	96 e0       	ldi	r25, 0x06	; 6
     41e:	8f 93       	push	r24
     420:	8b e8       	ldi	r24, 0x8B	; 139
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	89 2f       	mov	r24, r25
     426:	8f 93       	push	r24
     428:	8b e8       	ldi	r24, 0x8B	; 139
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	8f 93       	push	r24
     42e:	0e 94 10 3b 	call	0x7620	; 0x7620 <printf>
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0

	 // Set Over The Air Activation parameters to be ready to join the LoRaWAN
	 printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     43e:	42 ed       	ldi	r20, 0xD2	; 210
     440:	56 e0       	ldi	r21, 0x06	; 6
     442:	60 ea       	ldi	r22, 0xA0	; 160
     444:	72 e0       	ldi	r23, 0x02	; 2
     446:	81 ec       	ldi	r24, 0xC1	; 193
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	0e 94 1d 32 	call	0x643a	; 0x643a <lora_driver_setOtaaIdentity>
     44e:	0e 94 3e 32 	call	0x647c	; 0x647c <lora_driver_mapReturnCodeToText>
     452:	29 2f       	mov	r18, r25
     454:	2f 93       	push	r18
     456:	8f 93       	push	r24
     458:	82 ed       	ldi	r24, 0xD2	; 210
     45a:	96 e0       	ldi	r25, 0x06	; 6
     45c:	89 2f       	mov	r24, r25
     45e:	8f 93       	push	r24
     460:	82 ed       	ldi	r24, 0xD2	; 210
     462:	96 e0       	ldi	r25, 0x06	; 6
     464:	8f 93       	push	r24
     466:	80 ea       	ldi	r24, 0xA0	; 160
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	89 2f       	mov	r24, r25
     46c:	8f 93       	push	r24
     46e:	80 ea       	ldi	r24, 0xA0	; 160
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	8f 93       	push	r24
     474:	81 ec       	ldi	r24, 0xC1	; 193
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	89 2f       	mov	r24, r25
     47a:	8f 93       	push	r24
     47c:	81 ec       	ldi	r24, 0xC1	; 193
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	8f 93       	push	r24
     482:	82 ed       	ldi	r24, 0xD2	; 210
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	89 2f       	mov	r24, r25
     488:	8f 93       	push	r24
     48a:	82 ed       	ldi	r24, 0xD2	; 210
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	8f 93       	push	r24
     490:	0e 94 10 3b 	call	0x7620	; 0x7620 <printf>
     494:	8d b7       	in	r24, 0x3d	; 61
     496:	9e b7       	in	r25, 0x3e	; 62
     498:	0a 96       	adiw	r24, 0x0a	; 10
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61

	 // Save all the MAC settings in the transceiver
	 printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     4a4:	0e 94 22 30 	call	0x6044	; 0x6044 <lora_driver_saveMac>
     4a8:	0e 94 3e 32 	call	0x647c	; 0x647c <lora_driver_mapReturnCodeToText>
     4ac:	29 2f       	mov	r18, r25
     4ae:	2f 93       	push	r18
     4b0:	8f 93       	push	r24
     4b2:	88 e0       	ldi	r24, 0x08	; 8
     4b4:	93 e0       	ldi	r25, 0x03	; 3
     4b6:	89 2f       	mov	r24, r25
     4b8:	8f 93       	push	r24
     4ba:	88 e0       	ldi	r24, 0x08	; 8
     4bc:	93 e0       	ldi	r25, 0x03	; 3
     4be:	8f 93       	push	r24
     4c0:	0e 94 10 3b 	call	0x7620	; 0x7620 <printf>
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0

	 // Enable Adaptive Data Rate
	 printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 1c 31 	call	0x6238	; 0x6238 <lora_driver_setAdaptiveDataRate>
     4d2:	0e 94 3e 32 	call	0x647c	; 0x647c <lora_driver_mapReturnCodeToText>
     4d6:	29 2f       	mov	r18, r25
     4d8:	2f 93       	push	r18
     4da:	8f 93       	push	r24
     4dc:	87 e1       	ldi	r24, 0x17	; 23
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	89 2f       	mov	r24, r25
     4e2:	8f 93       	push	r24
     4e4:	87 e1       	ldi	r24, 0x17	; 23
     4e6:	93 e0       	ldi	r25, 0x03	; 3
     4e8:	8f 93       	push	r24
     4ea:	0e 94 10 3b 	call	0x7620	; 0x7620 <printf>
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0

	 // Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	 printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     4f6:	84 ef       	ldi	r24, 0xF4	; 244
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	0e 94 27 31 	call	0x624e	; 0x624e <lora_driver_setReceiveDelay>
     4fe:	0e 94 3e 32 	call	0x647c	; 0x647c <lora_driver_mapReturnCodeToText>
     502:	29 2f       	mov	r18, r25
     504:	2f 93       	push	r18
     506:	8f 93       	push	r24
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	8f 93       	push	r24
     50c:	84 ef       	ldi	r24, 0xF4	; 244
     50e:	8f 93       	push	r24
     510:	88 e3       	ldi	r24, 0x38	; 56
     512:	93 e0       	ldi	r25, 0x03	; 3
     514:	89 2f       	mov	r24, r25
     516:	8f 93       	push	r24
     518:	88 e3       	ldi	r24, 0x38	; 56
     51a:	93 e0       	ldi	r25, 0x03	; 3
     51c:	8f 93       	push	r24
     51e:	0e 94 10 3b 	call	0x7620	; 0x7620 <printf>
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0

	 // Join the LoRaWAN
	 uint8_t maxJoinTriesLeft = 10;
     52e:	8a e0       	ldi	r24, 0x0A	; 10
     530:	89 83       	std	Y+1, r24	; 0x01
	 
	 do {
		 rc = lora_driver_join(LORA_OTAA);
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 28 30 	call	0x6050	; 0x6050 <lora_driver_join>
     538:	8a 83       	std	Y+2, r24	; 0x02
		 printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	0e 94 3e 32 	call	0x647c	; 0x647c <lora_driver_mapReturnCodeToText>
     540:	9c 01       	movw	r18, r24
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	88 2f       	mov	r24, r24
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	43 2f       	mov	r20, r19
     54a:	4f 93       	push	r20
     54c:	2f 93       	push	r18
     54e:	29 2f       	mov	r18, r25
     550:	2f 93       	push	r18
     552:	8f 93       	push	r24
     554:	88 e5       	ldi	r24, 0x58	; 88
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	89 2f       	mov	r24, r25
     55a:	8f 93       	push	r24
     55c:	88 e5       	ldi	r24, 0x58	; 88
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	8f 93       	push	r24
     562:	0e 94 10 3b 	call	0x7620	; 0x7620 <printf>
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0

		 if ( rc != LORA_ACCEPTED)
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	88 30       	cpi	r24, 0x08	; 8
     576:	81 f0       	breq	.+32     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
		 {
			 // Make the red led pulse to tell something went wrong
			 status_leds_longPuls(led_ST1); // OPTIONAL
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 2a 38 	call	0x7054	; 0x7054 <status_leds_longPuls>
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
     57e:	66 e3       	ldi	r22, 0x36	; 54
     580:	71 e0       	ldi	r23, 0x01	; 1
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <vTaskDelay>
		 }
		 else
		 {
			 break;
		 }
	 } while (--maxJoinTriesLeft);
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	81 50       	subi	r24, 0x01	; 1
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	88 23       	and	r24, r24
     594:	71 f6       	brne	.-100    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     596:	01 c0       	rjmp	.+2      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
		 }
		 else
		 {
			 break;
     598:	00 00       	nop
		 }
	 } while (--maxJoinTriesLeft);

	 if (rc == LORA_ACCEPTED)
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	88 30       	cpi	r24, 0x08	; 8
     59e:	21 f4       	brne	.+8      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
	 {
		 // Connected to LoRaWAN :-)
		 // Make the green led steady
		 status_leds_ledOn(led_ST2); // OPTIONAL
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 0c 38 	call	0x7018	; 0x7018 <status_leds_ledOn>
		 while (1)
		 {
			 taskYIELD();
		 }
	 }
     5a6:	08 c0       	rjmp	.+16     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
	 }
	 else
	 {
		 // Something went wrong
		 // Turn off the green led
		 status_leds_ledOff(led_ST2); // OPTIONAL
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 1b 38 	call	0x7036	; 0x7036 <status_leds_ledOff>
		 // Make the red led blink fast to tell something went wrong
		 status_leds_fastBlink(led_ST1); // OPTIONAL
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <status_leds_fastBlink>

		 // Lets stay here
		 while (1)
		 {
			 taskYIELD();
     5b4:	b0 d4       	rcall	.+2400   	; 0xf16 <vPortYield>
		 }
     5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
	 }
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* This just exists to keep the linker quiet. */
}
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	2a 97       	sbiw	r28, 0x0a	; 10
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	9a 87       	std	Y+10, r25	; 0x0a
     5d8:	89 87       	std	Y+9, r24	; 0x09
     5da:	1e 82       	std	Y+6, r1	; 0x06
     5dc:	1d 82       	std	Y+5, r1	; 0x05
     5de:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <vTaskSuspendAll>
     5e2:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <pxEnd>
     5e6:	90 91 ff 10 	lds	r25, 0x10FF	; 0x8010ff <pxEnd+0x1>
     5ea:	89 2b       	or	r24, r25
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <pvPortMalloc+0x2e>
     5ee:	6e d1       	rcall	.+732    	; 0x8cc <prvHeapInit>
     5f0:	20 91 08 11 	lds	r18, 0x1108	; 0x801108 <xBlockAllocatedBit>
     5f4:	30 91 09 11 	lds	r19, 0x1109	; 0x801109 <xBlockAllocatedBit+0x1>
     5f8:	89 85       	ldd	r24, Y+9	; 0x09
     5fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     5fc:	82 23       	and	r24, r18
     5fe:	93 23       	and	r25, r19
     600:	89 2b       	or	r24, r25
     602:	09 f0       	breq	.+2      	; 0x606 <pvPortMalloc+0x44>
     604:	e1 c0       	rjmp	.+450    	; 0x7c8 <pvPortMalloc+0x206>
     606:	89 85       	ldd	r24, Y+9	; 0x09
     608:	9a 85       	ldd	r25, Y+10	; 0x0a
     60a:	89 2b       	or	r24, r25
     60c:	a1 f0       	breq	.+40     	; 0x636 <pvPortMalloc+0x74>
     60e:	24 e0       	ldi	r18, 0x04	; 4
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	89 85       	ldd	r24, Y+9	; 0x09
     614:	9a 85       	ldd	r25, Y+10	; 0x0a
     616:	28 0f       	add	r18, r24
     618:	39 1f       	adc	r19, r25
     61a:	89 85       	ldd	r24, Y+9	; 0x09
     61c:	9a 85       	ldd	r25, Y+10	; 0x0a
     61e:	82 17       	cp	r24, r18
     620:	93 07       	cpc	r25, r19
     622:	48 f4       	brcc	.+18     	; 0x636 <pvPortMalloc+0x74>
     624:	84 e0       	ldi	r24, 0x04	; 4
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	29 85       	ldd	r18, Y+9	; 0x09
     62a:	3a 85       	ldd	r19, Y+10	; 0x0a
     62c:	82 0f       	add	r24, r18
     62e:	93 1f       	adc	r25, r19
     630:	9a 87       	std	Y+10, r25	; 0x0a
     632:	89 87       	std	Y+9, r24	; 0x09
     634:	02 c0       	rjmp	.+4      	; 0x63a <pvPortMalloc+0x78>
     636:	1a 86       	std	Y+10, r1	; 0x0a
     638:	19 86       	std	Y+9, r1	; 0x09
     63a:	89 85       	ldd	r24, Y+9	; 0x09
     63c:	9a 85       	ldd	r25, Y+10	; 0x0a
     63e:	89 2b       	or	r24, r25
     640:	09 f4       	brne	.+2      	; 0x644 <pvPortMalloc+0x82>
     642:	c2 c0       	rjmp	.+388    	; 0x7c8 <pvPortMalloc+0x206>
     644:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <xFreeBytesRemaining>
     648:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <xFreeBytesRemaining+0x1>
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	82 17       	cp	r24, r18
     652:	93 07       	cpc	r25, r19
     654:	08 f4       	brcc	.+2      	; 0x658 <pvPortMalloc+0x96>
     656:	b8 c0       	rjmp	.+368    	; 0x7c8 <pvPortMalloc+0x206>
     658:	8a ef       	ldi	r24, 0xFA	; 250
     65a:	90 e1       	ldi	r25, 0x10	; 16
     65c:	9c 83       	std	Y+4, r25	; 0x04
     65e:	8b 83       	std	Y+3, r24	; 0x03
     660:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <xStart>
     664:	90 91 fb 10 	lds	r25, 0x10FB	; 0x8010fb <xStart+0x1>
     668:	9a 83       	std	Y+2, r25	; 0x02
     66a:	89 83       	std	Y+1, r24	; 0x01
     66c:	0b c0       	rjmp	.+22     	; 0x684 <pvPortMalloc+0xc2>
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	9a 81       	ldd	r25, Y+2	; 0x02
     672:	9c 83       	std	Y+4, r25	; 0x04
     674:	8b 83       	std	Y+3, r24	; 0x03
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	fc 01       	movw	r30, r24
     67c:	80 81       	ld	r24, Z
     67e:	91 81       	ldd	r25, Z+1	; 0x01
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	89 83       	std	Y+1, r24	; 0x01
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	fc 01       	movw	r30, r24
     68a:	22 81       	ldd	r18, Z+2	; 0x02
     68c:	33 81       	ldd	r19, Z+3	; 0x03
     68e:	89 85       	ldd	r24, Y+9	; 0x09
     690:	9a 85       	ldd	r25, Y+10	; 0x0a
     692:	28 17       	cp	r18, r24
     694:	39 07       	cpc	r19, r25
     696:	38 f4       	brcc	.+14     	; 0x6a6 <pvPortMalloc+0xe4>
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	9a 81       	ldd	r25, Y+2	; 0x02
     69c:	fc 01       	movw	r30, r24
     69e:	80 81       	ld	r24, Z
     6a0:	91 81       	ldd	r25, Z+1	; 0x01
     6a2:	89 2b       	or	r24, r25
     6a4:	21 f7       	brne	.-56     	; 0x66e <pvPortMalloc+0xac>
     6a6:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <pxEnd>
     6aa:	90 91 ff 10 	lds	r25, 0x10FF	; 0x8010ff <pxEnd+0x1>
     6ae:	29 81       	ldd	r18, Y+1	; 0x01
     6b0:	3a 81       	ldd	r19, Y+2	; 0x02
     6b2:	28 17       	cp	r18, r24
     6b4:	39 07       	cpc	r19, r25
     6b6:	09 f4       	brne	.+2      	; 0x6ba <pvPortMalloc+0xf8>
     6b8:	87 c0       	rjmp	.+270    	; 0x7c8 <pvPortMalloc+0x206>
     6ba:	8b 81       	ldd	r24, Y+3	; 0x03
     6bc:	9c 81       	ldd	r25, Y+4	; 0x04
     6be:	fc 01       	movw	r30, r24
     6c0:	20 81       	ld	r18, Z
     6c2:	31 81       	ldd	r19, Z+1	; 0x01
     6c4:	84 e0       	ldi	r24, 0x04	; 4
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	82 0f       	add	r24, r18
     6ca:	93 1f       	adc	r25, r19
     6cc:	9e 83       	std	Y+6, r25	; 0x06
     6ce:	8d 83       	std	Y+5, r24	; 0x05
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 81       	ld	r18, Z
     6d8:	31 81       	ldd	r19, Z+1	; 0x01
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	9c 81       	ldd	r25, Y+4	; 0x04
     6de:	fc 01       	movw	r30, r24
     6e0:	31 83       	std	Z+1, r19	; 0x01
     6e2:	20 83       	st	Z, r18
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	fc 01       	movw	r30, r24
     6ea:	22 81       	ldd	r18, Z+2	; 0x02
     6ec:	33 81       	ldd	r19, Z+3	; 0x03
     6ee:	89 85       	ldd	r24, Y+9	; 0x09
     6f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f2:	28 1b       	sub	r18, r24
     6f4:	39 0b       	sbc	r19, r25
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	82 17       	cp	r24, r18
     700:	93 07       	cpc	r25, r19
     702:	00 f5       	brcc	.+64     	; 0x744 <pvPortMalloc+0x182>
     704:	29 81       	ldd	r18, Y+1	; 0x01
     706:	3a 81       	ldd	r19, Y+2	; 0x02
     708:	89 85       	ldd	r24, Y+9	; 0x09
     70a:	9a 85       	ldd	r25, Y+10	; 0x0a
     70c:	82 0f       	add	r24, r18
     70e:	93 1f       	adc	r25, r19
     710:	98 87       	std	Y+8, r25	; 0x08
     712:	8f 83       	std	Y+7, r24	; 0x07
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	fc 01       	movw	r30, r24
     71a:	22 81       	ldd	r18, Z+2	; 0x02
     71c:	33 81       	ldd	r19, Z+3	; 0x03
     71e:	89 85       	ldd	r24, Y+9	; 0x09
     720:	9a 85       	ldd	r25, Y+10	; 0x0a
     722:	28 1b       	sub	r18, r24
     724:	39 0b       	sbc	r19, r25
     726:	8f 81       	ldd	r24, Y+7	; 0x07
     728:	98 85       	ldd	r25, Y+8	; 0x08
     72a:	fc 01       	movw	r30, r24
     72c:	33 83       	std	Z+3, r19	; 0x03
     72e:	22 83       	std	Z+2, r18	; 0x02
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	9a 81       	ldd	r25, Y+2	; 0x02
     734:	29 85       	ldd	r18, Y+9	; 0x09
     736:	3a 85       	ldd	r19, Y+10	; 0x0a
     738:	fc 01       	movw	r30, r24
     73a:	33 83       	std	Z+3, r19	; 0x03
     73c:	22 83       	std	Z+2, r18	; 0x02
     73e:	8f 81       	ldd	r24, Y+7	; 0x07
     740:	98 85       	ldd	r25, Y+8	; 0x08
     742:	44 d1       	rcall	.+648    	; 0x9cc <prvInsertBlockIntoFreeList>
     744:	20 91 00 11 	lds	r18, 0x1100	; 0x801100 <xFreeBytesRemaining>
     748:	30 91 01 11 	lds	r19, 0x1101	; 0x801101 <xFreeBytesRemaining+0x1>
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	9a 81       	ldd	r25, Y+2	; 0x02
     750:	fc 01       	movw	r30, r24
     752:	82 81       	ldd	r24, Z+2	; 0x02
     754:	93 81       	ldd	r25, Z+3	; 0x03
     756:	a9 01       	movw	r20, r18
     758:	48 1b       	sub	r20, r24
     75a:	59 0b       	sbc	r21, r25
     75c:	ca 01       	movw	r24, r20
     75e:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <xFreeBytesRemaining+0x1>
     762:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <xFreeBytesRemaining>
     766:	20 91 00 11 	lds	r18, 0x1100	; 0x801100 <xFreeBytesRemaining>
     76a:	30 91 01 11 	lds	r19, 0x1101	; 0x801101 <xFreeBytesRemaining+0x1>
     76e:	80 91 02 11 	lds	r24, 0x1102	; 0x801102 <xMinimumEverFreeBytesRemaining>
     772:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <xMinimumEverFreeBytesRemaining+0x1>
     776:	28 17       	cp	r18, r24
     778:	39 07       	cpc	r19, r25
     77a:	40 f4       	brcc	.+16     	; 0x78c <pvPortMalloc+0x1ca>
     77c:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <xFreeBytesRemaining>
     780:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <xFreeBytesRemaining+0x1>
     784:	90 93 03 11 	sts	0x1103, r25	; 0x801103 <xMinimumEverFreeBytesRemaining+0x1>
     788:	80 93 02 11 	sts	0x1102, r24	; 0x801102 <xMinimumEverFreeBytesRemaining>
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	9a 81       	ldd	r25, Y+2	; 0x02
     790:	fc 01       	movw	r30, r24
     792:	22 81       	ldd	r18, Z+2	; 0x02
     794:	33 81       	ldd	r19, Z+3	; 0x03
     796:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <xBlockAllocatedBit>
     79a:	90 91 09 11 	lds	r25, 0x1109	; 0x801109 <xBlockAllocatedBit+0x1>
     79e:	28 2b       	or	r18, r24
     7a0:	39 2b       	or	r19, r25
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	fc 01       	movw	r30, r24
     7a8:	33 83       	std	Z+3, r19	; 0x03
     7aa:	22 83       	std	Z+2, r18	; 0x02
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	9a 81       	ldd	r25, Y+2	; 0x02
     7b0:	fc 01       	movw	r30, r24
     7b2:	11 82       	std	Z+1, r1	; 0x01
     7b4:	10 82       	st	Z, r1
     7b6:	80 91 04 11 	lds	r24, 0x1104	; 0x801104 <xNumberOfSuccessfulAllocations>
     7ba:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <xNumberOfSuccessfulAllocations+0x1>
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	90 93 05 11 	sts	0x1105, r25	; 0x801105 <xNumberOfSuccessfulAllocations+0x1>
     7c4:	80 93 04 11 	sts	0x1104, r24	; 0x801104 <xNumberOfSuccessfulAllocations>
     7c8:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
     7cc:	8d 81       	ldd	r24, Y+5	; 0x05
     7ce:	9e 81       	ldd	r25, Y+6	; 0x06
     7d0:	89 2b       	or	r24, r25
     7d2:	11 f4       	brne	.+4      	; 0x7d8 <pvPortMalloc+0x216>
     7d4:	0e 94 31 2b 	call	0x5662	; 0x5662 <vApplicationMallocFailedHook>
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	9e 81       	ldd	r25, Y+6	; 0x06
     7dc:	2a 96       	adiw	r28, 0x0a	; 10
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <vPortFree>:
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <vPortFree+0x6>
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <vPortFree+0x8>
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	9e 83       	std	Y+6, r25	; 0x06
     7fc:	8d 83       	std	Y+5, r24	; 0x05
     7fe:	8d 81       	ldd	r24, Y+5	; 0x05
     800:	9e 81       	ldd	r25, Y+6	; 0x06
     802:	9a 83       	std	Y+2, r25	; 0x02
     804:	89 83       	std	Y+1, r24	; 0x01
     806:	8d 81       	ldd	r24, Y+5	; 0x05
     808:	9e 81       	ldd	r25, Y+6	; 0x06
     80a:	89 2b       	or	r24, r25
     80c:	09 f4       	brne	.+2      	; 0x810 <vPortFree+0x22>
     80e:	54 c0       	rjmp	.+168    	; 0x8b8 <vPortFree+0xca>
     810:	84 e0       	ldi	r24, 0x04	; 4
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	91 95       	neg	r25
     816:	81 95       	neg	r24
     818:	91 09       	sbc	r25, r1
     81a:	29 81       	ldd	r18, Y+1	; 0x01
     81c:	3a 81       	ldd	r19, Y+2	; 0x02
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	9a 83       	std	Y+2, r25	; 0x02
     824:	89 83       	std	Y+1, r24	; 0x01
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	9a 81       	ldd	r25, Y+2	; 0x02
     82a:	9c 83       	std	Y+4, r25	; 0x04
     82c:	8b 83       	std	Y+3, r24	; 0x03
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
     832:	fc 01       	movw	r30, r24
     834:	22 81       	ldd	r18, Z+2	; 0x02
     836:	33 81       	ldd	r19, Z+3	; 0x03
     838:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <xBlockAllocatedBit>
     83c:	90 91 09 11 	lds	r25, 0x1109	; 0x801109 <xBlockAllocatedBit+0x1>
     840:	82 23       	and	r24, r18
     842:	93 23       	and	r25, r19
     844:	89 2b       	or	r24, r25
     846:	c1 f1       	breq	.+112    	; 0x8b8 <vPortFree+0xca>
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	fc 01       	movw	r30, r24
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	89 2b       	or	r24, r25
     854:	89 f5       	brne	.+98     	; 0x8b8 <vPortFree+0xca>
     856:	8b 81       	ldd	r24, Y+3	; 0x03
     858:	9c 81       	ldd	r25, Y+4	; 0x04
     85a:	fc 01       	movw	r30, r24
     85c:	22 81       	ldd	r18, Z+2	; 0x02
     85e:	33 81       	ldd	r19, Z+3	; 0x03
     860:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <xBlockAllocatedBit>
     864:	90 91 09 11 	lds	r25, 0x1109	; 0x801109 <xBlockAllocatedBit+0x1>
     868:	80 95       	com	r24
     86a:	90 95       	com	r25
     86c:	28 23       	and	r18, r24
     86e:	39 23       	and	r19, r25
     870:	8b 81       	ldd	r24, Y+3	; 0x03
     872:	9c 81       	ldd	r25, Y+4	; 0x04
     874:	fc 01       	movw	r30, r24
     876:	33 83       	std	Z+3, r19	; 0x03
     878:	22 83       	std	Z+2, r18	; 0x02
     87a:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <vTaskSuspendAll>
     87e:	8b 81       	ldd	r24, Y+3	; 0x03
     880:	9c 81       	ldd	r25, Y+4	; 0x04
     882:	fc 01       	movw	r30, r24
     884:	22 81       	ldd	r18, Z+2	; 0x02
     886:	33 81       	ldd	r19, Z+3	; 0x03
     888:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <xFreeBytesRemaining>
     88c:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <xFreeBytesRemaining+0x1>
     890:	82 0f       	add	r24, r18
     892:	93 1f       	adc	r25, r19
     894:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <xFreeBytesRemaining+0x1>
     898:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <xFreeBytesRemaining>
     89c:	8b 81       	ldd	r24, Y+3	; 0x03
     89e:	9c 81       	ldd	r25, Y+4	; 0x04
     8a0:	95 d0       	rcall	.+298    	; 0x9cc <prvInsertBlockIntoFreeList>
     8a2:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <xNumberOfSuccessfulFrees>
     8a6:	90 91 07 11 	lds	r25, 0x1107	; 0x801107 <xNumberOfSuccessfulFrees+0x1>
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	90 93 07 11 	sts	0x1107, r25	; 0x801107 <xNumberOfSuccessfulFrees+0x1>
     8b0:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <xNumberOfSuccessfulFrees>
     8b4:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
     8b8:	00 00       	nop
     8ba:	26 96       	adiw	r28, 0x06	; 6
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	28 97       	sbiw	r28, 0x08	; 8
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
     8e0:	84 ec       	ldi	r24, 0xC4	; 196
     8e2:	99 e0       	ldi	r25, 0x09	; 9
     8e4:	9a 83       	std	Y+2, r25	; 0x02
     8e6:	89 83       	std	Y+1, r24	; 0x01

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
     8e8:	86 e3       	ldi	r24, 0x36	; 54
     8ea:	97 e0       	ldi	r25, 0x07	; 7
     8ec:	9c 83       	std	Y+4, r25	; 0x04
     8ee:	8b 83       	std	Y+3, r24	; 0x03
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	9c 81       	ldd	r25, Y+4	; 0x04
     8f4:	9e 83       	std	Y+6, r25	; 0x06
     8f6:	8d 83       	std	Y+5, r24	; 0x05

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     8f8:	8d 81       	ldd	r24, Y+5	; 0x05
     8fa:	9e 81       	ldd	r25, Y+6	; 0x06
     8fc:	90 93 fb 10 	sts	0x10FB, r25	; 0x8010fb <xStart+0x1>
     900:	80 93 fa 10 	sts	0x10FA, r24	; 0x8010fa <xStart>
    xStart.xBlockSize = ( size_t ) 0;
     904:	10 92 fd 10 	sts	0x10FD, r1	; 0x8010fd <xStart+0x3>
     908:	10 92 fc 10 	sts	0x10FC, r1	; 0x8010fc <xStart+0x2>

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
     90c:	2d 81       	ldd	r18, Y+5	; 0x05
     90e:	3e 81       	ldd	r19, Y+6	; 0x06
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	9a 81       	ldd	r25, Y+2	; 0x02
     914:	82 0f       	add	r24, r18
     916:	93 1f       	adc	r25, r19
     918:	9c 83       	std	Y+4, r25	; 0x04
     91a:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress -= xHeapStructSize;
     91c:	84 e0       	ldi	r24, 0x04	; 4
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	2b 81       	ldd	r18, Y+3	; 0x03
     922:	3c 81       	ldd	r19, Y+4	; 0x04
     924:	a9 01       	movw	r20, r18
     926:	48 1b       	sub	r20, r24
     928:	59 0b       	sbc	r21, r25
     92a:	ca 01       	movw	r24, r20
     92c:	9c 83       	std	Y+4, r25	; 0x04
     92e:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     930:	8b 81       	ldd	r24, Y+3	; 0x03
     932:	9c 81       	ldd	r25, Y+4	; 0x04
     934:	90 93 ff 10 	sts	0x10FF, r25	; 0x8010ff <pxEnd+0x1>
     938:	80 93 fe 10 	sts	0x10FE, r24	; 0x8010fe <pxEnd>
    pxEnd->xBlockSize = 0;
     93c:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <pxEnd>
     940:	90 91 ff 10 	lds	r25, 0x10FF	; 0x8010ff <pxEnd+0x1>
     944:	fc 01       	movw	r30, r24
     946:	13 82       	std	Z+3, r1	; 0x03
     948:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     94a:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <pxEnd>
     94e:	90 91 ff 10 	lds	r25, 0x10FF	; 0x8010ff <pxEnd+0x1>
     952:	fc 01       	movw	r30, r24
     954:	11 82       	std	Z+1, r1	; 0x01
     956:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     958:	8d 81       	ldd	r24, Y+5	; 0x05
     95a:	9e 81       	ldd	r25, Y+6	; 0x06
     95c:	98 87       	std	Y+8, r25	; 0x08
     95e:	8f 83       	std	Y+7, r24	; 0x07
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     960:	8f 81       	ldd	r24, Y+7	; 0x07
     962:	98 85       	ldd	r25, Y+8	; 0x08
     964:	2b 81       	ldd	r18, Y+3	; 0x03
     966:	3c 81       	ldd	r19, Y+4	; 0x04
     968:	28 1b       	sub	r18, r24
     96a:	39 0b       	sbc	r19, r25
     96c:	8f 81       	ldd	r24, Y+7	; 0x07
     96e:	98 85       	ldd	r25, Y+8	; 0x08
     970:	fc 01       	movw	r30, r24
     972:	33 83       	std	Z+3, r19	; 0x03
     974:	22 83       	std	Z+2, r18	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     976:	20 91 fe 10 	lds	r18, 0x10FE	; 0x8010fe <pxEnd>
     97a:	30 91 ff 10 	lds	r19, 0x10FF	; 0x8010ff <pxEnd+0x1>
     97e:	8f 81       	ldd	r24, Y+7	; 0x07
     980:	98 85       	ldd	r25, Y+8	; 0x08
     982:	fc 01       	movw	r30, r24
     984:	31 83       	std	Z+1, r19	; 0x01
     986:	20 83       	st	Z, r18

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     988:	8f 81       	ldd	r24, Y+7	; 0x07
     98a:	98 85       	ldd	r25, Y+8	; 0x08
     98c:	fc 01       	movw	r30, r24
     98e:	82 81       	ldd	r24, Z+2	; 0x02
     990:	93 81       	ldd	r25, Z+3	; 0x03
     992:	90 93 03 11 	sts	0x1103, r25	; 0x801103 <xMinimumEverFreeBytesRemaining+0x1>
     996:	80 93 02 11 	sts	0x1102, r24	; 0x801102 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     99a:	8f 81       	ldd	r24, Y+7	; 0x07
     99c:	98 85       	ldd	r25, Y+8	; 0x08
     99e:	fc 01       	movw	r30, r24
     9a0:	82 81       	ldd	r24, Z+2	; 0x02
     9a2:	93 81       	ldd	r25, Z+3	; 0x03
     9a4:	90 93 01 11 	sts	0x1101, r25	; 0x801101 <xFreeBytesRemaining+0x1>
     9a8:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e8       	ldi	r25, 0x80	; 128
     9b0:	90 93 09 11 	sts	0x1109, r25	; 0x801109 <xBlockAllocatedBit+0x1>
     9b4:	80 93 08 11 	sts	0x1108, r24	; 0x801108 <xBlockAllocatedBit>
}
     9b8:	00 00       	nop
     9ba:	28 96       	adiw	r28, 0x08	; 8
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <prvInsertBlockIntoFreeList+0x6>
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <prvInsertBlockIntoFreeList+0x8>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	9e 83       	std	Y+6, r25	; 0x06
     9da:	8d 83       	std	Y+5, r24	; 0x05
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     9dc:	8a ef       	ldi	r24, 0xFA	; 250
     9de:	90 e1       	ldi	r25, 0x10	; 16
     9e0:	9a 83       	std	Y+2, r25	; 0x02
     9e2:	89 83       	std	Y+1, r24	; 0x01
     9e4:	07 c0       	rjmp	.+14     	; 0x9f4 <prvInsertBlockIntoFreeList+0x28>
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ea:	fc 01       	movw	r30, r24
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	9a 83       	std	Y+2, r25	; 0x02
     9f2:	89 83       	std	Y+1, r24	; 0x01
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 81       	ld	r18, Z
     9fc:	31 81       	ldd	r19, Z+1	; 0x01
     9fe:	8d 81       	ldd	r24, Y+5	; 0x05
     a00:	9e 81       	ldd	r25, Y+6	; 0x06
     a02:	28 17       	cp	r18, r24
     a04:	39 07       	cpc	r19, r25
     a06:	78 f3       	brcs	.-34     	; 0x9e6 <prvInsertBlockIntoFreeList+0x1a>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
     a0c:	9c 83       	std	Y+4, r25	; 0x04
     a0e:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	9a 81       	ldd	r25, Y+2	; 0x02
     a14:	fc 01       	movw	r30, r24
     a16:	82 81       	ldd	r24, Z+2	; 0x02
     a18:	93 81       	ldd	r25, Z+3	; 0x03
     a1a:	2b 81       	ldd	r18, Y+3	; 0x03
     a1c:	3c 81       	ldd	r19, Y+4	; 0x04
     a1e:	28 0f       	add	r18, r24
     a20:	39 1f       	adc	r19, r25
     a22:	8d 81       	ldd	r24, Y+5	; 0x05
     a24:	9e 81       	ldd	r25, Y+6	; 0x06
     a26:	28 17       	cp	r18, r24
     a28:	39 07       	cpc	r19, r25
     a2a:	a9 f4       	brne	.+42     	; 0xa56 <prvInsertBlockIntoFreeList+0x8a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	fc 01       	movw	r30, r24
     a32:	22 81       	ldd	r18, Z+2	; 0x02
     a34:	33 81       	ldd	r19, Z+3	; 0x03
     a36:	8d 81       	ldd	r24, Y+5	; 0x05
     a38:	9e 81       	ldd	r25, Y+6	; 0x06
     a3a:	fc 01       	movw	r30, r24
     a3c:	82 81       	ldd	r24, Z+2	; 0x02
     a3e:	93 81       	ldd	r25, Z+3	; 0x03
     a40:	28 0f       	add	r18, r24
     a42:	39 1f       	adc	r19, r25
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	fc 01       	movw	r30, r24
     a4a:	33 83       	std	Z+3, r19	; 0x03
     a4c:	22 83       	std	Z+2, r18	; 0x02
        pxBlockToInsert = pxIterator;
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
     a52:	9e 83       	std	Y+6, r25	; 0x06
     a54:	8d 83       	std	Y+5, r24	; 0x05
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
     a56:	8d 81       	ldd	r24, Y+5	; 0x05
     a58:	9e 81       	ldd	r25, Y+6	; 0x06
     a5a:	9c 83       	std	Y+4, r25	; 0x04
     a5c:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     a5e:	8d 81       	ldd	r24, Y+5	; 0x05
     a60:	9e 81       	ldd	r25, Y+6	; 0x06
     a62:	fc 01       	movw	r30, r24
     a64:	82 81       	ldd	r24, Z+2	; 0x02
     a66:	93 81       	ldd	r25, Z+3	; 0x03
     a68:	2b 81       	ldd	r18, Y+3	; 0x03
     a6a:	3c 81       	ldd	r19, Y+4	; 0x04
     a6c:	28 0f       	add	r18, r24
     a6e:	39 1f       	adc	r19, r25
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	9a 81       	ldd	r25, Y+2	; 0x02
     a74:	fc 01       	movw	r30, r24
     a76:	80 81       	ld	r24, Z
     a78:	91 81       	ldd	r25, Z+1	; 0x01
     a7a:	28 17       	cp	r18, r24
     a7c:	39 07       	cpc	r19, r25
     a7e:	c1 f5       	brne	.+112    	; 0xaf0 <prvInsertBlockIntoFreeList+0x124>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	9a 81       	ldd	r25, Y+2	; 0x02
     a84:	fc 01       	movw	r30, r24
     a86:	20 81       	ld	r18, Z
     a88:	31 81       	ldd	r19, Z+1	; 0x01
     a8a:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <pxEnd>
     a8e:	90 91 ff 10 	lds	r25, 0x10FF	; 0x8010ff <pxEnd+0x1>
     a92:	28 17       	cp	r18, r24
     a94:	39 07       	cpc	r19, r25
     a96:	11 f1       	breq	.+68     	; 0xadc <prvInsertBlockIntoFreeList+0x110>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     a98:	8d 81       	ldd	r24, Y+5	; 0x05
     a9a:	9e 81       	ldd	r25, Y+6	; 0x06
     a9c:	fc 01       	movw	r30, r24
     a9e:	22 81       	ldd	r18, Z+2	; 0x02
     aa0:	33 81       	ldd	r19, Z+3	; 0x03
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	fc 01       	movw	r30, r24
     aa8:	80 81       	ld	r24, Z
     aaa:	91 81       	ldd	r25, Z+1	; 0x01
     aac:	fc 01       	movw	r30, r24
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	93 81       	ldd	r25, Z+3	; 0x03
     ab2:	28 0f       	add	r18, r24
     ab4:	39 1f       	adc	r19, r25
     ab6:	8d 81       	ldd	r24, Y+5	; 0x05
     ab8:	9e 81       	ldd	r25, Y+6	; 0x06
     aba:	fc 01       	movw	r30, r24
     abc:	33 83       	std	Z+3, r19	; 0x03
     abe:	22 83       	std	Z+2, r18	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	fc 01       	movw	r30, r24
     ac6:	80 81       	ld	r24, Z
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	fc 01       	movw	r30, r24
     acc:	20 81       	ld	r18, Z
     ace:	31 81       	ldd	r19, Z+1	; 0x01
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	fc 01       	movw	r30, r24
     ad6:	31 83       	std	Z+1, r19	; 0x01
     ad8:	20 83       	st	Z, r18
     ada:	14 c0       	rjmp	.+40     	; 0xb04 <prvInsertBlockIntoFreeList+0x138>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     adc:	20 91 fe 10 	lds	r18, 0x10FE	; 0x8010fe <pxEnd>
     ae0:	30 91 ff 10 	lds	r19, 0x10FF	; 0x8010ff <pxEnd+0x1>
     ae4:	8d 81       	ldd	r24, Y+5	; 0x05
     ae6:	9e 81       	ldd	r25, Y+6	; 0x06
     ae8:	fc 01       	movw	r30, r24
     aea:	31 83       	std	Z+1, r19	; 0x01
     aec:	20 83       	st	Z, r18
     aee:	0a c0       	rjmp	.+20     	; 0xb04 <prvInsertBlockIntoFreeList+0x138>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	9a 81       	ldd	r25, Y+2	; 0x02
     af4:	fc 01       	movw	r30, r24
     af6:	20 81       	ld	r18, Z
     af8:	31 81       	ldd	r19, Z+1	; 0x01
     afa:	8d 81       	ldd	r24, Y+5	; 0x05
     afc:	9e 81       	ldd	r25, Y+6	; 0x06
     afe:	fc 01       	movw	r30, r24
     b00:	31 83       	std	Z+1, r19	; 0x01
     b02:	20 83       	st	Z, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     b04:	29 81       	ldd	r18, Y+1	; 0x01
     b06:	3a 81       	ldd	r19, Y+2	; 0x02
     b08:	8d 81       	ldd	r24, Y+5	; 0x05
     b0a:	9e 81       	ldd	r25, Y+6	; 0x06
     b0c:	28 17       	cp	r18, r24
     b0e:	39 07       	cpc	r19, r25
     b10:	39 f0       	breq	.+14     	; 0xb20 <prvInsertBlockIntoFreeList+0x154>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	9a 81       	ldd	r25, Y+2	; 0x02
     b16:	2d 81       	ldd	r18, Y+5	; 0x05
     b18:	3e 81       	ldd	r19, Y+6	; 0x06
     b1a:	fc 01       	movw	r30, r24
     b1c:	31 83       	std	Z+1, r19	; 0x01
     b1e:	20 83       	st	Z, r18
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     b20:	00 00       	nop
     b22:	26 96       	adiw	r28, 0x06	; 6
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	1f 92       	push	r1
     b3a:	1f 92       	push	r1
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
     b48:	9c 01       	movw	r18, r24
     b4a:	2d 5f       	subi	r18, 0xFD	; 253
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	fc 01       	movw	r30, r24
     b54:	32 83       	std	Z+2, r19	; 0x02
     b56:	21 83       	std	Z+1, r18	; 0x01
     b58:	29 81       	ldd	r18, Y+1	; 0x01
     b5a:	3a 81       	ldd	r19, Y+2	; 0x02
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	9f ef       	ldi	r25, 0xFF	; 255
     b60:	dc 01       	movw	r26, r24
     b62:	f9 01       	movw	r30, r18
     b64:	83 83       	std	Z+3, r24	; 0x03
     b66:	94 83       	std	Z+4, r25	; 0x04
     b68:	a5 83       	std	Z+5, r26	; 0x05
     b6a:	b6 83       	std	Z+6, r27	; 0x06
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	9c 01       	movw	r18, r24
     b72:	2d 5f       	subi	r18, 0xFD	; 253
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	fc 01       	movw	r30, r24
     b7c:	30 87       	std	Z+8, r19	; 0x08
     b7e:	27 83       	std	Z+7, r18	; 0x07
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	9c 01       	movw	r18, r24
     b86:	2d 5f       	subi	r18, 0xFD	; 253
     b88:	3f 4f       	sbci	r19, 0xFF	; 255
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	fc 01       	movw	r30, r24
     b90:	32 87       	std	Z+10, r19	; 0x0a
     b92:	21 87       	std	Z+9, r18	; 0x09
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	fc 01       	movw	r30, r24
     b9a:	10 82       	st	Z, r1
     b9c:	00 00       	nop
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <vListInitialiseItem>:
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	1f 92       	push	r1
     bae:	1f 92       	push	r1
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	9a 83       	std	Y+2, r25	; 0x02
     bb6:	89 83       	std	Y+1, r24	; 0x01
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	fc 01       	movw	r30, r24
     bbe:	13 86       	std	Z+11, r1	; 0x0b
     bc0:	12 86       	std	Z+10, r1	; 0x0a
     bc2:	00 00       	nop
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	2a 97       	sbiw	r28, 0x0a	; 10
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	98 87       	std	Y+8, r25	; 0x08
     be4:	8f 83       	std	Y+7, r24	; 0x07
     be6:	7a 87       	std	Y+10, r23	; 0x0a
     be8:	69 87       	std	Y+9, r22	; 0x09
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     bea:	89 85       	ldd	r24, Y+9	; 0x09
     bec:	9a 85       	ldd	r25, Y+10	; 0x0a
     bee:	fc 01       	movw	r30, r24
     bf0:	80 81       	ld	r24, Z
     bf2:	91 81       	ldd	r25, Z+1	; 0x01
     bf4:	a2 81       	ldd	r26, Z+2	; 0x02
     bf6:	b3 81       	ldd	r27, Z+3	; 0x03
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	9c 83       	std	Y+4, r25	; 0x04
     bfc:	ad 83       	std	Y+5, r26	; 0x05
     bfe:	be 83       	std	Y+6, r27	; 0x06
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	9c 81       	ldd	r25, Y+4	; 0x04
     c04:	ad 81       	ldd	r26, Y+5	; 0x05
     c06:	be 81       	ldd	r27, Y+6	; 0x06
     c08:	8f 3f       	cpi	r24, 0xFF	; 255
     c0a:	9f 4f       	sbci	r25, 0xFF	; 255
     c0c:	af 4f       	sbci	r26, 0xFF	; 255
     c0e:	bf 4f       	sbci	r27, 0xFF	; 255
     c10:	41 f4       	brne	.+16     	; 0xc22 <vListInsert+0x54>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c12:	8f 81       	ldd	r24, Y+7	; 0x07
     c14:	98 85       	ldd	r25, Y+8	; 0x08
     c16:	fc 01       	movw	r30, r24
     c18:	81 85       	ldd	r24, Z+9	; 0x09
     c1a:	92 85       	ldd	r25, Z+10	; 0x0a
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	20 c0       	rjmp	.+64     	; 0xc62 <vListInsert+0x94>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c22:	8f 81       	ldd	r24, Y+7	; 0x07
     c24:	98 85       	ldd	r25, Y+8	; 0x08
     c26:	03 96       	adiw	r24, 0x03	; 3
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	07 c0       	rjmp	.+14     	; 0xc3c <vListInsert+0x6e>
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	fc 01       	movw	r30, r24
     c34:	84 81       	ldd	r24, Z+4	; 0x04
     c36:	95 81       	ldd	r25, Z+5	; 0x05
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	fc 01       	movw	r30, r24
     c42:	84 81       	ldd	r24, Z+4	; 0x04
     c44:	95 81       	ldd	r25, Z+5	; 0x05
     c46:	fc 01       	movw	r30, r24
     c48:	20 81       	ld	r18, Z
     c4a:	31 81       	ldd	r19, Z+1	; 0x01
     c4c:	42 81       	ldd	r20, Z+2	; 0x02
     c4e:	53 81       	ldd	r21, Z+3	; 0x03
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	9c 81       	ldd	r25, Y+4	; 0x04
     c54:	ad 81       	ldd	r26, Y+5	; 0x05
     c56:	be 81       	ldd	r27, Y+6	; 0x06
     c58:	82 17       	cp	r24, r18
     c5a:	93 07       	cpc	r25, r19
     c5c:	a4 07       	cpc	r26, r20
     c5e:	b5 07       	cpc	r27, r21
     c60:	30 f7       	brcc	.-52     	; 0xc2e <vListInsert+0x60>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	9a 81       	ldd	r25, Y+2	; 0x02
     c66:	fc 01       	movw	r30, r24
     c68:	24 81       	ldd	r18, Z+4	; 0x04
     c6a:	35 81       	ldd	r19, Z+5	; 0x05
     c6c:	89 85       	ldd	r24, Y+9	; 0x09
     c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c70:	fc 01       	movw	r30, r24
     c72:	35 83       	std	Z+5, r19	; 0x05
     c74:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c76:	89 85       	ldd	r24, Y+9	; 0x09
     c78:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7a:	fc 01       	movw	r30, r24
     c7c:	84 81       	ldd	r24, Z+4	; 0x04
     c7e:	95 81       	ldd	r25, Z+5	; 0x05
     c80:	29 85       	ldd	r18, Y+9	; 0x09
     c82:	3a 85       	ldd	r19, Y+10	; 0x0a
     c84:	fc 01       	movw	r30, r24
     c86:	37 83       	std	Z+7, r19	; 0x07
     c88:	26 83       	std	Z+6, r18	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c8a:	89 85       	ldd	r24, Y+9	; 0x09
     c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8e:	29 81       	ldd	r18, Y+1	; 0x01
     c90:	3a 81       	ldd	r19, Y+2	; 0x02
     c92:	fc 01       	movw	r30, r24
     c94:	37 83       	std	Z+7, r19	; 0x07
     c96:	26 83       	std	Z+6, r18	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	29 85       	ldd	r18, Y+9	; 0x09
     c9e:	3a 85       	ldd	r19, Y+10	; 0x0a
     ca0:	fc 01       	movw	r30, r24
     ca2:	35 83       	std	Z+5, r19	; 0x05
     ca4:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     ca6:	89 85       	ldd	r24, Y+9	; 0x09
     ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
     caa:	2f 81       	ldd	r18, Y+7	; 0x07
     cac:	38 85       	ldd	r19, Y+8	; 0x08
     cae:	fc 01       	movw	r30, r24
     cb0:	33 87       	std	Z+11, r19	; 0x0b
     cb2:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     cb4:	8f 81       	ldd	r24, Y+7	; 0x07
     cb6:	98 85       	ldd	r25, Y+8	; 0x08
     cb8:	fc 01       	movw	r30, r24
     cba:	80 81       	ld	r24, Z
     cbc:	21 e0       	ldi	r18, 0x01	; 1
     cbe:	28 0f       	add	r18, r24
     cc0:	8f 81       	ldd	r24, Y+7	; 0x07
     cc2:	98 85       	ldd	r25, Y+8	; 0x08
     cc4:	fc 01       	movw	r30, r24
     cc6:	20 83       	st	Z, r18
}
     cc8:	00 00       	nop
     cca:	2a 96       	adiw	r28, 0x0a	; 10
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <uxListRemove+0x6>
     ce2:	1f 92       	push	r1
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	9c 83       	std	Y+4, r25	; 0x04
     cea:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	fc 01       	movw	r30, r24
     cf2:	82 85       	ldd	r24, Z+10	; 0x0a
     cf4:	93 85       	ldd	r25, Z+11	; 0x0b
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	fc 01       	movw	r30, r24
     d00:	84 81       	ldd	r24, Z+4	; 0x04
     d02:	95 81       	ldd	r25, Z+5	; 0x05
     d04:	2b 81       	ldd	r18, Y+3	; 0x03
     d06:	3c 81       	ldd	r19, Y+4	; 0x04
     d08:	f9 01       	movw	r30, r18
     d0a:	26 81       	ldd	r18, Z+6	; 0x06
     d0c:	37 81       	ldd	r19, Z+7	; 0x07
     d0e:	fc 01       	movw	r30, r24
     d10:	37 83       	std	Z+7, r19	; 0x07
     d12:	26 83       	std	Z+6, r18	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	9c 81       	ldd	r25, Y+4	; 0x04
     d18:	fc 01       	movw	r30, r24
     d1a:	86 81       	ldd	r24, Z+6	; 0x06
     d1c:	97 81       	ldd	r25, Z+7	; 0x07
     d1e:	2b 81       	ldd	r18, Y+3	; 0x03
     d20:	3c 81       	ldd	r19, Y+4	; 0x04
     d22:	f9 01       	movw	r30, r18
     d24:	24 81       	ldd	r18, Z+4	; 0x04
     d26:	35 81       	ldd	r19, Z+5	; 0x05
     d28:	fc 01       	movw	r30, r24
     d2a:	35 83       	std	Z+5, r19	; 0x05
     d2c:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	fc 01       	movw	r30, r24
     d34:	21 81       	ldd	r18, Z+1	; 0x01
     d36:	32 81       	ldd	r19, Z+2	; 0x02
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	9c 81       	ldd	r25, Y+4	; 0x04
     d3c:	28 17       	cp	r18, r24
     d3e:	39 07       	cpc	r19, r25
     d40:	51 f4       	brne	.+20     	; 0xd56 <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	fc 01       	movw	r30, r24
     d48:	26 81       	ldd	r18, Z+6	; 0x06
     d4a:	37 81       	ldd	r19, Z+7	; 0x07
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	fc 01       	movw	r30, r24
     d52:	32 83       	std	Z+2, r19	; 0x02
     d54:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	9c 81       	ldd	r25, Y+4	; 0x04
     d5a:	fc 01       	movw	r30, r24
     d5c:	13 86       	std	Z+11, r1	; 0x0b
     d5e:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	fc 01       	movw	r30, r24
     d66:	80 81       	ld	r24, Z
     d68:	2f ef       	ldi	r18, 0xFF	; 255
     d6a:	28 0f       	add	r18, r24
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	fc 01       	movw	r30, r24
     d72:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	fc 01       	movw	r30, r24
     d7a:	80 81       	ld	r24, Z
}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <pxPortInitialiseStack>:
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
}
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	28 97       	sbiw	r28, 0x08	; 8
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	8b 83       	std	Y+3, r24	; 0x03
     da2:	7e 83       	std	Y+6, r23	; 0x06
     da4:	6d 83       	std	Y+5, r22	; 0x05
     da6:	58 87       	std	Y+8, r21	; 0x08
     da8:	4f 83       	std	Y+7, r20	; 0x07
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	29 81       	ldd	r18, Y+1	; 0x01
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	9c 81       	ldd	r25, Y+4	; 0x04
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	9c 83       	std	Y+4, r25	; 0x04
     dc4:	8b 83       	std	Y+3, r24	; 0x03
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	89 2f       	mov	r24, r25
     dcc:	99 27       	eor	r25, r25
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	29 81       	ldd	r18, Y+1	; 0x01
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	9c 81       	ldd	r25, Y+4	; 0x04
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	8b 83       	std	Y+3, r24	; 0x03
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	9c 81       	ldd	r25, Y+4	; 0x04
     dea:	fc 01       	movw	r30, r24
     dec:	10 82       	st	Z, r1
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	8b 83       	std	Y+3, r24	; 0x03
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	fc 01       	movw	r30, r24
     dfe:	10 82       	st	Z, r1
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	9c 81       	ldd	r25, Y+4	; 0x04
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9c 83       	std	Y+4, r25	; 0x04
     e08:	8b 83       	std	Y+3, r24	; 0x03
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	20 e8       	ldi	r18, 0x80	; 128
     e10:	fc 01       	movw	r30, r24
     e12:	20 83       	st	Z, r18
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	8b 83       	std	Y+3, r24	; 0x03
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	fc 01       	movw	r30, r24
     e24:	10 82       	st	Z, r1
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	9c 83       	std	Y+4, r25	; 0x04
     e2e:	8b 83       	std	Y+3, r24	; 0x03
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	fc 01       	movw	r30, r24
     e36:	10 82       	st	Z, r1
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	9c 83       	std	Y+4, r25	; 0x04
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	fc 01       	movw	r30, r24
     e48:	10 82       	st	Z, r1
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	47 97       	sbiw	r24, 0x17	; 23
     e50:	9c 83       	std	Y+4, r25	; 0x04
     e52:	8b 83       	std	Y+3, r24	; 0x03
     e54:	8f 81       	ldd	r24, Y+7	; 0x07
     e56:	98 85       	ldd	r25, Y+8	; 0x08
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	29 81       	ldd	r18, Y+1	; 0x01
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	89 2f       	mov	r24, r25
     e76:	99 27       	eor	r25, r25
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	29 81       	ldd	r18, Y+1	; 0x01
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	fc 01       	movw	r30, r24
     e84:	20 83       	st	Z, r18
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	9c 81       	ldd	r25, Y+4	; 0x04
     e8a:	07 97       	sbiw	r24, 0x07	; 7
     e8c:	9c 83       	std	Y+4, r25	; 0x04
     e8e:	8b 83       	std	Y+3, r24	; 0x03
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	28 96       	adiw	r28, 0x08	; 8
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	de bf       	out	0x3e, r29	; 62
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	cd bf       	out	0x3d, r28	; 61
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <xPortStartScheduler>:
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	ff d0       	rcall	.+510    	; 0x10ae <prvSetupTimerInterrupt>
     eb0:	a0 91 0a 11 	lds	r26, 0x110A	; 0x80110a <pxCurrentTCB>
     eb4:	b0 91 0b 11 	lds	r27, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
     eb8:	cd 91       	ld	r28, X+
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	dd 91       	ld	r29, X+
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	bf 90       	pop	r11
     eea:	af 90       	pop	r10
     eec:	9f 90       	pop	r9
     eee:	8f 90       	pop	r8
     ef0:	7f 90       	pop	r7
     ef2:	6f 90       	pop	r6
     ef4:	5f 90       	pop	r5
     ef6:	4f 90       	pop	r4
     ef8:	3f 90       	pop	r3
     efa:	2f 90       	pop	r2
     efc:	1f 90       	pop	r1
     efe:	0f 90       	pop	r0
     f00:	0c be       	out	0x3c, r0	; 60
     f02:	0f 90       	pop	r0
     f04:	0b be       	out	0x3b, r0	; 59
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0
     f0c:	08 95       	ret
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <vPortYield>:
     f16:	0f 92       	push	r0
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	0f 92       	push	r0
     f1e:	0b b6       	in	r0, 0x3b	; 59
     f20:	0f 92       	push	r0
     f22:	0c b6       	in	r0, 0x3c	; 60
     f24:	0f 92       	push	r0
     f26:	1f 92       	push	r1
     f28:	11 24       	eor	r1, r1
     f2a:	2f 92       	push	r2
     f2c:	3f 92       	push	r3
     f2e:	4f 92       	push	r4
     f30:	5f 92       	push	r5
     f32:	6f 92       	push	r6
     f34:	7f 92       	push	r7
     f36:	8f 92       	push	r8
     f38:	9f 92       	push	r9
     f3a:	af 92       	push	r10
     f3c:	bf 92       	push	r11
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	ef 93       	push	r30
     f64:	ff 93       	push	r31
     f66:	a0 91 0a 11 	lds	r26, 0x110A	; 0x80110a <pxCurrentTCB>
     f6a:	b0 91 0b 11 	lds	r27, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
     f6e:	0d b6       	in	r0, 0x3d	; 61
     f70:	0d 92       	st	X+, r0
     f72:	0e b6       	in	r0, 0x3e	; 62
     f74:	0d 92       	st	X+, r0
     f76:	0e 94 8b 1a 	call	0x3516	; 0x3516 <vTaskSwitchContext>
     f7a:	a0 91 0a 11 	lds	r26, 0x110A	; 0x80110a <pxCurrentTCB>
     f7e:	b0 91 0b 11 	lds	r27, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
     f82:	cd 91       	ld	r28, X+
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	dd 91       	ld	r29, X+
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	df 90       	pop	r13
     fb0:	cf 90       	pop	r12
     fb2:	bf 90       	pop	r11
     fb4:	af 90       	pop	r10
     fb6:	9f 90       	pop	r9
     fb8:	8f 90       	pop	r8
     fba:	7f 90       	pop	r7
     fbc:	6f 90       	pop	r6
     fbe:	5f 90       	pop	r5
     fc0:	4f 90       	pop	r4
     fc2:	3f 90       	pop	r3
     fc4:	2f 90       	pop	r2
     fc6:	1f 90       	pop	r1
     fc8:	0f 90       	pop	r0
     fca:	0c be       	out	0x3c, r0	; 60
     fcc:	0f 90       	pop	r0
     fce:	0b be       	out	0x3b, r0	; 59
     fd0:	0f 90       	pop	r0
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	0f 90       	pop	r0
     fd6:	08 95       	ret
	...

00000fda <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	0f 92       	push	r0
     fe2:	0b b6       	in	r0, 0x3b	; 59
     fe4:	0f 92       	push	r0
     fe6:	0c b6       	in	r0, 0x3c	; 60
     fe8:	0f 92       	push	r0
     fea:	1f 92       	push	r1
     fec:	11 24       	eor	r1, r1
     fee:	2f 92       	push	r2
     ff0:	3f 92       	push	r3
     ff2:	4f 92       	push	r4
     ff4:	5f 92       	push	r5
     ff6:	6f 92       	push	r6
     ff8:	7f 92       	push	r7
     ffa:	8f 92       	push	r8
     ffc:	9f 92       	push	r9
     ffe:	af 92       	push	r10
    1000:	bf 92       	push	r11
    1002:	cf 92       	push	r12
    1004:	df 92       	push	r13
    1006:	ef 92       	push	r14
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	2f 93       	push	r18
    1010:	3f 93       	push	r19
    1012:	4f 93       	push	r20
    1014:	5f 93       	push	r21
    1016:	6f 93       	push	r22
    1018:	7f 93       	push	r23
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
    101e:	af 93       	push	r26
    1020:	bf 93       	push	r27
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	ef 93       	push	r30
    1028:	ff 93       	push	r31
    102a:	a0 91 0a 11 	lds	r26, 0x110A	; 0x80110a <pxCurrentTCB>
    102e:	b0 91 0b 11 	lds	r27, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    1032:	0d b6       	in	r0, 0x3d	; 61
    1034:	0d 92       	st	X+, r0
    1036:	0e b6       	in	r0, 0x3e	; 62
    1038:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    103a:	83 e5       	ldi	r24, 0x53	; 83
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	fc 01       	movw	r30, r24
    1040:	10 82       	st	Z, r1
    if( xTaskIncrementTick() != pdFALSE )
    1042:	0e 94 92 18 	call	0x3124	; 0x3124 <xTaskIncrementTick>
    1046:	88 23       	and	r24, r24
    1048:	11 f0       	breq	.+4      	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    {
        vTaskSwitchContext();
    104a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    104e:	a0 91 0a 11 	lds	r26, 0x110A	; 0x80110a <pxCurrentTCB>
    1052:	b0 91 0b 11 	lds	r27, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    1056:	cd 91       	ld	r28, X+
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	dd 91       	ld	r29, X+
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	ff 91       	pop	r31
    1060:	ef 91       	pop	r30
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	8f 90       	pop	r8
    108e:	7f 90       	pop	r7
    1090:	6f 90       	pop	r6
    1092:	5f 90       	pop	r5
    1094:	4f 90       	pop	r4
    1096:	3f 90       	pop	r3
    1098:	2f 90       	pop	r2
    109a:	1f 90       	pop	r1
    109c:	0f 90       	pop	r0
    109e:	0c be       	out	0x3c, r0	; 60
    10a0:	0f 90       	pop	r0
    10a2:	0b be       	out	0x3b, r0	; 59
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    10aa:	08 95       	ret
	...

000010ae <prvSetupTimerInterrupt>:

/*
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    /* reset watchdog */
    wdt_reset();
    10b6:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	88 70       	andi	r24, 0x08	; 8
    10be:	99 27       	eor	r25, r25
    10c0:	89 2b       	or	r24, r25
    10c2:	11 f0       	breq	.+4      	; 0x10c8 <prvSetupTimerInterrupt+0x1a>
    10c4:	80 ee       	ldi	r24, 0xE0	; 224
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <prvSetupTimerInterrupt+0x1c>
    10c8:	80 ec       	ldi	r24, 0xC0	; 192
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	97 70       	andi	r25, 0x07	; 7
    10ce:	89 2b       	or	r24, r25
    10d0:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    10d2:	88 e1       	ldi	r24, 0x18	; 24
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	a8 95       	wdr
    10da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    /* reset watchdog */
    wdt_reset();

    /* set up WDT Interrupt (rather than the WDT Reset). */
    wdt_interrupt_enable( portUSE_WDTO );
}
    10e4:	00 00       	nop
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    10ec:	76 df       	rcall	.-276    	; 0xfda <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    10ee:	18 95       	reti
	...

000010f2 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <xQueueGenericReset+0x6>
    10f8:	1f 92       	push	r1
    10fa:	1f 92       	push	r1
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
    1104:	6d 83       	std	Y+5, r22	; 0x05
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	0f 92       	push	r0
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	fc 01       	movw	r30, r24
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	29 81       	ldd	r18, Y+1	; 0x01
    1120:	3a 81       	ldd	r19, Y+2	; 0x02
    1122:	f9 01       	movw	r30, r18
    1124:	27 8d       	ldd	r18, Z+31	; 0x1f
    1126:	42 2f       	mov	r20, r18
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	29 81       	ldd	r18, Y+1	; 0x01
    112c:	3a 81       	ldd	r19, Y+2	; 0x02
    112e:	f9 01       	movw	r30, r18
    1130:	20 a1       	ldd	r18, Z+32	; 0x20
    1132:	22 2f       	mov	r18, r18
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	42 9f       	mul	r20, r18
    1138:	b0 01       	movw	r22, r0
    113a:	43 9f       	mul	r20, r19
    113c:	70 0d       	add	r23, r0
    113e:	52 9f       	mul	r21, r18
    1140:	70 0d       	add	r23, r0
    1142:	11 24       	eor	r1, r1
    1144:	9b 01       	movw	r18, r22
    1146:	28 0f       	add	r18, r24
    1148:	39 1f       	adc	r19, r25
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	9a 81       	ldd	r25, Y+2	; 0x02
    114e:	fc 01       	movw	r30, r24
    1150:	35 83       	std	Z+5, r19	; 0x05
    1152:	24 83       	std	Z+4, r18	; 0x04
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	fc 01       	movw	r30, r24
    115a:	16 8e       	std	Z+30, r1	; 0x1e
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	fc 01       	movw	r30, r24
    1162:	20 81       	ld	r18, Z
    1164:	31 81       	ldd	r19, Z+1	; 0x01
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	fc 01       	movw	r30, r24
    116c:	33 83       	std	Z+3, r19	; 0x03
    116e:	22 83       	std	Z+2, r18	; 0x02
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	fc 01       	movw	r30, r24
    1176:	20 81       	ld	r18, Z
    1178:	31 81       	ldd	r19, Z+1	; 0x01
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	fc 01       	movw	r30, r24
    1180:	87 8d       	ldd	r24, Z+31	; 0x1f
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	bc 01       	movw	r22, r24
    1188:	61 50       	subi	r22, 0x01	; 1
    118a:	71 09       	sbc	r23, r1
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	fc 01       	movw	r30, r24
    1192:	80 a1       	ldd	r24, Z+32	; 0x20
    1194:	48 2f       	mov	r20, r24
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	64 9f       	mul	r22, r20
    119a:	c0 01       	movw	r24, r0
    119c:	65 9f       	mul	r22, r21
    119e:	90 0d       	add	r25, r0
    11a0:	74 9f       	mul	r23, r20
    11a2:	90 0d       	add	r25, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	28 0f       	add	r18, r24
    11a8:	39 1f       	adc	r19, r25
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	fc 01       	movw	r30, r24
    11b0:	37 83       	std	Z+7, r19	; 0x07
    11b2:	26 83       	std	Z+6, r18	; 0x06
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	2f ef       	ldi	r18, 0xFF	; 255
    11ba:	fc 01       	movw	r30, r24
    11bc:	21 a3       	std	Z+33, r18	; 0x21
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	2f ef       	ldi	r18, 0xFF	; 255
    11c4:	fc 01       	movw	r30, r24
    11c6:	22 a3       	std	Z+34, r18	; 0x22
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	88 23       	and	r24, r24
    11cc:	79 f4       	brne	.+30     	; 0x11ec <xQueueGenericReset+0xfa>
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	fc 01       	movw	r30, r24
    11d4:	80 85       	ldd	r24, Z+8	; 0x08
    11d6:	88 23       	and	r24, r24
    11d8:	89 f0       	breq	.+34     	; 0x11fc <xQueueGenericReset+0x10a>
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	08 96       	adiw	r24, 0x08	; 8
    11e0:	0e 94 b9 1b 	call	0x3772	; 0x3772 <xTaskRemoveFromEventList>
    11e4:	88 23       	and	r24, r24
    11e6:	51 f0       	breq	.+20     	; 0x11fc <xQueueGenericReset+0x10a>
    11e8:	96 de       	rcall	.-724    	; 0xf16 <vPortYield>
    11ea:	08 c0       	rjmp	.+16     	; 0x11fc <xQueueGenericReset+0x10a>
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	08 96       	adiw	r24, 0x08	; 8
    11f2:	a0 dc       	rcall	.-1728   	; 0xb34 <vListInitialise>
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	43 96       	adiw	r24, 0x13	; 19
    11fa:	9c dc       	rcall	.-1736   	; 0xb34 <vListInitialise>
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	08 95       	ret

00001212 <xQueueGenericCreate>:
    1212:	0f 93       	push	r16
    1214:	1f 93       	push	r17
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	29 97       	sbiw	r28, 0x09	; 9
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	8f 83       	std	Y+7, r24	; 0x07
    122c:	68 87       	std	Y+8, r22	; 0x08
    122e:	49 87       	std	Y+9, r20	; 0x09
    1230:	8f 81       	ldd	r24, Y+7	; 0x07
    1232:	48 2f       	mov	r20, r24
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	88 85       	ldd	r24, Y+8	; 0x08
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	42 9f       	mul	r20, r18
    123e:	c0 01       	movw	r24, r0
    1240:	43 9f       	mul	r20, r19
    1242:	90 0d       	add	r25, r0
    1244:	52 9f       	mul	r21, r18
    1246:	90 0d       	add	r25, r0
    1248:	11 24       	eor	r1, r1
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	83 96       	adiw	r24, 0x23	; 35
    1254:	b6 d9       	rcall	.-3220   	; 0x5c2 <pvPortMalloc>
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	8b 83       	std	Y+3, r24	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	89 2b       	or	r24, r25
    1260:	99 f0       	breq	.+38     	; 0x1288 <xQueueGenericCreate+0x76>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	83 96       	adiw	r24, 0x23	; 35
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
    1274:	2b 81       	ldd	r18, Y+3	; 0x03
    1276:	3c 81       	ldd	r19, Y+4	; 0x04
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	89 01       	movw	r16, r18
    127e:	29 85       	ldd	r18, Y+9	; 0x09
    1280:	ac 01       	movw	r20, r24
    1282:	68 85       	ldd	r22, Y+8	; 0x08
    1284:	8f 81       	ldd	r24, Y+7	; 0x07
    1286:	0d d0       	rcall	.+26     	; 0x12a2 <prvInitialiseNewQueue>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	29 96       	adiw	r28, 0x09	; 9
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	08 95       	ret

000012a2 <prvInitialiseNewQueue>:
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	27 97       	sbiw	r28, 0x07	; 7
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	6a 83       	std	Y+2, r22	; 0x02
    12be:	5c 83       	std	Y+4, r21	; 0x04
    12c0:	4b 83       	std	Y+3, r20	; 0x03
    12c2:	2d 83       	std	Y+5, r18	; 0x05
    12c4:	1f 83       	std	Y+7, r17	; 0x07
    12c6:	0e 83       	std	Y+6, r16	; 0x06
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	88 23       	and	r24, r24
    12cc:	41 f4       	brne	.+16     	; 0x12de <prvInitialiseNewQueue+0x3c>
    12ce:	8e 81       	ldd	r24, Y+6	; 0x06
    12d0:	9f 81       	ldd	r25, Y+7	; 0x07
    12d2:	2e 81       	ldd	r18, Y+6	; 0x06
    12d4:	3f 81       	ldd	r19, Y+7	; 0x07
    12d6:	fc 01       	movw	r30, r24
    12d8:	31 83       	std	Z+1, r19	; 0x01
    12da:	20 83       	st	Z, r18
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <prvInitialiseNewQueue+0x4a>
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	2b 81       	ldd	r18, Y+3	; 0x03
    12e4:	3c 81       	ldd	r19, Y+4	; 0x04
    12e6:	fc 01       	movw	r30, r24
    12e8:	31 83       	std	Z+1, r19	; 0x01
    12ea:	20 83       	st	Z, r18
    12ec:	8e 81       	ldd	r24, Y+6	; 0x06
    12ee:	9f 81       	ldd	r25, Y+7	; 0x07
    12f0:	29 81       	ldd	r18, Y+1	; 0x01
    12f2:	fc 01       	movw	r30, r24
    12f4:	27 8f       	std	Z+31, r18	; 0x1f
    12f6:	8e 81       	ldd	r24, Y+6	; 0x06
    12f8:	9f 81       	ldd	r25, Y+7	; 0x07
    12fa:	2a 81       	ldd	r18, Y+2	; 0x02
    12fc:	fc 01       	movw	r30, r24
    12fe:	20 a3       	std	Z+32, r18	; 0x20
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	f5 de       	rcall	.-534    	; 0x10f2 <xQueueGenericReset>
    1308:	00 00       	nop
    130a:	27 96       	adiw	r28, 0x07	; 7
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <prvInitialiseMutex>:
    1320:	0f 93       	push	r16
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	1f 92       	push	r1
    1328:	1f 92       	push	r1
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	9a 81       	ldd	r25, Y+2	; 0x02
    1336:	89 2b       	or	r24, r25
    1338:	b9 f0       	breq	.+46     	; 0x1368 <prvInitialiseMutex+0x48>
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	9a 81       	ldd	r25, Y+2	; 0x02
    133e:	fc 01       	movw	r30, r24
    1340:	15 82       	std	Z+5, r1	; 0x05
    1342:	14 82       	std	Z+4, r1	; 0x04
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	fc 01       	movw	r30, r24
    134a:	11 82       	std	Z+1, r1	; 0x01
    134c:	10 82       	st	Z, r1
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	fc 01       	movw	r30, r24
    1354:	16 82       	std	Z+6, r1	; 0x06
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	00 e0       	ldi	r16, 0x00	; 0
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	a9 01       	movw	r20, r18
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	25 d0       	rcall	.+74     	; 0x13b2 <xQueueGenericSend>
    1368:	00 00       	nop
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	0f 91       	pop	r16
    1374:	08 95       	ret

00001376 <xQueueCreateMutex>:
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	00 d0       	rcall	.+0      	; 0x137c <xQueueCreateMutex+0x6>
    137c:	1f 92       	push	r1
    137e:	1f 92       	push	r1
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8d 83       	std	Y+5, r24	; 0x05
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	1a 82       	std	Y+2, r1	; 0x02
    138c:	4d 81       	ldd	r20, Y+5	; 0x05
    138e:	6a 81       	ldd	r22, Y+2	; 0x02
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	3f df       	rcall	.-386    	; 0x1212 <xQueueGenericCreate>
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	8b 83       	std	Y+3, r24	; 0x03
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	c1 df       	rcall	.-126    	; 0x1320 <prvInitialiseMutex>
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <xQueueGenericSend>:
    13b2:	0f 93       	push	r16
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	62 97       	sbiw	r28, 0x12	; 18
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	9b 87       	std	Y+11, r25	; 0x0b
    13ca:	8a 87       	std	Y+10, r24	; 0x0a
    13cc:	7d 87       	std	Y+13, r23	; 0x0d
    13ce:	6c 87       	std	Y+12, r22	; 0x0c
    13d0:	2e 87       	std	Y+14, r18	; 0x0e
    13d2:	3f 87       	std	Y+15, r19	; 0x0f
    13d4:	48 8b       	std	Y+16, r20	; 0x10
    13d6:	59 8b       	std	Y+17, r21	; 0x11
    13d8:	0a 8b       	std	Y+18, r16	; 0x12
    13da:	19 82       	std	Y+1, r1	; 0x01
    13dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13de:	9b 85       	ldd	r25, Y+11	; 0x0b
    13e0:	9b 83       	std	Y+3, r25	; 0x03
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	0f 92       	push	r0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	fc 01       	movw	r30, r24
    13f0:	26 8d       	ldd	r18, Z+30	; 0x1e
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	9b 81       	ldd	r25, Y+3	; 0x03
    13f6:	fc 01       	movw	r30, r24
    13f8:	87 8d       	ldd	r24, Z+31	; 0x1f
    13fa:	28 17       	cp	r18, r24
    13fc:	18 f0       	brcs	.+6      	; 0x1404 <xQueueGenericSend+0x52>
    13fe:	8a 89       	ldd	r24, Y+18	; 0x12
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	f9 f4       	brne	.+62     	; 0x1442 <xQueueGenericSend+0x90>
    1404:	2c 85       	ldd	r18, Y+12	; 0x0c
    1406:	3d 85       	ldd	r19, Y+13	; 0x0d
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	9b 81       	ldd	r25, Y+3	; 0x03
    140c:	4a 89       	ldd	r20, Y+18	; 0x12
    140e:	b9 01       	movw	r22, r18
    1410:	9d d1       	rcall	.+826    	; 0x174c <prvCopyDataToQueue>
    1412:	8c 83       	std	Y+4, r24	; 0x04
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	9b 81       	ldd	r25, Y+3	; 0x03
    1418:	fc 01       	movw	r30, r24
    141a:	83 89       	ldd	r24, Z+19	; 0x13
    141c:	88 23       	and	r24, r24
    141e:	49 f0       	breq	.+18     	; 0x1432 <xQueueGenericSend+0x80>
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	9b 81       	ldd	r25, Y+3	; 0x03
    1424:	43 96       	adiw	r24, 0x13	; 19
    1426:	0e 94 b9 1b 	call	0x3772	; 0x3772 <xTaskRemoveFromEventList>
    142a:	88 23       	and	r24, r24
    142c:	31 f0       	breq	.+12     	; 0x143a <xQueueGenericSend+0x88>
    142e:	73 dd       	rcall	.-1306   	; 0xf16 <vPortYield>
    1430:	04 c0       	rjmp	.+8      	; 0x143a <xQueueGenericSend+0x88>
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	88 23       	and	r24, r24
    1436:	09 f0       	breq	.+2      	; 0x143a <xQueueGenericSend+0x88>
    1438:	6e dd       	rcall	.-1316   	; 0xf16 <vPortYield>
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	64 c0       	rjmp	.+200    	; 0x150a <xQueueGenericSend+0x158>
    1442:	8e 85       	ldd	r24, Y+14	; 0x0e
    1444:	9f 85       	ldd	r25, Y+15	; 0x0f
    1446:	a8 89       	ldd	r26, Y+16	; 0x10
    1448:	b9 89       	ldd	r27, Y+17	; 0x11
    144a:	89 2b       	or	r24, r25
    144c:	8a 2b       	or	r24, r26
    144e:	8b 2b       	or	r24, r27
    1450:	21 f4       	brne	.+8      	; 0x145a <xQueueGenericSend+0xa8>
    1452:	0f 90       	pop	r0
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	58 c0       	rjmp	.+176    	; 0x150a <xQueueGenericSend+0x158>
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	88 23       	and	r24, r24
    145e:	31 f4       	brne	.+12     	; 0x146c <xQueueGenericSend+0xba>
    1460:	ce 01       	movw	r24, r28
    1462:	05 96       	adiw	r24, 0x05	; 5
    1464:	0e 94 56 1d 	call	0x3aac	; 0x3aac <vTaskInternalSetTimeOutState>
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <vTaskSuspendAll>
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	0f 92       	push	r0
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	9b 81       	ldd	r25, Y+3	; 0x03
    147e:	fc 01       	movw	r30, r24
    1480:	81 a1       	ldd	r24, Z+33	; 0x21
    1482:	8f 3f       	cpi	r24, 0xFF	; 255
    1484:	21 f4       	brne	.+8      	; 0x148e <xQueueGenericSend+0xdc>
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	9b 81       	ldd	r25, Y+3	; 0x03
    148a:	fc 01       	movw	r30, r24
    148c:	11 a2       	std	Z+33, r1	; 0x21
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	fc 01       	movw	r30, r24
    1494:	82 a1       	ldd	r24, Z+34	; 0x22
    1496:	8f 3f       	cpi	r24, 0xFF	; 255
    1498:	21 f4       	brne	.+8      	; 0x14a2 <xQueueGenericSend+0xf0>
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	9b 81       	ldd	r25, Y+3	; 0x03
    149e:	fc 01       	movw	r30, r24
    14a0:	12 a2       	std	Z+34, r1	; 0x22
    14a2:	0f 90       	pop	r0
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	9e 01       	movw	r18, r28
    14a8:	22 5f       	subi	r18, 0xF2	; 242
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	ce 01       	movw	r24, r28
    14ae:	05 96       	adiw	r24, 0x05	; 5
    14b0:	b9 01       	movw	r22, r18
    14b2:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <xTaskCheckForTimeOut>
    14b6:	88 23       	and	r24, r24
    14b8:	11 f5       	brne	.+68     	; 0x14fe <xQueueGenericSend+0x14c>
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	9b 81       	ldd	r25, Y+3	; 0x03
    14be:	e2 d2       	rcall	.+1476   	; 0x1a84 <prvIsQueueFull>
    14c0:	88 23       	and	r24, r24
    14c2:	b9 f0       	breq	.+46     	; 0x14f2 <xQueueGenericSend+0x140>
    14c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    14c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    14c8:	a8 89       	ldd	r26, Y+16	; 0x10
    14ca:	b9 89       	ldd	r27, Y+17	; 0x11
    14cc:	2a 81       	ldd	r18, Y+2	; 0x02
    14ce:	3b 81       	ldd	r19, Y+3	; 0x03
    14d0:	28 5f       	subi	r18, 0xF8	; 248
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	ac 01       	movw	r20, r24
    14d6:	bd 01       	movw	r22, r26
    14d8:	c9 01       	movw	r24, r18
    14da:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskPlaceOnEventList>
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	9b 81       	ldd	r25, Y+3	; 0x03
    14e2:	55 d2       	rcall	.+1194   	; 0x198e <prvUnlockQueue>
    14e4:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
    14e8:	88 23       	and	r24, r24
    14ea:	09 f0       	breq	.+2      	; 0x14ee <xQueueGenericSend+0x13c>
    14ec:	7b cf       	rjmp	.-266    	; 0x13e4 <xQueueGenericSend+0x32>
    14ee:	13 dd       	rcall	.-1498   	; 0xf16 <vPortYield>
    14f0:	79 cf       	rjmp	.-270    	; 0x13e4 <xQueueGenericSend+0x32>
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	9b 81       	ldd	r25, Y+3	; 0x03
    14f6:	4b d2       	rcall	.+1174   	; 0x198e <prvUnlockQueue>
    14f8:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
    14fc:	73 cf       	rjmp	.-282    	; 0x13e4 <xQueueGenericSend+0x32>
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	9b 81       	ldd	r25, Y+3	; 0x03
    1502:	45 d2       	rcall	.+1162   	; 0x198e <prvUnlockQueue>
    1504:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	62 96       	adiw	r28, 0x12	; 18
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <xQueueGenericSendFromISR>:
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	2d 97       	sbiw	r28, 0x0d	; 13
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	98 87       	std	Y+8, r25	; 0x08
    1534:	8f 83       	std	Y+7, r24	; 0x07
    1536:	7a 87       	std	Y+10, r23	; 0x0a
    1538:	69 87       	std	Y+9, r22	; 0x09
    153a:	5c 87       	std	Y+12, r21	; 0x0c
    153c:	4b 87       	std	Y+11, r20	; 0x0b
    153e:	2d 87       	std	Y+13, r18	; 0x0d
    1540:	8f 81       	ldd	r24, Y+7	; 0x07
    1542:	98 85       	ldd	r25, Y+8	; 0x08
    1544:	9b 83       	std	Y+3, r25	; 0x03
    1546:	8a 83       	std	Y+2, r24	; 0x02
    1548:	1c 82       	std	Y+4, r1	; 0x04
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	fc 01       	movw	r30, r24
    1550:	26 8d       	ldd	r18, Z+30	; 0x1e
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	9b 81       	ldd	r25, Y+3	; 0x03
    1556:	fc 01       	movw	r30, r24
    1558:	87 8d       	ldd	r24, Z+31	; 0x1f
    155a:	28 17       	cp	r18, r24
    155c:	18 f0       	brcs	.+6      	; 0x1564 <xQueueGenericSendFromISR+0x46>
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	a9 f5       	brne	.+106    	; 0x15ce <xQueueGenericSendFromISR+0xb0>
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	fc 01       	movw	r30, r24
    156a:	82 a1       	ldd	r24, Z+34	; 0x22
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	9b 81       	ldd	r25, Y+3	; 0x03
    1572:	fc 01       	movw	r30, r24
    1574:	86 8d       	ldd	r24, Z+30	; 0x1e
    1576:	8e 83       	std	Y+6, r24	; 0x06
    1578:	29 85       	ldd	r18, Y+9	; 0x09
    157a:	3a 85       	ldd	r19, Y+10	; 0x0a
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	9b 81       	ldd	r25, Y+3	; 0x03
    1580:	4d 85       	ldd	r20, Y+13	; 0x0d
    1582:	b9 01       	movw	r22, r18
    1584:	e3 d0       	rcall	.+454    	; 0x174c <prvCopyDataToQueue>
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	8f 3f       	cpi	r24, 0xFF	; 255
    158a:	b9 f4       	brne	.+46     	; 0x15ba <xQueueGenericSendFromISR+0x9c>
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	9b 81       	ldd	r25, Y+3	; 0x03
    1590:	fc 01       	movw	r30, r24
    1592:	83 89       	ldd	r24, Z+19	; 0x13
    1594:	88 23       	and	r24, r24
    1596:	c1 f0       	breq	.+48     	; 0x15c8 <xQueueGenericSendFromISR+0xaa>
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	9b 81       	ldd	r25, Y+3	; 0x03
    159c:	43 96       	adiw	r24, 0x13	; 19
    159e:	0e 94 b9 1b 	call	0x3772	; 0x3772 <xTaskRemoveFromEventList>
    15a2:	88 23       	and	r24, r24
    15a4:	89 f0       	breq	.+34     	; 0x15c8 <xQueueGenericSendFromISR+0xaa>
    15a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    15a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    15aa:	89 2b       	or	r24, r25
    15ac:	69 f0       	breq	.+26     	; 0x15c8 <xQueueGenericSendFromISR+0xaa>
    15ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b2:	21 e0       	ldi	r18, 0x01	; 1
    15b4:	fc 01       	movw	r30, r24
    15b6:	20 83       	st	Z, r18
    15b8:	07 c0       	rjmp	.+14     	; 0x15c8 <xQueueGenericSendFromISR+0xaa>
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	8f 5f       	subi	r24, 0xFF	; 255
    15be:	28 2f       	mov	r18, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	fc 01       	movw	r30, r24
    15c6:	22 a3       	std	Z+34, r18	; 0x22
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <xQueueGenericSendFromISR+0xb2>
    15ce:	19 82       	std	Y+1, r1	; 0x01
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	2d 96       	adiw	r28, 0x0d	; 13
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <xQueueReceive>:
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	61 97       	sbiw	r28, 0x11	; 17
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	9b 87       	std	Y+11, r25	; 0x0b
    15fa:	8a 87       	std	Y+10, r24	; 0x0a
    15fc:	7d 87       	std	Y+13, r23	; 0x0d
    15fe:	6c 87       	std	Y+12, r22	; 0x0c
    1600:	2e 87       	std	Y+14, r18	; 0x0e
    1602:	3f 87       	std	Y+15, r19	; 0x0f
    1604:	48 8b       	std	Y+16, r20	; 0x10
    1606:	59 8b       	std	Y+17, r21	; 0x11
    1608:	19 82       	std	Y+1, r1	; 0x01
    160a:	8a 85       	ldd	r24, Y+10	; 0x0a
    160c:	9b 85       	ldd	r25, Y+11	; 0x0b
    160e:	9b 83       	std	Y+3, r25	; 0x03
    1610:	8a 83       	std	Y+2, r24	; 0x02
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	0f 92       	push	r0
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	9b 81       	ldd	r25, Y+3	; 0x03
    161c:	fc 01       	movw	r30, r24
    161e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1620:	8c 83       	std	Y+4, r24	; 0x04
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	88 23       	and	r24, r24
    1626:	f9 f0       	breq	.+62     	; 0x1666 <xQueueReceive+0x82>
    1628:	2c 85       	ldd	r18, Y+12	; 0x0c
    162a:	3d 85       	ldd	r19, Y+13	; 0x0d
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	9b 81       	ldd	r25, Y+3	; 0x03
    1630:	b9 01       	movw	r22, r18
    1632:	5c d1       	rcall	.+696    	; 0x18ec <prvCopyDataFromQueue>
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	2f ef       	ldi	r18, 0xFF	; 255
    1638:	28 0f       	add	r18, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	9b 81       	ldd	r25, Y+3	; 0x03
    163e:	fc 01       	movw	r30, r24
    1640:	26 8f       	std	Z+30, r18	; 0x1e
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	9b 81       	ldd	r25, Y+3	; 0x03
    1646:	fc 01       	movw	r30, r24
    1648:	80 85       	ldd	r24, Z+8	; 0x08
    164a:	88 23       	and	r24, r24
    164c:	41 f0       	breq	.+16     	; 0x165e <xQueueReceive+0x7a>
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	9b 81       	ldd	r25, Y+3	; 0x03
    1652:	08 96       	adiw	r24, 0x08	; 8
    1654:	0e 94 b9 1b 	call	0x3772	; 0x3772 <xTaskRemoveFromEventList>
    1658:	88 23       	and	r24, r24
    165a:	09 f0       	breq	.+2      	; 0x165e <xQueueReceive+0x7a>
    165c:	5c dc       	rcall	.-1864   	; 0xf16 <vPortYield>
    165e:	0f 90       	pop	r0
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	6a c0       	rjmp	.+212    	; 0x173a <xQueueReceive+0x156>
    1666:	8e 85       	ldd	r24, Y+14	; 0x0e
    1668:	9f 85       	ldd	r25, Y+15	; 0x0f
    166a:	a8 89       	ldd	r26, Y+16	; 0x10
    166c:	b9 89       	ldd	r27, Y+17	; 0x11
    166e:	89 2b       	or	r24, r25
    1670:	8a 2b       	or	r24, r26
    1672:	8b 2b       	or	r24, r27
    1674:	21 f4       	brne	.+8      	; 0x167e <xQueueReceive+0x9a>
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	5e c0       	rjmp	.+188    	; 0x173a <xQueueReceive+0x156>
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	88 23       	and	r24, r24
    1682:	31 f4       	brne	.+12     	; 0x1690 <xQueueReceive+0xac>
    1684:	ce 01       	movw	r24, r28
    1686:	05 96       	adiw	r24, 0x05	; 5
    1688:	0e 94 56 1d 	call	0x3aac	; 0x3aac <vTaskInternalSetTimeOutState>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	89 83       	std	Y+1, r24	; 0x01
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <vTaskSuspendAll>
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	0f 92       	push	r0
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	9b 81       	ldd	r25, Y+3	; 0x03
    16a2:	fc 01       	movw	r30, r24
    16a4:	81 a1       	ldd	r24, Z+33	; 0x21
    16a6:	8f 3f       	cpi	r24, 0xFF	; 255
    16a8:	21 f4       	brne	.+8      	; 0x16b2 <xQueueReceive+0xce>
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	9b 81       	ldd	r25, Y+3	; 0x03
    16ae:	fc 01       	movw	r30, r24
    16b0:	11 a2       	std	Z+33, r1	; 0x21
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	9b 81       	ldd	r25, Y+3	; 0x03
    16b6:	fc 01       	movw	r30, r24
    16b8:	82 a1       	ldd	r24, Z+34	; 0x22
    16ba:	8f 3f       	cpi	r24, 0xFF	; 255
    16bc:	21 f4       	brne	.+8      	; 0x16c6 <xQueueReceive+0xe2>
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	9b 81       	ldd	r25, Y+3	; 0x03
    16c2:	fc 01       	movw	r30, r24
    16c4:	12 a2       	std	Z+34, r1	; 0x22
    16c6:	0f 90       	pop	r0
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	9e 01       	movw	r18, r28
    16cc:	22 5f       	subi	r18, 0xF2	; 242
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	ce 01       	movw	r24, r28
    16d2:	05 96       	adiw	r24, 0x05	; 5
    16d4:	b9 01       	movw	r22, r18
    16d6:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <xTaskCheckForTimeOut>
    16da:	88 23       	and	r24, r24
    16dc:	11 f5       	brne	.+68     	; 0x1722 <xQueueReceive+0x13e>
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	9b 81       	ldd	r25, Y+3	; 0x03
    16e2:	b3 d1       	rcall	.+870    	; 0x1a4a <prvIsQueueEmpty>
    16e4:	88 23       	and	r24, r24
    16e6:	b9 f0       	breq	.+46     	; 0x1716 <xQueueReceive+0x132>
    16e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    16ec:	a8 89       	ldd	r26, Y+16	; 0x10
    16ee:	b9 89       	ldd	r27, Y+17	; 0x11
    16f0:	2a 81       	ldd	r18, Y+2	; 0x02
    16f2:	3b 81       	ldd	r19, Y+3	; 0x03
    16f4:	2d 5e       	subi	r18, 0xED	; 237
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	ac 01       	movw	r20, r24
    16fa:	bd 01       	movw	r22, r26
    16fc:	c9 01       	movw	r24, r18
    16fe:	0e 94 17 1b 	call	0x362e	; 0x362e <vTaskPlaceOnEventList>
    1702:	8a 81       	ldd	r24, Y+2	; 0x02
    1704:	9b 81       	ldd	r25, Y+3	; 0x03
    1706:	43 d1       	rcall	.+646    	; 0x198e <prvUnlockQueue>
    1708:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
    170c:	88 23       	and	r24, r24
    170e:	09 f0       	breq	.+2      	; 0x1712 <xQueueReceive+0x12e>
    1710:	80 cf       	rjmp	.-256    	; 0x1612 <xQueueReceive+0x2e>
    1712:	01 dc       	rcall	.-2046   	; 0xf16 <vPortYield>
    1714:	7e cf       	rjmp	.-260    	; 0x1612 <xQueueReceive+0x2e>
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	9b 81       	ldd	r25, Y+3	; 0x03
    171a:	39 d1       	rcall	.+626    	; 0x198e <prvUnlockQueue>
    171c:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
    1720:	78 cf       	rjmp	.-272    	; 0x1612 <xQueueReceive+0x2e>
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	9b 81       	ldd	r25, Y+3	; 0x03
    1726:	33 d1       	rcall	.+614    	; 0x198e <prvUnlockQueue>
    1728:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	9b 81       	ldd	r25, Y+3	; 0x03
    1730:	8c d1       	rcall	.+792    	; 0x1a4a <prvIsQueueEmpty>
    1732:	88 23       	and	r24, r24
    1734:	09 f4       	brne	.+2      	; 0x1738 <xQueueReceive+0x154>
    1736:	6d cf       	rjmp	.-294    	; 0x1612 <xQueueReceive+0x2e>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	61 96       	adiw	r28, 0x11	; 17
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <prvCopyDataToQueue>:
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	27 97       	sbiw	r28, 0x07	; 7
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	9c 83       	std	Y+4, r25	; 0x04
    1762:	8b 83       	std	Y+3, r24	; 0x03
    1764:	7e 83       	std	Y+6, r23	; 0x06
    1766:	6d 83       	std	Y+5, r22	; 0x05
    1768:	4f 83       	std	Y+7, r20	; 0x07
    176a:	19 82       	std	Y+1, r1	; 0x01
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	fc 01       	movw	r30, r24
    1772:	86 8d       	ldd	r24, Z+30	; 0x1e
    1774:	8a 83       	std	Y+2, r24	; 0x02
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	fc 01       	movw	r30, r24
    177c:	80 a1       	ldd	r24, Z+32	; 0x20
    177e:	88 23       	and	r24, r24
    1780:	b1 f4       	brne	.+44     	; 0x17ae <prvCopyDataToQueue+0x62>
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	fc 01       	movw	r30, r24
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	89 2b       	or	r24, r25
    178e:	09 f0       	breq	.+2      	; 0x1792 <prvCopyDataToQueue+0x46>
    1790:	9c c0       	rjmp	.+312    	; 0x18ca <prvCopyDataToQueue+0x17e>
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	fc 01       	movw	r30, r24
    1798:	84 81       	ldd	r24, Z+4	; 0x04
    179a:	95 81       	ldd	r25, Z+5	; 0x05
    179c:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <xTaskPriorityDisinherit>
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	fc 01       	movw	r30, r24
    17a8:	15 82       	std	Z+5, r1	; 0x05
    17aa:	14 82       	std	Z+4, r1	; 0x04
    17ac:	8e c0       	rjmp	.+284    	; 0x18ca <prvCopyDataToQueue+0x17e>
    17ae:	8f 81       	ldd	r24, Y+7	; 0x07
    17b0:	88 23       	and	r24, r24
    17b2:	d9 f5       	brne	.+118    	; 0x182a <prvCopyDataToQueue+0xde>
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	fc 01       	movw	r30, r24
    17ba:	80 a1       	ldd	r24, Z+32	; 0x20
    17bc:	48 2f       	mov	r20, r24
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	fc 01       	movw	r30, r24
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	2d 81       	ldd	r18, Y+5	; 0x05
    17cc:	3e 81       	ldd	r19, Y+6	; 0x06
    17ce:	b9 01       	movw	r22, r18
    17d0:	0e 94 b1 3a 	call	0x7562	; 0x7562 <memcpy>
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	fc 01       	movw	r30, r24
    17da:	22 81       	ldd	r18, Z+2	; 0x02
    17dc:	33 81       	ldd	r19, Z+3	; 0x03
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	fc 01       	movw	r30, r24
    17e4:	80 a1       	ldd	r24, Z+32	; 0x20
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	28 0f       	add	r18, r24
    17ec:	39 1f       	adc	r19, r25
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	fc 01       	movw	r30, r24
    17f4:	33 83       	std	Z+3, r19	; 0x03
    17f6:	22 83       	std	Z+2, r18	; 0x02
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	fc 01       	movw	r30, r24
    17fe:	22 81       	ldd	r18, Z+2	; 0x02
    1800:	33 81       	ldd	r19, Z+3	; 0x03
    1802:	8b 81       	ldd	r24, Y+3	; 0x03
    1804:	9c 81       	ldd	r25, Y+4	; 0x04
    1806:	fc 01       	movw	r30, r24
    1808:	84 81       	ldd	r24, Z+4	; 0x04
    180a:	95 81       	ldd	r25, Z+5	; 0x05
    180c:	28 17       	cp	r18, r24
    180e:	39 07       	cpc	r19, r25
    1810:	08 f4       	brcc	.+2      	; 0x1814 <prvCopyDataToQueue+0xc8>
    1812:	5b c0       	rjmp	.+182    	; 0x18ca <prvCopyDataToQueue+0x17e>
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	fc 01       	movw	r30, r24
    181a:	20 81       	ld	r18, Z
    181c:	31 81       	ldd	r19, Z+1	; 0x01
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	fc 01       	movw	r30, r24
    1824:	33 83       	std	Z+3, r19	; 0x03
    1826:	22 83       	std	Z+2, r18	; 0x02
    1828:	50 c0       	rjmp	.+160    	; 0x18ca <prvCopyDataToQueue+0x17e>
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	fc 01       	movw	r30, r24
    1830:	80 a1       	ldd	r24, Z+32	; 0x20
    1832:	48 2f       	mov	r20, r24
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	fc 01       	movw	r30, r24
    183c:	86 81       	ldd	r24, Z+6	; 0x06
    183e:	97 81       	ldd	r25, Z+7	; 0x07
    1840:	2d 81       	ldd	r18, Y+5	; 0x05
    1842:	3e 81       	ldd	r19, Y+6	; 0x06
    1844:	b9 01       	movw	r22, r18
    1846:	0e 94 b1 3a 	call	0x7562	; 0x7562 <memcpy>
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	fc 01       	movw	r30, r24
    1850:	26 81       	ldd	r18, Z+6	; 0x06
    1852:	37 81       	ldd	r19, Z+7	; 0x07
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	fc 01       	movw	r30, r24
    185a:	80 a1       	ldd	r24, Z+32	; 0x20
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	91 95       	neg	r25
    1862:	81 95       	neg	r24
    1864:	91 09       	sbc	r25, r1
    1866:	28 0f       	add	r18, r24
    1868:	39 1f       	adc	r19, r25
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	fc 01       	movw	r30, r24
    1870:	37 83       	std	Z+7, r19	; 0x07
    1872:	26 83       	std	Z+6, r18	; 0x06
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	fc 01       	movw	r30, r24
    187a:	26 81       	ldd	r18, Z+6	; 0x06
    187c:	37 81       	ldd	r19, Z+7	; 0x07
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	fc 01       	movw	r30, r24
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	28 17       	cp	r18, r24
    188a:	39 07       	cpc	r19, r25
    188c:	a8 f4       	brcc	.+42     	; 0x18b8 <prvCopyDataToQueue+0x16c>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	fc 01       	movw	r30, r24
    1894:	24 81       	ldd	r18, Z+4	; 0x04
    1896:	35 81       	ldd	r19, Z+5	; 0x05
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	fc 01       	movw	r30, r24
    189e:	80 a1       	ldd	r24, Z+32	; 0x20
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	91 95       	neg	r25
    18a6:	81 95       	neg	r24
    18a8:	91 09       	sbc	r25, r1
    18aa:	28 0f       	add	r18, r24
    18ac:	39 1f       	adc	r19, r25
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	9c 81       	ldd	r25, Y+4	; 0x04
    18b2:	fc 01       	movw	r30, r24
    18b4:	37 83       	std	Z+7, r19	; 0x07
    18b6:	26 83       	std	Z+6, r18	; 0x06
    18b8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ba:	82 30       	cpi	r24, 0x02	; 2
    18bc:	31 f4       	brne	.+12     	; 0x18ca <prvCopyDataToQueue+0x17e>
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	88 23       	and	r24, r24
    18c2:	19 f0       	breq	.+6      	; 0x18ca <prvCopyDataToQueue+0x17e>
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	81 50       	subi	r24, 0x01	; 1
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	28 0f       	add	r18, r24
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	fc 01       	movw	r30, r24
    18d6:	26 8f       	std	Z+30, r18	; 0x1e
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	27 96       	adiw	r28, 0x07	; 7
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <prvCopyDataFromQueue>:
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <prvCopyDataFromQueue+0x6>
    18f2:	1f 92       	push	r1
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	7c 83       	std	Y+4, r23	; 0x04
    18fe:	6b 83       	std	Y+3, r22	; 0x03
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	9a 81       	ldd	r25, Y+2	; 0x02
    1904:	fc 01       	movw	r30, r24
    1906:	80 a1       	ldd	r24, Z+32	; 0x20
    1908:	88 23       	and	r24, r24
    190a:	c9 f1       	breq	.+114    	; 0x197e <prvCopyDataFromQueue+0x92>
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	fc 01       	movw	r30, r24
    1912:	26 81       	ldd	r18, Z+6	; 0x06
    1914:	37 81       	ldd	r19, Z+7	; 0x07
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	fc 01       	movw	r30, r24
    191c:	80 a1       	ldd	r24, Z+32	; 0x20
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	28 0f       	add	r18, r24
    1924:	39 1f       	adc	r19, r25
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	9a 81       	ldd	r25, Y+2	; 0x02
    192a:	fc 01       	movw	r30, r24
    192c:	37 83       	std	Z+7, r19	; 0x07
    192e:	26 83       	std	Z+6, r18	; 0x06
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	fc 01       	movw	r30, r24
    1936:	26 81       	ldd	r18, Z+6	; 0x06
    1938:	37 81       	ldd	r19, Z+7	; 0x07
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	fc 01       	movw	r30, r24
    1940:	84 81       	ldd	r24, Z+4	; 0x04
    1942:	95 81       	ldd	r25, Z+5	; 0x05
    1944:	28 17       	cp	r18, r24
    1946:	39 07       	cpc	r19, r25
    1948:	50 f0       	brcs	.+20     	; 0x195e <prvCopyDataFromQueue+0x72>
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	9a 81       	ldd	r25, Y+2	; 0x02
    194e:	fc 01       	movw	r30, r24
    1950:	20 81       	ld	r18, Z
    1952:	31 81       	ldd	r19, Z+1	; 0x01
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	fc 01       	movw	r30, r24
    195a:	37 83       	std	Z+7, r19	; 0x07
    195c:	26 83       	std	Z+6, r18	; 0x06
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	9a 81       	ldd	r25, Y+2	; 0x02
    1962:	fc 01       	movw	r30, r24
    1964:	80 a1       	ldd	r24, Z+32	; 0x20
    1966:	48 2f       	mov	r20, r24
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	fc 01       	movw	r30, r24
    1970:	26 81       	ldd	r18, Z+6	; 0x06
    1972:	37 81       	ldd	r19, Z+7	; 0x07
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	9c 81       	ldd	r25, Y+4	; 0x04
    1978:	b9 01       	movw	r22, r18
    197a:	0e 94 b1 3a 	call	0x7562	; 0x7562 <memcpy>
    197e:	00 00       	nop
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <prvUnlockQueue>:
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	00 d0       	rcall	.+0      	; 0x1994 <prvUnlockQueue+0x6>
    1994:	1f 92       	push	r1
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	9c 83       	std	Y+4, r25	; 0x04
    199c:	8b 83       	std	Y+3, r24	; 0x03
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	0f 92       	push	r0
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	fc 01       	movw	r30, r24
    19aa:	82 a1       	ldd	r24, Z+34	; 0x22
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	12 c0       	rjmp	.+36     	; 0x19d4 <prvUnlockQueue+0x46>
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	fc 01       	movw	r30, r24
    19b6:	83 89       	ldd	r24, Z+19	; 0x13
    19b8:	88 23       	and	r24, r24
    19ba:	81 f0       	breq	.+32     	; 0x19dc <prvUnlockQueue+0x4e>
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	43 96       	adiw	r24, 0x13	; 19
    19c2:	0e 94 b9 1b 	call	0x3772	; 0x3772 <xTaskRemoveFromEventList>
    19c6:	88 23       	and	r24, r24
    19c8:	11 f0       	breq	.+4      	; 0x19ce <prvUnlockQueue+0x40>
    19ca:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <vTaskMissedYield>
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	81 50       	subi	r24, 0x01	; 1
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	18 16       	cp	r1, r24
    19d8:	5c f3       	brlt	.-42     	; 0x19b0 <prvUnlockQueue+0x22>
    19da:	01 c0       	rjmp	.+2      	; 0x19de <prvUnlockQueue+0x50>
    19dc:	00 00       	nop
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	2f ef       	ldi	r18, 0xFF	; 255
    19e4:	fc 01       	movw	r30, r24
    19e6:	22 a3       	std	Z+34, r18	; 0x22
    19e8:	0f 90       	pop	r0
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	0f 92       	push	r0
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	fc 01       	movw	r30, r24
    19f8:	81 a1       	ldd	r24, Z+33	; 0x21
    19fa:	8a 83       	std	Y+2, r24	; 0x02
    19fc:	12 c0       	rjmp	.+36     	; 0x1a22 <prvUnlockQueue+0x94>
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	fc 01       	movw	r30, r24
    1a04:	80 85       	ldd	r24, Z+8	; 0x08
    1a06:	88 23       	and	r24, r24
    1a08:	81 f0       	breq	.+32     	; 0x1a2a <prvUnlockQueue+0x9c>
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	08 96       	adiw	r24, 0x08	; 8
    1a10:	0e 94 b9 1b 	call	0x3772	; 0x3772 <xTaskRemoveFromEventList>
    1a14:	88 23       	and	r24, r24
    1a16:	11 f0       	breq	.+4      	; 0x1a1c <prvUnlockQueue+0x8e>
    1a18:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <vTaskMissedYield>
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	81 50       	subi	r24, 0x01	; 1
    1a20:	8a 83       	std	Y+2, r24	; 0x02
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	18 16       	cp	r1, r24
    1a26:	5c f3       	brlt	.-42     	; 0x19fe <prvUnlockQueue+0x70>
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <prvUnlockQueue+0x9e>
    1a2a:	00 00       	nop
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	2f ef       	ldi	r18, 0xFF	; 255
    1a32:	fc 01       	movw	r30, r24
    1a34:	21 a3       	std	Z+33, r18	; 0x21
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	00 00       	nop
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	08 95       	ret

00001a4a <prvIsQueueEmpty>:
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <prvIsQueueEmpty+0x6>
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	9b 83       	std	Y+3, r25	; 0x03
    1a56:	8a 83       	std	Y+2, r24	; 0x02
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	0f 92       	push	r0
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	9b 81       	ldd	r25, Y+3	; 0x03
    1a62:	fc 01       	movw	r30, r24
    1a64:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a66:	88 23       	and	r24, r24
    1a68:	19 f4       	brne	.+6      	; 0x1a70 <prvIsQueueEmpty+0x26>
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <prvIsQueueEmpty+0x28>
    1a70:	19 82       	std	Y+1, r1	; 0x01
    1a72:	0f 90       	pop	r0
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	08 95       	ret

00001a84 <prvIsQueueFull>:
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <prvIsQueueFull+0x6>
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	9b 83       	std	Y+3, r25	; 0x03
    1a90:	8a 83       	std	Y+2, r24	; 0x02
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	0f 92       	push	r0
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	26 8d       	ldd	r18, Z+30	; 0x1e
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	87 8d       	ldd	r24, Z+31	; 0x1f
    1aa8:	28 17       	cp	r18, r24
    1aaa:	19 f4       	brne	.+6      	; 0x1ab2 <prvIsQueueFull+0x2e>
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <prvIsQueueFull+0x30>
    1ab2:	19 82       	std	Y+1, r1	; 0x01
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	08 95       	ret

00001ac6 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	29 97       	sbiw	r28, 0x09	; 9
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	9c 83       	std	Y+4, r25	; 0x04
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	4d 83       	std	Y+5, r20	; 0x05
    1ae0:	5e 83       	std	Y+6, r21	; 0x06
    1ae2:	6f 83       	std	Y+7, r22	; 0x07
    1ae4:	78 87       	std	Y+8, r23	; 0x08
    1ae6:	29 87       	std	Y+9, r18	; 0x09
        Queue_t * const pxQueue = xQueue;
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	0f 92       	push	r0
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	fc 01       	movw	r30, r24
    1afc:	81 a1       	ldd	r24, Z+33	; 0x21
    1afe:	8f 3f       	cpi	r24, 0xFF	; 255
    1b00:	21 f4       	brne	.+8      	; 0x1b0a <vQueueWaitForMessageRestricted+0x44>
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	fc 01       	movw	r30, r24
    1b08:	11 a2       	std	Z+33, r1	; 0x21
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	fc 01       	movw	r30, r24
    1b10:	82 a1       	ldd	r24, Z+34	; 0x22
    1b12:	8f 3f       	cpi	r24, 0xFF	; 255
    1b14:	21 f4       	brne	.+8      	; 0x1b1e <vQueueWaitForMessageRestricted+0x58>
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	12 a2       	std	Z+34, r1	; 0x22
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	fc 01       	movw	r30, r24
    1b28:	86 8d       	ldd	r24, Z+30	; 0x1e
    1b2a:	88 23       	and	r24, r24
    1b2c:	71 f4       	brne	.+28     	; 0x1b4a <vQueueWaitForMessageRestricted+0x84>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	fc 01       	movw	r30, r24
    1b34:	73 96       	adiw	r30, 0x13	; 19
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	af 81       	ldd	r26, Y+7	; 0x07
    1b3c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b3e:	29 85       	ldd	r18, Y+9	; 0x09
    1b40:	ac 01       	movw	r20, r24
    1b42:	bd 01       	movw	r22, r26
    1b44:	cf 01       	movw	r24, r30
    1b46:	0e 94 42 1b 	call	0x3684	; 0x3684 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	1f df       	rcall	.-450    	; 0x198e <prvUnlockQueue>
    }
    1b50:	00 00       	nop
    1b52:	29 96       	adiw	r28, 0x09	; 9
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    1b64:	0f 93       	push	r16
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	28 97       	sbiw	r28, 0x08	; 8
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	9d 83       	std	Y+5, r25	; 0x05
    1b7c:	8c 83       	std	Y+4, r24	; 0x04
    1b7e:	7f 83       	std	Y+7, r23	; 0x07
    1b80:	6e 83       	std	Y+6, r22	; 0x06
    1b82:	48 87       	std	Y+8, r20	; 0x08
    1b84:	88 85       	ldd	r24, Y+8	; 0x08
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	19 f4       	brne	.+6      	; 0x1b90 <xStreamBufferGenericCreate+0x2c>
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
    1b8e:	01 c0       	rjmp	.+2      	; 0x1b92 <xStreamBufferGenericCreate+0x2e>
    1b90:	1b 82       	std	Y+3, r1	; 0x03
    1b92:	8e 81       	ldd	r24, Y+6	; 0x06
    1b94:	9f 81       	ldd	r25, Y+7	; 0x07
    1b96:	89 2b       	or	r24, r25
    1b98:	21 f4       	brne	.+8      	; 0x1ba2 <xStreamBufferGenericCreate+0x3e>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9f 83       	std	Y+7, r25	; 0x07
    1ba0:	8e 83       	std	Y+6, r24	; 0x06
    1ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	20 5f       	subi	r18, 0xF0	; 240
    1baa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	82 17       	cp	r24, r18
    1bb2:	93 07       	cpc	r25, r19
    1bb4:	68 f4       	brcc	.+26     	; 0x1bd0 <xStreamBufferGenericCreate+0x6c>
    1bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bba:	01 96       	adiw	r24, 0x01	; 1
    1bbc:	9d 83       	std	Y+5, r25	; 0x05
    1bbe:	8c 83       	std	Y+4, r24	; 0x04
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc4:	0f 96       	adiw	r24, 0x0f	; 15
    1bc6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pvPortMalloc>
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <xStreamBufferGenericCreate+0x70>
    1bd0:	1a 82       	std	Y+2, r1	; 0x02
    1bd2:	19 82       	std	Y+1, r1	; 0x01
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	89 2b       	or	r24, r25
    1bda:	69 f0       	breq	.+26     	; 0x1bf6 <xStreamBufferGenericCreate+0x92>
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	bc 01       	movw	r22, r24
    1be2:	61 5f       	subi	r22, 0xF1	; 241
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	2e 81       	ldd	r18, Y+6	; 0x06
    1be8:	3f 81       	ldd	r19, Y+7	; 0x07
    1bea:	4c 81       	ldd	r20, Y+4	; 0x04
    1bec:	5d 81       	ldd	r21, Y+5	; 0x05
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	0b 81       	ldd	r16, Y+3	; 0x03
    1bf4:	38 d5       	rcall	.+2672   	; 0x2666 <prvInitialiseNewStreamBuffer>
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfa:	28 96       	adiw	r28, 0x08	; 8
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	0f 91       	pop	r16
    1c0c:	08 95       	ret

00001c0e <xStreamBufferReset>:
    1c0e:	0f 93       	push	r16
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <xStreamBufferReset+0x8>
    1c16:	1f 92       	push	r1
    1c18:	1f 92       	push	r1
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	9d 83       	std	Y+5, r25	; 0x05
    1c20:	8c 83       	std	Y+4, r24	; 0x04
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	9d 81       	ldd	r25, Y+5	; 0x05
    1c26:	9b 83       	std	Y+3, r25	; 0x03
    1c28:	8a 83       	std	Y+2, r24	; 0x02
    1c2a:	19 82       	std	Y+1, r1	; 0x01
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	0f 92       	push	r0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	9b 81       	ldd	r25, Y+3	; 0x03
    1c36:	dc 01       	movw	r26, r24
    1c38:	18 96       	adiw	r26, 0x08	; 8
    1c3a:	8d 91       	ld	r24, X+
    1c3c:	9c 91       	ld	r25, X
    1c3e:	19 97       	sbiw	r26, 0x09	; 9
    1c40:	89 2b       	or	r24, r25
    1c42:	39 f5       	brne	.+78     	; 0x1c92 <xStreamBufferReset+0x84>
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	fc 01       	movw	r30, r24
    1c4a:	82 85       	ldd	r24, Z+10	; 0x0a
    1c4c:	93 85       	ldd	r25, Z+11	; 0x0b
    1c4e:	89 2b       	or	r24, r25
    1c50:	01 f5       	brne	.+64     	; 0x1c92 <xStreamBufferReset+0x84>
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	9b 81       	ldd	r25, Y+3	; 0x03
    1c56:	dc 01       	movw	r26, r24
    1c58:	1e 96       	adiw	r26, 0x0e	; 14
    1c5a:	ec 91       	ld	r30, X
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c60:	dc 01       	movw	r26, r24
    1c62:	16 96       	adiw	r26, 0x06	; 6
    1c64:	2d 91       	ld	r18, X+
    1c66:	3c 91       	ld	r19, X
    1c68:	17 97       	sbiw	r26, 0x07	; 7
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6e:	dc 01       	movw	r26, r24
    1c70:	14 96       	adiw	r26, 0x04	; 4
    1c72:	4d 91       	ld	r20, X+
    1c74:	5c 91       	ld	r21, X
    1c76:	15 97       	sbiw	r26, 0x05	; 5
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	1c 96       	adiw	r26, 0x0c	; 12
    1c80:	6d 91       	ld	r22, X+
    1c82:	7c 91       	ld	r23, X
    1c84:	1d 97       	sbiw	r26, 0x0d	; 13
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8a:	0e 2f       	mov	r16, r30
    1c8c:	ec d4       	rcall	.+2520   	; 0x2666 <prvInitialiseNewStreamBuffer>
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	0f 90       	pop	r0
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	0f 91       	pop	r16
    1ca8:	08 95       	ret

00001caa <xStreamBufferSpacesAvailable>:
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <xStreamBufferSpacesAvailable+0x6>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <xStreamBufferSpacesAvailable+0x8>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	24 81       	ldd	r18, Z+4	; 0x04
    1cca:	35 81       	ldd	r19, Z+5	; 0x05
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	82 0f       	add	r24, r18
    1cd8:	93 1f       	adc	r25, r19
    1cda:	9a 83       	std	Y+2, r25	; 0x02
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	29 81       	ldd	r18, Y+1	; 0x01
    1cea:	3a 81       	ldd	r19, Y+2	; 0x02
    1cec:	a9 01       	movw	r20, r18
    1cee:	48 1b       	sub	r20, r24
    1cf0:	59 0b       	sbc	r21, r25
    1cf2:	ca 01       	movw	r24, r20
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9a 83       	std	Y+2, r25	; 0x02
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	fc 01       	movw	r30, r24
    1d08:	24 81       	ldd	r18, Z+4	; 0x04
    1d0a:	35 81       	ldd	r19, Z+5	; 0x05
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d10:	82 17       	cp	r24, r18
    1d12:	93 07       	cpc	r25, r19
    1d14:	68 f0       	brcs	.+26     	; 0x1d30 <xStreamBufferSpacesAvailable+0x86>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	84 81       	ldd	r24, Z+4	; 0x04
    1d1e:	95 81       	ldd	r25, Z+5	; 0x05
    1d20:	29 81       	ldd	r18, Y+1	; 0x01
    1d22:	3a 81       	ldd	r19, Y+2	; 0x02
    1d24:	a9 01       	movw	r20, r18
    1d26:	48 1b       	sub	r20, r24
    1d28:	59 0b       	sbc	r21, r25
    1d2a:	ca 01       	movw	r24, r20
    1d2c:	9a 83       	std	Y+2, r25	; 0x02
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	26 96       	adiw	r28, 0x06	; 6
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	08 95       	ret

00001d46 <xStreamBufferSend>:
    1d46:	af 92       	push	r10
    1d48:	bf 92       	push	r11
    1d4a:	cf 92       	push	r12
    1d4c:	df 92       	push	r13
    1d4e:	ef 92       	push	r14
    1d50:	ff 92       	push	r15
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	69 97       	sbiw	r28, 0x19	; 25
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	99 8b       	std	Y+17, r25	; 0x11
    1d6c:	88 8b       	std	Y+16, r24	; 0x10
    1d6e:	7b 8b       	std	Y+19, r23	; 0x13
    1d70:	6a 8b       	std	Y+18, r22	; 0x12
    1d72:	5d 8b       	std	Y+21, r21	; 0x15
    1d74:	4c 8b       	std	Y+20, r20	; 0x14
    1d76:	0e 8b       	std	Y+22, r16	; 0x16
    1d78:	1f 8b       	std	Y+23, r17	; 0x17
    1d7a:	28 8f       	std	Y+24, r18	; 0x18
    1d7c:	39 8f       	std	Y+25, r19	; 0x19
    1d7e:	88 89       	ldd	r24, Y+16	; 0x10
    1d80:	99 89       	ldd	r25, Y+17	; 0x11
    1d82:	9e 83       	std	Y+6, r25	; 0x06
    1d84:	8d 83       	std	Y+5, r24	; 0x05
    1d86:	1a 82       	std	Y+2, r1	; 0x02
    1d88:	19 82       	std	Y+1, r1	; 0x01
    1d8a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d8c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	8b 83       	std	Y+3, r24	; 0x03
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	fc 01       	movw	r30, r24
    1d98:	84 81       	ldd	r24, Z+4	; 0x04
    1d9a:	95 81       	ldd	r25, Z+5	; 0x05
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	98 87       	std	Y+8, r25	; 0x08
    1da0:	8f 83       	std	Y+7, r24	; 0x07
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	9e 81       	ldd	r25, Y+6	; 0x06
    1da6:	fc 01       	movw	r30, r24
    1da8:	86 85       	ldd	r24, Z+14	; 0x0e
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	81 70       	andi	r24, 0x01	; 1
    1db0:	99 27       	eor	r25, r25
    1db2:	89 2b       	or	r24, r25
    1db4:	89 f0       	breq	.+34     	; 0x1dd8 <xStreamBufferSend+0x92>
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	02 96       	adiw	r24, 0x02	; 2
    1dbc:	9c 83       	std	Y+4, r25	; 0x04
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc6:	98 85       	ldd	r25, Y+8	; 0x08
    1dc8:	82 17       	cp	r24, r18
    1dca:	93 07       	cpc	r25, r19
    1dcc:	80 f4       	brcc	.+32     	; 0x1dee <xStreamBufferSend+0xa8>
    1dce:	1e 8a       	std	Y+22, r1	; 0x16
    1dd0:	1f 8a       	std	Y+23, r1	; 0x17
    1dd2:	18 8e       	std	Y+24, r1	; 0x18
    1dd4:	19 8e       	std	Y+25, r1	; 0x19
    1dd6:	0b c0       	rjmp	.+22     	; 0x1dee <xStreamBufferSend+0xa8>
    1dd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dda:	3c 81       	ldd	r19, Y+4	; 0x04
    1ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dde:	98 85       	ldd	r25, Y+8	; 0x08
    1de0:	82 17       	cp	r24, r18
    1de2:	93 07       	cpc	r25, r19
    1de4:	20 f4       	brcc	.+8      	; 0x1dee <xStreamBufferSend+0xa8>
    1de6:	8f 81       	ldd	r24, Y+7	; 0x07
    1de8:	98 85       	ldd	r25, Y+8	; 0x08
    1dea:	9c 83       	std	Y+4, r25	; 0x04
    1dec:	8b 83       	std	Y+3, r24	; 0x03
    1dee:	8e 89       	ldd	r24, Y+22	; 0x16
    1df0:	9f 89       	ldd	r25, Y+23	; 0x17
    1df2:	a8 8d       	ldd	r26, Y+24	; 0x18
    1df4:	b9 8d       	ldd	r27, Y+25	; 0x19
    1df6:	89 2b       	or	r24, r25
    1df8:	8a 2b       	or	r24, r26
    1dfa:	8b 2b       	or	r24, r27
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <xStreamBufferSend+0xba>
    1dfe:	47 c0       	rjmp	.+142    	; 0x1e8e <xStreamBufferSend+0x148>
    1e00:	ce 01       	movw	r24, r28
    1e02:	0b 96       	adiw	r24, 0x0b	; 11
    1e04:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <vTaskSetTimeOutState>
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	0f 92       	push	r0
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	4b df       	rcall	.-362    	; 0x1caa <xStreamBufferSpacesAvailable>
    1e14:	9a 83       	std	Y+2, r25	; 0x02
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	29 81       	ldd	r18, Y+1	; 0x01
    1e1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	28 17       	cp	r18, r24
    1e22:	39 07       	cpc	r19, r25
    1e24:	70 f4       	brcc	.+28     	; 0x1e42 <xStreamBufferSend+0xfc>
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <xTaskGenericNotifyStateClear>
    1e30:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <xTaskGetCurrentTaskHandle>
    1e34:	9c 01       	movw	r18, r24
    1e36:	8d 81       	ldd	r24, Y+5	; 0x05
    1e38:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	33 87       	std	Z+11, r19	; 0x0b
    1e3e:	22 87       	std	Z+10, r18	; 0x0a
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <xStreamBufferSend+0x102>
    1e42:	0f 90       	pop	r0
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	23 c0       	rjmp	.+70     	; 0x1e8e <xStreamBufferSend+0x148>
    1e48:	0f 90       	pop	r0
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	8e 89       	ldd	r24, Y+22	; 0x16
    1e4e:	9f 89       	ldd	r25, Y+23	; 0x17
    1e50:	a8 8d       	ldd	r26, Y+24	; 0x18
    1e52:	b9 8d       	ldd	r27, Y+25	; 0x19
    1e54:	5c 01       	movw	r10, r24
    1e56:	6d 01       	movw	r12, r26
    1e58:	e1 2c       	mov	r14, r1
    1e5a:	f1 2c       	mov	r15, r1
    1e5c:	00 e0       	ldi	r16, 0x00	; 0
    1e5e:	10 e0       	ldi	r17, 0x00	; 0
    1e60:	98 01       	movw	r18, r16
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	ba 01       	movw	r22, r20
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	0e 94 00 20 	call	0x4000	; 0x4000 <xTaskGenericNotifyWait>
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	fc 01       	movw	r30, r24
    1e74:	13 86       	std	Z+11, r1	; 0x0b
    1e76:	12 86       	std	Z+10, r1	; 0x0a
    1e78:	9e 01       	movw	r18, r28
    1e7a:	2a 5e       	subi	r18, 0xEA	; 234
    1e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7e:	ce 01       	movw	r24, r28
    1e80:	0b 96       	adiw	r24, 0x0b	; 11
    1e82:	b9 01       	movw	r22, r18
    1e84:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <xTaskCheckForTimeOut>
    1e88:	88 23       	and	r24, r24
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <xStreamBufferSend+0x148>
    1e8c:	bd cf       	rjmp	.-134    	; 0x1e08 <xStreamBufferSend+0xc2>
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	89 2b       	or	r24, r25
    1e94:	29 f4       	brne	.+10     	; 0x1ea0 <xStreamBufferSend+0x15a>
    1e96:	8d 81       	ldd	r24, Y+5	; 0x05
    1e98:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9a:	07 df       	rcall	.-498    	; 0x1caa <xStreamBufferSpacesAvailable>
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea4:	29 81       	ldd	r18, Y+1	; 0x01
    1ea6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ea8:	4c 89       	ldd	r20, Y+20	; 0x14
    1eaa:	5d 89       	ldd	r21, Y+21	; 0x15
    1eac:	6a 89       	ldd	r22, Y+18	; 0x12
    1eae:	7b 89       	ldd	r23, Y+19	; 0x13
    1eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb4:	8f 01       	movw	r16, r30
    1eb6:	c2 d0       	rcall	.+388    	; 0x203c <prvWriteMessageToBuffer>
    1eb8:	9a 87       	std	Y+10, r25	; 0x0a
    1eba:	89 87       	std	Y+9, r24	; 0x09
    1ebc:	89 85       	ldd	r24, Y+9	; 0x09
    1ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec0:	89 2b       	or	r24, r25
    1ec2:	41 f1       	breq	.+80     	; 0x1f14 <xStreamBufferSend+0x1ce>
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	8b d3       	rcall	.+1814   	; 0x25e0 <prvBytesInBuffer>
    1eca:	9c 01       	movw	r18, r24
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	86 81       	ldd	r24, Z+6	; 0x06
    1ed4:	97 81       	ldd	r25, Z+7	; 0x07
    1ed6:	28 17       	cp	r18, r24
    1ed8:	39 07       	cpc	r19, r25
    1eda:	e0 f0       	brcs	.+56     	; 0x1f14 <xStreamBufferSend+0x1ce>
    1edc:	64 d7       	rcall	.+3784   	; 0x2da6 <vTaskSuspendAll>
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	80 85       	ldd	r24, Z+8	; 0x08
    1ee6:	91 85       	ldd	r25, Z+9	; 0x09
    1ee8:	89 2b       	or	r24, r25
    1eea:	99 f0       	breq	.+38     	; 0x1f12 <xStreamBufferSend+0x1cc>
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	80 85       	ldd	r24, Z+8	; 0x08
    1ef4:	91 85       	ldd	r25, Z+9	; 0x09
    1ef6:	e1 2c       	mov	r14, r1
    1ef8:	f1 2c       	mov	r15, r1
    1efa:	00 e0       	ldi	r16, 0x00	; 0
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	a9 01       	movw	r20, r18
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	0e 94 07 21 	call	0x420e	; 0x420e <xTaskGenericNotify>
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	11 86       	std	Z+9, r1	; 0x09
    1f10:	10 86       	std	Z+8, r1	; 0x08
    1f12:	56 d7       	rcall	.+3756   	; 0x2dc0 <xTaskResumeAll>
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	69 96       	adiw	r28, 0x19	; 25
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	08 95       	ret

00001f3a <xStreamBufferSendFromISR>:
    1f3a:	cf 92       	push	r12
    1f3c:	df 92       	push	r13
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	61 97       	sbiw	r28, 0x11	; 17
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	9b 87       	std	Y+11, r25	; 0x0b
    1f5c:	8a 87       	std	Y+10, r24	; 0x0a
    1f5e:	7d 87       	std	Y+13, r23	; 0x0d
    1f60:	6c 87       	std	Y+12, r22	; 0x0c
    1f62:	5f 87       	std	Y+15, r21	; 0x0f
    1f64:	4e 87       	std	Y+14, r20	; 0x0e
    1f66:	39 8b       	std	Y+17, r19	; 0x11
    1f68:	28 8b       	std	Y+16, r18	; 0x10
    1f6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f6e:	9c 83       	std	Y+4, r25	; 0x04
    1f70:	8b 83       	std	Y+3, r24	; 0x03
    1f72:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f74:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7e:	fc 01       	movw	r30, r24
    1f80:	86 85       	ldd	r24, Z+14	; 0x0e
    1f82:	88 2f       	mov	r24, r24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	81 70       	andi	r24, 0x01	; 1
    1f88:	99 27       	eor	r25, r25
    1f8a:	89 2b       	or	r24, r25
    1f8c:	29 f0       	breq	.+10     	; 0x1f98 <xStreamBufferSendFromISR+0x5e>
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	02 96       	adiw	r24, 0x02	; 2
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	86 de       	rcall	.-756    	; 0x1caa <xStreamBufferSpacesAvailable>
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa6:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa8:	3e 81       	ldd	r19, Y+6	; 0x06
    1faa:	4e 85       	ldd	r20, Y+14	; 0x0e
    1fac:	5f 85       	ldd	r21, Y+15	; 0x0f
    1fae:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fb0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	8f 01       	movw	r16, r30
    1fb8:	41 d0       	rcall	.+130    	; 0x203c <prvWriteMessageToBuffer>
    1fba:	98 87       	std	Y+8, r25	; 0x08
    1fbc:	8f 83       	std	Y+7, r24	; 0x07
    1fbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc0:	98 85       	ldd	r25, Y+8	; 0x08
    1fc2:	89 2b       	or	r24, r25
    1fc4:	51 f1       	breq	.+84     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	0a d3       	rcall	.+1556   	; 0x25e0 <prvBytesInBuffer>
    1fcc:	9c 01       	movw	r18, r24
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	86 81       	ldd	r24, Z+6	; 0x06
    1fd6:	97 81       	ldd	r25, Z+7	; 0x07
    1fd8:	28 17       	cp	r18, r24
    1fda:	39 07       	cpc	r19, r25
    1fdc:	f0 f0       	brcs	.+60     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1fde:	19 86       	std	Y+9, r1	; 0x09
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	80 85       	ldd	r24, Z+8	; 0x08
    1fe8:	91 85       	ldd	r25, Z+9	; 0x09
    1fea:	89 2b       	or	r24, r25
    1fec:	b1 f0       	breq	.+44     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	80 85       	ldd	r24, Z+8	; 0x08
    1ff6:	91 85       	ldd	r25, Z+9	; 0x09
    1ff8:	28 89       	ldd	r18, Y+16	; 0x10
    1ffa:	39 89       	ldd	r19, Y+17	; 0x11
    1ffc:	69 01       	movw	r12, r18
    1ffe:	e1 2c       	mov	r14, r1
    2000:	f1 2c       	mov	r15, r1
    2002:	00 e0       	ldi	r16, 0x00	; 0
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	a9 01       	movw	r20, r18
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <xTaskGenericNotifyFromISR>
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	fc 01       	movw	r30, r24
    2016:	11 86       	std	Z+9, r1	; 0x09
    2018:	10 86       	std	Z+8, r1	; 0x08
    201a:	8f 81       	ldd	r24, Y+7	; 0x07
    201c:	98 85       	ldd	r25, Y+8	; 0x08
    201e:	61 96       	adiw	r28, 0x11	; 17
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	ff 90       	pop	r15
    2034:	ef 90       	pop	r14
    2036:	df 90       	pop	r13
    2038:	cf 90       	pop	r12
    203a:	08 95       	ret

0000203c <prvWriteMessageToBuffer>:
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	61 97       	sbiw	r28, 0x11	; 17
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	99 87       	std	Y+9, r25	; 0x09
    2056:	88 87       	std	Y+8, r24	; 0x08
    2058:	7b 87       	std	Y+11, r23	; 0x0b
    205a:	6a 87       	std	Y+10, r22	; 0x0a
    205c:	5d 87       	std	Y+13, r21	; 0x0d
    205e:	4c 87       	std	Y+12, r20	; 0x0c
    2060:	3f 87       	std	Y+15, r19	; 0x0f
    2062:	2e 87       	std	Y+14, r18	; 0x0e
    2064:	19 8b       	std	Y+17, r17	; 0x11
    2066:	08 8b       	std	Y+16, r16	; 0x10
    2068:	8e 85       	ldd	r24, Y+14	; 0x0e
    206a:	9f 85       	ldd	r25, Y+15	; 0x0f
    206c:	89 2b       	or	r24, r25
    206e:	11 f4       	brne	.+4      	; 0x2074 <prvWriteMessageToBuffer+0x38>
    2070:	19 82       	std	Y+1, r1	; 0x01
    2072:	33 c0       	rjmp	.+102    	; 0x20da <prvWriteMessageToBuffer+0x9e>
    2074:	88 85       	ldd	r24, Y+8	; 0x08
    2076:	99 85       	ldd	r25, Y+9	; 0x09
    2078:	fc 01       	movw	r30, r24
    207a:	86 85       	ldd	r24, Z+14	; 0x0e
    207c:	88 2f       	mov	r24, r24
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	81 70       	andi	r24, 0x01	; 1
    2082:	99 27       	eor	r25, r25
    2084:	89 2b       	or	r24, r25
    2086:	a9 f4       	brne	.+42     	; 0x20b2 <prvWriteMessageToBuffer+0x76>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	8c 85       	ldd	r24, Y+12	; 0x0c
    208e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2090:	9d 83       	std	Y+5, r25	; 0x05
    2092:	8c 83       	std	Y+4, r24	; 0x04
    2094:	8e 85       	ldd	r24, Y+14	; 0x0e
    2096:	9f 85       	ldd	r25, Y+15	; 0x0f
    2098:	9f 83       	std	Y+7, r25	; 0x07
    209a:	8e 83       	std	Y+6, r24	; 0x06
    209c:	2c 81       	ldd	r18, Y+4	; 0x04
    209e:	3d 81       	ldd	r19, Y+5	; 0x05
    20a0:	8e 81       	ldd	r24, Y+6	; 0x06
    20a2:	9f 81       	ldd	r25, Y+7	; 0x07
    20a4:	28 17       	cp	r18, r24
    20a6:	39 07       	cpc	r19, r25
    20a8:	08 f4       	brcc	.+2      	; 0x20ac <prvWriteMessageToBuffer+0x70>
    20aa:	c9 01       	movw	r24, r18
    20ac:	9d 87       	std	Y+13, r25	; 0x0d
    20ae:	8c 87       	std	Y+12, r24	; 0x0c
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <prvWriteMessageToBuffer+0x9e>
    20b2:	2e 85       	ldd	r18, Y+14	; 0x0e
    20b4:	3f 85       	ldd	r19, Y+15	; 0x0f
    20b6:	88 89       	ldd	r24, Y+16	; 0x10
    20b8:	99 89       	ldd	r25, Y+17	; 0x11
    20ba:	28 17       	cp	r18, r24
    20bc:	39 07       	cpc	r19, r25
    20be:	60 f0       	brcs	.+24     	; 0x20d8 <prvWriteMessageToBuffer+0x9c>
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	9e 01       	movw	r18, r28
    20c6:	24 5f       	subi	r18, 0xF4	; 244
    20c8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ca:	88 85       	ldd	r24, Y+8	; 0x08
    20cc:	99 85       	ldd	r25, Y+9	; 0x09
    20ce:	42 e0       	ldi	r20, 0x02	; 2
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	b9 01       	movw	r22, r18
    20d4:	4f d1       	rcall	.+670    	; 0x2374 <prvWriteBytesToBuffer>
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <prvWriteMessageToBuffer+0x9e>
    20d8:	19 82       	std	Y+1, r1	; 0x01
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	88 23       	and	r24, r24
    20de:	59 f0       	breq	.+22     	; 0x20f6 <prvWriteMessageToBuffer+0xba>
    20e0:	4c 85       	ldd	r20, Y+12	; 0x0c
    20e2:	5d 85       	ldd	r21, Y+13	; 0x0d
    20e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    20e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    20e8:	88 85       	ldd	r24, Y+8	; 0x08
    20ea:	99 85       	ldd	r25, Y+9	; 0x09
    20ec:	b9 01       	movw	r22, r18
    20ee:	42 d1       	rcall	.+644    	; 0x2374 <prvWriteBytesToBuffer>
    20f0:	9b 83       	std	Y+3, r25	; 0x03
    20f2:	8a 83       	std	Y+2, r24	; 0x02
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <prvWriteMessageToBuffer+0xbe>
    20f6:	1b 82       	std	Y+3, r1	; 0x03
    20f8:	1a 82       	std	Y+2, r1	; 0x02
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	9b 81       	ldd	r25, Y+3	; 0x03
    20fe:	61 96       	adiw	r28, 0x11	; 17
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	08 95       	ret

00002114 <xStreamBufferReceive>:
    2114:	af 92       	push	r10
    2116:	bf 92       	push	r11
    2118:	cf 92       	push	r12
    211a:	df 92       	push	r13
    211c:	ef 92       	push	r14
    211e:	ff 92       	push	r15
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	62 97       	sbiw	r28, 0x12	; 18
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	9a 87       	std	Y+10, r25	; 0x0a
    213a:	89 87       	std	Y+9, r24	; 0x09
    213c:	7c 87       	std	Y+12, r23	; 0x0c
    213e:	6b 87       	std	Y+11, r22	; 0x0b
    2140:	5e 87       	std	Y+14, r21	; 0x0e
    2142:	4d 87       	std	Y+13, r20	; 0x0d
    2144:	0f 87       	std	Y+15, r16	; 0x0f
    2146:	18 8b       	std	Y+16, r17	; 0x10
    2148:	29 8b       	std	Y+17, r18	; 0x11
    214a:	3a 8b       	std	Y+18, r19	; 0x12
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	98 87       	std	Y+8, r25	; 0x08
    2152:	8f 83       	std	Y+7, r24	; 0x07
    2154:	1a 82       	std	Y+2, r1	; 0x02
    2156:	19 82       	std	Y+1, r1	; 0x01
    2158:	8f 81       	ldd	r24, Y+7	; 0x07
    215a:	98 85       	ldd	r25, Y+8	; 0x08
    215c:	fc 01       	movw	r30, r24
    215e:	86 85       	ldd	r24, Z+14	; 0x0e
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	81 70       	andi	r24, 0x01	; 1
    2166:	99 27       	eor	r25, r25
    2168:	89 2b       	or	r24, r25
    216a:	29 f0       	breq	.+10     	; 0x2176 <xStreamBufferReceive+0x62>
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	9e 83       	std	Y+6, r25	; 0x06
    2172:	8d 83       	std	Y+5, r24	; 0x05
    2174:	02 c0       	rjmp	.+4      	; 0x217a <xStreamBufferReceive+0x66>
    2176:	1e 82       	std	Y+6, r1	; 0x06
    2178:	1d 82       	std	Y+5, r1	; 0x05
    217a:	8f 85       	ldd	r24, Y+15	; 0x0f
    217c:	98 89       	ldd	r25, Y+16	; 0x10
    217e:	a9 89       	ldd	r26, Y+17	; 0x11
    2180:	ba 89       	ldd	r27, Y+18	; 0x12
    2182:	89 2b       	or	r24, r25
    2184:	8a 2b       	or	r24, r26
    2186:	8b 2b       	or	r24, r27
    2188:	09 f4       	brne	.+2      	; 0x218c <xStreamBufferReceive+0x78>
    218a:	41 c0       	rjmp	.+130    	; 0x220e <__stack+0xf>
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	0f 92       	push	r0
    2192:	8f 81       	ldd	r24, Y+7	; 0x07
    2194:	98 85       	ldd	r25, Y+8	; 0x08
    2196:	24 d2       	rcall	.+1096   	; 0x25e0 <prvBytesInBuffer>
    2198:	9c 83       	std	Y+4, r25	; 0x04
    219a:	8b 83       	std	Y+3, r24	; 0x03
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	82 17       	cp	r24, r18
    21a6:	93 07       	cpc	r25, r19
    21a8:	68 f0       	brcs	.+26     	; 0x21c4 <xStreamBufferReceive+0xb0>
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <xTaskGenericNotifyStateClear>
    21b4:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <xTaskGetCurrentTaskHandle>
    21b8:	9c 01       	movw	r18, r24
    21ba:	8f 81       	ldd	r24, Y+7	; 0x07
    21bc:	98 85       	ldd	r25, Y+8	; 0x08
    21be:	fc 01       	movw	r30, r24
    21c0:	31 87       	std	Z+9, r19	; 0x09
    21c2:	20 87       	std	Z+8, r18	; 0x08
    21c4:	0f 90       	pop	r0
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ca:	3c 81       	ldd	r19, Y+4	; 0x04
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	82 17       	cp	r24, r18
    21d2:	93 07       	cpc	r25, r19
    21d4:	08 f1       	brcs	.+66     	; 0x2218 <__stack+0x19>
    21d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d8:	98 89       	ldd	r25, Y+16	; 0x10
    21da:	a9 89       	ldd	r26, Y+17	; 0x11
    21dc:	ba 89       	ldd	r27, Y+18	; 0x12
    21de:	5c 01       	movw	r10, r24
    21e0:	6d 01       	movw	r12, r26
    21e2:	e1 2c       	mov	r14, r1
    21e4:	f1 2c       	mov	r15, r1
    21e6:	00 e0       	ldi	r16, 0x00	; 0
    21e8:	10 e0       	ldi	r17, 0x00	; 0
    21ea:	98 01       	movw	r18, r16
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	50 e0       	ldi	r21, 0x00	; 0
    21f0:	ba 01       	movw	r22, r20
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	0e 94 00 20 	call	0x4000	; 0x4000 <xTaskGenericNotifyWait>
    21f8:	8f 81       	ldd	r24, Y+7	; 0x07
    21fa:	98 85       	ldd	r25, Y+8	; 0x08
    21fc:	fc 01       	movw	r30, r24
    21fe:	11 86       	std	Z+9, r1	; 0x09
    2200:	10 86       	std	Z+8, r1	; 0x08
    2202:	8f 81       	ldd	r24, Y+7	; 0x07
    2204:	98 85       	ldd	r25, Y+8	; 0x08
    2206:	ec d1       	rcall	.+984    	; 0x25e0 <prvBytesInBuffer>
    2208:	9c 83       	std	Y+4, r25	; 0x04
    220a:	8b 83       	std	Y+3, r24	; 0x03
    220c:	05 c0       	rjmp	.+10     	; 0x2218 <__stack+0x19>
    220e:	8f 81       	ldd	r24, Y+7	; 0x07
    2210:	98 85       	ldd	r25, Y+8	; 0x08
    2212:	e6 d1       	rcall	.+972    	; 0x25e0 <prvBytesInBuffer>
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
    2218:	2b 81       	ldd	r18, Y+3	; 0x03
    221a:	3c 81       	ldd	r19, Y+4	; 0x04
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	82 17       	cp	r24, r18
    2222:	93 07       	cpc	r25, r19
    2224:	70 f5       	brcc	.+92     	; 0x2282 <__stack+0x83>
    2226:	ed 81       	ldd	r30, Y+5	; 0x05
    2228:	fe 81       	ldd	r31, Y+6	; 0x06
    222a:	2b 81       	ldd	r18, Y+3	; 0x03
    222c:	3c 81       	ldd	r19, Y+4	; 0x04
    222e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2230:	5e 85       	ldd	r21, Y+14	; 0x0e
    2232:	6b 85       	ldd	r22, Y+11	; 0x0b
    2234:	7c 85       	ldd	r23, Y+12	; 0x0c
    2236:	8f 81       	ldd	r24, Y+7	; 0x07
    2238:	98 85       	ldd	r25, Y+8	; 0x08
    223a:	8f 01       	movw	r16, r30
    223c:	35 d0       	rcall	.+106    	; 0x22a8 <prvReadMessageFromBuffer>
    223e:	9a 83       	std	Y+2, r25	; 0x02
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	9a 81       	ldd	r25, Y+2	; 0x02
    2246:	89 2b       	or	r24, r25
    2248:	e1 f0       	breq	.+56     	; 0x2282 <__stack+0x83>
    224a:	ad d5       	rcall	.+2906   	; 0x2da6 <vTaskSuspendAll>
    224c:	8f 81       	ldd	r24, Y+7	; 0x07
    224e:	98 85       	ldd	r25, Y+8	; 0x08
    2250:	fc 01       	movw	r30, r24
    2252:	82 85       	ldd	r24, Z+10	; 0x0a
    2254:	93 85       	ldd	r25, Z+11	; 0x0b
    2256:	89 2b       	or	r24, r25
    2258:	99 f0       	breq	.+38     	; 0x2280 <__stack+0x81>
    225a:	8f 81       	ldd	r24, Y+7	; 0x07
    225c:	98 85       	ldd	r25, Y+8	; 0x08
    225e:	fc 01       	movw	r30, r24
    2260:	82 85       	ldd	r24, Z+10	; 0x0a
    2262:	93 85       	ldd	r25, Z+11	; 0x0b
    2264:	e1 2c       	mov	r14, r1
    2266:	f1 2c       	mov	r15, r1
    2268:	00 e0       	ldi	r16, 0x00	; 0
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	a9 01       	movw	r20, r18
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	0e 94 07 21 	call	0x420e	; 0x420e <xTaskGenericNotify>
    2276:	8f 81       	ldd	r24, Y+7	; 0x07
    2278:	98 85       	ldd	r25, Y+8	; 0x08
    227a:	fc 01       	movw	r30, r24
    227c:	13 86       	std	Z+11, r1	; 0x0b
    227e:	12 86       	std	Z+10, r1	; 0x0a
    2280:	9f d5       	rcall	.+2878   	; 0x2dc0 <xTaskResumeAll>
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	62 96       	adiw	r28, 0x12	; 18
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	1f 91       	pop	r17
    2298:	0f 91       	pop	r16
    229a:	ff 90       	pop	r15
    229c:	ef 90       	pop	r14
    229e:	df 90       	pop	r13
    22a0:	cf 90       	pop	r12
    22a2:	bf 90       	pop	r11
    22a4:	af 90       	pop	r10
    22a6:	08 95       	ret

000022a8 <prvReadMessageFromBuffer>:
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	62 97       	sbiw	r28, 0x12	; 18
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	9a 87       	std	Y+10, r25	; 0x0a
    22c2:	89 87       	std	Y+9, r24	; 0x09
    22c4:	7c 87       	std	Y+12, r23	; 0x0c
    22c6:	6b 87       	std	Y+11, r22	; 0x0b
    22c8:	5e 87       	std	Y+14, r21	; 0x0e
    22ca:	4d 87       	std	Y+13, r20	; 0x0d
    22cc:	38 8b       	std	Y+16, r19	; 0x10
    22ce:	2f 87       	std	Y+15, r18	; 0x0f
    22d0:	1a 8b       	std	Y+18, r17	; 0x12
    22d2:	09 8b       	std	Y+17, r16	; 0x11
    22d4:	89 89       	ldd	r24, Y+17	; 0x11
    22d6:	9a 89       	ldd	r25, Y+18	; 0x12
    22d8:	89 2b       	or	r24, r25
    22da:	81 f1       	breq	.+96     	; 0x233c <prvReadMessageFromBuffer+0x94>
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	fc 01       	movw	r30, r24
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
    22ea:	2f 85       	ldd	r18, Y+15	; 0x0f
    22ec:	38 89       	ldd	r19, Y+16	; 0x10
    22ee:	49 89       	ldd	r20, Y+17	; 0x11
    22f0:	5a 89       	ldd	r21, Y+18	; 0x12
    22f2:	be 01       	movw	r22, r28
    22f4:	69 5f       	subi	r22, 0xF9	; 249
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	89 85       	ldd	r24, Y+9	; 0x09
    22fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fc:	ca d0       	rcall	.+404    	; 0x2492 <prvReadBytesFromBuffer>
    22fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2300:	98 85       	ldd	r25, Y+8	; 0x08
    2302:	9a 83       	std	Y+2, r25	; 0x02
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	2f 85       	ldd	r18, Y+15	; 0x0f
    2308:	38 89       	ldd	r19, Y+16	; 0x10
    230a:	89 89       	ldd	r24, Y+17	; 0x11
    230c:	9a 89       	ldd	r25, Y+18	; 0x12
    230e:	a9 01       	movw	r20, r18
    2310:	48 1b       	sub	r20, r24
    2312:	59 0b       	sbc	r21, r25
    2314:	ca 01       	movw	r24, r20
    2316:	98 8b       	std	Y+16, r25	; 0x10
    2318:	8f 87       	std	Y+15, r24	; 0x0f
    231a:	29 81       	ldd	r18, Y+1	; 0x01
    231c:	3a 81       	ldd	r19, Y+2	; 0x02
    231e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2320:	9e 85       	ldd	r25, Y+14	; 0x0e
    2322:	82 17       	cp	r24, r18
    2324:	93 07       	cpc	r25, r19
    2326:	70 f4       	brcc	.+28     	; 0x2344 <prvReadMessageFromBuffer+0x9c>
    2328:	89 85       	ldd	r24, Y+9	; 0x09
    232a:	9a 85       	ldd	r25, Y+10	; 0x0a
    232c:	2b 81       	ldd	r18, Y+3	; 0x03
    232e:	3c 81       	ldd	r19, Y+4	; 0x04
    2330:	fc 01       	movw	r30, r24
    2332:	31 83       	std	Z+1, r19	; 0x01
    2334:	20 83       	st	Z, r18
    2336:	1a 82       	std	Y+2, r1	; 0x02
    2338:	19 82       	std	Y+1, r1	; 0x01
    233a:	04 c0       	rjmp	.+8      	; 0x2344 <prvReadMessageFromBuffer+0x9c>
    233c:	8d 85       	ldd	r24, Y+13	; 0x0d
    233e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	89 83       	std	Y+1, r24	; 0x01
    2344:	2f 85       	ldd	r18, Y+15	; 0x0f
    2346:	38 89       	ldd	r19, Y+16	; 0x10
    2348:	49 81       	ldd	r20, Y+1	; 0x01
    234a:	5a 81       	ldd	r21, Y+2	; 0x02
    234c:	6b 85       	ldd	r22, Y+11	; 0x0b
    234e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	9e d0       	rcall	.+316    	; 0x2492 <prvReadBytesFromBuffer>
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	9e 81       	ldd	r25, Y+6	; 0x06
    235e:	62 96       	adiw	r28, 0x12	; 18
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	0f 91       	pop	r16
    2372:	08 95       	ret

00002374 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	2e 97       	sbiw	r28, 0x0e	; 14
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	9a 87       	std	Y+10, r25	; 0x0a
    238a:	89 87       	std	Y+9, r24	; 0x09
    238c:	7c 87       	std	Y+12, r23	; 0x0c
    238e:	6b 87       	std	Y+11, r22	; 0x0b
    2390:	5e 87       	std	Y+14, r21	; 0x0e
    2392:	4d 87       	std	Y+13, r20	; 0x0d
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	fc 01       	movw	r30, r24
    239a:	82 81       	ldd	r24, Z+2	; 0x02
    239c:	93 81       	ldd	r25, Z+3	; 0x03
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	fc 01       	movw	r30, r24
    23a8:	24 81       	ldd	r18, Z+4	; 0x04
    23aa:	35 81       	ldd	r19, Z+5	; 0x05
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	9a 81       	ldd	r25, Y+2	; 0x02
    23b0:	a9 01       	movw	r20, r18
    23b2:	48 1b       	sub	r20, r24
    23b4:	59 0b       	sbc	r21, r25
    23b6:	ca 01       	movw	r24, r20
    23b8:	9c 83       	std	Y+4, r25	; 0x04
    23ba:	8b 83       	std	Y+3, r24	; 0x03
    23bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23be:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
    23c4:	2b 81       	ldd	r18, Y+3	; 0x03
    23c6:	3c 81       	ldd	r19, Y+4	; 0x04
    23c8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ca:	9e 81       	ldd	r25, Y+6	; 0x06
    23cc:	28 17       	cp	r18, r24
    23ce:	39 07       	cpc	r19, r25
    23d0:	08 f4       	brcc	.+2      	; 0x23d4 <prvWriteBytesToBuffer+0x60>
    23d2:	c9 01       	movw	r24, r18
    23d4:	98 87       	std	Y+8, r25	; 0x08
    23d6:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    23d8:	89 85       	ldd	r24, Y+9	; 0x09
    23da:	9a 85       	ldd	r25, Y+10	; 0x0a
    23dc:	fc 01       	movw	r30, r24
    23de:	24 85       	ldd	r18, Z+12	; 0x0c
    23e0:	35 85       	ldd	r19, Z+13	; 0x0d
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	82 0f       	add	r24, r18
    23e8:	93 1f       	adc	r25, r19
    23ea:	4f 81       	ldd	r20, Y+7	; 0x07
    23ec:	58 85       	ldd	r21, Y+8	; 0x08
    23ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    23f0:	3c 85       	ldd	r19, Y+12	; 0x0c
    23f2:	b9 01       	movw	r22, r18
    23f4:	0e 94 b1 3a 	call	0x7562	; 0x7562 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    23f8:	2d 85       	ldd	r18, Y+13	; 0x0d
    23fa:	3e 85       	ldd	r19, Y+14	; 0x0e
    23fc:	8f 81       	ldd	r24, Y+7	; 0x07
    23fe:	98 85       	ldd	r25, Y+8	; 0x08
    2400:	82 17       	cp	r24, r18
    2402:	93 07       	cpc	r25, r19
    2404:	a8 f4       	brcc	.+42     	; 0x2430 <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2406:	2d 85       	ldd	r18, Y+13	; 0x0d
    2408:	3e 85       	ldd	r19, Y+14	; 0x0e
    240a:	8f 81       	ldd	r24, Y+7	; 0x07
    240c:	98 85       	ldd	r25, Y+8	; 0x08
    240e:	a9 01       	movw	r20, r18
    2410:	48 1b       	sub	r20, r24
    2412:	59 0b       	sbc	r21, r25
    2414:	2b 85       	ldd	r18, Y+11	; 0x0b
    2416:	3c 85       	ldd	r19, Y+12	; 0x0c
    2418:	8f 81       	ldd	r24, Y+7	; 0x07
    241a:	98 85       	ldd	r25, Y+8	; 0x08
    241c:	28 0f       	add	r18, r24
    241e:	39 1f       	adc	r19, r25
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	fc 01       	movw	r30, r24
    2426:	84 85       	ldd	r24, Z+12	; 0x0c
    2428:	95 85       	ldd	r25, Z+13	; 0x0d
    242a:	b9 01       	movw	r22, r18
    242c:	0e 94 b1 3a 	call	0x7562	; 0x7562 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    2430:	29 81       	ldd	r18, Y+1	; 0x01
    2432:	3a 81       	ldd	r19, Y+2	; 0x02
    2434:	8d 85       	ldd	r24, Y+13	; 0x0d
    2436:	9e 85       	ldd	r25, Y+14	; 0x0e
    2438:	82 0f       	add	r24, r18
    243a:	93 1f       	adc	r25, r19
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01

    if( xNextHead >= pxStreamBuffer->xLength )
    2440:	89 85       	ldd	r24, Y+9	; 0x09
    2442:	9a 85       	ldd	r25, Y+10	; 0x0a
    2444:	fc 01       	movw	r30, r24
    2446:	24 81       	ldd	r18, Z+4	; 0x04
    2448:	35 81       	ldd	r19, Z+5	; 0x05
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	82 17       	cp	r24, r18
    2450:	93 07       	cpc	r25, r19
    2452:	68 f0       	brcs	.+26     	; 0x246e <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	fc 01       	movw	r30, r24
    245a:	84 81       	ldd	r24, Z+4	; 0x04
    245c:	95 81       	ldd	r25, Z+5	; 0x05
    245e:	29 81       	ldd	r18, Y+1	; 0x01
    2460:	3a 81       	ldd	r19, Y+2	; 0x02
    2462:	a9 01       	movw	r20, r18
    2464:	48 1b       	sub	r20, r24
    2466:	59 0b       	sbc	r21, r25
    2468:	ca 01       	movw	r24, r20
    246a:	9a 83       	std	Y+2, r25	; 0x02
    246c:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	29 81       	ldd	r18, Y+1	; 0x01
    2474:	3a 81       	ldd	r19, Y+2	; 0x02
    2476:	fc 01       	movw	r30, r24
    2478:	33 83       	std	Z+3, r19	; 0x03
    247a:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    247c:	8d 85       	ldd	r24, Y+13	; 0x0d
    247e:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    2480:	2e 96       	adiw	r28, 0x0e	; 14
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	08 95       	ret

00002492 <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	66 97       	sbiw	r28, 0x16	; 22
    249c:	0f b6       	in	r0, 0x3f	; 63
    249e:	f8 94       	cli
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	0f be       	out	0x3f, r0	; 63
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	98 8b       	std	Y+16, r25	; 0x10
    24a8:	8f 87       	std	Y+15, r24	; 0x0f
    24aa:	7a 8b       	std	Y+18, r23	; 0x12
    24ac:	69 8b       	std	Y+17, r22	; 0x11
    24ae:	5c 8b       	std	Y+20, r21	; 0x14
    24b0:	4b 8b       	std	Y+19, r20	; 0x13
    24b2:	3e 8b       	std	Y+22, r19	; 0x16
    24b4:	2d 8b       	std	Y+21, r18	; 0x15
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    24b6:	8d 89       	ldd	r24, Y+21	; 0x15
    24b8:	9e 89       	ldd	r25, Y+22	; 0x16
    24ba:	9c 83       	std	Y+4, r25	; 0x04
    24bc:	8b 83       	std	Y+3, r24	; 0x03
    24be:	8b 89       	ldd	r24, Y+19	; 0x13
    24c0:	9c 89       	ldd	r25, Y+20	; 0x14
    24c2:	9e 83       	std	Y+6, r25	; 0x06
    24c4:	8d 83       	std	Y+5, r24	; 0x05
    24c6:	2b 81       	ldd	r18, Y+3	; 0x03
    24c8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ca:	8d 81       	ldd	r24, Y+5	; 0x05
    24cc:	9e 81       	ldd	r25, Y+6	; 0x06
    24ce:	28 17       	cp	r18, r24
    24d0:	39 07       	cpc	r19, r25
    24d2:	08 f4       	brcc	.+2      	; 0x24d6 <prvReadBytesFromBuffer+0x44>
    24d4:	c9 01       	movw	r24, r18
    24d6:	98 87       	std	Y+8, r25	; 0x08
    24d8:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    24da:	8f 81       	ldd	r24, Y+7	; 0x07
    24dc:	98 85       	ldd	r25, Y+8	; 0x08
    24de:	89 2b       	or	r24, r25
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <prvReadBytesFromBuffer+0x52>
    24e2:	73 c0       	rjmp	.+230    	; 0x25ca <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    24e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e6:	98 89       	ldd	r25, Y+16	; 0x10
    24e8:	fc 01       	movw	r30, r24
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    24f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f4:	98 89       	ldd	r25, Y+16	; 0x10
    24f6:	fc 01       	movw	r30, r24
    24f8:	24 81       	ldd	r18, Z+4	; 0x04
    24fa:	35 81       	ldd	r19, Z+5	; 0x05
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	a9 01       	movw	r20, r18
    2502:	48 1b       	sub	r20, r24
    2504:	59 0b       	sbc	r21, r25
    2506:	ca 01       	movw	r24, r20
    2508:	9a 87       	std	Y+10, r25	; 0x0a
    250a:	89 87       	std	Y+9, r24	; 0x09
    250c:	8f 81       	ldd	r24, Y+7	; 0x07
    250e:	98 85       	ldd	r25, Y+8	; 0x08
    2510:	9c 87       	std	Y+12, r25	; 0x0c
    2512:	8b 87       	std	Y+11, r24	; 0x0b
    2514:	29 85       	ldd	r18, Y+9	; 0x09
    2516:	3a 85       	ldd	r19, Y+10	; 0x0a
    2518:	8b 85       	ldd	r24, Y+11	; 0x0b
    251a:	9c 85       	ldd	r25, Y+12	; 0x0c
    251c:	28 17       	cp	r18, r24
    251e:	39 07       	cpc	r19, r25
    2520:	08 f4       	brcc	.+2      	; 0x2524 <prvReadBytesFromBuffer+0x92>
    2522:	c9 01       	movw	r24, r18
    2524:	9e 87       	std	Y+14, r25	; 0x0e
    2526:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2528:	8f 85       	ldd	r24, Y+15	; 0x0f
    252a:	98 89       	ldd	r25, Y+16	; 0x10
    252c:	fc 01       	movw	r30, r24
    252e:	24 85       	ldd	r18, Z+12	; 0x0c
    2530:	35 85       	ldd	r19, Z+13	; 0x0d
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	28 0f       	add	r18, r24
    2538:	39 1f       	adc	r19, r25
    253a:	4d 85       	ldd	r20, Y+13	; 0x0d
    253c:	5e 85       	ldd	r21, Y+14	; 0x0e
    253e:	89 89       	ldd	r24, Y+17	; 0x11
    2540:	9a 89       	ldd	r25, Y+18	; 0x12
    2542:	b9 01       	movw	r22, r18
    2544:	0e 94 b1 3a 	call	0x7562	; 0x7562 <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
    2548:	2f 81       	ldd	r18, Y+7	; 0x07
    254a:	38 85       	ldd	r19, Y+8	; 0x08
    254c:	8d 85       	ldd	r24, Y+13	; 0x0d
    254e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2550:	82 17       	cp	r24, r18
    2552:	93 07       	cpc	r25, r19
    2554:	a0 f4       	brcc	.+40     	; 0x257e <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2556:	2f 81       	ldd	r18, Y+7	; 0x07
    2558:	38 85       	ldd	r19, Y+8	; 0x08
    255a:	8d 85       	ldd	r24, Y+13	; 0x0d
    255c:	9e 85       	ldd	r25, Y+14	; 0x0e
    255e:	a9 01       	movw	r20, r18
    2560:	48 1b       	sub	r20, r24
    2562:	59 0b       	sbc	r21, r25
    2564:	8f 85       	ldd	r24, Y+15	; 0x0f
    2566:	98 89       	ldd	r25, Y+16	; 0x10
    2568:	fc 01       	movw	r30, r24
    256a:	64 85       	ldd	r22, Z+12	; 0x0c
    256c:	75 85       	ldd	r23, Z+13	; 0x0d
    256e:	29 89       	ldd	r18, Y+17	; 0x11
    2570:	3a 89       	ldd	r19, Y+18	; 0x12
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	9e 85       	ldd	r25, Y+14	; 0x0e
    2576:	82 0f       	add	r24, r18
    2578:	93 1f       	adc	r25, r19
    257a:	0e 94 b1 3a 	call	0x7562	; 0x7562 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
    257e:	29 81       	ldd	r18, Y+1	; 0x01
    2580:	3a 81       	ldd	r19, Y+2	; 0x02
    2582:	8f 81       	ldd	r24, Y+7	; 0x07
    2584:	98 85       	ldd	r25, Y+8	; 0x08
    2586:	82 0f       	add	r24, r18
    2588:	93 1f       	adc	r25, r19
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    258e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2590:	98 89       	ldd	r25, Y+16	; 0x10
    2592:	fc 01       	movw	r30, r24
    2594:	24 81       	ldd	r18, Z+4	; 0x04
    2596:	35 81       	ldd	r19, Z+5	; 0x05
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	82 17       	cp	r24, r18
    259e:	93 07       	cpc	r25, r19
    25a0:	68 f0       	brcs	.+26     	; 0x25bc <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    25a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25a4:	98 89       	ldd	r25, Y+16	; 0x10
    25a6:	fc 01       	movw	r30, r24
    25a8:	84 81       	ldd	r24, Z+4	; 0x04
    25aa:	95 81       	ldd	r25, Z+5	; 0x05
    25ac:	29 81       	ldd	r18, Y+1	; 0x01
    25ae:	3a 81       	ldd	r19, Y+2	; 0x02
    25b0:	a9 01       	movw	r20, r18
    25b2:	48 1b       	sub	r20, r24
    25b4:	59 0b       	sbc	r21, r25
    25b6:	ca 01       	movw	r24, r20
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    25bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25be:	98 89       	ldd	r25, Y+16	; 0x10
    25c0:	29 81       	ldd	r18, Y+1	; 0x01
    25c2:	3a 81       	ldd	r19, Y+2	; 0x02
    25c4:	fc 01       	movw	r30, r24
    25c6:	31 83       	std	Z+1, r19	; 0x01
    25c8:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    25ca:	8f 81       	ldd	r24, Y+7	; 0x07
    25cc:	98 85       	ldd	r25, Y+8	; 0x08
}
    25ce:	66 96       	adiw	r28, 0x16	; 22
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	08 95       	ret

000025e0 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <prvBytesInBuffer+0x6>
    25e6:	1f 92       	push	r1
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	9c 83       	std	Y+4, r25	; 0x04
    25ee:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	fc 01       	movw	r30, r24
    25f6:	24 81       	ldd	r18, Z+4	; 0x04
    25f8:	35 81       	ldd	r19, Z+5	; 0x05
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	fc 01       	movw	r30, r24
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	82 0f       	add	r24, r18
    2606:	93 1f       	adc	r25, r19
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	fc 01       	movw	r30, r24
    2612:	80 81       	ld	r24, Z
    2614:	91 81       	ldd	r25, Z+1	; 0x01
    2616:	29 81       	ldd	r18, Y+1	; 0x01
    2618:	3a 81       	ldd	r19, Y+2	; 0x02
    261a:	a9 01       	movw	r20, r18
    261c:	48 1b       	sub	r20, r24
    261e:	59 0b       	sbc	r21, r25
    2620:	ca 01       	movw	r24, r20
    2622:	9a 83       	std	Y+2, r25	; 0x02
    2624:	89 83       	std	Y+1, r24	; 0x01

    if( xCount >= pxStreamBuffer->xLength )
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	fc 01       	movw	r30, r24
    262c:	24 81       	ldd	r18, Z+4	; 0x04
    262e:	35 81       	ldd	r19, Z+5	; 0x05
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	9a 81       	ldd	r25, Y+2	; 0x02
    2634:	82 17       	cp	r24, r18
    2636:	93 07       	cpc	r25, r19
    2638:	68 f0       	brcs	.+26     	; 0x2654 <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	fc 01       	movw	r30, r24
    2640:	84 81       	ldd	r24, Z+4	; 0x04
    2642:	95 81       	ldd	r25, Z+5	; 0x05
    2644:	29 81       	ldd	r18, Y+1	; 0x01
    2646:	3a 81       	ldd	r19, Y+2	; 0x02
    2648:	a9 01       	movw	r20, r18
    264a:	48 1b       	sub	r20, r24
    264c:	59 0b       	sbc	r21, r25
    264e:	ca 01       	movw	r24, r20
    2650:	9a 83       	std	Y+2, r25	; 0x02
    2652:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	08 95       	ret

00002666 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    2666:	0f 93       	push	r16
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	29 97       	sbiw	r28, 0x09	; 9
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	9a 83       	std	Y+2, r25	; 0x02
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	7c 83       	std	Y+4, r23	; 0x04
    2682:	6b 83       	std	Y+3, r22	; 0x03
    2684:	5e 83       	std	Y+6, r21	; 0x06
    2686:	4d 83       	std	Y+5, r20	; 0x05
    2688:	38 87       	std	Y+8, r19	; 0x08
    268a:	2f 83       	std	Y+7, r18	; 0x07
    268c:	09 87       	std	Y+9, r16	; 0x09
            const BaseType_t xWriteValue = 0x55;
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	4f e0       	ldi	r20, 0x0F	; 15
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	0e 94 ba 3a 	call	0x7574	; 0x7574 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	2b 81       	ldd	r18, Y+3	; 0x03
    26a4:	3c 81       	ldd	r19, Y+4	; 0x04
    26a6:	fc 01       	movw	r30, r24
    26a8:	35 87       	std	Z+13, r19	; 0x0d
    26aa:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	9a 81       	ldd	r25, Y+2	; 0x02
    26b0:	2d 81       	ldd	r18, Y+5	; 0x05
    26b2:	3e 81       	ldd	r19, Y+6	; 0x06
    26b4:	fc 01       	movw	r30, r24
    26b6:	35 83       	std	Z+5, r19	; 0x05
    26b8:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	2f 81       	ldd	r18, Y+7	; 0x07
    26c0:	38 85       	ldd	r19, Y+8	; 0x08
    26c2:	fc 01       	movw	r30, r24
    26c4:	37 83       	std	Z+7, r19	; 0x07
    26c6:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	29 85       	ldd	r18, Y+9	; 0x09
    26ce:	fc 01       	movw	r30, r24
    26d0:	26 87       	std	Z+14, r18	; 0x0e
}
    26d2:	00 00       	nop
    26d4:	29 96       	adiw	r28, 0x09	; 9
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	0f 91       	pop	r16
    26e6:	08 95       	ret

000026e8 <xTaskCreate>:
    26e8:	af 92       	push	r10
    26ea:	bf 92       	push	r11
    26ec:	cf 92       	push	r12
    26ee:	df 92       	push	r13
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	60 97       	sbiw	r28, 0x10	; 16
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	9f 83       	std	Y+7, r25	; 0x07
    270c:	8e 83       	std	Y+6, r24	; 0x06
    270e:	79 87       	std	Y+9, r23	; 0x09
    2710:	68 87       	std	Y+8, r22	; 0x08
    2712:	5b 87       	std	Y+11, r21	; 0x0b
    2714:	4a 87       	std	Y+10, r20	; 0x0a
    2716:	3d 87       	std	Y+13, r19	; 0x0d
    2718:	2c 87       	std	Y+12, r18	; 0x0c
    271a:	0e 87       	std	Y+14, r16	; 0x0e
    271c:	f8 8a       	std	Y+16, r15	; 0x10
    271e:	ef 86       	std	Y+15, r14	; 0x0f
    2720:	8a 85       	ldd	r24, Y+10	; 0x0a
    2722:	9b 85       	ldd	r25, Y+11	; 0x0b
    2724:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pvPortMalloc>
    2728:	9d 83       	std	Y+5, r25	; 0x05
    272a:	8c 83       	std	Y+4, r24	; 0x04
    272c:	8c 81       	ldd	r24, Y+4	; 0x04
    272e:	9d 81       	ldd	r25, Y+5	; 0x05
    2730:	89 2b       	or	r24, r25
    2732:	b9 f0       	breq	.+46     	; 0x2762 <xTaskCreate+0x7a>
    2734:	84 e3       	ldi	r24, 0x34	; 52
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <pvPortMalloc>
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	89 2b       	or	r24, r25
    2746:	41 f0       	breq	.+16     	; 0x2758 <xTaskCreate+0x70>
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	2c 81       	ldd	r18, Y+4	; 0x04
    274e:	3d 81       	ldd	r19, Y+5	; 0x05
    2750:	fc 01       	movw	r30, r24
    2752:	34 8f       	std	Z+28, r19	; 0x1c
    2754:	23 8f       	std	Z+27, r18	; 0x1b
    2756:	07 c0       	rjmp	.+14     	; 0x2766 <xTaskCreate+0x7e>
    2758:	8c 81       	ldd	r24, Y+4	; 0x04
    275a:	9d 81       	ldd	r25, Y+5	; 0x05
    275c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <vPortFree>
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <xTaskCreate+0x7e>
    2762:	1a 82       	std	Y+2, r1	; 0x02
    2764:	19 82       	std	Y+1, r1	; 0x01
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	89 2b       	or	r24, r25
    276c:	c1 f0       	breq	.+48     	; 0x279e <xTaskCreate+0xb6>
    276e:	a9 81       	ldd	r26, Y+1	; 0x01
    2770:	ba 81       	ldd	r27, Y+2	; 0x02
    2772:	ef 85       	ldd	r30, Y+15	; 0x0f
    2774:	f8 89       	ldd	r31, Y+16	; 0x10
    2776:	2c 85       	ldd	r18, Y+12	; 0x0c
    2778:	3d 85       	ldd	r19, Y+13	; 0x0d
    277a:	4a 85       	ldd	r20, Y+10	; 0x0a
    277c:	5b 85       	ldd	r21, Y+11	; 0x0b
    277e:	68 85       	ldd	r22, Y+8	; 0x08
    2780:	79 85       	ldd	r23, Y+9	; 0x09
    2782:	8e 81       	ldd	r24, Y+6	; 0x06
    2784:	9f 81       	ldd	r25, Y+7	; 0x07
    2786:	a1 2c       	mov	r10, r1
    2788:	b1 2c       	mov	r11, r1
    278a:	6d 01       	movw	r12, r26
    278c:	7f 01       	movw	r14, r30
    278e:	0e 85       	ldd	r16, Y+14	; 0x0e
    2790:	19 d0       	rcall	.+50     	; 0x27c4 <prvInitialiseNewTask>
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	05 d1       	rcall	.+522    	; 0x29a2 <prvAddNewTaskToReadyList>
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	8b 83       	std	Y+3, r24	; 0x03
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <xTaskCreate+0xba>
    279e:	8f ef       	ldi	r24, 0xFF	; 255
    27a0:	8b 83       	std	Y+3, r24	; 0x03
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	60 96       	adiw	r28, 0x10	; 16
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	0f 91       	pop	r16
    27b6:	ff 90       	pop	r15
    27b8:	ef 90       	pop	r14
    27ba:	df 90       	pop	r13
    27bc:	cf 90       	pop	r12
    27be:	bf 90       	pop	r11
    27c0:	af 90       	pop	r10
    27c2:	08 95       	ret

000027c4 <prvInitialiseNewTask>:
    27c4:	af 92       	push	r10
    27c6:	bf 92       	push	r11
    27c8:	cf 92       	push	r12
    27ca:	df 92       	push	r13
    27cc:	ef 92       	push	r14
    27ce:	ff 92       	push	r15
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	62 97       	sbiw	r28, 0x12	; 18
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	9d 83       	std	Y+5, r25	; 0x05
    27ea:	8c 83       	std	Y+4, r24	; 0x04
    27ec:	7f 83       	std	Y+7, r23	; 0x07
    27ee:	6e 83       	std	Y+6, r22	; 0x06
    27f0:	59 87       	std	Y+9, r21	; 0x09
    27f2:	48 87       	std	Y+8, r20	; 0x08
    27f4:	3b 87       	std	Y+11, r19	; 0x0b
    27f6:	2a 87       	std	Y+10, r18	; 0x0a
    27f8:	0c 87       	std	Y+12, r16	; 0x0c
    27fa:	fe 86       	std	Y+14, r15	; 0x0e
    27fc:	ed 86       	std	Y+13, r14	; 0x0d
    27fe:	d8 8a       	std	Y+16, r13	; 0x10
    2800:	cf 86       	std	Y+15, r12	; 0x0f
    2802:	ba 8a       	std	Y+18, r11	; 0x12
    2804:	a9 8a       	std	Y+17, r10	; 0x11
    2806:	8f 85       	ldd	r24, Y+15	; 0x0f
    2808:	98 89       	ldd	r25, Y+16	; 0x10
    280a:	fc 01       	movw	r30, r24
    280c:	83 8d       	ldd	r24, Z+27	; 0x1b
    280e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2810:	28 85       	ldd	r18, Y+8	; 0x08
    2812:	39 85       	ldd	r19, Y+9	; 0x09
    2814:	a9 01       	movw	r20, r18
    2816:	65 ea       	ldi	r22, 0xA5	; 165
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	0e 94 ba 3a 	call	0x7574	; 0x7574 <memset>
    281e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2820:	98 89       	ldd	r25, Y+16	; 0x10
    2822:	fc 01       	movw	r30, r24
    2824:	23 8d       	ldd	r18, Z+27	; 0x1b
    2826:	34 8d       	ldd	r19, Z+28	; 0x1c
    2828:	88 85       	ldd	r24, Y+8	; 0x08
    282a:	99 85       	ldd	r25, Y+9	; 0x09
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	82 0f       	add	r24, r18
    2830:	93 1f       	adc	r25, r19
    2832:	9b 83       	std	Y+3, r25	; 0x03
    2834:	8a 83       	std	Y+2, r24	; 0x02
    2836:	8e 81       	ldd	r24, Y+6	; 0x06
    2838:	9f 81       	ldd	r25, Y+7	; 0x07
    283a:	89 2b       	or	r24, r25
    283c:	69 f1       	breq	.+90     	; 0x2898 <prvInitialiseNewTask+0xd4>
    283e:	19 82       	std	Y+1, r1	; 0x01
    2840:	21 c0       	rjmp	.+66     	; 0x2884 <prvInitialiseNewTask+0xc0>
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	88 2f       	mov	r24, r24
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	29 81       	ldd	r18, Y+1	; 0x01
    284a:	22 2f       	mov	r18, r18
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	4e 81       	ldd	r20, Y+6	; 0x06
    2850:	5f 81       	ldd	r21, Y+7	; 0x07
    2852:	24 0f       	add	r18, r20
    2854:	35 1f       	adc	r19, r21
    2856:	f9 01       	movw	r30, r18
    2858:	40 81       	ld	r20, Z
    285a:	2f 85       	ldd	r18, Y+15	; 0x0f
    285c:	38 89       	ldd	r19, Y+16	; 0x10
    285e:	82 0f       	add	r24, r18
    2860:	93 1f       	adc	r25, r19
    2862:	4d 96       	adiw	r24, 0x1d	; 29
    2864:	fc 01       	movw	r30, r24
    2866:	40 83       	st	Z, r20
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	88 2f       	mov	r24, r24
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	2e 81       	ldd	r18, Y+6	; 0x06
    2870:	3f 81       	ldd	r19, Y+7	; 0x07
    2872:	82 0f       	add	r24, r18
    2874:	93 1f       	adc	r25, r19
    2876:	fc 01       	movw	r30, r24
    2878:	80 81       	ld	r24, Z
    287a:	88 23       	and	r24, r24
    287c:	39 f0       	breq	.+14     	; 0x288c <prvInitialiseNewTask+0xc8>
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	8f 5f       	subi	r24, 0xFF	; 255
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	80 31       	cpi	r24, 0x10	; 16
    2888:	e0 f2       	brcs	.-72     	; 0x2842 <prvInitialiseNewTask+0x7e>
    288a:	01 c0       	rjmp	.+2      	; 0x288e <prvInitialiseNewTask+0xca>
    288c:	00 00       	nop
    288e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2890:	98 89       	ldd	r25, Y+16	; 0x10
    2892:	fc 01       	movw	r30, r24
    2894:	14 a6       	std	Z+44, r1	; 0x2c
    2896:	04 c0       	rjmp	.+8      	; 0x28a0 <prvInitialiseNewTask+0xdc>
    2898:	8f 85       	ldd	r24, Y+15	; 0x0f
    289a:	98 89       	ldd	r25, Y+16	; 0x10
    289c:	fc 01       	movw	r30, r24
    289e:	15 8e       	std	Z+29, r1	; 0x1d
    28a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    28a2:	8a 30       	cpi	r24, 0x0A	; 10
    28a4:	10 f0       	brcs	.+4      	; 0x28aa <prvInitialiseNewTask+0xe6>
    28a6:	89 e0       	ldi	r24, 0x09	; 9
    28a8:	8c 87       	std	Y+12, r24	; 0x0c
    28aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ac:	98 89       	ldd	r25, Y+16	; 0x10
    28ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    28b0:	fc 01       	movw	r30, r24
    28b2:	22 8f       	std	Z+26, r18	; 0x1a
    28b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b6:	98 89       	ldd	r25, Y+16	; 0x10
    28b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    28ba:	fc 01       	movw	r30, r24
    28bc:	25 a7       	std	Z+45, r18	; 0x2d
    28be:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c0:	98 89       	ldd	r25, Y+16	; 0x10
    28c2:	fc 01       	movw	r30, r24
    28c4:	16 a6       	std	Z+46, r1	; 0x2e
    28c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c8:	98 89       	ldd	r25, Y+16	; 0x10
    28ca:	02 96       	adiw	r24, 0x02	; 2
    28cc:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInitialiseItem>
    28d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d2:	98 89       	ldd	r25, Y+16	; 0x10
    28d4:	0e 96       	adiw	r24, 0x0e	; 14
    28d6:	0e 94 d4 05 	call	0xba8	; 0xba8 <vListInitialiseItem>
    28da:	8f 85       	ldd	r24, Y+15	; 0x0f
    28dc:	98 89       	ldd	r25, Y+16	; 0x10
    28de:	2f 85       	ldd	r18, Y+15	; 0x0f
    28e0:	38 89       	ldd	r19, Y+16	; 0x10
    28e2:	fc 01       	movw	r30, r24
    28e4:	33 87       	std	Z+11, r19	; 0x0b
    28e6:	22 87       	std	Z+10, r18	; 0x0a
    28e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    28ea:	88 2f       	mov	r24, r24
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	a0 e0       	ldi	r26, 0x00	; 0
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	2a e0       	ldi	r18, 0x0A	; 10
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	79 01       	movw	r14, r18
    28fc:	8a 01       	movw	r16, r20
    28fe:	e8 1a       	sub	r14, r24
    2900:	f9 0a       	sbc	r15, r25
    2902:	0a 0b       	sbc	r16, r26
    2904:	1b 0b       	sbc	r17, r27
    2906:	d8 01       	movw	r26, r16
    2908:	c7 01       	movw	r24, r14
    290a:	2f 85       	ldd	r18, Y+15	; 0x0f
    290c:	38 89       	ldd	r19, Y+16	; 0x10
    290e:	f9 01       	movw	r30, r18
    2910:	86 87       	std	Z+14, r24	; 0x0e
    2912:	97 87       	std	Z+15, r25	; 0x0f
    2914:	a0 8b       	std	Z+16, r26	; 0x10
    2916:	b1 8b       	std	Z+17, r27	; 0x11
    2918:	8f 85       	ldd	r24, Y+15	; 0x0f
    291a:	98 89       	ldd	r25, Y+16	; 0x10
    291c:	2f 85       	ldd	r18, Y+15	; 0x0f
    291e:	38 89       	ldd	r19, Y+16	; 0x10
    2920:	fc 01       	movw	r30, r24
    2922:	37 8b       	std	Z+23, r19	; 0x17
    2924:	26 8b       	std	Z+22, r18	; 0x16
    2926:	8f 85       	ldd	r24, Y+15	; 0x0f
    2928:	98 89       	ldd	r25, Y+16	; 0x10
    292a:	8f 96       	adiw	r24, 0x2f	; 47
    292c:	44 e0       	ldi	r20, 0x04	; 4
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	70 e0       	ldi	r23, 0x00	; 0
    2934:	0e 94 ba 3a 	call	0x7574	; 0x7574 <memset>
    2938:	8f 85       	ldd	r24, Y+15	; 0x0f
    293a:	98 89       	ldd	r25, Y+16	; 0x10
    293c:	c3 96       	adiw	r24, 0x33	; 51
    293e:	41 e0       	ldi	r20, 0x01	; 1
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	0e 94 ba 3a 	call	0x7574	; 0x7574 <memset>
    294a:	4a 85       	ldd	r20, Y+10	; 0x0a
    294c:	5b 85       	ldd	r21, Y+11	; 0x0b
    294e:	2c 81       	ldd	r18, Y+4	; 0x04
    2950:	3d 81       	ldd	r19, Y+5	; 0x05
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	9b 81       	ldd	r25, Y+3	; 0x03
    2956:	b9 01       	movw	r22, r18
    2958:	0e 94 c5 06 	call	0xd8a	; 0xd8a <pxPortInitialiseStack>
    295c:	9c 01       	movw	r18, r24
    295e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2960:	98 89       	ldd	r25, Y+16	; 0x10
    2962:	fc 01       	movw	r30, r24
    2964:	31 83       	std	Z+1, r19	; 0x01
    2966:	20 83       	st	Z, r18
    2968:	8d 85       	ldd	r24, Y+13	; 0x0d
    296a:	9e 85       	ldd	r25, Y+14	; 0x0e
    296c:	89 2b       	or	r24, r25
    296e:	39 f0       	breq	.+14     	; 0x297e <prvInitialiseNewTask+0x1ba>
    2970:	8d 85       	ldd	r24, Y+13	; 0x0d
    2972:	9e 85       	ldd	r25, Y+14	; 0x0e
    2974:	2f 85       	ldd	r18, Y+15	; 0x0f
    2976:	38 89       	ldd	r19, Y+16	; 0x10
    2978:	fc 01       	movw	r30, r24
    297a:	31 83       	std	Z+1, r19	; 0x01
    297c:	20 83       	st	Z, r18
    297e:	00 00       	nop
    2980:	62 96       	adiw	r28, 0x12	; 18
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    2994:	ff 90       	pop	r15
    2996:	ef 90       	pop	r14
    2998:	df 90       	pop	r13
    299a:	cf 90       	pop	r12
    299c:	bf 90       	pop	r11
    299e:	af 90       	pop	r10
    29a0:	08 95       	ret

000029a2 <prvAddNewTaskToReadyList>:
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <prvAddNewTaskToReadyList+0x6>
    29a8:	1f 92       	push	r1
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
    29ae:	9c 83       	std	Y+4, r25	; 0x04
    29b0:	8b 83       	std	Y+3, r24	; 0x03
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	0f 92       	push	r0
    29b8:	80 91 b6 11 	lds	r24, 0x11B6	; 0x8011b6 <uxCurrentNumberOfTasks>
    29bc:	8f 5f       	subi	r24, 0xFF	; 255
    29be:	80 93 b6 11 	sts	0x11B6, r24	; 0x8011b6 <uxCurrentNumberOfTasks>
    29c2:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    29c6:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    29ca:	89 2b       	or	r24, r25
    29cc:	69 f4       	brne	.+26     	; 0x29e8 <prvAddNewTaskToReadyList+0x46>
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	9c 81       	ldd	r25, Y+4	; 0x04
    29d2:	90 93 0b 11 	sts	0x110B, r25	; 0x80110b <pxCurrentTCB+0x1>
    29d6:	80 93 0a 11 	sts	0x110A, r24	; 0x80110a <pxCurrentTCB>
    29da:	80 91 b6 11 	lds	r24, 0x11B6	; 0x8011b6 <uxCurrentNumberOfTasks>
    29de:	81 30       	cpi	r24, 0x01	; 1
    29e0:	c9 f4       	brne	.+50     	; 0x2a14 <prvAddNewTaskToReadyList+0x72>
    29e2:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <prvInitialiseTaskLists>
    29e6:	16 c0       	rjmp	.+44     	; 0x2a14 <prvAddNewTaskToReadyList+0x72>
    29e8:	80 91 bc 11 	lds	r24, 0x11BC	; 0x8011bc <xSchedulerRunning>
    29ec:	88 23       	and	r24, r24
    29ee:	91 f4       	brne	.+36     	; 0x2a14 <prvAddNewTaskToReadyList+0x72>
    29f0:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    29f4:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    29f8:	fc 01       	movw	r30, r24
    29fa:	22 8d       	ldd	r18, Z+26	; 0x1a
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2a00:	fc 01       	movw	r30, r24
    2a02:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a04:	82 17       	cp	r24, r18
    2a06:	30 f0       	brcs	.+12     	; 0x2a14 <prvAddNewTaskToReadyList+0x72>
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	90 93 0b 11 	sts	0x110B, r25	; 0x80110b <pxCurrentTCB+0x1>
    2a10:	80 93 0a 11 	sts	0x110A, r24	; 0x80110a <pxCurrentTCB>
    2a14:	80 91 c3 11 	lds	r24, 0x11C3	; 0x8011c3 <uxTaskNumber>
    2a18:	8f 5f       	subi	r24, 0xFF	; 255
    2a1a:	80 93 c3 11 	sts	0x11C3, r24	; 0x8011c3 <uxTaskNumber>
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	fc 01       	movw	r30, r24
    2a24:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a26:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <uxTopReadyPriority>
    2a2a:	89 17       	cp	r24, r25
    2a2c:	30 f4       	brcc	.+12     	; 0x2a3a <prvAddNewTaskToReadyList+0x98>
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	9c 81       	ldd	r25, Y+4	; 0x04
    2a32:	fc 01       	movw	r30, r24
    2a34:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a36:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <uxTopReadyPriority>
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3e:	fc 01       	movw	r30, r24
    2a40:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	4b e0       	ldi	r20, 0x0B	; 11
    2a48:	42 9f       	mul	r20, r18
    2a4a:	c0 01       	movw	r24, r0
    2a4c:	43 9f       	mul	r20, r19
    2a4e:	90 0d       	add	r25, r0
    2a50:	11 24       	eor	r1, r1
    2a52:	83 5f       	subi	r24, 0xF3	; 243
    2a54:	9e 4e       	sbci	r25, 0xEE	; 238
    2a56:	fc 01       	movw	r30, r24
    2a58:	80 81       	ld	r24, Z
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	9a 83       	std	Y+2, r25	; 0x02
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	9c 81       	ldd	r25, Y+4	; 0x04
    2a64:	29 81       	ldd	r18, Y+1	; 0x01
    2a66:	3a 81       	ldd	r19, Y+2	; 0x02
    2a68:	fc 01       	movw	r30, r24
    2a6a:	37 83       	std	Z+7, r19	; 0x07
    2a6c:	26 83       	std	Z+6, r18	; 0x06
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	9a 81       	ldd	r25, Y+2	; 0x02
    2a72:	fc 01       	movw	r30, r24
    2a74:	26 81       	ldd	r18, Z+6	; 0x06
    2a76:	37 81       	ldd	r19, Z+7	; 0x07
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	31 87       	std	Z+9, r19	; 0x09
    2a80:	20 87       	std	Z+8, r18	; 0x08
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	fc 01       	movw	r30, r24
    2a88:	86 81       	ldd	r24, Z+6	; 0x06
    2a8a:	97 81       	ldd	r25, Z+7	; 0x07
    2a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a90:	2e 5f       	subi	r18, 0xFE	; 254
    2a92:	3f 4f       	sbci	r19, 0xFF	; 255
    2a94:	fc 01       	movw	r30, r24
    2a96:	35 83       	std	Z+5, r19	; 0x05
    2a98:	24 83       	std	Z+4, r18	; 0x04
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9e:	9c 01       	movw	r18, r24
    2aa0:	2e 5f       	subi	r18, 0xFE	; 254
    2aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	37 83       	std	Z+7, r19	; 0x07
    2aac:	26 83       	std	Z+6, r18	; 0x06
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ab6:	28 2f       	mov	r18, r24
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4b e0       	ldi	r20, 0x0B	; 11
    2abc:	42 9f       	mul	r20, r18
    2abe:	c0 01       	movw	r24, r0
    2ac0:	43 9f       	mul	r20, r19
    2ac2:	90 0d       	add	r25, r0
    2ac4:	11 24       	eor	r1, r1
    2ac6:	9c 01       	movw	r18, r24
    2ac8:	24 5f       	subi	r18, 0xF4	; 244
    2aca:	3e 4e       	sbci	r19, 0xEE	; 238
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	35 87       	std	Z+13, r19	; 0x0d
    2ad4:	24 87       	std	Z+12, r18	; 0x0c
    2ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    2ada:	fc 01       	movw	r30, r24
    2adc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ade:	88 2f       	mov	r24, r24
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	4b e0       	ldi	r20, 0x0B	; 11
    2ae4:	48 9f       	mul	r20, r24
    2ae6:	90 01       	movw	r18, r0
    2ae8:	49 9f       	mul	r20, r25
    2aea:	30 0d       	add	r19, r0
    2aec:	11 24       	eor	r1, r1
    2aee:	24 5f       	subi	r18, 0xF4	; 244
    2af0:	3e 4e       	sbci	r19, 0xEE	; 238
    2af2:	f9 01       	movw	r30, r18
    2af4:	20 81       	ld	r18, Z
    2af6:	41 e0       	ldi	r20, 0x01	; 1
    2af8:	42 0f       	add	r20, r18
    2afa:	5b e0       	ldi	r21, 0x0B	; 11
    2afc:	58 9f       	mul	r21, r24
    2afe:	90 01       	movw	r18, r0
    2b00:	59 9f       	mul	r21, r25
    2b02:	30 0d       	add	r19, r0
    2b04:	11 24       	eor	r1, r1
    2b06:	c9 01       	movw	r24, r18
    2b08:	84 5f       	subi	r24, 0xF4	; 244
    2b0a:	9e 4e       	sbci	r25, 0xEE	; 238
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	40 83       	st	Z, r20
    2b10:	0f 90       	pop	r0
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	80 91 bc 11 	lds	r24, 0x11BC	; 0x8011bc <xSchedulerRunning>
    2b18:	88 23       	and	r24, r24
    2b1a:	71 f0       	breq	.+28     	; 0x2b38 <prvAddNewTaskToReadyList+0x196>
    2b1c:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    2b20:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    2b24:	fc 01       	movw	r30, r24
    2b26:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b30:	28 17       	cp	r18, r24
    2b32:	10 f4       	brcc	.+4      	; 0x2b38 <prvAddNewTaskToReadyList+0x196>
    2b34:	0e 94 8b 07 	call	0xf16	; 0xf16 <vPortYield>
    2b38:	00 00       	nop
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	08 95       	ret

00002b48 <xTaskDelayUntil>:
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	60 97       	sbiw	r28, 0x10	; 16
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	9c 87       	std	Y+12, r25	; 0x0c
    2b66:	8b 87       	std	Y+11, r24	; 0x0b
    2b68:	4d 87       	std	Y+13, r20	; 0x0d
    2b6a:	5e 87       	std	Y+14, r21	; 0x0e
    2b6c:	6f 87       	std	Y+15, r22	; 0x0f
    2b6e:	78 8b       	std	Y+16, r23	; 0x10
    2b70:	19 82       	std	Y+1, r1	; 0x01
    2b72:	19 d1       	rcall	.+562    	; 0x2da6 <vTaskSuspendAll>
    2b74:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <xTickCount>
    2b78:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <xTickCount+0x1>
    2b7c:	a0 91 b9 11 	lds	r26, 0x11B9	; 0x8011b9 <xTickCount+0x2>
    2b80:	b0 91 ba 11 	lds	r27, 0x11BA	; 0x8011ba <xTickCount+0x3>
    2b84:	8a 83       	std	Y+2, r24	; 0x02
    2b86:	9b 83       	std	Y+3, r25	; 0x03
    2b88:	ac 83       	std	Y+4, r26	; 0x04
    2b8a:	bd 83       	std	Y+5, r27	; 0x05
    2b8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b90:	fc 01       	movw	r30, r24
    2b92:	20 81       	ld	r18, Z
    2b94:	31 81       	ldd	r19, Z+1	; 0x01
    2b96:	42 81       	ldd	r20, Z+2	; 0x02
    2b98:	53 81       	ldd	r21, Z+3	; 0x03
    2b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b9e:	af 85       	ldd	r26, Y+15	; 0x0f
    2ba0:	b8 89       	ldd	r27, Y+16	; 0x10
    2ba2:	82 0f       	add	r24, r18
    2ba4:	93 1f       	adc	r25, r19
    2ba6:	a4 1f       	adc	r26, r20
    2ba8:	b5 1f       	adc	r27, r21
    2baa:	8e 83       	std	Y+6, r24	; 0x06
    2bac:	9f 83       	std	Y+7, r25	; 0x07
    2bae:	a8 87       	std	Y+8, r26	; 0x08
    2bb0:	b9 87       	std	Y+9, r27	; 0x09
    2bb2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bb4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	20 81       	ld	r18, Z
    2bba:	31 81       	ldd	r19, Z+1	; 0x01
    2bbc:	42 81       	ldd	r20, Z+2	; 0x02
    2bbe:	53 81       	ldd	r21, Z+3	; 0x03
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc4:	ac 81       	ldd	r26, Y+4	; 0x04
    2bc6:	bd 81       	ldd	r27, Y+5	; 0x05
    2bc8:	82 17       	cp	r24, r18
    2bca:	93 07       	cpc	r25, r19
    2bcc:	a4 07       	cpc	r26, r20
    2bce:	b5 07       	cpc	r27, r21
    2bd0:	00 f5       	brcc	.+64     	; 0x2c12 <xTaskDelayUntil+0xca>
    2bd2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bd4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	20 81       	ld	r18, Z
    2bda:	31 81       	ldd	r19, Z+1	; 0x01
    2bdc:	42 81       	ldd	r20, Z+2	; 0x02
    2bde:	53 81       	ldd	r21, Z+3	; 0x03
    2be0:	8e 81       	ldd	r24, Y+6	; 0x06
    2be2:	9f 81       	ldd	r25, Y+7	; 0x07
    2be4:	a8 85       	ldd	r26, Y+8	; 0x08
    2be6:	b9 85       	ldd	r27, Y+9	; 0x09
    2be8:	82 17       	cp	r24, r18
    2bea:	93 07       	cpc	r25, r19
    2bec:	a4 07       	cpc	r26, r20
    2bee:	b5 07       	cpc	r27, r21
    2bf0:	78 f5       	brcc	.+94     	; 0x2c50 <xTaskDelayUntil+0x108>
    2bf2:	2e 81       	ldd	r18, Y+6	; 0x06
    2bf4:	3f 81       	ldd	r19, Y+7	; 0x07
    2bf6:	48 85       	ldd	r20, Y+8	; 0x08
    2bf8:	59 85       	ldd	r21, Y+9	; 0x09
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfe:	ac 81       	ldd	r26, Y+4	; 0x04
    2c00:	bd 81       	ldd	r27, Y+5	; 0x05
    2c02:	82 17       	cp	r24, r18
    2c04:	93 07       	cpc	r25, r19
    2c06:	a4 07       	cpc	r26, r20
    2c08:	b5 07       	cpc	r27, r21
    2c0a:	10 f5       	brcc	.+68     	; 0x2c50 <xTaskDelayUntil+0x108>
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	1f c0       	rjmp	.+62     	; 0x2c50 <xTaskDelayUntil+0x108>
    2c12:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c14:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c16:	fc 01       	movw	r30, r24
    2c18:	20 81       	ld	r18, Z
    2c1a:	31 81       	ldd	r19, Z+1	; 0x01
    2c1c:	42 81       	ldd	r20, Z+2	; 0x02
    2c1e:	53 81       	ldd	r21, Z+3	; 0x03
    2c20:	8e 81       	ldd	r24, Y+6	; 0x06
    2c22:	9f 81       	ldd	r25, Y+7	; 0x07
    2c24:	a8 85       	ldd	r26, Y+8	; 0x08
    2c26:	b9 85       	ldd	r27, Y+9	; 0x09
    2c28:	82 17       	cp	r24, r18
    2c2a:	93 07       	cpc	r25, r19
    2c2c:	a4 07       	cpc	r26, r20
    2c2e:	b5 07       	cpc	r27, r21
    2c30:	68 f0       	brcs	.+26     	; 0x2c4c <xTaskDelayUntil+0x104>
    2c32:	2e 81       	ldd	r18, Y+6	; 0x06
    2c34:	3f 81       	ldd	r19, Y+7	; 0x07
    2c36:	48 85       	ldd	r20, Y+8	; 0x08
    2c38:	59 85       	ldd	r21, Y+9	; 0x09
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3e:	ac 81       	ldd	r26, Y+4	; 0x04
    2c40:	bd 81       	ldd	r27, Y+5	; 0x05
    2c42:	82 17       	cp	r24, r18
    2c44:	93 07       	cpc	r25, r19
    2c46:	a4 07       	cpc	r26, r20
    2c48:	b5 07       	cpc	r27, r21
    2c4a:	10 f4       	brcc	.+4      	; 0x2c50 <xTaskDelayUntil+0x108>
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c52:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c54:	8e 81       	ldd	r24, Y+6	; 0x06
    2c56:	9f 81       	ldd	r25, Y+7	; 0x07
    2c58:	a8 85       	ldd	r26, Y+8	; 0x08
    2c5a:	b9 85       	ldd	r27, Y+9	; 0x09
    2c5c:	f9 01       	movw	r30, r18
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	88 23       	and	r24, r24
    2c6a:	a9 f0       	breq	.+42     	; 0x2c96 <xTaskDelayUntil+0x14e>
    2c6c:	2e 81       	ldd	r18, Y+6	; 0x06
    2c6e:	3f 81       	ldd	r19, Y+7	; 0x07
    2c70:	48 85       	ldd	r20, Y+8	; 0x08
    2c72:	59 85       	ldd	r21, Y+9	; 0x09
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	9b 81       	ldd	r25, Y+3	; 0x03
    2c78:	ac 81       	ldd	r26, Y+4	; 0x04
    2c7a:	bd 81       	ldd	r27, Y+5	; 0x05
    2c7c:	79 01       	movw	r14, r18
    2c7e:	8a 01       	movw	r16, r20
    2c80:	e8 1a       	sub	r14, r24
    2c82:	f9 0a       	sbc	r15, r25
    2c84:	0a 0b       	sbc	r16, r26
    2c86:	1b 0b       	sbc	r17, r27
    2c88:	d8 01       	movw	r26, r16
    2c8a:	c7 01       	movw	r24, r14
    2c8c:	40 e0       	ldi	r20, 0x00	; 0
    2c8e:	bc 01       	movw	r22, r24
    2c90:	cd 01       	movw	r24, r26
    2c92:	0e 94 33 25 	call	0x4a66	; 0x4a66 <prvAddCurrentTaskToDelayedList>
    2c96:	94 d0       	rcall	.+296    	; 0x2dc0 <xTaskResumeAll>
    2c98:	8a 87       	std	Y+10, r24	; 0x0a
    2c9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c9c:	88 23       	and	r24, r24
    2c9e:	11 f4       	brne	.+4      	; 0x2ca4 <xTaskDelayUntil+0x15c>
    2ca0:	0e 94 8b 07 	call	0xf16	; 0xf16 <vPortYield>
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	60 96       	adiw	r28, 0x10	; 16
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	df 91       	pop	r29
    2cb4:	cf 91       	pop	r28
    2cb6:	1f 91       	pop	r17
    2cb8:	0f 91       	pop	r16
    2cba:	ff 90       	pop	r15
    2cbc:	ef 90       	pop	r14
    2cbe:	08 95       	ret

00002cc0 <vTaskDelay>:
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <vTaskDelay+0x6>
    2cc6:	1f 92       	push	r1
    2cc8:	1f 92       	push	r1
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	6a 83       	std	Y+2, r22	; 0x02
    2cd0:	7b 83       	std	Y+3, r23	; 0x03
    2cd2:	8c 83       	std	Y+4, r24	; 0x04
    2cd4:	9d 83       	std	Y+5, r25	; 0x05
    2cd6:	19 82       	std	Y+1, r1	; 0x01
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	9b 81       	ldd	r25, Y+3	; 0x03
    2cdc:	ac 81       	ldd	r26, Y+4	; 0x04
    2cde:	bd 81       	ldd	r27, Y+5	; 0x05
    2ce0:	89 2b       	or	r24, r25
    2ce2:	8a 2b       	or	r24, r26
    2ce4:	8b 2b       	or	r24, r27
    2ce6:	61 f0       	breq	.+24     	; 0x2d00 <vTaskDelay+0x40>
    2ce8:	5e d0       	rcall	.+188    	; 0x2da6 <vTaskSuspendAll>
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	9b 81       	ldd	r25, Y+3	; 0x03
    2cee:	ac 81       	ldd	r26, Y+4	; 0x04
    2cf0:	bd 81       	ldd	r27, Y+5	; 0x05
    2cf2:	40 e0       	ldi	r20, 0x00	; 0
    2cf4:	bc 01       	movw	r22, r24
    2cf6:	cd 01       	movw	r24, r26
    2cf8:	0e 94 33 25 	call	0x4a66	; 0x4a66 <prvAddCurrentTaskToDelayedList>
    2cfc:	61 d0       	rcall	.+194    	; 0x2dc0 <xTaskResumeAll>
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	88 23       	and	r24, r24
    2d04:	11 f4       	brne	.+4      	; 0x2d0a <vTaskDelay+0x4a>
    2d06:	0e 94 8b 07 	call	0xf16	; 0xf16 <vPortYield>
    2d0a:	00 00       	nop
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	08 95       	ret

00002d1c <vTaskStartScheduler>:
    2d1c:	ef 92       	push	r14
    2d1e:	ff 92       	push	r15
    2d20:	0f 93       	push	r16
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	1f 92       	push	r1
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	0f 2e       	mov	r0, r31
    2d2e:	f8 ec       	ldi	r31, 0xC8	; 200
    2d30:	ef 2e       	mov	r14, r31
    2d32:	f1 e1       	ldi	r31, 0x11	; 17
    2d34:	ff 2e       	mov	r15, r31
    2d36:	f0 2d       	mov	r31, r0
    2d38:	00 e0       	ldi	r16, 0x00	; 0
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 ec       	ldi	r20, 0xC0	; 192
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	68 e7       	ldi	r22, 0x78	; 120
    2d44:	73 e0       	ldi	r23, 0x03	; 3
    2d46:	8c e7       	ldi	r24, 0x7C	; 124
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	ce dc       	rcall	.-1636   	; 0x26e8 <xTaskCreate>
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	81 30       	cpi	r24, 0x01	; 1
    2d52:	19 f4       	brne	.+6      	; 0x2d5a <vTaskStartScheduler+0x3e>
    2d54:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <xTimerCreateTimerTask>
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	81 30       	cpi	r24, 0x01	; 1
    2d5e:	c9 f4       	brne	.+50     	; 0x2d92 <vTaskStartScheduler+0x76>
    2d60:	f8 94       	cli
    2d62:	8f ef       	ldi	r24, 0xFF	; 255
    2d64:	9f ef       	ldi	r25, 0xFF	; 255
    2d66:	dc 01       	movw	r26, r24
    2d68:	80 93 c4 11 	sts	0x11C4, r24	; 0x8011c4 <xNextTaskUnblockTime>
    2d6c:	90 93 c5 11 	sts	0x11C5, r25	; 0x8011c5 <xNextTaskUnblockTime+0x1>
    2d70:	a0 93 c6 11 	sts	0x11C6, r26	; 0x8011c6 <xNextTaskUnblockTime+0x2>
    2d74:	b0 93 c7 11 	sts	0x11C7, r27	; 0x8011c7 <xNextTaskUnblockTime+0x3>
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	80 93 bc 11 	sts	0x11BC, r24	; 0x8011bc <xSchedulerRunning>
    2d7e:	10 92 b7 11 	sts	0x11B7, r1	; 0x8011b7 <xTickCount>
    2d82:	10 92 b8 11 	sts	0x11B8, r1	; 0x8011b8 <xTickCount+0x1>
    2d86:	10 92 b9 11 	sts	0x11B9, r1	; 0x8011b9 <xTickCount+0x2>
    2d8a:	10 92 ba 11 	sts	0x11BA, r1	; 0x8011ba <xTickCount+0x3>
    2d8e:	0e 94 53 07 	call	0xea6	; 0xea6 <xPortStartScheduler>
    2d92:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    2d96:	00 00       	nop
    2d98:	0f 90       	pop	r0
    2d9a:	df 91       	pop	r29
    2d9c:	cf 91       	pop	r28
    2d9e:	0f 91       	pop	r16
    2da0:	ff 90       	pop	r15
    2da2:	ef 90       	pop	r14
    2da4:	08 95       	ret

00002da6 <vTaskSuspendAll>:
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	80 91 ca 11 	lds	r24, 0x11CA	; 0x8011ca <uxSchedulerSuspended>
    2db2:	8f 5f       	subi	r24, 0xFF	; 255
    2db4:	80 93 ca 11 	sts	0x11CA, r24	; 0x8011ca <uxSchedulerSuspended>
    2db8:	00 00       	nop
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	08 95       	ret

00002dc0 <xTaskResumeAll>:
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	2d 97       	sbiw	r28, 0x0d	; 13
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	1a 82       	std	Y+2, r1	; 0x02
    2dd6:	19 82       	std	Y+1, r1	; 0x01
    2dd8:	1b 82       	std	Y+3, r1	; 0x03
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	0f 92       	push	r0
    2de0:	80 91 ca 11 	lds	r24, 0x11CA	; 0x8011ca <uxSchedulerSuspended>
    2de4:	81 50       	subi	r24, 0x01	; 1
    2de6:	80 93 ca 11 	sts	0x11CA, r24	; 0x8011ca <uxSchedulerSuspended>
    2dea:	80 91 ca 11 	lds	r24, 0x11CA	; 0x8011ca <uxSchedulerSuspended>
    2dee:	88 23       	and	r24, r24
    2df0:	09 f0       	breq	.+2      	; 0x2df4 <xTaskResumeAll+0x34>
    2df2:	68 c1       	rjmp	.+720    	; 0x30c4 <xTaskResumeAll+0x304>
    2df4:	80 91 b6 11 	lds	r24, 0x11B6	; 0x8011b6 <uxCurrentNumberOfTasks>
    2df8:	88 23       	and	r24, r24
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <xTaskResumeAll+0x3e>
    2dfc:	63 c1       	rjmp	.+710    	; 0x30c4 <xTaskResumeAll+0x304>
    2dfe:	1b c1       	rjmp	.+566    	; 0x3036 <xTaskResumeAll+0x276>
    2e00:	80 91 9b 11 	lds	r24, 0x119B	; 0x80119b <xPendingReadyList+0x7>
    2e04:	90 91 9c 11 	lds	r25, 0x119C	; 0x80119c <xPendingReadyList+0x8>
    2e08:	fc 01       	movw	r30, r24
    2e0a:	80 85       	ldd	r24, Z+8	; 0x08
    2e0c:	91 85       	ldd	r25, Z+9	; 0x09
    2e0e:	9a 83       	std	Y+2, r25	; 0x02
    2e10:	89 83       	std	Y+1, r24	; 0x01
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	9a 81       	ldd	r25, Y+2	; 0x02
    2e16:	fc 01       	movw	r30, r24
    2e18:	80 8d       	ldd	r24, Z+24	; 0x18
    2e1a:	91 8d       	ldd	r25, Z+25	; 0x19
    2e1c:	99 87       	std	Y+9, r25	; 0x09
    2e1e:	88 87       	std	Y+8, r24	; 0x08
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	fc 01       	movw	r30, r24
    2e26:	82 89       	ldd	r24, Z+18	; 0x12
    2e28:	93 89       	ldd	r25, Z+19	; 0x13
    2e2a:	29 81       	ldd	r18, Y+1	; 0x01
    2e2c:	3a 81       	ldd	r19, Y+2	; 0x02
    2e2e:	f9 01       	movw	r30, r18
    2e30:	24 89       	ldd	r18, Z+20	; 0x14
    2e32:	35 89       	ldd	r19, Z+21	; 0x15
    2e34:	fc 01       	movw	r30, r24
    2e36:	37 83       	std	Z+7, r19	; 0x07
    2e38:	26 83       	std	Z+6, r18	; 0x06
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3e:	fc 01       	movw	r30, r24
    2e40:	84 89       	ldd	r24, Z+20	; 0x14
    2e42:	95 89       	ldd	r25, Z+21	; 0x15
    2e44:	29 81       	ldd	r18, Y+1	; 0x01
    2e46:	3a 81       	ldd	r19, Y+2	; 0x02
    2e48:	f9 01       	movw	r30, r18
    2e4a:	22 89       	ldd	r18, Z+18	; 0x12
    2e4c:	33 89       	ldd	r19, Z+19	; 0x13
    2e4e:	fc 01       	movw	r30, r24
    2e50:	35 83       	std	Z+5, r19	; 0x05
    2e52:	24 83       	std	Z+4, r18	; 0x04
    2e54:	88 85       	ldd	r24, Y+8	; 0x08
    2e56:	99 85       	ldd	r25, Y+9	; 0x09
    2e58:	fc 01       	movw	r30, r24
    2e5a:	21 81       	ldd	r18, Z+1	; 0x01
    2e5c:	32 81       	ldd	r19, Z+2	; 0x02
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	9a 81       	ldd	r25, Y+2	; 0x02
    2e62:	0e 96       	adiw	r24, 0x0e	; 14
    2e64:	28 17       	cp	r18, r24
    2e66:	39 07       	cpc	r19, r25
    2e68:	51 f4       	brne	.+20     	; 0x2e7e <xTaskResumeAll+0xbe>
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	fc 01       	movw	r30, r24
    2e70:	24 89       	ldd	r18, Z+20	; 0x14
    2e72:	35 89       	ldd	r19, Z+21	; 0x15
    2e74:	88 85       	ldd	r24, Y+8	; 0x08
    2e76:	99 85       	ldd	r25, Y+9	; 0x09
    2e78:	fc 01       	movw	r30, r24
    2e7a:	32 83       	std	Z+2, r19	; 0x02
    2e7c:	21 83       	std	Z+1, r18	; 0x01
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	9a 81       	ldd	r25, Y+2	; 0x02
    2e82:	fc 01       	movw	r30, r24
    2e84:	11 8e       	std	Z+25, r1	; 0x19
    2e86:	10 8e       	std	Z+24, r1	; 0x18
    2e88:	88 85       	ldd	r24, Y+8	; 0x08
    2e8a:	99 85       	ldd	r25, Y+9	; 0x09
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	80 81       	ld	r24, Z
    2e90:	2f ef       	ldi	r18, 0xFF	; 255
    2e92:	28 0f       	add	r18, r24
    2e94:	88 85       	ldd	r24, Y+8	; 0x08
    2e96:	99 85       	ldd	r25, Y+9	; 0x09
    2e98:	fc 01       	movw	r30, r24
    2e9a:	20 83       	st	Z, r18
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	84 85       	ldd	r24, Z+12	; 0x0c
    2ea4:	95 85       	ldd	r25, Z+13	; 0x0d
    2ea6:	9b 87       	std	Y+11, r25	; 0x0b
    2ea8:	8a 87       	std	Y+10, r24	; 0x0a
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	9a 81       	ldd	r25, Y+2	; 0x02
    2eae:	fc 01       	movw	r30, r24
    2eb0:	86 81       	ldd	r24, Z+6	; 0x06
    2eb2:	97 81       	ldd	r25, Z+7	; 0x07
    2eb4:	29 81       	ldd	r18, Y+1	; 0x01
    2eb6:	3a 81       	ldd	r19, Y+2	; 0x02
    2eb8:	f9 01       	movw	r30, r18
    2eba:	20 85       	ldd	r18, Z+8	; 0x08
    2ebc:	31 85       	ldd	r19, Z+9	; 0x09
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	37 83       	std	Z+7, r19	; 0x07
    2ec2:	26 83       	std	Z+6, r18	; 0x06
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec8:	fc 01       	movw	r30, r24
    2eca:	80 85       	ldd	r24, Z+8	; 0x08
    2ecc:	91 85       	ldd	r25, Z+9	; 0x09
    2ece:	29 81       	ldd	r18, Y+1	; 0x01
    2ed0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ed2:	f9 01       	movw	r30, r18
    2ed4:	26 81       	ldd	r18, Z+6	; 0x06
    2ed6:	37 81       	ldd	r19, Z+7	; 0x07
    2ed8:	fc 01       	movw	r30, r24
    2eda:	35 83       	std	Z+5, r19	; 0x05
    2edc:	24 83       	std	Z+4, r18	; 0x04
    2ede:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ee0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	21 81       	ldd	r18, Z+1	; 0x01
    2ee6:	32 81       	ldd	r19, Z+2	; 0x02
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	02 96       	adiw	r24, 0x02	; 2
    2eee:	28 17       	cp	r18, r24
    2ef0:	39 07       	cpc	r19, r25
    2ef2:	51 f4       	brne	.+20     	; 0x2f08 <xTaskResumeAll+0x148>
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	fc 01       	movw	r30, r24
    2efa:	20 85       	ldd	r18, Z+8	; 0x08
    2efc:	31 85       	ldd	r19, Z+9	; 0x09
    2efe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f00:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f02:	fc 01       	movw	r30, r24
    2f04:	32 83       	std	Z+2, r19	; 0x02
    2f06:	21 83       	std	Z+1, r18	; 0x01
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	15 86       	std	Z+13, r1	; 0x0d
    2f10:	14 86       	std	Z+12, r1	; 0x0c
    2f12:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f14:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f16:	fc 01       	movw	r30, r24
    2f18:	80 81       	ld	r24, Z
    2f1a:	2f ef       	ldi	r18, 0xFF	; 255
    2f1c:	28 0f       	add	r18, r24
    2f1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f22:	fc 01       	movw	r30, r24
    2f24:	20 83       	st	Z, r18
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f2e:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <uxTopReadyPriority>
    2f32:	89 17       	cp	r24, r25
    2f34:	30 f4       	brcc	.+12     	; 0x2f42 <xTaskResumeAll+0x182>
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f3e:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <uxTopReadyPriority>
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	9a 81       	ldd	r25, Y+2	; 0x02
    2f46:	fc 01       	movw	r30, r24
    2f48:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f4a:	28 2f       	mov	r18, r24
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	4b e0       	ldi	r20, 0x0B	; 11
    2f50:	42 9f       	mul	r20, r18
    2f52:	c0 01       	movw	r24, r0
    2f54:	43 9f       	mul	r20, r19
    2f56:	90 0d       	add	r25, r0
    2f58:	11 24       	eor	r1, r1
    2f5a:	83 5f       	subi	r24, 0xF3	; 243
    2f5c:	9e 4e       	sbci	r25, 0xEE	; 238
    2f5e:	fc 01       	movw	r30, r24
    2f60:	80 81       	ld	r24, Z
    2f62:	91 81       	ldd	r25, Z+1	; 0x01
    2f64:	9d 87       	std	Y+13, r25	; 0x0d
    2f66:	8c 87       	std	Y+12, r24	; 0x0c
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
    2f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f6e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f70:	fc 01       	movw	r30, r24
    2f72:	37 83       	std	Z+7, r19	; 0x07
    2f74:	26 83       	std	Z+6, r18	; 0x06
    2f76:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f78:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	26 81       	ldd	r18, Z+6	; 0x06
    2f7e:	37 81       	ldd	r19, Z+7	; 0x07
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
    2f84:	fc 01       	movw	r30, r24
    2f86:	31 87       	std	Z+9, r19	; 0x09
    2f88:	20 87       	std	Z+8, r18	; 0x08
    2f8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f8e:	fc 01       	movw	r30, r24
    2f90:	86 81       	ldd	r24, Z+6	; 0x06
    2f92:	97 81       	ldd	r25, Z+7	; 0x07
    2f94:	29 81       	ldd	r18, Y+1	; 0x01
    2f96:	3a 81       	ldd	r19, Y+2	; 0x02
    2f98:	2e 5f       	subi	r18, 0xFE	; 254
    2f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	35 83       	std	Z+5, r19	; 0x05
    2fa0:	24 83       	std	Z+4, r18	; 0x04
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa6:	9c 01       	movw	r18, r24
    2fa8:	2e 5f       	subi	r18, 0xFE	; 254
    2faa:	3f 4f       	sbci	r19, 0xFF	; 255
    2fac:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fae:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	37 83       	std	Z+7, r19	; 0x07
    2fb4:	26 83       	std	Z+6, r18	; 0x06
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fba:	fc 01       	movw	r30, r24
    2fbc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fbe:	28 2f       	mov	r18, r24
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	4b e0       	ldi	r20, 0x0B	; 11
    2fc4:	42 9f       	mul	r20, r18
    2fc6:	c0 01       	movw	r24, r0
    2fc8:	43 9f       	mul	r20, r19
    2fca:	90 0d       	add	r25, r0
    2fcc:	11 24       	eor	r1, r1
    2fce:	9c 01       	movw	r18, r24
    2fd0:	24 5f       	subi	r18, 0xF4	; 244
    2fd2:	3e 4e       	sbci	r19, 0xEE	; 238
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	fc 01       	movw	r30, r24
    2fda:	35 87       	std	Z+13, r19	; 0x0d
    2fdc:	24 87       	std	Z+12, r18	; 0x0c
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fe6:	88 2f       	mov	r24, r24
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	4b e0       	ldi	r20, 0x0B	; 11
    2fec:	48 9f       	mul	r20, r24
    2fee:	90 01       	movw	r18, r0
    2ff0:	49 9f       	mul	r20, r25
    2ff2:	30 0d       	add	r19, r0
    2ff4:	11 24       	eor	r1, r1
    2ff6:	24 5f       	subi	r18, 0xF4	; 244
    2ff8:	3e 4e       	sbci	r19, 0xEE	; 238
    2ffa:	f9 01       	movw	r30, r18
    2ffc:	20 81       	ld	r18, Z
    2ffe:	41 e0       	ldi	r20, 0x01	; 1
    3000:	42 0f       	add	r20, r18
    3002:	5b e0       	ldi	r21, 0x0B	; 11
    3004:	58 9f       	mul	r21, r24
    3006:	90 01       	movw	r18, r0
    3008:	59 9f       	mul	r21, r25
    300a:	30 0d       	add	r19, r0
    300c:	11 24       	eor	r1, r1
    300e:	c9 01       	movw	r24, r18
    3010:	84 5f       	subi	r24, 0xF4	; 244
    3012:	9e 4e       	sbci	r25, 0xEE	; 238
    3014:	fc 01       	movw	r30, r24
    3016:	40 83       	st	Z, r20
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	9a 81       	ldd	r25, Y+2	; 0x02
    301c:	fc 01       	movw	r30, r24
    301e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3020:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    3024:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    3028:	fc 01       	movw	r30, r24
    302a:	82 8d       	ldd	r24, Z+26	; 0x1a
    302c:	28 17       	cp	r18, r24
    302e:	18 f0       	brcs	.+6      	; 0x3036 <xTaskResumeAll+0x276>
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	80 93 c1 11 	sts	0x11C1, r24	; 0x8011c1 <xYieldPending>
    3036:	80 91 94 11 	lds	r24, 0x1194	; 0x801194 <xPendingReadyList>
    303a:	88 23       	and	r24, r24
    303c:	09 f0       	breq	.+2      	; 0x3040 <xTaskResumeAll+0x280>
    303e:	e0 ce       	rjmp	.-576    	; 0x2e00 <xTaskResumeAll+0x40>
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9a 81       	ldd	r25, Y+2	; 0x02
    3044:	89 2b       	or	r24, r25
    3046:	09 f0       	breq	.+2      	; 0x304a <xTaskResumeAll+0x28a>
    3048:	98 d6       	rcall	.+3376   	; 0x3d7a <prvResetNextTaskUnblockTime>
    304a:	80 91 bd 11 	lds	r24, 0x11BD	; 0x8011bd <xPendedTicks>
    304e:	90 91 be 11 	lds	r25, 0x11BE	; 0x8011be <xPendedTicks+0x1>
    3052:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <xPendedTicks+0x2>
    3056:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <xPendedTicks+0x3>
    305a:	8c 83       	std	Y+4, r24	; 0x04
    305c:	9d 83       	std	Y+5, r25	; 0x05
    305e:	ae 83       	std	Y+6, r26	; 0x06
    3060:	bf 83       	std	Y+7, r27	; 0x07
    3062:	8c 81       	ldd	r24, Y+4	; 0x04
    3064:	9d 81       	ldd	r25, Y+5	; 0x05
    3066:	ae 81       	ldd	r26, Y+6	; 0x06
    3068:	bf 81       	ldd	r27, Y+7	; 0x07
    306a:	89 2b       	or	r24, r25
    306c:	8a 2b       	or	r24, r26
    306e:	8b 2b       	or	r24, r27
    3070:	09 f1       	breq	.+66     	; 0x30b4 <xTaskResumeAll+0x2f4>
    3072:	58 d0       	rcall	.+176    	; 0x3124 <xTaskIncrementTick>
    3074:	88 23       	and	r24, r24
    3076:	19 f0       	breq	.+6      	; 0x307e <xTaskResumeAll+0x2be>
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	80 93 c1 11 	sts	0x11C1, r24	; 0x8011c1 <xYieldPending>
    307e:	8c 81       	ldd	r24, Y+4	; 0x04
    3080:	9d 81       	ldd	r25, Y+5	; 0x05
    3082:	ae 81       	ldd	r26, Y+6	; 0x06
    3084:	bf 81       	ldd	r27, Y+7	; 0x07
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	a1 09       	sbc	r26, r1
    308a:	b1 09       	sbc	r27, r1
    308c:	8c 83       	std	Y+4, r24	; 0x04
    308e:	9d 83       	std	Y+5, r25	; 0x05
    3090:	ae 83       	std	Y+6, r26	; 0x06
    3092:	bf 83       	std	Y+7, r27	; 0x07
    3094:	8c 81       	ldd	r24, Y+4	; 0x04
    3096:	9d 81       	ldd	r25, Y+5	; 0x05
    3098:	ae 81       	ldd	r26, Y+6	; 0x06
    309a:	bf 81       	ldd	r27, Y+7	; 0x07
    309c:	89 2b       	or	r24, r25
    309e:	8a 2b       	or	r24, r26
    30a0:	8b 2b       	or	r24, r27
    30a2:	39 f7       	brne	.-50     	; 0x3072 <xTaskResumeAll+0x2b2>
    30a4:	10 92 bd 11 	sts	0x11BD, r1	; 0x8011bd <xPendedTicks>
    30a8:	10 92 be 11 	sts	0x11BE, r1	; 0x8011be <xPendedTicks+0x1>
    30ac:	10 92 bf 11 	sts	0x11BF, r1	; 0x8011bf <xPendedTicks+0x2>
    30b0:	10 92 c0 11 	sts	0x11C0, r1	; 0x8011c0 <xPendedTicks+0x3>
    30b4:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <xYieldPending>
    30b8:	88 23       	and	r24, r24
    30ba:	21 f0       	breq	.+8      	; 0x30c4 <xTaskResumeAll+0x304>
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	8b 83       	std	Y+3, r24	; 0x03
    30c0:	0e 94 8b 07 	call	0xf16	; 0xf16 <vPortYield>
    30c4:	0f 90       	pop	r0
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	2d 96       	adiw	r28, 0x0d	; 13
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	de bf       	out	0x3e, r29	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	cd bf       	out	0x3d, r28	; 61
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	08 95       	ret

000030dc <xTaskGetTickCount>:
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <xTaskGetTickCount+0x6>
    30e2:	1f 92       	push	r1
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	0f 92       	push	r0
    30ee:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <xTickCount>
    30f2:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <xTickCount+0x1>
    30f6:	a0 91 b9 11 	lds	r26, 0x11B9	; 0x8011b9 <xTickCount+0x2>
    30fa:	b0 91 ba 11 	lds	r27, 0x11BA	; 0x8011ba <xTickCount+0x3>
    30fe:	89 83       	std	Y+1, r24	; 0x01
    3100:	9a 83       	std	Y+2, r25	; 0x02
    3102:	ab 83       	std	Y+3, r26	; 0x03
    3104:	bc 83       	std	Y+4, r27	; 0x04
    3106:	0f 90       	pop	r0
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	9a 81       	ldd	r25, Y+2	; 0x02
    310e:	ab 81       	ldd	r26, Y+3	; 0x03
    3110:	bc 81       	ldd	r27, Y+4	; 0x04
    3112:	bc 01       	movw	r22, r24
    3114:	cd 01       	movw	r24, r26
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	08 95       	ret

00003124 <xTaskIncrementTick>:
    3124:	cf 93       	push	r28
    3126:	df 93       	push	r29
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	63 97       	sbiw	r28, 0x13	; 19
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	19 82       	std	Y+1, r1	; 0x01
    313a:	80 91 ca 11 	lds	r24, 0x11CA	; 0x8011ca <uxSchedulerSuspended>
    313e:	88 23       	and	r24, r24
    3140:	09 f0       	breq	.+2      	; 0x3144 <xTaskIncrementTick+0x20>
    3142:	cc c1       	rjmp	.+920    	; 0x34dc <xTaskIncrementTick+0x3b8>
    3144:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <xTickCount>
    3148:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <xTickCount+0x1>
    314c:	a0 91 b9 11 	lds	r26, 0x11B9	; 0x8011b9 <xTickCount+0x2>
    3150:	b0 91 ba 11 	lds	r27, 0x11BA	; 0x8011ba <xTickCount+0x3>
    3154:	01 96       	adiw	r24, 0x01	; 1
    3156:	a1 1d       	adc	r26, r1
    3158:	b1 1d       	adc	r27, r1
    315a:	8a 83       	std	Y+2, r24	; 0x02
    315c:	9b 83       	std	Y+3, r25	; 0x03
    315e:	ac 83       	std	Y+4, r26	; 0x04
    3160:	bd 83       	std	Y+5, r27	; 0x05
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	9b 81       	ldd	r25, Y+3	; 0x03
    3166:	ac 81       	ldd	r26, Y+4	; 0x04
    3168:	bd 81       	ldd	r27, Y+5	; 0x05
    316a:	80 93 b7 11 	sts	0x11B7, r24	; 0x8011b7 <xTickCount>
    316e:	90 93 b8 11 	sts	0x11B8, r25	; 0x8011b8 <xTickCount+0x1>
    3172:	a0 93 b9 11 	sts	0x11B9, r26	; 0x8011b9 <xTickCount+0x2>
    3176:	b0 93 ba 11 	sts	0x11BA, r27	; 0x8011ba <xTickCount+0x3>
    317a:	8a 81       	ldd	r24, Y+2	; 0x02
    317c:	9b 81       	ldd	r25, Y+3	; 0x03
    317e:	ac 81       	ldd	r26, Y+4	; 0x04
    3180:	bd 81       	ldd	r27, Y+5	; 0x05
    3182:	89 2b       	or	r24, r25
    3184:	8a 2b       	or	r24, r26
    3186:	8b 2b       	or	r24, r27
    3188:	d1 f4       	brne	.+52     	; 0x31be <xTaskIncrementTick+0x9a>
    318a:	80 91 90 11 	lds	r24, 0x1190	; 0x801190 <pxDelayedTaskList>
    318e:	90 91 91 11 	lds	r25, 0x1191	; 0x801191 <pxDelayedTaskList+0x1>
    3192:	9f 83       	std	Y+7, r25	; 0x07
    3194:	8e 83       	std	Y+6, r24	; 0x06
    3196:	80 91 92 11 	lds	r24, 0x1192	; 0x801192 <pxOverflowDelayedTaskList>
    319a:	90 91 93 11 	lds	r25, 0x1193	; 0x801193 <pxOverflowDelayedTaskList+0x1>
    319e:	90 93 91 11 	sts	0x1191, r25	; 0x801191 <pxDelayedTaskList+0x1>
    31a2:	80 93 90 11 	sts	0x1190, r24	; 0x801190 <pxDelayedTaskList>
    31a6:	8e 81       	ldd	r24, Y+6	; 0x06
    31a8:	9f 81       	ldd	r25, Y+7	; 0x07
    31aa:	90 93 93 11 	sts	0x1193, r25	; 0x801193 <pxOverflowDelayedTaskList+0x1>
    31ae:	80 93 92 11 	sts	0x1192, r24	; 0x801192 <pxOverflowDelayedTaskList>
    31b2:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <xNumOfOverflows>
    31b6:	8f 5f       	subi	r24, 0xFF	; 255
    31b8:	80 93 c2 11 	sts	0x11C2, r24	; 0x8011c2 <xNumOfOverflows>
    31bc:	de d5       	rcall	.+3004   	; 0x3d7a <prvResetNextTaskUnblockTime>
    31be:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <xNextTaskUnblockTime>
    31c2:	90 91 c5 11 	lds	r25, 0x11C5	; 0x8011c5 <xNextTaskUnblockTime+0x1>
    31c6:	a0 91 c6 11 	lds	r26, 0x11C6	; 0x8011c6 <xNextTaskUnblockTime+0x2>
    31ca:	b0 91 c7 11 	lds	r27, 0x11C7	; 0x8011c7 <xNextTaskUnblockTime+0x3>
    31ce:	2a 81       	ldd	r18, Y+2	; 0x02
    31d0:	3b 81       	ldd	r19, Y+3	; 0x03
    31d2:	4c 81       	ldd	r20, Y+4	; 0x04
    31d4:	5d 81       	ldd	r21, Y+5	; 0x05
    31d6:	28 17       	cp	r18, r24
    31d8:	39 07       	cpc	r19, r25
    31da:	4a 07       	cpc	r20, r26
    31dc:	5b 07       	cpc	r21, r27
    31de:	08 f4       	brcc	.+2      	; 0x31e2 <xTaskIncrementTick+0xbe>
    31e0:	60 c1       	rjmp	.+704    	; 0x34a2 <xTaskIncrementTick+0x37e>
    31e2:	80 91 90 11 	lds	r24, 0x1190	; 0x801190 <pxDelayedTaskList>
    31e6:	90 91 91 11 	lds	r25, 0x1191	; 0x801191 <pxDelayedTaskList+0x1>
    31ea:	fc 01       	movw	r30, r24
    31ec:	80 81       	ld	r24, Z
    31ee:	88 23       	and	r24, r24
    31f0:	61 f4       	brne	.+24     	; 0x320a <xTaskIncrementTick+0xe6>
    31f2:	8f ef       	ldi	r24, 0xFF	; 255
    31f4:	9f ef       	ldi	r25, 0xFF	; 255
    31f6:	dc 01       	movw	r26, r24
    31f8:	80 93 c4 11 	sts	0x11C4, r24	; 0x8011c4 <xNextTaskUnblockTime>
    31fc:	90 93 c5 11 	sts	0x11C5, r25	; 0x8011c5 <xNextTaskUnblockTime+0x1>
    3200:	a0 93 c6 11 	sts	0x11C6, r26	; 0x8011c6 <xNextTaskUnblockTime+0x2>
    3204:	b0 93 c7 11 	sts	0x11C7, r27	; 0x8011c7 <xNextTaskUnblockTime+0x3>
    3208:	4c c1       	rjmp	.+664    	; 0x34a2 <xTaskIncrementTick+0x37e>
    320a:	80 91 90 11 	lds	r24, 0x1190	; 0x801190 <pxDelayedTaskList>
    320e:	90 91 91 11 	lds	r25, 0x1191	; 0x801191 <pxDelayedTaskList+0x1>
    3212:	fc 01       	movw	r30, r24
    3214:	87 81       	ldd	r24, Z+7	; 0x07
    3216:	90 85       	ldd	r25, Z+8	; 0x08
    3218:	fc 01       	movw	r30, r24
    321a:	80 85       	ldd	r24, Z+8	; 0x08
    321c:	91 85       	ldd	r25, Z+9	; 0x09
    321e:	99 87       	std	Y+9, r25	; 0x09
    3220:	88 87       	std	Y+8, r24	; 0x08
    3222:	88 85       	ldd	r24, Y+8	; 0x08
    3224:	99 85       	ldd	r25, Y+9	; 0x09
    3226:	fc 01       	movw	r30, r24
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	a4 81       	ldd	r26, Z+4	; 0x04
    322e:	b5 81       	ldd	r27, Z+5	; 0x05
    3230:	8a 87       	std	Y+10, r24	; 0x0a
    3232:	9b 87       	std	Y+11, r25	; 0x0b
    3234:	ac 87       	std	Y+12, r26	; 0x0c
    3236:	bd 87       	std	Y+13, r27	; 0x0d
    3238:	2a 81       	ldd	r18, Y+2	; 0x02
    323a:	3b 81       	ldd	r19, Y+3	; 0x03
    323c:	4c 81       	ldd	r20, Y+4	; 0x04
    323e:	5d 81       	ldd	r21, Y+5	; 0x05
    3240:	8a 85       	ldd	r24, Y+10	; 0x0a
    3242:	9b 85       	ldd	r25, Y+11	; 0x0b
    3244:	ac 85       	ldd	r26, Y+12	; 0x0c
    3246:	bd 85       	ldd	r27, Y+13	; 0x0d
    3248:	28 17       	cp	r18, r24
    324a:	39 07       	cpc	r19, r25
    324c:	4a 07       	cpc	r20, r26
    324e:	5b 07       	cpc	r21, r27
    3250:	68 f4       	brcc	.+26     	; 0x326c <xTaskIncrementTick+0x148>
    3252:	8a 85       	ldd	r24, Y+10	; 0x0a
    3254:	9b 85       	ldd	r25, Y+11	; 0x0b
    3256:	ac 85       	ldd	r26, Y+12	; 0x0c
    3258:	bd 85       	ldd	r27, Y+13	; 0x0d
    325a:	80 93 c4 11 	sts	0x11C4, r24	; 0x8011c4 <xNextTaskUnblockTime>
    325e:	90 93 c5 11 	sts	0x11C5, r25	; 0x8011c5 <xNextTaskUnblockTime+0x1>
    3262:	a0 93 c6 11 	sts	0x11C6, r26	; 0x8011c6 <xNextTaskUnblockTime+0x2>
    3266:	b0 93 c7 11 	sts	0x11C7, r27	; 0x8011c7 <xNextTaskUnblockTime+0x3>
    326a:	1b c1       	rjmp	.+566    	; 0x34a2 <xTaskIncrementTick+0x37e>
    326c:	88 85       	ldd	r24, Y+8	; 0x08
    326e:	99 85       	ldd	r25, Y+9	; 0x09
    3270:	fc 01       	movw	r30, r24
    3272:	84 85       	ldd	r24, Z+12	; 0x0c
    3274:	95 85       	ldd	r25, Z+13	; 0x0d
    3276:	9f 87       	std	Y+15, r25	; 0x0f
    3278:	8e 87       	std	Y+14, r24	; 0x0e
    327a:	88 85       	ldd	r24, Y+8	; 0x08
    327c:	99 85       	ldd	r25, Y+9	; 0x09
    327e:	fc 01       	movw	r30, r24
    3280:	86 81       	ldd	r24, Z+6	; 0x06
    3282:	97 81       	ldd	r25, Z+7	; 0x07
    3284:	28 85       	ldd	r18, Y+8	; 0x08
    3286:	39 85       	ldd	r19, Y+9	; 0x09
    3288:	f9 01       	movw	r30, r18
    328a:	20 85       	ldd	r18, Z+8	; 0x08
    328c:	31 85       	ldd	r19, Z+9	; 0x09
    328e:	fc 01       	movw	r30, r24
    3290:	37 83       	std	Z+7, r19	; 0x07
    3292:	26 83       	std	Z+6, r18	; 0x06
    3294:	88 85       	ldd	r24, Y+8	; 0x08
    3296:	99 85       	ldd	r25, Y+9	; 0x09
    3298:	fc 01       	movw	r30, r24
    329a:	80 85       	ldd	r24, Z+8	; 0x08
    329c:	91 85       	ldd	r25, Z+9	; 0x09
    329e:	28 85       	ldd	r18, Y+8	; 0x08
    32a0:	39 85       	ldd	r19, Y+9	; 0x09
    32a2:	f9 01       	movw	r30, r18
    32a4:	26 81       	ldd	r18, Z+6	; 0x06
    32a6:	37 81       	ldd	r19, Z+7	; 0x07
    32a8:	fc 01       	movw	r30, r24
    32aa:	35 83       	std	Z+5, r19	; 0x05
    32ac:	24 83       	std	Z+4, r18	; 0x04
    32ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    32b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    32b2:	fc 01       	movw	r30, r24
    32b4:	21 81       	ldd	r18, Z+1	; 0x01
    32b6:	32 81       	ldd	r19, Z+2	; 0x02
    32b8:	88 85       	ldd	r24, Y+8	; 0x08
    32ba:	99 85       	ldd	r25, Y+9	; 0x09
    32bc:	02 96       	adiw	r24, 0x02	; 2
    32be:	28 17       	cp	r18, r24
    32c0:	39 07       	cpc	r19, r25
    32c2:	51 f4       	brne	.+20     	; 0x32d8 <xTaskIncrementTick+0x1b4>
    32c4:	88 85       	ldd	r24, Y+8	; 0x08
    32c6:	99 85       	ldd	r25, Y+9	; 0x09
    32c8:	fc 01       	movw	r30, r24
    32ca:	20 85       	ldd	r18, Z+8	; 0x08
    32cc:	31 85       	ldd	r19, Z+9	; 0x09
    32ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    32d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    32d2:	fc 01       	movw	r30, r24
    32d4:	32 83       	std	Z+2, r19	; 0x02
    32d6:	21 83       	std	Z+1, r18	; 0x01
    32d8:	88 85       	ldd	r24, Y+8	; 0x08
    32da:	99 85       	ldd	r25, Y+9	; 0x09
    32dc:	fc 01       	movw	r30, r24
    32de:	15 86       	std	Z+13, r1	; 0x0d
    32e0:	14 86       	std	Z+12, r1	; 0x0c
    32e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    32e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    32e6:	fc 01       	movw	r30, r24
    32e8:	80 81       	ld	r24, Z
    32ea:	2f ef       	ldi	r18, 0xFF	; 255
    32ec:	28 0f       	add	r18, r24
    32ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    32f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    32f2:	fc 01       	movw	r30, r24
    32f4:	20 83       	st	Z, r18
    32f6:	88 85       	ldd	r24, Y+8	; 0x08
    32f8:	99 85       	ldd	r25, Y+9	; 0x09
    32fa:	fc 01       	movw	r30, r24
    32fc:	80 8d       	ldd	r24, Z+24	; 0x18
    32fe:	91 8d       	ldd	r25, Z+25	; 0x19
    3300:	89 2b       	or	r24, r25
    3302:	09 f4       	brne	.+2      	; 0x3306 <xTaskIncrementTick+0x1e2>
    3304:	45 c0       	rjmp	.+138    	; 0x3390 <xTaskIncrementTick+0x26c>
    3306:	88 85       	ldd	r24, Y+8	; 0x08
    3308:	99 85       	ldd	r25, Y+9	; 0x09
    330a:	fc 01       	movw	r30, r24
    330c:	80 8d       	ldd	r24, Z+24	; 0x18
    330e:	91 8d       	ldd	r25, Z+25	; 0x19
    3310:	99 8b       	std	Y+17, r25	; 0x11
    3312:	88 8b       	std	Y+16, r24	; 0x10
    3314:	88 85       	ldd	r24, Y+8	; 0x08
    3316:	99 85       	ldd	r25, Y+9	; 0x09
    3318:	fc 01       	movw	r30, r24
    331a:	82 89       	ldd	r24, Z+18	; 0x12
    331c:	93 89       	ldd	r25, Z+19	; 0x13
    331e:	28 85       	ldd	r18, Y+8	; 0x08
    3320:	39 85       	ldd	r19, Y+9	; 0x09
    3322:	f9 01       	movw	r30, r18
    3324:	24 89       	ldd	r18, Z+20	; 0x14
    3326:	35 89       	ldd	r19, Z+21	; 0x15
    3328:	fc 01       	movw	r30, r24
    332a:	37 83       	std	Z+7, r19	; 0x07
    332c:	26 83       	std	Z+6, r18	; 0x06
    332e:	88 85       	ldd	r24, Y+8	; 0x08
    3330:	99 85       	ldd	r25, Y+9	; 0x09
    3332:	fc 01       	movw	r30, r24
    3334:	84 89       	ldd	r24, Z+20	; 0x14
    3336:	95 89       	ldd	r25, Z+21	; 0x15
    3338:	28 85       	ldd	r18, Y+8	; 0x08
    333a:	39 85       	ldd	r19, Y+9	; 0x09
    333c:	f9 01       	movw	r30, r18
    333e:	22 89       	ldd	r18, Z+18	; 0x12
    3340:	33 89       	ldd	r19, Z+19	; 0x13
    3342:	fc 01       	movw	r30, r24
    3344:	35 83       	std	Z+5, r19	; 0x05
    3346:	24 83       	std	Z+4, r18	; 0x04
    3348:	88 89       	ldd	r24, Y+16	; 0x10
    334a:	99 89       	ldd	r25, Y+17	; 0x11
    334c:	fc 01       	movw	r30, r24
    334e:	21 81       	ldd	r18, Z+1	; 0x01
    3350:	32 81       	ldd	r19, Z+2	; 0x02
    3352:	88 85       	ldd	r24, Y+8	; 0x08
    3354:	99 85       	ldd	r25, Y+9	; 0x09
    3356:	0e 96       	adiw	r24, 0x0e	; 14
    3358:	28 17       	cp	r18, r24
    335a:	39 07       	cpc	r19, r25
    335c:	51 f4       	brne	.+20     	; 0x3372 <xTaskIncrementTick+0x24e>
    335e:	88 85       	ldd	r24, Y+8	; 0x08
    3360:	99 85       	ldd	r25, Y+9	; 0x09
    3362:	fc 01       	movw	r30, r24
    3364:	24 89       	ldd	r18, Z+20	; 0x14
    3366:	35 89       	ldd	r19, Z+21	; 0x15
    3368:	88 89       	ldd	r24, Y+16	; 0x10
    336a:	99 89       	ldd	r25, Y+17	; 0x11
    336c:	fc 01       	movw	r30, r24
    336e:	32 83       	std	Z+2, r19	; 0x02
    3370:	21 83       	std	Z+1, r18	; 0x01
    3372:	88 85       	ldd	r24, Y+8	; 0x08
    3374:	99 85       	ldd	r25, Y+9	; 0x09
    3376:	fc 01       	movw	r30, r24
    3378:	11 8e       	std	Z+25, r1	; 0x19
    337a:	10 8e       	std	Z+24, r1	; 0x18
    337c:	88 89       	ldd	r24, Y+16	; 0x10
    337e:	99 89       	ldd	r25, Y+17	; 0x11
    3380:	fc 01       	movw	r30, r24
    3382:	80 81       	ld	r24, Z
    3384:	2f ef       	ldi	r18, 0xFF	; 255
    3386:	28 0f       	add	r18, r24
    3388:	88 89       	ldd	r24, Y+16	; 0x10
    338a:	99 89       	ldd	r25, Y+17	; 0x11
    338c:	fc 01       	movw	r30, r24
    338e:	20 83       	st	Z, r18
    3390:	88 85       	ldd	r24, Y+8	; 0x08
    3392:	99 85       	ldd	r25, Y+9	; 0x09
    3394:	fc 01       	movw	r30, r24
    3396:	92 8d       	ldd	r25, Z+26	; 0x1a
    3398:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <uxTopReadyPriority>
    339c:	89 17       	cp	r24, r25
    339e:	30 f4       	brcc	.+12     	; 0x33ac <xTaskIncrementTick+0x288>
    33a0:	88 85       	ldd	r24, Y+8	; 0x08
    33a2:	99 85       	ldd	r25, Y+9	; 0x09
    33a4:	fc 01       	movw	r30, r24
    33a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    33a8:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <uxTopReadyPriority>
    33ac:	88 85       	ldd	r24, Y+8	; 0x08
    33ae:	99 85       	ldd	r25, Y+9	; 0x09
    33b0:	fc 01       	movw	r30, r24
    33b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    33b4:	28 2f       	mov	r18, r24
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	4b e0       	ldi	r20, 0x0B	; 11
    33ba:	42 9f       	mul	r20, r18
    33bc:	c0 01       	movw	r24, r0
    33be:	43 9f       	mul	r20, r19
    33c0:	90 0d       	add	r25, r0
    33c2:	11 24       	eor	r1, r1
    33c4:	83 5f       	subi	r24, 0xF3	; 243
    33c6:	9e 4e       	sbci	r25, 0xEE	; 238
    33c8:	fc 01       	movw	r30, r24
    33ca:	80 81       	ld	r24, Z
    33cc:	91 81       	ldd	r25, Z+1	; 0x01
    33ce:	9b 8b       	std	Y+19, r25	; 0x13
    33d0:	8a 8b       	std	Y+18, r24	; 0x12
    33d2:	88 85       	ldd	r24, Y+8	; 0x08
    33d4:	99 85       	ldd	r25, Y+9	; 0x09
    33d6:	2a 89       	ldd	r18, Y+18	; 0x12
    33d8:	3b 89       	ldd	r19, Y+19	; 0x13
    33da:	fc 01       	movw	r30, r24
    33dc:	37 83       	std	Z+7, r19	; 0x07
    33de:	26 83       	std	Z+6, r18	; 0x06
    33e0:	8a 89       	ldd	r24, Y+18	; 0x12
    33e2:	9b 89       	ldd	r25, Y+19	; 0x13
    33e4:	fc 01       	movw	r30, r24
    33e6:	26 81       	ldd	r18, Z+6	; 0x06
    33e8:	37 81       	ldd	r19, Z+7	; 0x07
    33ea:	88 85       	ldd	r24, Y+8	; 0x08
    33ec:	99 85       	ldd	r25, Y+9	; 0x09
    33ee:	fc 01       	movw	r30, r24
    33f0:	31 87       	std	Z+9, r19	; 0x09
    33f2:	20 87       	std	Z+8, r18	; 0x08
    33f4:	8a 89       	ldd	r24, Y+18	; 0x12
    33f6:	9b 89       	ldd	r25, Y+19	; 0x13
    33f8:	fc 01       	movw	r30, r24
    33fa:	86 81       	ldd	r24, Z+6	; 0x06
    33fc:	97 81       	ldd	r25, Z+7	; 0x07
    33fe:	28 85       	ldd	r18, Y+8	; 0x08
    3400:	39 85       	ldd	r19, Y+9	; 0x09
    3402:	2e 5f       	subi	r18, 0xFE	; 254
    3404:	3f 4f       	sbci	r19, 0xFF	; 255
    3406:	fc 01       	movw	r30, r24
    3408:	35 83       	std	Z+5, r19	; 0x05
    340a:	24 83       	std	Z+4, r18	; 0x04
    340c:	88 85       	ldd	r24, Y+8	; 0x08
    340e:	99 85       	ldd	r25, Y+9	; 0x09
    3410:	9c 01       	movw	r18, r24
    3412:	2e 5f       	subi	r18, 0xFE	; 254
    3414:	3f 4f       	sbci	r19, 0xFF	; 255
    3416:	8a 89       	ldd	r24, Y+18	; 0x12
    3418:	9b 89       	ldd	r25, Y+19	; 0x13
    341a:	fc 01       	movw	r30, r24
    341c:	37 83       	std	Z+7, r19	; 0x07
    341e:	26 83       	std	Z+6, r18	; 0x06
    3420:	88 85       	ldd	r24, Y+8	; 0x08
    3422:	99 85       	ldd	r25, Y+9	; 0x09
    3424:	fc 01       	movw	r30, r24
    3426:	82 8d       	ldd	r24, Z+26	; 0x1a
    3428:	28 2f       	mov	r18, r24
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	4b e0       	ldi	r20, 0x0B	; 11
    342e:	42 9f       	mul	r20, r18
    3430:	c0 01       	movw	r24, r0
    3432:	43 9f       	mul	r20, r19
    3434:	90 0d       	add	r25, r0
    3436:	11 24       	eor	r1, r1
    3438:	9c 01       	movw	r18, r24
    343a:	24 5f       	subi	r18, 0xF4	; 244
    343c:	3e 4e       	sbci	r19, 0xEE	; 238
    343e:	88 85       	ldd	r24, Y+8	; 0x08
    3440:	99 85       	ldd	r25, Y+9	; 0x09
    3442:	fc 01       	movw	r30, r24
    3444:	35 87       	std	Z+13, r19	; 0x0d
    3446:	24 87       	std	Z+12, r18	; 0x0c
    3448:	88 85       	ldd	r24, Y+8	; 0x08
    344a:	99 85       	ldd	r25, Y+9	; 0x09
    344c:	fc 01       	movw	r30, r24
    344e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3450:	88 2f       	mov	r24, r24
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	4b e0       	ldi	r20, 0x0B	; 11
    3456:	48 9f       	mul	r20, r24
    3458:	90 01       	movw	r18, r0
    345a:	49 9f       	mul	r20, r25
    345c:	30 0d       	add	r19, r0
    345e:	11 24       	eor	r1, r1
    3460:	24 5f       	subi	r18, 0xF4	; 244
    3462:	3e 4e       	sbci	r19, 0xEE	; 238
    3464:	f9 01       	movw	r30, r18
    3466:	20 81       	ld	r18, Z
    3468:	41 e0       	ldi	r20, 0x01	; 1
    346a:	42 0f       	add	r20, r18
    346c:	5b e0       	ldi	r21, 0x0B	; 11
    346e:	58 9f       	mul	r21, r24
    3470:	90 01       	movw	r18, r0
    3472:	59 9f       	mul	r21, r25
    3474:	30 0d       	add	r19, r0
    3476:	11 24       	eor	r1, r1
    3478:	c9 01       	movw	r24, r18
    347a:	84 5f       	subi	r24, 0xF4	; 244
    347c:	9e 4e       	sbci	r25, 0xEE	; 238
    347e:	fc 01       	movw	r30, r24
    3480:	40 83       	st	Z, r20
    3482:	88 85       	ldd	r24, Y+8	; 0x08
    3484:	99 85       	ldd	r25, Y+9	; 0x09
    3486:	fc 01       	movw	r30, r24
    3488:	22 8d       	ldd	r18, Z+26	; 0x1a
    348a:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    348e:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    3492:	fc 01       	movw	r30, r24
    3494:	82 8d       	ldd	r24, Z+26	; 0x1a
    3496:	28 17       	cp	r18, r24
    3498:	08 f4       	brcc	.+2      	; 0x349c <xTaskIncrementTick+0x378>
    349a:	a3 ce       	rjmp	.-698    	; 0x31e2 <xTaskIncrementTick+0xbe>
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	89 83       	std	Y+1, r24	; 0x01
    34a0:	a0 ce       	rjmp	.-704    	; 0x31e2 <xTaskIncrementTick+0xbe>
    34a2:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    34a6:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    34aa:	fc 01       	movw	r30, r24
    34ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    34ae:	28 2f       	mov	r18, r24
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	4b e0       	ldi	r20, 0x0B	; 11
    34b4:	42 9f       	mul	r20, r18
    34b6:	c0 01       	movw	r24, r0
    34b8:	43 9f       	mul	r20, r19
    34ba:	90 0d       	add	r25, r0
    34bc:	11 24       	eor	r1, r1
    34be:	84 5f       	subi	r24, 0xF4	; 244
    34c0:	9e 4e       	sbci	r25, 0xEE	; 238
    34c2:	fc 01       	movw	r30, r24
    34c4:	80 81       	ld	r24, Z
    34c6:	82 30       	cpi	r24, 0x02	; 2
    34c8:	10 f0       	brcs	.+4      	; 0x34ce <xTaskIncrementTick+0x3aa>
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	89 83       	std	Y+1, r24	; 0x01
    34ce:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <xYieldPending>
    34d2:	88 23       	and	r24, r24
    34d4:	b1 f0       	breq	.+44     	; 0x3502 <xTaskIncrementTick+0x3de>
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	89 83       	std	Y+1, r24	; 0x01
    34da:	13 c0       	rjmp	.+38     	; 0x3502 <xTaskIncrementTick+0x3de>
    34dc:	80 91 bd 11 	lds	r24, 0x11BD	; 0x8011bd <xPendedTicks>
    34e0:	90 91 be 11 	lds	r25, 0x11BE	; 0x8011be <xPendedTicks+0x1>
    34e4:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <xPendedTicks+0x2>
    34e8:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <xPendedTicks+0x3>
    34ec:	01 96       	adiw	r24, 0x01	; 1
    34ee:	a1 1d       	adc	r26, r1
    34f0:	b1 1d       	adc	r27, r1
    34f2:	80 93 bd 11 	sts	0x11BD, r24	; 0x8011bd <xPendedTicks>
    34f6:	90 93 be 11 	sts	0x11BE, r25	; 0x8011be <xPendedTicks+0x1>
    34fa:	a0 93 bf 11 	sts	0x11BF, r26	; 0x8011bf <xPendedTicks+0x2>
    34fe:	b0 93 c0 11 	sts	0x11C0, r27	; 0x8011c0 <xPendedTicks+0x3>
    3502:	89 81       	ldd	r24, Y+1	; 0x01
    3504:	63 96       	adiw	r28, 0x13	; 19
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	08 95       	ret

00003516 <vTaskSwitchContext>:
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	00 d0       	rcall	.+0      	; 0x351c <vTaskSwitchContext+0x6>
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	80 91 ca 11 	lds	r24, 0x11CA	; 0x8011ca <uxSchedulerSuspended>
    3524:	88 23       	and	r24, r24
    3526:	21 f0       	breq	.+8      	; 0x3530 <vTaskSwitchContext+0x1a>
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	80 93 c1 11 	sts	0x11C1, r24	; 0x8011c1 <xYieldPending>
    352e:	78 c0       	rjmp	.+240    	; 0x3620 <vTaskSwitchContext+0x10a>
    3530:	10 92 c1 11 	sts	0x11C1, r1	; 0x8011c1 <xYieldPending>
    3534:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    3538:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    353c:	fc 01       	movw	r30, r24
    353e:	20 81       	ld	r18, Z
    3540:	31 81       	ldd	r19, Z+1	; 0x01
    3542:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    3546:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    354a:	fc 01       	movw	r30, r24
    354c:	83 8d       	ldd	r24, Z+27	; 0x1b
    354e:	94 8d       	ldd	r25, Z+28	; 0x1c
    3550:	82 17       	cp	r24, r18
    3552:	93 07       	cpc	r25, r19
    3554:	70 f0       	brcs	.+28     	; 0x3572 <vTaskSwitchContext+0x5c>
    3556:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    355a:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    355e:	9c 01       	movw	r18, r24
    3560:	23 5e       	subi	r18, 0xE3	; 227
    3562:	3f 4f       	sbci	r19, 0xFF	; 255
    3564:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    3568:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    356c:	b9 01       	movw	r22, r18
    356e:	0e 94 aa 2b 	call	0x5754	; 0x5754 <vApplicationStackOverflowHook>
    3572:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <uxTopReadyPriority>
    3576:	89 83       	std	Y+1, r24	; 0x01
    3578:	03 c0       	rjmp	.+6      	; 0x3580 <vTaskSwitchContext+0x6a>
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	81 50       	subi	r24, 0x01	; 1
    357e:	89 83       	std	Y+1, r24	; 0x01
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	28 2f       	mov	r18, r24
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	4b e0       	ldi	r20, 0x0B	; 11
    3588:	42 9f       	mul	r20, r18
    358a:	c0 01       	movw	r24, r0
    358c:	43 9f       	mul	r20, r19
    358e:	90 0d       	add	r25, r0
    3590:	11 24       	eor	r1, r1
    3592:	84 5f       	subi	r24, 0xF4	; 244
    3594:	9e 4e       	sbci	r25, 0xEE	; 238
    3596:	fc 01       	movw	r30, r24
    3598:	80 81       	ld	r24, Z
    359a:	88 23       	and	r24, r24
    359c:	71 f3       	breq	.-36     	; 0x357a <vTaskSwitchContext+0x64>
    359e:	89 81       	ldd	r24, Y+1	; 0x01
    35a0:	28 2f       	mov	r18, r24
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	4b e0       	ldi	r20, 0x0B	; 11
    35a6:	42 9f       	mul	r20, r18
    35a8:	c0 01       	movw	r24, r0
    35aa:	43 9f       	mul	r20, r19
    35ac:	90 0d       	add	r25, r0
    35ae:	11 24       	eor	r1, r1
    35b0:	84 5f       	subi	r24, 0xF4	; 244
    35b2:	9e 4e       	sbci	r25, 0xEE	; 238
    35b4:	9b 83       	std	Y+3, r25	; 0x03
    35b6:	8a 83       	std	Y+2, r24	; 0x02
    35b8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ba:	9b 81       	ldd	r25, Y+3	; 0x03
    35bc:	fc 01       	movw	r30, r24
    35be:	81 81       	ldd	r24, Z+1	; 0x01
    35c0:	92 81       	ldd	r25, Z+2	; 0x02
    35c2:	fc 01       	movw	r30, r24
    35c4:	24 81       	ldd	r18, Z+4	; 0x04
    35c6:	35 81       	ldd	r19, Z+5	; 0x05
    35c8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ca:	9b 81       	ldd	r25, Y+3	; 0x03
    35cc:	fc 01       	movw	r30, r24
    35ce:	32 83       	std	Z+2, r19	; 0x02
    35d0:	21 83       	std	Z+1, r18	; 0x01
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	9b 81       	ldd	r25, Y+3	; 0x03
    35d6:	fc 01       	movw	r30, r24
    35d8:	21 81       	ldd	r18, Z+1	; 0x01
    35da:	32 81       	ldd	r19, Z+2	; 0x02
    35dc:	8a 81       	ldd	r24, Y+2	; 0x02
    35de:	9b 81       	ldd	r25, Y+3	; 0x03
    35e0:	03 96       	adiw	r24, 0x03	; 3
    35e2:	28 17       	cp	r18, r24
    35e4:	39 07       	cpc	r19, r25
    35e6:	69 f4       	brne	.+26     	; 0x3602 <vTaskSwitchContext+0xec>
    35e8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ea:	9b 81       	ldd	r25, Y+3	; 0x03
    35ec:	fc 01       	movw	r30, r24
    35ee:	81 81       	ldd	r24, Z+1	; 0x01
    35f0:	92 81       	ldd	r25, Z+2	; 0x02
    35f2:	fc 01       	movw	r30, r24
    35f4:	24 81       	ldd	r18, Z+4	; 0x04
    35f6:	35 81       	ldd	r19, Z+5	; 0x05
    35f8:	8a 81       	ldd	r24, Y+2	; 0x02
    35fa:	9b 81       	ldd	r25, Y+3	; 0x03
    35fc:	fc 01       	movw	r30, r24
    35fe:	32 83       	std	Z+2, r19	; 0x02
    3600:	21 83       	std	Z+1, r18	; 0x01
    3602:	8a 81       	ldd	r24, Y+2	; 0x02
    3604:	9b 81       	ldd	r25, Y+3	; 0x03
    3606:	fc 01       	movw	r30, r24
    3608:	81 81       	ldd	r24, Z+1	; 0x01
    360a:	92 81       	ldd	r25, Z+2	; 0x02
    360c:	fc 01       	movw	r30, r24
    360e:	80 85       	ldd	r24, Z+8	; 0x08
    3610:	91 85       	ldd	r25, Z+9	; 0x09
    3612:	90 93 0b 11 	sts	0x110B, r25	; 0x80110b <pxCurrentTCB+0x1>
    3616:	80 93 0a 11 	sts	0x110A, r24	; 0x80110a <pxCurrentTCB>
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <uxTopReadyPriority>
    3620:	00 00       	nop
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	08 95       	ret

0000362e <vTaskPlaceOnEventList>:
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	00 d0       	rcall	.+0      	; 0x3634 <vTaskPlaceOnEventList+0x6>
    3634:	00 d0       	rcall	.+0      	; 0x3636 <vTaskPlaceOnEventList+0x8>
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	9a 83       	std	Y+2, r25	; 0x02
    363c:	89 83       	std	Y+1, r24	; 0x01
    363e:	4b 83       	std	Y+3, r20	; 0x03
    3640:	5c 83       	std	Y+4, r21	; 0x04
    3642:	6d 83       	std	Y+5, r22	; 0x05
    3644:	7e 83       	std	Y+6, r23	; 0x06
    3646:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    364a:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    364e:	9c 01       	movw	r18, r24
    3650:	22 5f       	subi	r18, 0xF2	; 242
    3652:	3f 4f       	sbci	r19, 0xFF	; 255
    3654:	89 81       	ldd	r24, Y+1	; 0x01
    3656:	9a 81       	ldd	r25, Y+2	; 0x02
    3658:	b9 01       	movw	r22, r18
    365a:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInsert>
    365e:	8b 81       	ldd	r24, Y+3	; 0x03
    3660:	9c 81       	ldd	r25, Y+4	; 0x04
    3662:	ad 81       	ldd	r26, Y+5	; 0x05
    3664:	be 81       	ldd	r27, Y+6	; 0x06
    3666:	41 e0       	ldi	r20, 0x01	; 1
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 33 25 	call	0x4a66	; 0x4a66 <prvAddCurrentTaskToDelayedList>
    3670:	00 00       	nop
    3672:	26 96       	adiw	r28, 0x06	; 6
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
    367e:	df 91       	pop	r29
    3680:	cf 91       	pop	r28
    3682:	08 95       	ret

00003684 <vTaskPlaceOnEventListRestricted>:
    3684:	cf 93       	push	r28
    3686:	df 93       	push	r29
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	29 97       	sbiw	r28, 0x09	; 9
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	9c 83       	std	Y+4, r25	; 0x04
    369a:	8b 83       	std	Y+3, r24	; 0x03
    369c:	4d 83       	std	Y+5, r20	; 0x05
    369e:	5e 83       	std	Y+6, r21	; 0x06
    36a0:	6f 83       	std	Y+7, r22	; 0x07
    36a2:	78 87       	std	Y+8, r23	; 0x08
    36a4:	29 87       	std	Y+9, r18	; 0x09
    36a6:	8b 81       	ldd	r24, Y+3	; 0x03
    36a8:	9c 81       	ldd	r25, Y+4	; 0x04
    36aa:	fc 01       	movw	r30, r24
    36ac:	81 81       	ldd	r24, Z+1	; 0x01
    36ae:	92 81       	ldd	r25, Z+2	; 0x02
    36b0:	9a 83       	std	Y+2, r25	; 0x02
    36b2:	89 83       	std	Y+1, r24	; 0x01
    36b4:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    36b8:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    36bc:	29 81       	ldd	r18, Y+1	; 0x01
    36be:	3a 81       	ldd	r19, Y+2	; 0x02
    36c0:	fc 01       	movw	r30, r24
    36c2:	33 8b       	std	Z+19, r19	; 0x13
    36c4:	22 8b       	std	Z+18, r18	; 0x12
    36c6:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    36ca:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    36ce:	29 81       	ldd	r18, Y+1	; 0x01
    36d0:	3a 81       	ldd	r19, Y+2	; 0x02
    36d2:	f9 01       	movw	r30, r18
    36d4:	26 81       	ldd	r18, Z+6	; 0x06
    36d6:	37 81       	ldd	r19, Z+7	; 0x07
    36d8:	fc 01       	movw	r30, r24
    36da:	35 8b       	std	Z+21, r19	; 0x15
    36dc:	24 8b       	std	Z+20, r18	; 0x14
    36de:	89 81       	ldd	r24, Y+1	; 0x01
    36e0:	9a 81       	ldd	r25, Y+2	; 0x02
    36e2:	fc 01       	movw	r30, r24
    36e4:	86 81       	ldd	r24, Z+6	; 0x06
    36e6:	97 81       	ldd	r25, Z+7	; 0x07
    36e8:	20 91 0a 11 	lds	r18, 0x110A	; 0x80110a <pxCurrentTCB>
    36ec:	30 91 0b 11 	lds	r19, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    36f0:	22 5f       	subi	r18, 0xF2	; 242
    36f2:	3f 4f       	sbci	r19, 0xFF	; 255
    36f4:	fc 01       	movw	r30, r24
    36f6:	35 83       	std	Z+5, r19	; 0x05
    36f8:	24 83       	std	Z+4, r18	; 0x04
    36fa:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    36fe:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    3702:	9c 01       	movw	r18, r24
    3704:	22 5f       	subi	r18, 0xF2	; 242
    3706:	3f 4f       	sbci	r19, 0xFF	; 255
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	9a 81       	ldd	r25, Y+2	; 0x02
    370c:	fc 01       	movw	r30, r24
    370e:	37 83       	std	Z+7, r19	; 0x07
    3710:	26 83       	std	Z+6, r18	; 0x06
    3712:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    3716:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    371a:	2b 81       	ldd	r18, Y+3	; 0x03
    371c:	3c 81       	ldd	r19, Y+4	; 0x04
    371e:	fc 01       	movw	r30, r24
    3720:	31 8f       	std	Z+25, r19	; 0x19
    3722:	20 8f       	std	Z+24, r18	; 0x18
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	9c 81       	ldd	r25, Y+4	; 0x04
    3728:	fc 01       	movw	r30, r24
    372a:	80 81       	ld	r24, Z
    372c:	21 e0       	ldi	r18, 0x01	; 1
    372e:	28 0f       	add	r18, r24
    3730:	8b 81       	ldd	r24, Y+3	; 0x03
    3732:	9c 81       	ldd	r25, Y+4	; 0x04
    3734:	fc 01       	movw	r30, r24
    3736:	20 83       	st	Z, r18
    3738:	89 85       	ldd	r24, Y+9	; 0x09
    373a:	88 23       	and	r24, r24
    373c:	39 f0       	breq	.+14     	; 0x374c <vTaskPlaceOnEventListRestricted+0xc8>
    373e:	8f ef       	ldi	r24, 0xFF	; 255
    3740:	9f ef       	ldi	r25, 0xFF	; 255
    3742:	dc 01       	movw	r26, r24
    3744:	8d 83       	std	Y+5, r24	; 0x05
    3746:	9e 83       	std	Y+6, r25	; 0x06
    3748:	af 83       	std	Y+7, r26	; 0x07
    374a:	b8 87       	std	Y+8, r27	; 0x08
    374c:	8d 81       	ldd	r24, Y+5	; 0x05
    374e:	9e 81       	ldd	r25, Y+6	; 0x06
    3750:	af 81       	ldd	r26, Y+7	; 0x07
    3752:	b8 85       	ldd	r27, Y+8	; 0x08
    3754:	49 85       	ldd	r20, Y+9	; 0x09
    3756:	bc 01       	movw	r22, r24
    3758:	cd 01       	movw	r24, r26
    375a:	0e 94 33 25 	call	0x4a66	; 0x4a66 <prvAddCurrentTaskToDelayedList>
    375e:	00 00       	nop
    3760:	29 96       	adiw	r28, 0x09	; 9
    3762:	0f b6       	in	r0, 0x3f	; 63
    3764:	f8 94       	cli
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	cd bf       	out	0x3d, r28	; 61
    376c:	df 91       	pop	r29
    376e:	cf 91       	pop	r28
    3770:	08 95       	ret

00003772 <xTaskRemoveFromEventList>:
    3772:	cf 93       	push	r28
    3774:	df 93       	push	r29
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    377a:	2d 97       	sbiw	r28, 0x0d	; 13
    377c:	0f b6       	in	r0, 0x3f	; 63
    377e:	f8 94       	cli
    3780:	de bf       	out	0x3e, r29	; 62
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	cd bf       	out	0x3d, r28	; 61
    3786:	9d 87       	std	Y+13, r25	; 0x0d
    3788:	8c 87       	std	Y+12, r24	; 0x0c
    378a:	8c 85       	ldd	r24, Y+12	; 0x0c
    378c:	9d 85       	ldd	r25, Y+13	; 0x0d
    378e:	fc 01       	movw	r30, r24
    3790:	87 81       	ldd	r24, Z+7	; 0x07
    3792:	90 85       	ldd	r25, Z+8	; 0x08
    3794:	fc 01       	movw	r30, r24
    3796:	80 85       	ldd	r24, Z+8	; 0x08
    3798:	91 85       	ldd	r25, Z+9	; 0x09
    379a:	9b 83       	std	Y+3, r25	; 0x03
    379c:	8a 83       	std	Y+2, r24	; 0x02
    379e:	8a 81       	ldd	r24, Y+2	; 0x02
    37a0:	9b 81       	ldd	r25, Y+3	; 0x03
    37a2:	fc 01       	movw	r30, r24
    37a4:	80 8d       	ldd	r24, Z+24	; 0x18
    37a6:	91 8d       	ldd	r25, Z+25	; 0x19
    37a8:	9d 83       	std	Y+5, r25	; 0x05
    37aa:	8c 83       	std	Y+4, r24	; 0x04
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	9b 81       	ldd	r25, Y+3	; 0x03
    37b0:	fc 01       	movw	r30, r24
    37b2:	82 89       	ldd	r24, Z+18	; 0x12
    37b4:	93 89       	ldd	r25, Z+19	; 0x13
    37b6:	2a 81       	ldd	r18, Y+2	; 0x02
    37b8:	3b 81       	ldd	r19, Y+3	; 0x03
    37ba:	f9 01       	movw	r30, r18
    37bc:	24 89       	ldd	r18, Z+20	; 0x14
    37be:	35 89       	ldd	r19, Z+21	; 0x15
    37c0:	fc 01       	movw	r30, r24
    37c2:	37 83       	std	Z+7, r19	; 0x07
    37c4:	26 83       	std	Z+6, r18	; 0x06
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ca:	fc 01       	movw	r30, r24
    37cc:	84 89       	ldd	r24, Z+20	; 0x14
    37ce:	95 89       	ldd	r25, Z+21	; 0x15
    37d0:	2a 81       	ldd	r18, Y+2	; 0x02
    37d2:	3b 81       	ldd	r19, Y+3	; 0x03
    37d4:	f9 01       	movw	r30, r18
    37d6:	22 89       	ldd	r18, Z+18	; 0x12
    37d8:	33 89       	ldd	r19, Z+19	; 0x13
    37da:	fc 01       	movw	r30, r24
    37dc:	35 83       	std	Z+5, r19	; 0x05
    37de:	24 83       	std	Z+4, r18	; 0x04
    37e0:	8c 81       	ldd	r24, Y+4	; 0x04
    37e2:	9d 81       	ldd	r25, Y+5	; 0x05
    37e4:	fc 01       	movw	r30, r24
    37e6:	21 81       	ldd	r18, Z+1	; 0x01
    37e8:	32 81       	ldd	r19, Z+2	; 0x02
    37ea:	8a 81       	ldd	r24, Y+2	; 0x02
    37ec:	9b 81       	ldd	r25, Y+3	; 0x03
    37ee:	0e 96       	adiw	r24, 0x0e	; 14
    37f0:	28 17       	cp	r18, r24
    37f2:	39 07       	cpc	r19, r25
    37f4:	51 f4       	brne	.+20     	; 0x380a <xTaskRemoveFromEventList+0x98>
    37f6:	8a 81       	ldd	r24, Y+2	; 0x02
    37f8:	9b 81       	ldd	r25, Y+3	; 0x03
    37fa:	fc 01       	movw	r30, r24
    37fc:	24 89       	ldd	r18, Z+20	; 0x14
    37fe:	35 89       	ldd	r19, Z+21	; 0x15
    3800:	8c 81       	ldd	r24, Y+4	; 0x04
    3802:	9d 81       	ldd	r25, Y+5	; 0x05
    3804:	fc 01       	movw	r30, r24
    3806:	32 83       	std	Z+2, r19	; 0x02
    3808:	21 83       	std	Z+1, r18	; 0x01
    380a:	8a 81       	ldd	r24, Y+2	; 0x02
    380c:	9b 81       	ldd	r25, Y+3	; 0x03
    380e:	fc 01       	movw	r30, r24
    3810:	11 8e       	std	Z+25, r1	; 0x19
    3812:	10 8e       	std	Z+24, r1	; 0x18
    3814:	8c 81       	ldd	r24, Y+4	; 0x04
    3816:	9d 81       	ldd	r25, Y+5	; 0x05
    3818:	fc 01       	movw	r30, r24
    381a:	80 81       	ld	r24, Z
    381c:	2f ef       	ldi	r18, 0xFF	; 255
    381e:	28 0f       	add	r18, r24
    3820:	8c 81       	ldd	r24, Y+4	; 0x04
    3822:	9d 81       	ldd	r25, Y+5	; 0x05
    3824:	fc 01       	movw	r30, r24
    3826:	20 83       	st	Z, r18
    3828:	80 91 ca 11 	lds	r24, 0x11CA	; 0x8011ca <uxSchedulerSuspended>
    382c:	88 23       	and	r24, r24
    382e:	09 f0       	breq	.+2      	; 0x3832 <xTaskRemoveFromEventList+0xc0>
    3830:	bf c0       	rjmp	.+382    	; 0x39b0 <xTaskRemoveFromEventList+0x23e>
    3832:	8a 81       	ldd	r24, Y+2	; 0x02
    3834:	9b 81       	ldd	r25, Y+3	; 0x03
    3836:	fc 01       	movw	r30, r24
    3838:	84 85       	ldd	r24, Z+12	; 0x0c
    383a:	95 85       	ldd	r25, Z+13	; 0x0d
    383c:	9f 83       	std	Y+7, r25	; 0x07
    383e:	8e 83       	std	Y+6, r24	; 0x06
    3840:	8a 81       	ldd	r24, Y+2	; 0x02
    3842:	9b 81       	ldd	r25, Y+3	; 0x03
    3844:	fc 01       	movw	r30, r24
    3846:	86 81       	ldd	r24, Z+6	; 0x06
    3848:	97 81       	ldd	r25, Z+7	; 0x07
    384a:	2a 81       	ldd	r18, Y+2	; 0x02
    384c:	3b 81       	ldd	r19, Y+3	; 0x03
    384e:	f9 01       	movw	r30, r18
    3850:	20 85       	ldd	r18, Z+8	; 0x08
    3852:	31 85       	ldd	r19, Z+9	; 0x09
    3854:	fc 01       	movw	r30, r24
    3856:	37 83       	std	Z+7, r19	; 0x07
    3858:	26 83       	std	Z+6, r18	; 0x06
    385a:	8a 81       	ldd	r24, Y+2	; 0x02
    385c:	9b 81       	ldd	r25, Y+3	; 0x03
    385e:	fc 01       	movw	r30, r24
    3860:	80 85       	ldd	r24, Z+8	; 0x08
    3862:	91 85       	ldd	r25, Z+9	; 0x09
    3864:	2a 81       	ldd	r18, Y+2	; 0x02
    3866:	3b 81       	ldd	r19, Y+3	; 0x03
    3868:	f9 01       	movw	r30, r18
    386a:	26 81       	ldd	r18, Z+6	; 0x06
    386c:	37 81       	ldd	r19, Z+7	; 0x07
    386e:	fc 01       	movw	r30, r24
    3870:	35 83       	std	Z+5, r19	; 0x05
    3872:	24 83       	std	Z+4, r18	; 0x04
    3874:	8e 81       	ldd	r24, Y+6	; 0x06
    3876:	9f 81       	ldd	r25, Y+7	; 0x07
    3878:	fc 01       	movw	r30, r24
    387a:	21 81       	ldd	r18, Z+1	; 0x01
    387c:	32 81       	ldd	r19, Z+2	; 0x02
    387e:	8a 81       	ldd	r24, Y+2	; 0x02
    3880:	9b 81       	ldd	r25, Y+3	; 0x03
    3882:	02 96       	adiw	r24, 0x02	; 2
    3884:	28 17       	cp	r18, r24
    3886:	39 07       	cpc	r19, r25
    3888:	51 f4       	brne	.+20     	; 0x389e <xTaskRemoveFromEventList+0x12c>
    388a:	8a 81       	ldd	r24, Y+2	; 0x02
    388c:	9b 81       	ldd	r25, Y+3	; 0x03
    388e:	fc 01       	movw	r30, r24
    3890:	20 85       	ldd	r18, Z+8	; 0x08
    3892:	31 85       	ldd	r19, Z+9	; 0x09
    3894:	8e 81       	ldd	r24, Y+6	; 0x06
    3896:	9f 81       	ldd	r25, Y+7	; 0x07
    3898:	fc 01       	movw	r30, r24
    389a:	32 83       	std	Z+2, r19	; 0x02
    389c:	21 83       	std	Z+1, r18	; 0x01
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	9b 81       	ldd	r25, Y+3	; 0x03
    38a2:	fc 01       	movw	r30, r24
    38a4:	15 86       	std	Z+13, r1	; 0x0d
    38a6:	14 86       	std	Z+12, r1	; 0x0c
    38a8:	8e 81       	ldd	r24, Y+6	; 0x06
    38aa:	9f 81       	ldd	r25, Y+7	; 0x07
    38ac:	fc 01       	movw	r30, r24
    38ae:	80 81       	ld	r24, Z
    38b0:	2f ef       	ldi	r18, 0xFF	; 255
    38b2:	28 0f       	add	r18, r24
    38b4:	8e 81       	ldd	r24, Y+6	; 0x06
    38b6:	9f 81       	ldd	r25, Y+7	; 0x07
    38b8:	fc 01       	movw	r30, r24
    38ba:	20 83       	st	Z, r18
    38bc:	8a 81       	ldd	r24, Y+2	; 0x02
    38be:	9b 81       	ldd	r25, Y+3	; 0x03
    38c0:	fc 01       	movw	r30, r24
    38c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    38c4:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <uxTopReadyPriority>
    38c8:	89 17       	cp	r24, r25
    38ca:	30 f4       	brcc	.+12     	; 0x38d8 <xTaskRemoveFromEventList+0x166>
    38cc:	8a 81       	ldd	r24, Y+2	; 0x02
    38ce:	9b 81       	ldd	r25, Y+3	; 0x03
    38d0:	fc 01       	movw	r30, r24
    38d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    38d4:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <uxTopReadyPriority>
    38d8:	8a 81       	ldd	r24, Y+2	; 0x02
    38da:	9b 81       	ldd	r25, Y+3	; 0x03
    38dc:	fc 01       	movw	r30, r24
    38de:	82 8d       	ldd	r24, Z+26	; 0x1a
    38e0:	28 2f       	mov	r18, r24
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	4b e0       	ldi	r20, 0x0B	; 11
    38e6:	42 9f       	mul	r20, r18
    38e8:	c0 01       	movw	r24, r0
    38ea:	43 9f       	mul	r20, r19
    38ec:	90 0d       	add	r25, r0
    38ee:	11 24       	eor	r1, r1
    38f0:	83 5f       	subi	r24, 0xF3	; 243
    38f2:	9e 4e       	sbci	r25, 0xEE	; 238
    38f4:	fc 01       	movw	r30, r24
    38f6:	80 81       	ld	r24, Z
    38f8:	91 81       	ldd	r25, Z+1	; 0x01
    38fa:	99 87       	std	Y+9, r25	; 0x09
    38fc:	88 87       	std	Y+8, r24	; 0x08
    38fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3900:	9b 81       	ldd	r25, Y+3	; 0x03
    3902:	28 85       	ldd	r18, Y+8	; 0x08
    3904:	39 85       	ldd	r19, Y+9	; 0x09
    3906:	fc 01       	movw	r30, r24
    3908:	37 83       	std	Z+7, r19	; 0x07
    390a:	26 83       	std	Z+6, r18	; 0x06
    390c:	88 85       	ldd	r24, Y+8	; 0x08
    390e:	99 85       	ldd	r25, Y+9	; 0x09
    3910:	fc 01       	movw	r30, r24
    3912:	26 81       	ldd	r18, Z+6	; 0x06
    3914:	37 81       	ldd	r19, Z+7	; 0x07
    3916:	8a 81       	ldd	r24, Y+2	; 0x02
    3918:	9b 81       	ldd	r25, Y+3	; 0x03
    391a:	fc 01       	movw	r30, r24
    391c:	31 87       	std	Z+9, r19	; 0x09
    391e:	20 87       	std	Z+8, r18	; 0x08
    3920:	88 85       	ldd	r24, Y+8	; 0x08
    3922:	99 85       	ldd	r25, Y+9	; 0x09
    3924:	fc 01       	movw	r30, r24
    3926:	86 81       	ldd	r24, Z+6	; 0x06
    3928:	97 81       	ldd	r25, Z+7	; 0x07
    392a:	2a 81       	ldd	r18, Y+2	; 0x02
    392c:	3b 81       	ldd	r19, Y+3	; 0x03
    392e:	2e 5f       	subi	r18, 0xFE	; 254
    3930:	3f 4f       	sbci	r19, 0xFF	; 255
    3932:	fc 01       	movw	r30, r24
    3934:	35 83       	std	Z+5, r19	; 0x05
    3936:	24 83       	std	Z+4, r18	; 0x04
    3938:	8a 81       	ldd	r24, Y+2	; 0x02
    393a:	9b 81       	ldd	r25, Y+3	; 0x03
    393c:	9c 01       	movw	r18, r24
    393e:	2e 5f       	subi	r18, 0xFE	; 254
    3940:	3f 4f       	sbci	r19, 0xFF	; 255
    3942:	88 85       	ldd	r24, Y+8	; 0x08
    3944:	99 85       	ldd	r25, Y+9	; 0x09
    3946:	fc 01       	movw	r30, r24
    3948:	37 83       	std	Z+7, r19	; 0x07
    394a:	26 83       	std	Z+6, r18	; 0x06
    394c:	8a 81       	ldd	r24, Y+2	; 0x02
    394e:	9b 81       	ldd	r25, Y+3	; 0x03
    3950:	fc 01       	movw	r30, r24
    3952:	82 8d       	ldd	r24, Z+26	; 0x1a
    3954:	28 2f       	mov	r18, r24
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	4b e0       	ldi	r20, 0x0B	; 11
    395a:	42 9f       	mul	r20, r18
    395c:	c0 01       	movw	r24, r0
    395e:	43 9f       	mul	r20, r19
    3960:	90 0d       	add	r25, r0
    3962:	11 24       	eor	r1, r1
    3964:	9c 01       	movw	r18, r24
    3966:	24 5f       	subi	r18, 0xF4	; 244
    3968:	3e 4e       	sbci	r19, 0xEE	; 238
    396a:	8a 81       	ldd	r24, Y+2	; 0x02
    396c:	9b 81       	ldd	r25, Y+3	; 0x03
    396e:	fc 01       	movw	r30, r24
    3970:	35 87       	std	Z+13, r19	; 0x0d
    3972:	24 87       	std	Z+12, r18	; 0x0c
    3974:	8a 81       	ldd	r24, Y+2	; 0x02
    3976:	9b 81       	ldd	r25, Y+3	; 0x03
    3978:	fc 01       	movw	r30, r24
    397a:	82 8d       	ldd	r24, Z+26	; 0x1a
    397c:	88 2f       	mov	r24, r24
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	4b e0       	ldi	r20, 0x0B	; 11
    3982:	48 9f       	mul	r20, r24
    3984:	90 01       	movw	r18, r0
    3986:	49 9f       	mul	r20, r25
    3988:	30 0d       	add	r19, r0
    398a:	11 24       	eor	r1, r1
    398c:	24 5f       	subi	r18, 0xF4	; 244
    398e:	3e 4e       	sbci	r19, 0xEE	; 238
    3990:	f9 01       	movw	r30, r18
    3992:	20 81       	ld	r18, Z
    3994:	41 e0       	ldi	r20, 0x01	; 1
    3996:	42 0f       	add	r20, r18
    3998:	5b e0       	ldi	r21, 0x0B	; 11
    399a:	58 9f       	mul	r21, r24
    399c:	90 01       	movw	r18, r0
    399e:	59 9f       	mul	r21, r25
    39a0:	30 0d       	add	r19, r0
    39a2:	11 24       	eor	r1, r1
    39a4:	c9 01       	movw	r24, r18
    39a6:	84 5f       	subi	r24, 0xF4	; 244
    39a8:	9e 4e       	sbci	r25, 0xEE	; 238
    39aa:	fc 01       	movw	r30, r24
    39ac:	40 83       	st	Z, r20
    39ae:	39 c0       	rjmp	.+114    	; 0x3a22 <xTaskRemoveFromEventList+0x2b0>
    39b0:	80 91 95 11 	lds	r24, 0x1195	; 0x801195 <xPendingReadyList+0x1>
    39b4:	90 91 96 11 	lds	r25, 0x1196	; 0x801196 <xPendingReadyList+0x2>
    39b8:	9b 87       	std	Y+11, r25	; 0x0b
    39ba:	8a 87       	std	Y+10, r24	; 0x0a
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	9b 81       	ldd	r25, Y+3	; 0x03
    39c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    39c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    39c4:	fc 01       	movw	r30, r24
    39c6:	33 8b       	std	Z+19, r19	; 0x13
    39c8:	22 8b       	std	Z+18, r18	; 0x12
    39ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    39cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    39ce:	fc 01       	movw	r30, r24
    39d0:	26 81       	ldd	r18, Z+6	; 0x06
    39d2:	37 81       	ldd	r19, Z+7	; 0x07
    39d4:	8a 81       	ldd	r24, Y+2	; 0x02
    39d6:	9b 81       	ldd	r25, Y+3	; 0x03
    39d8:	fc 01       	movw	r30, r24
    39da:	35 8b       	std	Z+21, r19	; 0x15
    39dc:	24 8b       	std	Z+20, r18	; 0x14
    39de:	8a 85       	ldd	r24, Y+10	; 0x0a
    39e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    39e2:	fc 01       	movw	r30, r24
    39e4:	86 81       	ldd	r24, Z+6	; 0x06
    39e6:	97 81       	ldd	r25, Z+7	; 0x07
    39e8:	2a 81       	ldd	r18, Y+2	; 0x02
    39ea:	3b 81       	ldd	r19, Y+3	; 0x03
    39ec:	22 5f       	subi	r18, 0xF2	; 242
    39ee:	3f 4f       	sbci	r19, 0xFF	; 255
    39f0:	fc 01       	movw	r30, r24
    39f2:	35 83       	std	Z+5, r19	; 0x05
    39f4:	24 83       	std	Z+4, r18	; 0x04
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	9b 81       	ldd	r25, Y+3	; 0x03
    39fa:	9c 01       	movw	r18, r24
    39fc:	22 5f       	subi	r18, 0xF2	; 242
    39fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a02:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a04:	fc 01       	movw	r30, r24
    3a06:	37 83       	std	Z+7, r19	; 0x07
    3a08:	26 83       	std	Z+6, r18	; 0x06
    3a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a0e:	24 e9       	ldi	r18, 0x94	; 148
    3a10:	31 e1       	ldi	r19, 0x11	; 17
    3a12:	fc 01       	movw	r30, r24
    3a14:	31 8f       	std	Z+25, r19	; 0x19
    3a16:	20 8f       	std	Z+24, r18	; 0x18
    3a18:	80 91 94 11 	lds	r24, 0x1194	; 0x801194 <xPendingReadyList>
    3a1c:	8f 5f       	subi	r24, 0xFF	; 255
    3a1e:	80 93 94 11 	sts	0x1194, r24	; 0x801194 <xPendingReadyList>
    3a22:	8a 81       	ldd	r24, Y+2	; 0x02
    3a24:	9b 81       	ldd	r25, Y+3	; 0x03
    3a26:	fc 01       	movw	r30, r24
    3a28:	22 8d       	ldd	r18, Z+26	; 0x1a
    3a2a:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    3a2e:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    3a32:	fc 01       	movw	r30, r24
    3a34:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a36:	82 17       	cp	r24, r18
    3a38:	30 f4       	brcc	.+12     	; 0x3a46 <xTaskRemoveFromEventList+0x2d4>
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	89 83       	std	Y+1, r24	; 0x01
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	80 93 c1 11 	sts	0x11C1, r24	; 0x8011c1 <xYieldPending>
    3a44:	01 c0       	rjmp	.+2      	; 0x3a48 <xTaskRemoveFromEventList+0x2d6>
    3a46:	19 82       	std	Y+1, r1	; 0x01
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	2d 96       	adiw	r28, 0x0d	; 13
    3a4c:	0f b6       	in	r0, 0x3f	; 63
    3a4e:	f8 94       	cli
    3a50:	de bf       	out	0x3e, r29	; 62
    3a52:	0f be       	out	0x3f, r0	; 63
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	df 91       	pop	r29
    3a58:	cf 91       	pop	r28
    3a5a:	08 95       	ret

00003a5c <vTaskSetTimeOutState>:
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	1f 92       	push	r1
    3a62:	1f 92       	push	r1
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	9a 83       	std	Y+2, r25	; 0x02
    3a6a:	89 83       	std	Y+1, r24	; 0x01
    3a6c:	0f b6       	in	r0, 0x3f	; 63
    3a6e:	f8 94       	cli
    3a70:	0f 92       	push	r0
    3a72:	20 91 c2 11 	lds	r18, 0x11C2	; 0x8011c2 <xNumOfOverflows>
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	20 83       	st	Z, r18
    3a7e:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <xTickCount>
    3a82:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <xTickCount+0x1>
    3a86:	a0 91 b9 11 	lds	r26, 0x11B9	; 0x8011b9 <xTickCount+0x2>
    3a8a:	b0 91 ba 11 	lds	r27, 0x11BA	; 0x8011ba <xTickCount+0x3>
    3a8e:	29 81       	ldd	r18, Y+1	; 0x01
    3a90:	3a 81       	ldd	r19, Y+2	; 0x02
    3a92:	f9 01       	movw	r30, r18
    3a94:	81 83       	std	Z+1, r24	; 0x01
    3a96:	92 83       	std	Z+2, r25	; 0x02
    3a98:	a3 83       	std	Z+3, r26	; 0x03
    3a9a:	b4 83       	std	Z+4, r27	; 0x04
    3a9c:	0f 90       	pop	r0
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	00 00       	nop
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	df 91       	pop	r29
    3aa8:	cf 91       	pop	r28
    3aaa:	08 95       	ret

00003aac <vTaskInternalSetTimeOutState>:
    3aac:	cf 93       	push	r28
    3aae:	df 93       	push	r29
    3ab0:	1f 92       	push	r1
    3ab2:	1f 92       	push	r1
    3ab4:	cd b7       	in	r28, 0x3d	; 61
    3ab6:	de b7       	in	r29, 0x3e	; 62
    3ab8:	9a 83       	std	Y+2, r25	; 0x02
    3aba:	89 83       	std	Y+1, r24	; 0x01
    3abc:	20 91 c2 11 	lds	r18, 0x11C2	; 0x8011c2 <xNumOfOverflows>
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	20 83       	st	Z, r18
    3ac8:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <xTickCount>
    3acc:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <xTickCount+0x1>
    3ad0:	a0 91 b9 11 	lds	r26, 0x11B9	; 0x8011b9 <xTickCount+0x2>
    3ad4:	b0 91 ba 11 	lds	r27, 0x11BA	; 0x8011ba <xTickCount+0x3>
    3ad8:	29 81       	ldd	r18, Y+1	; 0x01
    3ada:	3a 81       	ldd	r19, Y+2	; 0x02
    3adc:	f9 01       	movw	r30, r18
    3ade:	81 83       	std	Z+1, r24	; 0x01
    3ae0:	92 83       	std	Z+2, r25	; 0x02
    3ae2:	a3 83       	std	Z+3, r26	; 0x03
    3ae4:	b4 83       	std	Z+4, r27	; 0x04
    3ae6:	00 00       	nop
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	08 95       	ret

00003af2 <xTaskCheckForTimeOut>:
    3af2:	ef 92       	push	r14
    3af4:	ff 92       	push	r15
    3af6:	0f 93       	push	r16
    3af8:	1f 93       	push	r17
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	2d 97       	sbiw	r28, 0x0d	; 13
    3b04:	0f b6       	in	r0, 0x3f	; 63
    3b06:	f8 94       	cli
    3b08:	de bf       	out	0x3e, r29	; 62
    3b0a:	0f be       	out	0x3f, r0	; 63
    3b0c:	cd bf       	out	0x3d, r28	; 61
    3b0e:	9b 87       	std	Y+11, r25	; 0x0b
    3b10:	8a 87       	std	Y+10, r24	; 0x0a
    3b12:	7d 87       	std	Y+13, r23	; 0x0d
    3b14:	6c 87       	std	Y+12, r22	; 0x0c
    3b16:	0f b6       	in	r0, 0x3f	; 63
    3b18:	f8 94       	cli
    3b1a:	0f 92       	push	r0
    3b1c:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <xTickCount>
    3b20:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <xTickCount+0x1>
    3b24:	a0 91 b9 11 	lds	r26, 0x11B9	; 0x8011b9 <xTickCount+0x2>
    3b28:	b0 91 ba 11 	lds	r27, 0x11BA	; 0x8011ba <xTickCount+0x3>
    3b2c:	8a 83       	std	Y+2, r24	; 0x02
    3b2e:	9b 83       	std	Y+3, r25	; 0x03
    3b30:	ac 83       	std	Y+4, r26	; 0x04
    3b32:	bd 83       	std	Y+5, r27	; 0x05
    3b34:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b36:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b38:	fc 01       	movw	r30, r24
    3b3a:	81 81       	ldd	r24, Z+1	; 0x01
    3b3c:	92 81       	ldd	r25, Z+2	; 0x02
    3b3e:	a3 81       	ldd	r26, Z+3	; 0x03
    3b40:	b4 81       	ldd	r27, Z+4	; 0x04
    3b42:	2a 81       	ldd	r18, Y+2	; 0x02
    3b44:	3b 81       	ldd	r19, Y+3	; 0x03
    3b46:	4c 81       	ldd	r20, Y+4	; 0x04
    3b48:	5d 81       	ldd	r21, Y+5	; 0x05
    3b4a:	79 01       	movw	r14, r18
    3b4c:	8a 01       	movw	r16, r20
    3b4e:	e8 1a       	sub	r14, r24
    3b50:	f9 0a       	sbc	r15, r25
    3b52:	0a 0b       	sbc	r16, r26
    3b54:	1b 0b       	sbc	r17, r27
    3b56:	d8 01       	movw	r26, r16
    3b58:	c7 01       	movw	r24, r14
    3b5a:	8e 83       	std	Y+6, r24	; 0x06
    3b5c:	9f 83       	std	Y+7, r25	; 0x07
    3b5e:	a8 87       	std	Y+8, r26	; 0x08
    3b60:	b9 87       	std	Y+9, r27	; 0x09
    3b62:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b64:	9d 85       	ldd	r25, Y+13	; 0x0d
    3b66:	fc 01       	movw	r30, r24
    3b68:	80 81       	ld	r24, Z
    3b6a:	91 81       	ldd	r25, Z+1	; 0x01
    3b6c:	a2 81       	ldd	r26, Z+2	; 0x02
    3b6e:	b3 81       	ldd	r27, Z+3	; 0x03
    3b70:	8f 3f       	cpi	r24, 0xFF	; 255
    3b72:	9f 4f       	sbci	r25, 0xFF	; 255
    3b74:	af 4f       	sbci	r26, 0xFF	; 255
    3b76:	bf 4f       	sbci	r27, 0xFF	; 255
    3b78:	11 f4       	brne	.+4      	; 0x3b7e <xTaskCheckForTimeOut+0x8c>
    3b7a:	19 82       	std	Y+1, r1	; 0x01
    3b7c:	5a c0       	rjmp	.+180    	; 0x3c32 <xTaskCheckForTimeOut+0x140>
    3b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b80:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b82:	fc 01       	movw	r30, r24
    3b84:	90 81       	ld	r25, Z
    3b86:	80 91 c2 11 	lds	r24, 0x11C2	; 0x8011c2 <xNumOfOverflows>
    3b8a:	98 17       	cp	r25, r24
    3b8c:	d1 f0       	breq	.+52     	; 0x3bc2 <xTaskCheckForTimeOut+0xd0>
    3b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b90:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b92:	fc 01       	movw	r30, r24
    3b94:	21 81       	ldd	r18, Z+1	; 0x01
    3b96:	32 81       	ldd	r19, Z+2	; 0x02
    3b98:	43 81       	ldd	r20, Z+3	; 0x03
    3b9a:	54 81       	ldd	r21, Z+4	; 0x04
    3b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba0:	ac 81       	ldd	r26, Y+4	; 0x04
    3ba2:	bd 81       	ldd	r27, Y+5	; 0x05
    3ba4:	82 17       	cp	r24, r18
    3ba6:	93 07       	cpc	r25, r19
    3ba8:	a4 07       	cpc	r26, r20
    3baa:	b5 07       	cpc	r27, r21
    3bac:	50 f0       	brcs	.+20     	; 0x3bc2 <xTaskCheckForTimeOut+0xd0>
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	89 83       	std	Y+1, r24	; 0x01
    3bb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	10 82       	st	Z, r1
    3bba:	11 82       	std	Z+1, r1	; 0x01
    3bbc:	12 82       	std	Z+2, r1	; 0x02
    3bbe:	13 82       	std	Z+3, r1	; 0x03
    3bc0:	38 c0       	rjmp	.+112    	; 0x3c32 <xTaskCheckForTimeOut+0x140>
    3bc2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bc4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	20 81       	ld	r18, Z
    3bca:	31 81       	ldd	r19, Z+1	; 0x01
    3bcc:	42 81       	ldd	r20, Z+2	; 0x02
    3bce:	53 81       	ldd	r21, Z+3	; 0x03
    3bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd2:	9f 81       	ldd	r25, Y+7	; 0x07
    3bd4:	a8 85       	ldd	r26, Y+8	; 0x08
    3bd6:	b9 85       	ldd	r27, Y+9	; 0x09
    3bd8:	82 17       	cp	r24, r18
    3bda:	93 07       	cpc	r25, r19
    3bdc:	a4 07       	cpc	r26, r20
    3bde:	b5 07       	cpc	r27, r21
    3be0:	f8 f4       	brcc	.+62     	; 0x3c20 <xTaskCheckForTimeOut+0x12e>
    3be2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3be4:	9d 85       	ldd	r25, Y+13	; 0x0d
    3be6:	fc 01       	movw	r30, r24
    3be8:	20 81       	ld	r18, Z
    3bea:	31 81       	ldd	r19, Z+1	; 0x01
    3bec:	42 81       	ldd	r20, Z+2	; 0x02
    3bee:	53 81       	ldd	r21, Z+3	; 0x03
    3bf0:	8e 81       	ldd	r24, Y+6	; 0x06
    3bf2:	9f 81       	ldd	r25, Y+7	; 0x07
    3bf4:	a8 85       	ldd	r26, Y+8	; 0x08
    3bf6:	b9 85       	ldd	r27, Y+9	; 0x09
    3bf8:	79 01       	movw	r14, r18
    3bfa:	8a 01       	movw	r16, r20
    3bfc:	e8 1a       	sub	r14, r24
    3bfe:	f9 0a       	sbc	r15, r25
    3c00:	0a 0b       	sbc	r16, r26
    3c02:	1b 0b       	sbc	r17, r27
    3c04:	d8 01       	movw	r26, r16
    3c06:	c7 01       	movw	r24, r14
    3c08:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c0a:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c0c:	f9 01       	movw	r30, r18
    3c0e:	80 83       	st	Z, r24
    3c10:	91 83       	std	Z+1, r25	; 0x01
    3c12:	a2 83       	std	Z+2, r26	; 0x02
    3c14:	b3 83       	std	Z+3, r27	; 0x03
    3c16:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c18:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c1a:	48 df       	rcall	.-368    	; 0x3aac <vTaskInternalSetTimeOutState>
    3c1c:	19 82       	std	Y+1, r1	; 0x01
    3c1e:	09 c0       	rjmp	.+18     	; 0x3c32 <xTaskCheckForTimeOut+0x140>
    3c20:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c22:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c24:	fc 01       	movw	r30, r24
    3c26:	10 82       	st	Z, r1
    3c28:	11 82       	std	Z+1, r1	; 0x01
    3c2a:	12 82       	std	Z+2, r1	; 0x02
    3c2c:	13 82       	std	Z+3, r1	; 0x03
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	89 83       	std	Y+1, r24	; 0x01
    3c32:	0f 90       	pop	r0
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	89 81       	ldd	r24, Y+1	; 0x01
    3c38:	2d 96       	adiw	r28, 0x0d	; 13
    3c3a:	0f b6       	in	r0, 0x3f	; 63
    3c3c:	f8 94       	cli
    3c3e:	de bf       	out	0x3e, r29	; 62
    3c40:	0f be       	out	0x3f, r0	; 63
    3c42:	cd bf       	out	0x3d, r28	; 61
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	1f 91       	pop	r17
    3c4a:	0f 91       	pop	r16
    3c4c:	ff 90       	pop	r15
    3c4e:	ef 90       	pop	r14
    3c50:	08 95       	ret

00003c52 <vTaskMissedYield>:
    3c52:	cf 93       	push	r28
    3c54:	df 93       	push	r29
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	80 93 c1 11 	sts	0x11C1, r24	; 0x8011c1 <xYieldPending>
    3c60:	00 00       	nop
    3c62:	df 91       	pop	r29
    3c64:	cf 91       	pop	r28
    3c66:	08 95       	ret

00003c68 <prvInitialiseTaskLists>:
    3c68:	cf 93       	push	r28
    3c6a:	df 93       	push	r29
    3c6c:	1f 92       	push	r1
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	19 82       	std	Y+1, r1	; 0x01
    3c74:	10 c0       	rjmp	.+32     	; 0x3c96 <prvInitialiseTaskLists+0x2e>
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	28 2f       	mov	r18, r24
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	4b e0       	ldi	r20, 0x0B	; 11
    3c7e:	42 9f       	mul	r20, r18
    3c80:	c0 01       	movw	r24, r0
    3c82:	43 9f       	mul	r20, r19
    3c84:	90 0d       	add	r25, r0
    3c86:	11 24       	eor	r1, r1
    3c88:	84 5f       	subi	r24, 0xF4	; 244
    3c8a:	9e 4e       	sbci	r25, 0xEE	; 238
    3c8c:	0e 94 9a 05 	call	0xb34	; 0xb34 <vListInitialise>
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	8f 5f       	subi	r24, 0xFF	; 255
    3c94:	89 83       	std	Y+1, r24	; 0x01
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	8a 30       	cpi	r24, 0x0A	; 10
    3c9a:	68 f3       	brcs	.-38     	; 0x3c76 <prvInitialiseTaskLists+0xe>
    3c9c:	8a e7       	ldi	r24, 0x7A	; 122
    3c9e:	91 e1       	ldi	r25, 0x11	; 17
    3ca0:	0e 94 9a 05 	call	0xb34	; 0xb34 <vListInitialise>
    3ca4:	85 e8       	ldi	r24, 0x85	; 133
    3ca6:	91 e1       	ldi	r25, 0x11	; 17
    3ca8:	0e 94 9a 05 	call	0xb34	; 0xb34 <vListInitialise>
    3cac:	84 e9       	ldi	r24, 0x94	; 148
    3cae:	91 e1       	ldi	r25, 0x11	; 17
    3cb0:	0e 94 9a 05 	call	0xb34	; 0xb34 <vListInitialise>
    3cb4:	8f e9       	ldi	r24, 0x9F	; 159
    3cb6:	91 e1       	ldi	r25, 0x11	; 17
    3cb8:	0e 94 9a 05 	call	0xb34	; 0xb34 <vListInitialise>
    3cbc:	8b ea       	ldi	r24, 0xAB	; 171
    3cbe:	91 e1       	ldi	r25, 0x11	; 17
    3cc0:	0e 94 9a 05 	call	0xb34	; 0xb34 <vListInitialise>
    3cc4:	8a e7       	ldi	r24, 0x7A	; 122
    3cc6:	91 e1       	ldi	r25, 0x11	; 17
    3cc8:	90 93 91 11 	sts	0x1191, r25	; 0x801191 <pxDelayedTaskList+0x1>
    3ccc:	80 93 90 11 	sts	0x1190, r24	; 0x801190 <pxDelayedTaskList>
    3cd0:	85 e8       	ldi	r24, 0x85	; 133
    3cd2:	91 e1       	ldi	r25, 0x11	; 17
    3cd4:	90 93 93 11 	sts	0x1193, r25	; 0x801193 <pxOverflowDelayedTaskList+0x1>
    3cd8:	80 93 92 11 	sts	0x1192, r24	; 0x801192 <pxOverflowDelayedTaskList>
    3cdc:	00 00       	nop
    3cde:	0f 90       	pop	r0
    3ce0:	df 91       	pop	r29
    3ce2:	cf 91       	pop	r28
    3ce4:	08 95       	ret

00003ce6 <prvCheckTasksWaitingTermination>:
    3ce6:	cf 93       	push	r28
    3ce8:	df 93       	push	r29
    3cea:	1f 92       	push	r1
    3cec:	1f 92       	push	r1
    3cee:	cd b7       	in	r28, 0x3d	; 61
    3cf0:	de b7       	in	r29, 0x3e	; 62
    3cf2:	20 c0       	rjmp	.+64     	; 0x3d34 <prvCheckTasksWaitingTermination+0x4e>
    3cf4:	0f b6       	in	r0, 0x3f	; 63
    3cf6:	f8 94       	cli
    3cf8:	0f 92       	push	r0
    3cfa:	80 91 a6 11 	lds	r24, 0x11A6	; 0x8011a6 <xTasksWaitingTermination+0x7>
    3cfe:	90 91 a7 11 	lds	r25, 0x11A7	; 0x8011a7 <xTasksWaitingTermination+0x8>
    3d02:	fc 01       	movw	r30, r24
    3d04:	80 85       	ldd	r24, Z+8	; 0x08
    3d06:	91 85       	ldd	r25, Z+9	; 0x09
    3d08:	9a 83       	std	Y+2, r25	; 0x02
    3d0a:	89 83       	std	Y+1, r24	; 0x01
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d10:	02 96       	adiw	r24, 0x02	; 2
    3d12:	0e 94 6e 06 	call	0xcdc	; 0xcdc <uxListRemove>
    3d16:	80 91 b6 11 	lds	r24, 0x11B6	; 0x8011b6 <uxCurrentNumberOfTasks>
    3d1a:	81 50       	subi	r24, 0x01	; 1
    3d1c:	80 93 b6 11 	sts	0x11B6, r24	; 0x8011b6 <uxCurrentNumberOfTasks>
    3d20:	80 91 aa 11 	lds	r24, 0x11AA	; 0x8011aa <uxDeletedTasksWaitingCleanUp>
    3d24:	81 50       	subi	r24, 0x01	; 1
    3d26:	80 93 aa 11 	sts	0x11AA, r24	; 0x8011aa <uxDeletedTasksWaitingCleanUp>
    3d2a:	0f 90       	pop	r0
    3d2c:	0f be       	out	0x3f, r0	; 63
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	9a 81       	ldd	r25, Y+2	; 0x02
    3d32:	0a d0       	rcall	.+20     	; 0x3d48 <prvDeleteTCB>
    3d34:	80 91 aa 11 	lds	r24, 0x11AA	; 0x8011aa <uxDeletedTasksWaitingCleanUp>
    3d38:	88 23       	and	r24, r24
    3d3a:	e1 f6       	brne	.-72     	; 0x3cf4 <prvCheckTasksWaitingTermination+0xe>
    3d3c:	00 00       	nop
    3d3e:	0f 90       	pop	r0
    3d40:	0f 90       	pop	r0
    3d42:	df 91       	pop	r29
    3d44:	cf 91       	pop	r28
    3d46:	08 95       	ret

00003d48 <prvDeleteTCB>:
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
    3d4c:	1f 92       	push	r1
    3d4e:	1f 92       	push	r1
    3d50:	cd b7       	in	r28, 0x3d	; 61
    3d52:	de b7       	in	r29, 0x3e	; 62
    3d54:	9a 83       	std	Y+2, r25	; 0x02
    3d56:	89 83       	std	Y+1, r24	; 0x01
    3d58:	89 81       	ldd	r24, Y+1	; 0x01
    3d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d5c:	fc 01       	movw	r30, r24
    3d5e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3d60:	94 8d       	ldd	r25, Z+28	; 0x1c
    3d62:	0e 94 f7 03 	call	0x7ee	; 0x7ee <vPortFree>
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <vPortFree>
    3d6e:	00 00       	nop
    3d70:	0f 90       	pop	r0
    3d72:	0f 90       	pop	r0
    3d74:	df 91       	pop	r29
    3d76:	cf 91       	pop	r28
    3d78:	08 95       	ret

00003d7a <prvResetNextTaskUnblockTime>:
    3d7a:	cf 93       	push	r28
    3d7c:	df 93       	push	r29
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	80 91 90 11 	lds	r24, 0x1190	; 0x801190 <pxDelayedTaskList>
    3d86:	90 91 91 11 	lds	r25, 0x1191	; 0x801191 <pxDelayedTaskList+0x1>
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	80 81       	ld	r24, Z
    3d8e:	88 23       	and	r24, r24
    3d90:	61 f4       	brne	.+24     	; 0x3daa <prvResetNextTaskUnblockTime+0x30>
    3d92:	8f ef       	ldi	r24, 0xFF	; 255
    3d94:	9f ef       	ldi	r25, 0xFF	; 255
    3d96:	dc 01       	movw	r26, r24
    3d98:	80 93 c4 11 	sts	0x11C4, r24	; 0x8011c4 <xNextTaskUnblockTime>
    3d9c:	90 93 c5 11 	sts	0x11C5, r25	; 0x8011c5 <xNextTaskUnblockTime+0x1>
    3da0:	a0 93 c6 11 	sts	0x11C6, r26	; 0x8011c6 <xNextTaskUnblockTime+0x2>
    3da4:	b0 93 c7 11 	sts	0x11C7, r27	; 0x8011c7 <xNextTaskUnblockTime+0x3>
    3da8:	14 c0       	rjmp	.+40     	; 0x3dd2 <prvResetNextTaskUnblockTime+0x58>
    3daa:	80 91 90 11 	lds	r24, 0x1190	; 0x801190 <pxDelayedTaskList>
    3dae:	90 91 91 11 	lds	r25, 0x1191	; 0x801191 <pxDelayedTaskList+0x1>
    3db2:	fc 01       	movw	r30, r24
    3db4:	87 81       	ldd	r24, Z+7	; 0x07
    3db6:	90 85       	ldd	r25, Z+8	; 0x08
    3db8:	fc 01       	movw	r30, r24
    3dba:	80 81       	ld	r24, Z
    3dbc:	91 81       	ldd	r25, Z+1	; 0x01
    3dbe:	a2 81       	ldd	r26, Z+2	; 0x02
    3dc0:	b3 81       	ldd	r27, Z+3	; 0x03
    3dc2:	80 93 c4 11 	sts	0x11C4, r24	; 0x8011c4 <xNextTaskUnblockTime>
    3dc6:	90 93 c5 11 	sts	0x11C5, r25	; 0x8011c5 <xNextTaskUnblockTime+0x1>
    3dca:	a0 93 c6 11 	sts	0x11C6, r26	; 0x8011c6 <xNextTaskUnblockTime+0x2>
    3dce:	b0 93 c7 11 	sts	0x11C7, r27	; 0x8011c7 <xNextTaskUnblockTime+0x3>
    3dd2:	00 00       	nop
    3dd4:	df 91       	pop	r29
    3dd6:	cf 91       	pop	r28
    3dd8:	08 95       	ret

00003dda <xTaskGetCurrentTaskHandle>:
    3dda:	cf 93       	push	r28
    3ddc:	df 93       	push	r29
    3dde:	1f 92       	push	r1
    3de0:	1f 92       	push	r1
    3de2:	cd b7       	in	r28, 0x3d	; 61
    3de4:	de b7       	in	r29, 0x3e	; 62
    3de6:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    3dea:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    3dee:	9a 83       	std	Y+2, r25	; 0x02
    3df0:	89 83       	std	Y+1, r24	; 0x01
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
    3df4:	9a 81       	ldd	r25, Y+2	; 0x02
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
    3dfa:	df 91       	pop	r29
    3dfc:	cf 91       	pop	r28
    3dfe:	08 95       	ret

00003e00 <xTaskGetSchedulerState>:
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	1f 92       	push	r1
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	80 91 bc 11 	lds	r24, 0x11BC	; 0x8011bc <xSchedulerRunning>
    3e0e:	88 23       	and	r24, r24
    3e10:	19 f4       	brne	.+6      	; 0x3e18 <xTaskGetSchedulerState+0x18>
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	89 83       	std	Y+1, r24	; 0x01
    3e16:	08 c0       	rjmp	.+16     	; 0x3e28 <xTaskGetSchedulerState+0x28>
    3e18:	80 91 ca 11 	lds	r24, 0x11CA	; 0x8011ca <uxSchedulerSuspended>
    3e1c:	88 23       	and	r24, r24
    3e1e:	19 f4       	brne	.+6      	; 0x3e26 <xTaskGetSchedulerState+0x26>
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	89 83       	std	Y+1, r24	; 0x01
    3e24:	01 c0       	rjmp	.+2      	; 0x3e28 <xTaskGetSchedulerState+0x28>
    3e26:	19 82       	std	Y+1, r1	; 0x01
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	0f 90       	pop	r0
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	08 95       	ret

00003e32 <xTaskPriorityDisinherit>:
    3e32:	ef 92       	push	r14
    3e34:	ff 92       	push	r15
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	27 97       	sbiw	r28, 0x07	; 7
    3e44:	0f b6       	in	r0, 0x3f	; 63
    3e46:	f8 94       	cli
    3e48:	de bf       	out	0x3e, r29	; 62
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	cd bf       	out	0x3d, r28	; 61
    3e4e:	9f 83       	std	Y+7, r25	; 0x07
    3e50:	8e 83       	std	Y+6, r24	; 0x06
    3e52:	8e 81       	ldd	r24, Y+6	; 0x06
    3e54:	9f 81       	ldd	r25, Y+7	; 0x07
    3e56:	9b 83       	std	Y+3, r25	; 0x03
    3e58:	8a 83       	std	Y+2, r24	; 0x02
    3e5a:	19 82       	std	Y+1, r1	; 0x01
    3e5c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e5e:	9f 81       	ldd	r25, Y+7	; 0x07
    3e60:	89 2b       	or	r24, r25
    3e62:	09 f4       	brne	.+2      	; 0x3e66 <xTaskPriorityDisinherit+0x34>
    3e64:	bf c0       	rjmp	.+382    	; 0x3fe4 <xTaskPriorityDisinherit+0x1b2>
    3e66:	8a 81       	ldd	r24, Y+2	; 0x02
    3e68:	9b 81       	ldd	r25, Y+3	; 0x03
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	86 a5       	ldd	r24, Z+46	; 0x2e
    3e6e:	2f ef       	ldi	r18, 0xFF	; 255
    3e70:	28 0f       	add	r18, r24
    3e72:	8a 81       	ldd	r24, Y+2	; 0x02
    3e74:	9b 81       	ldd	r25, Y+3	; 0x03
    3e76:	fc 01       	movw	r30, r24
    3e78:	26 a7       	std	Z+46, r18	; 0x2e
    3e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e7e:	fc 01       	movw	r30, r24
    3e80:	22 8d       	ldd	r18, Z+26	; 0x1a
    3e82:	8a 81       	ldd	r24, Y+2	; 0x02
    3e84:	9b 81       	ldd	r25, Y+3	; 0x03
    3e86:	fc 01       	movw	r30, r24
    3e88:	85 a5       	ldd	r24, Z+45	; 0x2d
    3e8a:	28 17       	cp	r18, r24
    3e8c:	09 f4       	brne	.+2      	; 0x3e90 <xTaskPriorityDisinherit+0x5e>
    3e8e:	aa c0       	rjmp	.+340    	; 0x3fe4 <xTaskPriorityDisinherit+0x1b2>
    3e90:	8a 81       	ldd	r24, Y+2	; 0x02
    3e92:	9b 81       	ldd	r25, Y+3	; 0x03
    3e94:	fc 01       	movw	r30, r24
    3e96:	86 a5       	ldd	r24, Z+46	; 0x2e
    3e98:	88 23       	and	r24, r24
    3e9a:	09 f0       	breq	.+2      	; 0x3e9e <xTaskPriorityDisinherit+0x6c>
    3e9c:	a3 c0       	rjmp	.+326    	; 0x3fe4 <xTaskPriorityDisinherit+0x1b2>
    3e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea2:	02 96       	adiw	r24, 0x02	; 2
    3ea4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <uxListRemove>
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    3eac:	fc 01       	movw	r30, r24
    3eae:	25 a5       	ldd	r18, Z+45	; 0x2d
    3eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	22 8f       	std	Z+26, r18	; 0x1a
    3eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eba:	9b 81       	ldd	r25, Y+3	; 0x03
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ec0:	88 2f       	mov	r24, r24
    3ec2:	90 e0       	ldi	r25, 0x00	; 0
    3ec4:	a0 e0       	ldi	r26, 0x00	; 0
    3ec6:	b0 e0       	ldi	r27, 0x00	; 0
    3ec8:	2a e0       	ldi	r18, 0x0A	; 10
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	40 e0       	ldi	r20, 0x00	; 0
    3ece:	50 e0       	ldi	r21, 0x00	; 0
    3ed0:	79 01       	movw	r14, r18
    3ed2:	8a 01       	movw	r16, r20
    3ed4:	e8 1a       	sub	r14, r24
    3ed6:	f9 0a       	sbc	r15, r25
    3ed8:	0a 0b       	sbc	r16, r26
    3eda:	1b 0b       	sbc	r17, r27
    3edc:	d8 01       	movw	r26, r16
    3ede:	c7 01       	movw	r24, r14
    3ee0:	2a 81       	ldd	r18, Y+2	; 0x02
    3ee2:	3b 81       	ldd	r19, Y+3	; 0x03
    3ee4:	f9 01       	movw	r30, r18
    3ee6:	86 87       	std	Z+14, r24	; 0x0e
    3ee8:	97 87       	std	Z+15, r25	; 0x0f
    3eea:	a0 8b       	std	Z+16, r26	; 0x10
    3eec:	b1 8b       	std	Z+17, r27	; 0x11
    3eee:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	92 8d       	ldd	r25, Z+26	; 0x1a
    3ef6:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <uxTopReadyPriority>
    3efa:	89 17       	cp	r24, r25
    3efc:	30 f4       	brcc	.+12     	; 0x3f0a <xTaskPriorityDisinherit+0xd8>
    3efe:	8a 81       	ldd	r24, Y+2	; 0x02
    3f00:	9b 81       	ldd	r25, Y+3	; 0x03
    3f02:	fc 01       	movw	r30, r24
    3f04:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f06:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <uxTopReadyPriority>
    3f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f0e:	fc 01       	movw	r30, r24
    3f10:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f12:	28 2f       	mov	r18, r24
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	4b e0       	ldi	r20, 0x0B	; 11
    3f18:	42 9f       	mul	r20, r18
    3f1a:	c0 01       	movw	r24, r0
    3f1c:	43 9f       	mul	r20, r19
    3f1e:	90 0d       	add	r25, r0
    3f20:	11 24       	eor	r1, r1
    3f22:	83 5f       	subi	r24, 0xF3	; 243
    3f24:	9e 4e       	sbci	r25, 0xEE	; 238
    3f26:	fc 01       	movw	r30, r24
    3f28:	80 81       	ld	r24, Z
    3f2a:	91 81       	ldd	r25, Z+1	; 0x01
    3f2c:	9d 83       	std	Y+5, r25	; 0x05
    3f2e:	8c 83       	std	Y+4, r24	; 0x04
    3f30:	8a 81       	ldd	r24, Y+2	; 0x02
    3f32:	9b 81       	ldd	r25, Y+3	; 0x03
    3f34:	2c 81       	ldd	r18, Y+4	; 0x04
    3f36:	3d 81       	ldd	r19, Y+5	; 0x05
    3f38:	fc 01       	movw	r30, r24
    3f3a:	37 83       	std	Z+7, r19	; 0x07
    3f3c:	26 83       	std	Z+6, r18	; 0x06
    3f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f40:	9d 81       	ldd	r25, Y+5	; 0x05
    3f42:	fc 01       	movw	r30, r24
    3f44:	26 81       	ldd	r18, Z+6	; 0x06
    3f46:	37 81       	ldd	r19, Z+7	; 0x07
    3f48:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f4c:	fc 01       	movw	r30, r24
    3f4e:	31 87       	std	Z+9, r19	; 0x09
    3f50:	20 87       	std	Z+8, r18	; 0x08
    3f52:	8c 81       	ldd	r24, Y+4	; 0x04
    3f54:	9d 81       	ldd	r25, Y+5	; 0x05
    3f56:	fc 01       	movw	r30, r24
    3f58:	86 81       	ldd	r24, Z+6	; 0x06
    3f5a:	97 81       	ldd	r25, Z+7	; 0x07
    3f5c:	2a 81       	ldd	r18, Y+2	; 0x02
    3f5e:	3b 81       	ldd	r19, Y+3	; 0x03
    3f60:	2e 5f       	subi	r18, 0xFE	; 254
    3f62:	3f 4f       	sbci	r19, 0xFF	; 255
    3f64:	fc 01       	movw	r30, r24
    3f66:	35 83       	std	Z+5, r19	; 0x05
    3f68:	24 83       	std	Z+4, r18	; 0x04
    3f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f6e:	9c 01       	movw	r18, r24
    3f70:	2e 5f       	subi	r18, 0xFE	; 254
    3f72:	3f 4f       	sbci	r19, 0xFF	; 255
    3f74:	8c 81       	ldd	r24, Y+4	; 0x04
    3f76:	9d 81       	ldd	r25, Y+5	; 0x05
    3f78:	fc 01       	movw	r30, r24
    3f7a:	37 83       	std	Z+7, r19	; 0x07
    3f7c:	26 83       	std	Z+6, r18	; 0x06
    3f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f80:	9b 81       	ldd	r25, Y+3	; 0x03
    3f82:	fc 01       	movw	r30, r24
    3f84:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f86:	28 2f       	mov	r18, r24
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	4b e0       	ldi	r20, 0x0B	; 11
    3f8c:	42 9f       	mul	r20, r18
    3f8e:	c0 01       	movw	r24, r0
    3f90:	43 9f       	mul	r20, r19
    3f92:	90 0d       	add	r25, r0
    3f94:	11 24       	eor	r1, r1
    3f96:	9c 01       	movw	r18, r24
    3f98:	24 5f       	subi	r18, 0xF4	; 244
    3f9a:	3e 4e       	sbci	r19, 0xEE	; 238
    3f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa0:	fc 01       	movw	r30, r24
    3fa2:	35 87       	std	Z+13, r19	; 0x0d
    3fa4:	24 87       	std	Z+12, r18	; 0x0c
    3fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    3faa:	fc 01       	movw	r30, r24
    3fac:	82 8d       	ldd	r24, Z+26	; 0x1a
    3fae:	88 2f       	mov	r24, r24
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	4b e0       	ldi	r20, 0x0B	; 11
    3fb4:	48 9f       	mul	r20, r24
    3fb6:	90 01       	movw	r18, r0
    3fb8:	49 9f       	mul	r20, r25
    3fba:	30 0d       	add	r19, r0
    3fbc:	11 24       	eor	r1, r1
    3fbe:	24 5f       	subi	r18, 0xF4	; 244
    3fc0:	3e 4e       	sbci	r19, 0xEE	; 238
    3fc2:	f9 01       	movw	r30, r18
    3fc4:	20 81       	ld	r18, Z
    3fc6:	41 e0       	ldi	r20, 0x01	; 1
    3fc8:	42 0f       	add	r20, r18
    3fca:	5b e0       	ldi	r21, 0x0B	; 11
    3fcc:	58 9f       	mul	r21, r24
    3fce:	90 01       	movw	r18, r0
    3fd0:	59 9f       	mul	r21, r25
    3fd2:	30 0d       	add	r19, r0
    3fd4:	11 24       	eor	r1, r1
    3fd6:	c9 01       	movw	r24, r18
    3fd8:	84 5f       	subi	r24, 0xF4	; 244
    3fda:	9e 4e       	sbci	r25, 0xEE	; 238
    3fdc:	fc 01       	movw	r30, r24
    3fde:	40 83       	st	Z, r20
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	89 83       	std	Y+1, r24	; 0x01
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	27 96       	adiw	r28, 0x07	; 7
    3fe8:	0f b6       	in	r0, 0x3f	; 63
    3fea:	f8 94       	cli
    3fec:	de bf       	out	0x3e, r29	; 62
    3fee:	0f be       	out	0x3f, r0	; 63
    3ff0:	cd bf       	out	0x3d, r28	; 61
    3ff2:	df 91       	pop	r29
    3ff4:	cf 91       	pop	r28
    3ff6:	1f 91       	pop	r17
    3ff8:	0f 91       	pop	r16
    3ffa:	ff 90       	pop	r15
    3ffc:	ef 90       	pop	r14
    3ffe:	08 95       	ret

00004000 <xTaskGenericNotifyWait>:
    4000:	af 92       	push	r10
    4002:	bf 92       	push	r11
    4004:	cf 92       	push	r12
    4006:	df 92       	push	r13
    4008:	ef 92       	push	r14
    400a:	ff 92       	push	r15
    400c:	0f 93       	push	r16
    400e:	1f 93       	push	r17
    4010:	cf 93       	push	r28
    4012:	df 93       	push	r29
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
    4018:	60 97       	sbiw	r28, 0x10	; 16
    401a:	0f b6       	in	r0, 0x3f	; 63
    401c:	f8 94       	cli
    401e:	de bf       	out	0x3e, r29	; 62
    4020:	0f be       	out	0x3f, r0	; 63
    4022:	cd bf       	out	0x3d, r28	; 61
    4024:	8a 83       	std	Y+2, r24	; 0x02
    4026:	4b 83       	std	Y+3, r20	; 0x03
    4028:	5c 83       	std	Y+4, r21	; 0x04
    402a:	6d 83       	std	Y+5, r22	; 0x05
    402c:	7e 83       	std	Y+6, r23	; 0x06
    402e:	0f 83       	std	Y+7, r16	; 0x07
    4030:	18 87       	std	Y+8, r17	; 0x08
    4032:	29 87       	std	Y+9, r18	; 0x09
    4034:	3a 87       	std	Y+10, r19	; 0x0a
    4036:	fc 86       	std	Y+12, r15	; 0x0c
    4038:	eb 86       	std	Y+11, r14	; 0x0b
    403a:	ad 86       	std	Y+13, r10	; 0x0d
    403c:	be 86       	std	Y+14, r11	; 0x0e
    403e:	cf 86       	std	Y+15, r12	; 0x0f
    4040:	d8 8a       	std	Y+16, r13	; 0x10
    4042:	0f b6       	in	r0, 0x3f	; 63
    4044:	f8 94       	cli
    4046:	0f 92       	push	r0
    4048:	20 91 0a 11 	lds	r18, 0x110A	; 0x80110a <pxCurrentTCB>
    404c:	30 91 0b 11 	lds	r19, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4050:	8a 81       	ldd	r24, Y+2	; 0x02
    4052:	88 2f       	mov	r24, r24
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	82 0f       	add	r24, r18
    4058:	93 1f       	adc	r25, r19
    405a:	c3 96       	adiw	r24, 0x33	; 51
    405c:	dc 01       	movw	r26, r24
    405e:	8c 91       	ld	r24, X
    4060:	82 30       	cpi	r24, 0x02	; 2
    4062:	09 f4       	brne	.+2      	; 0x4066 <xTaskGenericNotifyWait+0x66>
    4064:	4f c0       	rjmp	.+158    	; 0x4104 <xTaskGenericNotifyWait+0x104>
    4066:	60 91 0a 11 	lds	r22, 0x110A	; 0x80110a <pxCurrentTCB>
    406a:	70 91 0b 11 	lds	r23, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    406e:	8a 81       	ldd	r24, Y+2	; 0x02
    4070:	e8 2f       	mov	r30, r24
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	8a 81       	ldd	r24, Y+2	; 0x02
    4076:	88 2f       	mov	r24, r24
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	88 0f       	add	r24, r24
    407c:	99 1f       	adc	r25, r25
    407e:	88 0f       	add	r24, r24
    4080:	99 1f       	adc	r25, r25
    4082:	86 0f       	add	r24, r22
    4084:	97 1f       	adc	r25, r23
    4086:	8f 96       	adiw	r24, 0x2f	; 47
    4088:	dc 01       	movw	r26, r24
    408a:	2d 91       	ld	r18, X+
    408c:	3d 91       	ld	r19, X+
    408e:	4d 91       	ld	r20, X+
    4090:	5c 91       	ld	r21, X
    4092:	8b 81       	ldd	r24, Y+3	; 0x03
    4094:	9c 81       	ldd	r25, Y+4	; 0x04
    4096:	ad 81       	ldd	r26, Y+5	; 0x05
    4098:	be 81       	ldd	r27, Y+6	; 0x06
    409a:	80 95       	com	r24
    409c:	90 95       	com	r25
    409e:	a0 95       	com	r26
    40a0:	b0 95       	com	r27
    40a2:	82 23       	and	r24, r18
    40a4:	93 23       	and	r25, r19
    40a6:	a4 23       	and	r26, r20
    40a8:	b5 23       	and	r27, r21
    40aa:	9f 01       	movw	r18, r30
    40ac:	22 0f       	add	r18, r18
    40ae:	33 1f       	adc	r19, r19
    40b0:	22 0f       	add	r18, r18
    40b2:	33 1f       	adc	r19, r19
    40b4:	26 0f       	add	r18, r22
    40b6:	37 1f       	adc	r19, r23
    40b8:	21 5d       	subi	r18, 0xD1	; 209
    40ba:	3f 4f       	sbci	r19, 0xFF	; 255
    40bc:	f9 01       	movw	r30, r18
    40be:	80 83       	st	Z, r24
    40c0:	91 83       	std	Z+1, r25	; 0x01
    40c2:	a2 83       	std	Z+2, r26	; 0x02
    40c4:	b3 83       	std	Z+3, r27	; 0x03
    40c6:	20 91 0a 11 	lds	r18, 0x110A	; 0x80110a <pxCurrentTCB>
    40ca:	30 91 0b 11 	lds	r19, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	88 2f       	mov	r24, r24
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	82 0f       	add	r24, r18
    40d6:	93 1f       	adc	r25, r19
    40d8:	c3 96       	adiw	r24, 0x33	; 51
    40da:	21 e0       	ldi	r18, 0x01	; 1
    40dc:	dc 01       	movw	r26, r24
    40de:	2c 93       	st	X, r18
    40e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e4:	af 85       	ldd	r26, Y+15	; 0x0f
    40e6:	b8 89       	ldd	r27, Y+16	; 0x10
    40e8:	89 2b       	or	r24, r25
    40ea:	8a 2b       	or	r24, r26
    40ec:	8b 2b       	or	r24, r27
    40ee:	51 f0       	breq	.+20     	; 0x4104 <xTaskGenericNotifyWait+0x104>
    40f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40f4:	af 85       	ldd	r26, Y+15	; 0x0f
    40f6:	b8 89       	ldd	r27, Y+16	; 0x10
    40f8:	41 e0       	ldi	r20, 0x01	; 1
    40fa:	bc 01       	movw	r22, r24
    40fc:	cd 01       	movw	r24, r26
    40fe:	b3 d4       	rcall	.+2406   	; 0x4a66 <prvAddCurrentTaskToDelayedList>
    4100:	0e 94 8b 07 	call	0xf16	; 0xf16 <vPortYield>
    4104:	0f 90       	pop	r0
    4106:	0f be       	out	0x3f, r0	; 63
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	0f 92       	push	r0
    410e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4110:	9c 85       	ldd	r25, Y+12	; 0x0c
    4112:	89 2b       	or	r24, r25
    4114:	d1 f0       	breq	.+52     	; 0x414a <xTaskGenericNotifyWait+0x14a>
    4116:	20 91 0a 11 	lds	r18, 0x110A	; 0x80110a <pxCurrentTCB>
    411a:	30 91 0b 11 	lds	r19, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    411e:	8a 81       	ldd	r24, Y+2	; 0x02
    4120:	88 2f       	mov	r24, r24
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	88 0f       	add	r24, r24
    4126:	99 1f       	adc	r25, r25
    4128:	88 0f       	add	r24, r24
    412a:	99 1f       	adc	r25, r25
    412c:	82 0f       	add	r24, r18
    412e:	93 1f       	adc	r25, r19
    4130:	8f 96       	adiw	r24, 0x2f	; 47
    4132:	fc 01       	movw	r30, r24
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	a2 81       	ldd	r26, Z+2	; 0x02
    413a:	b3 81       	ldd	r27, Z+3	; 0x03
    413c:	2b 85       	ldd	r18, Y+11	; 0x0b
    413e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4140:	f9 01       	movw	r30, r18
    4142:	80 83       	st	Z, r24
    4144:	91 83       	std	Z+1, r25	; 0x01
    4146:	a2 83       	std	Z+2, r26	; 0x02
    4148:	b3 83       	std	Z+3, r27	; 0x03
    414a:	20 91 0a 11 	lds	r18, 0x110A	; 0x80110a <pxCurrentTCB>
    414e:	30 91 0b 11 	lds	r19, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4152:	8a 81       	ldd	r24, Y+2	; 0x02
    4154:	88 2f       	mov	r24, r24
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	82 0f       	add	r24, r18
    415a:	93 1f       	adc	r25, r19
    415c:	c3 96       	adiw	r24, 0x33	; 51
    415e:	dc 01       	movw	r26, r24
    4160:	8c 91       	ld	r24, X
    4162:	82 30       	cpi	r24, 0x02	; 2
    4164:	11 f0       	breq	.+4      	; 0x416a <xTaskGenericNotifyWait+0x16a>
    4166:	19 82       	std	Y+1, r1	; 0x01
    4168:	32 c0       	rjmp	.+100    	; 0x41ce <xTaskGenericNotifyWait+0x1ce>
    416a:	60 91 0a 11 	lds	r22, 0x110A	; 0x80110a <pxCurrentTCB>
    416e:	70 91 0b 11 	lds	r23, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4172:	8a 81       	ldd	r24, Y+2	; 0x02
    4174:	e8 2f       	mov	r30, r24
    4176:	f0 e0       	ldi	r31, 0x00	; 0
    4178:	8a 81       	ldd	r24, Y+2	; 0x02
    417a:	88 2f       	mov	r24, r24
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	88 0f       	add	r24, r24
    4180:	99 1f       	adc	r25, r25
    4182:	88 0f       	add	r24, r24
    4184:	99 1f       	adc	r25, r25
    4186:	86 0f       	add	r24, r22
    4188:	97 1f       	adc	r25, r23
    418a:	8f 96       	adiw	r24, 0x2f	; 47
    418c:	dc 01       	movw	r26, r24
    418e:	2d 91       	ld	r18, X+
    4190:	3d 91       	ld	r19, X+
    4192:	4d 91       	ld	r20, X+
    4194:	5c 91       	ld	r21, X
    4196:	8f 81       	ldd	r24, Y+7	; 0x07
    4198:	98 85       	ldd	r25, Y+8	; 0x08
    419a:	a9 85       	ldd	r26, Y+9	; 0x09
    419c:	ba 85       	ldd	r27, Y+10	; 0x0a
    419e:	80 95       	com	r24
    41a0:	90 95       	com	r25
    41a2:	a0 95       	com	r26
    41a4:	b0 95       	com	r27
    41a6:	82 23       	and	r24, r18
    41a8:	93 23       	and	r25, r19
    41aa:	a4 23       	and	r26, r20
    41ac:	b5 23       	and	r27, r21
    41ae:	9f 01       	movw	r18, r30
    41b0:	22 0f       	add	r18, r18
    41b2:	33 1f       	adc	r19, r19
    41b4:	22 0f       	add	r18, r18
    41b6:	33 1f       	adc	r19, r19
    41b8:	26 0f       	add	r18, r22
    41ba:	37 1f       	adc	r19, r23
    41bc:	21 5d       	subi	r18, 0xD1	; 209
    41be:	3f 4f       	sbci	r19, 0xFF	; 255
    41c0:	f9 01       	movw	r30, r18
    41c2:	80 83       	st	Z, r24
    41c4:	91 83       	std	Z+1, r25	; 0x01
    41c6:	a2 83       	std	Z+2, r26	; 0x02
    41c8:	b3 83       	std	Z+3, r27	; 0x03
    41ca:	81 e0       	ldi	r24, 0x01	; 1
    41cc:	89 83       	std	Y+1, r24	; 0x01
    41ce:	20 91 0a 11 	lds	r18, 0x110A	; 0x80110a <pxCurrentTCB>
    41d2:	30 91 0b 11 	lds	r19, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    41d6:	8a 81       	ldd	r24, Y+2	; 0x02
    41d8:	88 2f       	mov	r24, r24
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	82 0f       	add	r24, r18
    41de:	93 1f       	adc	r25, r19
    41e0:	c3 96       	adiw	r24, 0x33	; 51
    41e2:	dc 01       	movw	r26, r24
    41e4:	1c 92       	st	X, r1
    41e6:	0f 90       	pop	r0
    41e8:	0f be       	out	0x3f, r0	; 63
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	60 96       	adiw	r28, 0x10	; 16
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	f8 94       	cli
    41f2:	de bf       	out	0x3e, r29	; 62
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	df 91       	pop	r29
    41fa:	cf 91       	pop	r28
    41fc:	1f 91       	pop	r17
    41fe:	0f 91       	pop	r16
    4200:	ff 90       	pop	r15
    4202:	ef 90       	pop	r14
    4204:	df 90       	pop	r13
    4206:	cf 90       	pop	r12
    4208:	bf 90       	pop	r11
    420a:	af 90       	pop	r10
    420c:	08 95       	ret

0000420e <xTaskGenericNotify>:
    420e:	ef 92       	push	r14
    4210:	ff 92       	push	r15
    4212:	0f 93       	push	r16
    4214:	cf 93       	push	r28
    4216:	df 93       	push	r29
    4218:	cd b7       	in	r28, 0x3d	; 61
    421a:	de b7       	in	r29, 0x3e	; 62
    421c:	62 97       	sbiw	r28, 0x12	; 18
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	f8 94       	cli
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	9a 87       	std	Y+10, r25	; 0x0a
    422a:	89 87       	std	Y+9, r24	; 0x09
    422c:	6b 87       	std	Y+11, r22	; 0x0b
    422e:	2c 87       	std	Y+12, r18	; 0x0c
    4230:	3d 87       	std	Y+13, r19	; 0x0d
    4232:	4e 87       	std	Y+14, r20	; 0x0e
    4234:	5f 87       	std	Y+15, r21	; 0x0f
    4236:	08 8b       	std	Y+16, r16	; 0x10
    4238:	fa 8a       	std	Y+18, r15	; 0x12
    423a:	e9 8a       	std	Y+17, r14	; 0x11
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	89 83       	std	Y+1, r24	; 0x01
    4240:	89 85       	ldd	r24, Y+9	; 0x09
    4242:	9a 85       	ldd	r25, Y+10	; 0x0a
    4244:	9b 83       	std	Y+3, r25	; 0x03
    4246:	8a 83       	std	Y+2, r24	; 0x02
    4248:	0f b6       	in	r0, 0x3f	; 63
    424a:	f8 94       	cli
    424c:	0f 92       	push	r0
    424e:	89 89       	ldd	r24, Y+17	; 0x11
    4250:	9a 89       	ldd	r25, Y+18	; 0x12
    4252:	89 2b       	or	r24, r25
    4254:	c1 f0       	breq	.+48     	; 0x4286 <xTaskGenericNotify+0x78>
    4256:	8b 85       	ldd	r24, Y+11	; 0x0b
    4258:	88 2f       	mov	r24, r24
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	2a 81       	ldd	r18, Y+2	; 0x02
    425e:	3b 81       	ldd	r19, Y+3	; 0x03
    4260:	88 0f       	add	r24, r24
    4262:	99 1f       	adc	r25, r25
    4264:	88 0f       	add	r24, r24
    4266:	99 1f       	adc	r25, r25
    4268:	82 0f       	add	r24, r18
    426a:	93 1f       	adc	r25, r19
    426c:	8f 96       	adiw	r24, 0x2f	; 47
    426e:	fc 01       	movw	r30, r24
    4270:	80 81       	ld	r24, Z
    4272:	91 81       	ldd	r25, Z+1	; 0x01
    4274:	a2 81       	ldd	r26, Z+2	; 0x02
    4276:	b3 81       	ldd	r27, Z+3	; 0x03
    4278:	29 89       	ldd	r18, Y+17	; 0x11
    427a:	3a 89       	ldd	r19, Y+18	; 0x12
    427c:	f9 01       	movw	r30, r18
    427e:	80 83       	st	Z, r24
    4280:	91 83       	std	Z+1, r25	; 0x01
    4282:	a2 83       	std	Z+2, r26	; 0x02
    4284:	b3 83       	std	Z+3, r27	; 0x03
    4286:	8b 85       	ldd	r24, Y+11	; 0x0b
    4288:	88 2f       	mov	r24, r24
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	2a 81       	ldd	r18, Y+2	; 0x02
    428e:	3b 81       	ldd	r19, Y+3	; 0x03
    4290:	82 0f       	add	r24, r18
    4292:	93 1f       	adc	r25, r19
    4294:	c3 96       	adiw	r24, 0x33	; 51
    4296:	fc 01       	movw	r30, r24
    4298:	80 81       	ld	r24, Z
    429a:	8c 83       	std	Y+4, r24	; 0x04
    429c:	8b 85       	ldd	r24, Y+11	; 0x0b
    429e:	88 2f       	mov	r24, r24
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	2a 81       	ldd	r18, Y+2	; 0x02
    42a4:	3b 81       	ldd	r19, Y+3	; 0x03
    42a6:	82 0f       	add	r24, r18
    42a8:	93 1f       	adc	r25, r19
    42aa:	c3 96       	adiw	r24, 0x33	; 51
    42ac:	22 e0       	ldi	r18, 0x02	; 2
    42ae:	fc 01       	movw	r30, r24
    42b0:	20 83       	st	Z, r18
    42b2:	88 89       	ldd	r24, Y+16	; 0x10
    42b4:	88 2f       	mov	r24, r24
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	82 30       	cpi	r24, 0x02	; 2
    42ba:	91 05       	cpc	r25, r1
    42bc:	09 f4       	brne	.+2      	; 0x42c0 <xTaskGenericNotify+0xb2>
    42be:	3e c0       	rjmp	.+124    	; 0x433c <xTaskGenericNotify+0x12e>
    42c0:	83 30       	cpi	r24, 0x03	; 3
    42c2:	91 05       	cpc	r25, r1
    42c4:	34 f4       	brge	.+12     	; 0x42d2 <xTaskGenericNotify+0xc4>
    42c6:	00 97       	sbiw	r24, 0x00	; 0
    42c8:	09 f4       	brne	.+2      	; 0x42cc <xTaskGenericNotify+0xbe>
    42ca:	92 c0       	rjmp	.+292    	; 0x43f0 <xTaskGenericNotify+0x1e2>
    42cc:	01 97       	sbiw	r24, 0x01	; 1
    42ce:	49 f0       	breq	.+18     	; 0x42e2 <xTaskGenericNotify+0xd4>
    42d0:	90 c0       	rjmp	.+288    	; 0x43f2 <xTaskGenericNotify+0x1e4>
    42d2:	83 30       	cpi	r24, 0x03	; 3
    42d4:	91 05       	cpc	r25, r1
    42d6:	09 f4       	brne	.+2      	; 0x42da <xTaskGenericNotify+0xcc>
    42d8:	56 c0       	rjmp	.+172    	; 0x4386 <xTaskGenericNotify+0x178>
    42da:	04 97       	sbiw	r24, 0x04	; 4
    42dc:	09 f4       	brne	.+2      	; 0x42e0 <xTaskGenericNotify+0xd2>
    42de:	6b c0       	rjmp	.+214    	; 0x43b6 <xTaskGenericNotify+0x1a8>
    42e0:	88 c0       	rjmp	.+272    	; 0x43f2 <xTaskGenericNotify+0x1e4>
    42e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    42e4:	68 2f       	mov	r22, r24
    42e6:	70 e0       	ldi	r23, 0x00	; 0
    42e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    42ea:	88 2f       	mov	r24, r24
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	2a 81       	ldd	r18, Y+2	; 0x02
    42f0:	3b 81       	ldd	r19, Y+3	; 0x03
    42f2:	88 0f       	add	r24, r24
    42f4:	99 1f       	adc	r25, r25
    42f6:	88 0f       	add	r24, r24
    42f8:	99 1f       	adc	r25, r25
    42fa:	82 0f       	add	r24, r18
    42fc:	93 1f       	adc	r25, r19
    42fe:	8f 96       	adiw	r24, 0x2f	; 47
    4300:	fc 01       	movw	r30, r24
    4302:	20 81       	ld	r18, Z
    4304:	31 81       	ldd	r19, Z+1	; 0x01
    4306:	42 81       	ldd	r20, Z+2	; 0x02
    4308:	53 81       	ldd	r21, Z+3	; 0x03
    430a:	8c 85       	ldd	r24, Y+12	; 0x0c
    430c:	9d 85       	ldd	r25, Y+13	; 0x0d
    430e:	ae 85       	ldd	r26, Y+14	; 0x0e
    4310:	bf 85       	ldd	r27, Y+15	; 0x0f
    4312:	82 2b       	or	r24, r18
    4314:	93 2b       	or	r25, r19
    4316:	a4 2b       	or	r26, r20
    4318:	b5 2b       	or	r27, r21
    431a:	4a 81       	ldd	r20, Y+2	; 0x02
    431c:	5b 81       	ldd	r21, Y+3	; 0x03
    431e:	9b 01       	movw	r18, r22
    4320:	22 0f       	add	r18, r18
    4322:	33 1f       	adc	r19, r19
    4324:	22 0f       	add	r18, r18
    4326:	33 1f       	adc	r19, r19
    4328:	24 0f       	add	r18, r20
    432a:	35 1f       	adc	r19, r21
    432c:	21 5d       	subi	r18, 0xD1	; 209
    432e:	3f 4f       	sbci	r19, 0xFF	; 255
    4330:	f9 01       	movw	r30, r18
    4332:	80 83       	st	Z, r24
    4334:	91 83       	std	Z+1, r25	; 0x01
    4336:	a2 83       	std	Z+2, r26	; 0x02
    4338:	b3 83       	std	Z+3, r27	; 0x03
    433a:	5b c0       	rjmp	.+182    	; 0x43f2 <xTaskGenericNotify+0x1e4>
    433c:	8b 85       	ldd	r24, Y+11	; 0x0b
    433e:	28 2f       	mov	r18, r24
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	4a 81       	ldd	r20, Y+2	; 0x02
    4344:	5b 81       	ldd	r21, Y+3	; 0x03
    4346:	c9 01       	movw	r24, r18
    4348:	88 0f       	add	r24, r24
    434a:	99 1f       	adc	r25, r25
    434c:	88 0f       	add	r24, r24
    434e:	99 1f       	adc	r25, r25
    4350:	84 0f       	add	r24, r20
    4352:	95 1f       	adc	r25, r21
    4354:	8f 96       	adiw	r24, 0x2f	; 47
    4356:	fc 01       	movw	r30, r24
    4358:	80 81       	ld	r24, Z
    435a:	91 81       	ldd	r25, Z+1	; 0x01
    435c:	a2 81       	ldd	r26, Z+2	; 0x02
    435e:	b3 81       	ldd	r27, Z+3	; 0x03
    4360:	01 96       	adiw	r24, 0x01	; 1
    4362:	a1 1d       	adc	r26, r1
    4364:	b1 1d       	adc	r27, r1
    4366:	4a 81       	ldd	r20, Y+2	; 0x02
    4368:	5b 81       	ldd	r21, Y+3	; 0x03
    436a:	22 0f       	add	r18, r18
    436c:	33 1f       	adc	r19, r19
    436e:	22 0f       	add	r18, r18
    4370:	33 1f       	adc	r19, r19
    4372:	24 0f       	add	r18, r20
    4374:	35 1f       	adc	r19, r21
    4376:	21 5d       	subi	r18, 0xD1	; 209
    4378:	3f 4f       	sbci	r19, 0xFF	; 255
    437a:	f9 01       	movw	r30, r18
    437c:	80 83       	st	Z, r24
    437e:	91 83       	std	Z+1, r25	; 0x01
    4380:	a2 83       	std	Z+2, r26	; 0x02
    4382:	b3 83       	std	Z+3, r27	; 0x03
    4384:	36 c0       	rjmp	.+108    	; 0x43f2 <xTaskGenericNotify+0x1e4>
    4386:	8b 85       	ldd	r24, Y+11	; 0x0b
    4388:	88 2f       	mov	r24, r24
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	2a 81       	ldd	r18, Y+2	; 0x02
    438e:	3b 81       	ldd	r19, Y+3	; 0x03
    4390:	88 0f       	add	r24, r24
    4392:	99 1f       	adc	r25, r25
    4394:	88 0f       	add	r24, r24
    4396:	99 1f       	adc	r25, r25
    4398:	82 0f       	add	r24, r18
    439a:	93 1f       	adc	r25, r19
    439c:	9c 01       	movw	r18, r24
    439e:	21 5d       	subi	r18, 0xD1	; 209
    43a0:	3f 4f       	sbci	r19, 0xFF	; 255
    43a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    43a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    43a6:	ae 85       	ldd	r26, Y+14	; 0x0e
    43a8:	bf 85       	ldd	r27, Y+15	; 0x0f
    43aa:	f9 01       	movw	r30, r18
    43ac:	80 83       	st	Z, r24
    43ae:	91 83       	std	Z+1, r25	; 0x01
    43b0:	a2 83       	std	Z+2, r26	; 0x02
    43b2:	b3 83       	std	Z+3, r27	; 0x03
    43b4:	1e c0       	rjmp	.+60     	; 0x43f2 <xTaskGenericNotify+0x1e4>
    43b6:	8c 81       	ldd	r24, Y+4	; 0x04
    43b8:	82 30       	cpi	r24, 0x02	; 2
    43ba:	c1 f0       	breq	.+48     	; 0x43ec <xTaskGenericNotify+0x1de>
    43bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    43be:	88 2f       	mov	r24, r24
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	2a 81       	ldd	r18, Y+2	; 0x02
    43c4:	3b 81       	ldd	r19, Y+3	; 0x03
    43c6:	88 0f       	add	r24, r24
    43c8:	99 1f       	adc	r25, r25
    43ca:	88 0f       	add	r24, r24
    43cc:	99 1f       	adc	r25, r25
    43ce:	82 0f       	add	r24, r18
    43d0:	93 1f       	adc	r25, r19
    43d2:	9c 01       	movw	r18, r24
    43d4:	21 5d       	subi	r18, 0xD1	; 209
    43d6:	3f 4f       	sbci	r19, 0xFF	; 255
    43d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    43da:	9d 85       	ldd	r25, Y+13	; 0x0d
    43dc:	ae 85       	ldd	r26, Y+14	; 0x0e
    43de:	bf 85       	ldd	r27, Y+15	; 0x0f
    43e0:	f9 01       	movw	r30, r18
    43e2:	80 83       	st	Z, r24
    43e4:	91 83       	std	Z+1, r25	; 0x01
    43e6:	a2 83       	std	Z+2, r26	; 0x02
    43e8:	b3 83       	std	Z+3, r27	; 0x03
    43ea:	03 c0       	rjmp	.+6      	; 0x43f2 <xTaskGenericNotify+0x1e4>
    43ec:	19 82       	std	Y+1, r1	; 0x01
    43ee:	01 c0       	rjmp	.+2      	; 0x43f2 <xTaskGenericNotify+0x1e4>
    43f0:	00 00       	nop
    43f2:	8c 81       	ldd	r24, Y+4	; 0x04
    43f4:	81 30       	cpi	r24, 0x01	; 1
    43f6:	09 f0       	breq	.+2      	; 0x43fa <xTaskGenericNotify+0x1ec>
    43f8:	cc c0       	rjmp	.+408    	; 0x4592 <xTaskGenericNotify+0x384>
    43fa:	8a 81       	ldd	r24, Y+2	; 0x02
    43fc:	9b 81       	ldd	r25, Y+3	; 0x03
    43fe:	fc 01       	movw	r30, r24
    4400:	84 85       	ldd	r24, Z+12	; 0x0c
    4402:	95 85       	ldd	r25, Z+13	; 0x0d
    4404:	9e 83       	std	Y+6, r25	; 0x06
    4406:	8d 83       	std	Y+5, r24	; 0x05
    4408:	8a 81       	ldd	r24, Y+2	; 0x02
    440a:	9b 81       	ldd	r25, Y+3	; 0x03
    440c:	fc 01       	movw	r30, r24
    440e:	86 81       	ldd	r24, Z+6	; 0x06
    4410:	97 81       	ldd	r25, Z+7	; 0x07
    4412:	2a 81       	ldd	r18, Y+2	; 0x02
    4414:	3b 81       	ldd	r19, Y+3	; 0x03
    4416:	f9 01       	movw	r30, r18
    4418:	20 85       	ldd	r18, Z+8	; 0x08
    441a:	31 85       	ldd	r19, Z+9	; 0x09
    441c:	fc 01       	movw	r30, r24
    441e:	37 83       	std	Z+7, r19	; 0x07
    4420:	26 83       	std	Z+6, r18	; 0x06
    4422:	8a 81       	ldd	r24, Y+2	; 0x02
    4424:	9b 81       	ldd	r25, Y+3	; 0x03
    4426:	fc 01       	movw	r30, r24
    4428:	80 85       	ldd	r24, Z+8	; 0x08
    442a:	91 85       	ldd	r25, Z+9	; 0x09
    442c:	2a 81       	ldd	r18, Y+2	; 0x02
    442e:	3b 81       	ldd	r19, Y+3	; 0x03
    4430:	f9 01       	movw	r30, r18
    4432:	26 81       	ldd	r18, Z+6	; 0x06
    4434:	37 81       	ldd	r19, Z+7	; 0x07
    4436:	fc 01       	movw	r30, r24
    4438:	35 83       	std	Z+5, r19	; 0x05
    443a:	24 83       	std	Z+4, r18	; 0x04
    443c:	8d 81       	ldd	r24, Y+5	; 0x05
    443e:	9e 81       	ldd	r25, Y+6	; 0x06
    4440:	fc 01       	movw	r30, r24
    4442:	21 81       	ldd	r18, Z+1	; 0x01
    4444:	32 81       	ldd	r19, Z+2	; 0x02
    4446:	8a 81       	ldd	r24, Y+2	; 0x02
    4448:	9b 81       	ldd	r25, Y+3	; 0x03
    444a:	02 96       	adiw	r24, 0x02	; 2
    444c:	28 17       	cp	r18, r24
    444e:	39 07       	cpc	r19, r25
    4450:	51 f4       	brne	.+20     	; 0x4466 <xTaskGenericNotify+0x258>
    4452:	8a 81       	ldd	r24, Y+2	; 0x02
    4454:	9b 81       	ldd	r25, Y+3	; 0x03
    4456:	fc 01       	movw	r30, r24
    4458:	20 85       	ldd	r18, Z+8	; 0x08
    445a:	31 85       	ldd	r19, Z+9	; 0x09
    445c:	8d 81       	ldd	r24, Y+5	; 0x05
    445e:	9e 81       	ldd	r25, Y+6	; 0x06
    4460:	fc 01       	movw	r30, r24
    4462:	32 83       	std	Z+2, r19	; 0x02
    4464:	21 83       	std	Z+1, r18	; 0x01
    4466:	8a 81       	ldd	r24, Y+2	; 0x02
    4468:	9b 81       	ldd	r25, Y+3	; 0x03
    446a:	fc 01       	movw	r30, r24
    446c:	15 86       	std	Z+13, r1	; 0x0d
    446e:	14 86       	std	Z+12, r1	; 0x0c
    4470:	8d 81       	ldd	r24, Y+5	; 0x05
    4472:	9e 81       	ldd	r25, Y+6	; 0x06
    4474:	fc 01       	movw	r30, r24
    4476:	80 81       	ld	r24, Z
    4478:	2f ef       	ldi	r18, 0xFF	; 255
    447a:	28 0f       	add	r18, r24
    447c:	8d 81       	ldd	r24, Y+5	; 0x05
    447e:	9e 81       	ldd	r25, Y+6	; 0x06
    4480:	fc 01       	movw	r30, r24
    4482:	20 83       	st	Z, r18
    4484:	8a 81       	ldd	r24, Y+2	; 0x02
    4486:	9b 81       	ldd	r25, Y+3	; 0x03
    4488:	fc 01       	movw	r30, r24
    448a:	92 8d       	ldd	r25, Z+26	; 0x1a
    448c:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <uxTopReadyPriority>
    4490:	89 17       	cp	r24, r25
    4492:	30 f4       	brcc	.+12     	; 0x44a0 <xTaskGenericNotify+0x292>
    4494:	8a 81       	ldd	r24, Y+2	; 0x02
    4496:	9b 81       	ldd	r25, Y+3	; 0x03
    4498:	fc 01       	movw	r30, r24
    449a:	82 8d       	ldd	r24, Z+26	; 0x1a
    449c:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <uxTopReadyPriority>
    44a0:	8a 81       	ldd	r24, Y+2	; 0x02
    44a2:	9b 81       	ldd	r25, Y+3	; 0x03
    44a4:	fc 01       	movw	r30, r24
    44a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    44a8:	28 2f       	mov	r18, r24
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	4b e0       	ldi	r20, 0x0B	; 11
    44ae:	42 9f       	mul	r20, r18
    44b0:	c0 01       	movw	r24, r0
    44b2:	43 9f       	mul	r20, r19
    44b4:	90 0d       	add	r25, r0
    44b6:	11 24       	eor	r1, r1
    44b8:	83 5f       	subi	r24, 0xF3	; 243
    44ba:	9e 4e       	sbci	r25, 0xEE	; 238
    44bc:	fc 01       	movw	r30, r24
    44be:	80 81       	ld	r24, Z
    44c0:	91 81       	ldd	r25, Z+1	; 0x01
    44c2:	98 87       	std	Y+8, r25	; 0x08
    44c4:	8f 83       	std	Y+7, r24	; 0x07
    44c6:	8a 81       	ldd	r24, Y+2	; 0x02
    44c8:	9b 81       	ldd	r25, Y+3	; 0x03
    44ca:	2f 81       	ldd	r18, Y+7	; 0x07
    44cc:	38 85       	ldd	r19, Y+8	; 0x08
    44ce:	fc 01       	movw	r30, r24
    44d0:	37 83       	std	Z+7, r19	; 0x07
    44d2:	26 83       	std	Z+6, r18	; 0x06
    44d4:	8f 81       	ldd	r24, Y+7	; 0x07
    44d6:	98 85       	ldd	r25, Y+8	; 0x08
    44d8:	fc 01       	movw	r30, r24
    44da:	26 81       	ldd	r18, Z+6	; 0x06
    44dc:	37 81       	ldd	r19, Z+7	; 0x07
    44de:	8a 81       	ldd	r24, Y+2	; 0x02
    44e0:	9b 81       	ldd	r25, Y+3	; 0x03
    44e2:	fc 01       	movw	r30, r24
    44e4:	31 87       	std	Z+9, r19	; 0x09
    44e6:	20 87       	std	Z+8, r18	; 0x08
    44e8:	8f 81       	ldd	r24, Y+7	; 0x07
    44ea:	98 85       	ldd	r25, Y+8	; 0x08
    44ec:	fc 01       	movw	r30, r24
    44ee:	86 81       	ldd	r24, Z+6	; 0x06
    44f0:	97 81       	ldd	r25, Z+7	; 0x07
    44f2:	2a 81       	ldd	r18, Y+2	; 0x02
    44f4:	3b 81       	ldd	r19, Y+3	; 0x03
    44f6:	2e 5f       	subi	r18, 0xFE	; 254
    44f8:	3f 4f       	sbci	r19, 0xFF	; 255
    44fa:	fc 01       	movw	r30, r24
    44fc:	35 83       	std	Z+5, r19	; 0x05
    44fe:	24 83       	std	Z+4, r18	; 0x04
    4500:	8a 81       	ldd	r24, Y+2	; 0x02
    4502:	9b 81       	ldd	r25, Y+3	; 0x03
    4504:	9c 01       	movw	r18, r24
    4506:	2e 5f       	subi	r18, 0xFE	; 254
    4508:	3f 4f       	sbci	r19, 0xFF	; 255
    450a:	8f 81       	ldd	r24, Y+7	; 0x07
    450c:	98 85       	ldd	r25, Y+8	; 0x08
    450e:	fc 01       	movw	r30, r24
    4510:	37 83       	std	Z+7, r19	; 0x07
    4512:	26 83       	std	Z+6, r18	; 0x06
    4514:	8a 81       	ldd	r24, Y+2	; 0x02
    4516:	9b 81       	ldd	r25, Y+3	; 0x03
    4518:	fc 01       	movw	r30, r24
    451a:	82 8d       	ldd	r24, Z+26	; 0x1a
    451c:	28 2f       	mov	r18, r24
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	4b e0       	ldi	r20, 0x0B	; 11
    4522:	42 9f       	mul	r20, r18
    4524:	c0 01       	movw	r24, r0
    4526:	43 9f       	mul	r20, r19
    4528:	90 0d       	add	r25, r0
    452a:	11 24       	eor	r1, r1
    452c:	9c 01       	movw	r18, r24
    452e:	24 5f       	subi	r18, 0xF4	; 244
    4530:	3e 4e       	sbci	r19, 0xEE	; 238
    4532:	8a 81       	ldd	r24, Y+2	; 0x02
    4534:	9b 81       	ldd	r25, Y+3	; 0x03
    4536:	fc 01       	movw	r30, r24
    4538:	35 87       	std	Z+13, r19	; 0x0d
    453a:	24 87       	std	Z+12, r18	; 0x0c
    453c:	8a 81       	ldd	r24, Y+2	; 0x02
    453e:	9b 81       	ldd	r25, Y+3	; 0x03
    4540:	fc 01       	movw	r30, r24
    4542:	82 8d       	ldd	r24, Z+26	; 0x1a
    4544:	88 2f       	mov	r24, r24
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	4b e0       	ldi	r20, 0x0B	; 11
    454a:	48 9f       	mul	r20, r24
    454c:	90 01       	movw	r18, r0
    454e:	49 9f       	mul	r20, r25
    4550:	30 0d       	add	r19, r0
    4552:	11 24       	eor	r1, r1
    4554:	24 5f       	subi	r18, 0xF4	; 244
    4556:	3e 4e       	sbci	r19, 0xEE	; 238
    4558:	f9 01       	movw	r30, r18
    455a:	20 81       	ld	r18, Z
    455c:	41 e0       	ldi	r20, 0x01	; 1
    455e:	42 0f       	add	r20, r18
    4560:	5b e0       	ldi	r21, 0x0B	; 11
    4562:	58 9f       	mul	r21, r24
    4564:	90 01       	movw	r18, r0
    4566:	59 9f       	mul	r21, r25
    4568:	30 0d       	add	r19, r0
    456a:	11 24       	eor	r1, r1
    456c:	c9 01       	movw	r24, r18
    456e:	84 5f       	subi	r24, 0xF4	; 244
    4570:	9e 4e       	sbci	r25, 0xEE	; 238
    4572:	fc 01       	movw	r30, r24
    4574:	40 83       	st	Z, r20
    4576:	8a 81       	ldd	r24, Y+2	; 0x02
    4578:	9b 81       	ldd	r25, Y+3	; 0x03
    457a:	fc 01       	movw	r30, r24
    457c:	22 8d       	ldd	r18, Z+26	; 0x1a
    457e:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    4582:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4586:	fc 01       	movw	r30, r24
    4588:	82 8d       	ldd	r24, Z+26	; 0x1a
    458a:	82 17       	cp	r24, r18
    458c:	10 f4       	brcc	.+4      	; 0x4592 <xTaskGenericNotify+0x384>
    458e:	0e 94 8b 07 	call	0xf16	; 0xf16 <vPortYield>
    4592:	0f 90       	pop	r0
    4594:	0f be       	out	0x3f, r0	; 63
    4596:	89 81       	ldd	r24, Y+1	; 0x01
    4598:	62 96       	adiw	r28, 0x12	; 18
    459a:	0f b6       	in	r0, 0x3f	; 63
    459c:	f8 94       	cli
    459e:	de bf       	out	0x3e, r29	; 62
    45a0:	0f be       	out	0x3f, r0	; 63
    45a2:	cd bf       	out	0x3d, r28	; 61
    45a4:	df 91       	pop	r29
    45a6:	cf 91       	pop	r28
    45a8:	0f 91       	pop	r16
    45aa:	ff 90       	pop	r15
    45ac:	ef 90       	pop	r14
    45ae:	08 95       	ret

000045b0 <xTaskGenericNotifyFromISR>:
    45b0:	cf 92       	push	r12
    45b2:	df 92       	push	r13
    45b4:	ef 92       	push	r14
    45b6:	ff 92       	push	r15
    45b8:	0f 93       	push	r16
    45ba:	cf 93       	push	r28
    45bc:	df 93       	push	r29
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	67 97       	sbiw	r28, 0x17	; 23
    45c4:	0f b6       	in	r0, 0x3f	; 63
    45c6:	f8 94       	cli
    45c8:	de bf       	out	0x3e, r29	; 62
    45ca:	0f be       	out	0x3f, r0	; 63
    45cc:	cd bf       	out	0x3d, r28	; 61
    45ce:	9d 87       	std	Y+13, r25	; 0x0d
    45d0:	8c 87       	std	Y+12, r24	; 0x0c
    45d2:	6e 87       	std	Y+14, r22	; 0x0e
    45d4:	2f 87       	std	Y+15, r18	; 0x0f
    45d6:	38 8b       	std	Y+16, r19	; 0x10
    45d8:	49 8b       	std	Y+17, r20	; 0x11
    45da:	5a 8b       	std	Y+18, r21	; 0x12
    45dc:	0b 8b       	std	Y+19, r16	; 0x13
    45de:	fd 8a       	std	Y+21, r15	; 0x15
    45e0:	ec 8a       	std	Y+20, r14	; 0x14
    45e2:	df 8a       	std	Y+23, r13	; 0x17
    45e4:	ce 8a       	std	Y+22, r12	; 0x16
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	89 83       	std	Y+1, r24	; 0x01
    45ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    45ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    45ee:	9b 83       	std	Y+3, r25	; 0x03
    45f0:	8a 83       	std	Y+2, r24	; 0x02
    45f2:	1c 82       	std	Y+4, r1	; 0x04
    45f4:	8c 89       	ldd	r24, Y+20	; 0x14
    45f6:	9d 89       	ldd	r25, Y+21	; 0x15
    45f8:	89 2b       	or	r24, r25
    45fa:	c1 f0       	breq	.+48     	; 0x462c <xTaskGenericNotifyFromISR+0x7c>
    45fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    45fe:	88 2f       	mov	r24, r24
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	2a 81       	ldd	r18, Y+2	; 0x02
    4604:	3b 81       	ldd	r19, Y+3	; 0x03
    4606:	88 0f       	add	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	88 0f       	add	r24, r24
    460c:	99 1f       	adc	r25, r25
    460e:	82 0f       	add	r24, r18
    4610:	93 1f       	adc	r25, r19
    4612:	8f 96       	adiw	r24, 0x2f	; 47
    4614:	fc 01       	movw	r30, r24
    4616:	80 81       	ld	r24, Z
    4618:	91 81       	ldd	r25, Z+1	; 0x01
    461a:	a2 81       	ldd	r26, Z+2	; 0x02
    461c:	b3 81       	ldd	r27, Z+3	; 0x03
    461e:	2c 89       	ldd	r18, Y+20	; 0x14
    4620:	3d 89       	ldd	r19, Y+21	; 0x15
    4622:	f9 01       	movw	r30, r18
    4624:	80 83       	st	Z, r24
    4626:	91 83       	std	Z+1, r25	; 0x01
    4628:	a2 83       	std	Z+2, r26	; 0x02
    462a:	b3 83       	std	Z+3, r27	; 0x03
    462c:	8e 85       	ldd	r24, Y+14	; 0x0e
    462e:	88 2f       	mov	r24, r24
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	2a 81       	ldd	r18, Y+2	; 0x02
    4634:	3b 81       	ldd	r19, Y+3	; 0x03
    4636:	82 0f       	add	r24, r18
    4638:	93 1f       	adc	r25, r19
    463a:	c3 96       	adiw	r24, 0x33	; 51
    463c:	fc 01       	movw	r30, r24
    463e:	80 81       	ld	r24, Z
    4640:	8d 83       	std	Y+5, r24	; 0x05
    4642:	8e 85       	ldd	r24, Y+14	; 0x0e
    4644:	88 2f       	mov	r24, r24
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	2a 81       	ldd	r18, Y+2	; 0x02
    464a:	3b 81       	ldd	r19, Y+3	; 0x03
    464c:	82 0f       	add	r24, r18
    464e:	93 1f       	adc	r25, r19
    4650:	c3 96       	adiw	r24, 0x33	; 51
    4652:	22 e0       	ldi	r18, 0x02	; 2
    4654:	fc 01       	movw	r30, r24
    4656:	20 83       	st	Z, r18
    4658:	8b 89       	ldd	r24, Y+19	; 0x13
    465a:	88 2f       	mov	r24, r24
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	82 30       	cpi	r24, 0x02	; 2
    4660:	91 05       	cpc	r25, r1
    4662:	09 f4       	brne	.+2      	; 0x4666 <xTaskGenericNotifyFromISR+0xb6>
    4664:	3e c0       	rjmp	.+124    	; 0x46e2 <xTaskGenericNotifyFromISR+0x132>
    4666:	83 30       	cpi	r24, 0x03	; 3
    4668:	91 05       	cpc	r25, r1
    466a:	34 f4       	brge	.+12     	; 0x4678 <xTaskGenericNotifyFromISR+0xc8>
    466c:	00 97       	sbiw	r24, 0x00	; 0
    466e:	09 f4       	brne	.+2      	; 0x4672 <xTaskGenericNotifyFromISR+0xc2>
    4670:	92 c0       	rjmp	.+292    	; 0x4796 <xTaskGenericNotifyFromISR+0x1e6>
    4672:	01 97       	sbiw	r24, 0x01	; 1
    4674:	49 f0       	breq	.+18     	; 0x4688 <xTaskGenericNotifyFromISR+0xd8>
    4676:	90 c0       	rjmp	.+288    	; 0x4798 <xTaskGenericNotifyFromISR+0x1e8>
    4678:	83 30       	cpi	r24, 0x03	; 3
    467a:	91 05       	cpc	r25, r1
    467c:	09 f4       	brne	.+2      	; 0x4680 <xTaskGenericNotifyFromISR+0xd0>
    467e:	56 c0       	rjmp	.+172    	; 0x472c <xTaskGenericNotifyFromISR+0x17c>
    4680:	04 97       	sbiw	r24, 0x04	; 4
    4682:	09 f4       	brne	.+2      	; 0x4686 <xTaskGenericNotifyFromISR+0xd6>
    4684:	6b c0       	rjmp	.+214    	; 0x475c <xTaskGenericNotifyFromISR+0x1ac>
    4686:	88 c0       	rjmp	.+272    	; 0x4798 <xTaskGenericNotifyFromISR+0x1e8>
    4688:	8e 85       	ldd	r24, Y+14	; 0x0e
    468a:	68 2f       	mov	r22, r24
    468c:	70 e0       	ldi	r23, 0x00	; 0
    468e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4690:	88 2f       	mov	r24, r24
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	2a 81       	ldd	r18, Y+2	; 0x02
    4696:	3b 81       	ldd	r19, Y+3	; 0x03
    4698:	88 0f       	add	r24, r24
    469a:	99 1f       	adc	r25, r25
    469c:	88 0f       	add	r24, r24
    469e:	99 1f       	adc	r25, r25
    46a0:	82 0f       	add	r24, r18
    46a2:	93 1f       	adc	r25, r19
    46a4:	8f 96       	adiw	r24, 0x2f	; 47
    46a6:	fc 01       	movw	r30, r24
    46a8:	20 81       	ld	r18, Z
    46aa:	31 81       	ldd	r19, Z+1	; 0x01
    46ac:	42 81       	ldd	r20, Z+2	; 0x02
    46ae:	53 81       	ldd	r21, Z+3	; 0x03
    46b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    46b2:	98 89       	ldd	r25, Y+16	; 0x10
    46b4:	a9 89       	ldd	r26, Y+17	; 0x11
    46b6:	ba 89       	ldd	r27, Y+18	; 0x12
    46b8:	82 2b       	or	r24, r18
    46ba:	93 2b       	or	r25, r19
    46bc:	a4 2b       	or	r26, r20
    46be:	b5 2b       	or	r27, r21
    46c0:	4a 81       	ldd	r20, Y+2	; 0x02
    46c2:	5b 81       	ldd	r21, Y+3	; 0x03
    46c4:	9b 01       	movw	r18, r22
    46c6:	22 0f       	add	r18, r18
    46c8:	33 1f       	adc	r19, r19
    46ca:	22 0f       	add	r18, r18
    46cc:	33 1f       	adc	r19, r19
    46ce:	24 0f       	add	r18, r20
    46d0:	35 1f       	adc	r19, r21
    46d2:	21 5d       	subi	r18, 0xD1	; 209
    46d4:	3f 4f       	sbci	r19, 0xFF	; 255
    46d6:	f9 01       	movw	r30, r18
    46d8:	80 83       	st	Z, r24
    46da:	91 83       	std	Z+1, r25	; 0x01
    46dc:	a2 83       	std	Z+2, r26	; 0x02
    46de:	b3 83       	std	Z+3, r27	; 0x03
    46e0:	5b c0       	rjmp	.+182    	; 0x4798 <xTaskGenericNotifyFromISR+0x1e8>
    46e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    46e4:	28 2f       	mov	r18, r24
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	4a 81       	ldd	r20, Y+2	; 0x02
    46ea:	5b 81       	ldd	r21, Y+3	; 0x03
    46ec:	c9 01       	movw	r24, r18
    46ee:	88 0f       	add	r24, r24
    46f0:	99 1f       	adc	r25, r25
    46f2:	88 0f       	add	r24, r24
    46f4:	99 1f       	adc	r25, r25
    46f6:	84 0f       	add	r24, r20
    46f8:	95 1f       	adc	r25, r21
    46fa:	8f 96       	adiw	r24, 0x2f	; 47
    46fc:	fc 01       	movw	r30, r24
    46fe:	80 81       	ld	r24, Z
    4700:	91 81       	ldd	r25, Z+1	; 0x01
    4702:	a2 81       	ldd	r26, Z+2	; 0x02
    4704:	b3 81       	ldd	r27, Z+3	; 0x03
    4706:	01 96       	adiw	r24, 0x01	; 1
    4708:	a1 1d       	adc	r26, r1
    470a:	b1 1d       	adc	r27, r1
    470c:	4a 81       	ldd	r20, Y+2	; 0x02
    470e:	5b 81       	ldd	r21, Y+3	; 0x03
    4710:	22 0f       	add	r18, r18
    4712:	33 1f       	adc	r19, r19
    4714:	22 0f       	add	r18, r18
    4716:	33 1f       	adc	r19, r19
    4718:	24 0f       	add	r18, r20
    471a:	35 1f       	adc	r19, r21
    471c:	21 5d       	subi	r18, 0xD1	; 209
    471e:	3f 4f       	sbci	r19, 0xFF	; 255
    4720:	f9 01       	movw	r30, r18
    4722:	80 83       	st	Z, r24
    4724:	91 83       	std	Z+1, r25	; 0x01
    4726:	a2 83       	std	Z+2, r26	; 0x02
    4728:	b3 83       	std	Z+3, r27	; 0x03
    472a:	36 c0       	rjmp	.+108    	; 0x4798 <xTaskGenericNotifyFromISR+0x1e8>
    472c:	8e 85       	ldd	r24, Y+14	; 0x0e
    472e:	88 2f       	mov	r24, r24
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	2a 81       	ldd	r18, Y+2	; 0x02
    4734:	3b 81       	ldd	r19, Y+3	; 0x03
    4736:	88 0f       	add	r24, r24
    4738:	99 1f       	adc	r25, r25
    473a:	88 0f       	add	r24, r24
    473c:	99 1f       	adc	r25, r25
    473e:	82 0f       	add	r24, r18
    4740:	93 1f       	adc	r25, r19
    4742:	9c 01       	movw	r18, r24
    4744:	21 5d       	subi	r18, 0xD1	; 209
    4746:	3f 4f       	sbci	r19, 0xFF	; 255
    4748:	8f 85       	ldd	r24, Y+15	; 0x0f
    474a:	98 89       	ldd	r25, Y+16	; 0x10
    474c:	a9 89       	ldd	r26, Y+17	; 0x11
    474e:	ba 89       	ldd	r27, Y+18	; 0x12
    4750:	f9 01       	movw	r30, r18
    4752:	80 83       	st	Z, r24
    4754:	91 83       	std	Z+1, r25	; 0x01
    4756:	a2 83       	std	Z+2, r26	; 0x02
    4758:	b3 83       	std	Z+3, r27	; 0x03
    475a:	1e c0       	rjmp	.+60     	; 0x4798 <xTaskGenericNotifyFromISR+0x1e8>
    475c:	8d 81       	ldd	r24, Y+5	; 0x05
    475e:	82 30       	cpi	r24, 0x02	; 2
    4760:	c1 f0       	breq	.+48     	; 0x4792 <xTaskGenericNotifyFromISR+0x1e2>
    4762:	8e 85       	ldd	r24, Y+14	; 0x0e
    4764:	88 2f       	mov	r24, r24
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	2a 81       	ldd	r18, Y+2	; 0x02
    476a:	3b 81       	ldd	r19, Y+3	; 0x03
    476c:	88 0f       	add	r24, r24
    476e:	99 1f       	adc	r25, r25
    4770:	88 0f       	add	r24, r24
    4772:	99 1f       	adc	r25, r25
    4774:	82 0f       	add	r24, r18
    4776:	93 1f       	adc	r25, r19
    4778:	9c 01       	movw	r18, r24
    477a:	21 5d       	subi	r18, 0xD1	; 209
    477c:	3f 4f       	sbci	r19, 0xFF	; 255
    477e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4780:	98 89       	ldd	r25, Y+16	; 0x10
    4782:	a9 89       	ldd	r26, Y+17	; 0x11
    4784:	ba 89       	ldd	r27, Y+18	; 0x12
    4786:	f9 01       	movw	r30, r18
    4788:	80 83       	st	Z, r24
    478a:	91 83       	std	Z+1, r25	; 0x01
    478c:	a2 83       	std	Z+2, r26	; 0x02
    478e:	b3 83       	std	Z+3, r27	; 0x03
    4790:	03 c0       	rjmp	.+6      	; 0x4798 <xTaskGenericNotifyFromISR+0x1e8>
    4792:	19 82       	std	Y+1, r1	; 0x01
    4794:	01 c0       	rjmp	.+2      	; 0x4798 <xTaskGenericNotifyFromISR+0x1e8>
    4796:	00 00       	nop
    4798:	8d 81       	ldd	r24, Y+5	; 0x05
    479a:	81 30       	cpi	r24, 0x01	; 1
    479c:	09 f0       	breq	.+2      	; 0x47a0 <xTaskGenericNotifyFromISR+0x1f0>
    479e:	15 c1       	rjmp	.+554    	; 0x49ca <xTaskGenericNotifyFromISR+0x41a>
    47a0:	80 91 ca 11 	lds	r24, 0x11CA	; 0x8011ca <uxSchedulerSuspended>
    47a4:	88 23       	and	r24, r24
    47a6:	09 f0       	breq	.+2      	; 0x47aa <xTaskGenericNotifyFromISR+0x1fa>
    47a8:	bf c0       	rjmp	.+382    	; 0x4928 <xTaskGenericNotifyFromISR+0x378>
    47aa:	8a 81       	ldd	r24, Y+2	; 0x02
    47ac:	9b 81       	ldd	r25, Y+3	; 0x03
    47ae:	fc 01       	movw	r30, r24
    47b0:	84 85       	ldd	r24, Z+12	; 0x0c
    47b2:	95 85       	ldd	r25, Z+13	; 0x0d
    47b4:	9f 83       	std	Y+7, r25	; 0x07
    47b6:	8e 83       	std	Y+6, r24	; 0x06
    47b8:	8a 81       	ldd	r24, Y+2	; 0x02
    47ba:	9b 81       	ldd	r25, Y+3	; 0x03
    47bc:	fc 01       	movw	r30, r24
    47be:	86 81       	ldd	r24, Z+6	; 0x06
    47c0:	97 81       	ldd	r25, Z+7	; 0x07
    47c2:	2a 81       	ldd	r18, Y+2	; 0x02
    47c4:	3b 81       	ldd	r19, Y+3	; 0x03
    47c6:	f9 01       	movw	r30, r18
    47c8:	20 85       	ldd	r18, Z+8	; 0x08
    47ca:	31 85       	ldd	r19, Z+9	; 0x09
    47cc:	fc 01       	movw	r30, r24
    47ce:	37 83       	std	Z+7, r19	; 0x07
    47d0:	26 83       	std	Z+6, r18	; 0x06
    47d2:	8a 81       	ldd	r24, Y+2	; 0x02
    47d4:	9b 81       	ldd	r25, Y+3	; 0x03
    47d6:	fc 01       	movw	r30, r24
    47d8:	80 85       	ldd	r24, Z+8	; 0x08
    47da:	91 85       	ldd	r25, Z+9	; 0x09
    47dc:	2a 81       	ldd	r18, Y+2	; 0x02
    47de:	3b 81       	ldd	r19, Y+3	; 0x03
    47e0:	f9 01       	movw	r30, r18
    47e2:	26 81       	ldd	r18, Z+6	; 0x06
    47e4:	37 81       	ldd	r19, Z+7	; 0x07
    47e6:	fc 01       	movw	r30, r24
    47e8:	35 83       	std	Z+5, r19	; 0x05
    47ea:	24 83       	std	Z+4, r18	; 0x04
    47ec:	8e 81       	ldd	r24, Y+6	; 0x06
    47ee:	9f 81       	ldd	r25, Y+7	; 0x07
    47f0:	fc 01       	movw	r30, r24
    47f2:	21 81       	ldd	r18, Z+1	; 0x01
    47f4:	32 81       	ldd	r19, Z+2	; 0x02
    47f6:	8a 81       	ldd	r24, Y+2	; 0x02
    47f8:	9b 81       	ldd	r25, Y+3	; 0x03
    47fa:	02 96       	adiw	r24, 0x02	; 2
    47fc:	28 17       	cp	r18, r24
    47fe:	39 07       	cpc	r19, r25
    4800:	51 f4       	brne	.+20     	; 0x4816 <xTaskGenericNotifyFromISR+0x266>
    4802:	8a 81       	ldd	r24, Y+2	; 0x02
    4804:	9b 81       	ldd	r25, Y+3	; 0x03
    4806:	fc 01       	movw	r30, r24
    4808:	20 85       	ldd	r18, Z+8	; 0x08
    480a:	31 85       	ldd	r19, Z+9	; 0x09
    480c:	8e 81       	ldd	r24, Y+6	; 0x06
    480e:	9f 81       	ldd	r25, Y+7	; 0x07
    4810:	fc 01       	movw	r30, r24
    4812:	32 83       	std	Z+2, r19	; 0x02
    4814:	21 83       	std	Z+1, r18	; 0x01
    4816:	8a 81       	ldd	r24, Y+2	; 0x02
    4818:	9b 81       	ldd	r25, Y+3	; 0x03
    481a:	fc 01       	movw	r30, r24
    481c:	15 86       	std	Z+13, r1	; 0x0d
    481e:	14 86       	std	Z+12, r1	; 0x0c
    4820:	8e 81       	ldd	r24, Y+6	; 0x06
    4822:	9f 81       	ldd	r25, Y+7	; 0x07
    4824:	fc 01       	movw	r30, r24
    4826:	80 81       	ld	r24, Z
    4828:	2f ef       	ldi	r18, 0xFF	; 255
    482a:	28 0f       	add	r18, r24
    482c:	8e 81       	ldd	r24, Y+6	; 0x06
    482e:	9f 81       	ldd	r25, Y+7	; 0x07
    4830:	fc 01       	movw	r30, r24
    4832:	20 83       	st	Z, r18
    4834:	8a 81       	ldd	r24, Y+2	; 0x02
    4836:	9b 81       	ldd	r25, Y+3	; 0x03
    4838:	fc 01       	movw	r30, r24
    483a:	92 8d       	ldd	r25, Z+26	; 0x1a
    483c:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <uxTopReadyPriority>
    4840:	89 17       	cp	r24, r25
    4842:	30 f4       	brcc	.+12     	; 0x4850 <xTaskGenericNotifyFromISR+0x2a0>
    4844:	8a 81       	ldd	r24, Y+2	; 0x02
    4846:	9b 81       	ldd	r25, Y+3	; 0x03
    4848:	fc 01       	movw	r30, r24
    484a:	82 8d       	ldd	r24, Z+26	; 0x1a
    484c:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <uxTopReadyPriority>
    4850:	8a 81       	ldd	r24, Y+2	; 0x02
    4852:	9b 81       	ldd	r25, Y+3	; 0x03
    4854:	fc 01       	movw	r30, r24
    4856:	82 8d       	ldd	r24, Z+26	; 0x1a
    4858:	28 2f       	mov	r18, r24
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	4b e0       	ldi	r20, 0x0B	; 11
    485e:	42 9f       	mul	r20, r18
    4860:	c0 01       	movw	r24, r0
    4862:	43 9f       	mul	r20, r19
    4864:	90 0d       	add	r25, r0
    4866:	11 24       	eor	r1, r1
    4868:	83 5f       	subi	r24, 0xF3	; 243
    486a:	9e 4e       	sbci	r25, 0xEE	; 238
    486c:	fc 01       	movw	r30, r24
    486e:	80 81       	ld	r24, Z
    4870:	91 81       	ldd	r25, Z+1	; 0x01
    4872:	99 87       	std	Y+9, r25	; 0x09
    4874:	88 87       	std	Y+8, r24	; 0x08
    4876:	8a 81       	ldd	r24, Y+2	; 0x02
    4878:	9b 81       	ldd	r25, Y+3	; 0x03
    487a:	28 85       	ldd	r18, Y+8	; 0x08
    487c:	39 85       	ldd	r19, Y+9	; 0x09
    487e:	fc 01       	movw	r30, r24
    4880:	37 83       	std	Z+7, r19	; 0x07
    4882:	26 83       	std	Z+6, r18	; 0x06
    4884:	88 85       	ldd	r24, Y+8	; 0x08
    4886:	99 85       	ldd	r25, Y+9	; 0x09
    4888:	fc 01       	movw	r30, r24
    488a:	26 81       	ldd	r18, Z+6	; 0x06
    488c:	37 81       	ldd	r19, Z+7	; 0x07
    488e:	8a 81       	ldd	r24, Y+2	; 0x02
    4890:	9b 81       	ldd	r25, Y+3	; 0x03
    4892:	fc 01       	movw	r30, r24
    4894:	31 87       	std	Z+9, r19	; 0x09
    4896:	20 87       	std	Z+8, r18	; 0x08
    4898:	88 85       	ldd	r24, Y+8	; 0x08
    489a:	99 85       	ldd	r25, Y+9	; 0x09
    489c:	fc 01       	movw	r30, r24
    489e:	86 81       	ldd	r24, Z+6	; 0x06
    48a0:	97 81       	ldd	r25, Z+7	; 0x07
    48a2:	2a 81       	ldd	r18, Y+2	; 0x02
    48a4:	3b 81       	ldd	r19, Y+3	; 0x03
    48a6:	2e 5f       	subi	r18, 0xFE	; 254
    48a8:	3f 4f       	sbci	r19, 0xFF	; 255
    48aa:	fc 01       	movw	r30, r24
    48ac:	35 83       	std	Z+5, r19	; 0x05
    48ae:	24 83       	std	Z+4, r18	; 0x04
    48b0:	8a 81       	ldd	r24, Y+2	; 0x02
    48b2:	9b 81       	ldd	r25, Y+3	; 0x03
    48b4:	9c 01       	movw	r18, r24
    48b6:	2e 5f       	subi	r18, 0xFE	; 254
    48b8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ba:	88 85       	ldd	r24, Y+8	; 0x08
    48bc:	99 85       	ldd	r25, Y+9	; 0x09
    48be:	fc 01       	movw	r30, r24
    48c0:	37 83       	std	Z+7, r19	; 0x07
    48c2:	26 83       	std	Z+6, r18	; 0x06
    48c4:	8a 81       	ldd	r24, Y+2	; 0x02
    48c6:	9b 81       	ldd	r25, Y+3	; 0x03
    48c8:	fc 01       	movw	r30, r24
    48ca:	82 8d       	ldd	r24, Z+26	; 0x1a
    48cc:	28 2f       	mov	r18, r24
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	4b e0       	ldi	r20, 0x0B	; 11
    48d2:	42 9f       	mul	r20, r18
    48d4:	c0 01       	movw	r24, r0
    48d6:	43 9f       	mul	r20, r19
    48d8:	90 0d       	add	r25, r0
    48da:	11 24       	eor	r1, r1
    48dc:	9c 01       	movw	r18, r24
    48de:	24 5f       	subi	r18, 0xF4	; 244
    48e0:	3e 4e       	sbci	r19, 0xEE	; 238
    48e2:	8a 81       	ldd	r24, Y+2	; 0x02
    48e4:	9b 81       	ldd	r25, Y+3	; 0x03
    48e6:	fc 01       	movw	r30, r24
    48e8:	35 87       	std	Z+13, r19	; 0x0d
    48ea:	24 87       	std	Z+12, r18	; 0x0c
    48ec:	8a 81       	ldd	r24, Y+2	; 0x02
    48ee:	9b 81       	ldd	r25, Y+3	; 0x03
    48f0:	fc 01       	movw	r30, r24
    48f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    48f4:	88 2f       	mov	r24, r24
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	4b e0       	ldi	r20, 0x0B	; 11
    48fa:	48 9f       	mul	r20, r24
    48fc:	90 01       	movw	r18, r0
    48fe:	49 9f       	mul	r20, r25
    4900:	30 0d       	add	r19, r0
    4902:	11 24       	eor	r1, r1
    4904:	24 5f       	subi	r18, 0xF4	; 244
    4906:	3e 4e       	sbci	r19, 0xEE	; 238
    4908:	f9 01       	movw	r30, r18
    490a:	20 81       	ld	r18, Z
    490c:	41 e0       	ldi	r20, 0x01	; 1
    490e:	42 0f       	add	r20, r18
    4910:	5b e0       	ldi	r21, 0x0B	; 11
    4912:	58 9f       	mul	r21, r24
    4914:	90 01       	movw	r18, r0
    4916:	59 9f       	mul	r21, r25
    4918:	30 0d       	add	r19, r0
    491a:	11 24       	eor	r1, r1
    491c:	c9 01       	movw	r24, r18
    491e:	84 5f       	subi	r24, 0xF4	; 244
    4920:	9e 4e       	sbci	r25, 0xEE	; 238
    4922:	fc 01       	movw	r30, r24
    4924:	40 83       	st	Z, r20
    4926:	39 c0       	rjmp	.+114    	; 0x499a <xTaskGenericNotifyFromISR+0x3ea>
    4928:	80 91 95 11 	lds	r24, 0x1195	; 0x801195 <xPendingReadyList+0x1>
    492c:	90 91 96 11 	lds	r25, 0x1196	; 0x801196 <xPendingReadyList+0x2>
    4930:	9b 87       	std	Y+11, r25	; 0x0b
    4932:	8a 87       	std	Y+10, r24	; 0x0a
    4934:	8a 81       	ldd	r24, Y+2	; 0x02
    4936:	9b 81       	ldd	r25, Y+3	; 0x03
    4938:	2a 85       	ldd	r18, Y+10	; 0x0a
    493a:	3b 85       	ldd	r19, Y+11	; 0x0b
    493c:	fc 01       	movw	r30, r24
    493e:	33 8b       	std	Z+19, r19	; 0x13
    4940:	22 8b       	std	Z+18, r18	; 0x12
    4942:	8a 85       	ldd	r24, Y+10	; 0x0a
    4944:	9b 85       	ldd	r25, Y+11	; 0x0b
    4946:	fc 01       	movw	r30, r24
    4948:	26 81       	ldd	r18, Z+6	; 0x06
    494a:	37 81       	ldd	r19, Z+7	; 0x07
    494c:	8a 81       	ldd	r24, Y+2	; 0x02
    494e:	9b 81       	ldd	r25, Y+3	; 0x03
    4950:	fc 01       	movw	r30, r24
    4952:	35 8b       	std	Z+21, r19	; 0x15
    4954:	24 8b       	std	Z+20, r18	; 0x14
    4956:	8a 85       	ldd	r24, Y+10	; 0x0a
    4958:	9b 85       	ldd	r25, Y+11	; 0x0b
    495a:	fc 01       	movw	r30, r24
    495c:	86 81       	ldd	r24, Z+6	; 0x06
    495e:	97 81       	ldd	r25, Z+7	; 0x07
    4960:	2a 81       	ldd	r18, Y+2	; 0x02
    4962:	3b 81       	ldd	r19, Y+3	; 0x03
    4964:	22 5f       	subi	r18, 0xF2	; 242
    4966:	3f 4f       	sbci	r19, 0xFF	; 255
    4968:	fc 01       	movw	r30, r24
    496a:	35 83       	std	Z+5, r19	; 0x05
    496c:	24 83       	std	Z+4, r18	; 0x04
    496e:	8a 81       	ldd	r24, Y+2	; 0x02
    4970:	9b 81       	ldd	r25, Y+3	; 0x03
    4972:	9c 01       	movw	r18, r24
    4974:	22 5f       	subi	r18, 0xF2	; 242
    4976:	3f 4f       	sbci	r19, 0xFF	; 255
    4978:	8a 85       	ldd	r24, Y+10	; 0x0a
    497a:	9b 85       	ldd	r25, Y+11	; 0x0b
    497c:	fc 01       	movw	r30, r24
    497e:	37 83       	std	Z+7, r19	; 0x07
    4980:	26 83       	std	Z+6, r18	; 0x06
    4982:	8a 81       	ldd	r24, Y+2	; 0x02
    4984:	9b 81       	ldd	r25, Y+3	; 0x03
    4986:	24 e9       	ldi	r18, 0x94	; 148
    4988:	31 e1       	ldi	r19, 0x11	; 17
    498a:	fc 01       	movw	r30, r24
    498c:	31 8f       	std	Z+25, r19	; 0x19
    498e:	20 8f       	std	Z+24, r18	; 0x18
    4990:	80 91 94 11 	lds	r24, 0x1194	; 0x801194 <xPendingReadyList>
    4994:	8f 5f       	subi	r24, 0xFF	; 255
    4996:	80 93 94 11 	sts	0x1194, r24	; 0x801194 <xPendingReadyList>
    499a:	8a 81       	ldd	r24, Y+2	; 0x02
    499c:	9b 81       	ldd	r25, Y+3	; 0x03
    499e:	fc 01       	movw	r30, r24
    49a0:	22 8d       	ldd	r18, Z+26	; 0x1a
    49a2:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    49a6:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    49aa:	fc 01       	movw	r30, r24
    49ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    49ae:	82 17       	cp	r24, r18
    49b0:	60 f4       	brcc	.+24     	; 0x49ca <xTaskGenericNotifyFromISR+0x41a>
    49b2:	8e 89       	ldd	r24, Y+22	; 0x16
    49b4:	9f 89       	ldd	r25, Y+23	; 0x17
    49b6:	89 2b       	or	r24, r25
    49b8:	29 f0       	breq	.+10     	; 0x49c4 <xTaskGenericNotifyFromISR+0x414>
    49ba:	8e 89       	ldd	r24, Y+22	; 0x16
    49bc:	9f 89       	ldd	r25, Y+23	; 0x17
    49be:	21 e0       	ldi	r18, 0x01	; 1
    49c0:	fc 01       	movw	r30, r24
    49c2:	20 83       	st	Z, r18
    49c4:	81 e0       	ldi	r24, 0x01	; 1
    49c6:	80 93 c1 11 	sts	0x11C1, r24	; 0x8011c1 <xYieldPending>
    49ca:	89 81       	ldd	r24, Y+1	; 0x01
    49cc:	67 96       	adiw	r28, 0x17	; 23
    49ce:	0f b6       	in	r0, 0x3f	; 63
    49d0:	f8 94       	cli
    49d2:	de bf       	out	0x3e, r29	; 62
    49d4:	0f be       	out	0x3f, r0	; 63
    49d6:	cd bf       	out	0x3d, r28	; 61
    49d8:	df 91       	pop	r29
    49da:	cf 91       	pop	r28
    49dc:	0f 91       	pop	r16
    49de:	ff 90       	pop	r15
    49e0:	ef 90       	pop	r14
    49e2:	df 90       	pop	r13
    49e4:	cf 90       	pop	r12
    49e6:	08 95       	ret

000049e8 <xTaskGenericNotifyStateClear>:
    49e8:	cf 93       	push	r28
    49ea:	df 93       	push	r29
    49ec:	00 d0       	rcall	.+0      	; 0x49ee <xTaskGenericNotifyStateClear+0x6>
    49ee:	00 d0       	rcall	.+0      	; 0x49f0 <xTaskGenericNotifyStateClear+0x8>
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62
    49f4:	9d 83       	std	Y+5, r25	; 0x05
    49f6:	8c 83       	std	Y+4, r24	; 0x04
    49f8:	6e 83       	std	Y+6, r22	; 0x06
    49fa:	8c 81       	ldd	r24, Y+4	; 0x04
    49fc:	9d 81       	ldd	r25, Y+5	; 0x05
    49fe:	89 2b       	or	r24, r25
    4a00:	29 f4       	brne	.+10     	; 0x4a0c <xTaskGenericNotifyStateClear+0x24>
    4a02:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    4a06:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4a0a:	02 c0       	rjmp	.+4      	; 0x4a10 <xTaskGenericNotifyStateClear+0x28>
    4a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a10:	9b 83       	std	Y+3, r25	; 0x03
    4a12:	8a 83       	std	Y+2, r24	; 0x02
    4a14:	0f b6       	in	r0, 0x3f	; 63
    4a16:	f8 94       	cli
    4a18:	0f 92       	push	r0
    4a1a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a1c:	88 2f       	mov	r24, r24
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	2a 81       	ldd	r18, Y+2	; 0x02
    4a22:	3b 81       	ldd	r19, Y+3	; 0x03
    4a24:	82 0f       	add	r24, r18
    4a26:	93 1f       	adc	r25, r19
    4a28:	c3 96       	adiw	r24, 0x33	; 51
    4a2a:	fc 01       	movw	r30, r24
    4a2c:	80 81       	ld	r24, Z
    4a2e:	82 30       	cpi	r24, 0x02	; 2
    4a30:	69 f4       	brne	.+26     	; 0x4a4c <xTaskGenericNotifyStateClear+0x64>
    4a32:	8e 81       	ldd	r24, Y+6	; 0x06
    4a34:	88 2f       	mov	r24, r24
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	2a 81       	ldd	r18, Y+2	; 0x02
    4a3a:	3b 81       	ldd	r19, Y+3	; 0x03
    4a3c:	82 0f       	add	r24, r18
    4a3e:	93 1f       	adc	r25, r19
    4a40:	c3 96       	adiw	r24, 0x33	; 51
    4a42:	fc 01       	movw	r30, r24
    4a44:	10 82       	st	Z, r1
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	89 83       	std	Y+1, r24	; 0x01
    4a4a:	01 c0       	rjmp	.+2      	; 0x4a4e <xTaskGenericNotifyStateClear+0x66>
    4a4c:	19 82       	std	Y+1, r1	; 0x01
    4a4e:	0f 90       	pop	r0
    4a50:	0f be       	out	0x3f, r0	; 63
    4a52:	89 81       	ldd	r24, Y+1	; 0x01
    4a54:	26 96       	adiw	r28, 0x06	; 6
    4a56:	0f b6       	in	r0, 0x3f	; 63
    4a58:	f8 94       	cli
    4a5a:	de bf       	out	0x3e, r29	; 62
    4a5c:	0f be       	out	0x3f, r0	; 63
    4a5e:	cd bf       	out	0x3d, r28	; 61
    4a60:	df 91       	pop	r29
    4a62:	cf 91       	pop	r28
    4a64:	08 95       	ret

00004a66 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    4a66:	cf 93       	push	r28
    4a68:	df 93       	push	r29
    4a6a:	cd b7       	in	r28, 0x3d	; 61
    4a6c:	de b7       	in	r29, 0x3e	; 62
    4a6e:	2f 97       	sbiw	r28, 0x0f	; 15
    4a70:	0f b6       	in	r0, 0x3f	; 63
    4a72:	f8 94       	cli
    4a74:	de bf       	out	0x3e, r29	; 62
    4a76:	0f be       	out	0x3f, r0	; 63
    4a78:	cd bf       	out	0x3d, r28	; 61
    4a7a:	6b 87       	std	Y+11, r22	; 0x0b
    4a7c:	7c 87       	std	Y+12, r23	; 0x0c
    4a7e:	8d 87       	std	Y+13, r24	; 0x0d
    4a80:	9e 87       	std	Y+14, r25	; 0x0e
    4a82:	4f 87       	std	Y+15, r20	; 0x0f
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    4a84:	80 91 b7 11 	lds	r24, 0x11B7	; 0x8011b7 <xTickCount>
    4a88:	90 91 b8 11 	lds	r25, 0x11B8	; 0x8011b8 <xTickCount+0x1>
    4a8c:	a0 91 b9 11 	lds	r26, 0x11B9	; 0x8011b9 <xTickCount+0x2>
    4a90:	b0 91 ba 11 	lds	r27, 0x11BA	; 0x8011ba <xTickCount+0x3>
    4a94:	89 83       	std	Y+1, r24	; 0x01
    4a96:	9a 83       	std	Y+2, r25	; 0x02
    4a98:	ab 83       	std	Y+3, r26	; 0x03
    4a9a:	bc 83       	std	Y+4, r27	; 0x04
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4a9c:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    4aa0:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4aa4:	02 96       	adiw	r24, 0x02	; 2
    4aa6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    4aaa:	8b 85       	ldd	r24, Y+11	; 0x0b
    4aac:	9c 85       	ldd	r25, Y+12	; 0x0c
    4aae:	ad 85       	ldd	r26, Y+13	; 0x0d
    4ab0:	be 85       	ldd	r27, Y+14	; 0x0e
    4ab2:	8f 3f       	cpi	r24, 0xFF	; 255
    4ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ab6:	af 4f       	sbci	r26, 0xFF	; 255
    4ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    4aba:	09 f0       	breq	.+2      	; 0x4abe <prvAddCurrentTaskToDelayedList+0x58>
    4abc:	49 c0       	rjmp	.+146    	; 0x4b50 <prvAddCurrentTaskToDelayedList+0xea>
    4abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ac0:	88 23       	and	r24, r24
    4ac2:	09 f4       	brne	.+2      	; 0x4ac6 <prvAddCurrentTaskToDelayedList+0x60>
    4ac4:	45 c0       	rjmp	.+138    	; 0x4b50 <prvAddCurrentTaskToDelayedList+0xea>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4ac6:	80 91 ac 11 	lds	r24, 0x11AC	; 0x8011ac <xSuspendedTaskList+0x1>
    4aca:	90 91 ad 11 	lds	r25, 0x11AD	; 0x8011ad <xSuspendedTaskList+0x2>
    4ace:	9e 83       	std	Y+6, r25	; 0x06
    4ad0:	8d 83       	std	Y+5, r24	; 0x05
    4ad2:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    4ad6:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4ada:	2d 81       	ldd	r18, Y+5	; 0x05
    4adc:	3e 81       	ldd	r19, Y+6	; 0x06
    4ade:	fc 01       	movw	r30, r24
    4ae0:	37 83       	std	Z+7, r19	; 0x07
    4ae2:	26 83       	std	Z+6, r18	; 0x06
    4ae4:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    4ae8:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4aec:	2d 81       	ldd	r18, Y+5	; 0x05
    4aee:	3e 81       	ldd	r19, Y+6	; 0x06
    4af0:	f9 01       	movw	r30, r18
    4af2:	26 81       	ldd	r18, Z+6	; 0x06
    4af4:	37 81       	ldd	r19, Z+7	; 0x07
    4af6:	fc 01       	movw	r30, r24
    4af8:	31 87       	std	Z+9, r19	; 0x09
    4afa:	20 87       	std	Z+8, r18	; 0x08
    4afc:	8d 81       	ldd	r24, Y+5	; 0x05
    4afe:	9e 81       	ldd	r25, Y+6	; 0x06
    4b00:	fc 01       	movw	r30, r24
    4b02:	86 81       	ldd	r24, Z+6	; 0x06
    4b04:	97 81       	ldd	r25, Z+7	; 0x07
    4b06:	20 91 0a 11 	lds	r18, 0x110A	; 0x80110a <pxCurrentTCB>
    4b0a:	30 91 0b 11 	lds	r19, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4b0e:	2e 5f       	subi	r18, 0xFE	; 254
    4b10:	3f 4f       	sbci	r19, 0xFF	; 255
    4b12:	fc 01       	movw	r30, r24
    4b14:	35 83       	std	Z+5, r19	; 0x05
    4b16:	24 83       	std	Z+4, r18	; 0x04
    4b18:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    4b1c:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4b20:	9c 01       	movw	r18, r24
    4b22:	2e 5f       	subi	r18, 0xFE	; 254
    4b24:	3f 4f       	sbci	r19, 0xFF	; 255
    4b26:	8d 81       	ldd	r24, Y+5	; 0x05
    4b28:	9e 81       	ldd	r25, Y+6	; 0x06
    4b2a:	fc 01       	movw	r30, r24
    4b2c:	37 83       	std	Z+7, r19	; 0x07
    4b2e:	26 83       	std	Z+6, r18	; 0x06
    4b30:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    4b34:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4b38:	2b ea       	ldi	r18, 0xAB	; 171
    4b3a:	31 e1       	ldi	r19, 0x11	; 17
    4b3c:	fc 01       	movw	r30, r24
    4b3e:	35 87       	std	Z+13, r19	; 0x0d
    4b40:	24 87       	std	Z+12, r18	; 0x0c
    4b42:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <xSuspendedTaskList>
    4b46:	8f 5f       	subi	r24, 0xFF	; 255
    4b48:	80 93 ab 11 	sts	0x11AB, r24	; 0x8011ab <xSuspendedTaskList>
    4b4c:	00 00       	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    4b4e:	64 c0       	rjmp	.+200    	; 0x4c18 <prvAddCurrentTaskToDelayedList+0x1b2>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
    4b50:	29 81       	ldd	r18, Y+1	; 0x01
    4b52:	3a 81       	ldd	r19, Y+2	; 0x02
    4b54:	4b 81       	ldd	r20, Y+3	; 0x03
    4b56:	5c 81       	ldd	r21, Y+4	; 0x04
    4b58:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b5c:	ad 85       	ldd	r26, Y+13	; 0x0d
    4b5e:	be 85       	ldd	r27, Y+14	; 0x0e
    4b60:	82 0f       	add	r24, r18
    4b62:	93 1f       	adc	r25, r19
    4b64:	a4 1f       	adc	r26, r20
    4b66:	b5 1f       	adc	r27, r21
    4b68:	8f 83       	std	Y+7, r24	; 0x07
    4b6a:	98 87       	std	Y+8, r25	; 0x08
    4b6c:	a9 87       	std	Y+9, r26	; 0x09
    4b6e:	ba 87       	std	Y+10, r27	; 0x0a

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    4b70:	20 91 0a 11 	lds	r18, 0x110A	; 0x80110a <pxCurrentTCB>
    4b74:	30 91 0b 11 	lds	r19, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4b78:	8f 81       	ldd	r24, Y+7	; 0x07
    4b7a:	98 85       	ldd	r25, Y+8	; 0x08
    4b7c:	a9 85       	ldd	r26, Y+9	; 0x09
    4b7e:	ba 85       	ldd	r27, Y+10	; 0x0a
    4b80:	f9 01       	movw	r30, r18
    4b82:	82 83       	std	Z+2, r24	; 0x02
    4b84:	93 83       	std	Z+3, r25	; 0x03
    4b86:	a4 83       	std	Z+4, r26	; 0x04
    4b88:	b5 83       	std	Z+5, r27	; 0x05

                if( xTimeToWake < xConstTickCount )
    4b8a:	2f 81       	ldd	r18, Y+7	; 0x07
    4b8c:	38 85       	ldd	r19, Y+8	; 0x08
    4b8e:	49 85       	ldd	r20, Y+9	; 0x09
    4b90:	5a 85       	ldd	r21, Y+10	; 0x0a
    4b92:	89 81       	ldd	r24, Y+1	; 0x01
    4b94:	9a 81       	ldd	r25, Y+2	; 0x02
    4b96:	ab 81       	ldd	r26, Y+3	; 0x03
    4b98:	bc 81       	ldd	r27, Y+4	; 0x04
    4b9a:	28 17       	cp	r18, r24
    4b9c:	39 07       	cpc	r19, r25
    4b9e:	4a 07       	cpc	r20, r26
    4ba0:	5b 07       	cpc	r21, r27
    4ba2:	78 f4       	brcc	.+30     	; 0x4bc2 <prvAddCurrentTaskToDelayedList+0x15c>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4ba4:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    4ba8:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4bac:	9c 01       	movw	r18, r24
    4bae:	2e 5f       	subi	r18, 0xFE	; 254
    4bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bb2:	80 91 92 11 	lds	r24, 0x1192	; 0x801192 <pxOverflowDelayedTaskList>
    4bb6:	90 91 93 11 	lds	r25, 0x1193	; 0x801193 <pxOverflowDelayedTaskList+0x1>
    4bba:	b9 01       	movw	r22, r18
    4bbc:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    4bc0:	2b c0       	rjmp	.+86     	; 0x4c18 <prvAddCurrentTaskToDelayedList+0x1b2>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4bc2:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <pxCurrentTCB>
    4bc6:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <pxCurrentTCB+0x1>
    4bca:	9c 01       	movw	r18, r24
    4bcc:	2e 5f       	subi	r18, 0xFE	; 254
    4bce:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd0:	80 91 90 11 	lds	r24, 0x1190	; 0x801190 <pxDelayedTaskList>
    4bd4:	90 91 91 11 	lds	r25, 0x1191	; 0x801191 <pxDelayedTaskList+0x1>
    4bd8:	b9 01       	movw	r22, r18
    4bda:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInsert>

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
    4bde:	80 91 c4 11 	lds	r24, 0x11C4	; 0x8011c4 <xNextTaskUnblockTime>
    4be2:	90 91 c5 11 	lds	r25, 0x11C5	; 0x8011c5 <xNextTaskUnblockTime+0x1>
    4be6:	a0 91 c6 11 	lds	r26, 0x11C6	; 0x8011c6 <xNextTaskUnblockTime+0x2>
    4bea:	b0 91 c7 11 	lds	r27, 0x11C7	; 0x8011c7 <xNextTaskUnblockTime+0x3>
    4bee:	2f 81       	ldd	r18, Y+7	; 0x07
    4bf0:	38 85       	ldd	r19, Y+8	; 0x08
    4bf2:	49 85       	ldd	r20, Y+9	; 0x09
    4bf4:	5a 85       	ldd	r21, Y+10	; 0x0a
    4bf6:	28 17       	cp	r18, r24
    4bf8:	39 07       	cpc	r19, r25
    4bfa:	4a 07       	cpc	r20, r26
    4bfc:	5b 07       	cpc	r21, r27
    4bfe:	60 f4       	brcc	.+24     	; 0x4c18 <prvAddCurrentTaskToDelayedList+0x1b2>
                    {
                        xNextTaskUnblockTime = xTimeToWake;
    4c00:	8f 81       	ldd	r24, Y+7	; 0x07
    4c02:	98 85       	ldd	r25, Y+8	; 0x08
    4c04:	a9 85       	ldd	r26, Y+9	; 0x09
    4c06:	ba 85       	ldd	r27, Y+10	; 0x0a
    4c08:	80 93 c4 11 	sts	0x11C4, r24	; 0x8011c4 <xNextTaskUnblockTime>
    4c0c:	90 93 c5 11 	sts	0x11C5, r25	; 0x8011c5 <xNextTaskUnblockTime+0x1>
    4c10:	a0 93 c6 11 	sts	0x11C6, r26	; 0x8011c6 <xNextTaskUnblockTime+0x2>
    4c14:	b0 93 c7 11 	sts	0x11C7, r27	; 0x8011c7 <xNextTaskUnblockTime+0x3>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    4c18:	00 00       	nop
    4c1a:	2f 96       	adiw	r28, 0x0f	; 15
    4c1c:	0f b6       	in	r0, 0x3f	; 63
    4c1e:	f8 94       	cli
    4c20:	de bf       	out	0x3e, r29	; 62
    4c22:	0f be       	out	0x3f, r0	; 63
    4c24:	cd bf       	out	0x3d, r28	; 61
    4c26:	df 91       	pop	r29
    4c28:	cf 91       	pop	r28
    4c2a:	08 95       	ret

00004c2c <xTimerCreateTimerTask>:
    4c2c:	ef 92       	push	r14
    4c2e:	ff 92       	push	r15
    4c30:	0f 93       	push	r16
    4c32:	cf 93       	push	r28
    4c34:	df 93       	push	r29
    4c36:	1f 92       	push	r1
    4c38:	cd b7       	in	r28, 0x3d	; 61
    4c3a:	de b7       	in	r29, 0x3e	; 62
    4c3c:	19 82       	std	Y+1, r1	; 0x01
    4c3e:	ae d4       	rcall	.+2396   	; 0x559c <prvCheckForValidListAndQueue>
    4c40:	80 91 e5 11 	lds	r24, 0x11E5	; 0x8011e5 <xTimerQueue>
    4c44:	90 91 e6 11 	lds	r25, 0x11E6	; 0x8011e6 <xTimerQueue+0x1>
    4c48:	89 2b       	or	r24, r25
    4c4a:	91 f0       	breq	.+36     	; 0x4c70 <xTimerCreateTimerTask+0x44>
    4c4c:	0f 2e       	mov	r0, r31
    4c4e:	f7 ee       	ldi	r31, 0xE7	; 231
    4c50:	ef 2e       	mov	r14, r31
    4c52:	f1 e1       	ldi	r31, 0x11	; 17
    4c54:	ff 2e       	mov	r15, r31
    4c56:	f0 2d       	mov	r31, r0
    4c58:	03 e0       	ldi	r16, 0x03	; 3
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	40 ec       	ldi	r20, 0xC0	; 192
    4c60:	50 e0       	ldi	r21, 0x00	; 0
    4c62:	6d e7       	ldi	r22, 0x7D	; 125
    4c64:	73 e0       	ldi	r23, 0x03	; 3
    4c66:	8e e8       	ldi	r24, 0x8E	; 142
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	0e 94 74 13 	call	0x26e8	; 0x26e8 <xTaskCreate>
    4c6e:	89 83       	std	Y+1, r24	; 0x01
    4c70:	89 81       	ldd	r24, Y+1	; 0x01
    4c72:	0f 90       	pop	r0
    4c74:	df 91       	pop	r29
    4c76:	cf 91       	pop	r28
    4c78:	0f 91       	pop	r16
    4c7a:	ff 90       	pop	r15
    4c7c:	ef 90       	pop	r14
    4c7e:	08 95       	ret

00004c80 <xTimerGenericCommand>:
    4c80:	cf 92       	push	r12
    4c82:	df 92       	push	r13
    4c84:	ef 92       	push	r14
    4c86:	ff 92       	push	r15
    4c88:	0f 93       	push	r16
    4c8a:	1f 93       	push	r17
    4c8c:	cf 93       	push	r28
    4c8e:	df 93       	push	r29
    4c90:	cd b7       	in	r28, 0x3d	; 61
    4c92:	de b7       	in	r29, 0x3e	; 62
    4c94:	65 97       	sbiw	r28, 0x15	; 21
    4c96:	0f b6       	in	r0, 0x3f	; 63
    4c98:	f8 94       	cli
    4c9a:	de bf       	out	0x3e, r29	; 62
    4c9c:	0f be       	out	0x3f, r0	; 63
    4c9e:	cd bf       	out	0x3d, r28	; 61
    4ca0:	9a 87       	std	Y+10, r25	; 0x0a
    4ca2:	89 87       	std	Y+9, r24	; 0x09
    4ca4:	6b 87       	std	Y+11, r22	; 0x0b
    4ca6:	2c 87       	std	Y+12, r18	; 0x0c
    4ca8:	3d 87       	std	Y+13, r19	; 0x0d
    4caa:	4e 87       	std	Y+14, r20	; 0x0e
    4cac:	5f 87       	std	Y+15, r21	; 0x0f
    4cae:	19 8b       	std	Y+17, r17	; 0x11
    4cb0:	08 8b       	std	Y+16, r16	; 0x10
    4cb2:	ca 8a       	std	Y+18, r12	; 0x12
    4cb4:	db 8a       	std	Y+19, r13	; 0x13
    4cb6:	ec 8a       	std	Y+20, r14	; 0x14
    4cb8:	fd 8a       	std	Y+21, r15	; 0x15
    4cba:	19 82       	std	Y+1, r1	; 0x01
    4cbc:	80 91 e5 11 	lds	r24, 0x11E5	; 0x8011e5 <xTimerQueue>
    4cc0:	90 91 e6 11 	lds	r25, 0x11E6	; 0x8011e6 <xTimerQueue+0x1>
    4cc4:	89 2b       	or	r24, r25
    4cc6:	09 f4       	brne	.+2      	; 0x4cca <xTimerGenericCommand+0x4a>
    4cc8:	43 c0       	rjmp	.+134    	; 0x4d50 <xTimerGenericCommand+0xd0>
    4cca:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ccc:	8a 83       	std	Y+2, r24	; 0x02
    4cce:	8c 85       	ldd	r24, Y+12	; 0x0c
    4cd0:	9d 85       	ldd	r25, Y+13	; 0x0d
    4cd2:	ae 85       	ldd	r26, Y+14	; 0x0e
    4cd4:	bf 85       	ldd	r27, Y+15	; 0x0f
    4cd6:	8b 83       	std	Y+3, r24	; 0x03
    4cd8:	9c 83       	std	Y+4, r25	; 0x04
    4cda:	ad 83       	std	Y+5, r26	; 0x05
    4cdc:	be 83       	std	Y+6, r27	; 0x06
    4cde:	89 85       	ldd	r24, Y+9	; 0x09
    4ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ce2:	98 87       	std	Y+8, r25	; 0x08
    4ce4:	8f 83       	std	Y+7, r24	; 0x07
    4ce6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ce8:	86 30       	cpi	r24, 0x06	; 6
    4cea:	2c f5       	brge	.+74     	; 0x4d36 <xTimerGenericCommand+0xb6>
    4cec:	89 d8       	rcall	.-3822   	; 0x3e00 <xTaskGetSchedulerState>
    4cee:	82 30       	cpi	r24, 0x02	; 2
    4cf0:	99 f4       	brne	.+38     	; 0x4d18 <xTimerGenericCommand+0x98>
    4cf2:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <xTimerQueue>
    4cf6:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <xTimerQueue+0x1>
    4cfa:	8a 89       	ldd	r24, Y+18	; 0x12
    4cfc:	9b 89       	ldd	r25, Y+19	; 0x13
    4cfe:	ac 89       	ldd	r26, Y+20	; 0x14
    4d00:	bd 89       	ldd	r27, Y+21	; 0x15
    4d02:	be 01       	movw	r22, r28
    4d04:	6e 5f       	subi	r22, 0xFE	; 254
    4d06:	7f 4f       	sbci	r23, 0xFF	; 255
    4d08:	00 e0       	ldi	r16, 0x00	; 0
    4d0a:	9c 01       	movw	r18, r24
    4d0c:	ad 01       	movw	r20, r26
    4d0e:	cf 01       	movw	r24, r30
    4d10:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <xQueueGenericSend>
    4d14:	89 83       	std	Y+1, r24	; 0x01
    4d16:	1c c0       	rjmp	.+56     	; 0x4d50 <xTimerGenericCommand+0xd0>
    4d18:	80 91 e5 11 	lds	r24, 0x11E5	; 0x8011e5 <xTimerQueue>
    4d1c:	90 91 e6 11 	lds	r25, 0x11E6	; 0x8011e6 <xTimerQueue+0x1>
    4d20:	be 01       	movw	r22, r28
    4d22:	6e 5f       	subi	r22, 0xFE	; 254
    4d24:	7f 4f       	sbci	r23, 0xFF	; 255
    4d26:	00 e0       	ldi	r16, 0x00	; 0
    4d28:	20 e0       	ldi	r18, 0x00	; 0
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	a9 01       	movw	r20, r18
    4d2e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <xQueueGenericSend>
    4d32:	89 83       	std	Y+1, r24	; 0x01
    4d34:	0d c0       	rjmp	.+26     	; 0x4d50 <xTimerGenericCommand+0xd0>
    4d36:	80 91 e5 11 	lds	r24, 0x11E5	; 0x8011e5 <xTimerQueue>
    4d3a:	90 91 e6 11 	lds	r25, 0x11E6	; 0x8011e6 <xTimerQueue+0x1>
    4d3e:	48 89       	ldd	r20, Y+16	; 0x10
    4d40:	59 89       	ldd	r21, Y+17	; 0x11
    4d42:	be 01       	movw	r22, r28
    4d44:	6e 5f       	subi	r22, 0xFE	; 254
    4d46:	7f 4f       	sbci	r23, 0xFF	; 255
    4d48:	20 e0       	ldi	r18, 0x00	; 0
    4d4a:	0e 94 8f 0a 	call	0x151e	; 0x151e <xQueueGenericSendFromISR>
    4d4e:	89 83       	std	Y+1, r24	; 0x01
    4d50:	89 81       	ldd	r24, Y+1	; 0x01
    4d52:	65 96       	adiw	r28, 0x15	; 21
    4d54:	0f b6       	in	r0, 0x3f	; 63
    4d56:	f8 94       	cli
    4d58:	de bf       	out	0x3e, r29	; 62
    4d5a:	0f be       	out	0x3f, r0	; 63
    4d5c:	cd bf       	out	0x3d, r28	; 61
    4d5e:	df 91       	pop	r29
    4d60:	cf 91       	pop	r28
    4d62:	1f 91       	pop	r17
    4d64:	0f 91       	pop	r16
    4d66:	ff 90       	pop	r15
    4d68:	ef 90       	pop	r14
    4d6a:	df 90       	pop	r13
    4d6c:	cf 90       	pop	r12
    4d6e:	08 95       	ret

00004d70 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    4d70:	cf 92       	push	r12
    4d72:	df 92       	push	r13
    4d74:	ef 92       	push	r14
    4d76:	ff 92       	push	r15
    4d78:	0f 93       	push	r16
    4d7a:	1f 93       	push	r17
    4d7c:	cf 93       	push	r28
    4d7e:	df 93       	push	r29
    4d80:	cd b7       	in	r28, 0x3d	; 61
    4d82:	de b7       	in	r29, 0x3e	; 62
    4d84:	2b 97       	sbiw	r28, 0x0b	; 11
    4d86:	0f b6       	in	r0, 0x3f	; 63
    4d88:	f8 94       	cli
    4d8a:	de bf       	out	0x3e, r29	; 62
    4d8c:	0f be       	out	0x3f, r0	; 63
    4d8e:	cd bf       	out	0x3d, r28	; 61
    4d90:	6c 83       	std	Y+4, r22	; 0x04
    4d92:	7d 83       	std	Y+5, r23	; 0x05
    4d94:	8e 83       	std	Y+6, r24	; 0x06
    4d96:	9f 83       	std	Y+7, r25	; 0x07
    4d98:	28 87       	std	Y+8, r18	; 0x08
    4d9a:	39 87       	std	Y+9, r19	; 0x09
    4d9c:	4a 87       	std	Y+10, r20	; 0x0a
    4d9e:	5b 87       	std	Y+11, r21	; 0x0b
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4da0:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <pxCurrentTimerList>
    4da4:	90 91 e2 11 	lds	r25, 0x11E2	; 0x8011e2 <pxCurrentTimerList+0x1>
    4da8:	fc 01       	movw	r30, r24
    4daa:	87 81       	ldd	r24, Z+7	; 0x07
    4dac:	90 85       	ldd	r25, Z+8	; 0x08
    4dae:	fc 01       	movw	r30, r24
    4db0:	80 85       	ldd	r24, Z+8	; 0x08
    4db2:	91 85       	ldd	r25, Z+9	; 0x09
    4db4:	9a 83       	std	Y+2, r25	; 0x02
    4db6:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4db8:	89 81       	ldd	r24, Y+1	; 0x01
    4dba:	9a 81       	ldd	r25, Y+2	; 0x02
    4dbc:	02 96       	adiw	r24, 0x02	; 2
    4dbe:	0e 94 6e 06 	call	0xcdc	; 0xcdc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4dc2:	89 81       	ldd	r24, Y+1	; 0x01
    4dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc6:	fc 01       	movw	r30, r24
    4dc8:	86 89       	ldd	r24, Z+22	; 0x16
    4dca:	88 2f       	mov	r24, r24
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	84 70       	andi	r24, 0x04	; 4
    4dd0:	99 27       	eor	r25, r25
    4dd2:	89 2b       	or	r24, r25
    4dd4:	a9 f1       	breq	.+106    	; 0x4e40 <prvProcessExpiredTimer+0xd0>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    4dd6:	89 81       	ldd	r24, Y+1	; 0x01
    4dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dda:	fc 01       	movw	r30, r24
    4ddc:	26 85       	ldd	r18, Z+14	; 0x0e
    4dde:	37 85       	ldd	r19, Z+15	; 0x0f
    4de0:	40 89       	ldd	r20, Z+16	; 0x10
    4de2:	51 89       	ldd	r21, Z+17	; 0x11
    4de4:	8c 81       	ldd	r24, Y+4	; 0x04
    4de6:	9d 81       	ldd	r25, Y+5	; 0x05
    4de8:	ae 81       	ldd	r26, Y+6	; 0x06
    4dea:	bf 81       	ldd	r27, Y+7	; 0x07
    4dec:	82 0f       	add	r24, r18
    4dee:	93 1f       	adc	r25, r19
    4df0:	a4 1f       	adc	r26, r20
    4df2:	b5 1f       	adc	r27, r21
    4df4:	ec 80       	ldd	r14, Y+4	; 0x04
    4df6:	fd 80       	ldd	r15, Y+5	; 0x05
    4df8:	0e 81       	ldd	r16, Y+6	; 0x06
    4dfa:	1f 81       	ldd	r17, Y+7	; 0x07
    4dfc:	28 85       	ldd	r18, Y+8	; 0x08
    4dfe:	39 85       	ldd	r19, Y+9	; 0x09
    4e00:	4a 85       	ldd	r20, Y+10	; 0x0a
    4e02:	5b 85       	ldd	r21, Y+11	; 0x0b
    4e04:	e9 81       	ldd	r30, Y+1	; 0x01
    4e06:	fa 81       	ldd	r31, Y+2	; 0x02
    4e08:	67 01       	movw	r12, r14
    4e0a:	78 01       	movw	r14, r16
    4e0c:	89 01       	movw	r16, r18
    4e0e:	9a 01       	movw	r18, r20
    4e10:	ac 01       	movw	r20, r24
    4e12:	bd 01       	movw	r22, r26
    4e14:	cf 01       	movw	r24, r30
    4e16:	3e d1       	rcall	.+636    	; 0x5094 <prvInsertTimerInActiveList>
    4e18:	88 23       	and	r24, r24
    4e1a:	e1 f0       	breq	.+56     	; 0x4e54 <prvProcessExpiredTimer+0xe4>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    4e20:	ae 81       	ldd	r26, Y+6	; 0x06
    4e22:	bf 81       	ldd	r27, Y+7	; 0x07
    4e24:	e9 81       	ldd	r30, Y+1	; 0x01
    4e26:	fa 81       	ldd	r31, Y+2	; 0x02
    4e28:	c1 2c       	mov	r12, r1
    4e2a:	d1 2c       	mov	r13, r1
    4e2c:	76 01       	movw	r14, r12
    4e2e:	00 e0       	ldi	r16, 0x00	; 0
    4e30:	10 e0       	ldi	r17, 0x00	; 0
    4e32:	9c 01       	movw	r18, r24
    4e34:	ad 01       	movw	r20, r26
    4e36:	60 e0       	ldi	r22, 0x00	; 0
    4e38:	cf 01       	movw	r24, r30
    4e3a:	22 df       	rcall	.-444    	; 0x4c80 <xTimerGenericCommand>
    4e3c:	8b 83       	std	Y+3, r24	; 0x03
    4e3e:	0a c0       	rjmp	.+20     	; 0x4e54 <prvProcessExpiredTimer+0xe4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4e40:	89 81       	ldd	r24, Y+1	; 0x01
    4e42:	9a 81       	ldd	r25, Y+2	; 0x02
    4e44:	fc 01       	movw	r30, r24
    4e46:	86 89       	ldd	r24, Z+22	; 0x16
    4e48:	28 2f       	mov	r18, r24
    4e4a:	2e 7f       	andi	r18, 0xFE	; 254
    4e4c:	89 81       	ldd	r24, Y+1	; 0x01
    4e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e50:	fc 01       	movw	r30, r24
    4e52:	26 8b       	std	Z+22, r18	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4e54:	89 81       	ldd	r24, Y+1	; 0x01
    4e56:	9a 81       	ldd	r25, Y+2	; 0x02
    4e58:	fc 01       	movw	r30, r24
    4e5a:	24 89       	ldd	r18, Z+20	; 0x14
    4e5c:	35 89       	ldd	r19, Z+21	; 0x15
    4e5e:	89 81       	ldd	r24, Y+1	; 0x01
    4e60:	9a 81       	ldd	r25, Y+2	; 0x02
    4e62:	f9 01       	movw	r30, r18
    4e64:	19 95       	eicall
    }
    4e66:	00 00       	nop
    4e68:	2b 96       	adiw	r28, 0x0b	; 11
    4e6a:	0f b6       	in	r0, 0x3f	; 63
    4e6c:	f8 94       	cli
    4e6e:	de bf       	out	0x3e, r29	; 62
    4e70:	0f be       	out	0x3f, r0	; 63
    4e72:	cd bf       	out	0x3d, r28	; 61
    4e74:	df 91       	pop	r29
    4e76:	cf 91       	pop	r28
    4e78:	1f 91       	pop	r17
    4e7a:	0f 91       	pop	r16
    4e7c:	ff 90       	pop	r15
    4e7e:	ef 90       	pop	r14
    4e80:	df 90       	pop	r13
    4e82:	cf 90       	pop	r12
    4e84:	08 95       	ret

00004e86 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    4e86:	ef 92       	push	r14
    4e88:	ff 92       	push	r15
    4e8a:	0f 93       	push	r16
    4e8c:	1f 93       	push	r17
    4e8e:	cf 93       	push	r28
    4e90:	df 93       	push	r29
    4e92:	cd b7       	in	r28, 0x3d	; 61
    4e94:	de b7       	in	r29, 0x3e	; 62
    4e96:	2a 97       	sbiw	r28, 0x0a	; 10
    4e98:	0f b6       	in	r0, 0x3f	; 63
    4e9a:	f8 94       	cli
    4e9c:	de bf       	out	0x3e, r29	; 62
    4e9e:	0f be       	out	0x3f, r0	; 63
    4ea0:	cd bf       	out	0x3d, r28	; 61
    4ea2:	6e 83       	std	Y+6, r22	; 0x06
    4ea4:	7f 83       	std	Y+7, r23	; 0x07
    4ea6:	88 87       	std	Y+8, r24	; 0x08
    4ea8:	99 87       	std	Y+9, r25	; 0x09
    4eaa:	4a 87       	std	Y+10, r20	; 0x0a
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    4eac:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4eb0:	ce 01       	movw	r24, r28
    4eb2:	05 96       	adiw	r24, 0x05	; 5
    4eb4:	a8 d0       	rcall	.+336    	; 0x5006 <prvSampleTimeNow>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	89 83       	std	Y+1, r24	; 0x01
    4ebc:	9a 83       	std	Y+2, r25	; 0x02
    4ebe:	ab 83       	std	Y+3, r26	; 0x03
    4ec0:	bc 83       	std	Y+4, r27	; 0x04

            if( xTimerListsWereSwitched == pdFALSE )
    4ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec4:	88 23       	and	r24, r24
    4ec6:	09 f0       	breq	.+2      	; 0x4eca <prvProcessTimerOrBlockTask+0x44>
    4ec8:	4d c0       	rjmp	.+154    	; 0x4f64 <prvProcessTimerOrBlockTask+0xde>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4eca:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ecc:	88 23       	and	r24, r24
    4ece:	d9 f4       	brne	.+54     	; 0x4f06 <prvProcessTimerOrBlockTask+0x80>
    4ed0:	2e 81       	ldd	r18, Y+6	; 0x06
    4ed2:	3f 81       	ldd	r19, Y+7	; 0x07
    4ed4:	48 85       	ldd	r20, Y+8	; 0x08
    4ed6:	59 85       	ldd	r21, Y+9	; 0x09
    4ed8:	89 81       	ldd	r24, Y+1	; 0x01
    4eda:	9a 81       	ldd	r25, Y+2	; 0x02
    4edc:	ab 81       	ldd	r26, Y+3	; 0x03
    4ede:	bc 81       	ldd	r27, Y+4	; 0x04
    4ee0:	82 17       	cp	r24, r18
    4ee2:	93 07       	cpc	r25, r19
    4ee4:	a4 07       	cpc	r26, r20
    4ee6:	b5 07       	cpc	r27, r21
    4ee8:	70 f0       	brcs	.+28     	; 0x4f06 <prvProcessTimerOrBlockTask+0x80>
                {
                    ( void ) xTaskResumeAll();
    4eea:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4eee:	29 81       	ldd	r18, Y+1	; 0x01
    4ef0:	3a 81       	ldd	r19, Y+2	; 0x02
    4ef2:	4b 81       	ldd	r20, Y+3	; 0x03
    4ef4:	5c 81       	ldd	r21, Y+4	; 0x04
    4ef6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ef8:	9f 81       	ldd	r25, Y+7	; 0x07
    4efa:	a8 85       	ldd	r26, Y+8	; 0x08
    4efc:	b9 85       	ldd	r27, Y+9	; 0x09
    4efe:	bc 01       	movw	r22, r24
    4f00:	cd 01       	movw	r24, r26
    4f02:	36 df       	rcall	.-404    	; 0x4d70 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    4f04:	31 c0       	rjmp	.+98     	; 0x4f68 <prvProcessTimerOrBlockTask+0xe2>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    4f06:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f08:	88 23       	and	r24, r24
    4f0a:	59 f0       	breq	.+22     	; 0x4f22 <prvProcessTimerOrBlockTask+0x9c>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4f0c:	80 91 e3 11 	lds	r24, 0x11E3	; 0x8011e3 <pxOverflowTimerList>
    4f10:	90 91 e4 11 	lds	r25, 0x11E4	; 0x8011e4 <pxOverflowTimerList+0x1>
    4f14:	fc 01       	movw	r30, r24
    4f16:	90 81       	ld	r25, Z
    4f18:	81 e0       	ldi	r24, 0x01	; 1
    4f1a:	99 23       	and	r25, r25
    4f1c:	09 f0       	breq	.+2      	; 0x4f20 <prvProcessTimerOrBlockTask+0x9a>
    4f1e:	80 e0       	ldi	r24, 0x00	; 0
    4f20:	8a 87       	std	Y+10, r24	; 0x0a
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    4f22:	2e 81       	ldd	r18, Y+6	; 0x06
    4f24:	3f 81       	ldd	r19, Y+7	; 0x07
    4f26:	48 85       	ldd	r20, Y+8	; 0x08
    4f28:	59 85       	ldd	r21, Y+9	; 0x09
    4f2a:	89 81       	ldd	r24, Y+1	; 0x01
    4f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f2e:	ab 81       	ldd	r26, Y+3	; 0x03
    4f30:	bc 81       	ldd	r27, Y+4	; 0x04
    4f32:	79 01       	movw	r14, r18
    4f34:	8a 01       	movw	r16, r20
    4f36:	e8 1a       	sub	r14, r24
    4f38:	f9 0a       	sbc	r15, r25
    4f3a:	0a 0b       	sbc	r16, r26
    4f3c:	1b 0b       	sbc	r17, r27
    4f3e:	d8 01       	movw	r26, r16
    4f40:	c7 01       	movw	r24, r14
    4f42:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <xTimerQueue>
    4f46:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <xTimerQueue+0x1>
    4f4a:	2a 85       	ldd	r18, Y+10	; 0x0a
    4f4c:	ac 01       	movw	r20, r24
    4f4e:	bd 01       	movw	r22, r26
    4f50:	cf 01       	movw	r24, r30
    4f52:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    4f56:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
    4f5a:	88 23       	and	r24, r24
    4f5c:	29 f4       	brne	.+10     	; 0x4f68 <prvProcessTimerOrBlockTask+0xe2>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    4f5e:	0e 94 8b 07 	call	0xf16	; 0xf16 <vPortYield>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    4f62:	02 c0       	rjmp	.+4      	; 0x4f68 <prvProcessTimerOrBlockTask+0xe2>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    4f64:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <xTaskResumeAll>
            }
        }
    }
    4f68:	00 00       	nop
    4f6a:	2a 96       	adiw	r28, 0x0a	; 10
    4f6c:	0f b6       	in	r0, 0x3f	; 63
    4f6e:	f8 94       	cli
    4f70:	de bf       	out	0x3e, r29	; 62
    4f72:	0f be       	out	0x3f, r0	; 63
    4f74:	cd bf       	out	0x3d, r28	; 61
    4f76:	df 91       	pop	r29
    4f78:	cf 91       	pop	r28
    4f7a:	1f 91       	pop	r17
    4f7c:	0f 91       	pop	r16
    4f7e:	ff 90       	pop	r15
    4f80:	ef 90       	pop	r14
    4f82:	08 95       	ret

00004f84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    4f84:	cf 93       	push	r28
    4f86:	df 93       	push	r29
    4f88:	00 d0       	rcall	.+0      	; 0x4f8a <prvGetNextExpireTime+0x6>
    4f8a:	00 d0       	rcall	.+0      	; 0x4f8c <prvGetNextExpireTime+0x8>
    4f8c:	cd b7       	in	r28, 0x3d	; 61
    4f8e:	de b7       	in	r29, 0x3e	; 62
    4f90:	9e 83       	std	Y+6, r25	; 0x06
    4f92:	8d 83       	std	Y+5, r24	; 0x05
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4f94:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <pxCurrentTimerList>
    4f98:	90 91 e2 11 	lds	r25, 0x11E2	; 0x8011e2 <pxCurrentTimerList+0x1>
    4f9c:	fc 01       	movw	r30, r24
    4f9e:	90 81       	ld	r25, Z
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	99 23       	and	r25, r25
    4fa4:	09 f0       	breq	.+2      	; 0x4fa8 <prvGetNextExpireTime+0x24>
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
    4fa8:	28 2f       	mov	r18, r24
    4faa:	8d 81       	ldd	r24, Y+5	; 0x05
    4fac:	9e 81       	ldd	r25, Y+6	; 0x06
    4fae:	fc 01       	movw	r30, r24
    4fb0:	20 83       	st	Z, r18

        if( *pxListWasEmpty == pdFALSE )
    4fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    4fb6:	fc 01       	movw	r30, r24
    4fb8:	80 81       	ld	r24, Z
    4fba:	88 23       	and	r24, r24
    4fbc:	89 f4       	brne	.+34     	; 0x4fe0 <prvGetNextExpireTime+0x5c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4fbe:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <pxCurrentTimerList>
    4fc2:	90 91 e2 11 	lds	r25, 0x11E2	; 0x8011e2 <pxCurrentTimerList+0x1>
    4fc6:	fc 01       	movw	r30, r24
    4fc8:	87 81       	ldd	r24, Z+7	; 0x07
    4fca:	90 85       	ldd	r25, Z+8	; 0x08
    4fcc:	fc 01       	movw	r30, r24
    4fce:	80 81       	ld	r24, Z
    4fd0:	91 81       	ldd	r25, Z+1	; 0x01
    4fd2:	a2 81       	ldd	r26, Z+2	; 0x02
    4fd4:	b3 81       	ldd	r27, Z+3	; 0x03
    4fd6:	89 83       	std	Y+1, r24	; 0x01
    4fd8:	9a 83       	std	Y+2, r25	; 0x02
    4fda:	ab 83       	std	Y+3, r26	; 0x03
    4fdc:	bc 83       	std	Y+4, r27	; 0x04
    4fde:	04 c0       	rjmp	.+8      	; 0x4fe8 <prvGetNextExpireTime+0x64>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    4fe0:	19 82       	std	Y+1, r1	; 0x01
    4fe2:	1a 82       	std	Y+2, r1	; 0x02
    4fe4:	1b 82       	std	Y+3, r1	; 0x03
    4fe6:	1c 82       	std	Y+4, r1	; 0x04
        }

        return xNextExpireTime;
    4fe8:	89 81       	ldd	r24, Y+1	; 0x01
    4fea:	9a 81       	ldd	r25, Y+2	; 0x02
    4fec:	ab 81       	ldd	r26, Y+3	; 0x03
    4fee:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    4ff0:	bc 01       	movw	r22, r24
    4ff2:	cd 01       	movw	r24, r26
    4ff4:	26 96       	adiw	r28, 0x06	; 6
    4ff6:	0f b6       	in	r0, 0x3f	; 63
    4ff8:	f8 94       	cli
    4ffa:	de bf       	out	0x3e, r29	; 62
    4ffc:	0f be       	out	0x3f, r0	; 63
    4ffe:	cd bf       	out	0x3d, r28	; 61
    5000:	df 91       	pop	r29
    5002:	cf 91       	pop	r28
    5004:	08 95       	ret

00005006 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    5006:	cf 93       	push	r28
    5008:	df 93       	push	r29
    500a:	00 d0       	rcall	.+0      	; 0x500c <prvSampleTimeNow+0x6>
    500c:	00 d0       	rcall	.+0      	; 0x500e <prvSampleTimeNow+0x8>
    500e:	cd b7       	in	r28, 0x3d	; 61
    5010:	de b7       	in	r29, 0x3e	; 62
    5012:	9e 83       	std	Y+6, r25	; 0x06
    5014:	8d 83       	std	Y+5, r24	; 0x05
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    5016:	0e 94 6e 18 	call	0x30dc	; 0x30dc <xTaskGetTickCount>
    501a:	dc 01       	movw	r26, r24
    501c:	cb 01       	movw	r24, r22
    501e:	89 83       	std	Y+1, r24	; 0x01
    5020:	9a 83       	std	Y+2, r25	; 0x02
    5022:	ab 83       	std	Y+3, r26	; 0x03
    5024:	bc 83       	std	Y+4, r27	; 0x04

        if( xTimeNow < xLastTime )
    5026:	80 91 e9 11 	lds	r24, 0x11E9	; 0x8011e9 <xLastTime.2436>
    502a:	90 91 ea 11 	lds	r25, 0x11EA	; 0x8011ea <xLastTime.2436+0x1>
    502e:	a0 91 eb 11 	lds	r26, 0x11EB	; 0x8011eb <xLastTime.2436+0x2>
    5032:	b0 91 ec 11 	lds	r27, 0x11EC	; 0x8011ec <xLastTime.2436+0x3>
    5036:	29 81       	ldd	r18, Y+1	; 0x01
    5038:	3a 81       	ldd	r19, Y+2	; 0x02
    503a:	4b 81       	ldd	r20, Y+3	; 0x03
    503c:	5c 81       	ldd	r21, Y+4	; 0x04
    503e:	28 17       	cp	r18, r24
    5040:	39 07       	cpc	r19, r25
    5042:	4a 07       	cpc	r20, r26
    5044:	5b 07       	cpc	r21, r27
    5046:	38 f4       	brcc	.+14     	; 0x5056 <prvSampleTimeNow+0x50>
        {
            prvSwitchTimerLists();
    5048:	e6 d1       	rcall	.+972    	; 0x5416 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    504a:	8d 81       	ldd	r24, Y+5	; 0x05
    504c:	9e 81       	ldd	r25, Y+6	; 0x06
    504e:	21 e0       	ldi	r18, 0x01	; 1
    5050:	fc 01       	movw	r30, r24
    5052:	20 83       	st	Z, r18
    5054:	04 c0       	rjmp	.+8      	; 0x505e <prvSampleTimeNow+0x58>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    5056:	8d 81       	ldd	r24, Y+5	; 0x05
    5058:	9e 81       	ldd	r25, Y+6	; 0x06
    505a:	fc 01       	movw	r30, r24
    505c:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    505e:	89 81       	ldd	r24, Y+1	; 0x01
    5060:	9a 81       	ldd	r25, Y+2	; 0x02
    5062:	ab 81       	ldd	r26, Y+3	; 0x03
    5064:	bc 81       	ldd	r27, Y+4	; 0x04
    5066:	80 93 e9 11 	sts	0x11E9, r24	; 0x8011e9 <xLastTime.2436>
    506a:	90 93 ea 11 	sts	0x11EA, r25	; 0x8011ea <xLastTime.2436+0x1>
    506e:	a0 93 eb 11 	sts	0x11EB, r26	; 0x8011eb <xLastTime.2436+0x2>
    5072:	b0 93 ec 11 	sts	0x11EC, r27	; 0x8011ec <xLastTime.2436+0x3>

        return xTimeNow;
    5076:	89 81       	ldd	r24, Y+1	; 0x01
    5078:	9a 81       	ldd	r25, Y+2	; 0x02
    507a:	ab 81       	ldd	r26, Y+3	; 0x03
    507c:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    507e:	bc 01       	movw	r22, r24
    5080:	cd 01       	movw	r24, r26
    5082:	26 96       	adiw	r28, 0x06	; 6
    5084:	0f b6       	in	r0, 0x3f	; 63
    5086:	f8 94       	cli
    5088:	de bf       	out	0x3e, r29	; 62
    508a:	0f be       	out	0x3f, r0	; 63
    508c:	cd bf       	out	0x3d, r28	; 61
    508e:	df 91       	pop	r29
    5090:	cf 91       	pop	r28
    5092:	08 95       	ret

00005094 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    5094:	cf 92       	push	r12
    5096:	df 92       	push	r13
    5098:	ef 92       	push	r14
    509a:	ff 92       	push	r15
    509c:	0f 93       	push	r16
    509e:	1f 93       	push	r17
    50a0:	cf 93       	push	r28
    50a2:	df 93       	push	r29
    50a4:	cd b7       	in	r28, 0x3d	; 61
    50a6:	de b7       	in	r29, 0x3e	; 62
    50a8:	2f 97       	sbiw	r28, 0x0f	; 15
    50aa:	0f b6       	in	r0, 0x3f	; 63
    50ac:	f8 94       	cli
    50ae:	de bf       	out	0x3e, r29	; 62
    50b0:	0f be       	out	0x3f, r0	; 63
    50b2:	cd bf       	out	0x3d, r28	; 61
    50b4:	9b 83       	std	Y+3, r25	; 0x03
    50b6:	8a 83       	std	Y+2, r24	; 0x02
    50b8:	4c 83       	std	Y+4, r20	; 0x04
    50ba:	5d 83       	std	Y+5, r21	; 0x05
    50bc:	6e 83       	std	Y+6, r22	; 0x06
    50be:	7f 83       	std	Y+7, r23	; 0x07
    50c0:	08 87       	std	Y+8, r16	; 0x08
    50c2:	19 87       	std	Y+9, r17	; 0x09
    50c4:	2a 87       	std	Y+10, r18	; 0x0a
    50c6:	3b 87       	std	Y+11, r19	; 0x0b
    50c8:	cc 86       	std	Y+12, r12	; 0x0c
    50ca:	dd 86       	std	Y+13, r13	; 0x0d
    50cc:	ee 86       	std	Y+14, r14	; 0x0e
    50ce:	ff 86       	std	Y+15, r15	; 0x0f
        BaseType_t xProcessTimerNow = pdFALSE;
    50d0:	19 82       	std	Y+1, r1	; 0x01

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    50d2:	2a 81       	ldd	r18, Y+2	; 0x02
    50d4:	3b 81       	ldd	r19, Y+3	; 0x03
    50d6:	8c 81       	ldd	r24, Y+4	; 0x04
    50d8:	9d 81       	ldd	r25, Y+5	; 0x05
    50da:	ae 81       	ldd	r26, Y+6	; 0x06
    50dc:	bf 81       	ldd	r27, Y+7	; 0x07
    50de:	f9 01       	movw	r30, r18
    50e0:	82 83       	std	Z+2, r24	; 0x02
    50e2:	93 83       	std	Z+3, r25	; 0x03
    50e4:	a4 83       	std	Z+4, r26	; 0x04
    50e6:	b5 83       	std	Z+5, r27	; 0x05
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    50e8:	8a 81       	ldd	r24, Y+2	; 0x02
    50ea:	9b 81       	ldd	r25, Y+3	; 0x03
    50ec:	2a 81       	ldd	r18, Y+2	; 0x02
    50ee:	3b 81       	ldd	r19, Y+3	; 0x03
    50f0:	fc 01       	movw	r30, r24
    50f2:	33 87       	std	Z+11, r19	; 0x0b
    50f4:	22 87       	std	Z+10, r18	; 0x0a

        if( xNextExpiryTime <= xTimeNow )
    50f6:	2c 81       	ldd	r18, Y+4	; 0x04
    50f8:	3d 81       	ldd	r19, Y+5	; 0x05
    50fa:	4e 81       	ldd	r20, Y+6	; 0x06
    50fc:	5f 81       	ldd	r21, Y+7	; 0x07
    50fe:	88 85       	ldd	r24, Y+8	; 0x08
    5100:	99 85       	ldd	r25, Y+9	; 0x09
    5102:	aa 85       	ldd	r26, Y+10	; 0x0a
    5104:	bb 85       	ldd	r27, Y+11	; 0x0b
    5106:	82 17       	cp	r24, r18
    5108:	93 07       	cpc	r25, r19
    510a:	a4 07       	cpc	r26, r20
    510c:	b5 07       	cpc	r27, r21
    510e:	40 f1       	brcs	.+80     	; 0x5160 <prvInsertTimerInActiveList+0xcc>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5110:	28 85       	ldd	r18, Y+8	; 0x08
    5112:	39 85       	ldd	r19, Y+9	; 0x09
    5114:	4a 85       	ldd	r20, Y+10	; 0x0a
    5116:	5b 85       	ldd	r21, Y+11	; 0x0b
    5118:	8c 85       	ldd	r24, Y+12	; 0x0c
    511a:	9d 85       	ldd	r25, Y+13	; 0x0d
    511c:	ae 85       	ldd	r26, Y+14	; 0x0e
    511e:	bf 85       	ldd	r27, Y+15	; 0x0f
    5120:	28 1b       	sub	r18, r24
    5122:	39 0b       	sbc	r19, r25
    5124:	4a 0b       	sbc	r20, r26
    5126:	5b 0b       	sbc	r21, r27
    5128:	8a 81       	ldd	r24, Y+2	; 0x02
    512a:	9b 81       	ldd	r25, Y+3	; 0x03
    512c:	fc 01       	movw	r30, r24
    512e:	86 85       	ldd	r24, Z+14	; 0x0e
    5130:	97 85       	ldd	r25, Z+15	; 0x0f
    5132:	a0 89       	ldd	r26, Z+16	; 0x10
    5134:	b1 89       	ldd	r27, Z+17	; 0x11
    5136:	28 17       	cp	r18, r24
    5138:	39 07       	cpc	r19, r25
    513a:	4a 07       	cpc	r20, r26
    513c:	5b 07       	cpc	r21, r27
    513e:	18 f0       	brcs	.+6      	; 0x5146 <prvInsertTimerInActiveList+0xb2>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    5140:	81 e0       	ldi	r24, 0x01	; 1
    5142:	89 83       	std	Y+1, r24	; 0x01
    5144:	36 c0       	rjmp	.+108    	; 0x51b2 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5146:	8a 81       	ldd	r24, Y+2	; 0x02
    5148:	9b 81       	ldd	r25, Y+3	; 0x03
    514a:	9c 01       	movw	r18, r24
    514c:	2e 5f       	subi	r18, 0xFE	; 254
    514e:	3f 4f       	sbci	r19, 0xFF	; 255
    5150:	80 91 e3 11 	lds	r24, 0x11E3	; 0x8011e3 <pxOverflowTimerList>
    5154:	90 91 e4 11 	lds	r25, 0x11E4	; 0x8011e4 <pxOverflowTimerList+0x1>
    5158:	b9 01       	movw	r22, r18
    515a:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInsert>
    515e:	29 c0       	rjmp	.+82     	; 0x51b2 <prvInsertTimerInActiveList+0x11e>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5160:	28 85       	ldd	r18, Y+8	; 0x08
    5162:	39 85       	ldd	r19, Y+9	; 0x09
    5164:	4a 85       	ldd	r20, Y+10	; 0x0a
    5166:	5b 85       	ldd	r21, Y+11	; 0x0b
    5168:	8c 85       	ldd	r24, Y+12	; 0x0c
    516a:	9d 85       	ldd	r25, Y+13	; 0x0d
    516c:	ae 85       	ldd	r26, Y+14	; 0x0e
    516e:	bf 85       	ldd	r27, Y+15	; 0x0f
    5170:	28 17       	cp	r18, r24
    5172:	39 07       	cpc	r19, r25
    5174:	4a 07       	cpc	r20, r26
    5176:	5b 07       	cpc	r21, r27
    5178:	80 f4       	brcc	.+32     	; 0x519a <prvInsertTimerInActiveList+0x106>
    517a:	2c 81       	ldd	r18, Y+4	; 0x04
    517c:	3d 81       	ldd	r19, Y+5	; 0x05
    517e:	4e 81       	ldd	r20, Y+6	; 0x06
    5180:	5f 81       	ldd	r21, Y+7	; 0x07
    5182:	8c 85       	ldd	r24, Y+12	; 0x0c
    5184:	9d 85       	ldd	r25, Y+13	; 0x0d
    5186:	ae 85       	ldd	r26, Y+14	; 0x0e
    5188:	bf 85       	ldd	r27, Y+15	; 0x0f
    518a:	28 17       	cp	r18, r24
    518c:	39 07       	cpc	r19, r25
    518e:	4a 07       	cpc	r20, r26
    5190:	5b 07       	cpc	r21, r27
    5192:	18 f0       	brcs	.+6      	; 0x519a <prvInsertTimerInActiveList+0x106>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	89 83       	std	Y+1, r24	; 0x01
    5198:	0c c0       	rjmp	.+24     	; 0x51b2 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    519a:	8a 81       	ldd	r24, Y+2	; 0x02
    519c:	9b 81       	ldd	r25, Y+3	; 0x03
    519e:	9c 01       	movw	r18, r24
    51a0:	2e 5f       	subi	r18, 0xFE	; 254
    51a2:	3f 4f       	sbci	r19, 0xFF	; 255
    51a4:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <pxCurrentTimerList>
    51a8:	90 91 e2 11 	lds	r25, 0x11E2	; 0x8011e2 <pxCurrentTimerList+0x1>
    51ac:	b9 01       	movw	r22, r18
    51ae:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInsert>
            }
        }

        return xProcessTimerNow;
    51b2:	89 81       	ldd	r24, Y+1	; 0x01
    }
    51b4:	2f 96       	adiw	r28, 0x0f	; 15
    51b6:	0f b6       	in	r0, 0x3f	; 63
    51b8:	f8 94       	cli
    51ba:	de bf       	out	0x3e, r29	; 62
    51bc:	0f be       	out	0x3f, r0	; 63
    51be:	cd bf       	out	0x3d, r28	; 61
    51c0:	df 91       	pop	r29
    51c2:	cf 91       	pop	r28
    51c4:	1f 91       	pop	r17
    51c6:	0f 91       	pop	r16
    51c8:	ff 90       	pop	r15
    51ca:	ef 90       	pop	r14
    51cc:	df 90       	pop	r13
    51ce:	cf 90       	pop	r12
    51d0:	08 95       	ret

000051d2 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    51d2:	cf 92       	push	r12
    51d4:	df 92       	push	r13
    51d6:	ef 92       	push	r14
    51d8:	ff 92       	push	r15
    51da:	0f 93       	push	r16
    51dc:	1f 93       	push	r17
    51de:	cf 93       	push	r28
    51e0:	df 93       	push	r29
    51e2:	cd b7       	in	r28, 0x3d	; 61
    51e4:	de b7       	in	r29, 0x3e	; 62
    51e6:	2f 97       	sbiw	r28, 0x0f	; 15
    51e8:	0f b6       	in	r0, 0x3f	; 63
    51ea:	f8 94       	cli
    51ec:	de bf       	out	0x3e, r29	; 62
    51ee:	0f be       	out	0x3f, r0	; 63
    51f0:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    51f2:	f2 c0       	rjmp	.+484    	; 0x53d8 <prvProcessReceivedCommands+0x206>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    51f4:	88 85       	ldd	r24, Y+8	; 0x08
    51f6:	88 23       	and	r24, r24
    51f8:	0c f4       	brge	.+2      	; 0x51fc <prvProcessReceivedCommands+0x2a>
    51fa:	ee c0       	rjmp	.+476    	; 0x53d8 <prvProcessReceivedCommands+0x206>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    51fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    51fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5200:	9a 83       	std	Y+2, r25	; 0x02
    5202:	89 83       	std	Y+1, r24	; 0x01

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    5204:	89 81       	ldd	r24, Y+1	; 0x01
    5206:	9a 81       	ldd	r25, Y+2	; 0x02
    5208:	fc 01       	movw	r30, r24
    520a:	84 85       	ldd	r24, Z+12	; 0x0c
    520c:	95 85       	ldd	r25, Z+13	; 0x0d
    520e:	89 2b       	or	r24, r25
    5210:	29 f0       	breq	.+10     	; 0x521c <prvProcessReceivedCommands+0x4a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5212:	89 81       	ldd	r24, Y+1	; 0x01
    5214:	9a 81       	ldd	r25, Y+2	; 0x02
    5216:	02 96       	adiw	r24, 0x02	; 2
    5218:	0e 94 6e 06 	call	0xcdc	; 0xcdc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    521c:	ce 01       	movw	r24, r28
    521e:	0f 96       	adiw	r24, 0x0f	; 15
    5220:	f2 de       	rcall	.-540    	; 0x5006 <prvSampleTimeNow>
    5222:	dc 01       	movw	r26, r24
    5224:	cb 01       	movw	r24, r22
    5226:	8b 83       	std	Y+3, r24	; 0x03
    5228:	9c 83       	std	Y+4, r25	; 0x04
    522a:	ad 83       	std	Y+5, r26	; 0x05
    522c:	be 83       	std	Y+6, r27	; 0x06

                switch( xMessage.xMessageID )
    522e:	88 85       	ldd	r24, Y+8	; 0x08
    5230:	08 2e       	mov	r0, r24
    5232:	00 0c       	add	r0, r0
    5234:	99 0b       	sbc	r25, r25
    5236:	09 2e       	mov	r0, r25
    5238:	00 0c       	add	r0, r0
    523a:	aa 0b       	sbc	r26, r26
    523c:	bb 0b       	sbc	r27, r27
    523e:	40 e0       	ldi	r20, 0x00	; 0
    5240:	50 e0       	ldi	r21, 0x00	; 0
    5242:	29 e0       	ldi	r18, 0x09	; 9
    5244:	30 e0       	ldi	r19, 0x00	; 0
    5246:	84 1b       	sub	r24, r20
    5248:	95 0b       	sbc	r25, r21
    524a:	28 17       	cp	r18, r24
    524c:	39 07       	cpc	r19, r25
    524e:	08 f4       	brcc	.+2      	; 0x5252 <prvProcessReceivedCommands+0x80>
    5250:	c2 c0       	rjmp	.+388    	; 0x53d6 <prvProcessReceivedCommands+0x204>
    5252:	fc 01       	movw	r30, r24
    5254:	88 27       	eor	r24, r24
    5256:	ee 58       	subi	r30, 0x8E	; 142
    5258:	ff 4f       	sbci	r31, 0xFF	; 255
    525a:	8f 4f       	sbci	r24, 0xFF	; 255
    525c:	0c 94 84 39 	jmp	0x7308	; 0x7308 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    5260:	89 81       	ldd	r24, Y+1	; 0x01
    5262:	9a 81       	ldd	r25, Y+2	; 0x02
    5264:	fc 01       	movw	r30, r24
    5266:	86 89       	ldd	r24, Z+22	; 0x16
    5268:	28 2f       	mov	r18, r24
    526a:	21 60       	ori	r18, 0x01	; 1
    526c:	89 81       	ldd	r24, Y+1	; 0x01
    526e:	9a 81       	ldd	r25, Y+2	; 0x02
    5270:	fc 01       	movw	r30, r24
    5272:	26 8b       	std	Z+22, r18	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    5274:	e9 84       	ldd	r14, Y+9	; 0x09
    5276:	fa 84       	ldd	r15, Y+10	; 0x0a
    5278:	0b 85       	ldd	r16, Y+11	; 0x0b
    527a:	1c 85       	ldd	r17, Y+12	; 0x0c
    527c:	29 85       	ldd	r18, Y+9	; 0x09
    527e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5280:	4b 85       	ldd	r20, Y+11	; 0x0b
    5282:	5c 85       	ldd	r21, Y+12	; 0x0c
    5284:	89 81       	ldd	r24, Y+1	; 0x01
    5286:	9a 81       	ldd	r25, Y+2	; 0x02
    5288:	fc 01       	movw	r30, r24
    528a:	86 85       	ldd	r24, Z+14	; 0x0e
    528c:	97 85       	ldd	r25, Z+15	; 0x0f
    528e:	a0 89       	ldd	r26, Z+16	; 0x10
    5290:	b1 89       	ldd	r27, Z+17	; 0x11
    5292:	82 0f       	add	r24, r18
    5294:	93 1f       	adc	r25, r19
    5296:	a4 1f       	adc	r26, r20
    5298:	b5 1f       	adc	r27, r21
    529a:	2b 81       	ldd	r18, Y+3	; 0x03
    529c:	3c 81       	ldd	r19, Y+4	; 0x04
    529e:	4d 81       	ldd	r20, Y+5	; 0x05
    52a0:	5e 81       	ldd	r21, Y+6	; 0x06
    52a2:	e9 81       	ldd	r30, Y+1	; 0x01
    52a4:	fa 81       	ldd	r31, Y+2	; 0x02
    52a6:	67 01       	movw	r12, r14
    52a8:	78 01       	movw	r14, r16
    52aa:	89 01       	movw	r16, r18
    52ac:	9a 01       	movw	r18, r20
    52ae:	ac 01       	movw	r20, r24
    52b0:	bd 01       	movw	r22, r26
    52b2:	cf 01       	movw	r24, r30
    52b4:	ef de       	rcall	.-546    	; 0x5094 <prvInsertTimerInActiveList>
    52b6:	88 23       	and	r24, r24
    52b8:	09 f4       	brne	.+2      	; 0x52bc <prvProcessReceivedCommands+0xea>
    52ba:	8e c0       	rjmp	.+284    	; 0x53d8 <prvProcessReceivedCommands+0x206>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    52bc:	89 81       	ldd	r24, Y+1	; 0x01
    52be:	9a 81       	ldd	r25, Y+2	; 0x02
    52c0:	fc 01       	movw	r30, r24
    52c2:	24 89       	ldd	r18, Z+20	; 0x14
    52c4:	35 89       	ldd	r19, Z+21	; 0x15
    52c6:	89 81       	ldd	r24, Y+1	; 0x01
    52c8:	9a 81       	ldd	r25, Y+2	; 0x02
    52ca:	f9 01       	movw	r30, r18
    52cc:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    52ce:	89 81       	ldd	r24, Y+1	; 0x01
    52d0:	9a 81       	ldd	r25, Y+2	; 0x02
    52d2:	fc 01       	movw	r30, r24
    52d4:	86 89       	ldd	r24, Z+22	; 0x16
    52d6:	88 2f       	mov	r24, r24
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	84 70       	andi	r24, 0x04	; 4
    52dc:	99 27       	eor	r25, r25
    52de:	89 2b       	or	r24, r25
    52e0:	09 f4       	brne	.+2      	; 0x52e4 <prvProcessReceivedCommands+0x112>
    52e2:	7a c0       	rjmp	.+244    	; 0x53d8 <prvProcessReceivedCommands+0x206>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    52e4:	29 85       	ldd	r18, Y+9	; 0x09
    52e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    52e8:	4b 85       	ldd	r20, Y+11	; 0x0b
    52ea:	5c 85       	ldd	r21, Y+12	; 0x0c
    52ec:	89 81       	ldd	r24, Y+1	; 0x01
    52ee:	9a 81       	ldd	r25, Y+2	; 0x02
    52f0:	fc 01       	movw	r30, r24
    52f2:	86 85       	ldd	r24, Z+14	; 0x0e
    52f4:	97 85       	ldd	r25, Z+15	; 0x0f
    52f6:	a0 89       	ldd	r26, Z+16	; 0x10
    52f8:	b1 89       	ldd	r27, Z+17	; 0x11
    52fa:	82 0f       	add	r24, r18
    52fc:	93 1f       	adc	r25, r19
    52fe:	a4 1f       	adc	r26, r20
    5300:	b5 1f       	adc	r27, r21
    5302:	e9 81       	ldd	r30, Y+1	; 0x01
    5304:	fa 81       	ldd	r31, Y+2	; 0x02
    5306:	c1 2c       	mov	r12, r1
    5308:	d1 2c       	mov	r13, r1
    530a:	76 01       	movw	r14, r12
    530c:	00 e0       	ldi	r16, 0x00	; 0
    530e:	10 e0       	ldi	r17, 0x00	; 0
    5310:	9c 01       	movw	r18, r24
    5312:	ad 01       	movw	r20, r26
    5314:	60 e0       	ldi	r22, 0x00	; 0
    5316:	cf 01       	movw	r24, r30
    5318:	b3 dc       	rcall	.-1690   	; 0x4c80 <xTimerGenericCommand>
    531a:	8f 83       	std	Y+7, r24	; 0x07
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
    531c:	5d c0       	rjmp	.+186    	; 0x53d8 <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    531e:	89 81       	ldd	r24, Y+1	; 0x01
    5320:	9a 81       	ldd	r25, Y+2	; 0x02
    5322:	fc 01       	movw	r30, r24
    5324:	86 89       	ldd	r24, Z+22	; 0x16
    5326:	28 2f       	mov	r18, r24
    5328:	2e 7f       	andi	r18, 0xFE	; 254
    532a:	89 81       	ldd	r24, Y+1	; 0x01
    532c:	9a 81       	ldd	r25, Y+2	; 0x02
    532e:	fc 01       	movw	r30, r24
    5330:	26 8b       	std	Z+22, r18	; 0x16
                        break;
    5332:	52 c0       	rjmp	.+164    	; 0x53d8 <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    5334:	89 81       	ldd	r24, Y+1	; 0x01
    5336:	9a 81       	ldd	r25, Y+2	; 0x02
    5338:	fc 01       	movw	r30, r24
    533a:	86 89       	ldd	r24, Z+22	; 0x16
    533c:	28 2f       	mov	r18, r24
    533e:	21 60       	ori	r18, 0x01	; 1
    5340:	89 81       	ldd	r24, Y+1	; 0x01
    5342:	9a 81       	ldd	r25, Y+2	; 0x02
    5344:	fc 01       	movw	r30, r24
    5346:	26 8b       	std	Z+22, r18	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    5348:	89 85       	ldd	r24, Y+9	; 0x09
    534a:	9a 85       	ldd	r25, Y+10	; 0x0a
    534c:	ab 85       	ldd	r26, Y+11	; 0x0b
    534e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5350:	29 81       	ldd	r18, Y+1	; 0x01
    5352:	3a 81       	ldd	r19, Y+2	; 0x02
    5354:	f9 01       	movw	r30, r18
    5356:	86 87       	std	Z+14, r24	; 0x0e
    5358:	97 87       	std	Z+15, r25	; 0x0f
    535a:	a0 8b       	std	Z+16, r26	; 0x10
    535c:	b1 8b       	std	Z+17, r27	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    535e:	89 81       	ldd	r24, Y+1	; 0x01
    5360:	9a 81       	ldd	r25, Y+2	; 0x02
    5362:	fc 01       	movw	r30, r24
    5364:	26 85       	ldd	r18, Z+14	; 0x0e
    5366:	37 85       	ldd	r19, Z+15	; 0x0f
    5368:	40 89       	ldd	r20, Z+16	; 0x10
    536a:	51 89       	ldd	r21, Z+17	; 0x11
    536c:	8b 81       	ldd	r24, Y+3	; 0x03
    536e:	9c 81       	ldd	r25, Y+4	; 0x04
    5370:	ad 81       	ldd	r26, Y+5	; 0x05
    5372:	be 81       	ldd	r27, Y+6	; 0x06
    5374:	82 0f       	add	r24, r18
    5376:	93 1f       	adc	r25, r19
    5378:	a4 1f       	adc	r26, r20
    537a:	b5 1f       	adc	r27, r21
    537c:	eb 80       	ldd	r14, Y+3	; 0x03
    537e:	fc 80       	ldd	r15, Y+4	; 0x04
    5380:	0d 81       	ldd	r16, Y+5	; 0x05
    5382:	1e 81       	ldd	r17, Y+6	; 0x06
    5384:	2b 81       	ldd	r18, Y+3	; 0x03
    5386:	3c 81       	ldd	r19, Y+4	; 0x04
    5388:	4d 81       	ldd	r20, Y+5	; 0x05
    538a:	5e 81       	ldd	r21, Y+6	; 0x06
    538c:	e9 81       	ldd	r30, Y+1	; 0x01
    538e:	fa 81       	ldd	r31, Y+2	; 0x02
    5390:	67 01       	movw	r12, r14
    5392:	78 01       	movw	r14, r16
    5394:	89 01       	movw	r16, r18
    5396:	9a 01       	movw	r18, r20
    5398:	ac 01       	movw	r20, r24
    539a:	bd 01       	movw	r22, r26
    539c:	cf 01       	movw	r24, r30
    539e:	7a de       	rcall	.-780    	; 0x5094 <prvInsertTimerInActiveList>
                        break;
    53a0:	1b c0       	rjmp	.+54     	; 0x53d8 <prvProcessReceivedCommands+0x206>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    53a2:	89 81       	ldd	r24, Y+1	; 0x01
    53a4:	9a 81       	ldd	r25, Y+2	; 0x02
    53a6:	fc 01       	movw	r30, r24
    53a8:	86 89       	ldd	r24, Z+22	; 0x16
    53aa:	88 2f       	mov	r24, r24
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	82 70       	andi	r24, 0x02	; 2
    53b0:	99 27       	eor	r25, r25
    53b2:	89 2b       	or	r24, r25
    53b4:	29 f4       	brne	.+10     	; 0x53c0 <prvProcessReceivedCommands+0x1ee>
                                {
                                    vPortFree( pxTimer );
    53b6:	89 81       	ldd	r24, Y+1	; 0x01
    53b8:	9a 81       	ldd	r25, Y+2	; 0x02
    53ba:	0e 94 f7 03 	call	0x7ee	; 0x7ee <vPortFree>
    53be:	0c c0       	rjmp	.+24     	; 0x53d8 <prvProcessReceivedCommands+0x206>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    53c0:	89 81       	ldd	r24, Y+1	; 0x01
    53c2:	9a 81       	ldd	r25, Y+2	; 0x02
    53c4:	fc 01       	movw	r30, r24
    53c6:	86 89       	ldd	r24, Z+22	; 0x16
    53c8:	28 2f       	mov	r18, r24
    53ca:	2e 7f       	andi	r18, 0xFE	; 254
    53cc:	89 81       	ldd	r24, Y+1	; 0x01
    53ce:	9a 81       	ldd	r25, Y+2	; 0x02
    53d0:	fc 01       	movw	r30, r24
    53d2:	26 8b       	std	Z+22, r18	; 0x16
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
    53d4:	01 c0       	rjmp	.+2      	; 0x53d8 <prvProcessReceivedCommands+0x206>

                    default:
                        /* Don't expect to get here. */
                        break;
    53d6:	00 00       	nop
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    53d8:	80 91 e5 11 	lds	r24, 0x11E5	; 0x8011e5 <xTimerQueue>
    53dc:	90 91 e6 11 	lds	r25, 0x11E6	; 0x8011e6 <xTimerQueue+0x1>
    53e0:	be 01       	movw	r22, r28
    53e2:	68 5f       	subi	r22, 0xF8	; 248
    53e4:	7f 4f       	sbci	r23, 0xFF	; 255
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	a9 01       	movw	r20, r18
    53ec:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <xQueueReceive>
    53f0:	88 23       	and	r24, r24
    53f2:	09 f0       	breq	.+2      	; 0x53f6 <prvProcessReceivedCommands+0x224>
    53f4:	ff ce       	rjmp	.-514    	; 0x51f4 <prvProcessReceivedCommands+0x22>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    53f6:	00 00       	nop
    53f8:	2f 96       	adiw	r28, 0x0f	; 15
    53fa:	0f b6       	in	r0, 0x3f	; 63
    53fc:	f8 94       	cli
    53fe:	de bf       	out	0x3e, r29	; 62
    5400:	0f be       	out	0x3f, r0	; 63
    5402:	cd bf       	out	0x3d, r28	; 61
    5404:	df 91       	pop	r29
    5406:	cf 91       	pop	r28
    5408:	1f 91       	pop	r17
    540a:	0f 91       	pop	r16
    540c:	ff 90       	pop	r15
    540e:	ef 90       	pop	r14
    5410:	df 90       	pop	r13
    5412:	cf 90       	pop	r12
    5414:	08 95       	ret

00005416 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    5416:	cf 92       	push	r12
    5418:	df 92       	push	r13
    541a:	ef 92       	push	r14
    541c:	ff 92       	push	r15
    541e:	0f 93       	push	r16
    5420:	1f 93       	push	r17
    5422:	cf 93       	push	r28
    5424:	df 93       	push	r29
    5426:	cd b7       	in	r28, 0x3d	; 61
    5428:	de b7       	in	r29, 0x3e	; 62
    542a:	2d 97       	sbiw	r28, 0x0d	; 13
    542c:	0f b6       	in	r0, 0x3f	; 63
    542e:	f8 94       	cli
    5430:	de bf       	out	0x3e, r29	; 62
    5432:	0f be       	out	0x3f, r0	; 63
    5434:	cd bf       	out	0x3d, r28	; 61

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5436:	85 c0       	rjmp	.+266    	; 0x5542 <prvSwitchTimerLists+0x12c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5438:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <pxCurrentTimerList>
    543c:	90 91 e2 11 	lds	r25, 0x11E2	; 0x8011e2 <pxCurrentTimerList+0x1>
    5440:	fc 01       	movw	r30, r24
    5442:	87 81       	ldd	r24, Z+7	; 0x07
    5444:	90 85       	ldd	r25, Z+8	; 0x08
    5446:	fc 01       	movw	r30, r24
    5448:	80 81       	ld	r24, Z
    544a:	91 81       	ldd	r25, Z+1	; 0x01
    544c:	a2 81       	ldd	r26, Z+2	; 0x02
    544e:	b3 81       	ldd	r27, Z+3	; 0x03
    5450:	89 83       	std	Y+1, r24	; 0x01
    5452:	9a 83       	std	Y+2, r25	; 0x02
    5454:	ab 83       	std	Y+3, r26	; 0x03
    5456:	bc 83       	std	Y+4, r27	; 0x04

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5458:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <pxCurrentTimerList>
    545c:	90 91 e2 11 	lds	r25, 0x11E2	; 0x8011e2 <pxCurrentTimerList+0x1>
    5460:	fc 01       	movw	r30, r24
    5462:	87 81       	ldd	r24, Z+7	; 0x07
    5464:	90 85       	ldd	r25, Z+8	; 0x08
    5466:	fc 01       	movw	r30, r24
    5468:	80 85       	ldd	r24, Z+8	; 0x08
    546a:	91 85       	ldd	r25, Z+9	; 0x09
    546c:	9e 83       	std	Y+6, r25	; 0x06
    546e:	8d 83       	std	Y+5, r24	; 0x05
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5470:	8d 81       	ldd	r24, Y+5	; 0x05
    5472:	9e 81       	ldd	r25, Y+6	; 0x06
    5474:	02 96       	adiw	r24, 0x02	; 2
    5476:	0e 94 6e 06 	call	0xcdc	; 0xcdc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    547a:	8d 81       	ldd	r24, Y+5	; 0x05
    547c:	9e 81       	ldd	r25, Y+6	; 0x06
    547e:	fc 01       	movw	r30, r24
    5480:	24 89       	ldd	r18, Z+20	; 0x14
    5482:	35 89       	ldd	r19, Z+21	; 0x15
    5484:	8d 81       	ldd	r24, Y+5	; 0x05
    5486:	9e 81       	ldd	r25, Y+6	; 0x06
    5488:	f9 01       	movw	r30, r18
    548a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    548c:	8d 81       	ldd	r24, Y+5	; 0x05
    548e:	9e 81       	ldd	r25, Y+6	; 0x06
    5490:	fc 01       	movw	r30, r24
    5492:	86 89       	ldd	r24, Z+22	; 0x16
    5494:	88 2f       	mov	r24, r24
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	84 70       	andi	r24, 0x04	; 4
    549a:	99 27       	eor	r25, r25
    549c:	89 2b       	or	r24, r25
    549e:	09 f4       	brne	.+2      	; 0x54a2 <prvSwitchTimerLists+0x8c>
    54a0:	50 c0       	rjmp	.+160    	; 0x5542 <prvSwitchTimerLists+0x12c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    54a2:	8d 81       	ldd	r24, Y+5	; 0x05
    54a4:	9e 81       	ldd	r25, Y+6	; 0x06
    54a6:	fc 01       	movw	r30, r24
    54a8:	26 85       	ldd	r18, Z+14	; 0x0e
    54aa:	37 85       	ldd	r19, Z+15	; 0x0f
    54ac:	40 89       	ldd	r20, Z+16	; 0x10
    54ae:	51 89       	ldd	r21, Z+17	; 0x11
    54b0:	89 81       	ldd	r24, Y+1	; 0x01
    54b2:	9a 81       	ldd	r25, Y+2	; 0x02
    54b4:	ab 81       	ldd	r26, Y+3	; 0x03
    54b6:	bc 81       	ldd	r27, Y+4	; 0x04
    54b8:	82 0f       	add	r24, r18
    54ba:	93 1f       	adc	r25, r19
    54bc:	a4 1f       	adc	r26, r20
    54be:	b5 1f       	adc	r27, r21
    54c0:	8f 83       	std	Y+7, r24	; 0x07
    54c2:	98 87       	std	Y+8, r25	; 0x08
    54c4:	a9 87       	std	Y+9, r26	; 0x09
    54c6:	ba 87       	std	Y+10, r27	; 0x0a

                if( xReloadTime > xNextExpireTime )
    54c8:	2f 81       	ldd	r18, Y+7	; 0x07
    54ca:	38 85       	ldd	r19, Y+8	; 0x08
    54cc:	49 85       	ldd	r20, Y+9	; 0x09
    54ce:	5a 85       	ldd	r21, Y+10	; 0x0a
    54d0:	89 81       	ldd	r24, Y+1	; 0x01
    54d2:	9a 81       	ldd	r25, Y+2	; 0x02
    54d4:	ab 81       	ldd	r26, Y+3	; 0x03
    54d6:	bc 81       	ldd	r27, Y+4	; 0x04
    54d8:	82 17       	cp	r24, r18
    54da:	93 07       	cpc	r25, r19
    54dc:	a4 07       	cpc	r26, r20
    54de:	b5 07       	cpc	r27, r21
    54e0:	f8 f4       	brcc	.+62     	; 0x5520 <prvSwitchTimerLists+0x10a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    54e2:	2d 81       	ldd	r18, Y+5	; 0x05
    54e4:	3e 81       	ldd	r19, Y+6	; 0x06
    54e6:	8f 81       	ldd	r24, Y+7	; 0x07
    54e8:	98 85       	ldd	r25, Y+8	; 0x08
    54ea:	a9 85       	ldd	r26, Y+9	; 0x09
    54ec:	ba 85       	ldd	r27, Y+10	; 0x0a
    54ee:	f9 01       	movw	r30, r18
    54f0:	82 83       	std	Z+2, r24	; 0x02
    54f2:	93 83       	std	Z+3, r25	; 0x03
    54f4:	a4 83       	std	Z+4, r26	; 0x04
    54f6:	b5 83       	std	Z+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    54f8:	8d 81       	ldd	r24, Y+5	; 0x05
    54fa:	9e 81       	ldd	r25, Y+6	; 0x06
    54fc:	2d 81       	ldd	r18, Y+5	; 0x05
    54fe:	3e 81       	ldd	r19, Y+6	; 0x06
    5500:	fc 01       	movw	r30, r24
    5502:	33 87       	std	Z+11, r19	; 0x0b
    5504:	22 87       	std	Z+10, r18	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5506:	8d 81       	ldd	r24, Y+5	; 0x05
    5508:	9e 81       	ldd	r25, Y+6	; 0x06
    550a:	9c 01       	movw	r18, r24
    550c:	2e 5f       	subi	r18, 0xFE	; 254
    550e:	3f 4f       	sbci	r19, 0xFF	; 255
    5510:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <pxCurrentTimerList>
    5514:	90 91 e2 11 	lds	r25, 0x11E2	; 0x8011e2 <pxCurrentTimerList+0x1>
    5518:	b9 01       	movw	r22, r18
    551a:	0e 94 e7 05 	call	0xbce	; 0xbce <vListInsert>
    551e:	11 c0       	rjmp	.+34     	; 0x5542 <prvSwitchTimerLists+0x12c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5520:	89 81       	ldd	r24, Y+1	; 0x01
    5522:	9a 81       	ldd	r25, Y+2	; 0x02
    5524:	ab 81       	ldd	r26, Y+3	; 0x03
    5526:	bc 81       	ldd	r27, Y+4	; 0x04
    5528:	ed 81       	ldd	r30, Y+5	; 0x05
    552a:	fe 81       	ldd	r31, Y+6	; 0x06
    552c:	c1 2c       	mov	r12, r1
    552e:	d1 2c       	mov	r13, r1
    5530:	76 01       	movw	r14, r12
    5532:	00 e0       	ldi	r16, 0x00	; 0
    5534:	10 e0       	ldi	r17, 0x00	; 0
    5536:	9c 01       	movw	r18, r24
    5538:	ad 01       	movw	r20, r26
    553a:	60 e0       	ldi	r22, 0x00	; 0
    553c:	cf 01       	movw	r24, r30
    553e:	a0 db       	rcall	.-2240   	; 0x4c80 <xTimerGenericCommand>
    5540:	8b 87       	std	Y+11, r24	; 0x0b

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5542:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <pxCurrentTimerList>
    5546:	90 91 e2 11 	lds	r25, 0x11E2	; 0x8011e2 <pxCurrentTimerList+0x1>
    554a:	fc 01       	movw	r30, r24
    554c:	80 81       	ld	r24, Z
    554e:	88 23       	and	r24, r24
    5550:	09 f0       	breq	.+2      	; 0x5554 <prvSwitchTimerLists+0x13e>
    5552:	72 cf       	rjmp	.-284    	; 0x5438 <prvSwitchTimerLists+0x22>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
    5554:	80 91 e1 11 	lds	r24, 0x11E1	; 0x8011e1 <pxCurrentTimerList>
    5558:	90 91 e2 11 	lds	r25, 0x11E2	; 0x8011e2 <pxCurrentTimerList+0x1>
    555c:	9d 87       	std	Y+13, r25	; 0x0d
    555e:	8c 87       	std	Y+12, r24	; 0x0c
        pxCurrentTimerList = pxOverflowTimerList;
    5560:	80 91 e3 11 	lds	r24, 0x11E3	; 0x8011e3 <pxOverflowTimerList>
    5564:	90 91 e4 11 	lds	r25, 0x11E4	; 0x8011e4 <pxOverflowTimerList+0x1>
    5568:	90 93 e2 11 	sts	0x11E2, r25	; 0x8011e2 <pxCurrentTimerList+0x1>
    556c:	80 93 e1 11 	sts	0x11E1, r24	; 0x8011e1 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    5570:	8c 85       	ldd	r24, Y+12	; 0x0c
    5572:	9d 85       	ldd	r25, Y+13	; 0x0d
    5574:	90 93 e4 11 	sts	0x11E4, r25	; 0x8011e4 <pxOverflowTimerList+0x1>
    5578:	80 93 e3 11 	sts	0x11E3, r24	; 0x8011e3 <pxOverflowTimerList>
    }
    557c:	00 00       	nop
    557e:	2d 96       	adiw	r28, 0x0d	; 13
    5580:	0f b6       	in	r0, 0x3f	; 63
    5582:	f8 94       	cli
    5584:	de bf       	out	0x3e, r29	; 62
    5586:	0f be       	out	0x3f, r0	; 63
    5588:	cd bf       	out	0x3d, r28	; 61
    558a:	df 91       	pop	r29
    558c:	cf 91       	pop	r28
    558e:	1f 91       	pop	r17
    5590:	0f 91       	pop	r16
    5592:	ff 90       	pop	r15
    5594:	ef 90       	pop	r14
    5596:	df 90       	pop	r13
    5598:	cf 90       	pop	r12
    559a:	08 95       	ret

0000559c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    559c:	cf 93       	push	r28
    559e:	df 93       	push	r29
    55a0:	cd b7       	in	r28, 0x3d	; 61
    55a2:	de b7       	in	r29, 0x3e	; 62
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    55a4:	0f b6       	in	r0, 0x3f	; 63
    55a6:	f8 94       	cli
    55a8:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    55aa:	80 91 e5 11 	lds	r24, 0x11E5	; 0x8011e5 <xTimerQueue>
    55ae:	90 91 e6 11 	lds	r25, 0x11E6	; 0x8011e6 <xTimerQueue+0x1>
    55b2:	89 2b       	or	r24, r25
    55b4:	e9 f4       	brne	.+58     	; 0x55f0 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
    55b6:	8b ec       	ldi	r24, 0xCB	; 203
    55b8:	91 e1       	ldi	r25, 0x11	; 17
    55ba:	0e 94 9a 05 	call	0xb34	; 0xb34 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    55be:	86 ed       	ldi	r24, 0xD6	; 214
    55c0:	91 e1       	ldi	r25, 0x11	; 17
    55c2:	0e 94 9a 05 	call	0xb34	; 0xb34 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    55c6:	8b ec       	ldi	r24, 0xCB	; 203
    55c8:	91 e1       	ldi	r25, 0x11	; 17
    55ca:	90 93 e2 11 	sts	0x11E2, r25	; 0x8011e2 <pxCurrentTimerList+0x1>
    55ce:	80 93 e1 11 	sts	0x11E1, r24	; 0x8011e1 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    55d2:	86 ed       	ldi	r24, 0xD6	; 214
    55d4:	91 e1       	ldi	r25, 0x11	; 17
    55d6:	90 93 e4 11 	sts	0x11E4, r25	; 0x8011e4 <pxOverflowTimerList+0x1>
    55da:	80 93 e3 11 	sts	0x11E3, r24	; 0x8011e3 <pxOverflowTimerList>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    55de:	40 e0       	ldi	r20, 0x00	; 0
    55e0:	67 e0       	ldi	r22, 0x07	; 7
    55e2:	8a e0       	ldi	r24, 0x0A	; 10
    55e4:	0e 94 09 09 	call	0x1212	; 0x1212 <xQueueGenericCreate>
    55e8:	90 93 e6 11 	sts	0x11E6, r25	; 0x8011e6 <xTimerQueue+0x1>
    55ec:	80 93 e5 11 	sts	0x11E5, r24	; 0x8011e5 <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    55f0:	0f 90       	pop	r0
    55f2:	0f be       	out	0x3f, r0	; 63
    }
    55f4:	00 00       	nop
    55f6:	df 91       	pop	r29
    55f8:	cf 91       	pop	r28
    55fa:	08 95       	ret

000055fc <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    55fc:	cf 93       	push	r28
    55fe:	df 93       	push	r29
    5600:	cd b7       	in	r28, 0x3d	; 61
    5602:	de b7       	in	r29, 0x3e	; 62
}
    5604:	00 00       	nop
    5606:	df 91       	pop	r29
    5608:	cf 91       	pop	r28
    560a:	08 95       	ret

0000560c <prvSetMainLedOn>:

/**
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
    560c:	cf 93       	push	r28
    560e:	df 93       	push	r29
    5610:	cd b7       	in	r28, 0x3d	; 61
    5612:	de b7       	in	r29, 0x3e	; 62
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    5614:	84 e2       	ldi	r24, 0x24	; 36
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	24 e2       	ldi	r18, 0x24	; 36
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	f9 01       	movw	r30, r18
    561e:	20 81       	ld	r18, Z
    5620:	20 68       	ori	r18, 0x80	; 128
    5622:	fc 01       	movw	r30, r24
    5624:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    5626:	85 e2       	ldi	r24, 0x25	; 37
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	25 e2       	ldi	r18, 0x25	; 37
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	f9 01       	movw	r30, r18
    5630:	20 81       	ld	r18, Z
    5632:	20 68       	ori	r18, 0x80	; 128
    5634:	fc 01       	movw	r30, r24
    5636:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

}
    5638:	00 00       	nop
    563a:	df 91       	pop	r29
    563c:	cf 91       	pop	r28
    563e:	08 95       	ret

00005640 <prvBlinkMainLed>:

/**
 * Private function to blink board led to use it in application hooks
 */
void prvBlinkMainLed( void ) 
{
    5640:	cf 93       	push	r28
    5642:	df 93       	push	r29
    5644:	cd b7       	in	r28, 0x3d	; 61
    5646:	de b7       	in	r29, 0x3e	; 62

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    5648:	83 e2       	ldi	r24, 0x23	; 35
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	23 e2       	ldi	r18, 0x23	; 35
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	f9 01       	movw	r30, r18
    5652:	20 81       	ld	r18, Z
    5654:	20 68       	ori	r18, 0x80	; 128
    5656:	fc 01       	movw	r30, r24
    5658:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle.

#endif

}
    565a:	00 00       	nop
    565c:	df 91       	pop	r29
    565e:	cf 91       	pop	r28
    5660:	08 95       	ret

00005662 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    5662:	cf 93       	push	r28
    5664:	df 93       	push	r29
    5666:	cd b7       	in	r28, 0x3d	; 61
    5668:	de b7       	in	r29, 0x3e	; 62
    566a:	2e 97       	sbiw	r28, 0x0e	; 14
    566c:	0f b6       	in	r0, 0x3f	; 63
    566e:	f8 94       	cli
    5670:	de bf       	out	0x3e, r29	; 62
    5672:	0f be       	out	0x3f, r0	; 63
    5674:	cd bf       	out	0x3d, r28	; 61
    prvSetMainLedOn(); // Main LED on.
    5676:	ca df       	rcall	.-108    	; 0x560c <prvSetMainLedOn>
    5678:	80 e0       	ldi	r24, 0x00	; 0
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	a8 e4       	ldi	r26, 0x48	; 72
    567e:	b2 e4       	ldi	r27, 0x42	; 66
    5680:	89 83       	std	Y+1, r24	; 0x01
    5682:	9a 83       	std	Y+2, r25	; 0x02
    5684:	ab 83       	std	Y+3, r26	; 0x03
    5686:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5688:	20 e0       	ldi	r18, 0x00	; 0
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	4a e7       	ldi	r20, 0x7A	; 122
    568e:	55 e4       	ldi	r21, 0x45	; 69
    5690:	69 81       	ldd	r22, Y+1	; 0x01
    5692:	7a 81       	ldd	r23, Y+2	; 0x02
    5694:	8b 81       	ldd	r24, Y+3	; 0x03
    5696:	9c 81       	ldd	r25, Y+4	; 0x04
    5698:	7c d2       	rcall	.+1272   	; 0x5b92 <__mulsf3>
    569a:	dc 01       	movw	r26, r24
    569c:	cb 01       	movw	r24, r22
    569e:	8d 83       	std	Y+5, r24	; 0x05
    56a0:	9e 83       	std	Y+6, r25	; 0x06
    56a2:	af 83       	std	Y+7, r26	; 0x07
    56a4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    56a6:	20 e0       	ldi	r18, 0x00	; 0
    56a8:	30 e0       	ldi	r19, 0x00	; 0
    56aa:	40 e8       	ldi	r20, 0x80	; 128
    56ac:	5f e3       	ldi	r21, 0x3F	; 63
    56ae:	6d 81       	ldd	r22, Y+5	; 0x05
    56b0:	7e 81       	ldd	r23, Y+6	; 0x06
    56b2:	8f 81       	ldd	r24, Y+7	; 0x07
    56b4:	98 85       	ldd	r25, Y+8	; 0x08
    56b6:	ec d1       	rcall	.+984    	; 0x5a90 <__cmpsf2>
    56b8:	88 23       	and	r24, r24
    56ba:	2c f4       	brge	.+10     	; 0x56c6 <vApplicationMallocFailedHook+0x64>
		__ticks = 1;
    56bc:	81 e0       	ldi	r24, 0x01	; 1
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	9a 87       	std	Y+10, r25	; 0x0a
    56c2:	89 87       	std	Y+9, r24	; 0x09
    56c4:	3b c0       	rjmp	.+118    	; 0x573c <vApplicationMallocFailedHook+0xda>
	else if (__tmp > 65535)
    56c6:	20 e0       	ldi	r18, 0x00	; 0
    56c8:	3f ef       	ldi	r19, 0xFF	; 255
    56ca:	4f e7       	ldi	r20, 0x7F	; 127
    56cc:	57 e4       	ldi	r21, 0x47	; 71
    56ce:	6d 81       	ldd	r22, Y+5	; 0x05
    56d0:	7e 81       	ldd	r23, Y+6	; 0x06
    56d2:	8f 81       	ldd	r24, Y+7	; 0x07
    56d4:	98 85       	ldd	r25, Y+8	; 0x08
    56d6:	59 d2       	rcall	.+1202   	; 0x5b8a <__gesf2>
    56d8:	18 16       	cp	r1, r24
    56da:	3c f5       	brge	.+78     	; 0x572a <vApplicationMallocFailedHook+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56dc:	20 e0       	ldi	r18, 0x00	; 0
    56de:	30 e0       	ldi	r19, 0x00	; 0
    56e0:	40 e2       	ldi	r20, 0x20	; 32
    56e2:	51 e4       	ldi	r21, 0x41	; 65
    56e4:	69 81       	ldd	r22, Y+1	; 0x01
    56e6:	7a 81       	ldd	r23, Y+2	; 0x02
    56e8:	8b 81       	ldd	r24, Y+3	; 0x03
    56ea:	9c 81       	ldd	r25, Y+4	; 0x04
    56ec:	52 d2       	rcall	.+1188   	; 0x5b92 <__mulsf3>
    56ee:	dc 01       	movw	r26, r24
    56f0:	cb 01       	movw	r24, r22
    56f2:	bc 01       	movw	r22, r24
    56f4:	cd 01       	movw	r24, r26
    56f6:	d0 d1       	rcall	.+928    	; 0x5a98 <__fixunssfsi>
    56f8:	dc 01       	movw	r26, r24
    56fa:	cb 01       	movw	r24, r22
    56fc:	9a 87       	std	Y+10, r25	; 0x0a
    56fe:	89 87       	std	Y+9, r24	; 0x09
    5700:	0f c0       	rjmp	.+30     	; 0x5720 <vApplicationMallocFailedHook+0xbe>
    5702:	80 e9       	ldi	r24, 0x90	; 144
    5704:	91 e0       	ldi	r25, 0x01	; 1
    5706:	9c 87       	std	Y+12, r25	; 0x0c
    5708:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    570a:	8b 85       	ldd	r24, Y+11	; 0x0b
    570c:	9c 85       	ldd	r25, Y+12	; 0x0c
    570e:	01 97       	sbiw	r24, 0x01	; 1
    5710:	f1 f7       	brne	.-4      	; 0x570e <vApplicationMallocFailedHook+0xac>
    5712:	9c 87       	std	Y+12, r25	; 0x0c
    5714:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5716:	89 85       	ldd	r24, Y+9	; 0x09
    5718:	9a 85       	ldd	r25, Y+10	; 0x0a
    571a:	01 97       	sbiw	r24, 0x01	; 1
    571c:	9a 87       	std	Y+10, r25	; 0x0a
    571e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5720:	89 85       	ldd	r24, Y+9	; 0x09
    5722:	9a 85       	ldd	r25, Y+10	; 0x0a
    5724:	89 2b       	or	r24, r25
    5726:	69 f7       	brne	.-38     	; 0x5702 <vApplicationMallocFailedHook+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5728:	13 c0       	rjmp	.+38     	; 0x5750 <vApplicationMallocFailedHook+0xee>
    572a:	6d 81       	ldd	r22, Y+5	; 0x05
    572c:	7e 81       	ldd	r23, Y+6	; 0x06
    572e:	8f 81       	ldd	r24, Y+7	; 0x07
    5730:	98 85       	ldd	r25, Y+8	; 0x08
    5732:	b2 d1       	rcall	.+868    	; 0x5a98 <__fixunssfsi>
    5734:	dc 01       	movw	r26, r24
    5736:	cb 01       	movw	r24, r22
    5738:	9a 87       	std	Y+10, r25	; 0x0a
    573a:	89 87       	std	Y+9, r24	; 0x09
    573c:	89 85       	ldd	r24, Y+9	; 0x09
    573e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5740:	9e 87       	std	Y+14, r25	; 0x0e
    5742:	8d 87       	std	Y+13, r24	; 0x0d
    5744:	8d 85       	ldd	r24, Y+13	; 0x0d
    5746:	9e 85       	ldd	r25, Y+14	; 0x0e
    5748:	01 97       	sbiw	r24, 0x01	; 1
    574a:	f1 f7       	brne	.-4      	; 0x5748 <vApplicationMallocFailedHook+0xe6>
    574c:	9e 87       	std	Y+14, r25	; 0x0e
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    574e:	8d 87       	std	Y+13, r24	; 0x0d
    5750:	77 df       	rcall	.-274    	; 0x5640 <prvBlinkMainLed>
    }
    5752:	92 cf       	rjmp	.-220    	; 0x5678 <vApplicationMallocFailedHook+0x16>

00005754 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    char * pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{
    5754:	cf 93       	push	r28
    5756:	df 93       	push	r29
    5758:	cd b7       	in	r28, 0x3d	; 61
    575a:	de b7       	in	r29, 0x3e	; 62
    575c:	62 97       	sbiw	r28, 0x12	; 18
    575e:	0f b6       	in	r0, 0x3f	; 63
    5760:	f8 94       	cli
    5762:	de bf       	out	0x3e, r29	; 62
    5764:	0f be       	out	0x3f, r0	; 63
    5766:	cd bf       	out	0x3d, r28	; 61
    5768:	98 8b       	std	Y+16, r25	; 0x10
    576a:	8f 87       	std	Y+15, r24	; 0x0f
    576c:	7a 8b       	std	Y+18, r23	; 0x12
    576e:	69 8b       	std	Y+17, r22	; 0x11

    prvSetMainLedOn(); // Main LED on.
    5770:	4d df       	rcall	.-358    	; 0x560c <prvSetMainLedOn>
    5772:	80 e0       	ldi	r24, 0x00	; 0
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	aa ef       	ldi	r26, 0xFA	; 250
    5778:	b4 e4       	ldi	r27, 0x44	; 68
    577a:	89 83       	std	Y+1, r24	; 0x01
    577c:	9a 83       	std	Y+2, r25	; 0x02
    577e:	ab 83       	std	Y+3, r26	; 0x03
    5780:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5782:	20 e0       	ldi	r18, 0x00	; 0
    5784:	30 e0       	ldi	r19, 0x00	; 0
    5786:	4a e7       	ldi	r20, 0x7A	; 122
    5788:	55 e4       	ldi	r21, 0x45	; 69
    578a:	69 81       	ldd	r22, Y+1	; 0x01
    578c:	7a 81       	ldd	r23, Y+2	; 0x02
    578e:	8b 81       	ldd	r24, Y+3	; 0x03
    5790:	9c 81       	ldd	r25, Y+4	; 0x04
    5792:	ff d1       	rcall	.+1022   	; 0x5b92 <__mulsf3>
    5794:	dc 01       	movw	r26, r24
    5796:	cb 01       	movw	r24, r22
    5798:	8d 83       	std	Y+5, r24	; 0x05
    579a:	9e 83       	std	Y+6, r25	; 0x06
    579c:	af 83       	std	Y+7, r26	; 0x07
    579e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    57a0:	20 e0       	ldi	r18, 0x00	; 0
    57a2:	30 e0       	ldi	r19, 0x00	; 0
    57a4:	40 e8       	ldi	r20, 0x80	; 128
    57a6:	5f e3       	ldi	r21, 0x3F	; 63
    57a8:	6d 81       	ldd	r22, Y+5	; 0x05
    57aa:	7e 81       	ldd	r23, Y+6	; 0x06
    57ac:	8f 81       	ldd	r24, Y+7	; 0x07
    57ae:	98 85       	ldd	r25, Y+8	; 0x08
    57b0:	6f d1       	rcall	.+734    	; 0x5a90 <__cmpsf2>
    57b2:	88 23       	and	r24, r24
    57b4:	2c f4       	brge	.+10     	; 0x57c0 <vApplicationStackOverflowHook+0x6c>
		__ticks = 1;
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	9a 87       	std	Y+10, r25	; 0x0a
    57bc:	89 87       	std	Y+9, r24	; 0x09
    57be:	3b c0       	rjmp	.+118    	; 0x5836 <vApplicationStackOverflowHook+0xe2>
	else if (__tmp > 65535)
    57c0:	20 e0       	ldi	r18, 0x00	; 0
    57c2:	3f ef       	ldi	r19, 0xFF	; 255
    57c4:	4f e7       	ldi	r20, 0x7F	; 127
    57c6:	57 e4       	ldi	r21, 0x47	; 71
    57c8:	6d 81       	ldd	r22, Y+5	; 0x05
    57ca:	7e 81       	ldd	r23, Y+6	; 0x06
    57cc:	8f 81       	ldd	r24, Y+7	; 0x07
    57ce:	98 85       	ldd	r25, Y+8	; 0x08
    57d0:	dc d1       	rcall	.+952    	; 0x5b8a <__gesf2>
    57d2:	18 16       	cp	r1, r24
    57d4:	3c f5       	brge	.+78     	; 0x5824 <vApplicationStackOverflowHook+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57d6:	20 e0       	ldi	r18, 0x00	; 0
    57d8:	30 e0       	ldi	r19, 0x00	; 0
    57da:	40 e2       	ldi	r20, 0x20	; 32
    57dc:	51 e4       	ldi	r21, 0x41	; 65
    57de:	69 81       	ldd	r22, Y+1	; 0x01
    57e0:	7a 81       	ldd	r23, Y+2	; 0x02
    57e2:	8b 81       	ldd	r24, Y+3	; 0x03
    57e4:	9c 81       	ldd	r25, Y+4	; 0x04
    57e6:	d5 d1       	rcall	.+938    	; 0x5b92 <__mulsf3>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	bc 01       	movw	r22, r24
    57ee:	cd 01       	movw	r24, r26
    57f0:	53 d1       	rcall	.+678    	; 0x5a98 <__fixunssfsi>
    57f2:	dc 01       	movw	r26, r24
    57f4:	cb 01       	movw	r24, r22
    57f6:	9a 87       	std	Y+10, r25	; 0x0a
    57f8:	89 87       	std	Y+9, r24	; 0x09
    57fa:	0f c0       	rjmp	.+30     	; 0x581a <vApplicationStackOverflowHook+0xc6>
    57fc:	80 e9       	ldi	r24, 0x90	; 144
    57fe:	91 e0       	ldi	r25, 0x01	; 1
    5800:	9c 87       	std	Y+12, r25	; 0x0c
    5802:	8b 87       	std	Y+11, r24	; 0x0b
    5804:	8b 85       	ldd	r24, Y+11	; 0x0b
    5806:	9c 85       	ldd	r25, Y+12	; 0x0c
    5808:	01 97       	sbiw	r24, 0x01	; 1
    580a:	f1 f7       	brne	.-4      	; 0x5808 <vApplicationStackOverflowHook+0xb4>
    580c:	9c 87       	std	Y+12, r25	; 0x0c
    580e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5810:	89 85       	ldd	r24, Y+9	; 0x09
    5812:	9a 85       	ldd	r25, Y+10	; 0x0a
    5814:	01 97       	sbiw	r24, 0x01	; 1
    5816:	9a 87       	std	Y+10, r25	; 0x0a
    5818:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    581a:	89 85       	ldd	r24, Y+9	; 0x09
    581c:	9a 85       	ldd	r25, Y+10	; 0x0a
    581e:	89 2b       	or	r24, r25
    5820:	69 f7       	brne	.-38     	; 0x57fc <vApplicationStackOverflowHook+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5822:	13 c0       	rjmp	.+38     	; 0x584a <vApplicationStackOverflowHook+0xf6>
    5824:	6d 81       	ldd	r22, Y+5	; 0x05
    5826:	7e 81       	ldd	r23, Y+6	; 0x06
    5828:	8f 81       	ldd	r24, Y+7	; 0x07
    582a:	98 85       	ldd	r25, Y+8	; 0x08
    582c:	35 d1       	rcall	.+618    	; 0x5a98 <__fixunssfsi>
    582e:	dc 01       	movw	r26, r24
    5830:	cb 01       	movw	r24, r22
    5832:	9a 87       	std	Y+10, r25	; 0x0a
    5834:	89 87       	std	Y+9, r24	; 0x09
    5836:	89 85       	ldd	r24, Y+9	; 0x09
    5838:	9a 85       	ldd	r25, Y+10	; 0x0a
    583a:	9e 87       	std	Y+14, r25	; 0x0e
    583c:	8d 87       	std	Y+13, r24	; 0x0d
    583e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5840:	9e 85       	ldd	r25, Y+14	; 0x0e
    5842:	01 97       	sbiw	r24, 0x01	; 1
    5844:	f1 f7       	brne	.-4      	; 0x5842 <vApplicationStackOverflowHook+0xee>
    5846:	9e 87       	std	Y+14, r25	; 0x0e

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    5848:	8d 87       	std	Y+13, r24	; 0x0d
    584a:	fa de       	rcall	.-524    	; 0x5640 <prvBlinkMainLed>
    }
    584c:	92 cf       	rjmp	.-220    	; 0x5772 <vApplicationStackOverflowHook+0x1e>

0000584e <create_tasks_and_semaphores>:
MessageBufferHandle_t UpLinkMessageBuffer = NULL;
MessageBufferHandle_t DownLinkMessageBuffer = NULL;

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    584e:	ef 92       	push	r14
    5850:	ff 92       	push	r15
    5852:	0f 93       	push	r16
    5854:	cf 93       	push	r28
    5856:	df 93       	push	r29
    5858:	cd b7       	in	r28, 0x3d	; 61
    585a:	de b7       	in	r29, 0x3e	; 62
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    585c:	80 91 32 13 	lds	r24, 0x1332	; 0x801332 <xTestSemaphore>
    5860:	90 91 33 13 	lds	r25, 0x1333	; 0x801333 <xTestSemaphore+0x1>
    5864:	89 2b       	or	r24, r25
    5866:	c9 f4       	brne	.+50     	; 0x589a <create_tasks_and_semaphores+0x4c>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    5868:	81 e0       	ldi	r24, 0x01	; 1
    586a:	0e 94 bb 09 	call	0x1376	; 0x1376 <xQueueCreateMutex>
    586e:	90 93 33 13 	sts	0x1333, r25	; 0x801333 <xTestSemaphore+0x1>
    5872:	80 93 32 13 	sts	0x1332, r24	; 0x801332 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    5876:	80 91 32 13 	lds	r24, 0x1332	; 0x801332 <xTestSemaphore>
    587a:	90 91 33 13 	lds	r25, 0x1333	; 0x801333 <xTestSemaphore+0x1>
    587e:	89 2b       	or	r24, r25
    5880:	61 f0       	breq	.+24     	; 0x589a <create_tasks_and_semaphores+0x4c>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    5882:	80 91 32 13 	lds	r24, 0x1332	; 0x801332 <xTestSemaphore>
    5886:	90 91 33 13 	lds	r25, 0x1333	; 0x801333 <xTestSemaphore+0x1>
    588a:	00 e0       	ldi	r16, 0x00	; 0
    588c:	20 e0       	ldi	r18, 0x00	; 0
    588e:	30 e0       	ldi	r19, 0x00	; 0
    5890:	a9 01       	movw	r20, r18
    5892:	60 e0       	ldi	r22, 0x00	; 0
    5894:	70 e0       	ldi	r23, 0x00	; 0
    5896:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    589a:	e1 2c       	mov	r14, r1
    589c:	f1 2c       	mov	r15, r1
    589e:	03 e0       	ldi	r16, 0x03	; 3
    58a0:	20 e0       	ldi	r18, 0x00	; 0
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	40 ec       	ldi	r20, 0xC0	; 192
    58a6:	50 e0       	ldi	r21, 0x00	; 0
    58a8:	65 e8       	ldi	r22, 0x85	; 133
    58aa:	73 e0       	ldi	r23, 0x03	; 3
    58ac:	82 eb       	ldi	r24, 0xB2	; 178
    58ae:	9c e2       	ldi	r25, 0x2C	; 44
    58b0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL 
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    58b4:	e1 2c       	mov	r14, r1
    58b6:	f1 2c       	mov	r15, r1
    58b8:	03 e0       	ldi	r16, 0x03	; 3
    58ba:	20 e0       	ldi	r18, 0x00	; 0
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	40 ec       	ldi	r20, 0xC0	; 192
    58c0:	50 e0       	ldi	r21, 0x00	; 0
    58c2:	69 e9       	ldi	r22, 0x99	; 153
    58c4:	73 e0       	ldi	r23, 0x03	; 3
    58c6:	8a e3       	ldi	r24, 0x3A	; 58
    58c8:	91 e0       	ldi	r25, 0x01	; 1
    58ca:	0e 94 74 13 	call	0x26e8	; 0x26e8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    58ce:	e1 2c       	mov	r14, r1
    58d0:	f1 2c       	mov	r15, r1
    58d2:	02 e0       	ldi	r16, 0x02	; 2
    58d4:	20 e0       	ldi	r18, 0x00	; 0
    58d6:	30 e0       	ldi	r19, 0x00	; 0
    58d8:	40 ec       	ldi	r20, 0xC0	; 192
    58da:	50 e0       	ldi	r21, 0x00	; 0
    58dc:	60 eb       	ldi	r22, 0xB0	; 176
    58de:	73 e0       	ldi	r23, 0x03	; 3
    58e0:	8b e7       	ldi	r24, 0x7B	; 123
    58e2:	9c e2       	ldi	r25, 0x2C	; 44
    58e4:	0e 94 74 13 	call	0x26e8	; 0x26e8 <xTaskCreate>
	,  "Task1"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    58e8:	00 00       	nop
    58ea:	df 91       	pop	r29
    58ec:	cf 91       	pop	r28
    58ee:	0f 91       	pop	r16
    58f0:	ff 90       	pop	r15
    58f2:	ef 90       	pop	r14
    58f4:	08 95       	ret

000058f6 <task1>:

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    58f6:	cf 93       	push	r28
    58f8:	df 93       	push	r29
    58fa:	cd b7       	in	r28, 0x3d	; 61
    58fc:	de b7       	in	r29, 0x3e	; 62
    58fe:	2a 97       	sbiw	r28, 0x0a	; 10
    5900:	0f b6       	in	r0, 0x3f	; 63
    5902:	f8 94       	cli
    5904:	de bf       	out	0x3e, r29	; 62
    5906:	0f be       	out	0x3f, r0	; 63
    5908:	cd bf       	out	0x3d, r28	; 61
    590a:	9a 87       	std	Y+10, r25	; 0x0a
    590c:	89 87       	std	Y+9, r24	; 0x09
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms
    590e:	8f e1       	ldi	r24, 0x1F	; 31
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	a0 e0       	ldi	r26, 0x00	; 0
    5914:	b0 e0       	ldi	r27, 0x00	; 0
    5916:	89 83       	std	Y+1, r24	; 0x01
    5918:	9a 83       	std	Y+2, r25	; 0x02
    591a:	ab 83       	std	Y+3, r26	; 0x03
    591c:	bc 83       	std	Y+4, r27	; 0x04

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    591e:	0e 94 6e 18 	call	0x30dc	; 0x30dc <xTaskGetTickCount>
    5922:	dc 01       	movw	r26, r24
    5924:	cb 01       	movw	r24, r22
    5926:	8d 83       	std	Y+5, r24	; 0x05
    5928:	9e 83       	std	Y+6, r25	; 0x06
    592a:	af 83       	std	Y+7, r26	; 0x07
    592c:	b8 87       	std	Y+8, r27	; 0x08

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    592e:	89 81       	ldd	r24, Y+1	; 0x01
    5930:	9a 81       	ldd	r25, Y+2	; 0x02
    5932:	ab 81       	ldd	r26, Y+3	; 0x03
    5934:	bc 81       	ldd	r27, Y+4	; 0x04
    5936:	9e 01       	movw	r18, r28
    5938:	2b 5f       	subi	r18, 0xFB	; 251
    593a:	3f 4f       	sbci	r19, 0xFF	; 255
    593c:	ac 01       	movw	r20, r24
    593e:	bd 01       	movw	r22, r26
    5940:	c9 01       	movw	r24, r18
    5942:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <xTaskDelayUntil>
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    5946:	80 eb       	ldi	r24, 0xB0	; 176
    5948:	93 e0       	ldi	r25, 0x03	; 3
    594a:	0e 94 23 3b 	call	0x7646	; 0x7646 <puts>
		PORTA ^= _BV(PA0);
    594e:	82 e2       	ldi	r24, 0x22	; 34
    5950:	90 e0       	ldi	r25, 0x00	; 0
    5952:	22 e2       	ldi	r18, 0x22	; 34
    5954:	30 e0       	ldi	r19, 0x00	; 0
    5956:	f9 01       	movw	r30, r18
    5958:	30 81       	ld	r19, Z
    595a:	21 e0       	ldi	r18, 0x01	; 1
    595c:	23 27       	eor	r18, r19
    595e:	fc 01       	movw	r30, r24
    5960:	20 83       	st	Z, r18
	}
    5962:	e5 cf       	rjmp	.-54     	; 0x592e <task1+0x38>

00005964 <UL_handler_send>:
}

/*-----------------------------------------------------------*/

void UL_handler_send( void *pvParameters )
{
    5964:	0f 93       	push	r16
    5966:	1f 93       	push	r17
    5968:	cf 93       	push	r28
    596a:	df 93       	push	r29
    596c:	cd b7       	in	r28, 0x3d	; 61
    596e:	de b7       	in	r29, 0x3e	; 62
    5970:	2a 97       	sbiw	r28, 0x0a	; 10
    5972:	0f b6       	in	r0, 0x3f	; 63
    5974:	f8 94       	cli
    5976:	de bf       	out	0x3e, r29	; 62
    5978:	0f be       	out	0x3f, r0	; 63
    597a:	cd bf       	out	0x3d, r28	; 61
    597c:	9a 87       	std	Y+10, r25	; 0x0a
    597e:	89 87       	std	Y+9, r24	; 0x09
	for(;;){
		size_t xBytesSent;
		// Payload
		SensorDataPackage_t sensorDataPackage = SensorDataPackage_create(/*JULIA PUT YOUR DATA HERE - CO2Sensor.getCO2()*/250); 
    5980:	8a ef       	ldi	r24, 0xFA	; 250
    5982:	90 e0       	ldi	r25, 0x00	; 0
    5984:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SensorDataPackage_create>
    5988:	9a 83       	std	Y+2, r25	; 0x02
    598a:	89 83       	std	Y+1, r24	; 0x01
		const TickType_t x100ms = pdMS_TO_TICKS( 100 );
    598c:	86 e0       	ldi	r24, 0x06	; 6
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	a0 e0       	ldi	r26, 0x00	; 0
    5992:	b0 e0       	ldi	r27, 0x00	; 0
    5994:	8b 83       	std	Y+3, r24	; 0x03
    5996:	9c 83       	std	Y+4, r25	; 0x04
    5998:	ad 83       	std	Y+5, r26	; 0x05
    599a:	be 83       	std	Y+6, r27	; 0x06
	
		// Send the payload to the message buffer, a maximum of 100ms to wait for enough space to be available in the message buffer.
		xBytesSent = xMessageBufferSend( UpLinkMessageBuffer, ( void * ) sensorDataPackage, sizeof( sensorDataPackage ), x100ms );
    599c:	e0 91 ed 11 	lds	r30, 0x11ED	; 0x8011ed <UpLinkMessageBuffer>
    59a0:	f0 91 ee 11 	lds	r31, 0x11EE	; 0x8011ee <UpLinkMessageBuffer+0x1>
    59a4:	8b 81       	ldd	r24, Y+3	; 0x03
    59a6:	9c 81       	ldd	r25, Y+4	; 0x04
    59a8:	ad 81       	ldd	r26, Y+5	; 0x05
    59aa:	be 81       	ldd	r27, Y+6	; 0x06
    59ac:	69 81       	ldd	r22, Y+1	; 0x01
    59ae:	7a 81       	ldd	r23, Y+2	; 0x02
    59b0:	8c 01       	movw	r16, r24
    59b2:	9d 01       	movw	r18, r26
    59b4:	42 e0       	ldi	r20, 0x02	; 2
    59b6:	50 e0       	ldi	r21, 0x00	; 0
    59b8:	cf 01       	movw	r24, r30
    59ba:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <xStreamBufferSend>
    59be:	98 87       	std	Y+8, r25	; 0x08
    59c0:	8f 83       	std	Y+7, r24	; 0x07
	
		if( xBytesSent != sizeof( sensorDataPackage ) )
    59c2:	8f 81       	ldd	r24, Y+7	; 0x07
    59c4:	98 85       	ldd	r25, Y+8	; 0x08
    59c6:	02 97       	sbiw	r24, 0x02	; 2
    59c8:	39 f0       	breq	.+14     	; 0x59d8 <UL_handler_send+0x74>
		{
			// The call to xMessageBufferSend() timed out before there was enough space in the buffer for the data to be written.
			// Wait 2.5 minutes to retry
			vTaskDelay(pdMS_TO_TICKS(150000));
    59ca:	64 e5       	ldi	r22, 0x54	; 84
    59cc:	74 e2       	ldi	r23, 0x24	; 36
    59ce:	80 e0       	ldi	r24, 0x00	; 0
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <vTaskDelay>
    59d6:	d4 cf       	rjmp	.-88     	; 0x5980 <UL_handler_send+0x1c>
		}else{
			// OK
			puts("UL_handler_send -> OK");
    59d8:	86 eb       	ldi	r24, 0xB6	; 182
    59da:	93 e0       	ldi	r25, 0x03	; 3
    59dc:	0e 94 23 3b 	call	0x7646	; 0x7646 <puts>
			vTaskDelay(pdMS_TO_TICKS(300000));
    59e0:	68 ea       	ldi	r22, 0xA8	; 168
    59e2:	78 e4       	ldi	r23, 0x48	; 72
    59e4:	80 e0       	ldi	r24, 0x00	; 0
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <vTaskDelay>
		}	
	}
    59ec:	c9 cf       	rjmp	.-110    	; 0x5980 <UL_handler_send+0x1c>

000059ee <initialiseSystem>:
}

/*-----------------------------------------------------------*/
void initialiseSystem()
{
    59ee:	cf 93       	push	r28
    59f0:	df 93       	push	r29
    59f2:	cd b7       	in	r28, 0x3d	; 61
    59f4:	de b7       	in	r29, 0x3e	; 62
	
	// Set output ports for LEDs used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    59f6:	81 e2       	ldi	r24, 0x21	; 33
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	21 e2       	ldi	r18, 0x21	; 33
    59fc:	30 e0       	ldi	r19, 0x00	; 0
    59fe:	f9 01       	movw	r30, r18
    5a00:	20 81       	ld	r18, Z
    5a02:	21 68       	ori	r18, 0x81	; 129
    5a04:	fc 01       	movw	r30, r24
    5a06:	20 83       	st	Z, r18

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    5a08:	80 e0       	ldi	r24, 0x00	; 0
    5a0a:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    5a0e:	1f df       	rcall	.-450    	; 0x584e <create_tasks_and_semaphores>
	
	//Message Buffers
	UpLinkMessageBuffer = xMessageBufferCreate(UpLinkSize);
    5a10:	84 e0       	ldi	r24, 0x04	; 4
    5a12:	90 e0       	ldi	r25, 0x00	; 0
    5a14:	41 e0       	ldi	r20, 0x01	; 1
    5a16:	60 e0       	ldi	r22, 0x00	; 0
    5a18:	70 e0       	ldi	r23, 0x00	; 0
    5a1a:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <xStreamBufferGenericCreate>
    5a1e:	90 93 ee 11 	sts	0x11EE, r25	; 0x8011ee <UpLinkMessageBuffer+0x1>
    5a22:	80 93 ed 11 	sts	0x11ED, r24	; 0x8011ed <UpLinkMessageBuffer>
	DownLinkMessageBuffer = xMessageBufferCreate(DownLinkSize);
    5a26:	8c e2       	ldi	r24, 0x2C	; 44
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	41 e0       	ldi	r20, 0x01	; 1
    5a2c:	60 e0       	ldi	r22, 0x00	; 0
    5a2e:	70 e0       	ldi	r23, 0x00	; 0
    5a30:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <xStreamBufferGenericCreate>
    5a34:	90 93 f0 11 	sts	0x11F0, r25	; 0x8011f0 <DownLinkMessageBuffer+0x1>
    5a38:	80 93 ef 11 	sts	0x11EF, r24	; 0x8011ef <DownLinkMessageBuffer>

	// LoRaWAN initialization
	// Status LEDs driver
	status_leds_initialise(5); // Priority 5 for internal task
    5a3c:	85 e0       	ldi	r24, 0x05	; 5
    5a3e:	0e 94 78 37 	call	0x6ef0	; 0x6ef0 <status_leds_initialise>
	
	// Initialize the LoRaWAN driver with down-link buffer
	lora_driver_initialise(1, DownLinkMessageBuffer);
    5a42:	80 91 ef 11 	lds	r24, 0x11EF	; 0x8011ef <DownLinkMessageBuffer>
    5a46:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <DownLinkMessageBuffer+0x1>
    5a4a:	bc 01       	movw	r22, r24
    5a4c:	81 e0       	ldi	r24, 0x01	; 1
    5a4e:	4b d2       	rcall	.+1174   	; 0x5ee6 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	
	UL_handler_create(UpLinkMessageBuffer);
    5a50:	80 91 ed 11 	lds	r24, 0x11ED	; 0x8011ed <UpLinkMessageBuffer>
    5a54:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <UpLinkMessageBuffer+0x1>
    5a58:	0e 94 11 01 	call	0x222	; 0x222 <UL_handler_create>
	//lora_handler_initialise(3);	
	
	// UpLinkHandler
	UL_handler_create(UpLinkMessageBuffer);
    5a5c:	80 91 ed 11 	lds	r24, 0x11ED	; 0x8011ed <UpLinkMessageBuffer>
    5a60:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <UpLinkMessageBuffer+0x1>
    5a64:	0e 94 11 01 	call	0x222	; 0x222 <UL_handler_create>
	
}
    5a68:	00 00       	nop
    5a6a:	df 91       	pop	r29
    5a6c:	cf 91       	pop	r28
    5a6e:	08 95       	ret

00005a70 <main>:

/*-----------------------------------------------------------*/
int main(void)
{
    5a70:	cf 93       	push	r28
    5a72:	df 93       	push	r29
    5a74:	cd b7       	in	r28, 0x3d	; 61
    5a76:	de b7       	in	r29, 0x3e	; 62
	initialiseSystem(); // Must be done as the very first thing!!
    5a78:	ba df       	rcall	.-140    	; 0x59ee <initialiseSystem>
	printf("Program Started!!\n");
    5a7a:	8c ec       	ldi	r24, 0xCC	; 204
    5a7c:	93 e0       	ldi	r25, 0x03	; 3
    5a7e:	0e 94 23 3b 	call	0x7646	; 0x7646 <puts>
	
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler.
    5a82:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <vTaskStartScheduler>
    5a86:	80 e0       	ldi	r24, 0x00	; 0
    5a88:	90 e0       	ldi	r25, 0x00	; 0
	//Execution will never reach here.
}
    5a8a:	df 91       	pop	r29
    5a8c:	cf 91       	pop	r28
    5a8e:	08 95       	ret

00005a90 <__cmpsf2>:
    5a90:	2f d0       	rcall	.+94     	; 0x5af0 <__fp_cmp>
    5a92:	08 f4       	brcc	.+2      	; 0x5a96 <__cmpsf2+0x6>
    5a94:	81 e0       	ldi	r24, 0x01	; 1
    5a96:	08 95       	ret

00005a98 <__fixunssfsi>:
    5a98:	57 d0       	rcall	.+174    	; 0x5b48 <__fp_splitA>
    5a9a:	88 f0       	brcs	.+34     	; 0x5abe <__fixunssfsi+0x26>
    5a9c:	9f 57       	subi	r25, 0x7F	; 127
    5a9e:	90 f0       	brcs	.+36     	; 0x5ac4 <__fixunssfsi+0x2c>
    5aa0:	b9 2f       	mov	r27, r25
    5aa2:	99 27       	eor	r25, r25
    5aa4:	b7 51       	subi	r27, 0x17	; 23
    5aa6:	a0 f0       	brcs	.+40     	; 0x5ad0 <__fixunssfsi+0x38>
    5aa8:	d1 f0       	breq	.+52     	; 0x5ade <__fixunssfsi+0x46>
    5aaa:	66 0f       	add	r22, r22
    5aac:	77 1f       	adc	r23, r23
    5aae:	88 1f       	adc	r24, r24
    5ab0:	99 1f       	adc	r25, r25
    5ab2:	1a f0       	brmi	.+6      	; 0x5aba <__fixunssfsi+0x22>
    5ab4:	ba 95       	dec	r27
    5ab6:	c9 f7       	brne	.-14     	; 0x5aaa <__fixunssfsi+0x12>
    5ab8:	12 c0       	rjmp	.+36     	; 0x5ade <__fixunssfsi+0x46>
    5aba:	b1 30       	cpi	r27, 0x01	; 1
    5abc:	81 f0       	breq	.+32     	; 0x5ade <__fixunssfsi+0x46>
    5abe:	5e d0       	rcall	.+188    	; 0x5b7c <__fp_zero>
    5ac0:	b1 e0       	ldi	r27, 0x01	; 1
    5ac2:	08 95       	ret
    5ac4:	5b c0       	rjmp	.+182    	; 0x5b7c <__fp_zero>
    5ac6:	67 2f       	mov	r22, r23
    5ac8:	78 2f       	mov	r23, r24
    5aca:	88 27       	eor	r24, r24
    5acc:	b8 5f       	subi	r27, 0xF8	; 248
    5ace:	39 f0       	breq	.+14     	; 0x5ade <__fixunssfsi+0x46>
    5ad0:	b9 3f       	cpi	r27, 0xF9	; 249
    5ad2:	cc f3       	brlt	.-14     	; 0x5ac6 <__fixunssfsi+0x2e>
    5ad4:	86 95       	lsr	r24
    5ad6:	77 95       	ror	r23
    5ad8:	67 95       	ror	r22
    5ada:	b3 95       	inc	r27
    5adc:	d9 f7       	brne	.-10     	; 0x5ad4 <__fixunssfsi+0x3c>
    5ade:	3e f4       	brtc	.+14     	; 0x5aee <__fixunssfsi+0x56>
    5ae0:	90 95       	com	r25
    5ae2:	80 95       	com	r24
    5ae4:	70 95       	com	r23
    5ae6:	61 95       	neg	r22
    5ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    5aea:	8f 4f       	sbci	r24, 0xFF	; 255
    5aec:	9f 4f       	sbci	r25, 0xFF	; 255
    5aee:	08 95       	ret

00005af0 <__fp_cmp>:
    5af0:	99 0f       	add	r25, r25
    5af2:	00 08       	sbc	r0, r0
    5af4:	55 0f       	add	r21, r21
    5af6:	aa 0b       	sbc	r26, r26
    5af8:	e0 e8       	ldi	r30, 0x80	; 128
    5afa:	fe ef       	ldi	r31, 0xFE	; 254
    5afc:	16 16       	cp	r1, r22
    5afe:	17 06       	cpc	r1, r23
    5b00:	e8 07       	cpc	r30, r24
    5b02:	f9 07       	cpc	r31, r25
    5b04:	c0 f0       	brcs	.+48     	; 0x5b36 <__fp_cmp+0x46>
    5b06:	12 16       	cp	r1, r18
    5b08:	13 06       	cpc	r1, r19
    5b0a:	e4 07       	cpc	r30, r20
    5b0c:	f5 07       	cpc	r31, r21
    5b0e:	98 f0       	brcs	.+38     	; 0x5b36 <__fp_cmp+0x46>
    5b10:	62 1b       	sub	r22, r18
    5b12:	73 0b       	sbc	r23, r19
    5b14:	84 0b       	sbc	r24, r20
    5b16:	95 0b       	sbc	r25, r21
    5b18:	39 f4       	brne	.+14     	; 0x5b28 <__fp_cmp+0x38>
    5b1a:	0a 26       	eor	r0, r26
    5b1c:	61 f0       	breq	.+24     	; 0x5b36 <__fp_cmp+0x46>
    5b1e:	23 2b       	or	r18, r19
    5b20:	24 2b       	or	r18, r20
    5b22:	25 2b       	or	r18, r21
    5b24:	21 f4       	brne	.+8      	; 0x5b2e <__fp_cmp+0x3e>
    5b26:	08 95       	ret
    5b28:	0a 26       	eor	r0, r26
    5b2a:	09 f4       	brne	.+2      	; 0x5b2e <__fp_cmp+0x3e>
    5b2c:	a1 40       	sbci	r26, 0x01	; 1
    5b2e:	a6 95       	lsr	r26
    5b30:	8f ef       	ldi	r24, 0xFF	; 255
    5b32:	81 1d       	adc	r24, r1
    5b34:	81 1d       	adc	r24, r1
    5b36:	08 95       	ret

00005b38 <__fp_split3>:
    5b38:	57 fd       	sbrc	r21, 7
    5b3a:	90 58       	subi	r25, 0x80	; 128
    5b3c:	44 0f       	add	r20, r20
    5b3e:	55 1f       	adc	r21, r21
    5b40:	59 f0       	breq	.+22     	; 0x5b58 <__fp_splitA+0x10>
    5b42:	5f 3f       	cpi	r21, 0xFF	; 255
    5b44:	71 f0       	breq	.+28     	; 0x5b62 <__fp_splitA+0x1a>
    5b46:	47 95       	ror	r20

00005b48 <__fp_splitA>:
    5b48:	88 0f       	add	r24, r24
    5b4a:	97 fb       	bst	r25, 7
    5b4c:	99 1f       	adc	r25, r25
    5b4e:	61 f0       	breq	.+24     	; 0x5b68 <__fp_splitA+0x20>
    5b50:	9f 3f       	cpi	r25, 0xFF	; 255
    5b52:	79 f0       	breq	.+30     	; 0x5b72 <__fp_splitA+0x2a>
    5b54:	87 95       	ror	r24
    5b56:	08 95       	ret
    5b58:	12 16       	cp	r1, r18
    5b5a:	13 06       	cpc	r1, r19
    5b5c:	14 06       	cpc	r1, r20
    5b5e:	55 1f       	adc	r21, r21
    5b60:	f2 cf       	rjmp	.-28     	; 0x5b46 <__fp_split3+0xe>
    5b62:	46 95       	lsr	r20
    5b64:	f1 df       	rcall	.-30     	; 0x5b48 <__fp_splitA>
    5b66:	08 c0       	rjmp	.+16     	; 0x5b78 <__fp_splitA+0x30>
    5b68:	16 16       	cp	r1, r22
    5b6a:	17 06       	cpc	r1, r23
    5b6c:	18 06       	cpc	r1, r24
    5b6e:	99 1f       	adc	r25, r25
    5b70:	f1 cf       	rjmp	.-30     	; 0x5b54 <__fp_splitA+0xc>
    5b72:	86 95       	lsr	r24
    5b74:	71 05       	cpc	r23, r1
    5b76:	61 05       	cpc	r22, r1
    5b78:	08 94       	sec
    5b7a:	08 95       	ret

00005b7c <__fp_zero>:
    5b7c:	e8 94       	clt

00005b7e <__fp_szero>:
    5b7e:	bb 27       	eor	r27, r27
    5b80:	66 27       	eor	r22, r22
    5b82:	77 27       	eor	r23, r23
    5b84:	cb 01       	movw	r24, r22
    5b86:	97 f9       	bld	r25, 7
    5b88:	08 95       	ret

00005b8a <__gesf2>:
    5b8a:	b2 df       	rcall	.-156    	; 0x5af0 <__fp_cmp>
    5b8c:	08 f4       	brcc	.+2      	; 0x5b90 <__gesf2+0x6>
    5b8e:	8f ef       	ldi	r24, 0xFF	; 255
    5b90:	08 95       	ret

00005b92 <__mulsf3>:
    5b92:	0b d0       	rcall	.+22     	; 0x5baa <__mulsf3x>
    5b94:	78 c0       	rjmp	.+240    	; 0x5c86 <__fp_round>
    5b96:	69 d0       	rcall	.+210    	; 0x5c6a <__fp_pscA>
    5b98:	28 f0       	brcs	.+10     	; 0x5ba4 <__mulsf3+0x12>
    5b9a:	6e d0       	rcall	.+220    	; 0x5c78 <__fp_pscB>
    5b9c:	18 f0       	brcs	.+6      	; 0x5ba4 <__mulsf3+0x12>
    5b9e:	95 23       	and	r25, r21
    5ba0:	09 f0       	breq	.+2      	; 0x5ba4 <__mulsf3+0x12>
    5ba2:	5a c0       	rjmp	.+180    	; 0x5c58 <__fp_inf>
    5ba4:	5f c0       	rjmp	.+190    	; 0x5c64 <__fp_nan>
    5ba6:	11 24       	eor	r1, r1
    5ba8:	ea cf       	rjmp	.-44     	; 0x5b7e <__fp_szero>

00005baa <__mulsf3x>:
    5baa:	c6 df       	rcall	.-116    	; 0x5b38 <__fp_split3>
    5bac:	a0 f3       	brcs	.-24     	; 0x5b96 <__mulsf3+0x4>

00005bae <__mulsf3_pse>:
    5bae:	95 9f       	mul	r25, r21
    5bb0:	d1 f3       	breq	.-12     	; 0x5ba6 <__mulsf3+0x14>
    5bb2:	95 0f       	add	r25, r21
    5bb4:	50 e0       	ldi	r21, 0x00	; 0
    5bb6:	55 1f       	adc	r21, r21
    5bb8:	62 9f       	mul	r22, r18
    5bba:	f0 01       	movw	r30, r0
    5bbc:	72 9f       	mul	r23, r18
    5bbe:	bb 27       	eor	r27, r27
    5bc0:	f0 0d       	add	r31, r0
    5bc2:	b1 1d       	adc	r27, r1
    5bc4:	63 9f       	mul	r22, r19
    5bc6:	aa 27       	eor	r26, r26
    5bc8:	f0 0d       	add	r31, r0
    5bca:	b1 1d       	adc	r27, r1
    5bcc:	aa 1f       	adc	r26, r26
    5bce:	64 9f       	mul	r22, r20
    5bd0:	66 27       	eor	r22, r22
    5bd2:	b0 0d       	add	r27, r0
    5bd4:	a1 1d       	adc	r26, r1
    5bd6:	66 1f       	adc	r22, r22
    5bd8:	82 9f       	mul	r24, r18
    5bda:	22 27       	eor	r18, r18
    5bdc:	b0 0d       	add	r27, r0
    5bde:	a1 1d       	adc	r26, r1
    5be0:	62 1f       	adc	r22, r18
    5be2:	73 9f       	mul	r23, r19
    5be4:	b0 0d       	add	r27, r0
    5be6:	a1 1d       	adc	r26, r1
    5be8:	62 1f       	adc	r22, r18
    5bea:	83 9f       	mul	r24, r19
    5bec:	a0 0d       	add	r26, r0
    5bee:	61 1d       	adc	r22, r1
    5bf0:	22 1f       	adc	r18, r18
    5bf2:	74 9f       	mul	r23, r20
    5bf4:	33 27       	eor	r19, r19
    5bf6:	a0 0d       	add	r26, r0
    5bf8:	61 1d       	adc	r22, r1
    5bfa:	23 1f       	adc	r18, r19
    5bfc:	84 9f       	mul	r24, r20
    5bfe:	60 0d       	add	r22, r0
    5c00:	21 1d       	adc	r18, r1
    5c02:	82 2f       	mov	r24, r18
    5c04:	76 2f       	mov	r23, r22
    5c06:	6a 2f       	mov	r22, r26
    5c08:	11 24       	eor	r1, r1
    5c0a:	9f 57       	subi	r25, 0x7F	; 127
    5c0c:	50 40       	sbci	r21, 0x00	; 0
    5c0e:	8a f0       	brmi	.+34     	; 0x5c32 <__mulsf3_pse+0x84>
    5c10:	e1 f0       	breq	.+56     	; 0x5c4a <__mulsf3_pse+0x9c>
    5c12:	88 23       	and	r24, r24
    5c14:	4a f0       	brmi	.+18     	; 0x5c28 <__mulsf3_pse+0x7a>
    5c16:	ee 0f       	add	r30, r30
    5c18:	ff 1f       	adc	r31, r31
    5c1a:	bb 1f       	adc	r27, r27
    5c1c:	66 1f       	adc	r22, r22
    5c1e:	77 1f       	adc	r23, r23
    5c20:	88 1f       	adc	r24, r24
    5c22:	91 50       	subi	r25, 0x01	; 1
    5c24:	50 40       	sbci	r21, 0x00	; 0
    5c26:	a9 f7       	brne	.-22     	; 0x5c12 <__mulsf3_pse+0x64>
    5c28:	9e 3f       	cpi	r25, 0xFE	; 254
    5c2a:	51 05       	cpc	r21, r1
    5c2c:	70 f0       	brcs	.+28     	; 0x5c4a <__mulsf3_pse+0x9c>
    5c2e:	14 c0       	rjmp	.+40     	; 0x5c58 <__fp_inf>
    5c30:	a6 cf       	rjmp	.-180    	; 0x5b7e <__fp_szero>
    5c32:	5f 3f       	cpi	r21, 0xFF	; 255
    5c34:	ec f3       	brlt	.-6      	; 0x5c30 <__mulsf3_pse+0x82>
    5c36:	98 3e       	cpi	r25, 0xE8	; 232
    5c38:	dc f3       	brlt	.-10     	; 0x5c30 <__mulsf3_pse+0x82>
    5c3a:	86 95       	lsr	r24
    5c3c:	77 95       	ror	r23
    5c3e:	67 95       	ror	r22
    5c40:	b7 95       	ror	r27
    5c42:	f7 95       	ror	r31
    5c44:	e7 95       	ror	r30
    5c46:	9f 5f       	subi	r25, 0xFF	; 255
    5c48:	c1 f7       	brne	.-16     	; 0x5c3a <__mulsf3_pse+0x8c>
    5c4a:	fe 2b       	or	r31, r30
    5c4c:	88 0f       	add	r24, r24
    5c4e:	91 1d       	adc	r25, r1
    5c50:	96 95       	lsr	r25
    5c52:	87 95       	ror	r24
    5c54:	97 f9       	bld	r25, 7
    5c56:	08 95       	ret

00005c58 <__fp_inf>:
    5c58:	97 f9       	bld	r25, 7
    5c5a:	9f 67       	ori	r25, 0x7F	; 127
    5c5c:	80 e8       	ldi	r24, 0x80	; 128
    5c5e:	70 e0       	ldi	r23, 0x00	; 0
    5c60:	60 e0       	ldi	r22, 0x00	; 0
    5c62:	08 95       	ret

00005c64 <__fp_nan>:
    5c64:	9f ef       	ldi	r25, 0xFF	; 255
    5c66:	80 ec       	ldi	r24, 0xC0	; 192
    5c68:	08 95       	ret

00005c6a <__fp_pscA>:
    5c6a:	00 24       	eor	r0, r0
    5c6c:	0a 94       	dec	r0
    5c6e:	16 16       	cp	r1, r22
    5c70:	17 06       	cpc	r1, r23
    5c72:	18 06       	cpc	r1, r24
    5c74:	09 06       	cpc	r0, r25
    5c76:	08 95       	ret

00005c78 <__fp_pscB>:
    5c78:	00 24       	eor	r0, r0
    5c7a:	0a 94       	dec	r0
    5c7c:	12 16       	cp	r1, r18
    5c7e:	13 06       	cpc	r1, r19
    5c80:	14 06       	cpc	r1, r20
    5c82:	05 06       	cpc	r0, r21
    5c84:	08 95       	ret

00005c86 <__fp_round>:
    5c86:	09 2e       	mov	r0, r25
    5c88:	03 94       	inc	r0
    5c8a:	00 0c       	add	r0, r0
    5c8c:	11 f4       	brne	.+4      	; 0x5c92 <__fp_round+0xc>
    5c8e:	88 23       	and	r24, r24
    5c90:	52 f0       	brmi	.+20     	; 0x5ca6 <__fp_round+0x20>
    5c92:	bb 0f       	add	r27, r27
    5c94:	40 f4       	brcc	.+16     	; 0x5ca6 <__fp_round+0x20>
    5c96:	bf 2b       	or	r27, r31
    5c98:	11 f4       	brne	.+4      	; 0x5c9e <__fp_round+0x18>
    5c9a:	60 ff       	sbrs	r22, 0
    5c9c:	04 c0       	rjmp	.+8      	; 0x5ca6 <__fp_round+0x20>
    5c9e:	6f 5f       	subi	r22, 0xFF	; 255
    5ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ca6:	08 95       	ret

00005ca8 <_serialCallBack>:
    5ca8:	0f 93       	push	r16
    5caa:	1f 93       	push	r17
    5cac:	cf 93       	push	r28
    5cae:	df 93       	push	r29
    5cb0:	1f 92       	push	r1
    5cb2:	1f 92       	push	r1
    5cb4:	cd b7       	in	r28, 0x3d	; 61
    5cb6:	de b7       	in	r29, 0x3e	; 62
    5cb8:	8c 01       	movw	r16, r24
    5cba:	19 82       	std	Y+1, r1	; 0x01
    5cbc:	2d c0       	rjmp	.+90     	; 0x5d18 <_serialCallBack+0x70>
    5cbe:	e0 91 55 12 	lds	r30, 0x1255	; 0x801255 <rec_buf_inp.2878>
    5cc2:	ec 32       	cpi	r30, 0x2C	; 44
    5cc4:	50 f4       	brcc	.+20     	; 0x5cda <_serialCallBack+0x32>
    5cc6:	81 e0       	ldi	r24, 0x01	; 1
    5cc8:	8e 0f       	add	r24, r30
    5cca:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <rec_buf_inp.2878>
    5cce:	f0 e0       	ldi	r31, 0x00	; 0
    5cd0:	e9 57       	subi	r30, 0x79	; 121
    5cd2:	fd 4e       	sbci	r31, 0xED	; 237
    5cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    5cd6:	80 83       	st	Z, r24
    5cd8:	02 c0       	rjmp	.+4      	; 0x5cde <_serialCallBack+0x36>
    5cda:	10 92 55 12 	sts	0x1255, r1	; 0x801255 <rec_buf_inp.2878>
    5cde:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce0:	8a 30       	cpi	r24, 0x0A	; 10
    5ce2:	d1 f4       	brne	.+52     	; 0x5d18 <_serialCallBack+0x70>
    5ce4:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <rec_buf_inp.2878>
    5ce8:	50 e0       	ldi	r21, 0x00	; 0
    5cea:	fa 01       	movw	r30, r20
    5cec:	eb 57       	subi	r30, 0x7B	; 123
    5cee:	fd 4e       	sbci	r31, 0xED	; 237
    5cf0:	10 82       	st	Z, r1
    5cf2:	41 50       	subi	r20, 0x01	; 1
    5cf4:	51 09       	sbc	r21, r1
    5cf6:	9e 01       	movw	r18, r28
    5cf8:	2f 5f       	subi	r18, 0xFF	; 255
    5cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    5cfc:	67 e8       	ldi	r22, 0x87	; 135
    5cfe:	72 e1       	ldi	r23, 0x12	; 18
    5d00:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    5d04:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    5d08:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <xStreamBufferSendFromISR>
    5d0c:	89 81       	ldd	r24, Y+1	; 0x01
    5d0e:	81 11       	cpse	r24, r1
    5d10:	0e 94 8b 07 	call	0xf16	; 0xf16 <vPortYield>
    5d14:	10 92 55 12 	sts	0x1255, r1	; 0x801255 <rec_buf_inp.2878>
    5d18:	be 01       	movw	r22, r28
    5d1a:	6e 5f       	subi	r22, 0xFE	; 254
    5d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d1e:	c8 01       	movw	r24, r16
    5d20:	4a d5       	rcall	.+2708   	; 0x67b6 <serial_getByte>
    5d22:	88 23       	and	r24, r24
    5d24:	61 f2       	breq	.-104    	; 0x5cbe <_serialCallBack+0x16>
    5d26:	0f 90       	pop	r0
    5d28:	0f 90       	pop	r0
    5d2a:	df 91       	pop	r29
    5d2c:	cf 91       	pop	r28
    5d2e:	1f 91       	pop	r17
    5d30:	0f 91       	pop	r16
    5d32:	08 95       	ret

00005d34 <_uploadMessage>:
    5d34:	0f 93       	push	r16
    5d36:	1f 93       	push	r17
    5d38:	cf 93       	push	r28
    5d3a:	df 93       	push	r29
    5d3c:	8c 01       	movw	r16, r24
    5d3e:	eb 01       	movw	r28, r22
    5d40:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    5d44:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    5d48:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <xStreamBufferReset>
    5d4c:	b8 01       	movw	r22, r16
    5d4e:	81 ef       	ldi	r24, 0xF1	; 241
    5d50:	91 e1       	ldi	r25, 0x11	; 17
    5d52:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <strcpy>
    5d56:	20 97       	sbiw	r28, 0x00	; 0
    5d58:	79 f0       	breq	.+30     	; 0x5d78 <_uploadMessage+0x44>
    5d5a:	e1 ef       	ldi	r30, 0xF1	; 241
    5d5c:	f1 e1       	ldi	r31, 0x11	; 17
    5d5e:	01 90       	ld	r0, Z+
    5d60:	00 20       	and	r0, r0
    5d62:	e9 f7       	brne	.-6      	; 0x5d5e <_uploadMessage+0x2a>
    5d64:	31 97       	sbiw	r30, 0x01	; 1
    5d66:	80 e2       	ldi	r24, 0x20	; 32
    5d68:	90 e0       	ldi	r25, 0x00	; 0
    5d6a:	91 83       	std	Z+1, r25	; 0x01
    5d6c:	80 83       	st	Z, r24
    5d6e:	be 01       	movw	r22, r28
    5d70:	81 ef       	ldi	r24, 0xF1	; 241
    5d72:	91 e1       	ldi	r25, 0x11	; 17
    5d74:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <strcat>
    5d78:	e1 ef       	ldi	r30, 0xF1	; 241
    5d7a:	f1 e1       	ldi	r31, 0x11	; 17
    5d7c:	df 01       	movw	r26, r30
    5d7e:	0d 90       	ld	r0, X+
    5d80:	00 20       	and	r0, r0
    5d82:	e9 f7       	brne	.-6      	; 0x5d7e <_uploadMessage+0x4a>
    5d84:	11 97       	sbiw	r26, 0x01	; 1
    5d86:	8d e0       	ldi	r24, 0x0D	; 13
    5d88:	9a e0       	ldi	r25, 0x0A	; 10
    5d8a:	11 96       	adiw	r26, 0x01	; 1
    5d8c:	9c 93       	st	X, r25
    5d8e:	8e 93       	st	-X, r24
    5d90:	12 96       	adiw	r26, 0x02	; 2
    5d92:	1c 92       	st	X, r1
    5d94:	01 90       	ld	r0, Z+
    5d96:	00 20       	and	r0, r0
    5d98:	e9 f7       	brne	.-6      	; 0x5d94 <_uploadMessage+0x60>
    5d9a:	31 97       	sbiw	r30, 0x01	; 1
    5d9c:	e1 5f       	subi	r30, 0xF1	; 241
    5d9e:	f1 41       	sbci	r31, 0x11	; 17
    5da0:	ae 2f       	mov	r26, r30
    5da2:	81 ef       	ldi	r24, 0xF1	; 241
    5da4:	91 e1       	ldi	r25, 0x11	; 17
    5da6:	ac 01       	movw	r20, r24
    5da8:	6a 2f       	mov	r22, r26
    5daa:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <_rn2483_serial>
    5dae:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <_rn2483_serial+0x1>
    5db2:	ac d4       	rcall	.+2392   	; 0x670c <serial_sendBytes>
    5db4:	81 11       	cpse	r24, r1
    5db6:	11 c0       	rjmp	.+34     	; 0x5dda <_uploadMessage+0xa6>
    5db8:	08 e2       	ldi	r16, 0x28	; 40
    5dba:	15 e0       	ldi	r17, 0x05	; 5
    5dbc:	20 e0       	ldi	r18, 0x00	; 0
    5dbe:	30 e0       	ldi	r19, 0x00	; 0
    5dc0:	4d e2       	ldi	r20, 0x2D	; 45
    5dc2:	50 e0       	ldi	r21, 0x00	; 0
    5dc4:	61 ee       	ldi	r22, 0xE1	; 225
    5dc6:	72 e1       	ldi	r23, 0x12	; 18
    5dc8:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    5dcc:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    5dd0:	0e 94 8a 10 	call	0x2114	; 0x2114 <xStreamBufferReceive>
    5dd4:	81 ee       	ldi	r24, 0xE1	; 225
    5dd6:	92 e1       	ldi	r25, 0x12	; 18
    5dd8:	02 c0       	rjmp	.+4      	; 0x5dde <_uploadMessage+0xaa>
    5dda:	80 e0       	ldi	r24, 0x00	; 0
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	df 91       	pop	r29
    5de0:	cf 91       	pop	r28
    5de2:	1f 91       	pop	r17
    5de4:	0f 91       	pop	r16
    5de6:	08 95       	ret

00005de8 <_reply2ReturnCode>:
    5de8:	2f 92       	push	r2
    5dea:	3f 92       	push	r3
    5dec:	4f 92       	push	r4
    5dee:	5f 92       	push	r5
    5df0:	6f 92       	push	r6
    5df2:	7f 92       	push	r7
    5df4:	8f 92       	push	r8
    5df6:	9f 92       	push	r9
    5df8:	af 92       	push	r10
    5dfa:	bf 92       	push	r11
    5dfc:	cf 92       	push	r12
    5dfe:	df 92       	push	r13
    5e00:	ef 92       	push	r14
    5e02:	ff 92       	push	r15
    5e04:	0f 93       	push	r16
    5e06:	1f 93       	push	r17
    5e08:	cf 93       	push	r28
    5e0a:	df 93       	push	r29
    5e0c:	5c 01       	movw	r10, r24
    5e0e:	fc 01       	movw	r30, r24
    5e10:	01 90       	ld	r0, Z+
    5e12:	00 20       	and	r0, r0
    5e14:	e9 f7       	brne	.-6      	; 0x5e10 <_reply2ReturnCode+0x28>
    5e16:	31 97       	sbiw	r30, 0x01	; 1
    5e18:	6f 01       	movw	r12, r30
    5e1a:	c8 1a       	sub	r12, r24
    5e1c:	d9 0a       	sbc	r13, r25
    5e1e:	5c 2c       	mov	r5, r12
    5e20:	0f 2e       	mov	r0, r31
    5e22:	f7 e9       	ldi	r31, 0x97	; 151
    5e24:	8f 2e       	mov	r8, r31
    5e26:	f6 e0       	ldi	r31, 0x06	; 6
    5e28:	9f 2e       	mov	r9, r31
    5e2a:	f0 2d       	mov	r31, r0
    5e2c:	e1 2c       	mov	r14, r1
    5e2e:	f1 2c       	mov	r15, r1
    5e30:	4c 2c       	mov	r4, r12
    5e32:	37 01       	movw	r6, r14
    5e34:	f4 01       	movw	r30, r8
    5e36:	01 81       	ldd	r16, Z+1	; 0x01
    5e38:	12 81       	ldd	r17, Z+2	; 0x02
    5e3a:	e8 01       	movw	r28, r16
    5e3c:	09 90       	ld	r0, Y+
    5e3e:	00 20       	and	r0, r0
    5e40:	e9 f7       	brne	.-6      	; 0x5e3c <_reply2ReturnCode+0x54>
    5e42:	21 97       	sbiw	r28, 0x01	; 1
    5e44:	c0 1b       	sub	r28, r16
    5e46:	d1 0b       	sbc	r29, r17
    5e48:	3c 2e       	mov	r3, r28
    5e4a:	f9 e0       	ldi	r31, 0x09	; 9
    5e4c:	cf 16       	cp	r12, r31
    5e4e:	d1 04       	cpc	r13, r1
    5e50:	58 f0       	brcs	.+22     	; 0x5e68 <_reply2ReturnCode+0x80>
    5e52:	f4 01       	movw	r30, r8
    5e54:	20 80       	ld	r2, Z
    5e56:	fe e0       	ldi	r31, 0x0E	; 14
    5e58:	2f 12       	cpse	r2, r31
    5e5a:	06 c0       	rjmp	.+12     	; 0x5e68 <_reply2ReturnCode+0x80>
    5e5c:	b8 01       	movw	r22, r16
    5e5e:	c5 01       	movw	r24, r10
    5e60:	0e 94 c1 3a 	call	0x7582	; 0x7582 <strcasestr>
    5e64:	89 2b       	or	r24, r25
    5e66:	09 f5       	brne	.+66     	; 0x5eaa <_reply2ReturnCode+0xc2>
    5e68:	44 2d       	mov	r20, r4
    5e6a:	35 14       	cp	r3, r5
    5e6c:	08 f4       	brcc	.+2      	; 0x5e70 <_reply2ReturnCode+0x88>
    5e6e:	4c 2f       	mov	r20, r28
    5e70:	50 e0       	ldi	r21, 0x00	; 0
    5e72:	b8 01       	movw	r22, r16
    5e74:	c5 01       	movw	r24, r10
    5e76:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <strncasecmp>
    5e7a:	89 2b       	or	r24, r25
    5e7c:	49 f4       	brne	.+18     	; 0x5e90 <_reply2ReturnCode+0xa8>
    5e7e:	f3 01       	movw	r30, r6
    5e80:	ee 0f       	add	r30, r30
    5e82:	ff 1f       	adc	r31, r31
    5e84:	e6 0d       	add	r30, r6
    5e86:	f7 1d       	adc	r31, r7
    5e88:	e9 56       	subi	r30, 0x69	; 105
    5e8a:	f9 4f       	sbci	r31, 0xF9	; 249
    5e8c:	20 80       	ld	r2, Z
    5e8e:	0d c0       	rjmp	.+26     	; 0x5eaa <_reply2ReturnCode+0xc2>
    5e90:	8f ef       	ldi	r24, 0xFF	; 255
    5e92:	e8 1a       	sub	r14, r24
    5e94:	f8 0a       	sbc	r15, r24
    5e96:	e3 e0       	ldi	r30, 0x03	; 3
    5e98:	8e 0e       	add	r8, r30
    5e9a:	91 1c       	adc	r9, r1
    5e9c:	f1 e1       	ldi	r31, 0x11	; 17
    5e9e:	ef 16       	cp	r14, r31
    5ea0:	f1 04       	cpc	r15, r1
    5ea2:	39 f6       	brne	.-114    	; 0x5e32 <_reply2ReturnCode+0x4a>
    5ea4:	68 94       	set
    5ea6:	22 24       	eor	r2, r2
    5ea8:	24 f8       	bld	r2, 4
    5eaa:	82 2d       	mov	r24, r2
    5eac:	df 91       	pop	r29
    5eae:	cf 91       	pop	r28
    5eb0:	1f 91       	pop	r17
    5eb2:	0f 91       	pop	r16
    5eb4:	ff 90       	pop	r15
    5eb6:	ef 90       	pop	r14
    5eb8:	df 90       	pop	r13
    5eba:	cf 90       	pop	r12
    5ebc:	bf 90       	pop	r11
    5ebe:	af 90       	pop	r10
    5ec0:	9f 90       	pop	r9
    5ec2:	8f 90       	pop	r8
    5ec4:	7f 90       	pop	r7
    5ec6:	6f 90       	pop	r6
    5ec8:	5f 90       	pop	r5
    5eca:	4f 90       	pop	r4
    5ecc:	3f 90       	pop	r3
    5ece:	2f 90       	pop	r2
    5ed0:	08 95       	ret

00005ed2 <_uploadMessageRc>:
    5ed2:	30 df       	rcall	.-416    	; 0x5d34 <_uploadMessage>
    5ed4:	89 cf       	rjmp	.-238    	; 0x5de8 <_reply2ReturnCode>
    5ed6:	08 95       	ret

00005ed8 <lora_driver_flushBuffers>:
    5ed8:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    5edc:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    5ee0:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <xStreamBufferReset>
    5ee4:	08 95       	ret

00005ee6 <lora_driver_initialise>:
    5ee6:	8f 92       	push	r8
    5ee8:	9f 92       	push	r9
    5eea:	af 92       	push	r10
    5eec:	cf 92       	push	r12
    5eee:	ef 92       	push	r14
    5ef0:	0f 93       	push	r16
    5ef2:	1f 93       	push	r17
    5ef4:	cf 93       	push	r28
    5ef6:	c8 2f       	mov	r28, r24
    5ef8:	8b 01       	movw	r16, r22
    5efa:	41 e0       	ldi	r20, 0x01	; 1
    5efc:	60 e0       	ldi	r22, 0x00	; 0
    5efe:	70 e0       	ldi	r23, 0x00	; 0
    5f00:	88 ec       	ldi	r24, 0xC8	; 200
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <xStreamBufferGenericCreate>
    5f08:	90 93 59 12 	sts	0x1259, r25	; 0x801259 <_serialReplyBufferHandle+0x1>
    5f0c:	80 93 58 12 	sts	0x1258, r24	; 0x801258 <_serialReplyBufferHandle>
    5f10:	10 93 57 12 	sts	0x1257, r17	; 0x801257 <_downlinkMessageBuffer+0x1>
    5f14:	00 93 56 12 	sts	0x1256, r16	; 0x801256 <_downlinkMessageBuffer>
    5f18:	0f 2e       	mov	r0, r31
    5f1a:	f4 e5       	ldi	r31, 0x54	; 84
    5f1c:	8f 2e       	mov	r8, r31
    5f1e:	fe e2       	ldi	r31, 0x2E	; 46
    5f20:	9f 2e       	mov	r9, r31
    5f22:	f0 2d       	mov	r31, r0
    5f24:	68 94       	set
    5f26:	aa 24       	eor	r10, r10
    5f28:	a6 f8       	bld	r10, 6
    5f2a:	68 94       	set
    5f2c:	cc 24       	eor	r12, r12
    5f2e:	c6 f8       	bld	r12, 6
    5f30:	e1 2c       	mov	r14, r1
    5f32:	00 e0       	ldi	r16, 0x00	; 0
    5f34:	23 e0       	ldi	r18, 0x03	; 3
    5f36:	40 e0       	ldi	r20, 0x00	; 0
    5f38:	51 ee       	ldi	r21, 0xE1	; 225
    5f3a:	60 e0       	ldi	r22, 0x00	; 0
    5f3c:	70 e0       	ldi	r23, 0x00	; 0
    5f3e:	8c 2f       	mov	r24, r28
    5f40:	1e d3       	rcall	.+1596   	; 0x657e <serial_create>
    5f42:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <_rn2483_serial+0x1>
    5f46:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <_rn2483_serial>
    5f4a:	e7 e0       	ldi	r30, 0x07	; 7
    5f4c:	f1 e0       	ldi	r31, 0x01	; 1
    5f4e:	80 81       	ld	r24, Z
    5f50:	80 61       	ori	r24, 0x10	; 16
    5f52:	80 83       	st	Z, r24
    5f54:	cf 91       	pop	r28
    5f56:	1f 91       	pop	r17
    5f58:	0f 91       	pop	r16
    5f5a:	ef 90       	pop	r14
    5f5c:	cf 90       	pop	r12
    5f5e:	af 90       	pop	r10
    5f60:	9f 90       	pop	r9
    5f62:	8f 90       	pop	r8
    5f64:	08 95       	ret

00005f66 <lora_driver_resetRn2483>:
    5f66:	88 23       	and	r24, r24
    5f68:	31 f0       	breq	.+12     	; 0x5f76 <lora_driver_resetRn2483+0x10>
    5f6a:	e8 e0       	ldi	r30, 0x08	; 8
    5f6c:	f1 e0       	ldi	r31, 0x01	; 1
    5f6e:	80 81       	ld	r24, Z
    5f70:	8f 7e       	andi	r24, 0xEF	; 239
    5f72:	80 83       	st	Z, r24
    5f74:	08 95       	ret
    5f76:	e8 e0       	ldi	r30, 0x08	; 8
    5f78:	f1 e0       	ldi	r31, 0x01	; 1
    5f7a:	80 81       	ld	r24, Z
    5f7c:	80 61       	ori	r24, 0x10	; 16
    5f7e:	80 83       	st	Z, r24
    5f80:	08 95       	ret

00005f82 <lora_driver_rn2483FactoryReset>:
    5f82:	60 e0       	ldi	r22, 0x00	; 0
    5f84:	70 e0       	ldi	r23, 0x00	; 0
    5f86:	8d e1       	ldi	r24, 0x1D	; 29
    5f88:	94 e0       	ldi	r25, 0x04	; 4
    5f8a:	d4 de       	rcall	.-600    	; 0x5d34 <_uploadMessage>
    5f8c:	e1 ee       	ldi	r30, 0xE1	; 225
    5f8e:	f2 e1       	ldi	r31, 0x12	; 18
    5f90:	01 90       	ld	r0, Z+
    5f92:	00 20       	and	r0, r0
    5f94:	e9 f7       	brne	.-6      	; 0x5f90 <lora_driver_rn2483FactoryReset+0xe>
    5f96:	31 97       	sbiw	r30, 0x01	; 1
    5f98:	e1 5e       	subi	r30, 0xE1	; 225
    5f9a:	f2 41       	sbci	r31, 0x12	; 18
    5f9c:	81 e0       	ldi	r24, 0x01	; 1
    5f9e:	75 97       	sbiw	r30, 0x15	; 21
    5fa0:	08 f0       	brcs	.+2      	; 0x5fa4 <lora_driver_rn2483FactoryReset+0x22>
    5fa2:	80 e0       	ldi	r24, 0x00	; 0
    5fa4:	08 95       	ret

00005fa6 <lora_driver_getRn2483Hweui>:
    5fa6:	cf 93       	push	r28
    5fa8:	df 93       	push	r29
    5faa:	ec 01       	movw	r28, r24
    5fac:	60 e0       	ldi	r22, 0x00	; 0
    5fae:	70 e0       	ldi	r23, 0x00	; 0
    5fb0:	8e e2       	ldi	r24, 0x2E	; 46
    5fb2:	94 e0       	ldi	r25, 0x04	; 4
    5fb4:	bf de       	rcall	.-642    	; 0x5d34 <_uploadMessage>
    5fb6:	e1 ee       	ldi	r30, 0xE1	; 225
    5fb8:	f2 e1       	ldi	r31, 0x12	; 18
    5fba:	01 90       	ld	r0, Z+
    5fbc:	00 20       	and	r0, r0
    5fbe:	e9 f7       	brne	.-6      	; 0x5fba <lora_driver_getRn2483Hweui+0x14>
    5fc0:	e2 5f       	subi	r30, 0xF2	; 242
    5fc2:	f2 41       	sbci	r31, 0x12	; 18
    5fc4:	39 f4       	brne	.+14     	; 0x5fd4 <lora_driver_getRn2483Hweui+0x2e>
    5fc6:	61 ee       	ldi	r22, 0xE1	; 225
    5fc8:	72 e1       	ldi	r23, 0x12	; 18
    5fca:	ce 01       	movw	r24, r28
    5fcc:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <strcpy>
    5fd0:	80 e0       	ldi	r24, 0x00	; 0
    5fd2:	02 c0       	rjmp	.+4      	; 0x5fd8 <lora_driver_getRn2483Hweui+0x32>
    5fd4:	18 82       	st	Y, r1
    5fd6:	81 e0       	ldi	r24, 0x01	; 1
    5fd8:	df 91       	pop	r29
    5fda:	cf 91       	pop	r28
    5fdc:	08 95       	ret

00005fde <lora_driver_setDeviceIdentifier>:
    5fde:	fc 01       	movw	r30, r24
    5fe0:	01 90       	ld	r0, Z+
    5fe2:	00 20       	and	r0, r0
    5fe4:	e9 f7       	brne	.-6      	; 0x5fe0 <lora_driver_setDeviceIdentifier+0x2>
    5fe6:	9f 01       	movw	r18, r30
    5fe8:	21 51       	subi	r18, 0x11	; 17
    5fea:	31 09       	sbc	r19, r1
    5fec:	28 17       	cp	r18, r24
    5fee:	39 07       	cpc	r19, r25
    5ff0:	29 f4       	brne	.+10     	; 0x5ffc <lora_driver_setDeviceIdentifier+0x1e>
    5ff2:	bc 01       	movw	r22, r24
    5ff4:	8c e5       	ldi	r24, 0x5C	; 92
    5ff6:	94 e0       	ldi	r25, 0x04	; 4
    5ff8:	6c cf       	rjmp	.-296    	; 0x5ed2 <_uploadMessageRc>
    5ffa:	08 95       	ret
    5ffc:	89 e0       	ldi	r24, 0x09	; 9
    5ffe:	08 95       	ret

00006000 <lora_driver_setApplicationIdentifier>:
    6000:	fc 01       	movw	r30, r24
    6002:	01 90       	ld	r0, Z+
    6004:	00 20       	and	r0, r0
    6006:	e9 f7       	brne	.-6      	; 0x6002 <lora_driver_setApplicationIdentifier+0x2>
    6008:	9f 01       	movw	r18, r30
    600a:	21 51       	subi	r18, 0x11	; 17
    600c:	31 09       	sbc	r19, r1
    600e:	28 17       	cp	r18, r24
    6010:	39 07       	cpc	r19, r25
    6012:	29 f4       	brne	.+10     	; 0x601e <lora_driver_setApplicationIdentifier+0x1e>
    6014:	bc 01       	movw	r22, r24
    6016:	8b e6       	ldi	r24, 0x6B	; 107
    6018:	94 e0       	ldi	r25, 0x04	; 4
    601a:	5b cf       	rjmp	.-330    	; 0x5ed2 <_uploadMessageRc>
    601c:	08 95       	ret
    601e:	89 e0       	ldi	r24, 0x09	; 9
    6020:	08 95       	ret

00006022 <lora_driver_setApplicationKey>:
    6022:	fc 01       	movw	r30, r24
    6024:	01 90       	ld	r0, Z+
    6026:	00 20       	and	r0, r0
    6028:	e9 f7       	brne	.-6      	; 0x6024 <lora_driver_setApplicationKey+0x2>
    602a:	9f 01       	movw	r18, r30
    602c:	21 52       	subi	r18, 0x21	; 33
    602e:	31 09       	sbc	r19, r1
    6030:	28 17       	cp	r18, r24
    6032:	39 07       	cpc	r19, r25
    6034:	29 f4       	brne	.+10     	; 0x6040 <lora_driver_setApplicationKey+0x1e>
    6036:	bc 01       	movw	r22, r24
    6038:	8a e7       	ldi	r24, 0x7A	; 122
    603a:	94 e0       	ldi	r25, 0x04	; 4
    603c:	4a cf       	rjmp	.-364    	; 0x5ed2 <_uploadMessageRc>
    603e:	08 95       	ret
    6040:	89 e0       	ldi	r24, 0x09	; 9
    6042:	08 95       	ret

00006044 <lora_driver_saveMac>:
    6044:	60 e0       	ldi	r22, 0x00	; 0
    6046:	70 e0       	ldi	r23, 0x00	; 0
    6048:	89 eb       	ldi	r24, 0xB9	; 185
    604a:	94 e0       	ldi	r25, 0x04	; 4
    604c:	42 cf       	rjmp	.-380    	; 0x5ed2 <_uploadMessageRc>
    604e:	08 95       	ret

00006050 <lora_driver_join>:
    6050:	0f 93       	push	r16
    6052:	1f 93       	push	r17
    6054:	e8 2f       	mov	r30, r24
    6056:	f0 e0       	ldi	r31, 0x00	; 0
    6058:	ee 0f       	add	r30, r30
    605a:	ff 1f       	adc	r31, r31
    605c:	ed 56       	subi	r30, 0x6D	; 109
    605e:	f9 4f       	sbci	r31, 0xF9	; 249
    6060:	60 81       	ld	r22, Z
    6062:	71 81       	ldd	r23, Z+1	; 0x01
    6064:	82 ec       	ldi	r24, 0xC2	; 194
    6066:	94 e0       	ldi	r25, 0x04	; 4
    6068:	34 df       	rcall	.-408    	; 0x5ed2 <_uploadMessageRc>
    606a:	81 11       	cpse	r24, r1
    606c:	14 c0       	rjmp	.+40     	; 0x6096 <lora_driver_join+0x46>
    606e:	08 e2       	ldi	r16, 0x28	; 40
    6070:	15 e0       	ldi	r17, 0x05	; 5
    6072:	20 e0       	ldi	r18, 0x00	; 0
    6074:	30 e0       	ldi	r19, 0x00	; 0
    6076:	4d e2       	ldi	r20, 0x2D	; 45
    6078:	50 e0       	ldi	r21, 0x00	; 0
    607a:	61 ee       	ldi	r22, 0xE1	; 225
    607c:	72 e1       	ldi	r23, 0x12	; 18
    607e:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    6082:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    6086:	0e 94 8a 10 	call	0x2114	; 0x2114 <xStreamBufferReceive>
    608a:	88 23       	and	r24, r24
    608c:	21 f0       	breq	.+8      	; 0x6096 <lora_driver_join+0x46>
    608e:	81 ee       	ldi	r24, 0xE1	; 225
    6090:	92 e1       	ldi	r25, 0x12	; 18
    6092:	aa de       	rcall	.-684    	; 0x5de8 <_reply2ReturnCode>
    6094:	03 c0       	rjmp	.+6      	; 0x609c <lora_driver_join+0x4c>
    6096:	81 ee       	ldi	r24, 0xE1	; 225
    6098:	92 e1       	ldi	r25, 0x12	; 18
    609a:	a6 de       	rcall	.-692    	; 0x5de8 <_reply2ReturnCode>
    609c:	1f 91       	pop	r17
    609e:	0f 91       	pop	r16
    60a0:	08 95       	ret

000060a2 <lora_driver_sendUploadMessage>:
    60a2:	0f 93       	push	r16
    60a4:	1f 93       	push	r17
    60a6:	cf 93       	push	r28
    60a8:	df 93       	push	r29
    60aa:	1f 92       	push	r1
    60ac:	cd b7       	in	r28, 0x3d	; 61
    60ae:	de b7       	in	r29, 0x3e	; 62
    60b0:	db 01       	movw	r26, r22
    60b2:	11 96       	adiw	r26, 0x01	; 1
    60b4:	9c 91       	ld	r25, X
    60b6:	11 97       	sbiw	r26, 0x01	; 1
    60b8:	95 31       	cpi	r25, 0x15	; 21
    60ba:	08 f0       	brcs	.+2      	; 0x60be <lora_driver_sendUploadMessage+0x1c>
    60bc:	b4 c0       	rjmp	.+360    	; 0x6226 <lora_driver_sendUploadMessage+0x184>
    60be:	99 23       	and	r25, r25
    60c0:	81 f1       	breq	.+96     	; 0x6122 <lora_driver_sendUploadMessage+0x80>
    60c2:	60 e0       	ldi	r22, 0x00	; 0
    60c4:	70 e0       	ldi	r23, 0x00	; 0
    60c6:	27 2f       	mov	r18, r23
    60c8:	30 e0       	ldi	r19, 0x00	; 0
    60ca:	46 2f       	mov	r20, r22
    60cc:	50 e0       	ldi	r21, 0x00	; 0
    60ce:	fd 01       	movw	r30, r26
    60d0:	e4 0f       	add	r30, r20
    60d2:	f5 1f       	adc	r31, r21
    60d4:	92 81       	ldd	r25, Z+2	; 0x02
    60d6:	92 95       	swap	r25
    60d8:	9f 70       	andi	r25, 0x0F	; 15
    60da:	9a 30       	cpi	r25, 0x0A	; 10
    60dc:	10 f0       	brcs	.+4      	; 0x60e2 <lora_driver_sendUploadMessage+0x40>
    60de:	99 5c       	subi	r25, 0xC9	; 201
    60e0:	01 c0       	rjmp	.+2      	; 0x60e4 <lora_driver_sendUploadMessage+0x42>
    60e2:	90 5d       	subi	r25, 0xD0	; 208
    60e4:	f9 01       	movw	r30, r18
    60e6:	ee 58       	subi	r30, 0x8E	; 142
    60e8:	fd 4e       	sbci	r31, 0xED	; 237
    60ea:	90 83       	st	Z, r25
    60ec:	2f 5f       	subi	r18, 0xFF	; 255
    60ee:	3f 4f       	sbci	r19, 0xFF	; 255
    60f0:	fd 01       	movw	r30, r26
    60f2:	e4 0f       	add	r30, r20
    60f4:	f5 1f       	adc	r31, r21
    60f6:	92 81       	ldd	r25, Z+2	; 0x02
    60f8:	9f 70       	andi	r25, 0x0F	; 15
    60fa:	49 2f       	mov	r20, r25
    60fc:	50 e0       	ldi	r21, 0x00	; 0
    60fe:	4a 30       	cpi	r20, 0x0A	; 10
    6100:	51 05       	cpc	r21, r1
    6102:	14 f0       	brlt	.+4      	; 0x6108 <lora_driver_sendUploadMessage+0x66>
    6104:	99 5c       	subi	r25, 0xC9	; 201
    6106:	01 c0       	rjmp	.+2      	; 0x610a <lora_driver_sendUploadMessage+0x68>
    6108:	90 5d       	subi	r25, 0xD0	; 208
    610a:	f9 01       	movw	r30, r18
    610c:	ee 58       	subi	r30, 0x8E	; 142
    610e:	fd 4e       	sbci	r31, 0xED	; 237
    6110:	90 83       	st	Z, r25
    6112:	7e 5f       	subi	r23, 0xFE	; 254
    6114:	6f 5f       	subi	r22, 0xFF	; 255
    6116:	11 96       	adiw	r26, 0x01	; 1
    6118:	9c 91       	ld	r25, X
    611a:	11 97       	sbiw	r26, 0x01	; 1
    611c:	69 17       	cp	r22, r25
    611e:	98 f2       	brcs	.-90     	; 0x60c6 <lora_driver_sendUploadMessage+0x24>
    6120:	01 c0       	rjmp	.+2      	; 0x6124 <lora_driver_sendUploadMessage+0x82>
    6122:	70 e0       	ldi	r23, 0x00	; 0
    6124:	e7 2f       	mov	r30, r23
    6126:	f0 e0       	ldi	r31, 0x00	; 0
    6128:	ee 58       	subi	r30, 0x8E	; 142
    612a:	fd 4e       	sbci	r31, 0xED	; 237
    612c:	10 82       	st	Z, r1
    612e:	4c 91       	ld	r20, X
    6130:	81 11       	cpse	r24, r1
    6132:	03 c0       	rjmp	.+6      	; 0x613a <lora_driver_sendUploadMessage+0x98>
    6134:	8b ec       	ldi	r24, 0xCB	; 203
    6136:	94 e0       	ldi	r25, 0x04	; 4
    6138:	02 c0       	rjmp	.+4      	; 0x613e <lora_driver_sendUploadMessage+0x9c>
    613a:	8d ec       	ldi	r24, 0xCD	; 205
    613c:	94 e0       	ldi	r25, 0x04	; 4
    613e:	22 e7       	ldi	r18, 0x72	; 114
    6140:	32 e1       	ldi	r19, 0x12	; 18
    6142:	3f 93       	push	r19
    6144:	2f 93       	push	r18
    6146:	1f 92       	push	r1
    6148:	4f 93       	push	r20
    614a:	9f 93       	push	r25
    614c:	8f 93       	push	r24
    614e:	81 ed       	ldi	r24, 0xD1	; 209
    6150:	94 e0       	ldi	r25, 0x04	; 4
    6152:	9f 93       	push	r25
    6154:	8f 93       	push	r24
    6156:	84 eb       	ldi	r24, 0xB4	; 180
    6158:	92 e1       	ldi	r25, 0x12	; 18
    615a:	9f 93       	push	r25
    615c:	8f 93       	push	r24
    615e:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <sprintf>
    6162:	60 e0       	ldi	r22, 0x00	; 0
    6164:	70 e0       	ldi	r23, 0x00	; 0
    6166:	84 eb       	ldi	r24, 0xB4	; 180
    6168:	92 e1       	ldi	r25, 0x12	; 18
    616a:	b3 de       	rcall	.-666    	; 0x5ed2 <_uploadMessageRc>
    616c:	0f b6       	in	r0, 0x3f	; 63
    616e:	f8 94       	cli
    6170:	de bf       	out	0x3e, r29	; 62
    6172:	0f be       	out	0x3f, r0	; 63
    6174:	cd bf       	out	0x3d, r28	; 61
    6176:	81 11       	cpse	r24, r1
    6178:	59 c0       	rjmp	.+178    	; 0x622c <lora_driver_sendUploadMessage+0x18a>
    617a:	08 e2       	ldi	r16, 0x28	; 40
    617c:	15 e0       	ldi	r17, 0x05	; 5
    617e:	20 e0       	ldi	r18, 0x00	; 0
    6180:	30 e0       	ldi	r19, 0x00	; 0
    6182:	4d e2       	ldi	r20, 0x2D	; 45
    6184:	50 e0       	ldi	r21, 0x00	; 0
    6186:	61 ee       	ldi	r22, 0xE1	; 225
    6188:	72 e1       	ldi	r23, 0x12	; 18
    618a:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    618e:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    6192:	0e 94 8a 10 	call	0x2114	; 0x2114 <xStreamBufferReceive>
    6196:	88 23       	and	r24, r24
    6198:	09 f4       	brne	.+2      	; 0x619c <lora_driver_sendUploadMessage+0xfa>
    619a:	47 c0       	rjmp	.+142    	; 0x622a <lora_driver_sendUploadMessage+0x188>
    619c:	81 ee       	ldi	r24, 0xE1	; 225
    619e:	92 e1       	ldi	r25, 0x12	; 18
    61a0:	23 de       	rcall	.-954    	; 0x5de8 <_reply2ReturnCode>
    61a2:	8e 30       	cpi	r24, 0x0E	; 14
    61a4:	09 f0       	breq	.+2      	; 0x61a8 <lora_driver_sendUploadMessage+0x106>
    61a6:	42 c0       	rjmp	.+132    	; 0x622c <lora_driver_sendUploadMessage+0x18a>
    61a8:	87 e0       	ldi	r24, 0x07	; 7
    61aa:	89 83       	std	Y+1, r24	; 0x01
    61ac:	80 91 56 12 	lds	r24, 0x1256	; 0x801256 <_downlinkMessageBuffer>
    61b0:	90 91 57 12 	lds	r25, 0x1257	; 0x801257 <_downlinkMessageBuffer+0x1>
    61b4:	89 2b       	or	r24, r25
    61b6:	a9 f1       	breq	.+106    	; 0x6222 <lora_driver_sendUploadMessage+0x180>
    61b8:	be 01       	movw	r22, r28
    61ba:	6f 5f       	subi	r22, 0xFF	; 255
    61bc:	7f 4f       	sbci	r23, 0xFF	; 255
    61be:	81 ee       	ldi	r24, 0xE1	; 225
    61c0:	92 e1       	ldi	r25, 0x12	; 18
    61c2:	68 d1       	rcall	.+720    	; 0x6494 <decode_port_no>
    61c4:	80 93 5c 12 	sts	0x125C, r24	; 0x80125c <_downlinkPayload>
    61c8:	e9 81       	ldd	r30, Y+1	; 0x01
    61ca:	f0 e0       	ldi	r31, 0x00	; 0
    61cc:	ef 51       	subi	r30, 0x1F	; 31
    61ce:	fd 4e       	sbci	r31, 0xED	; 237
    61d0:	df 01       	movw	r26, r30
    61d2:	0d 90       	ld	r0, X+
    61d4:	00 20       	and	r0, r0
    61d6:	e9 f7       	brne	.-6      	; 0x61d2 <lora_driver_sendUploadMessage+0x130>
    61d8:	11 97       	sbiw	r26, 0x01	; 1
    61da:	ae 1b       	sub	r26, r30
    61dc:	bf 0b       	sbc	r27, r31
    61de:	aa 23       	and	r26, r26
    61e0:	91 f0       	breq	.+36     	; 0x6206 <lora_driver_sendUploadMessage+0x164>
    61e2:	bb 27       	eor	r27, r27
    61e4:	cd 01       	movw	r24, r26
    61e6:	01 97       	sbiw	r24, 0x01	; 1
    61e8:	9c 01       	movw	r18, r24
    61ea:	12 f4       	brpl	.+4      	; 0x61f0 <lora_driver_sendUploadMessage+0x14e>
    61ec:	2f 5f       	subi	r18, 0xFF	; 255
    61ee:	3f 4f       	sbci	r19, 0xFF	; 255
    61f0:	35 95       	asr	r19
    61f2:	27 95       	ror	r18
    61f4:	20 93 5d 12 	sts	0x125D, r18	; 0x80125d <_downlinkPayload+0x1>
    61f8:	af 01       	movw	r20, r30
    61fa:	4f 5f       	subi	r20, 0xFF	; 255
    61fc:	5f 4f       	sbci	r21, 0xFF	; 255
    61fe:	64 e1       	ldi	r22, 0x14	; 20
    6200:	8e e5       	ldi	r24, 0x5E	; 94
    6202:	92 e1       	ldi	r25, 0x12	; 18
    6204:	73 d1       	rcall	.+742    	; 0x64ec <decode_hexadecimal_string_bytes>
    6206:	01 e0       	ldi	r16, 0x01	; 1
    6208:	10 e0       	ldi	r17, 0x00	; 0
    620a:	20 e0       	ldi	r18, 0x00	; 0
    620c:	30 e0       	ldi	r19, 0x00	; 0
    620e:	46 e1       	ldi	r20, 0x16	; 22
    6210:	50 e0       	ldi	r21, 0x00	; 0
    6212:	6c e5       	ldi	r22, 0x5C	; 92
    6214:	72 e1       	ldi	r23, 0x12	; 18
    6216:	80 91 56 12 	lds	r24, 0x1256	; 0x801256 <_downlinkMessageBuffer>
    621a:	90 91 57 12 	lds	r25, 0x1257	; 0x801257 <_downlinkMessageBuffer+0x1>
    621e:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <xStreamBufferSend>
    6222:	8e e0       	ldi	r24, 0x0E	; 14
    6224:	03 c0       	rjmp	.+6      	; 0x622c <lora_driver_sendUploadMessage+0x18a>
    6226:	84 e1       	ldi	r24, 0x14	; 20
    6228:	01 c0       	rjmp	.+2      	; 0x622c <lora_driver_sendUploadMessage+0x18a>
    622a:	80 e0       	ldi	r24, 0x00	; 0
    622c:	0f 90       	pop	r0
    622e:	df 91       	pop	r29
    6230:	cf 91       	pop	r28
    6232:	1f 91       	pop	r17
    6234:	0f 91       	pop	r16
    6236:	08 95       	ret

00006238 <lora_driver_setAdaptiveDataRate>:
    6238:	81 30       	cpi	r24, 0x01	; 1
    623a:	19 f0       	breq	.+6      	; 0x6242 <lora_driver_setAdaptiveDataRate+0xa>
    623c:	61 ee       	ldi	r22, 0xE1	; 225
    623e:	74 e0       	ldi	r23, 0x04	; 4
    6240:	02 c0       	rjmp	.+4      	; 0x6246 <lora_driver_setAdaptiveDataRate+0xe>
    6242:	6a eb       	ldi	r22, 0xBA	; 186
    6244:	75 e0       	ldi	r23, 0x05	; 5
    6246:	85 ee       	ldi	r24, 0xE5	; 229
    6248:	94 e0       	ldi	r25, 0x04	; 4
    624a:	43 ce       	rjmp	.-890    	; 0x5ed2 <_uploadMessageRc>
    624c:	08 95       	ret

0000624e <lora_driver_setReceiveDelay>:
    624e:	9f 93       	push	r25
    6250:	8f 93       	push	r24
    6252:	86 e1       	ldi	r24, 0x16	; 22
    6254:	95 e0       	ldi	r25, 0x05	; 5
    6256:	9f 93       	push	r25
    6258:	8f 93       	push	r24
    625a:	84 eb       	ldi	r24, 0xB4	; 180
    625c:	92 e1       	ldi	r25, 0x12	; 18
    625e:	9f 93       	push	r25
    6260:	8f 93       	push	r24
    6262:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <sprintf>
    6266:	60 e0       	ldi	r22, 0x00	; 0
    6268:	70 e0       	ldi	r23, 0x00	; 0
    626a:	84 eb       	ldi	r24, 0xB4	; 180
    626c:	92 e1       	ldi	r25, 0x12	; 18
    626e:	31 de       	rcall	.-926    	; 0x5ed2 <_uploadMessageRc>
    6270:	0f 90       	pop	r0
    6272:	0f 90       	pop	r0
    6274:	0f 90       	pop	r0
    6276:	0f 90       	pop	r0
    6278:	0f 90       	pop	r0
    627a:	0f 90       	pop	r0
    627c:	08 95       	ret

0000627e <lora_driver_configureToEu868>:
    627e:	2f 92       	push	r2
    6280:	3f 92       	push	r3
    6282:	4f 92       	push	r4
    6284:	5f 92       	push	r5
    6286:	6f 92       	push	r6
    6288:	7f 92       	push	r7
    628a:	8f 92       	push	r8
    628c:	9f 92       	push	r9
    628e:	af 92       	push	r10
    6290:	bf 92       	push	r11
    6292:	cf 92       	push	r12
    6294:	df 92       	push	r13
    6296:	ef 92       	push	r14
    6298:	ff 92       	push	r15
    629a:	0f 93       	push	r16
    629c:	1f 93       	push	r17
    629e:	cf 93       	push	r28
    62a0:	df 93       	push	r29
    62a2:	cd b7       	in	r28, 0x3d	; 61
    62a4:	de b7       	in	r29, 0x3e	; 62
    62a6:	a0 97       	sbiw	r28, 0x20	; 32
    62a8:	0f b6       	in	r0, 0x3f	; 63
    62aa:	f8 94       	cli
    62ac:	de bf       	out	0x3e, r29	; 62
    62ae:	0f be       	out	0x3f, r0	; 63
    62b0:	cd bf       	out	0x3d, r28	; 61
    62b2:	63 e4       	ldi	r22, 0x43	; 67
    62b4:	75 e0       	ldi	r23, 0x05	; 5
    62b6:	8f e4       	ldi	r24, 0x4F	; 79
    62b8:	95 e0       	ldi	r25, 0x05	; 5
    62ba:	3c dd       	rcall	.-1416   	; 0x5d34 <_uploadMessage>
    62bc:	95 dd       	rcall	.-1238   	; 0x5de8 <_reply2ReturnCode>
    62be:	81 11       	cpse	r24, r1
    62c0:	a3 c0       	rjmp	.+326    	; 0x6408 <lora_driver_configureToEu868+0x18a>
    62c2:	80 e2       	ldi	r24, 0x20	; 32
    62c4:	ee ed       	ldi	r30, 0xDE	; 222
    62c6:	f3 e0       	ldi	r31, 0x03	; 3
    62c8:	de 01       	movw	r26, r28
    62ca:	11 96       	adiw	r26, 0x01	; 1
    62cc:	01 90       	ld	r0, Z+
    62ce:	0d 92       	st	X+, r0
    62d0:	8a 95       	dec	r24
    62d2:	e1 f7       	brne	.-8      	; 0x62cc <lora_driver_configureToEu868+0x4e>
    62d4:	9e 01       	movw	r18, r28
    62d6:	2f 5f       	subi	r18, 0xFF	; 255
    62d8:	3f 4f       	sbci	r19, 0xFF	; 255
    62da:	69 01       	movw	r12, r18
    62dc:	e1 2c       	mov	r14, r1
    62de:	f1 2c       	mov	r15, r1
    62e0:	0f 2e       	mov	r0, r31
    62e2:	fb e5       	ldi	r31, 0x5B	; 91
    62e4:	af 2e       	mov	r10, r31
    62e6:	f5 e0       	ldi	r31, 0x05	; 5
    62e8:	bf 2e       	mov	r11, r31
    62ea:	f0 2d       	mov	r31, r0
    62ec:	04 eb       	ldi	r16, 0xB4	; 180
    62ee:	12 e1       	ldi	r17, 0x12	; 18
    62f0:	0f 2e       	mov	r0, r31
    62f2:	f4 e7       	ldi	r31, 0x74	; 116
    62f4:	4f 2e       	mov	r4, r31
    62f6:	f5 e0       	ldi	r31, 0x05	; 5
    62f8:	5f 2e       	mov	r5, r31
    62fa:	f0 2d       	mov	r31, r0
    62fc:	0f 2e       	mov	r0, r31
    62fe:	fb e8       	ldi	r31, 0x8B	; 139
    6300:	8f 2e       	mov	r8, r31
    6302:	f5 e0       	ldi	r31, 0x05	; 5
    6304:	9f 2e       	mov	r9, r31
    6306:	f0 2d       	mov	r31, r0
    6308:	0f 2e       	mov	r0, r31
    630a:	f5 ea       	ldi	r31, 0xA5	; 165
    630c:	6f 2e       	mov	r6, r31
    630e:	f5 e0       	ldi	r31, 0x05	; 5
    6310:	7f 2e       	mov	r7, r31
    6312:	f0 2d       	mov	r31, r0
    6314:	3e 2c       	mov	r3, r14
    6316:	2f 2c       	mov	r2, r15
    6318:	ff 92       	push	r15
    631a:	ef 92       	push	r14
    631c:	bf 92       	push	r11
    631e:	af 92       	push	r10
    6320:	1f 93       	push	r17
    6322:	0f 93       	push	r16
    6324:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <sprintf>
    6328:	60 e0       	ldi	r22, 0x00	; 0
    632a:	70 e0       	ldi	r23, 0x00	; 0
    632c:	c8 01       	movw	r24, r16
    632e:	02 dd       	rcall	.-1532   	; 0x5d34 <_uploadMessage>
    6330:	5b dd       	rcall	.-1354   	; 0x5de8 <_reply2ReturnCode>
    6332:	0f 90       	pop	r0
    6334:	0f 90       	pop	r0
    6336:	0f 90       	pop	r0
    6338:	0f 90       	pop	r0
    633a:	0f 90       	pop	r0
    633c:	0f 90       	pop	r0
    633e:	81 11       	cpse	r24, r1
    6340:	63 c0       	rjmp	.+198    	; 0x6408 <lora_driver_configureToEu868+0x18a>
    6342:	32 e0       	ldi	r19, 0x02	; 2
    6344:	3e 15       	cp	r19, r14
    6346:	e8 f4       	brcc	.+58     	; 0x6382 <lora_driver_configureToEu868+0x104>
    6348:	f6 01       	movw	r30, r12
    634a:	83 81       	ldd	r24, Z+3	; 0x03
    634c:	8f 93       	push	r24
    634e:	82 81       	ldd	r24, Z+2	; 0x02
    6350:	8f 93       	push	r24
    6352:	81 81       	ldd	r24, Z+1	; 0x01
    6354:	8f 93       	push	r24
    6356:	80 81       	ld	r24, Z
    6358:	8f 93       	push	r24
    635a:	ff 92       	push	r15
    635c:	ef 92       	push	r14
    635e:	5f 92       	push	r5
    6360:	4f 92       	push	r4
    6362:	1f 93       	push	r17
    6364:	0f 93       	push	r16
    6366:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <sprintf>
    636a:	60 e0       	ldi	r22, 0x00	; 0
    636c:	70 e0       	ldi	r23, 0x00	; 0
    636e:	c8 01       	movw	r24, r16
    6370:	e1 dc       	rcall	.-1598   	; 0x5d34 <_uploadMessage>
    6372:	3a dd       	rcall	.-1420   	; 0x5de8 <_reply2ReturnCode>
    6374:	0f b6       	in	r0, 0x3f	; 63
    6376:	f8 94       	cli
    6378:	de bf       	out	0x3e, r29	; 62
    637a:	0f be       	out	0x3f, r0	; 63
    637c:	cd bf       	out	0x3d, r28	; 61
    637e:	81 11       	cpse	r24, r1
    6380:	43 c0       	rjmp	.+134    	; 0x6408 <lora_driver_configureToEu868+0x18a>
    6382:	2f 92       	push	r2
    6384:	3f 92       	push	r3
    6386:	9f 92       	push	r9
    6388:	8f 92       	push	r8
    638a:	1f 93       	push	r17
    638c:	0f 93       	push	r16
    638e:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <sprintf>
    6392:	60 e0       	ldi	r22, 0x00	; 0
    6394:	70 e0       	ldi	r23, 0x00	; 0
    6396:	c8 01       	movw	r24, r16
    6398:	cd dc       	rcall	.-1638   	; 0x5d34 <_uploadMessage>
    639a:	26 dd       	rcall	.-1460   	; 0x5de8 <_reply2ReturnCode>
    639c:	0f 90       	pop	r0
    639e:	0f 90       	pop	r0
    63a0:	0f 90       	pop	r0
    63a2:	0f 90       	pop	r0
    63a4:	0f 90       	pop	r0
    63a6:	0f 90       	pop	r0
    63a8:	81 11       	cpse	r24, r1
    63aa:	2e c0       	rjmp	.+92     	; 0x6408 <lora_driver_configureToEu868+0x18a>
    63ac:	2f 92       	push	r2
    63ae:	3f 92       	push	r3
    63b0:	7f 92       	push	r7
    63b2:	6f 92       	push	r6
    63b4:	1f 93       	push	r17
    63b6:	0f 93       	push	r16
    63b8:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <sprintf>
    63bc:	60 e0       	ldi	r22, 0x00	; 0
    63be:	70 e0       	ldi	r23, 0x00	; 0
    63c0:	c8 01       	movw	r24, r16
    63c2:	b8 dc       	rcall	.-1680   	; 0x5d34 <_uploadMessage>
    63c4:	11 dd       	rcall	.-1502   	; 0x5de8 <_reply2ReturnCode>
    63c6:	0f 90       	pop	r0
    63c8:	0f 90       	pop	r0
    63ca:	0f 90       	pop	r0
    63cc:	0f 90       	pop	r0
    63ce:	0f 90       	pop	r0
    63d0:	0f 90       	pop	r0
    63d2:	81 11       	cpse	r24, r1
    63d4:	19 c0       	rjmp	.+50     	; 0x6408 <lora_driver_configureToEu868+0x18a>
    63d6:	3f ef       	ldi	r19, 0xFF	; 255
    63d8:	e3 1a       	sub	r14, r19
    63da:	f3 0a       	sbc	r15, r19
    63dc:	84 e0       	ldi	r24, 0x04	; 4
    63de:	c8 0e       	add	r12, r24
    63e0:	d1 1c       	adc	r13, r1
    63e2:	98 e0       	ldi	r25, 0x08	; 8
    63e4:	e9 16       	cp	r14, r25
    63e6:	f1 04       	cpc	r15, r1
    63e8:	09 f0       	breq	.+2      	; 0x63ec <lora_driver_configureToEu868+0x16e>
    63ea:	94 cf       	rjmp	.-216    	; 0x6314 <lora_driver_configureToEu868+0x96>
    63ec:	60 e0       	ldi	r22, 0x00	; 0
    63ee:	70 e0       	ldi	r23, 0x00	; 0
    63f0:	8d eb       	ldi	r24, 0xBD	; 189
    63f2:	95 e0       	ldi	r25, 0x05	; 5
    63f4:	9f dc       	rcall	.-1730   	; 0x5d34 <_uploadMessage>
    63f6:	f8 dc       	rcall	.-1552   	; 0x5de8 <_reply2ReturnCode>
    63f8:	81 11       	cpse	r24, r1
    63fa:	06 c0       	rjmp	.+12     	; 0x6408 <lora_driver_configureToEu868+0x18a>
    63fc:	60 e0       	ldi	r22, 0x00	; 0
    63fe:	70 e0       	ldi	r23, 0x00	; 0
    6400:	8e ec       	ldi	r24, 0xCE	; 206
    6402:	95 e0       	ldi	r25, 0x05	; 5
    6404:	97 dc       	rcall	.-1746   	; 0x5d34 <_uploadMessage>
    6406:	f0 dc       	rcall	.-1568   	; 0x5de8 <_reply2ReturnCode>
    6408:	a0 96       	adiw	r28, 0x20	; 32
    640a:	0f b6       	in	r0, 0x3f	; 63
    640c:	f8 94       	cli
    640e:	de bf       	out	0x3e, r29	; 62
    6410:	0f be       	out	0x3f, r0	; 63
    6412:	cd bf       	out	0x3d, r28	; 61
    6414:	df 91       	pop	r29
    6416:	cf 91       	pop	r28
    6418:	1f 91       	pop	r17
    641a:	0f 91       	pop	r16
    641c:	ff 90       	pop	r15
    641e:	ef 90       	pop	r14
    6420:	df 90       	pop	r13
    6422:	cf 90       	pop	r12
    6424:	bf 90       	pop	r11
    6426:	af 90       	pop	r10
    6428:	9f 90       	pop	r9
    642a:	8f 90       	pop	r8
    642c:	7f 90       	pop	r7
    642e:	6f 90       	pop	r6
    6430:	5f 90       	pop	r5
    6432:	4f 90       	pop	r4
    6434:	3f 90       	pop	r3
    6436:	2f 90       	pop	r2
    6438:	08 95       	ret

0000643a <lora_driver_setOtaaIdentity>:
    643a:	ef 92       	push	r14
    643c:	ff 92       	push	r15
    643e:	0f 93       	push	r16
    6440:	1f 93       	push	r17
    6442:	cf 93       	push	r28
    6444:	df 93       	push	r29
    6446:	ec 01       	movw	r28, r24
    6448:	8b 01       	movw	r16, r22
    644a:	7a 01       	movw	r14, r20
    644c:	81 e0       	ldi	r24, 0x01	; 1
    644e:	f4 de       	rcall	.-536    	; 0x6238 <lora_driver_setAdaptiveDataRate>
    6450:	81 11       	cpse	r24, r1
    6452:	0d c0       	rjmp	.+26     	; 0x646e <lora_driver_setOtaaIdentity+0x34>
    6454:	ce 01       	movw	r24, r28
    6456:	d4 dd       	rcall	.-1112   	; 0x6000 <lora_driver_setApplicationIdentifier>
    6458:	81 11       	cpse	r24, r1
    645a:	09 c0       	rjmp	.+18     	; 0x646e <lora_driver_setOtaaIdentity+0x34>
    645c:	c8 01       	movw	r24, r16
    645e:	e1 dd       	rcall	.-1086   	; 0x6022 <lora_driver_setApplicationKey>
    6460:	81 11       	cpse	r24, r1
    6462:	05 c0       	rjmp	.+10     	; 0x646e <lora_driver_setOtaaIdentity+0x34>
    6464:	c7 01       	movw	r24, r14
    6466:	bb dd       	rcall	.-1162   	; 0x5fde <lora_driver_setDeviceIdentifier>
    6468:	81 11       	cpse	r24, r1
    646a:	01 c0       	rjmp	.+2      	; 0x646e <lora_driver_setOtaaIdentity+0x34>
    646c:	eb dd       	rcall	.-1066   	; 0x6044 <lora_driver_saveMac>
    646e:	df 91       	pop	r29
    6470:	cf 91       	pop	r28
    6472:	1f 91       	pop	r17
    6474:	0f 91       	pop	r16
    6476:	ff 90       	pop	r15
    6478:	ef 90       	pop	r14
    647a:	08 95       	ret

0000647c <lora_driver_mapReturnCodeToText>:
    647c:	90 e0       	ldi	r25, 0x00	; 0
    647e:	fc 01       	movw	r30, r24
    6480:	ee 0f       	add	r30, r30
    6482:	ff 1f       	adc	r31, r31
    6484:	8e 0f       	add	r24, r30
    6486:	9f 1f       	adc	r25, r31
    6488:	fc 01       	movw	r30, r24
    648a:	e9 56       	subi	r30, 0x69	; 105
    648c:	f9 4f       	sbci	r31, 0xF9	; 249
    648e:	81 81       	ldd	r24, Z+1	; 0x01
    6490:	92 81       	ldd	r25, Z+2	; 0x02
    6492:	08 95       	ret

00006494 <decode_port_no>:
    6494:	dc 01       	movw	r26, r24
    6496:	00 97       	sbiw	r24, 0x00	; 0
    6498:	29 f1       	breq	.+74     	; 0x64e4 <decode_port_no+0x50>
    649a:	fb 01       	movw	r30, r22
    649c:	20 81       	ld	r18, Z
    649e:	fc 01       	movw	r30, r24
    64a0:	01 90       	ld	r0, Z+
    64a2:	00 20       	and	r0, r0
    64a4:	e9 f7       	brne	.-6      	; 0x64a0 <decode_port_no+0xc>
    64a6:	31 97       	sbiw	r30, 0x01	; 1
    64a8:	e8 1b       	sub	r30, r24
    64aa:	f9 0b       	sbc	r31, r25
    64ac:	82 2f       	mov	r24, r18
    64ae:	90 e0       	ldi	r25, 0x00	; 0
    64b0:	e8 17       	cp	r30, r24
    64b2:	f9 07       	cpc	r31, r25
    64b4:	c8 f0       	brcs	.+50     	; 0x64e8 <decode_port_no+0x54>
    64b6:	80 e0       	ldi	r24, 0x00	; 0
    64b8:	08 c0       	rjmp	.+16     	; 0x64ca <decode_port_no+0x36>
    64ba:	88 0f       	add	r24, r24
    64bc:	38 2f       	mov	r19, r24
    64be:	33 0f       	add	r19, r19
    64c0:	33 0f       	add	r19, r19
    64c2:	83 0f       	add	r24, r19
    64c4:	80 53       	subi	r24, 0x30	; 48
    64c6:	89 0f       	add	r24, r25
    64c8:	2f 5f       	subi	r18, 0xFF	; 255
    64ca:	fd 01       	movw	r30, r26
    64cc:	e2 0f       	add	r30, r18
    64ce:	f1 1d       	adc	r31, r1
    64d0:	90 81       	ld	r25, Z
    64d2:	30 ed       	ldi	r19, 0xD0	; 208
    64d4:	39 0f       	add	r19, r25
    64d6:	3a 30       	cpi	r19, 0x0A	; 10
    64d8:	10 f4       	brcc	.+4      	; 0x64de <decode_port_no+0x4a>
    64da:	91 11       	cpse	r25, r1
    64dc:	ee cf       	rjmp	.-36     	; 0x64ba <decode_port_no+0x26>
    64de:	fb 01       	movw	r30, r22
    64e0:	20 83       	st	Z, r18
    64e2:	08 95       	ret
    64e4:	80 e0       	ldi	r24, 0x00	; 0
    64e6:	08 95       	ret
    64e8:	80 e0       	ldi	r24, 0x00	; 0
    64ea:	08 95       	ret

000064ec <decode_hexadecimal_string_bytes>:
    64ec:	0f 93       	push	r16
    64ee:	1f 93       	push	r17
    64f0:	cf 93       	push	r28
    64f2:	df 93       	push	r29
    64f4:	dc 01       	movw	r26, r24
    64f6:	ea 01       	movw	r28, r20
    64f8:	20 97       	sbiw	r28, 0x00	; 0
    64fa:	e1 f1       	breq	.+120    	; 0x6574 <decode_hexadecimal_string_bytes+0x88>
    64fc:	fa 01       	movw	r30, r20
    64fe:	01 90       	ld	r0, Z+
    6500:	00 20       	and	r0, r0
    6502:	e9 f7       	brne	.-6      	; 0x64fe <decode_hexadecimal_string_bytes+0x12>
    6504:	31 97       	sbiw	r30, 0x01	; 1
    6506:	e4 1b       	sub	r30, r20
    6508:	f5 0b       	sbc	r31, r21
    650a:	32 97       	sbiw	r30, 0x02	; 2
    650c:	10 f5       	brcc	.+68     	; 0x6552 <decode_hexadecimal_string_bytes+0x66>
    650e:	32 c0       	rjmp	.+100    	; 0x6574 <decode_hexadecimal_string_bytes+0x88>
    6510:	8d 01       	movw	r16, r26
    6512:	04 0f       	add	r16, r20
    6514:	15 1f       	adc	r17, r21
    6516:	30 e0       	ldi	r19, 0x00	; 0
    6518:	ae 01       	movw	r20, r28
    651a:	42 0f       	add	r20, r18
    651c:	53 1f       	adc	r21, r19
    651e:	fa 01       	movw	r30, r20
    6520:	90 81       	ld	r25, Z
    6522:	91 34       	cpi	r25, 0x41	; 65
    6524:	28 f0       	brcs	.+10     	; 0x6530 <decode_hexadecimal_string_bytes+0x44>
    6526:	97 53       	subi	r25, 0x37	; 55
    6528:	59 2f       	mov	r21, r25
    652a:	52 95       	swap	r21
    652c:	50 7f       	andi	r21, 0xF0	; 240
    652e:	03 c0       	rjmp	.+6      	; 0x6536 <decode_hexadecimal_string_bytes+0x4a>
    6530:	59 2f       	mov	r21, r25
    6532:	52 95       	swap	r21
    6534:	50 7f       	andi	r21, 0xF0	; 240
    6536:	2c 0f       	add	r18, r28
    6538:	3d 1f       	adc	r19, r29
    653a:	f9 01       	movw	r30, r18
    653c:	91 81       	ldd	r25, Z+1	; 0x01
    653e:	91 34       	cpi	r25, 0x41	; 65
    6540:	10 f0       	brcs	.+4      	; 0x6546 <decode_hexadecimal_string_bytes+0x5a>
    6542:	97 53       	subi	r25, 0x37	; 55
    6544:	01 c0       	rjmp	.+2      	; 0x6548 <decode_hexadecimal_string_bytes+0x5c>
    6546:	90 53       	subi	r25, 0x30	; 48
    6548:	95 0f       	add	r25, r21
    654a:	f8 01       	movw	r30, r16
    654c:	90 83       	st	Z, r25
    654e:	8f 5f       	subi	r24, 0xFF	; 255
    6550:	01 c0       	rjmp	.+2      	; 0x6554 <decode_hexadecimal_string_bytes+0x68>
    6552:	80 e0       	ldi	r24, 0x00	; 0
    6554:	28 2f       	mov	r18, r24
    6556:	22 0f       	add	r18, r18
    6558:	48 2f       	mov	r20, r24
    655a:	50 e0       	ldi	r21, 0x00	; 0
    655c:	fe 01       	movw	r30, r28
    655e:	01 90       	ld	r0, Z+
    6560:	00 20       	and	r0, r0
    6562:	e9 f7       	brne	.-6      	; 0x655e <decode_hexadecimal_string_bytes+0x72>
    6564:	31 97       	sbiw	r30, 0x01	; 1
    6566:	ec 1b       	sub	r30, r28
    6568:	fd 0b       	sbc	r31, r29
    656a:	4e 17       	cp	r20, r30
    656c:	5f 07       	cpc	r21, r31
    656e:	10 f4       	brcc	.+4      	; 0x6574 <decode_hexadecimal_string_bytes+0x88>
    6570:	86 13       	cpse	r24, r22
    6572:	ce cf       	rjmp	.-100    	; 0x6510 <decode_hexadecimal_string_bytes+0x24>
    6574:	df 91       	pop	r29
    6576:	cf 91       	pop	r28
    6578:	1f 91       	pop	r17
    657a:	0f 91       	pop	r16
    657c:	08 95       	ret

0000657e <serial_create>:
    657e:	2f 92       	push	r2
    6580:	3f 92       	push	r3
    6582:	4f 92       	push	r4
    6584:	5f 92       	push	r5
    6586:	6f 92       	push	r6
    6588:	7f 92       	push	r7
    658a:	8f 92       	push	r8
    658c:	9f 92       	push	r9
    658e:	af 92       	push	r10
    6590:	cf 92       	push	r12
    6592:	ef 92       	push	r14
    6594:	ff 92       	push	r15
    6596:	0f 93       	push	r16
    6598:	1f 93       	push	r17
    659a:	cf 93       	push	r28
    659c:	df 93       	push	r29
    659e:	cd b7       	in	r28, 0x3d	; 61
    65a0:	de b7       	in	r29, 0x3e	; 62
    65a2:	f8 2e       	mov	r15, r24
    65a4:	2a 01       	movw	r4, r20
    65a6:	3b 01       	movw	r6, r22
    65a8:	88 e0       	ldi	r24, 0x08	; 8
    65aa:	90 e0       	ldi	r25, 0x00	; 0
    65ac:	b5 d6       	rcall	.+3434   	; 0x7318 <malloc>
    65ae:	8c 01       	movw	r16, r24
    65b0:	8f 2d       	mov	r24, r15
    65b2:	90 e0       	ldi	r25, 0x00	; 0
    65b4:	fc 01       	movw	r30, r24
    65b6:	ee 0f       	add	r30, r30
    65b8:	ff 1f       	adc	r31, r31
    65ba:	e2 5f       	subi	r30, 0xF2	; 242
    65bc:	fc 4e       	sbci	r31, 0xEC	; 236
    65be:	11 83       	std	Z+1, r17	; 0x01
    65c0:	00 83       	st	Z, r16
    65c2:	01 15       	cp	r16, r1
    65c4:	11 05       	cpc	r17, r1
    65c6:	09 f4       	brne	.+2      	; 0x65ca <serial_create+0x4c>
    65c8:	64 c0       	rjmp	.+200    	; 0x6692 <serial_create+0x114>
    65ca:	88 0f       	add	r24, r24
    65cc:	99 1f       	adc	r25, r25
    65ce:	fc 01       	movw	r30, r24
    65d0:	e9 5f       	subi	r30, 0xF9	; 249
    65d2:	fd 4f       	sbci	r31, 0xFD	; 253
    65d4:	80 81       	ld	r24, Z
    65d6:	91 81       	ldd	r25, Z+1	; 0x01
    65d8:	d8 01       	movw	r26, r16
    65da:	8d 93       	st	X+, r24
    65dc:	9c 93       	st	X, r25
    65de:	8c 2d       	mov	r24, r12
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	88 0f       	add	r24, r24
    65e4:	99 1f       	adc	r25, r25
    65e6:	88 0f       	add	r24, r24
    65e8:	99 1f       	adc	r25, r25
    65ea:	96 d6       	rcall	.+3372   	; 0x7318 <malloc>
    65ec:	1c 01       	movw	r2, r24
    65ee:	86 e0       	ldi	r24, 0x06	; 6
    65f0:	90 e0       	ldi	r25, 0x00	; 0
    65f2:	92 d6       	rcall	.+3364   	; 0x7318 <malloc>
    65f4:	7c 01       	movw	r14, r24
    65f6:	4c 2d       	mov	r20, r12
    65f8:	b1 01       	movw	r22, r2
    65fa:	50 d5       	rcall	.+2720   	; 0x709c <fifo_init>
    65fc:	f8 01       	movw	r30, r16
    65fe:	f5 82       	std	Z+5, r15	; 0x05
    6600:	e4 82       	std	Z+4, r14	; 0x04
    6602:	8a 2d       	mov	r24, r10
    6604:	90 e0       	ldi	r25, 0x00	; 0
    6606:	88 0f       	add	r24, r24
    6608:	99 1f       	adc	r25, r25
    660a:	88 0f       	add	r24, r24
    660c:	99 1f       	adc	r25, r25
    660e:	84 d6       	rcall	.+3336   	; 0x7318 <malloc>
    6610:	1c 01       	movw	r2, r24
    6612:	86 e0       	ldi	r24, 0x06	; 6
    6614:	90 e0       	ldi	r25, 0x00	; 0
    6616:	80 d6       	rcall	.+3328   	; 0x7318 <malloc>
    6618:	7c 01       	movw	r14, r24
    661a:	4a 2d       	mov	r20, r10
    661c:	b1 01       	movw	r22, r2
    661e:	3e d5       	rcall	.+2684   	; 0x709c <fifo_init>
    6620:	d8 01       	movw	r26, r16
    6622:	13 96       	adiw	r26, 0x03	; 3
    6624:	fc 92       	st	X, r15
    6626:	ee 92       	st	-X, r14
    6628:	12 97       	sbiw	r26, 0x02	; 2
    662a:	17 96       	adiw	r26, 0x07	; 7
    662c:	9c 92       	st	X, r9
    662e:	8e 92       	st	-X, r8
    6630:	16 97       	sbiw	r26, 0x06	; 6
    6632:	ff b6       	in	r15, 0x3f	; 63
    6634:	f8 94       	cli
    6636:	ed 91       	ld	r30, X+
    6638:	fc 91       	ld	r31, X
    663a:	11 97       	sbiw	r26, 0x01	; 1
    663c:	36 97       	sbiw	r30, 0x06	; 6
    663e:	80 81       	ld	r24, Z
    6640:	82 60       	ori	r24, 0x02	; 2
    6642:	80 83       	st	Z, r24
    6644:	8d 90       	ld	r8, X+
    6646:	9c 90       	ld	r9, X
    6648:	c3 01       	movw	r24, r6
    664a:	b2 01       	movw	r22, r4
    664c:	20 d6       	rcall	.+3136   	; 0x728e <__floatunsisf>
    664e:	20 e0       	ldi	r18, 0x00	; 0
    6650:	30 e0       	ldi	r19, 0x00	; 0
    6652:	40 e0       	ldi	r20, 0x00	; 0
    6654:	51 e4       	ldi	r21, 0x41	; 65
    6656:	9d da       	rcall	.-2758   	; 0x5b92 <__mulsf3>
    6658:	9b 01       	movw	r18, r22
    665a:	ac 01       	movw	r20, r24
    665c:	60 e0       	ldi	r22, 0x00	; 0
    665e:	74 e2       	ldi	r23, 0x24	; 36
    6660:	84 e7       	ldi	r24, 0x74	; 116
    6662:	9b e4       	ldi	r25, 0x4B	; 75
    6664:	a3 d5       	rcall	.+2886   	; 0x71ac <__divsf3>
    6666:	20 e0       	ldi	r18, 0x00	; 0
    6668:	30 e0       	ldi	r19, 0x00	; 0
    666a:	40 e8       	ldi	r20, 0x80	; 128
    666c:	5f e3       	ldi	r21, 0x3F	; 63
    666e:	32 d5       	rcall	.+2660   	; 0x70d4 <__subsf3>
    6670:	13 da       	rcall	.-3034   	; 0x5a98 <__fixunssfsi>
    6672:	f4 01       	movw	r30, r8
    6674:	32 97       	sbiw	r30, 0x02	; 2
    6676:	60 83       	st	Z, r22
    6678:	d8 01       	movw	r26, r16
    667a:	ed 91       	ld	r30, X+
    667c:	fc 91       	ld	r31, X
    667e:	11 97       	sbiw	r26, 0x01	; 1
    6680:	35 97       	sbiw	r30, 0x05	; 5
    6682:	88 e9       	ldi	r24, 0x98	; 152
    6684:	80 83       	st	Z, r24
    6686:	ed 91       	ld	r30, X+
    6688:	fc 91       	ld	r31, X
    668a:	34 97       	sbiw	r30, 0x04	; 4
    668c:	86 e0       	ldi	r24, 0x06	; 6
    668e:	80 83       	st	Z, r24
    6690:	ff be       	out	0x3f, r15	; 63
    6692:	c8 01       	movw	r24, r16
    6694:	df 91       	pop	r29
    6696:	cf 91       	pop	r28
    6698:	1f 91       	pop	r17
    669a:	0f 91       	pop	r16
    669c:	ff 90       	pop	r15
    669e:	ef 90       	pop	r14
    66a0:	cf 90       	pop	r12
    66a2:	af 90       	pop	r10
    66a4:	9f 90       	pop	r9
    66a6:	8f 90       	pop	r8
    66a8:	7f 90       	pop	r7
    66aa:	6f 90       	pop	r6
    66ac:	5f 90       	pop	r5
    66ae:	4f 90       	pop	r4
    66b0:	3f 90       	pop	r3
    66b2:	2f 90       	pop	r2
    66b4:	08 95       	ret

000066b6 <serial_sendByte>:
    66b6:	cf 93       	push	r28
    66b8:	df 93       	push	r29
    66ba:	dc 01       	movw	r26, r24
    66bc:	89 2b       	or	r24, r25
    66be:	01 f1       	breq	.+64     	; 0x6700 <serial_sendByte+0x4a>
    66c0:	12 96       	adiw	r26, 0x02	; 2
    66c2:	ed 91       	ld	r30, X+
    66c4:	fc 91       	ld	r31, X
    66c6:	13 97       	sbiw	r26, 0x03	; 3
    66c8:	93 81       	ldd	r25, Z+3	; 0x03
    66ca:	82 81       	ldd	r24, Z+2	; 0x02
    66cc:	25 81       	ldd	r18, Z+5	; 0x05
    66ce:	98 1b       	sub	r25, r24
    66d0:	92 23       	and	r25, r18
    66d2:	84 81       	ldd	r24, Z+4	; 0x04
    66d4:	98 17       	cp	r25, r24
    66d6:	b1 f0       	breq	.+44     	; 0x6704 <serial_sendByte+0x4e>
    66d8:	83 81       	ldd	r24, Z+3	; 0x03
    66da:	26 95       	lsr	r18
    66dc:	28 23       	and	r18, r24
    66de:	c0 81       	ld	r28, Z
    66e0:	d1 81       	ldd	r29, Z+1	; 0x01
    66e2:	c2 0f       	add	r28, r18
    66e4:	d1 1d       	adc	r29, r1
    66e6:	68 83       	st	Y, r22
    66e8:	8f 5f       	subi	r24, 0xFF	; 255
    66ea:	95 81       	ldd	r25, Z+5	; 0x05
    66ec:	89 23       	and	r24, r25
    66ee:	83 83       	std	Z+3, r24	; 0x03
    66f0:	ed 91       	ld	r30, X+
    66f2:	fc 91       	ld	r31, X
    66f4:	35 97       	sbiw	r30, 0x05	; 5
    66f6:	80 81       	ld	r24, Z
    66f8:	80 62       	ori	r24, 0x20	; 32
    66fa:	80 83       	st	Z, r24
    66fc:	80 e0       	ldi	r24, 0x00	; 0
    66fe:	03 c0       	rjmp	.+6      	; 0x6706 <serial_sendByte+0x50>
    6700:	81 e0       	ldi	r24, 0x01	; 1
    6702:	01 c0       	rjmp	.+2      	; 0x6706 <serial_sendByte+0x50>
    6704:	82 e0       	ldi	r24, 0x02	; 2
    6706:	df 91       	pop	r29
    6708:	cf 91       	pop	r28
    670a:	08 95       	ret

0000670c <serial_sendBytes>:
    670c:	ef 92       	push	r14
    670e:	ff 92       	push	r15
    6710:	0f 93       	push	r16
    6712:	1f 93       	push	r17
    6714:	cf 93       	push	r28
    6716:	df 93       	push	r29
    6718:	7c 01       	movw	r14, r24
    671a:	00 97       	sbiw	r24, 0x00	; 0
    671c:	09 f4       	brne	.+2      	; 0x6720 <serial_sendBytes+0x14>
    671e:	41 c0       	rjmp	.+130    	; 0x67a2 <serial_sendBytes+0x96>
    6720:	dc 01       	movw	r26, r24
    6722:	12 96       	adiw	r26, 0x02	; 2
    6724:	ed 91       	ld	r30, X+
    6726:	fc 91       	ld	r31, X
    6728:	13 97       	sbiw	r26, 0x03	; 3
    672a:	93 81       	ldd	r25, Z+3	; 0x03
    672c:	82 81       	ldd	r24, Z+2	; 0x02
    672e:	98 1b       	sub	r25, r24
    6730:	85 81       	ldd	r24, Z+5	; 0x05
    6732:	98 23       	and	r25, r24
    6734:	84 81       	ldd	r24, Z+4	; 0x04
    6736:	89 1b       	sub	r24, r25
    6738:	86 17       	cp	r24, r22
    673a:	a8 f1       	brcs	.+106    	; 0x67a6 <serial_sendBytes+0x9a>
    673c:	66 23       	and	r22, r22
    673e:	41 f1       	breq	.+80     	; 0x6790 <serial_sendBytes+0x84>
    6740:	84 2f       	mov	r24, r20
    6742:	95 2f       	mov	r25, r21
    6744:	dc 01       	movw	r26, r24
    6746:	61 50       	subi	r22, 0x01	; 1
    6748:	46 2f       	mov	r20, r22
    674a:	50 e0       	ldi	r21, 0x00	; 0
    674c:	4f 5f       	subi	r20, 0xFF	; 255
    674e:	5f 4f       	sbci	r21, 0xFF	; 255
    6750:	48 0f       	add	r20, r24
    6752:	59 1f       	adc	r21, r25
    6754:	e7 01       	movw	r28, r14
    6756:	ea 81       	ldd	r30, Y+2	; 0x02
    6758:	fb 81       	ldd	r31, Y+3	; 0x03
    675a:	93 81       	ldd	r25, Z+3	; 0x03
    675c:	82 81       	ldd	r24, Z+2	; 0x02
    675e:	25 81       	ldd	r18, Z+5	; 0x05
    6760:	98 1b       	sub	r25, r24
    6762:	92 23       	and	r25, r18
    6764:	84 81       	ldd	r24, Z+4	; 0x04
    6766:	98 17       	cp	r25, r24
    6768:	79 f0       	breq	.+30     	; 0x6788 <serial_sendBytes+0x7c>
    676a:	8c 91       	ld	r24, X
    676c:	93 81       	ldd	r25, Z+3	; 0x03
    676e:	26 95       	lsr	r18
    6770:	29 23       	and	r18, r25
    6772:	60 81       	ld	r22, Z
    6774:	71 81       	ldd	r23, Z+1	; 0x01
    6776:	8b 01       	movw	r16, r22
    6778:	02 0f       	add	r16, r18
    677a:	11 1d       	adc	r17, r1
    677c:	e8 01       	movw	r28, r16
    677e:	88 83       	st	Y, r24
    6780:	9f 5f       	subi	r25, 0xFF	; 255
    6782:	85 81       	ldd	r24, Z+5	; 0x05
    6784:	98 23       	and	r25, r24
    6786:	93 83       	std	Z+3, r25	; 0x03
    6788:	11 96       	adiw	r26, 0x01	; 1
    678a:	a4 17       	cp	r26, r20
    678c:	b5 07       	cpc	r27, r21
    678e:	11 f7       	brne	.-60     	; 0x6754 <serial_sendBytes+0x48>
    6790:	d7 01       	movw	r26, r14
    6792:	ed 91       	ld	r30, X+
    6794:	fc 91       	ld	r31, X
    6796:	35 97       	sbiw	r30, 0x05	; 5
    6798:	80 81       	ld	r24, Z
    679a:	80 62       	ori	r24, 0x20	; 32
    679c:	80 83       	st	Z, r24
    679e:	80 e0       	ldi	r24, 0x00	; 0
    67a0:	03 c0       	rjmp	.+6      	; 0x67a8 <serial_sendBytes+0x9c>
    67a2:	81 e0       	ldi	r24, 0x01	; 1
    67a4:	01 c0       	rjmp	.+2      	; 0x67a8 <serial_sendBytes+0x9c>
    67a6:	82 e0       	ldi	r24, 0x02	; 2
    67a8:	df 91       	pop	r29
    67aa:	cf 91       	pop	r28
    67ac:	1f 91       	pop	r17
    67ae:	0f 91       	pop	r16
    67b0:	ff 90       	pop	r15
    67b2:	ef 90       	pop	r14
    67b4:	08 95       	ret

000067b6 <serial_getByte>:
    67b6:	00 97       	sbiw	r24, 0x00	; 0
    67b8:	d1 f0       	breq	.+52     	; 0x67ee <serial_getByte+0x38>
    67ba:	dc 01       	movw	r26, r24
    67bc:	14 96       	adiw	r26, 0x04	; 4
    67be:	ed 91       	ld	r30, X+
    67c0:	fc 91       	ld	r31, X
    67c2:	15 97       	sbiw	r26, 0x05	; 5
    67c4:	93 81       	ldd	r25, Z+3	; 0x03
    67c6:	82 81       	ldd	r24, Z+2	; 0x02
    67c8:	98 17       	cp	r25, r24
    67ca:	99 f0       	breq	.+38     	; 0x67f2 <serial_getByte+0x3c>
    67cc:	92 81       	ldd	r25, Z+2	; 0x02
    67ce:	85 81       	ldd	r24, Z+5	; 0x05
    67d0:	86 95       	lsr	r24
    67d2:	89 23       	and	r24, r25
    67d4:	a0 81       	ld	r26, Z
    67d6:	b1 81       	ldd	r27, Z+1	; 0x01
    67d8:	a8 0f       	add	r26, r24
    67da:	b1 1d       	adc	r27, r1
    67dc:	8c 91       	ld	r24, X
    67de:	db 01       	movw	r26, r22
    67e0:	8c 93       	st	X, r24
    67e2:	9f 5f       	subi	r25, 0xFF	; 255
    67e4:	85 81       	ldd	r24, Z+5	; 0x05
    67e6:	98 23       	and	r25, r24
    67e8:	92 83       	std	Z+2, r25	; 0x02
    67ea:	80 e0       	ldi	r24, 0x00	; 0
    67ec:	08 95       	ret
    67ee:	81 e0       	ldi	r24, 0x01	; 1
    67f0:	08 95       	ret
    67f2:	83 e0       	ldi	r24, 0x03	; 3
    67f4:	08 95       	ret

000067f6 <__vector_25>:
    67f6:	1f 92       	push	r1
    67f8:	0f 92       	push	r0
    67fa:	0f b6       	in	r0, 0x3f	; 63
    67fc:	0f 92       	push	r0
    67fe:	11 24       	eor	r1, r1
    6800:	0b b6       	in	r0, 0x3b	; 59
    6802:	0f 92       	push	r0
    6804:	2f 93       	push	r18
    6806:	3f 93       	push	r19
    6808:	4f 93       	push	r20
    680a:	5f 93       	push	r21
    680c:	6f 93       	push	r22
    680e:	7f 93       	push	r23
    6810:	8f 93       	push	r24
    6812:	9f 93       	push	r25
    6814:	af 93       	push	r26
    6816:	bf 93       	push	r27
    6818:	cf 93       	push	r28
    681a:	df 93       	push	r29
    681c:	ef 93       	push	r30
    681e:	ff 93       	push	r31
    6820:	a0 91 0e 13 	lds	r26, 0x130E	; 0x80130e <_ser_handle>
    6824:	b0 91 0f 13 	lds	r27, 0x130F	; 0x80130f <_ser_handle+0x1>
    6828:	10 97       	sbiw	r26, 0x00	; 0
    682a:	11 f1       	breq	.+68     	; 0x6870 <__vector_25+0x7a>
    682c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    6830:	14 96       	adiw	r26, 0x04	; 4
    6832:	ed 91       	ld	r30, X+
    6834:	fc 91       	ld	r31, X
    6836:	15 97       	sbiw	r26, 0x05	; 5
    6838:	93 81       	ldd	r25, Z+3	; 0x03
    683a:	82 81       	ldd	r24, Z+2	; 0x02
    683c:	25 81       	ldd	r18, Z+5	; 0x05
    683e:	98 1b       	sub	r25, r24
    6840:	92 23       	and	r25, r18
    6842:	84 81       	ldd	r24, Z+4	; 0x04
    6844:	98 17       	cp	r25, r24
    6846:	61 f0       	breq	.+24     	; 0x6860 <__vector_25+0x6a>
    6848:	83 81       	ldd	r24, Z+3	; 0x03
    684a:	26 95       	lsr	r18
    684c:	28 23       	and	r18, r24
    684e:	c0 81       	ld	r28, Z
    6850:	d1 81       	ldd	r29, Z+1	; 0x01
    6852:	c2 0f       	add	r28, r18
    6854:	d1 1d       	adc	r29, r1
    6856:	68 83       	st	Y, r22
    6858:	8f 5f       	subi	r24, 0xFF	; 255
    685a:	95 81       	ldd	r25, Z+5	; 0x05
    685c:	89 23       	and	r24, r25
    685e:	83 83       	std	Z+3, r24	; 0x03
    6860:	16 96       	adiw	r26, 0x06	; 6
    6862:	ed 91       	ld	r30, X+
    6864:	fc 91       	ld	r31, X
    6866:	17 97       	sbiw	r26, 0x07	; 7
    6868:	30 97       	sbiw	r30, 0x00	; 0
    686a:	11 f0       	breq	.+4      	; 0x6870 <__vector_25+0x7a>
    686c:	cd 01       	movw	r24, r26
    686e:	19 95       	eicall
    6870:	ff 91       	pop	r31
    6872:	ef 91       	pop	r30
    6874:	df 91       	pop	r29
    6876:	cf 91       	pop	r28
    6878:	bf 91       	pop	r27
    687a:	af 91       	pop	r26
    687c:	9f 91       	pop	r25
    687e:	8f 91       	pop	r24
    6880:	7f 91       	pop	r23
    6882:	6f 91       	pop	r22
    6884:	5f 91       	pop	r21
    6886:	4f 91       	pop	r20
    6888:	3f 91       	pop	r19
    688a:	2f 91       	pop	r18
    688c:	0f 90       	pop	r0
    688e:	0b be       	out	0x3b, r0	; 59
    6890:	0f 90       	pop	r0
    6892:	0f be       	out	0x3f, r0	; 63
    6894:	0f 90       	pop	r0
    6896:	1f 90       	pop	r1
    6898:	18 95       	reti

0000689a <__vector_26>:
    689a:	1f 92       	push	r1
    689c:	0f 92       	push	r0
    689e:	0f b6       	in	r0, 0x3f	; 63
    68a0:	0f 92       	push	r0
    68a2:	11 24       	eor	r1, r1
    68a4:	0b b6       	in	r0, 0x3b	; 59
    68a6:	0f 92       	push	r0
    68a8:	2f 93       	push	r18
    68aa:	8f 93       	push	r24
    68ac:	9f 93       	push	r25
    68ae:	af 93       	push	r26
    68b0:	bf 93       	push	r27
    68b2:	ef 93       	push	r30
    68b4:	ff 93       	push	r31
    68b6:	e0 91 0e 13 	lds	r30, 0x130E	; 0x80130e <_ser_handle>
    68ba:	f0 91 0f 13 	lds	r31, 0x130F	; 0x80130f <_ser_handle+0x1>
    68be:	30 97       	sbiw	r30, 0x00	; 0
    68c0:	b9 f0       	breq	.+46     	; 0x68f0 <__vector_26+0x56>
    68c2:	02 80       	ldd	r0, Z+2	; 0x02
    68c4:	f3 81       	ldd	r31, Z+3	; 0x03
    68c6:	e0 2d       	mov	r30, r0
    68c8:	93 81       	ldd	r25, Z+3	; 0x03
    68ca:	82 81       	ldd	r24, Z+2	; 0x02
    68cc:	98 17       	cp	r25, r24
    68ce:	b1 f0       	breq	.+44     	; 0x68fc <__vector_26+0x62>
    68d0:	92 81       	ldd	r25, Z+2	; 0x02
    68d2:	85 81       	ldd	r24, Z+5	; 0x05
    68d4:	28 2f       	mov	r18, r24
    68d6:	26 95       	lsr	r18
    68d8:	29 23       	and	r18, r25
    68da:	a0 81       	ld	r26, Z
    68dc:	b1 81       	ldd	r27, Z+1	; 0x01
    68de:	a2 0f       	add	r26, r18
    68e0:	b1 1d       	adc	r27, r1
    68e2:	2c 91       	ld	r18, X
    68e4:	9f 5f       	subi	r25, 0xFF	; 255
    68e6:	89 23       	and	r24, r25
    68e8:	82 83       	std	Z+2, r24	; 0x02
    68ea:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    68ee:	0b c0       	rjmp	.+22     	; 0x6906 <__vector_26+0x6c>
    68f0:	e1 ec       	ldi	r30, 0xC1	; 193
    68f2:	f0 e0       	ldi	r31, 0x00	; 0
    68f4:	80 81       	ld	r24, Z
    68f6:	8f 7d       	andi	r24, 0xDF	; 223
    68f8:	80 83       	st	Z, r24
    68fa:	05 c0       	rjmp	.+10     	; 0x6906 <__vector_26+0x6c>
    68fc:	e1 ec       	ldi	r30, 0xC1	; 193
    68fe:	f0 e0       	ldi	r31, 0x00	; 0
    6900:	80 81       	ld	r24, Z
    6902:	8f 7d       	andi	r24, 0xDF	; 223
    6904:	80 83       	st	Z, r24
    6906:	ff 91       	pop	r31
    6908:	ef 91       	pop	r30
    690a:	bf 91       	pop	r27
    690c:	af 91       	pop	r26
    690e:	9f 91       	pop	r25
    6910:	8f 91       	pop	r24
    6912:	2f 91       	pop	r18
    6914:	0f 90       	pop	r0
    6916:	0b be       	out	0x3b, r0	; 59
    6918:	0f 90       	pop	r0
    691a:	0f be       	out	0x3f, r0	; 63
    691c:	0f 90       	pop	r0
    691e:	1f 90       	pop	r1
    6920:	18 95       	reti

00006922 <__vector_36>:
    6922:	1f 92       	push	r1
    6924:	0f 92       	push	r0
    6926:	0f b6       	in	r0, 0x3f	; 63
    6928:	0f 92       	push	r0
    692a:	11 24       	eor	r1, r1
    692c:	0b b6       	in	r0, 0x3b	; 59
    692e:	0f 92       	push	r0
    6930:	2f 93       	push	r18
    6932:	3f 93       	push	r19
    6934:	4f 93       	push	r20
    6936:	5f 93       	push	r21
    6938:	6f 93       	push	r22
    693a:	7f 93       	push	r23
    693c:	8f 93       	push	r24
    693e:	9f 93       	push	r25
    6940:	af 93       	push	r26
    6942:	bf 93       	push	r27
    6944:	cf 93       	push	r28
    6946:	df 93       	push	r29
    6948:	ef 93       	push	r30
    694a:	ff 93       	push	r31
    694c:	a0 91 10 13 	lds	r26, 0x1310	; 0x801310 <_ser_handle+0x2>
    6950:	b0 91 11 13 	lds	r27, 0x1311	; 0x801311 <_ser_handle+0x3>
    6954:	10 97       	sbiw	r26, 0x00	; 0
    6956:	11 f1       	breq	.+68     	; 0x699c <__vector_36+0x7a>
    6958:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    695c:	14 96       	adiw	r26, 0x04	; 4
    695e:	ed 91       	ld	r30, X+
    6960:	fc 91       	ld	r31, X
    6962:	15 97       	sbiw	r26, 0x05	; 5
    6964:	93 81       	ldd	r25, Z+3	; 0x03
    6966:	82 81       	ldd	r24, Z+2	; 0x02
    6968:	25 81       	ldd	r18, Z+5	; 0x05
    696a:	98 1b       	sub	r25, r24
    696c:	92 23       	and	r25, r18
    696e:	84 81       	ldd	r24, Z+4	; 0x04
    6970:	98 17       	cp	r25, r24
    6972:	61 f0       	breq	.+24     	; 0x698c <__vector_36+0x6a>
    6974:	83 81       	ldd	r24, Z+3	; 0x03
    6976:	26 95       	lsr	r18
    6978:	28 23       	and	r18, r24
    697a:	c0 81       	ld	r28, Z
    697c:	d1 81       	ldd	r29, Z+1	; 0x01
    697e:	c2 0f       	add	r28, r18
    6980:	d1 1d       	adc	r29, r1
    6982:	68 83       	st	Y, r22
    6984:	8f 5f       	subi	r24, 0xFF	; 255
    6986:	95 81       	ldd	r25, Z+5	; 0x05
    6988:	89 23       	and	r24, r25
    698a:	83 83       	std	Z+3, r24	; 0x03
    698c:	16 96       	adiw	r26, 0x06	; 6
    698e:	ed 91       	ld	r30, X+
    6990:	fc 91       	ld	r31, X
    6992:	17 97       	sbiw	r26, 0x07	; 7
    6994:	30 97       	sbiw	r30, 0x00	; 0
    6996:	11 f0       	breq	.+4      	; 0x699c <__vector_36+0x7a>
    6998:	cd 01       	movw	r24, r26
    699a:	19 95       	eicall
    699c:	ff 91       	pop	r31
    699e:	ef 91       	pop	r30
    69a0:	df 91       	pop	r29
    69a2:	cf 91       	pop	r28
    69a4:	bf 91       	pop	r27
    69a6:	af 91       	pop	r26
    69a8:	9f 91       	pop	r25
    69aa:	8f 91       	pop	r24
    69ac:	7f 91       	pop	r23
    69ae:	6f 91       	pop	r22
    69b0:	5f 91       	pop	r21
    69b2:	4f 91       	pop	r20
    69b4:	3f 91       	pop	r19
    69b6:	2f 91       	pop	r18
    69b8:	0f 90       	pop	r0
    69ba:	0b be       	out	0x3b, r0	; 59
    69bc:	0f 90       	pop	r0
    69be:	0f be       	out	0x3f, r0	; 63
    69c0:	0f 90       	pop	r0
    69c2:	1f 90       	pop	r1
    69c4:	18 95       	reti

000069c6 <__vector_37>:
    69c6:	1f 92       	push	r1
    69c8:	0f 92       	push	r0
    69ca:	0f b6       	in	r0, 0x3f	; 63
    69cc:	0f 92       	push	r0
    69ce:	11 24       	eor	r1, r1
    69d0:	0b b6       	in	r0, 0x3b	; 59
    69d2:	0f 92       	push	r0
    69d4:	2f 93       	push	r18
    69d6:	8f 93       	push	r24
    69d8:	9f 93       	push	r25
    69da:	af 93       	push	r26
    69dc:	bf 93       	push	r27
    69de:	ef 93       	push	r30
    69e0:	ff 93       	push	r31
    69e2:	e0 91 10 13 	lds	r30, 0x1310	; 0x801310 <_ser_handle+0x2>
    69e6:	f0 91 11 13 	lds	r31, 0x1311	; 0x801311 <_ser_handle+0x3>
    69ea:	30 97       	sbiw	r30, 0x00	; 0
    69ec:	b9 f0       	breq	.+46     	; 0x6a1c <__vector_37+0x56>
    69ee:	02 80       	ldd	r0, Z+2	; 0x02
    69f0:	f3 81       	ldd	r31, Z+3	; 0x03
    69f2:	e0 2d       	mov	r30, r0
    69f4:	93 81       	ldd	r25, Z+3	; 0x03
    69f6:	82 81       	ldd	r24, Z+2	; 0x02
    69f8:	98 17       	cp	r25, r24
    69fa:	b1 f0       	breq	.+44     	; 0x6a28 <__vector_37+0x62>
    69fc:	92 81       	ldd	r25, Z+2	; 0x02
    69fe:	85 81       	ldd	r24, Z+5	; 0x05
    6a00:	28 2f       	mov	r18, r24
    6a02:	26 95       	lsr	r18
    6a04:	29 23       	and	r18, r25
    6a06:	a0 81       	ld	r26, Z
    6a08:	b1 81       	ldd	r27, Z+1	; 0x01
    6a0a:	a2 0f       	add	r26, r18
    6a0c:	b1 1d       	adc	r27, r1
    6a0e:	2c 91       	ld	r18, X
    6a10:	9f 5f       	subi	r25, 0xFF	; 255
    6a12:	89 23       	and	r24, r25
    6a14:	82 83       	std	Z+2, r24	; 0x02
    6a16:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    6a1a:	0b c0       	rjmp	.+22     	; 0x6a32 <__vector_37+0x6c>
    6a1c:	e9 ec       	ldi	r30, 0xC9	; 201
    6a1e:	f0 e0       	ldi	r31, 0x00	; 0
    6a20:	80 81       	ld	r24, Z
    6a22:	8f 7d       	andi	r24, 0xDF	; 223
    6a24:	80 83       	st	Z, r24
    6a26:	05 c0       	rjmp	.+10     	; 0x6a32 <__vector_37+0x6c>
    6a28:	e9 ec       	ldi	r30, 0xC9	; 201
    6a2a:	f0 e0       	ldi	r31, 0x00	; 0
    6a2c:	80 81       	ld	r24, Z
    6a2e:	8f 7d       	andi	r24, 0xDF	; 223
    6a30:	80 83       	st	Z, r24
    6a32:	ff 91       	pop	r31
    6a34:	ef 91       	pop	r30
    6a36:	bf 91       	pop	r27
    6a38:	af 91       	pop	r26
    6a3a:	9f 91       	pop	r25
    6a3c:	8f 91       	pop	r24
    6a3e:	2f 91       	pop	r18
    6a40:	0f 90       	pop	r0
    6a42:	0b be       	out	0x3b, r0	; 59
    6a44:	0f 90       	pop	r0
    6a46:	0f be       	out	0x3f, r0	; 63
    6a48:	0f 90       	pop	r0
    6a4a:	1f 90       	pop	r1
    6a4c:	18 95       	reti

00006a4e <__vector_51>:
    6a4e:	1f 92       	push	r1
    6a50:	0f 92       	push	r0
    6a52:	0f b6       	in	r0, 0x3f	; 63
    6a54:	0f 92       	push	r0
    6a56:	11 24       	eor	r1, r1
    6a58:	0b b6       	in	r0, 0x3b	; 59
    6a5a:	0f 92       	push	r0
    6a5c:	2f 93       	push	r18
    6a5e:	3f 93       	push	r19
    6a60:	4f 93       	push	r20
    6a62:	5f 93       	push	r21
    6a64:	6f 93       	push	r22
    6a66:	7f 93       	push	r23
    6a68:	8f 93       	push	r24
    6a6a:	9f 93       	push	r25
    6a6c:	af 93       	push	r26
    6a6e:	bf 93       	push	r27
    6a70:	cf 93       	push	r28
    6a72:	df 93       	push	r29
    6a74:	ef 93       	push	r30
    6a76:	ff 93       	push	r31
    6a78:	a0 91 12 13 	lds	r26, 0x1312	; 0x801312 <_ser_handle+0x4>
    6a7c:	b0 91 13 13 	lds	r27, 0x1313	; 0x801313 <_ser_handle+0x5>
    6a80:	10 97       	sbiw	r26, 0x00	; 0
    6a82:	11 f1       	breq	.+68     	; 0x6ac8 <__vector_51+0x7a>
    6a84:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    6a88:	14 96       	adiw	r26, 0x04	; 4
    6a8a:	ed 91       	ld	r30, X+
    6a8c:	fc 91       	ld	r31, X
    6a8e:	15 97       	sbiw	r26, 0x05	; 5
    6a90:	93 81       	ldd	r25, Z+3	; 0x03
    6a92:	82 81       	ldd	r24, Z+2	; 0x02
    6a94:	25 81       	ldd	r18, Z+5	; 0x05
    6a96:	98 1b       	sub	r25, r24
    6a98:	92 23       	and	r25, r18
    6a9a:	84 81       	ldd	r24, Z+4	; 0x04
    6a9c:	98 17       	cp	r25, r24
    6a9e:	61 f0       	breq	.+24     	; 0x6ab8 <__vector_51+0x6a>
    6aa0:	83 81       	ldd	r24, Z+3	; 0x03
    6aa2:	26 95       	lsr	r18
    6aa4:	28 23       	and	r18, r24
    6aa6:	c0 81       	ld	r28, Z
    6aa8:	d1 81       	ldd	r29, Z+1	; 0x01
    6aaa:	c2 0f       	add	r28, r18
    6aac:	d1 1d       	adc	r29, r1
    6aae:	68 83       	st	Y, r22
    6ab0:	8f 5f       	subi	r24, 0xFF	; 255
    6ab2:	95 81       	ldd	r25, Z+5	; 0x05
    6ab4:	89 23       	and	r24, r25
    6ab6:	83 83       	std	Z+3, r24	; 0x03
    6ab8:	16 96       	adiw	r26, 0x06	; 6
    6aba:	ed 91       	ld	r30, X+
    6abc:	fc 91       	ld	r31, X
    6abe:	17 97       	sbiw	r26, 0x07	; 7
    6ac0:	30 97       	sbiw	r30, 0x00	; 0
    6ac2:	11 f0       	breq	.+4      	; 0x6ac8 <__vector_51+0x7a>
    6ac4:	cd 01       	movw	r24, r26
    6ac6:	19 95       	eicall
    6ac8:	ff 91       	pop	r31
    6aca:	ef 91       	pop	r30
    6acc:	df 91       	pop	r29
    6ace:	cf 91       	pop	r28
    6ad0:	bf 91       	pop	r27
    6ad2:	af 91       	pop	r26
    6ad4:	9f 91       	pop	r25
    6ad6:	8f 91       	pop	r24
    6ad8:	7f 91       	pop	r23
    6ada:	6f 91       	pop	r22
    6adc:	5f 91       	pop	r21
    6ade:	4f 91       	pop	r20
    6ae0:	3f 91       	pop	r19
    6ae2:	2f 91       	pop	r18
    6ae4:	0f 90       	pop	r0
    6ae6:	0b be       	out	0x3b, r0	; 59
    6ae8:	0f 90       	pop	r0
    6aea:	0f be       	out	0x3f, r0	; 63
    6aec:	0f 90       	pop	r0
    6aee:	1f 90       	pop	r1
    6af0:	18 95       	reti

00006af2 <__vector_52>:
    6af2:	1f 92       	push	r1
    6af4:	0f 92       	push	r0
    6af6:	0f b6       	in	r0, 0x3f	; 63
    6af8:	0f 92       	push	r0
    6afa:	11 24       	eor	r1, r1
    6afc:	0b b6       	in	r0, 0x3b	; 59
    6afe:	0f 92       	push	r0
    6b00:	2f 93       	push	r18
    6b02:	8f 93       	push	r24
    6b04:	9f 93       	push	r25
    6b06:	af 93       	push	r26
    6b08:	bf 93       	push	r27
    6b0a:	ef 93       	push	r30
    6b0c:	ff 93       	push	r31
    6b0e:	e0 91 12 13 	lds	r30, 0x1312	; 0x801312 <_ser_handle+0x4>
    6b12:	f0 91 13 13 	lds	r31, 0x1313	; 0x801313 <_ser_handle+0x5>
    6b16:	30 97       	sbiw	r30, 0x00	; 0
    6b18:	b9 f0       	breq	.+46     	; 0x6b48 <__vector_52+0x56>
    6b1a:	02 80       	ldd	r0, Z+2	; 0x02
    6b1c:	f3 81       	ldd	r31, Z+3	; 0x03
    6b1e:	e0 2d       	mov	r30, r0
    6b20:	93 81       	ldd	r25, Z+3	; 0x03
    6b22:	82 81       	ldd	r24, Z+2	; 0x02
    6b24:	98 17       	cp	r25, r24
    6b26:	b1 f0       	breq	.+44     	; 0x6b54 <__vector_52+0x62>
    6b28:	92 81       	ldd	r25, Z+2	; 0x02
    6b2a:	85 81       	ldd	r24, Z+5	; 0x05
    6b2c:	28 2f       	mov	r18, r24
    6b2e:	26 95       	lsr	r18
    6b30:	29 23       	and	r18, r25
    6b32:	a0 81       	ld	r26, Z
    6b34:	b1 81       	ldd	r27, Z+1	; 0x01
    6b36:	a2 0f       	add	r26, r18
    6b38:	b1 1d       	adc	r27, r1
    6b3a:	2c 91       	ld	r18, X
    6b3c:	9f 5f       	subi	r25, 0xFF	; 255
    6b3e:	89 23       	and	r24, r25
    6b40:	82 83       	std	Z+2, r24	; 0x02
    6b42:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    6b46:	0b c0       	rjmp	.+22     	; 0x6b5e <__vector_52+0x6c>
    6b48:	e1 ed       	ldi	r30, 0xD1	; 209
    6b4a:	f0 e0       	ldi	r31, 0x00	; 0
    6b4c:	80 81       	ld	r24, Z
    6b4e:	8f 7d       	andi	r24, 0xDF	; 223
    6b50:	80 83       	st	Z, r24
    6b52:	05 c0       	rjmp	.+10     	; 0x6b5e <__vector_52+0x6c>
    6b54:	e1 ed       	ldi	r30, 0xD1	; 209
    6b56:	f0 e0       	ldi	r31, 0x00	; 0
    6b58:	80 81       	ld	r24, Z
    6b5a:	8f 7d       	andi	r24, 0xDF	; 223
    6b5c:	80 83       	st	Z, r24
    6b5e:	ff 91       	pop	r31
    6b60:	ef 91       	pop	r30
    6b62:	bf 91       	pop	r27
    6b64:	af 91       	pop	r26
    6b66:	9f 91       	pop	r25
    6b68:	8f 91       	pop	r24
    6b6a:	2f 91       	pop	r18
    6b6c:	0f 90       	pop	r0
    6b6e:	0b be       	out	0x3b, r0	; 59
    6b70:	0f 90       	pop	r0
    6b72:	0f be       	out	0x3f, r0	; 63
    6b74:	0f 90       	pop	r0
    6b76:	1f 90       	pop	r1
    6b78:	18 95       	reti

00006b7a <__vector_54>:
    6b7a:	1f 92       	push	r1
    6b7c:	0f 92       	push	r0
    6b7e:	0f b6       	in	r0, 0x3f	; 63
    6b80:	0f 92       	push	r0
    6b82:	11 24       	eor	r1, r1
    6b84:	0b b6       	in	r0, 0x3b	; 59
    6b86:	0f 92       	push	r0
    6b88:	2f 93       	push	r18
    6b8a:	3f 93       	push	r19
    6b8c:	4f 93       	push	r20
    6b8e:	5f 93       	push	r21
    6b90:	6f 93       	push	r22
    6b92:	7f 93       	push	r23
    6b94:	8f 93       	push	r24
    6b96:	9f 93       	push	r25
    6b98:	af 93       	push	r26
    6b9a:	bf 93       	push	r27
    6b9c:	cf 93       	push	r28
    6b9e:	df 93       	push	r29
    6ba0:	ef 93       	push	r30
    6ba2:	ff 93       	push	r31
    6ba4:	a0 91 14 13 	lds	r26, 0x1314	; 0x801314 <_ser_handle+0x6>
    6ba8:	b0 91 15 13 	lds	r27, 0x1315	; 0x801315 <_ser_handle+0x7>
    6bac:	10 97       	sbiw	r26, 0x00	; 0
    6bae:	11 f1       	breq	.+68     	; 0x6bf4 <__vector_54+0x7a>
    6bb0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    6bb4:	14 96       	adiw	r26, 0x04	; 4
    6bb6:	ed 91       	ld	r30, X+
    6bb8:	fc 91       	ld	r31, X
    6bba:	15 97       	sbiw	r26, 0x05	; 5
    6bbc:	93 81       	ldd	r25, Z+3	; 0x03
    6bbe:	82 81       	ldd	r24, Z+2	; 0x02
    6bc0:	25 81       	ldd	r18, Z+5	; 0x05
    6bc2:	98 1b       	sub	r25, r24
    6bc4:	92 23       	and	r25, r18
    6bc6:	84 81       	ldd	r24, Z+4	; 0x04
    6bc8:	98 17       	cp	r25, r24
    6bca:	61 f0       	breq	.+24     	; 0x6be4 <__vector_54+0x6a>
    6bcc:	83 81       	ldd	r24, Z+3	; 0x03
    6bce:	26 95       	lsr	r18
    6bd0:	28 23       	and	r18, r24
    6bd2:	c0 81       	ld	r28, Z
    6bd4:	d1 81       	ldd	r29, Z+1	; 0x01
    6bd6:	c2 0f       	add	r28, r18
    6bd8:	d1 1d       	adc	r29, r1
    6bda:	68 83       	st	Y, r22
    6bdc:	8f 5f       	subi	r24, 0xFF	; 255
    6bde:	95 81       	ldd	r25, Z+5	; 0x05
    6be0:	89 23       	and	r24, r25
    6be2:	83 83       	std	Z+3, r24	; 0x03
    6be4:	16 96       	adiw	r26, 0x06	; 6
    6be6:	ed 91       	ld	r30, X+
    6be8:	fc 91       	ld	r31, X
    6bea:	17 97       	sbiw	r26, 0x07	; 7
    6bec:	30 97       	sbiw	r30, 0x00	; 0
    6bee:	11 f0       	breq	.+4      	; 0x6bf4 <__vector_54+0x7a>
    6bf0:	cd 01       	movw	r24, r26
    6bf2:	19 95       	eicall
    6bf4:	ff 91       	pop	r31
    6bf6:	ef 91       	pop	r30
    6bf8:	df 91       	pop	r29
    6bfa:	cf 91       	pop	r28
    6bfc:	bf 91       	pop	r27
    6bfe:	af 91       	pop	r26
    6c00:	9f 91       	pop	r25
    6c02:	8f 91       	pop	r24
    6c04:	7f 91       	pop	r23
    6c06:	6f 91       	pop	r22
    6c08:	5f 91       	pop	r21
    6c0a:	4f 91       	pop	r20
    6c0c:	3f 91       	pop	r19
    6c0e:	2f 91       	pop	r18
    6c10:	0f 90       	pop	r0
    6c12:	0b be       	out	0x3b, r0	; 59
    6c14:	0f 90       	pop	r0
    6c16:	0f be       	out	0x3f, r0	; 63
    6c18:	0f 90       	pop	r0
    6c1a:	1f 90       	pop	r1
    6c1c:	18 95       	reti

00006c1e <__vector_55>:
    6c1e:	1f 92       	push	r1
    6c20:	0f 92       	push	r0
    6c22:	0f b6       	in	r0, 0x3f	; 63
    6c24:	0f 92       	push	r0
    6c26:	11 24       	eor	r1, r1
    6c28:	0b b6       	in	r0, 0x3b	; 59
    6c2a:	0f 92       	push	r0
    6c2c:	2f 93       	push	r18
    6c2e:	8f 93       	push	r24
    6c30:	9f 93       	push	r25
    6c32:	af 93       	push	r26
    6c34:	bf 93       	push	r27
    6c36:	ef 93       	push	r30
    6c38:	ff 93       	push	r31
    6c3a:	e0 91 14 13 	lds	r30, 0x1314	; 0x801314 <_ser_handle+0x6>
    6c3e:	f0 91 15 13 	lds	r31, 0x1315	; 0x801315 <_ser_handle+0x7>
    6c42:	30 97       	sbiw	r30, 0x00	; 0
    6c44:	b9 f0       	breq	.+46     	; 0x6c74 <__vector_55+0x56>
    6c46:	02 80       	ldd	r0, Z+2	; 0x02
    6c48:	f3 81       	ldd	r31, Z+3	; 0x03
    6c4a:	e0 2d       	mov	r30, r0
    6c4c:	93 81       	ldd	r25, Z+3	; 0x03
    6c4e:	82 81       	ldd	r24, Z+2	; 0x02
    6c50:	98 17       	cp	r25, r24
    6c52:	b1 f0       	breq	.+44     	; 0x6c80 <__vector_55+0x62>
    6c54:	92 81       	ldd	r25, Z+2	; 0x02
    6c56:	85 81       	ldd	r24, Z+5	; 0x05
    6c58:	28 2f       	mov	r18, r24
    6c5a:	26 95       	lsr	r18
    6c5c:	29 23       	and	r18, r25
    6c5e:	a0 81       	ld	r26, Z
    6c60:	b1 81       	ldd	r27, Z+1	; 0x01
    6c62:	a2 0f       	add	r26, r18
    6c64:	b1 1d       	adc	r27, r1
    6c66:	2c 91       	ld	r18, X
    6c68:	9f 5f       	subi	r25, 0xFF	; 255
    6c6a:	89 23       	and	r24, r25
    6c6c:	82 83       	std	Z+2, r24	; 0x02
    6c6e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    6c72:	0b c0       	rjmp	.+22     	; 0x6c8a <__vector_55+0x6c>
    6c74:	e1 e3       	ldi	r30, 0x31	; 49
    6c76:	f1 e0       	ldi	r31, 0x01	; 1
    6c78:	80 81       	ld	r24, Z
    6c7a:	8f 7d       	andi	r24, 0xDF	; 223
    6c7c:	80 83       	st	Z, r24
    6c7e:	05 c0       	rjmp	.+10     	; 0x6c8a <__vector_55+0x6c>
    6c80:	e1 e3       	ldi	r30, 0x31	; 49
    6c82:	f1 e0       	ldi	r31, 0x01	; 1
    6c84:	80 81       	ld	r24, Z
    6c86:	8f 7d       	andi	r24, 0xDF	; 223
    6c88:	80 83       	st	Z, r24
    6c8a:	ff 91       	pop	r31
    6c8c:	ef 91       	pop	r30
    6c8e:	bf 91       	pop	r27
    6c90:	af 91       	pop	r26
    6c92:	9f 91       	pop	r25
    6c94:	8f 91       	pop	r24
    6c96:	2f 91       	pop	r18
    6c98:	0f 90       	pop	r0
    6c9a:	0b be       	out	0x3b, r0	; 59
    6c9c:	0f 90       	pop	r0
    6c9e:	0f be       	out	0x3f, r0	; 63
    6ca0:	0f 90       	pop	r0
    6ca2:	1f 90       	pop	r1
    6ca4:	18 95       	reti

00006ca6 <usart_getchar>:
    6ca6:	cf 93       	push	r28
    6ca8:	df 93       	push	r29
    6caa:	1f 92       	push	r1
    6cac:	cd b7       	in	r28, 0x3d	; 61
    6cae:	de b7       	in	r29, 0x3e	; 62
    6cb0:	be 01       	movw	r22, r28
    6cb2:	6f 5f       	subi	r22, 0xFF	; 255
    6cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    6cb6:	80 91 16 13 	lds	r24, 0x1316	; 0x801316 <_com_serial_instance>
    6cba:	90 91 17 13 	lds	r25, 0x1317	; 0x801317 <_com_serial_instance+0x1>
    6cbe:	7b dd       	rcall	.-1290   	; 0x67b6 <serial_getByte>
    6cc0:	81 11       	cpse	r24, r1
    6cc2:	f6 cf       	rjmp	.-20     	; 0x6cb0 <usart_getchar+0xa>
    6cc4:	89 81       	ldd	r24, Y+1	; 0x01
    6cc6:	90 e0       	ldi	r25, 0x00	; 0
    6cc8:	0f 90       	pop	r0
    6cca:	df 91       	pop	r29
    6ccc:	cf 91       	pop	r28
    6cce:	08 95       	ret

00006cd0 <usart_putchar>:
    6cd0:	68 2f       	mov	r22, r24
    6cd2:	80 91 16 13 	lds	r24, 0x1316	; 0x801316 <_com_serial_instance>
    6cd6:	90 91 17 13 	lds	r25, 0x1317	; 0x801317 <_com_serial_instance+0x1>
    6cda:	ed dc       	rcall	.-1574   	; 0x66b6 <serial_sendByte>
    6cdc:	80 e0       	ldi	r24, 0x00	; 0
    6cde:	90 e0       	ldi	r25, 0x00	; 0
    6ce0:	08 95       	ret

00006ce2 <stdio_initialise>:
    6ce2:	8f 92       	push	r8
    6ce4:	9f 92       	push	r9
    6ce6:	af 92       	push	r10
    6ce8:	cf 92       	push	r12
    6cea:	ef 92       	push	r14
    6cec:	0f 93       	push	r16
    6cee:	81 2c       	mov	r8, r1
    6cf0:	91 2c       	mov	r9, r1
    6cf2:	68 94       	set
    6cf4:	aa 24       	eor	r10, r10
    6cf6:	a7 f8       	bld	r10, 7
    6cf8:	68 94       	set
    6cfa:	cc 24       	eor	r12, r12
    6cfc:	c7 f8       	bld	r12, 7
    6cfe:	e1 2c       	mov	r14, r1
    6d00:	00 e0       	ldi	r16, 0x00	; 0
    6d02:	23 e0       	ldi	r18, 0x03	; 3
    6d04:	40 e0       	ldi	r20, 0x00	; 0
    6d06:	51 ee       	ldi	r21, 0xE1	; 225
    6d08:	60 e0       	ldi	r22, 0x00	; 0
    6d0a:	70 e0       	ldi	r23, 0x00	; 0
    6d0c:	38 dc       	rcall	.-1936   	; 0x657e <serial_create>
    6d0e:	90 93 17 13 	sts	0x1317, r25	; 0x801317 <_com_serial_instance+0x1>
    6d12:	80 93 16 13 	sts	0x1316, r24	; 0x801316 <_com_serial_instance>
    6d16:	e8 e3       	ldi	r30, 0x38	; 56
    6d18:	f3 e1       	ldi	r31, 0x13	; 19
    6d1a:	8f e0       	ldi	r24, 0x0F	; 15
    6d1c:	92 e0       	ldi	r25, 0x02	; 2
    6d1e:	91 83       	std	Z+1, r25	; 0x01
    6d20:	80 83       	st	Z, r24
    6d22:	93 83       	std	Z+3, r25	; 0x03
    6d24:	82 83       	std	Z+2, r24	; 0x02
    6d26:	0f 91       	pop	r16
    6d28:	ef 90       	pop	r14
    6d2a:	cf 90       	pop	r12
    6d2c:	af 90       	pop	r10
    6d2e:	9f 90       	pop	r9
    6d30:	8f 90       	pop	r8
    6d32:	08 95       	ret

00006d34 <_turn_off>:
    6d34:	90 e0       	ldi	r25, 0x00	; 0
    6d36:	fc 01       	movw	r30, r24
    6d38:	ee 0f       	add	r30, r30
    6d3a:	ff 1f       	adc	r31, r31
    6d3c:	e8 0f       	add	r30, r24
    6d3e:	f9 1f       	adc	r31, r25
    6d40:	ee 0f       	add	r30, r30
    6d42:	ff 1f       	adc	r31, r31
    6d44:	e8 5e       	subi	r30, 0xE8	; 232
    6d46:	fc 4e       	sbci	r31, 0xEC	; 236
    6d48:	23 81       	ldd	r18, Z+3	; 0x03
    6d4a:	21 11       	cpse	r18, r1
    6d4c:	1f c0       	rjmp	.+62     	; 0x6d8c <_turn_off+0x58>
    6d4e:	9c 01       	movw	r18, r24
    6d50:	22 0f       	add	r18, r18
    6d52:	33 1f       	adc	r19, r19
    6d54:	f9 01       	movw	r30, r18
    6d56:	e8 0f       	add	r30, r24
    6d58:	f9 1f       	adc	r31, r25
    6d5a:	ee 0f       	add	r30, r30
    6d5c:	ff 1f       	adc	r31, r31
    6d5e:	e8 5e       	subi	r30, 0xE8	; 232
    6d60:	fc 4e       	sbci	r31, 0xEC	; 236
    6d62:	a0 81       	ld	r26, Z
    6d64:	b1 81       	ldd	r27, Z+1	; 0x01
    6d66:	4c 91       	ld	r20, X
    6d68:	f9 01       	movw	r30, r18
    6d6a:	e8 0f       	add	r30, r24
    6d6c:	f9 1f       	adc	r31, r25
    6d6e:	ee 0f       	add	r30, r30
    6d70:	ff 1f       	adc	r31, r31
    6d72:	e8 5e       	subi	r30, 0xE8	; 232
    6d74:	fc 4e       	sbci	r31, 0xEC	; 236
    6d76:	81 e0       	ldi	r24, 0x01	; 1
    6d78:	90 e0       	ldi	r25, 0x00	; 0
    6d7a:	02 80       	ldd	r0, Z+2	; 0x02
    6d7c:	02 c0       	rjmp	.+4      	; 0x6d82 <_turn_off+0x4e>
    6d7e:	88 0f       	add	r24, r24
    6d80:	99 1f       	adc	r25, r25
    6d82:	0a 94       	dec	r0
    6d84:	e2 f7       	brpl	.-8      	; 0x6d7e <_turn_off+0x4a>
    6d86:	84 2b       	or	r24, r20
    6d88:	8c 93       	st	X, r24
    6d8a:	08 95       	ret
    6d8c:	fc 01       	movw	r30, r24
    6d8e:	ee 0f       	add	r30, r30
    6d90:	ff 1f       	adc	r31, r31
    6d92:	df 01       	movw	r26, r30
    6d94:	a8 0f       	add	r26, r24
    6d96:	b9 1f       	adc	r27, r25
    6d98:	aa 0f       	add	r26, r26
    6d9a:	bb 1f       	adc	r27, r27
    6d9c:	a8 5e       	subi	r26, 0xE8	; 232
    6d9e:	bc 4e       	sbci	r27, 0xEC	; 236
    6da0:	0d 90       	ld	r0, X+
    6da2:	bc 91       	ld	r27, X
    6da4:	a0 2d       	mov	r26, r0
    6da6:	2c 91       	ld	r18, X
    6da8:	e8 0f       	add	r30, r24
    6daa:	f9 1f       	adc	r31, r25
    6dac:	ee 0f       	add	r30, r30
    6dae:	ff 1f       	adc	r31, r31
    6db0:	e8 5e       	subi	r30, 0xE8	; 232
    6db2:	fc 4e       	sbci	r31, 0xEC	; 236
    6db4:	81 e0       	ldi	r24, 0x01	; 1
    6db6:	90 e0       	ldi	r25, 0x00	; 0
    6db8:	02 80       	ldd	r0, Z+2	; 0x02
    6dba:	02 c0       	rjmp	.+4      	; 0x6dc0 <_turn_off+0x8c>
    6dbc:	88 0f       	add	r24, r24
    6dbe:	99 1f       	adc	r25, r25
    6dc0:	0a 94       	dec	r0
    6dc2:	e2 f7       	brpl	.-8      	; 0x6dbc <_turn_off+0x88>
    6dc4:	80 95       	com	r24
    6dc6:	82 23       	and	r24, r18
    6dc8:	8c 93       	st	X, r24
    6dca:	08 95       	ret

00006dcc <_turn_on>:
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	fc 01       	movw	r30, r24
    6dd0:	ee 0f       	add	r30, r30
    6dd2:	ff 1f       	adc	r31, r31
    6dd4:	e8 0f       	add	r30, r24
    6dd6:	f9 1f       	adc	r31, r25
    6dd8:	ee 0f       	add	r30, r30
    6dda:	ff 1f       	adc	r31, r31
    6ddc:	e8 5e       	subi	r30, 0xE8	; 232
    6dde:	fc 4e       	sbci	r31, 0xEC	; 236
    6de0:	23 81       	ldd	r18, Z+3	; 0x03
    6de2:	21 11       	cpse	r18, r1
    6de4:	20 c0       	rjmp	.+64     	; 0x6e26 <_turn_on+0x5a>
    6de6:	9c 01       	movw	r18, r24
    6de8:	22 0f       	add	r18, r18
    6dea:	33 1f       	adc	r19, r19
    6dec:	f9 01       	movw	r30, r18
    6dee:	e8 0f       	add	r30, r24
    6df0:	f9 1f       	adc	r31, r25
    6df2:	ee 0f       	add	r30, r30
    6df4:	ff 1f       	adc	r31, r31
    6df6:	e8 5e       	subi	r30, 0xE8	; 232
    6df8:	fc 4e       	sbci	r31, 0xEC	; 236
    6dfa:	a0 81       	ld	r26, Z
    6dfc:	b1 81       	ldd	r27, Z+1	; 0x01
    6dfe:	4c 91       	ld	r20, X
    6e00:	f9 01       	movw	r30, r18
    6e02:	e8 0f       	add	r30, r24
    6e04:	f9 1f       	adc	r31, r25
    6e06:	ee 0f       	add	r30, r30
    6e08:	ff 1f       	adc	r31, r31
    6e0a:	e8 5e       	subi	r30, 0xE8	; 232
    6e0c:	fc 4e       	sbci	r31, 0xEC	; 236
    6e0e:	81 e0       	ldi	r24, 0x01	; 1
    6e10:	90 e0       	ldi	r25, 0x00	; 0
    6e12:	02 80       	ldd	r0, Z+2	; 0x02
    6e14:	02 c0       	rjmp	.+4      	; 0x6e1a <_turn_on+0x4e>
    6e16:	88 0f       	add	r24, r24
    6e18:	99 1f       	adc	r25, r25
    6e1a:	0a 94       	dec	r0
    6e1c:	e2 f7       	brpl	.-8      	; 0x6e16 <_turn_on+0x4a>
    6e1e:	80 95       	com	r24
    6e20:	84 23       	and	r24, r20
    6e22:	8c 93       	st	X, r24
    6e24:	08 95       	ret
    6e26:	fc 01       	movw	r30, r24
    6e28:	ee 0f       	add	r30, r30
    6e2a:	ff 1f       	adc	r31, r31
    6e2c:	df 01       	movw	r26, r30
    6e2e:	a8 0f       	add	r26, r24
    6e30:	b9 1f       	adc	r27, r25
    6e32:	aa 0f       	add	r26, r26
    6e34:	bb 1f       	adc	r27, r27
    6e36:	a8 5e       	subi	r26, 0xE8	; 232
    6e38:	bc 4e       	sbci	r27, 0xEC	; 236
    6e3a:	0d 90       	ld	r0, X+
    6e3c:	bc 91       	ld	r27, X
    6e3e:	a0 2d       	mov	r26, r0
    6e40:	2c 91       	ld	r18, X
    6e42:	e8 0f       	add	r30, r24
    6e44:	f9 1f       	adc	r31, r25
    6e46:	ee 0f       	add	r30, r30
    6e48:	ff 1f       	adc	r31, r31
    6e4a:	e8 5e       	subi	r30, 0xE8	; 232
    6e4c:	fc 4e       	sbci	r31, 0xEC	; 236
    6e4e:	81 e0       	ldi	r24, 0x01	; 1
    6e50:	90 e0       	ldi	r25, 0x00	; 0
    6e52:	02 80       	ldd	r0, Z+2	; 0x02
    6e54:	02 c0       	rjmp	.+4      	; 0x6e5a <_turn_on+0x8e>
    6e56:	88 0f       	add	r24, r24
    6e58:	99 1f       	adc	r25, r25
    6e5a:	0a 94       	dec	r0
    6e5c:	e2 f7       	brpl	.-8      	; 0x6e56 <_turn_on+0x8a>
    6e5e:	82 2b       	or	r24, r18
    6e60:	8c 93       	st	X, r24
    6e62:	08 95       	ret

00006e64 <_hal_led_task>:
    6e64:	cc 24       	eor	r12, r12
    6e66:	c3 94       	inc	r12
    6e68:	d1 2c       	mov	r13, r1
    6e6a:	68 94       	set
    6e6c:	bb 24       	eor	r11, r11
    6e6e:	b2 f8       	bld	r11, 2
    6e70:	c8 e1       	ldi	r28, 0x18	; 24
    6e72:	d3 e1       	ldi	r29, 0x13	; 19
    6e74:	10 e0       	ldi	r17, 0x00	; 0
    6e76:	8c 81       	ldd	r24, Y+4	; 0x04
    6e78:	81 30       	cpi	r24, 0x01	; 1
    6e7a:	81 f0       	breq	.+32     	; 0x6e9c <_hal_led_task+0x38>
    6e7c:	18 f1       	brcs	.+70     	; 0x6ec4 <_hal_led_task+0x60>
    6e7e:	82 30       	cpi	r24, 0x02	; 2
    6e80:	61 f5       	brne	.+88     	; 0x6eda <_hal_led_task+0x76>
    6e82:	e8 81       	ld	r30, Y
    6e84:	f9 81       	ldd	r31, Y+1	; 0x01
    6e86:	20 81       	ld	r18, Z
    6e88:	c6 01       	movw	r24, r12
    6e8a:	0a 80       	ldd	r0, Y+2	; 0x02
    6e8c:	02 c0       	rjmp	.+4      	; 0x6e92 <_hal_led_task+0x2e>
    6e8e:	88 0f       	add	r24, r24
    6e90:	99 1f       	adc	r25, r25
    6e92:	0a 94       	dec	r0
    6e94:	e2 f7       	brpl	.-8      	; 0x6e8e <_hal_led_task+0x2a>
    6e96:	82 27       	eor	r24, r18
    6e98:	80 83       	st	Z, r24
    6e9a:	1f c0       	rjmp	.+62     	; 0x6eda <_hal_led_task+0x76>
    6e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    6e9e:	8f 5f       	subi	r24, 0xFF	; 255
    6ea0:	8a 30       	cpi	r24, 0x0A	; 10
    6ea2:	10 f4       	brcc	.+4      	; 0x6ea8 <_hal_led_task+0x44>
    6ea4:	8d 83       	std	Y+5, r24	; 0x05
    6ea6:	19 c0       	rjmp	.+50     	; 0x6eda <_hal_led_task+0x76>
    6ea8:	1d 82       	std	Y+5, r1	; 0x05
    6eaa:	e8 81       	ld	r30, Y
    6eac:	f9 81       	ldd	r31, Y+1	; 0x01
    6eae:	20 81       	ld	r18, Z
    6eb0:	c6 01       	movw	r24, r12
    6eb2:	0a 80       	ldd	r0, Y+2	; 0x02
    6eb4:	02 c0       	rjmp	.+4      	; 0x6eba <_hal_led_task+0x56>
    6eb6:	88 0f       	add	r24, r24
    6eb8:	99 1f       	adc	r25, r25
    6eba:	0a 94       	dec	r0
    6ebc:	e2 f7       	brpl	.-8      	; 0x6eb6 <_hal_led_task+0x52>
    6ebe:	82 27       	eor	r24, r18
    6ec0:	80 83       	st	Z, r24
    6ec2:	0b c0       	rjmp	.+22     	; 0x6eda <_hal_led_task+0x76>
    6ec4:	0d 81       	ldd	r16, Y+5	; 0x05
    6ec6:	00 23       	and	r16, r16
    6ec8:	29 f0       	breq	.+10     	; 0x6ed4 <_hal_led_task+0x70>
    6eca:	81 2f       	mov	r24, r17
    6ecc:	7f df       	rcall	.-258    	; 0x6dcc <_turn_on>
    6ece:	01 50       	subi	r16, 0x01	; 1
    6ed0:	0d 83       	std	Y+5, r16	; 0x05
    6ed2:	03 c0       	rjmp	.+6      	; 0x6eda <_hal_led_task+0x76>
    6ed4:	bc 82       	std	Y+4, r11	; 0x04
    6ed6:	81 2f       	mov	r24, r17
    6ed8:	2d df       	rcall	.-422    	; 0x6d34 <_turn_off>
    6eda:	1f 5f       	subi	r17, 0xFF	; 255
    6edc:	26 96       	adiw	r28, 0x06	; 6
    6ede:	14 30       	cpi	r17, 0x04	; 4
    6ee0:	51 f6       	brne	.-108    	; 0x6e76 <_hal_led_task+0x12>
    6ee2:	65 e0       	ldi	r22, 0x05	; 5
    6ee4:	70 e0       	ldi	r23, 0x00	; 0
    6ee6:	80 e0       	ldi	r24, 0x00	; 0
    6ee8:	90 e0       	ldi	r25, 0x00	; 0
    6eea:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <vTaskDelay>
    6eee:	c0 cf       	rjmp	.-128    	; 0x6e70 <_hal_led_task+0xc>

00006ef0 <status_leds_initialise>:
    6ef0:	ef 92       	push	r14
    6ef2:	ff 92       	push	r15
    6ef4:	0f 93       	push	r16
    6ef6:	1f 93       	push	r17
    6ef8:	cf 93       	push	r28
    6efa:	df 93       	push	r29
    6efc:	08 2f       	mov	r16, r24
    6efe:	80 e4       	ldi	r24, 0x40	; 64
    6f00:	87 b9       	out	0x07, r24	; 7
    6f02:	c8 e1       	ldi	r28, 0x18	; 24
    6f04:	d3 e1       	ldi	r29, 0x13	; 19
    6f06:	0f 2e       	mov	r0, r31
    6f08:	f8 e2       	ldi	r31, 0x28	; 40
    6f0a:	ef 2e       	mov	r14, r31
    6f0c:	f1 2c       	mov	r15, r1
    6f0e:	f0 2d       	mov	r31, r0
    6f10:	f9 82       	std	Y+1, r15	; 0x01
    6f12:	e8 82       	st	Y, r14
    6f14:	86 e0       	ldi	r24, 0x06	; 6
    6f16:	8a 83       	std	Y+2, r24	; 0x02
    6f18:	1b 82       	std	Y+3, r1	; 0x03
    6f1a:	14 e0       	ldi	r17, 0x04	; 4
    6f1c:	1c 83       	std	Y+4, r17	; 0x04
    6f1e:	80 e0       	ldi	r24, 0x00	; 0
    6f20:	09 df       	rcall	.-494    	; 0x6d34 <_turn_off>
    6f22:	80 e8       	ldi	r24, 0x80	; 128
    6f24:	87 b9       	out	0x07, r24	; 7
    6f26:	ff 82       	std	Y+7, r15	; 0x07
    6f28:	ee 82       	std	Y+6, r14	; 0x06
    6f2a:	87 e0       	ldi	r24, 0x07	; 7
    6f2c:	88 87       	std	Y+8, r24	; 0x08
    6f2e:	19 86       	std	Y+9, r1	; 0x09
    6f30:	1a 87       	std	Y+10, r17	; 0x0a
    6f32:	81 e0       	ldi	r24, 0x01	; 1
    6f34:	ff de       	rcall	.-514    	; 0x6d34 <_turn_off>
    6f36:	80 e2       	ldi	r24, 0x20	; 32
    6f38:	83 bb       	out	0x13, r24	; 19
    6f3a:	84 e3       	ldi	r24, 0x34	; 52
    6f3c:	90 e0       	ldi	r25, 0x00	; 0
    6f3e:	9d 87       	std	Y+13, r25	; 0x0d
    6f40:	8c 87       	std	Y+12, r24	; 0x0c
    6f42:	85 e0       	ldi	r24, 0x05	; 5
    6f44:	8e 87       	std	Y+14, r24	; 0x0e
    6f46:	1f 86       	std	Y+15, r1	; 0x0f
    6f48:	18 8b       	std	Y+16, r17	; 0x10
    6f4a:	82 e0       	ldi	r24, 0x02	; 2
    6f4c:	f3 de       	rcall	.-538    	; 0x6d34 <_turn_off>
    6f4e:	80 e1       	ldi	r24, 0x10	; 16
    6f50:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    6f54:	82 e0       	ldi	r24, 0x02	; 2
    6f56:	91 e0       	ldi	r25, 0x01	; 1
    6f58:	9b 8b       	std	Y+19, r25	; 0x13
    6f5a:	8a 8b       	std	Y+18, r24	; 0x12
    6f5c:	1c 8b       	std	Y+20, r17	; 0x14
    6f5e:	1d 8a       	std	Y+21, r1	; 0x15
    6f60:	1e 8b       	std	Y+22, r17	; 0x16
    6f62:	83 e0       	ldi	r24, 0x03	; 3
    6f64:	e7 de       	rcall	.-562    	; 0x6d34 <_turn_off>
    6f66:	e1 2c       	mov	r14, r1
    6f68:	f1 2c       	mov	r15, r1
    6f6a:	20 e0       	ldi	r18, 0x00	; 0
    6f6c:	30 e0       	ldi	r19, 0x00	; 0
    6f6e:	40 ec       	ldi	r20, 0xC0	; 192
    6f70:	50 e0       	ldi	r21, 0x00	; 0
    6f72:	6a ec       	ldi	r22, 0xCA	; 202
    6f74:	76 e0       	ldi	r23, 0x06	; 6
    6f76:	82 e3       	ldi	r24, 0x32	; 50
    6f78:	97 e3       	ldi	r25, 0x37	; 55
    6f7a:	0e 94 74 13 	call	0x26e8	; 0x26e8 <xTaskCreate>
    6f7e:	df 91       	pop	r29
    6f80:	cf 91       	pop	r28
    6f82:	1f 91       	pop	r17
    6f84:	0f 91       	pop	r16
    6f86:	ff 90       	pop	r15
    6f88:	ef 90       	pop	r14
    6f8a:	08 95       	ret

00006f8c <status_leds_slowBlink>:
    6f8c:	cf 93       	push	r28
    6f8e:	df 93       	push	r29
    6f90:	90 e0       	ldi	r25, 0x00	; 0
    6f92:	fc 01       	movw	r30, r24
    6f94:	ee 0f       	add	r30, r30
    6f96:	ff 1f       	adc	r31, r31
    6f98:	df 01       	movw	r26, r30
    6f9a:	a8 0f       	add	r26, r24
    6f9c:	b9 1f       	adc	r27, r25
    6f9e:	aa 0f       	add	r26, r26
    6fa0:	bb 1f       	adc	r27, r27
    6fa2:	a8 5e       	subi	r26, 0xE8	; 232
    6fa4:	bc 4e       	sbci	r27, 0xEC	; 236
    6fa6:	cd 91       	ld	r28, X+
    6fa8:	dc 91       	ld	r29, X
    6faa:	11 97       	sbiw	r26, 0x01	; 1
    6fac:	48 81       	ld	r20, Y
    6fae:	21 e0       	ldi	r18, 0x01	; 1
    6fb0:	30 e0       	ldi	r19, 0x00	; 0
    6fb2:	12 96       	adiw	r26, 0x02	; 2
    6fb4:	0c 90       	ld	r0, X
    6fb6:	12 97       	sbiw	r26, 0x02	; 2
    6fb8:	02 c0       	rjmp	.+4      	; 0x6fbe <status_leds_slowBlink+0x32>
    6fba:	22 0f       	add	r18, r18
    6fbc:	33 1f       	adc	r19, r19
    6fbe:	0a 94       	dec	r0
    6fc0:	e2 f7       	brpl	.-8      	; 0x6fba <status_leds_slowBlink+0x2e>
    6fc2:	24 27       	eor	r18, r20
    6fc4:	28 83       	st	Y, r18
    6fc6:	fd 01       	movw	r30, r26
    6fc8:	81 e0       	ldi	r24, 0x01	; 1
    6fca:	84 83       	std	Z+4, r24	; 0x04
    6fcc:	df 91       	pop	r29
    6fce:	cf 91       	pop	r28
    6fd0:	08 95       	ret

00006fd2 <status_leds_fastBlink>:
    6fd2:	cf 93       	push	r28
    6fd4:	df 93       	push	r29
    6fd6:	90 e0       	ldi	r25, 0x00	; 0
    6fd8:	fc 01       	movw	r30, r24
    6fda:	ee 0f       	add	r30, r30
    6fdc:	ff 1f       	adc	r31, r31
    6fde:	df 01       	movw	r26, r30
    6fe0:	a8 0f       	add	r26, r24
    6fe2:	b9 1f       	adc	r27, r25
    6fe4:	aa 0f       	add	r26, r26
    6fe6:	bb 1f       	adc	r27, r27
    6fe8:	a8 5e       	subi	r26, 0xE8	; 232
    6fea:	bc 4e       	sbci	r27, 0xEC	; 236
    6fec:	cd 91       	ld	r28, X+
    6fee:	dc 91       	ld	r29, X
    6ff0:	11 97       	sbiw	r26, 0x01	; 1
    6ff2:	48 81       	ld	r20, Y
    6ff4:	21 e0       	ldi	r18, 0x01	; 1
    6ff6:	30 e0       	ldi	r19, 0x00	; 0
    6ff8:	12 96       	adiw	r26, 0x02	; 2
    6ffa:	0c 90       	ld	r0, X
    6ffc:	12 97       	sbiw	r26, 0x02	; 2
    6ffe:	02 c0       	rjmp	.+4      	; 0x7004 <status_leds_fastBlink+0x32>
    7000:	22 0f       	add	r18, r18
    7002:	33 1f       	adc	r19, r19
    7004:	0a 94       	dec	r0
    7006:	e2 f7       	brpl	.-8      	; 0x7000 <status_leds_fastBlink+0x2e>
    7008:	24 27       	eor	r18, r20
    700a:	28 83       	st	Y, r18
    700c:	fd 01       	movw	r30, r26
    700e:	82 e0       	ldi	r24, 0x02	; 2
    7010:	84 83       	std	Z+4, r24	; 0x04
    7012:	df 91       	pop	r29
    7014:	cf 91       	pop	r28
    7016:	08 95       	ret

00007018 <status_leds_ledOn>:
    7018:	28 2f       	mov	r18, r24
    701a:	30 e0       	ldi	r19, 0x00	; 0
    701c:	f9 01       	movw	r30, r18
    701e:	ee 0f       	add	r30, r30
    7020:	ff 1f       	adc	r31, r31
    7022:	e2 0f       	add	r30, r18
    7024:	f3 1f       	adc	r31, r19
    7026:	ee 0f       	add	r30, r30
    7028:	ff 1f       	adc	r31, r31
    702a:	e8 5e       	subi	r30, 0xE8	; 232
    702c:	fc 4e       	sbci	r31, 0xEC	; 236
    702e:	93 e0       	ldi	r25, 0x03	; 3
    7030:	94 83       	std	Z+4, r25	; 0x04
    7032:	cc ce       	rjmp	.-616    	; 0x6dcc <_turn_on>
    7034:	08 95       	ret

00007036 <status_leds_ledOff>:
    7036:	28 2f       	mov	r18, r24
    7038:	30 e0       	ldi	r19, 0x00	; 0
    703a:	f9 01       	movw	r30, r18
    703c:	ee 0f       	add	r30, r30
    703e:	ff 1f       	adc	r31, r31
    7040:	e2 0f       	add	r30, r18
    7042:	f3 1f       	adc	r31, r19
    7044:	ee 0f       	add	r30, r30
    7046:	ff 1f       	adc	r31, r31
    7048:	e8 5e       	subi	r30, 0xE8	; 232
    704a:	fc 4e       	sbci	r31, 0xEC	; 236
    704c:	94 e0       	ldi	r25, 0x04	; 4
    704e:	94 83       	std	Z+4, r25	; 0x04
    7050:	71 ce       	rjmp	.-798    	; 0x6d34 <_turn_off>
    7052:	08 95       	ret

00007054 <status_leds_longPuls>:
    7054:	90 e0       	ldi	r25, 0x00	; 0
    7056:	fc 01       	movw	r30, r24
    7058:	ee 0f       	add	r30, r30
    705a:	ff 1f       	adc	r31, r31
    705c:	df 01       	movw	r26, r30
    705e:	a8 0f       	add	r26, r24
    7060:	b9 1f       	adc	r27, r25
    7062:	aa 0f       	add	r26, r26
    7064:	bb 1f       	adc	r27, r27
    7066:	a8 5e       	subi	r26, 0xE8	; 232
    7068:	bc 4e       	sbci	r27, 0xEC	; 236
    706a:	24 e0       	ldi	r18, 0x04	; 4
    706c:	15 96       	adiw	r26, 0x05	; 5
    706e:	2c 93       	st	X, r18
    7070:	15 97       	sbiw	r26, 0x05	; 5
    7072:	fd 01       	movw	r30, r26
    7074:	14 82       	std	Z+4, r1	; 0x04
    7076:	08 95       	ret

00007078 <status_leds_shortPuls>:
    7078:	90 e0       	ldi	r25, 0x00	; 0
    707a:	fc 01       	movw	r30, r24
    707c:	ee 0f       	add	r30, r30
    707e:	ff 1f       	adc	r31, r31
    7080:	df 01       	movw	r26, r30
    7082:	a8 0f       	add	r26, r24
    7084:	b9 1f       	adc	r27, r25
    7086:	aa 0f       	add	r26, r26
    7088:	bb 1f       	adc	r27, r27
    708a:	a8 5e       	subi	r26, 0xE8	; 232
    708c:	bc 4e       	sbci	r27, 0xEC	; 236
    708e:	21 e0       	ldi	r18, 0x01	; 1
    7090:	15 96       	adiw	r26, 0x05	; 5
    7092:	2c 93       	st	X, r18
    7094:	15 97       	sbiw	r26, 0x05	; 5
    7096:	fd 01       	movw	r30, r26
    7098:	14 82       	std	Z+4, r1	; 0x04
    709a:	08 95       	ret

0000709c <fifo_init>:
    709c:	fc 01       	movw	r30, r24
    709e:	41 11       	cpse	r20, r1
    70a0:	01 c0       	rjmp	.+2      	; 0x70a4 <fifo_init+0x8>
    70a2:	5b d2       	rcall	.+1206   	; 0x755a <abort>
    70a4:	84 2f       	mov	r24, r20
    70a6:	90 e0       	ldi	r25, 0x00	; 0
    70a8:	9c 01       	movw	r18, r24
    70aa:	21 50       	subi	r18, 0x01	; 1
    70ac:	31 09       	sbc	r19, r1
    70ae:	82 23       	and	r24, r18
    70b0:	93 23       	and	r25, r19
    70b2:	89 2b       	or	r24, r25
    70b4:	09 f0       	breq	.+2      	; 0x70b8 <fifo_init+0x1c>
    70b6:	51 d2       	rcall	.+1186   	; 0x755a <abort>
    70b8:	41 38       	cpi	r20, 0x81	; 129
    70ba:	08 f0       	brcs	.+2      	; 0x70be <fifo_init+0x22>
    70bc:	4e d2       	rcall	.+1180   	; 0x755a <abort>
    70be:	12 82       	std	Z+2, r1	; 0x02
    70c0:	13 82       	std	Z+3, r1	; 0x03
    70c2:	44 83       	std	Z+4, r20	; 0x04
    70c4:	44 0f       	add	r20, r20
    70c6:	41 50       	subi	r20, 0x01	; 1
    70c8:	45 83       	std	Z+5, r20	; 0x05
    70ca:	71 83       	std	Z+1, r23	; 0x01
    70cc:	60 83       	st	Z, r22
    70ce:	80 e0       	ldi	r24, 0x00	; 0
    70d0:	90 e0       	ldi	r25, 0x00	; 0
    70d2:	08 95       	ret

000070d4 <__subsf3>:
    70d4:	50 58       	subi	r21, 0x80	; 128

000070d6 <__addsf3>:
    70d6:	bb 27       	eor	r27, r27
    70d8:	aa 27       	eor	r26, r26
    70da:	13 d0       	rcall	.+38     	; 0x7102 <__addsf3x>
    70dc:	0c 94 43 2e 	jmp	0x5c86	; 0x5c86 <__fp_round>
    70e0:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__fp_pscA>
    70e4:	38 f0       	brcs	.+14     	; 0x70f4 <__addsf3+0x1e>
    70e6:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__fp_pscB>
    70ea:	20 f0       	brcs	.+8      	; 0x70f4 <__addsf3+0x1e>
    70ec:	39 f4       	brne	.+14     	; 0x70fc <__addsf3+0x26>
    70ee:	9f 3f       	cpi	r25, 0xFF	; 255
    70f0:	19 f4       	brne	.+6      	; 0x70f8 <__addsf3+0x22>
    70f2:	26 f4       	brtc	.+8      	; 0x70fc <__addsf3+0x26>
    70f4:	0c 94 32 2e 	jmp	0x5c64	; 0x5c64 <__fp_nan>
    70f8:	0e f4       	brtc	.+2      	; 0x70fc <__addsf3+0x26>
    70fa:	e0 95       	com	r30
    70fc:	e7 fb       	bst	r30, 7
    70fe:	0c 94 2c 2e 	jmp	0x5c58	; 0x5c58 <__fp_inf>

00007102 <__addsf3x>:
    7102:	e9 2f       	mov	r30, r25
    7104:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <__fp_split3>
    7108:	58 f3       	brcs	.-42     	; 0x70e0 <__addsf3+0xa>
    710a:	ba 17       	cp	r27, r26
    710c:	62 07       	cpc	r22, r18
    710e:	73 07       	cpc	r23, r19
    7110:	84 07       	cpc	r24, r20
    7112:	95 07       	cpc	r25, r21
    7114:	20 f0       	brcs	.+8      	; 0x711e <__addsf3x+0x1c>
    7116:	79 f4       	brne	.+30     	; 0x7136 <__addsf3x+0x34>
    7118:	a6 f5       	brtc	.+104    	; 0x7182 <__addsf3x+0x80>
    711a:	0c 94 be 2d 	jmp	0x5b7c	; 0x5b7c <__fp_zero>
    711e:	0e f4       	brtc	.+2      	; 0x7122 <__addsf3x+0x20>
    7120:	e0 95       	com	r30
    7122:	0b 2e       	mov	r0, r27
    7124:	ba 2f       	mov	r27, r26
    7126:	a0 2d       	mov	r26, r0
    7128:	0b 01       	movw	r0, r22
    712a:	b9 01       	movw	r22, r18
    712c:	90 01       	movw	r18, r0
    712e:	0c 01       	movw	r0, r24
    7130:	ca 01       	movw	r24, r20
    7132:	a0 01       	movw	r20, r0
    7134:	11 24       	eor	r1, r1
    7136:	ff 27       	eor	r31, r31
    7138:	59 1b       	sub	r21, r25
    713a:	99 f0       	breq	.+38     	; 0x7162 <__addsf3x+0x60>
    713c:	59 3f       	cpi	r21, 0xF9	; 249
    713e:	50 f4       	brcc	.+20     	; 0x7154 <__addsf3x+0x52>
    7140:	50 3e       	cpi	r21, 0xE0	; 224
    7142:	68 f1       	brcs	.+90     	; 0x719e <__addsf3x+0x9c>
    7144:	1a 16       	cp	r1, r26
    7146:	f0 40       	sbci	r31, 0x00	; 0
    7148:	a2 2f       	mov	r26, r18
    714a:	23 2f       	mov	r18, r19
    714c:	34 2f       	mov	r19, r20
    714e:	44 27       	eor	r20, r20
    7150:	58 5f       	subi	r21, 0xF8	; 248
    7152:	f3 cf       	rjmp	.-26     	; 0x713a <__addsf3x+0x38>
    7154:	46 95       	lsr	r20
    7156:	37 95       	ror	r19
    7158:	27 95       	ror	r18
    715a:	a7 95       	ror	r26
    715c:	f0 40       	sbci	r31, 0x00	; 0
    715e:	53 95       	inc	r21
    7160:	c9 f7       	brne	.-14     	; 0x7154 <__addsf3x+0x52>
    7162:	7e f4       	brtc	.+30     	; 0x7182 <__addsf3x+0x80>
    7164:	1f 16       	cp	r1, r31
    7166:	ba 0b       	sbc	r27, r26
    7168:	62 0b       	sbc	r22, r18
    716a:	73 0b       	sbc	r23, r19
    716c:	84 0b       	sbc	r24, r20
    716e:	ba f0       	brmi	.+46     	; 0x719e <__addsf3x+0x9c>
    7170:	91 50       	subi	r25, 0x01	; 1
    7172:	a1 f0       	breq	.+40     	; 0x719c <__addsf3x+0x9a>
    7174:	ff 0f       	add	r31, r31
    7176:	bb 1f       	adc	r27, r27
    7178:	66 1f       	adc	r22, r22
    717a:	77 1f       	adc	r23, r23
    717c:	88 1f       	adc	r24, r24
    717e:	c2 f7       	brpl	.-16     	; 0x7170 <__addsf3x+0x6e>
    7180:	0e c0       	rjmp	.+28     	; 0x719e <__addsf3x+0x9c>
    7182:	ba 0f       	add	r27, r26
    7184:	62 1f       	adc	r22, r18
    7186:	73 1f       	adc	r23, r19
    7188:	84 1f       	adc	r24, r20
    718a:	48 f4       	brcc	.+18     	; 0x719e <__addsf3x+0x9c>
    718c:	87 95       	ror	r24
    718e:	77 95       	ror	r23
    7190:	67 95       	ror	r22
    7192:	b7 95       	ror	r27
    7194:	f7 95       	ror	r31
    7196:	9e 3f       	cpi	r25, 0xFE	; 254
    7198:	08 f0       	brcs	.+2      	; 0x719c <__addsf3x+0x9a>
    719a:	b0 cf       	rjmp	.-160    	; 0x70fc <__addsf3+0x26>
    719c:	93 95       	inc	r25
    719e:	88 0f       	add	r24, r24
    71a0:	08 f0       	brcs	.+2      	; 0x71a4 <__addsf3x+0xa2>
    71a2:	99 27       	eor	r25, r25
    71a4:	ee 0f       	add	r30, r30
    71a6:	97 95       	ror	r25
    71a8:	87 95       	ror	r24
    71aa:	08 95       	ret

000071ac <__divsf3>:
    71ac:	12 d0       	rcall	.+36     	; 0x71d2 <__divsf3x>
    71ae:	0c 94 43 2e 	jmp	0x5c86	; 0x5c86 <__fp_round>
    71b2:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__fp_pscB>
    71b6:	58 f0       	brcs	.+22     	; 0x71ce <__divsf3+0x22>
    71b8:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__fp_pscA>
    71bc:	40 f0       	brcs	.+16     	; 0x71ce <__divsf3+0x22>
    71be:	29 f4       	brne	.+10     	; 0x71ca <__divsf3+0x1e>
    71c0:	5f 3f       	cpi	r21, 0xFF	; 255
    71c2:	29 f0       	breq	.+10     	; 0x71ce <__divsf3+0x22>
    71c4:	0c 94 2c 2e 	jmp	0x5c58	; 0x5c58 <__fp_inf>
    71c8:	51 11       	cpse	r21, r1
    71ca:	0c 94 bf 2d 	jmp	0x5b7e	; 0x5b7e <__fp_szero>
    71ce:	0c 94 32 2e 	jmp	0x5c64	; 0x5c64 <__fp_nan>

000071d2 <__divsf3x>:
    71d2:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <__fp_split3>
    71d6:	68 f3       	brcs	.-38     	; 0x71b2 <__divsf3+0x6>

000071d8 <__divsf3_pse>:
    71d8:	99 23       	and	r25, r25
    71da:	b1 f3       	breq	.-20     	; 0x71c8 <__divsf3+0x1c>
    71dc:	55 23       	and	r21, r21
    71de:	91 f3       	breq	.-28     	; 0x71c4 <__divsf3+0x18>
    71e0:	95 1b       	sub	r25, r21
    71e2:	55 0b       	sbc	r21, r21
    71e4:	bb 27       	eor	r27, r27
    71e6:	aa 27       	eor	r26, r26
    71e8:	62 17       	cp	r22, r18
    71ea:	73 07       	cpc	r23, r19
    71ec:	84 07       	cpc	r24, r20
    71ee:	38 f0       	brcs	.+14     	; 0x71fe <__divsf3_pse+0x26>
    71f0:	9f 5f       	subi	r25, 0xFF	; 255
    71f2:	5f 4f       	sbci	r21, 0xFF	; 255
    71f4:	22 0f       	add	r18, r18
    71f6:	33 1f       	adc	r19, r19
    71f8:	44 1f       	adc	r20, r20
    71fa:	aa 1f       	adc	r26, r26
    71fc:	a9 f3       	breq	.-22     	; 0x71e8 <__divsf3_pse+0x10>
    71fe:	35 d0       	rcall	.+106    	; 0x726a <__divsf3_pse+0x92>
    7200:	0e 2e       	mov	r0, r30
    7202:	3a f0       	brmi	.+14     	; 0x7212 <__divsf3_pse+0x3a>
    7204:	e0 e8       	ldi	r30, 0x80	; 128
    7206:	32 d0       	rcall	.+100    	; 0x726c <__divsf3_pse+0x94>
    7208:	91 50       	subi	r25, 0x01	; 1
    720a:	50 40       	sbci	r21, 0x00	; 0
    720c:	e6 95       	lsr	r30
    720e:	00 1c       	adc	r0, r0
    7210:	ca f7       	brpl	.-14     	; 0x7204 <__divsf3_pse+0x2c>
    7212:	2b d0       	rcall	.+86     	; 0x726a <__divsf3_pse+0x92>
    7214:	fe 2f       	mov	r31, r30
    7216:	29 d0       	rcall	.+82     	; 0x726a <__divsf3_pse+0x92>
    7218:	66 0f       	add	r22, r22
    721a:	77 1f       	adc	r23, r23
    721c:	88 1f       	adc	r24, r24
    721e:	bb 1f       	adc	r27, r27
    7220:	26 17       	cp	r18, r22
    7222:	37 07       	cpc	r19, r23
    7224:	48 07       	cpc	r20, r24
    7226:	ab 07       	cpc	r26, r27
    7228:	b0 e8       	ldi	r27, 0x80	; 128
    722a:	09 f0       	breq	.+2      	; 0x722e <__divsf3_pse+0x56>
    722c:	bb 0b       	sbc	r27, r27
    722e:	80 2d       	mov	r24, r0
    7230:	bf 01       	movw	r22, r30
    7232:	ff 27       	eor	r31, r31
    7234:	93 58       	subi	r25, 0x83	; 131
    7236:	5f 4f       	sbci	r21, 0xFF	; 255
    7238:	3a f0       	brmi	.+14     	; 0x7248 <__divsf3_pse+0x70>
    723a:	9e 3f       	cpi	r25, 0xFE	; 254
    723c:	51 05       	cpc	r21, r1
    723e:	78 f0       	brcs	.+30     	; 0x725e <__divsf3_pse+0x86>
    7240:	0c 94 2c 2e 	jmp	0x5c58	; 0x5c58 <__fp_inf>
    7244:	0c 94 bf 2d 	jmp	0x5b7e	; 0x5b7e <__fp_szero>
    7248:	5f 3f       	cpi	r21, 0xFF	; 255
    724a:	e4 f3       	brlt	.-8      	; 0x7244 <__divsf3_pse+0x6c>
    724c:	98 3e       	cpi	r25, 0xE8	; 232
    724e:	d4 f3       	brlt	.-12     	; 0x7244 <__divsf3_pse+0x6c>
    7250:	86 95       	lsr	r24
    7252:	77 95       	ror	r23
    7254:	67 95       	ror	r22
    7256:	b7 95       	ror	r27
    7258:	f7 95       	ror	r31
    725a:	9f 5f       	subi	r25, 0xFF	; 255
    725c:	c9 f7       	brne	.-14     	; 0x7250 <__divsf3_pse+0x78>
    725e:	88 0f       	add	r24, r24
    7260:	91 1d       	adc	r25, r1
    7262:	96 95       	lsr	r25
    7264:	87 95       	ror	r24
    7266:	97 f9       	bld	r25, 7
    7268:	08 95       	ret
    726a:	e1 e0       	ldi	r30, 0x01	; 1
    726c:	66 0f       	add	r22, r22
    726e:	77 1f       	adc	r23, r23
    7270:	88 1f       	adc	r24, r24
    7272:	bb 1f       	adc	r27, r27
    7274:	62 17       	cp	r22, r18
    7276:	73 07       	cpc	r23, r19
    7278:	84 07       	cpc	r24, r20
    727a:	ba 07       	cpc	r27, r26
    727c:	20 f0       	brcs	.+8      	; 0x7286 <__divsf3_pse+0xae>
    727e:	62 1b       	sub	r22, r18
    7280:	73 0b       	sbc	r23, r19
    7282:	84 0b       	sbc	r24, r20
    7284:	ba 0b       	sbc	r27, r26
    7286:	ee 1f       	adc	r30, r30
    7288:	88 f7       	brcc	.-30     	; 0x726c <__divsf3_pse+0x94>
    728a:	e0 95       	com	r30
    728c:	08 95       	ret

0000728e <__floatunsisf>:
    728e:	e8 94       	clt
    7290:	09 c0       	rjmp	.+18     	; 0x72a4 <__floatsisf+0x12>

00007292 <__floatsisf>:
    7292:	97 fb       	bst	r25, 7
    7294:	3e f4       	brtc	.+14     	; 0x72a4 <__floatsisf+0x12>
    7296:	90 95       	com	r25
    7298:	80 95       	com	r24
    729a:	70 95       	com	r23
    729c:	61 95       	neg	r22
    729e:	7f 4f       	sbci	r23, 0xFF	; 255
    72a0:	8f 4f       	sbci	r24, 0xFF	; 255
    72a2:	9f 4f       	sbci	r25, 0xFF	; 255
    72a4:	99 23       	and	r25, r25
    72a6:	a9 f0       	breq	.+42     	; 0x72d2 <__floatsisf+0x40>
    72a8:	f9 2f       	mov	r31, r25
    72aa:	96 e9       	ldi	r25, 0x96	; 150
    72ac:	bb 27       	eor	r27, r27
    72ae:	93 95       	inc	r25
    72b0:	f6 95       	lsr	r31
    72b2:	87 95       	ror	r24
    72b4:	77 95       	ror	r23
    72b6:	67 95       	ror	r22
    72b8:	b7 95       	ror	r27
    72ba:	f1 11       	cpse	r31, r1
    72bc:	f8 cf       	rjmp	.-16     	; 0x72ae <__floatsisf+0x1c>
    72be:	fa f4       	brpl	.+62     	; 0x72fe <__floatsisf+0x6c>
    72c0:	bb 0f       	add	r27, r27
    72c2:	11 f4       	brne	.+4      	; 0x72c8 <__floatsisf+0x36>
    72c4:	60 ff       	sbrs	r22, 0
    72c6:	1b c0       	rjmp	.+54     	; 0x72fe <__floatsisf+0x6c>
    72c8:	6f 5f       	subi	r22, 0xFF	; 255
    72ca:	7f 4f       	sbci	r23, 0xFF	; 255
    72cc:	8f 4f       	sbci	r24, 0xFF	; 255
    72ce:	9f 4f       	sbci	r25, 0xFF	; 255
    72d0:	16 c0       	rjmp	.+44     	; 0x72fe <__floatsisf+0x6c>
    72d2:	88 23       	and	r24, r24
    72d4:	11 f0       	breq	.+4      	; 0x72da <__floatsisf+0x48>
    72d6:	96 e9       	ldi	r25, 0x96	; 150
    72d8:	11 c0       	rjmp	.+34     	; 0x72fc <__floatsisf+0x6a>
    72da:	77 23       	and	r23, r23
    72dc:	21 f0       	breq	.+8      	; 0x72e6 <__floatsisf+0x54>
    72de:	9e e8       	ldi	r25, 0x8E	; 142
    72e0:	87 2f       	mov	r24, r23
    72e2:	76 2f       	mov	r23, r22
    72e4:	05 c0       	rjmp	.+10     	; 0x72f0 <__floatsisf+0x5e>
    72e6:	66 23       	and	r22, r22
    72e8:	71 f0       	breq	.+28     	; 0x7306 <__floatsisf+0x74>
    72ea:	96 e8       	ldi	r25, 0x86	; 134
    72ec:	86 2f       	mov	r24, r22
    72ee:	70 e0       	ldi	r23, 0x00	; 0
    72f0:	60 e0       	ldi	r22, 0x00	; 0
    72f2:	2a f0       	brmi	.+10     	; 0x72fe <__floatsisf+0x6c>
    72f4:	9a 95       	dec	r25
    72f6:	66 0f       	add	r22, r22
    72f8:	77 1f       	adc	r23, r23
    72fa:	88 1f       	adc	r24, r24
    72fc:	da f7       	brpl	.-10     	; 0x72f4 <__floatsisf+0x62>
    72fe:	88 0f       	add	r24, r24
    7300:	96 95       	lsr	r25
    7302:	87 95       	ror	r24
    7304:	97 f9       	bld	r25, 7
    7306:	08 95       	ret

00007308 <__tablejump2__>:
    7308:	ee 0f       	add	r30, r30
    730a:	ff 1f       	adc	r31, r31
    730c:	88 1f       	adc	r24, r24
    730e:	8b bf       	out	0x3b, r24	; 59
    7310:	07 90       	elpm	r0, Z+
    7312:	f6 91       	elpm	r31, Z
    7314:	e0 2d       	mov	r30, r0
    7316:	19 94       	eijmp

00007318 <malloc>:
    7318:	0f 93       	push	r16
    731a:	1f 93       	push	r17
    731c:	cf 93       	push	r28
    731e:	df 93       	push	r29
    7320:	82 30       	cpi	r24, 0x02	; 2
    7322:	91 05       	cpc	r25, r1
    7324:	10 f4       	brcc	.+4      	; 0x732a <malloc+0x12>
    7326:	82 e0       	ldi	r24, 0x02	; 2
    7328:	90 e0       	ldi	r25, 0x00	; 0
    732a:	e0 91 36 13 	lds	r30, 0x1336	; 0x801336 <__flp>
    732e:	f0 91 37 13 	lds	r31, 0x1337	; 0x801337 <__flp+0x1>
    7332:	20 e0       	ldi	r18, 0x00	; 0
    7334:	30 e0       	ldi	r19, 0x00	; 0
    7336:	a0 e0       	ldi	r26, 0x00	; 0
    7338:	b0 e0       	ldi	r27, 0x00	; 0
    733a:	30 97       	sbiw	r30, 0x00	; 0
    733c:	19 f1       	breq	.+70     	; 0x7384 <malloc+0x6c>
    733e:	40 81       	ld	r20, Z
    7340:	51 81       	ldd	r21, Z+1	; 0x01
    7342:	02 81       	ldd	r16, Z+2	; 0x02
    7344:	13 81       	ldd	r17, Z+3	; 0x03
    7346:	48 17       	cp	r20, r24
    7348:	59 07       	cpc	r21, r25
    734a:	c8 f0       	brcs	.+50     	; 0x737e <malloc+0x66>
    734c:	84 17       	cp	r24, r20
    734e:	95 07       	cpc	r25, r21
    7350:	69 f4       	brne	.+26     	; 0x736c <malloc+0x54>
    7352:	10 97       	sbiw	r26, 0x00	; 0
    7354:	31 f0       	breq	.+12     	; 0x7362 <malloc+0x4a>
    7356:	12 96       	adiw	r26, 0x02	; 2
    7358:	0c 93       	st	X, r16
    735a:	12 97       	sbiw	r26, 0x02	; 2
    735c:	13 96       	adiw	r26, 0x03	; 3
    735e:	1c 93       	st	X, r17
    7360:	27 c0       	rjmp	.+78     	; 0x73b0 <malloc+0x98>
    7362:	00 93 36 13 	sts	0x1336, r16	; 0x801336 <__flp>
    7366:	10 93 37 13 	sts	0x1337, r17	; 0x801337 <__flp+0x1>
    736a:	22 c0       	rjmp	.+68     	; 0x73b0 <malloc+0x98>
    736c:	21 15       	cp	r18, r1
    736e:	31 05       	cpc	r19, r1
    7370:	19 f0       	breq	.+6      	; 0x7378 <malloc+0x60>
    7372:	42 17       	cp	r20, r18
    7374:	53 07       	cpc	r21, r19
    7376:	18 f4       	brcc	.+6      	; 0x737e <malloc+0x66>
    7378:	9a 01       	movw	r18, r20
    737a:	bd 01       	movw	r22, r26
    737c:	ef 01       	movw	r28, r30
    737e:	df 01       	movw	r26, r30
    7380:	f8 01       	movw	r30, r16
    7382:	db cf       	rjmp	.-74     	; 0x733a <malloc+0x22>
    7384:	21 15       	cp	r18, r1
    7386:	31 05       	cpc	r19, r1
    7388:	f9 f0       	breq	.+62     	; 0x73c8 <malloc+0xb0>
    738a:	28 1b       	sub	r18, r24
    738c:	39 0b       	sbc	r19, r25
    738e:	24 30       	cpi	r18, 0x04	; 4
    7390:	31 05       	cpc	r19, r1
    7392:	80 f4       	brcc	.+32     	; 0x73b4 <malloc+0x9c>
    7394:	8a 81       	ldd	r24, Y+2	; 0x02
    7396:	9b 81       	ldd	r25, Y+3	; 0x03
    7398:	61 15       	cp	r22, r1
    739a:	71 05       	cpc	r23, r1
    739c:	21 f0       	breq	.+8      	; 0x73a6 <malloc+0x8e>
    739e:	fb 01       	movw	r30, r22
    73a0:	93 83       	std	Z+3, r25	; 0x03
    73a2:	82 83       	std	Z+2, r24	; 0x02
    73a4:	04 c0       	rjmp	.+8      	; 0x73ae <malloc+0x96>
    73a6:	90 93 37 13 	sts	0x1337, r25	; 0x801337 <__flp+0x1>
    73aa:	80 93 36 13 	sts	0x1336, r24	; 0x801336 <__flp>
    73ae:	fe 01       	movw	r30, r28
    73b0:	32 96       	adiw	r30, 0x02	; 2
    73b2:	44 c0       	rjmp	.+136    	; 0x743c <malloc+0x124>
    73b4:	fe 01       	movw	r30, r28
    73b6:	e2 0f       	add	r30, r18
    73b8:	f3 1f       	adc	r31, r19
    73ba:	81 93       	st	Z+, r24
    73bc:	91 93       	st	Z+, r25
    73be:	22 50       	subi	r18, 0x02	; 2
    73c0:	31 09       	sbc	r19, r1
    73c2:	39 83       	std	Y+1, r19	; 0x01
    73c4:	28 83       	st	Y, r18
    73c6:	3a c0       	rjmp	.+116    	; 0x743c <malloc+0x124>
    73c8:	20 91 34 13 	lds	r18, 0x1334	; 0x801334 <__brkval>
    73cc:	30 91 35 13 	lds	r19, 0x1335	; 0x801335 <__brkval+0x1>
    73d0:	23 2b       	or	r18, r19
    73d2:	41 f4       	brne	.+16     	; 0x73e4 <malloc+0xcc>
    73d4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    73d8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    73dc:	30 93 35 13 	sts	0x1335, r19	; 0x801335 <__brkval+0x1>
    73e0:	20 93 34 13 	sts	0x1334, r18	; 0x801334 <__brkval>
    73e4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    73e8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    73ec:	21 15       	cp	r18, r1
    73ee:	31 05       	cpc	r19, r1
    73f0:	41 f4       	brne	.+16     	; 0x7402 <malloc+0xea>
    73f2:	2d b7       	in	r18, 0x3d	; 61
    73f4:	3e b7       	in	r19, 0x3e	; 62
    73f6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    73fa:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    73fe:	24 1b       	sub	r18, r20
    7400:	35 0b       	sbc	r19, r21
    7402:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <__brkval>
    7406:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <__brkval+0x1>
    740a:	e2 17       	cp	r30, r18
    740c:	f3 07       	cpc	r31, r19
    740e:	a0 f4       	brcc	.+40     	; 0x7438 <malloc+0x120>
    7410:	2e 1b       	sub	r18, r30
    7412:	3f 0b       	sbc	r19, r31
    7414:	28 17       	cp	r18, r24
    7416:	39 07       	cpc	r19, r25
    7418:	78 f0       	brcs	.+30     	; 0x7438 <malloc+0x120>
    741a:	ac 01       	movw	r20, r24
    741c:	4e 5f       	subi	r20, 0xFE	; 254
    741e:	5f 4f       	sbci	r21, 0xFF	; 255
    7420:	24 17       	cp	r18, r20
    7422:	35 07       	cpc	r19, r21
    7424:	48 f0       	brcs	.+18     	; 0x7438 <malloc+0x120>
    7426:	4e 0f       	add	r20, r30
    7428:	5f 1f       	adc	r21, r31
    742a:	50 93 35 13 	sts	0x1335, r21	; 0x801335 <__brkval+0x1>
    742e:	40 93 34 13 	sts	0x1334, r20	; 0x801334 <__brkval>
    7432:	81 93       	st	Z+, r24
    7434:	91 93       	st	Z+, r25
    7436:	02 c0       	rjmp	.+4      	; 0x743c <malloc+0x124>
    7438:	e0 e0       	ldi	r30, 0x00	; 0
    743a:	f0 e0       	ldi	r31, 0x00	; 0
    743c:	cf 01       	movw	r24, r30
    743e:	df 91       	pop	r29
    7440:	cf 91       	pop	r28
    7442:	1f 91       	pop	r17
    7444:	0f 91       	pop	r16
    7446:	08 95       	ret

00007448 <free>:
    7448:	cf 93       	push	r28
    744a:	df 93       	push	r29
    744c:	00 97       	sbiw	r24, 0x00	; 0
    744e:	09 f4       	brne	.+2      	; 0x7452 <free+0xa>
    7450:	81 c0       	rjmp	.+258    	; 0x7554 <free+0x10c>
    7452:	fc 01       	movw	r30, r24
    7454:	32 97       	sbiw	r30, 0x02	; 2
    7456:	13 82       	std	Z+3, r1	; 0x03
    7458:	12 82       	std	Z+2, r1	; 0x02
    745a:	a0 91 36 13 	lds	r26, 0x1336	; 0x801336 <__flp>
    745e:	b0 91 37 13 	lds	r27, 0x1337	; 0x801337 <__flp+0x1>
    7462:	10 97       	sbiw	r26, 0x00	; 0
    7464:	81 f4       	brne	.+32     	; 0x7486 <free+0x3e>
    7466:	20 81       	ld	r18, Z
    7468:	31 81       	ldd	r19, Z+1	; 0x01
    746a:	82 0f       	add	r24, r18
    746c:	93 1f       	adc	r25, r19
    746e:	20 91 34 13 	lds	r18, 0x1334	; 0x801334 <__brkval>
    7472:	30 91 35 13 	lds	r19, 0x1335	; 0x801335 <__brkval+0x1>
    7476:	28 17       	cp	r18, r24
    7478:	39 07       	cpc	r19, r25
    747a:	51 f5       	brne	.+84     	; 0x74d0 <free+0x88>
    747c:	f0 93 35 13 	sts	0x1335, r31	; 0x801335 <__brkval+0x1>
    7480:	e0 93 34 13 	sts	0x1334, r30	; 0x801334 <__brkval>
    7484:	67 c0       	rjmp	.+206    	; 0x7554 <free+0x10c>
    7486:	ed 01       	movw	r28, r26
    7488:	20 e0       	ldi	r18, 0x00	; 0
    748a:	30 e0       	ldi	r19, 0x00	; 0
    748c:	ce 17       	cp	r28, r30
    748e:	df 07       	cpc	r29, r31
    7490:	40 f4       	brcc	.+16     	; 0x74a2 <free+0x5a>
    7492:	4a 81       	ldd	r20, Y+2	; 0x02
    7494:	5b 81       	ldd	r21, Y+3	; 0x03
    7496:	9e 01       	movw	r18, r28
    7498:	41 15       	cp	r20, r1
    749a:	51 05       	cpc	r21, r1
    749c:	f1 f0       	breq	.+60     	; 0x74da <free+0x92>
    749e:	ea 01       	movw	r28, r20
    74a0:	f5 cf       	rjmp	.-22     	; 0x748c <free+0x44>
    74a2:	d3 83       	std	Z+3, r29	; 0x03
    74a4:	c2 83       	std	Z+2, r28	; 0x02
    74a6:	40 81       	ld	r20, Z
    74a8:	51 81       	ldd	r21, Z+1	; 0x01
    74aa:	84 0f       	add	r24, r20
    74ac:	95 1f       	adc	r25, r21
    74ae:	c8 17       	cp	r28, r24
    74b0:	d9 07       	cpc	r29, r25
    74b2:	59 f4       	brne	.+22     	; 0x74ca <free+0x82>
    74b4:	88 81       	ld	r24, Y
    74b6:	99 81       	ldd	r25, Y+1	; 0x01
    74b8:	84 0f       	add	r24, r20
    74ba:	95 1f       	adc	r25, r21
    74bc:	02 96       	adiw	r24, 0x02	; 2
    74be:	91 83       	std	Z+1, r25	; 0x01
    74c0:	80 83       	st	Z, r24
    74c2:	8a 81       	ldd	r24, Y+2	; 0x02
    74c4:	9b 81       	ldd	r25, Y+3	; 0x03
    74c6:	93 83       	std	Z+3, r25	; 0x03
    74c8:	82 83       	std	Z+2, r24	; 0x02
    74ca:	21 15       	cp	r18, r1
    74cc:	31 05       	cpc	r19, r1
    74ce:	29 f4       	brne	.+10     	; 0x74da <free+0x92>
    74d0:	f0 93 37 13 	sts	0x1337, r31	; 0x801337 <__flp+0x1>
    74d4:	e0 93 36 13 	sts	0x1336, r30	; 0x801336 <__flp>
    74d8:	3d c0       	rjmp	.+122    	; 0x7554 <free+0x10c>
    74da:	e9 01       	movw	r28, r18
    74dc:	fb 83       	std	Y+3, r31	; 0x03
    74de:	ea 83       	std	Y+2, r30	; 0x02
    74e0:	49 91       	ld	r20, Y+
    74e2:	59 91       	ld	r21, Y+
    74e4:	c4 0f       	add	r28, r20
    74e6:	d5 1f       	adc	r29, r21
    74e8:	ec 17       	cp	r30, r28
    74ea:	fd 07       	cpc	r31, r29
    74ec:	61 f4       	brne	.+24     	; 0x7506 <free+0xbe>
    74ee:	80 81       	ld	r24, Z
    74f0:	91 81       	ldd	r25, Z+1	; 0x01
    74f2:	84 0f       	add	r24, r20
    74f4:	95 1f       	adc	r25, r21
    74f6:	02 96       	adiw	r24, 0x02	; 2
    74f8:	e9 01       	movw	r28, r18
    74fa:	99 83       	std	Y+1, r25	; 0x01
    74fc:	88 83       	st	Y, r24
    74fe:	82 81       	ldd	r24, Z+2	; 0x02
    7500:	93 81       	ldd	r25, Z+3	; 0x03
    7502:	9b 83       	std	Y+3, r25	; 0x03
    7504:	8a 83       	std	Y+2, r24	; 0x02
    7506:	e0 e0       	ldi	r30, 0x00	; 0
    7508:	f0 e0       	ldi	r31, 0x00	; 0
    750a:	12 96       	adiw	r26, 0x02	; 2
    750c:	8d 91       	ld	r24, X+
    750e:	9c 91       	ld	r25, X
    7510:	13 97       	sbiw	r26, 0x03	; 3
    7512:	00 97       	sbiw	r24, 0x00	; 0
    7514:	19 f0       	breq	.+6      	; 0x751c <free+0xd4>
    7516:	fd 01       	movw	r30, r26
    7518:	dc 01       	movw	r26, r24
    751a:	f7 cf       	rjmp	.-18     	; 0x750a <free+0xc2>
    751c:	8d 91       	ld	r24, X+
    751e:	9c 91       	ld	r25, X
    7520:	11 97       	sbiw	r26, 0x01	; 1
    7522:	9d 01       	movw	r18, r26
    7524:	2e 5f       	subi	r18, 0xFE	; 254
    7526:	3f 4f       	sbci	r19, 0xFF	; 255
    7528:	82 0f       	add	r24, r18
    752a:	93 1f       	adc	r25, r19
    752c:	20 91 34 13 	lds	r18, 0x1334	; 0x801334 <__brkval>
    7530:	30 91 35 13 	lds	r19, 0x1335	; 0x801335 <__brkval+0x1>
    7534:	28 17       	cp	r18, r24
    7536:	39 07       	cpc	r19, r25
    7538:	69 f4       	brne	.+26     	; 0x7554 <free+0x10c>
    753a:	30 97       	sbiw	r30, 0x00	; 0
    753c:	29 f4       	brne	.+10     	; 0x7548 <free+0x100>
    753e:	10 92 37 13 	sts	0x1337, r1	; 0x801337 <__flp+0x1>
    7542:	10 92 36 13 	sts	0x1336, r1	; 0x801336 <__flp>
    7546:	02 c0       	rjmp	.+4      	; 0x754c <free+0x104>
    7548:	13 82       	std	Z+3, r1	; 0x03
    754a:	12 82       	std	Z+2, r1	; 0x02
    754c:	b0 93 35 13 	sts	0x1335, r27	; 0x801335 <__brkval+0x1>
    7550:	a0 93 34 13 	sts	0x1334, r26	; 0x801334 <__brkval>
    7554:	df 91       	pop	r29
    7556:	cf 91       	pop	r28
    7558:	08 95       	ret

0000755a <abort>:
    755a:	81 e0       	ldi	r24, 0x01	; 1
    755c:	90 e0       	ldi	r25, 0x00	; 0
    755e:	f8 94       	cli
    7560:	7d c3       	rjmp	.+1786   	; 0x7c5c <_exit>

00007562 <memcpy>:
    7562:	fb 01       	movw	r30, r22
    7564:	dc 01       	movw	r26, r24
    7566:	02 c0       	rjmp	.+4      	; 0x756c <memcpy+0xa>
    7568:	01 90       	ld	r0, Z+
    756a:	0d 92       	st	X+, r0
    756c:	41 50       	subi	r20, 0x01	; 1
    756e:	50 40       	sbci	r21, 0x00	; 0
    7570:	d8 f7       	brcc	.-10     	; 0x7568 <memcpy+0x6>
    7572:	08 95       	ret

00007574 <memset>:
    7574:	dc 01       	movw	r26, r24
    7576:	01 c0       	rjmp	.+2      	; 0x757a <memset+0x6>
    7578:	6d 93       	st	X+, r22
    757a:	41 50       	subi	r20, 0x01	; 1
    757c:	50 40       	sbci	r21, 0x00	; 0
    757e:	e0 f7       	brcc	.-8      	; 0x7578 <memset+0x4>
    7580:	08 95       	ret

00007582 <strcasestr>:
    7582:	fb 01       	movw	r30, r22
    7584:	51 91       	ld	r21, Z+
    7586:	55 23       	and	r21, r21
    7588:	b1 f0       	breq	.+44     	; 0x75b6 <strcasestr+0x34>
    758a:	bf 01       	movw	r22, r30
    758c:	dc 01       	movw	r26, r24
    758e:	05 2e       	mov	r0, r21
    7590:	4d 91       	ld	r20, X+
    7592:	44 23       	and	r20, r20
    7594:	69 f0       	breq	.+26     	; 0x75b0 <strcasestr+0x2e>
    7596:	10 d0       	rcall	.+32     	; 0x75b8 <strcasestr+0x36>
    7598:	d9 f7       	brne	.-10     	; 0x7590 <strcasestr+0xe>
    759a:	cd 01       	movw	r24, r26
    759c:	01 90       	ld	r0, Z+
    759e:	00 20       	and	r0, r0
    75a0:	49 f0       	breq	.+18     	; 0x75b4 <strcasestr+0x32>
    75a2:	4d 91       	ld	r20, X+
    75a4:	41 11       	cpse	r20, r1
    75a6:	08 d0       	rcall	.+16     	; 0x75b8 <strcasestr+0x36>
    75a8:	c9 f3       	breq	.-14     	; 0x759c <strcasestr+0x1a>
    75aa:	fb 01       	movw	r30, r22
    75ac:	41 11       	cpse	r20, r1
    75ae:	ee cf       	rjmp	.-36     	; 0x758c <strcasestr+0xa>
    75b0:	81 e0       	ldi	r24, 0x01	; 1
    75b2:	90 e0       	ldi	r25, 0x00	; 0
    75b4:	01 97       	sbiw	r24, 0x01	; 1
    75b6:	08 95       	ret
    75b8:	40 25       	eor	r20, r0
    75ba:	39 f0       	breq	.+14     	; 0x75ca <strcasestr+0x48>
    75bc:	40 32       	cpi	r20, 0x20	; 32
    75be:	29 f4       	brne	.+10     	; 0x75ca <strcasestr+0x48>
    75c0:	40 29       	or	r20, r0
    75c2:	4b 57       	subi	r20, 0x7B	; 123
    75c4:	46 5e       	subi	r20, 0xE6	; 230
    75c6:	08 f0       	brcs	.+2      	; 0x75ca <strcasestr+0x48>
    75c8:	18 94       	sez
    75ca:	08 95       	ret

000075cc <strcat>:
    75cc:	fb 01       	movw	r30, r22
    75ce:	dc 01       	movw	r26, r24
    75d0:	0d 90       	ld	r0, X+
    75d2:	00 20       	and	r0, r0
    75d4:	e9 f7       	brne	.-6      	; 0x75d0 <strcat+0x4>
    75d6:	11 97       	sbiw	r26, 0x01	; 1
    75d8:	01 90       	ld	r0, Z+
    75da:	0d 92       	st	X+, r0
    75dc:	00 20       	and	r0, r0
    75de:	e1 f7       	brne	.-8      	; 0x75d8 <strcat+0xc>
    75e0:	08 95       	ret

000075e2 <strcpy>:
    75e2:	fb 01       	movw	r30, r22
    75e4:	dc 01       	movw	r26, r24
    75e6:	01 90       	ld	r0, Z+
    75e8:	0d 92       	st	X+, r0
    75ea:	00 20       	and	r0, r0
    75ec:	e1 f7       	brne	.-8      	; 0x75e6 <strcpy+0x4>
    75ee:	08 95       	ret

000075f0 <strncasecmp>:
    75f0:	fb 01       	movw	r30, r22
    75f2:	dc 01       	movw	r26, r24
    75f4:	41 50       	subi	r20, 0x01	; 1
    75f6:	50 40       	sbci	r21, 0x00	; 0
    75f8:	88 f0       	brcs	.+34     	; 0x761c <strncasecmp+0x2c>
    75fa:	8d 91       	ld	r24, X+
    75fc:	81 34       	cpi	r24, 0x41	; 65
    75fe:	1c f0       	brlt	.+6      	; 0x7606 <strncasecmp+0x16>
    7600:	8b 35       	cpi	r24, 0x5B	; 91
    7602:	0c f4       	brge	.+2      	; 0x7606 <strncasecmp+0x16>
    7604:	80 5e       	subi	r24, 0xE0	; 224
    7606:	61 91       	ld	r22, Z+
    7608:	61 34       	cpi	r22, 0x41	; 65
    760a:	1c f0       	brlt	.+6      	; 0x7612 <strncasecmp+0x22>
    760c:	6b 35       	cpi	r22, 0x5B	; 91
    760e:	0c f4       	brge	.+2      	; 0x7612 <strncasecmp+0x22>
    7610:	60 5e       	subi	r22, 0xE0	; 224
    7612:	86 1b       	sub	r24, r22
    7614:	61 11       	cpse	r22, r1
    7616:	71 f3       	breq	.-36     	; 0x75f4 <strncasecmp+0x4>
    7618:	99 0b       	sbc	r25, r25
    761a:	08 95       	ret
    761c:	88 1b       	sub	r24, r24
    761e:	fc cf       	rjmp	.-8      	; 0x7618 <strncasecmp+0x28>

00007620 <printf>:
    7620:	cf 93       	push	r28
    7622:	df 93       	push	r29
    7624:	cd b7       	in	r28, 0x3d	; 61
    7626:	de b7       	in	r29, 0x3e	; 62
    7628:	ae 01       	movw	r20, r28
    762a:	4a 5f       	subi	r20, 0xFA	; 250
    762c:	5f 4f       	sbci	r21, 0xFF	; 255
    762e:	fa 01       	movw	r30, r20
    7630:	61 91       	ld	r22, Z+
    7632:	71 91       	ld	r23, Z+
    7634:	af 01       	movw	r20, r30
    7636:	80 91 3a 13 	lds	r24, 0x133A	; 0x80133a <__iob+0x2>
    763a:	90 91 3b 13 	lds	r25, 0x133B	; 0x80133b <__iob+0x3>
    763e:	61 d0       	rcall	.+194    	; 0x7702 <vfprintf>
    7640:	df 91       	pop	r29
    7642:	cf 91       	pop	r28
    7644:	08 95       	ret

00007646 <puts>:
    7646:	0f 93       	push	r16
    7648:	1f 93       	push	r17
    764a:	cf 93       	push	r28
    764c:	df 93       	push	r29
    764e:	e0 91 3a 13 	lds	r30, 0x133A	; 0x80133a <__iob+0x2>
    7652:	f0 91 3b 13 	lds	r31, 0x133B	; 0x80133b <__iob+0x3>
    7656:	23 81       	ldd	r18, Z+3	; 0x03
    7658:	21 ff       	sbrs	r18, 1
    765a:	1b c0       	rjmp	.+54     	; 0x7692 <puts+0x4c>
    765c:	8c 01       	movw	r16, r24
    765e:	d0 e0       	ldi	r29, 0x00	; 0
    7660:	c0 e0       	ldi	r28, 0x00	; 0
    7662:	f8 01       	movw	r30, r16
    7664:	81 91       	ld	r24, Z+
    7666:	8f 01       	movw	r16, r30
    7668:	60 91 3a 13 	lds	r22, 0x133A	; 0x80133a <__iob+0x2>
    766c:	70 91 3b 13 	lds	r23, 0x133B	; 0x80133b <__iob+0x3>
    7670:	db 01       	movw	r26, r22
    7672:	18 96       	adiw	r26, 0x08	; 8
    7674:	ed 91       	ld	r30, X+
    7676:	fc 91       	ld	r31, X
    7678:	19 97       	sbiw	r26, 0x09	; 9
    767a:	88 23       	and	r24, r24
    767c:	31 f0       	breq	.+12     	; 0x768a <puts+0x44>
    767e:	19 95       	eicall
    7680:	89 2b       	or	r24, r25
    7682:	79 f3       	breq	.-34     	; 0x7662 <puts+0x1c>
    7684:	df ef       	ldi	r29, 0xFF	; 255
    7686:	cf ef       	ldi	r28, 0xFF	; 255
    7688:	ec cf       	rjmp	.-40     	; 0x7662 <puts+0x1c>
    768a:	8a e0       	ldi	r24, 0x0A	; 10
    768c:	19 95       	eicall
    768e:	89 2b       	or	r24, r25
    7690:	19 f0       	breq	.+6      	; 0x7698 <puts+0x52>
    7692:	8f ef       	ldi	r24, 0xFF	; 255
    7694:	9f ef       	ldi	r25, 0xFF	; 255
    7696:	02 c0       	rjmp	.+4      	; 0x769c <puts+0x56>
    7698:	8d 2f       	mov	r24, r29
    769a:	9c 2f       	mov	r25, r28
    769c:	df 91       	pop	r29
    769e:	cf 91       	pop	r28
    76a0:	1f 91       	pop	r17
    76a2:	0f 91       	pop	r16
    76a4:	08 95       	ret

000076a6 <sprintf>:
    76a6:	0f 93       	push	r16
    76a8:	1f 93       	push	r17
    76aa:	cf 93       	push	r28
    76ac:	df 93       	push	r29
    76ae:	cd b7       	in	r28, 0x3d	; 61
    76b0:	de b7       	in	r29, 0x3e	; 62
    76b2:	2e 97       	sbiw	r28, 0x0e	; 14
    76b4:	0f b6       	in	r0, 0x3f	; 63
    76b6:	f8 94       	cli
    76b8:	de bf       	out	0x3e, r29	; 62
    76ba:	0f be       	out	0x3f, r0	; 63
    76bc:	cd bf       	out	0x3d, r28	; 61
    76be:	0e 89       	ldd	r16, Y+22	; 0x16
    76c0:	1f 89       	ldd	r17, Y+23	; 0x17
    76c2:	86 e0       	ldi	r24, 0x06	; 6
    76c4:	8c 83       	std	Y+4, r24	; 0x04
    76c6:	1a 83       	std	Y+2, r17	; 0x02
    76c8:	09 83       	std	Y+1, r16	; 0x01
    76ca:	8f ef       	ldi	r24, 0xFF	; 255
    76cc:	9f e7       	ldi	r25, 0x7F	; 127
    76ce:	9e 83       	std	Y+6, r25	; 0x06
    76d0:	8d 83       	std	Y+5, r24	; 0x05
    76d2:	ae 01       	movw	r20, r28
    76d4:	46 5e       	subi	r20, 0xE6	; 230
    76d6:	5f 4f       	sbci	r21, 0xFF	; 255
    76d8:	68 8d       	ldd	r22, Y+24	; 0x18
    76da:	79 8d       	ldd	r23, Y+25	; 0x19
    76dc:	ce 01       	movw	r24, r28
    76de:	01 96       	adiw	r24, 0x01	; 1
    76e0:	10 d0       	rcall	.+32     	; 0x7702 <vfprintf>
    76e2:	ef 81       	ldd	r30, Y+7	; 0x07
    76e4:	f8 85       	ldd	r31, Y+8	; 0x08
    76e6:	e0 0f       	add	r30, r16
    76e8:	f1 1f       	adc	r31, r17
    76ea:	10 82       	st	Z, r1
    76ec:	2e 96       	adiw	r28, 0x0e	; 14
    76ee:	0f b6       	in	r0, 0x3f	; 63
    76f0:	f8 94       	cli
    76f2:	de bf       	out	0x3e, r29	; 62
    76f4:	0f be       	out	0x3f, r0	; 63
    76f6:	cd bf       	out	0x3d, r28	; 61
    76f8:	df 91       	pop	r29
    76fa:	cf 91       	pop	r28
    76fc:	1f 91       	pop	r17
    76fe:	0f 91       	pop	r16
    7700:	08 95       	ret

00007702 <vfprintf>:
    7702:	2f 92       	push	r2
    7704:	3f 92       	push	r3
    7706:	4f 92       	push	r4
    7708:	5f 92       	push	r5
    770a:	6f 92       	push	r6
    770c:	7f 92       	push	r7
    770e:	8f 92       	push	r8
    7710:	9f 92       	push	r9
    7712:	af 92       	push	r10
    7714:	bf 92       	push	r11
    7716:	cf 92       	push	r12
    7718:	df 92       	push	r13
    771a:	ef 92       	push	r14
    771c:	ff 92       	push	r15
    771e:	0f 93       	push	r16
    7720:	1f 93       	push	r17
    7722:	cf 93       	push	r28
    7724:	df 93       	push	r29
    7726:	cd b7       	in	r28, 0x3d	; 61
    7728:	de b7       	in	r29, 0x3e	; 62
    772a:	2b 97       	sbiw	r28, 0x0b	; 11
    772c:	0f b6       	in	r0, 0x3f	; 63
    772e:	f8 94       	cli
    7730:	de bf       	out	0x3e, r29	; 62
    7732:	0f be       	out	0x3f, r0	; 63
    7734:	cd bf       	out	0x3d, r28	; 61
    7736:	6c 01       	movw	r12, r24
    7738:	7b 01       	movw	r14, r22
    773a:	8a 01       	movw	r16, r20
    773c:	fc 01       	movw	r30, r24
    773e:	17 82       	std	Z+7, r1	; 0x07
    7740:	16 82       	std	Z+6, r1	; 0x06
    7742:	83 81       	ldd	r24, Z+3	; 0x03
    7744:	81 ff       	sbrs	r24, 1
    7746:	bf c1       	rjmp	.+894    	; 0x7ac6 <vfprintf+0x3c4>
    7748:	ce 01       	movw	r24, r28
    774a:	01 96       	adiw	r24, 0x01	; 1
    774c:	3c 01       	movw	r6, r24
    774e:	f6 01       	movw	r30, r12
    7750:	93 81       	ldd	r25, Z+3	; 0x03
    7752:	f7 01       	movw	r30, r14
    7754:	93 fd       	sbrc	r25, 3
    7756:	85 91       	lpm	r24, Z+
    7758:	93 ff       	sbrs	r25, 3
    775a:	81 91       	ld	r24, Z+
    775c:	7f 01       	movw	r14, r30
    775e:	88 23       	and	r24, r24
    7760:	09 f4       	brne	.+2      	; 0x7764 <vfprintf+0x62>
    7762:	ad c1       	rjmp	.+858    	; 0x7abe <vfprintf+0x3bc>
    7764:	85 32       	cpi	r24, 0x25	; 37
    7766:	39 f4       	brne	.+14     	; 0x7776 <vfprintf+0x74>
    7768:	93 fd       	sbrc	r25, 3
    776a:	85 91       	lpm	r24, Z+
    776c:	93 ff       	sbrs	r25, 3
    776e:	81 91       	ld	r24, Z+
    7770:	7f 01       	movw	r14, r30
    7772:	85 32       	cpi	r24, 0x25	; 37
    7774:	21 f4       	brne	.+8      	; 0x777e <vfprintf+0x7c>
    7776:	b6 01       	movw	r22, r12
    7778:	90 e0       	ldi	r25, 0x00	; 0
    777a:	d6 d1       	rcall	.+940    	; 0x7b28 <fputc>
    777c:	e8 cf       	rjmp	.-48     	; 0x774e <vfprintf+0x4c>
    777e:	91 2c       	mov	r9, r1
    7780:	21 2c       	mov	r2, r1
    7782:	31 2c       	mov	r3, r1
    7784:	ff e1       	ldi	r31, 0x1F	; 31
    7786:	f3 15       	cp	r31, r3
    7788:	d8 f0       	brcs	.+54     	; 0x77c0 <vfprintf+0xbe>
    778a:	8b 32       	cpi	r24, 0x2B	; 43
    778c:	79 f0       	breq	.+30     	; 0x77ac <vfprintf+0xaa>
    778e:	38 f4       	brcc	.+14     	; 0x779e <vfprintf+0x9c>
    7790:	80 32       	cpi	r24, 0x20	; 32
    7792:	79 f0       	breq	.+30     	; 0x77b2 <vfprintf+0xb0>
    7794:	83 32       	cpi	r24, 0x23	; 35
    7796:	a1 f4       	brne	.+40     	; 0x77c0 <vfprintf+0xbe>
    7798:	23 2d       	mov	r18, r3
    779a:	20 61       	ori	r18, 0x10	; 16
    779c:	1d c0       	rjmp	.+58     	; 0x77d8 <vfprintf+0xd6>
    779e:	8d 32       	cpi	r24, 0x2D	; 45
    77a0:	61 f0       	breq	.+24     	; 0x77ba <vfprintf+0xb8>
    77a2:	80 33       	cpi	r24, 0x30	; 48
    77a4:	69 f4       	brne	.+26     	; 0x77c0 <vfprintf+0xbe>
    77a6:	23 2d       	mov	r18, r3
    77a8:	21 60       	ori	r18, 0x01	; 1
    77aa:	16 c0       	rjmp	.+44     	; 0x77d8 <vfprintf+0xd6>
    77ac:	83 2d       	mov	r24, r3
    77ae:	82 60       	ori	r24, 0x02	; 2
    77b0:	38 2e       	mov	r3, r24
    77b2:	e3 2d       	mov	r30, r3
    77b4:	e4 60       	ori	r30, 0x04	; 4
    77b6:	3e 2e       	mov	r3, r30
    77b8:	2a c0       	rjmp	.+84     	; 0x780e <vfprintf+0x10c>
    77ba:	f3 2d       	mov	r31, r3
    77bc:	f8 60       	ori	r31, 0x08	; 8
    77be:	1d c0       	rjmp	.+58     	; 0x77fa <vfprintf+0xf8>
    77c0:	37 fc       	sbrc	r3, 7
    77c2:	2d c0       	rjmp	.+90     	; 0x781e <vfprintf+0x11c>
    77c4:	20 ed       	ldi	r18, 0xD0	; 208
    77c6:	28 0f       	add	r18, r24
    77c8:	2a 30       	cpi	r18, 0x0A	; 10
    77ca:	40 f0       	brcs	.+16     	; 0x77dc <vfprintf+0xda>
    77cc:	8e 32       	cpi	r24, 0x2E	; 46
    77ce:	b9 f4       	brne	.+46     	; 0x77fe <vfprintf+0xfc>
    77d0:	36 fc       	sbrc	r3, 6
    77d2:	75 c1       	rjmp	.+746    	; 0x7abe <vfprintf+0x3bc>
    77d4:	23 2d       	mov	r18, r3
    77d6:	20 64       	ori	r18, 0x40	; 64
    77d8:	32 2e       	mov	r3, r18
    77da:	19 c0       	rjmp	.+50     	; 0x780e <vfprintf+0x10c>
    77dc:	36 fe       	sbrs	r3, 6
    77de:	06 c0       	rjmp	.+12     	; 0x77ec <vfprintf+0xea>
    77e0:	8a e0       	ldi	r24, 0x0A	; 10
    77e2:	98 9e       	mul	r9, r24
    77e4:	20 0d       	add	r18, r0
    77e6:	11 24       	eor	r1, r1
    77e8:	92 2e       	mov	r9, r18
    77ea:	11 c0       	rjmp	.+34     	; 0x780e <vfprintf+0x10c>
    77ec:	ea e0       	ldi	r30, 0x0A	; 10
    77ee:	2e 9e       	mul	r2, r30
    77f0:	20 0d       	add	r18, r0
    77f2:	11 24       	eor	r1, r1
    77f4:	22 2e       	mov	r2, r18
    77f6:	f3 2d       	mov	r31, r3
    77f8:	f0 62       	ori	r31, 0x20	; 32
    77fa:	3f 2e       	mov	r3, r31
    77fc:	08 c0       	rjmp	.+16     	; 0x780e <vfprintf+0x10c>
    77fe:	8c 36       	cpi	r24, 0x6C	; 108
    7800:	21 f4       	brne	.+8      	; 0x780a <vfprintf+0x108>
    7802:	83 2d       	mov	r24, r3
    7804:	80 68       	ori	r24, 0x80	; 128
    7806:	38 2e       	mov	r3, r24
    7808:	02 c0       	rjmp	.+4      	; 0x780e <vfprintf+0x10c>
    780a:	88 36       	cpi	r24, 0x68	; 104
    780c:	41 f4       	brne	.+16     	; 0x781e <vfprintf+0x11c>
    780e:	f7 01       	movw	r30, r14
    7810:	93 fd       	sbrc	r25, 3
    7812:	85 91       	lpm	r24, Z+
    7814:	93 ff       	sbrs	r25, 3
    7816:	81 91       	ld	r24, Z+
    7818:	7f 01       	movw	r14, r30
    781a:	81 11       	cpse	r24, r1
    781c:	b3 cf       	rjmp	.-154    	; 0x7784 <vfprintf+0x82>
    781e:	98 2f       	mov	r25, r24
    7820:	9f 7d       	andi	r25, 0xDF	; 223
    7822:	95 54       	subi	r25, 0x45	; 69
    7824:	93 30       	cpi	r25, 0x03	; 3
    7826:	28 f4       	brcc	.+10     	; 0x7832 <vfprintf+0x130>
    7828:	0c 5f       	subi	r16, 0xFC	; 252
    782a:	1f 4f       	sbci	r17, 0xFF	; 255
    782c:	9f e3       	ldi	r25, 0x3F	; 63
    782e:	99 83       	std	Y+1, r25	; 0x01
    7830:	0d c0       	rjmp	.+26     	; 0x784c <vfprintf+0x14a>
    7832:	83 36       	cpi	r24, 0x63	; 99
    7834:	31 f0       	breq	.+12     	; 0x7842 <vfprintf+0x140>
    7836:	83 37       	cpi	r24, 0x73	; 115
    7838:	71 f0       	breq	.+28     	; 0x7856 <vfprintf+0x154>
    783a:	83 35       	cpi	r24, 0x53	; 83
    783c:	09 f0       	breq	.+2      	; 0x7840 <vfprintf+0x13e>
    783e:	55 c0       	rjmp	.+170    	; 0x78ea <vfprintf+0x1e8>
    7840:	20 c0       	rjmp	.+64     	; 0x7882 <vfprintf+0x180>
    7842:	f8 01       	movw	r30, r16
    7844:	80 81       	ld	r24, Z
    7846:	89 83       	std	Y+1, r24	; 0x01
    7848:	0e 5f       	subi	r16, 0xFE	; 254
    784a:	1f 4f       	sbci	r17, 0xFF	; 255
    784c:	88 24       	eor	r8, r8
    784e:	83 94       	inc	r8
    7850:	91 2c       	mov	r9, r1
    7852:	53 01       	movw	r10, r6
    7854:	12 c0       	rjmp	.+36     	; 0x787a <vfprintf+0x178>
    7856:	28 01       	movw	r4, r16
    7858:	f2 e0       	ldi	r31, 0x02	; 2
    785a:	4f 0e       	add	r4, r31
    785c:	51 1c       	adc	r5, r1
    785e:	f8 01       	movw	r30, r16
    7860:	a0 80       	ld	r10, Z
    7862:	b1 80       	ldd	r11, Z+1	; 0x01
    7864:	36 fe       	sbrs	r3, 6
    7866:	03 c0       	rjmp	.+6      	; 0x786e <vfprintf+0x16c>
    7868:	69 2d       	mov	r22, r9
    786a:	70 e0       	ldi	r23, 0x00	; 0
    786c:	02 c0       	rjmp	.+4      	; 0x7872 <vfprintf+0x170>
    786e:	6f ef       	ldi	r22, 0xFF	; 255
    7870:	7f ef       	ldi	r23, 0xFF	; 255
    7872:	c5 01       	movw	r24, r10
    7874:	4e d1       	rcall	.+668    	; 0x7b12 <strnlen>
    7876:	4c 01       	movw	r8, r24
    7878:	82 01       	movw	r16, r4
    787a:	f3 2d       	mov	r31, r3
    787c:	ff 77       	andi	r31, 0x7F	; 127
    787e:	3f 2e       	mov	r3, r31
    7880:	15 c0       	rjmp	.+42     	; 0x78ac <vfprintf+0x1aa>
    7882:	28 01       	movw	r4, r16
    7884:	22 e0       	ldi	r18, 0x02	; 2
    7886:	42 0e       	add	r4, r18
    7888:	51 1c       	adc	r5, r1
    788a:	f8 01       	movw	r30, r16
    788c:	a0 80       	ld	r10, Z
    788e:	b1 80       	ldd	r11, Z+1	; 0x01
    7890:	36 fe       	sbrs	r3, 6
    7892:	03 c0       	rjmp	.+6      	; 0x789a <vfprintf+0x198>
    7894:	69 2d       	mov	r22, r9
    7896:	70 e0       	ldi	r23, 0x00	; 0
    7898:	02 c0       	rjmp	.+4      	; 0x789e <vfprintf+0x19c>
    789a:	6f ef       	ldi	r22, 0xFF	; 255
    789c:	7f ef       	ldi	r23, 0xFF	; 255
    789e:	c5 01       	movw	r24, r10
    78a0:	2d d1       	rcall	.+602    	; 0x7afc <strnlen_P>
    78a2:	4c 01       	movw	r8, r24
    78a4:	f3 2d       	mov	r31, r3
    78a6:	f0 68       	ori	r31, 0x80	; 128
    78a8:	3f 2e       	mov	r3, r31
    78aa:	82 01       	movw	r16, r4
    78ac:	33 fc       	sbrc	r3, 3
    78ae:	19 c0       	rjmp	.+50     	; 0x78e2 <vfprintf+0x1e0>
    78b0:	82 2d       	mov	r24, r2
    78b2:	90 e0       	ldi	r25, 0x00	; 0
    78b4:	88 16       	cp	r8, r24
    78b6:	99 06       	cpc	r9, r25
    78b8:	a0 f4       	brcc	.+40     	; 0x78e2 <vfprintf+0x1e0>
    78ba:	b6 01       	movw	r22, r12
    78bc:	80 e2       	ldi	r24, 0x20	; 32
    78be:	90 e0       	ldi	r25, 0x00	; 0
    78c0:	33 d1       	rcall	.+614    	; 0x7b28 <fputc>
    78c2:	2a 94       	dec	r2
    78c4:	f5 cf       	rjmp	.-22     	; 0x78b0 <vfprintf+0x1ae>
    78c6:	f5 01       	movw	r30, r10
    78c8:	37 fc       	sbrc	r3, 7
    78ca:	85 91       	lpm	r24, Z+
    78cc:	37 fe       	sbrs	r3, 7
    78ce:	81 91       	ld	r24, Z+
    78d0:	5f 01       	movw	r10, r30
    78d2:	b6 01       	movw	r22, r12
    78d4:	90 e0       	ldi	r25, 0x00	; 0
    78d6:	28 d1       	rcall	.+592    	; 0x7b28 <fputc>
    78d8:	21 10       	cpse	r2, r1
    78da:	2a 94       	dec	r2
    78dc:	21 e0       	ldi	r18, 0x01	; 1
    78de:	82 1a       	sub	r8, r18
    78e0:	91 08       	sbc	r9, r1
    78e2:	81 14       	cp	r8, r1
    78e4:	91 04       	cpc	r9, r1
    78e6:	79 f7       	brne	.-34     	; 0x78c6 <vfprintf+0x1c4>
    78e8:	e1 c0       	rjmp	.+450    	; 0x7aac <vfprintf+0x3aa>
    78ea:	84 36       	cpi	r24, 0x64	; 100
    78ec:	11 f0       	breq	.+4      	; 0x78f2 <vfprintf+0x1f0>
    78ee:	89 36       	cpi	r24, 0x69	; 105
    78f0:	39 f5       	brne	.+78     	; 0x7940 <vfprintf+0x23e>
    78f2:	f8 01       	movw	r30, r16
    78f4:	37 fe       	sbrs	r3, 7
    78f6:	07 c0       	rjmp	.+14     	; 0x7906 <vfprintf+0x204>
    78f8:	60 81       	ld	r22, Z
    78fa:	71 81       	ldd	r23, Z+1	; 0x01
    78fc:	82 81       	ldd	r24, Z+2	; 0x02
    78fe:	93 81       	ldd	r25, Z+3	; 0x03
    7900:	0c 5f       	subi	r16, 0xFC	; 252
    7902:	1f 4f       	sbci	r17, 0xFF	; 255
    7904:	08 c0       	rjmp	.+16     	; 0x7916 <vfprintf+0x214>
    7906:	60 81       	ld	r22, Z
    7908:	71 81       	ldd	r23, Z+1	; 0x01
    790a:	07 2e       	mov	r0, r23
    790c:	00 0c       	add	r0, r0
    790e:	88 0b       	sbc	r24, r24
    7910:	99 0b       	sbc	r25, r25
    7912:	0e 5f       	subi	r16, 0xFE	; 254
    7914:	1f 4f       	sbci	r17, 0xFF	; 255
    7916:	f3 2d       	mov	r31, r3
    7918:	ff 76       	andi	r31, 0x6F	; 111
    791a:	3f 2e       	mov	r3, r31
    791c:	97 ff       	sbrs	r25, 7
    791e:	09 c0       	rjmp	.+18     	; 0x7932 <vfprintf+0x230>
    7920:	90 95       	com	r25
    7922:	80 95       	com	r24
    7924:	70 95       	com	r23
    7926:	61 95       	neg	r22
    7928:	7f 4f       	sbci	r23, 0xFF	; 255
    792a:	8f 4f       	sbci	r24, 0xFF	; 255
    792c:	9f 4f       	sbci	r25, 0xFF	; 255
    792e:	f0 68       	ori	r31, 0x80	; 128
    7930:	3f 2e       	mov	r3, r31
    7932:	2a e0       	ldi	r18, 0x0A	; 10
    7934:	30 e0       	ldi	r19, 0x00	; 0
    7936:	a3 01       	movw	r20, r6
    7938:	33 d1       	rcall	.+614    	; 0x7ba0 <__ultoa_invert>
    793a:	88 2e       	mov	r8, r24
    793c:	86 18       	sub	r8, r6
    793e:	44 c0       	rjmp	.+136    	; 0x79c8 <vfprintf+0x2c6>
    7940:	85 37       	cpi	r24, 0x75	; 117
    7942:	31 f4       	brne	.+12     	; 0x7950 <vfprintf+0x24e>
    7944:	23 2d       	mov	r18, r3
    7946:	2f 7e       	andi	r18, 0xEF	; 239
    7948:	b2 2e       	mov	r11, r18
    794a:	2a e0       	ldi	r18, 0x0A	; 10
    794c:	30 e0       	ldi	r19, 0x00	; 0
    794e:	25 c0       	rjmp	.+74     	; 0x799a <vfprintf+0x298>
    7950:	93 2d       	mov	r25, r3
    7952:	99 7f       	andi	r25, 0xF9	; 249
    7954:	b9 2e       	mov	r11, r25
    7956:	8f 36       	cpi	r24, 0x6F	; 111
    7958:	c1 f0       	breq	.+48     	; 0x798a <vfprintf+0x288>
    795a:	18 f4       	brcc	.+6      	; 0x7962 <vfprintf+0x260>
    795c:	88 35       	cpi	r24, 0x58	; 88
    795e:	79 f0       	breq	.+30     	; 0x797e <vfprintf+0x27c>
    7960:	ae c0       	rjmp	.+348    	; 0x7abe <vfprintf+0x3bc>
    7962:	80 37       	cpi	r24, 0x70	; 112
    7964:	19 f0       	breq	.+6      	; 0x796c <vfprintf+0x26a>
    7966:	88 37       	cpi	r24, 0x78	; 120
    7968:	21 f0       	breq	.+8      	; 0x7972 <vfprintf+0x270>
    796a:	a9 c0       	rjmp	.+338    	; 0x7abe <vfprintf+0x3bc>
    796c:	e9 2f       	mov	r30, r25
    796e:	e0 61       	ori	r30, 0x10	; 16
    7970:	be 2e       	mov	r11, r30
    7972:	b4 fe       	sbrs	r11, 4
    7974:	0d c0       	rjmp	.+26     	; 0x7990 <vfprintf+0x28e>
    7976:	fb 2d       	mov	r31, r11
    7978:	f4 60       	ori	r31, 0x04	; 4
    797a:	bf 2e       	mov	r11, r31
    797c:	09 c0       	rjmp	.+18     	; 0x7990 <vfprintf+0x28e>
    797e:	34 fe       	sbrs	r3, 4
    7980:	0a c0       	rjmp	.+20     	; 0x7996 <vfprintf+0x294>
    7982:	29 2f       	mov	r18, r25
    7984:	26 60       	ori	r18, 0x06	; 6
    7986:	b2 2e       	mov	r11, r18
    7988:	06 c0       	rjmp	.+12     	; 0x7996 <vfprintf+0x294>
    798a:	28 e0       	ldi	r18, 0x08	; 8
    798c:	30 e0       	ldi	r19, 0x00	; 0
    798e:	05 c0       	rjmp	.+10     	; 0x799a <vfprintf+0x298>
    7990:	20 e1       	ldi	r18, 0x10	; 16
    7992:	30 e0       	ldi	r19, 0x00	; 0
    7994:	02 c0       	rjmp	.+4      	; 0x799a <vfprintf+0x298>
    7996:	20 e1       	ldi	r18, 0x10	; 16
    7998:	32 e0       	ldi	r19, 0x02	; 2
    799a:	f8 01       	movw	r30, r16
    799c:	b7 fe       	sbrs	r11, 7
    799e:	07 c0       	rjmp	.+14     	; 0x79ae <vfprintf+0x2ac>
    79a0:	60 81       	ld	r22, Z
    79a2:	71 81       	ldd	r23, Z+1	; 0x01
    79a4:	82 81       	ldd	r24, Z+2	; 0x02
    79a6:	93 81       	ldd	r25, Z+3	; 0x03
    79a8:	0c 5f       	subi	r16, 0xFC	; 252
    79aa:	1f 4f       	sbci	r17, 0xFF	; 255
    79ac:	06 c0       	rjmp	.+12     	; 0x79ba <vfprintf+0x2b8>
    79ae:	60 81       	ld	r22, Z
    79b0:	71 81       	ldd	r23, Z+1	; 0x01
    79b2:	80 e0       	ldi	r24, 0x00	; 0
    79b4:	90 e0       	ldi	r25, 0x00	; 0
    79b6:	0e 5f       	subi	r16, 0xFE	; 254
    79b8:	1f 4f       	sbci	r17, 0xFF	; 255
    79ba:	a3 01       	movw	r20, r6
    79bc:	f1 d0       	rcall	.+482    	; 0x7ba0 <__ultoa_invert>
    79be:	88 2e       	mov	r8, r24
    79c0:	86 18       	sub	r8, r6
    79c2:	fb 2d       	mov	r31, r11
    79c4:	ff 77       	andi	r31, 0x7F	; 127
    79c6:	3f 2e       	mov	r3, r31
    79c8:	36 fe       	sbrs	r3, 6
    79ca:	0d c0       	rjmp	.+26     	; 0x79e6 <vfprintf+0x2e4>
    79cc:	23 2d       	mov	r18, r3
    79ce:	2e 7f       	andi	r18, 0xFE	; 254
    79d0:	a2 2e       	mov	r10, r18
    79d2:	89 14       	cp	r8, r9
    79d4:	58 f4       	brcc	.+22     	; 0x79ec <vfprintf+0x2ea>
    79d6:	34 fe       	sbrs	r3, 4
    79d8:	0b c0       	rjmp	.+22     	; 0x79f0 <vfprintf+0x2ee>
    79da:	32 fc       	sbrc	r3, 2
    79dc:	09 c0       	rjmp	.+18     	; 0x79f0 <vfprintf+0x2ee>
    79de:	83 2d       	mov	r24, r3
    79e0:	8e 7e       	andi	r24, 0xEE	; 238
    79e2:	a8 2e       	mov	r10, r24
    79e4:	05 c0       	rjmp	.+10     	; 0x79f0 <vfprintf+0x2ee>
    79e6:	b8 2c       	mov	r11, r8
    79e8:	a3 2c       	mov	r10, r3
    79ea:	03 c0       	rjmp	.+6      	; 0x79f2 <vfprintf+0x2f0>
    79ec:	b8 2c       	mov	r11, r8
    79ee:	01 c0       	rjmp	.+2      	; 0x79f2 <vfprintf+0x2f0>
    79f0:	b9 2c       	mov	r11, r9
    79f2:	a4 fe       	sbrs	r10, 4
    79f4:	0f c0       	rjmp	.+30     	; 0x7a14 <vfprintf+0x312>
    79f6:	fe 01       	movw	r30, r28
    79f8:	e8 0d       	add	r30, r8
    79fa:	f1 1d       	adc	r31, r1
    79fc:	80 81       	ld	r24, Z
    79fe:	80 33       	cpi	r24, 0x30	; 48
    7a00:	21 f4       	brne	.+8      	; 0x7a0a <vfprintf+0x308>
    7a02:	9a 2d       	mov	r25, r10
    7a04:	99 7e       	andi	r25, 0xE9	; 233
    7a06:	a9 2e       	mov	r10, r25
    7a08:	09 c0       	rjmp	.+18     	; 0x7a1c <vfprintf+0x31a>
    7a0a:	a2 fe       	sbrs	r10, 2
    7a0c:	06 c0       	rjmp	.+12     	; 0x7a1a <vfprintf+0x318>
    7a0e:	b3 94       	inc	r11
    7a10:	b3 94       	inc	r11
    7a12:	04 c0       	rjmp	.+8      	; 0x7a1c <vfprintf+0x31a>
    7a14:	8a 2d       	mov	r24, r10
    7a16:	86 78       	andi	r24, 0x86	; 134
    7a18:	09 f0       	breq	.+2      	; 0x7a1c <vfprintf+0x31a>
    7a1a:	b3 94       	inc	r11
    7a1c:	a3 fc       	sbrc	r10, 3
    7a1e:	10 c0       	rjmp	.+32     	; 0x7a40 <vfprintf+0x33e>
    7a20:	a0 fe       	sbrs	r10, 0
    7a22:	06 c0       	rjmp	.+12     	; 0x7a30 <vfprintf+0x32e>
    7a24:	b2 14       	cp	r11, r2
    7a26:	80 f4       	brcc	.+32     	; 0x7a48 <vfprintf+0x346>
    7a28:	28 0c       	add	r2, r8
    7a2a:	92 2c       	mov	r9, r2
    7a2c:	9b 18       	sub	r9, r11
    7a2e:	0d c0       	rjmp	.+26     	; 0x7a4a <vfprintf+0x348>
    7a30:	b2 14       	cp	r11, r2
    7a32:	58 f4       	brcc	.+22     	; 0x7a4a <vfprintf+0x348>
    7a34:	b6 01       	movw	r22, r12
    7a36:	80 e2       	ldi	r24, 0x20	; 32
    7a38:	90 e0       	ldi	r25, 0x00	; 0
    7a3a:	76 d0       	rcall	.+236    	; 0x7b28 <fputc>
    7a3c:	b3 94       	inc	r11
    7a3e:	f8 cf       	rjmp	.-16     	; 0x7a30 <vfprintf+0x32e>
    7a40:	b2 14       	cp	r11, r2
    7a42:	18 f4       	brcc	.+6      	; 0x7a4a <vfprintf+0x348>
    7a44:	2b 18       	sub	r2, r11
    7a46:	02 c0       	rjmp	.+4      	; 0x7a4c <vfprintf+0x34a>
    7a48:	98 2c       	mov	r9, r8
    7a4a:	21 2c       	mov	r2, r1
    7a4c:	a4 fe       	sbrs	r10, 4
    7a4e:	0f c0       	rjmp	.+30     	; 0x7a6e <vfprintf+0x36c>
    7a50:	b6 01       	movw	r22, r12
    7a52:	80 e3       	ldi	r24, 0x30	; 48
    7a54:	90 e0       	ldi	r25, 0x00	; 0
    7a56:	68 d0       	rcall	.+208    	; 0x7b28 <fputc>
    7a58:	a2 fe       	sbrs	r10, 2
    7a5a:	16 c0       	rjmp	.+44     	; 0x7a88 <vfprintf+0x386>
    7a5c:	a1 fc       	sbrc	r10, 1
    7a5e:	03 c0       	rjmp	.+6      	; 0x7a66 <vfprintf+0x364>
    7a60:	88 e7       	ldi	r24, 0x78	; 120
    7a62:	90 e0       	ldi	r25, 0x00	; 0
    7a64:	02 c0       	rjmp	.+4      	; 0x7a6a <vfprintf+0x368>
    7a66:	88 e5       	ldi	r24, 0x58	; 88
    7a68:	90 e0       	ldi	r25, 0x00	; 0
    7a6a:	b6 01       	movw	r22, r12
    7a6c:	0c c0       	rjmp	.+24     	; 0x7a86 <vfprintf+0x384>
    7a6e:	8a 2d       	mov	r24, r10
    7a70:	86 78       	andi	r24, 0x86	; 134
    7a72:	51 f0       	breq	.+20     	; 0x7a88 <vfprintf+0x386>
    7a74:	a1 fe       	sbrs	r10, 1
    7a76:	02 c0       	rjmp	.+4      	; 0x7a7c <vfprintf+0x37a>
    7a78:	8b e2       	ldi	r24, 0x2B	; 43
    7a7a:	01 c0       	rjmp	.+2      	; 0x7a7e <vfprintf+0x37c>
    7a7c:	80 e2       	ldi	r24, 0x20	; 32
    7a7e:	a7 fc       	sbrc	r10, 7
    7a80:	8d e2       	ldi	r24, 0x2D	; 45
    7a82:	b6 01       	movw	r22, r12
    7a84:	90 e0       	ldi	r25, 0x00	; 0
    7a86:	50 d0       	rcall	.+160    	; 0x7b28 <fputc>
    7a88:	89 14       	cp	r8, r9
    7a8a:	30 f4       	brcc	.+12     	; 0x7a98 <vfprintf+0x396>
    7a8c:	b6 01       	movw	r22, r12
    7a8e:	80 e3       	ldi	r24, 0x30	; 48
    7a90:	90 e0       	ldi	r25, 0x00	; 0
    7a92:	4a d0       	rcall	.+148    	; 0x7b28 <fputc>
    7a94:	9a 94       	dec	r9
    7a96:	f8 cf       	rjmp	.-16     	; 0x7a88 <vfprintf+0x386>
    7a98:	8a 94       	dec	r8
    7a9a:	f3 01       	movw	r30, r6
    7a9c:	e8 0d       	add	r30, r8
    7a9e:	f1 1d       	adc	r31, r1
    7aa0:	80 81       	ld	r24, Z
    7aa2:	b6 01       	movw	r22, r12
    7aa4:	90 e0       	ldi	r25, 0x00	; 0
    7aa6:	40 d0       	rcall	.+128    	; 0x7b28 <fputc>
    7aa8:	81 10       	cpse	r8, r1
    7aaa:	f6 cf       	rjmp	.-20     	; 0x7a98 <vfprintf+0x396>
    7aac:	22 20       	and	r2, r2
    7aae:	09 f4       	brne	.+2      	; 0x7ab2 <vfprintf+0x3b0>
    7ab0:	4e ce       	rjmp	.-868    	; 0x774e <vfprintf+0x4c>
    7ab2:	b6 01       	movw	r22, r12
    7ab4:	80 e2       	ldi	r24, 0x20	; 32
    7ab6:	90 e0       	ldi	r25, 0x00	; 0
    7ab8:	37 d0       	rcall	.+110    	; 0x7b28 <fputc>
    7aba:	2a 94       	dec	r2
    7abc:	f7 cf       	rjmp	.-18     	; 0x7aac <vfprintf+0x3aa>
    7abe:	f6 01       	movw	r30, r12
    7ac0:	86 81       	ldd	r24, Z+6	; 0x06
    7ac2:	97 81       	ldd	r25, Z+7	; 0x07
    7ac4:	02 c0       	rjmp	.+4      	; 0x7aca <vfprintf+0x3c8>
    7ac6:	8f ef       	ldi	r24, 0xFF	; 255
    7ac8:	9f ef       	ldi	r25, 0xFF	; 255
    7aca:	2b 96       	adiw	r28, 0x0b	; 11
    7acc:	0f b6       	in	r0, 0x3f	; 63
    7ace:	f8 94       	cli
    7ad0:	de bf       	out	0x3e, r29	; 62
    7ad2:	0f be       	out	0x3f, r0	; 63
    7ad4:	cd bf       	out	0x3d, r28	; 61
    7ad6:	df 91       	pop	r29
    7ad8:	cf 91       	pop	r28
    7ada:	1f 91       	pop	r17
    7adc:	0f 91       	pop	r16
    7ade:	ff 90       	pop	r15
    7ae0:	ef 90       	pop	r14
    7ae2:	df 90       	pop	r13
    7ae4:	cf 90       	pop	r12
    7ae6:	bf 90       	pop	r11
    7ae8:	af 90       	pop	r10
    7aea:	9f 90       	pop	r9
    7aec:	8f 90       	pop	r8
    7aee:	7f 90       	pop	r7
    7af0:	6f 90       	pop	r6
    7af2:	5f 90       	pop	r5
    7af4:	4f 90       	pop	r4
    7af6:	3f 90       	pop	r3
    7af8:	2f 90       	pop	r2
    7afa:	08 95       	ret

00007afc <strnlen_P>:
    7afc:	fc 01       	movw	r30, r24
    7afe:	05 90       	lpm	r0, Z+
    7b00:	61 50       	subi	r22, 0x01	; 1
    7b02:	70 40       	sbci	r23, 0x00	; 0
    7b04:	01 10       	cpse	r0, r1
    7b06:	d8 f7       	brcc	.-10     	; 0x7afe <strnlen_P+0x2>
    7b08:	80 95       	com	r24
    7b0a:	90 95       	com	r25
    7b0c:	8e 0f       	add	r24, r30
    7b0e:	9f 1f       	adc	r25, r31
    7b10:	08 95       	ret

00007b12 <strnlen>:
    7b12:	fc 01       	movw	r30, r24
    7b14:	61 50       	subi	r22, 0x01	; 1
    7b16:	70 40       	sbci	r23, 0x00	; 0
    7b18:	01 90       	ld	r0, Z+
    7b1a:	01 10       	cpse	r0, r1
    7b1c:	d8 f7       	brcc	.-10     	; 0x7b14 <strnlen+0x2>
    7b1e:	80 95       	com	r24
    7b20:	90 95       	com	r25
    7b22:	8e 0f       	add	r24, r30
    7b24:	9f 1f       	adc	r25, r31
    7b26:	08 95       	ret

00007b28 <fputc>:
    7b28:	0f 93       	push	r16
    7b2a:	1f 93       	push	r17
    7b2c:	cf 93       	push	r28
    7b2e:	df 93       	push	r29
    7b30:	fb 01       	movw	r30, r22
    7b32:	23 81       	ldd	r18, Z+3	; 0x03
    7b34:	21 fd       	sbrc	r18, 1
    7b36:	03 c0       	rjmp	.+6      	; 0x7b3e <fputc+0x16>
    7b38:	8f ef       	ldi	r24, 0xFF	; 255
    7b3a:	9f ef       	ldi	r25, 0xFF	; 255
    7b3c:	2c c0       	rjmp	.+88     	; 0x7b96 <fputc+0x6e>
    7b3e:	22 ff       	sbrs	r18, 2
    7b40:	16 c0       	rjmp	.+44     	; 0x7b6e <fputc+0x46>
    7b42:	46 81       	ldd	r20, Z+6	; 0x06
    7b44:	57 81       	ldd	r21, Z+7	; 0x07
    7b46:	24 81       	ldd	r18, Z+4	; 0x04
    7b48:	35 81       	ldd	r19, Z+5	; 0x05
    7b4a:	42 17       	cp	r20, r18
    7b4c:	53 07       	cpc	r21, r19
    7b4e:	44 f4       	brge	.+16     	; 0x7b60 <fputc+0x38>
    7b50:	a0 81       	ld	r26, Z
    7b52:	b1 81       	ldd	r27, Z+1	; 0x01
    7b54:	9d 01       	movw	r18, r26
    7b56:	2f 5f       	subi	r18, 0xFF	; 255
    7b58:	3f 4f       	sbci	r19, 0xFF	; 255
    7b5a:	31 83       	std	Z+1, r19	; 0x01
    7b5c:	20 83       	st	Z, r18
    7b5e:	8c 93       	st	X, r24
    7b60:	26 81       	ldd	r18, Z+6	; 0x06
    7b62:	37 81       	ldd	r19, Z+7	; 0x07
    7b64:	2f 5f       	subi	r18, 0xFF	; 255
    7b66:	3f 4f       	sbci	r19, 0xFF	; 255
    7b68:	37 83       	std	Z+7, r19	; 0x07
    7b6a:	26 83       	std	Z+6, r18	; 0x06
    7b6c:	14 c0       	rjmp	.+40     	; 0x7b96 <fputc+0x6e>
    7b6e:	8b 01       	movw	r16, r22
    7b70:	ec 01       	movw	r28, r24
    7b72:	fb 01       	movw	r30, r22
    7b74:	00 84       	ldd	r0, Z+8	; 0x08
    7b76:	f1 85       	ldd	r31, Z+9	; 0x09
    7b78:	e0 2d       	mov	r30, r0
    7b7a:	19 95       	eicall
    7b7c:	89 2b       	or	r24, r25
    7b7e:	e1 f6       	brne	.-72     	; 0x7b38 <fputc+0x10>
    7b80:	d8 01       	movw	r26, r16
    7b82:	16 96       	adiw	r26, 0x06	; 6
    7b84:	8d 91       	ld	r24, X+
    7b86:	9c 91       	ld	r25, X
    7b88:	17 97       	sbiw	r26, 0x07	; 7
    7b8a:	01 96       	adiw	r24, 0x01	; 1
    7b8c:	17 96       	adiw	r26, 0x07	; 7
    7b8e:	9c 93       	st	X, r25
    7b90:	8e 93       	st	-X, r24
    7b92:	16 97       	sbiw	r26, 0x06	; 6
    7b94:	ce 01       	movw	r24, r28
    7b96:	df 91       	pop	r29
    7b98:	cf 91       	pop	r28
    7b9a:	1f 91       	pop	r17
    7b9c:	0f 91       	pop	r16
    7b9e:	08 95       	ret

00007ba0 <__ultoa_invert>:
    7ba0:	fa 01       	movw	r30, r20
    7ba2:	aa 27       	eor	r26, r26
    7ba4:	28 30       	cpi	r18, 0x08	; 8
    7ba6:	51 f1       	breq	.+84     	; 0x7bfc <__ultoa_invert+0x5c>
    7ba8:	20 31       	cpi	r18, 0x10	; 16
    7baa:	81 f1       	breq	.+96     	; 0x7c0c <__ultoa_invert+0x6c>
    7bac:	e8 94       	clt
    7bae:	6f 93       	push	r22
    7bb0:	6e 7f       	andi	r22, 0xFE	; 254
    7bb2:	6e 5f       	subi	r22, 0xFE	; 254
    7bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    7bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    7bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bba:	af 4f       	sbci	r26, 0xFF	; 255
    7bbc:	b1 e0       	ldi	r27, 0x01	; 1
    7bbe:	3e d0       	rcall	.+124    	; 0x7c3c <__ultoa_invert+0x9c>
    7bc0:	b4 e0       	ldi	r27, 0x04	; 4
    7bc2:	3c d0       	rcall	.+120    	; 0x7c3c <__ultoa_invert+0x9c>
    7bc4:	67 0f       	add	r22, r23
    7bc6:	78 1f       	adc	r23, r24
    7bc8:	89 1f       	adc	r24, r25
    7bca:	9a 1f       	adc	r25, r26
    7bcc:	a1 1d       	adc	r26, r1
    7bce:	68 0f       	add	r22, r24
    7bd0:	79 1f       	adc	r23, r25
    7bd2:	8a 1f       	adc	r24, r26
    7bd4:	91 1d       	adc	r25, r1
    7bd6:	a1 1d       	adc	r26, r1
    7bd8:	6a 0f       	add	r22, r26
    7bda:	71 1d       	adc	r23, r1
    7bdc:	81 1d       	adc	r24, r1
    7bde:	91 1d       	adc	r25, r1
    7be0:	a1 1d       	adc	r26, r1
    7be2:	20 d0       	rcall	.+64     	; 0x7c24 <__ultoa_invert+0x84>
    7be4:	09 f4       	brne	.+2      	; 0x7be8 <__ultoa_invert+0x48>
    7be6:	68 94       	set
    7be8:	3f 91       	pop	r19
    7bea:	2a e0       	ldi	r18, 0x0A	; 10
    7bec:	26 9f       	mul	r18, r22
    7bee:	11 24       	eor	r1, r1
    7bf0:	30 19       	sub	r19, r0
    7bf2:	30 5d       	subi	r19, 0xD0	; 208
    7bf4:	31 93       	st	Z+, r19
    7bf6:	de f6       	brtc	.-74     	; 0x7bae <__ultoa_invert+0xe>
    7bf8:	cf 01       	movw	r24, r30
    7bfa:	08 95       	ret
    7bfc:	46 2f       	mov	r20, r22
    7bfe:	47 70       	andi	r20, 0x07	; 7
    7c00:	40 5d       	subi	r20, 0xD0	; 208
    7c02:	41 93       	st	Z+, r20
    7c04:	b3 e0       	ldi	r27, 0x03	; 3
    7c06:	0f d0       	rcall	.+30     	; 0x7c26 <__ultoa_invert+0x86>
    7c08:	c9 f7       	brne	.-14     	; 0x7bfc <__ultoa_invert+0x5c>
    7c0a:	f6 cf       	rjmp	.-20     	; 0x7bf8 <__ultoa_invert+0x58>
    7c0c:	46 2f       	mov	r20, r22
    7c0e:	4f 70       	andi	r20, 0x0F	; 15
    7c10:	40 5d       	subi	r20, 0xD0	; 208
    7c12:	4a 33       	cpi	r20, 0x3A	; 58
    7c14:	18 f0       	brcs	.+6      	; 0x7c1c <__ultoa_invert+0x7c>
    7c16:	49 5d       	subi	r20, 0xD9	; 217
    7c18:	31 fd       	sbrc	r19, 1
    7c1a:	40 52       	subi	r20, 0x20	; 32
    7c1c:	41 93       	st	Z+, r20
    7c1e:	02 d0       	rcall	.+4      	; 0x7c24 <__ultoa_invert+0x84>
    7c20:	a9 f7       	brne	.-22     	; 0x7c0c <__ultoa_invert+0x6c>
    7c22:	ea cf       	rjmp	.-44     	; 0x7bf8 <__ultoa_invert+0x58>
    7c24:	b4 e0       	ldi	r27, 0x04	; 4
    7c26:	a6 95       	lsr	r26
    7c28:	97 95       	ror	r25
    7c2a:	87 95       	ror	r24
    7c2c:	77 95       	ror	r23
    7c2e:	67 95       	ror	r22
    7c30:	ba 95       	dec	r27
    7c32:	c9 f7       	brne	.-14     	; 0x7c26 <__ultoa_invert+0x86>
    7c34:	00 97       	sbiw	r24, 0x00	; 0
    7c36:	61 05       	cpc	r22, r1
    7c38:	71 05       	cpc	r23, r1
    7c3a:	08 95       	ret
    7c3c:	9b 01       	movw	r18, r22
    7c3e:	ac 01       	movw	r20, r24
    7c40:	0a 2e       	mov	r0, r26
    7c42:	06 94       	lsr	r0
    7c44:	57 95       	ror	r21
    7c46:	47 95       	ror	r20
    7c48:	37 95       	ror	r19
    7c4a:	27 95       	ror	r18
    7c4c:	ba 95       	dec	r27
    7c4e:	c9 f7       	brne	.-14     	; 0x7c42 <__ultoa_invert+0xa2>
    7c50:	62 0f       	add	r22, r18
    7c52:	73 1f       	adc	r23, r19
    7c54:	84 1f       	adc	r24, r20
    7c56:	95 1f       	adc	r25, r21
    7c58:	a0 1d       	adc	r26, r0
    7c5a:	08 95       	ret

00007c5c <_exit>:
    7c5c:	f8 94       	cli

00007c5e <__stop_program>:
    7c5e:	ff cf       	rjmp	.-2      	; 0x7c5e <__stop_program>
