
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000486  00800200  00007b46  00007bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c7c  00800686  00800686  00008060  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000080bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a0  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008c23  00000000  00000000  0000899c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024f1  00000000  00000000  000115bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c24  00000000  00000000  00013ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000021f8  00000000  00000000  000196d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000035ed  00000000  00000000  0001b8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e1a  00000000  00000000  0001eeb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  00024cd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b0 c0       	rjmp	.+352    	; 0x162 <__ctors_end>
       2:	00 00       	nop
       4:	cf c0       	rjmp	.+414    	; 0x1a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c0       	rjmp	.+410    	; 0x1a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c0       	rjmp	.+406    	; 0x1a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c0       	rjmp	.+398    	; 0x1a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c0       	rjmp	.+394    	; 0x1a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c0       	rjmp	.+386    	; 0x1a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c0       	rjmp	.+382    	; 0x1a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	bd c0       	rjmp	.+378    	; 0x1a4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bb c0       	rjmp	.+374    	; 0x1a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c6       	rjmp	.+3230   	; 0xcd0 <__vector_12>
      32:	00 00       	nop
      34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	b5 c0       	rjmp	.+362    	; 0x1a4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b3 c0       	rjmp	.+358    	; 0x1a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c0       	rjmp	.+354    	; 0x1a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c0       	rjmp	.+350    	; 0x1a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c0       	rjmp	.+346    	; 0x1a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c0       	rjmp	.+342    	; 0x1a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c0       	rjmp	.+338    	; 0x1a4 <__bad_interrupt>
      52:	00 00       	nop
      54:	a7 c0       	rjmp	.+334    	; 0x1a4 <__bad_interrupt>
      56:	00 00       	nop
      58:	a5 c0       	rjmp	.+330    	; 0x1a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c0       	rjmp	.+326    	; 0x1a4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a1 c0       	rjmp	.+322    	; 0x1a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6e 33 	jmp	0x66dc	; 0x66dc <__vector_25>
      68:	0c 94 c0 33 	jmp	0x6780	; 0x6780 <__vector_26>
      6c:	9b c0       	rjmp	.+310    	; 0x1a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c0       	rjmp	.+306    	; 0x1a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c0       	rjmp	.+302    	; 0x1a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c0       	rjmp	.+298    	; 0x1a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c0       	rjmp	.+294    	; 0x1a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c0       	rjmp	.+290    	; 0x1a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c0       	rjmp	.+286    	; 0x1a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c0       	rjmp	.+282    	; 0x1a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c0       	rjmp	.+278    	; 0x1a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 04 34 	jmp	0x6808	; 0x6808 <__vector_36>
      94:	0c 94 56 34 	jmp	0x68ac	; 0x68ac <__vector_37>
      98:	85 c0       	rjmp	.+266    	; 0x1a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	83 c0       	rjmp	.+262    	; 0x1a4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	81 c0       	rjmp	.+258    	; 0x1a4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7f c0       	rjmp	.+254    	; 0x1a4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7d c0       	rjmp	.+250    	; 0x1a4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7b c0       	rjmp	.+246    	; 0x1a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c0       	rjmp	.+242    	; 0x1a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c0       	rjmp	.+238    	; 0x1a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	75 c0       	rjmp	.+234    	; 0x1a4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	73 c0       	rjmp	.+230    	; 0x1a4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	71 c0       	rjmp	.+226    	; 0x1a4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6f c0       	rjmp	.+222    	; 0x1a4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6d c0       	rjmp	.+218    	; 0x1a4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 9a 34 	jmp	0x6934	; 0x6934 <__vector_51>
      d0:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <__vector_52>
      d4:	67 c0       	rjmp	.+206    	; 0x1a4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 30 35 	jmp	0x6a60	; 0x6a60 <__vector_54>
      dc:	0c 94 82 35 	jmp	0x6b04	; 0x6b04 <__vector_55>
      e0:	61 c0       	rjmp	.+194    	; 0x1a4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	22 27       	eor	r18, r18
      e6:	22 27       	eor	r18, r18
      e8:	22 27       	eor	r18, r18
      ea:	81 27       	eor	r24, r17
      ec:	8c 27       	eor	r24, r28
      ee:	c3 27       	eor	r28, r19
      f0:	22 27       	eor	r18, r18
      f2:	22 27       	eor	r18, r18
      f4:	81 27       	eor	r24, r17
      f6:	8c 27       	eor	r24, r28

000000f8 <prvIdleTask>:
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
        }
        taskEXIT_CRITICAL();

        return ulReturn;
    }
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	1f 92       	push	r1
      fe:	1f 92       	push	r1
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	0e 94 65 1c 	call	0x38ca	; 0x38ca <prvCheckTasksWaitingTermination>
     10c:	80 91 5c 10 	lds	r24, 0x105C	; 0x80105c <pxReadyTasksLists>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	08 f0       	brcs	.+2      	; 0x116 <prvIdleTask+0x1e>
     114:	f2 d4       	rcall	.+2532   	; 0xafa <vPortYield>
     116:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <vApplicationIdleHook>
     11a:	f6 cf       	rjmp	.-20     	; 0x108 <prvIdleTask+0x10>

0000011c <prvTimerTask>:
    {
        Timer_t * pxTimer = xTimer;

        configASSERT( xTimer );
        return pxTimer->pcTimerName;
    }
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	27 97       	sbiw	r28, 0x07	; 7
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	cd bf       	out	0x3d, r28	; 61
     130:	9f 83       	std	Y+7, r25	; 0x07
     132:	8e 83       	std	Y+6, r24	; 0x06
     134:	ce 01       	movw	r24, r28
     136:	05 96       	adiw	r24, 0x05	; 5
     138:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <prvGetNextExpireTime>
     13c:	dc 01       	movw	r26, r24
     13e:	cb 01       	movw	r24, r22
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	9a 83       	std	Y+2, r25	; 0x02
     144:	ab 83       	std	Y+3, r26	; 0x03
     146:	bc 83       	std	Y+4, r27	; 0x04
     148:	2d 81       	ldd	r18, Y+5	; 0x05
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	9a 81       	ldd	r25, Y+2	; 0x02
     14e:	ab 81       	ldd	r26, Y+3	; 0x03
     150:	bc 81       	ldd	r27, Y+4	; 0x04
     152:	42 2f       	mov	r20, r18
     154:	bc 01       	movw	r22, r24
     156:	cd 01       	movw	r24, r26
     158:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <prvProcessTimerOrBlockTask>
     15c:	0e 94 db 26 	call	0x4db6	; 0x4db6 <prvProcessReceivedCommands>
     160:	e9 cf       	rjmp	.-46     	; 0x134 <prvTimerTask+0x18>

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d1 e2       	ldi	r29, 0x21	; 33
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	00 e0       	ldi	r16, 0x00	; 0
     170:	0c bf       	out	0x3c, r16	; 60

00000172 <__do_copy_data>:
     172:	16 e0       	ldi	r17, 0x06	; 6
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b2 e0       	ldi	r27, 0x02	; 2
     178:	e6 e4       	ldi	r30, 0x46	; 70
     17a:	fb e7       	ldi	r31, 0x7B	; 123
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 38       	cpi	r26, 0x86	; 134
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	23 e1       	ldi	r18, 0x13	; 19
     18e:	a6 e8       	ldi	r26, 0x86	; 134
     190:	b6 e0       	ldi	r27, 0x06	; 6
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a2 30       	cpi	r26, 0x02	; 2
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 af 2c 	call	0x595e	; 0x595e <main>
     1a0:	0c 94 a1 3d 	jmp	0x7b42	; 0x7b42 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	2d cf       	rjmp	.-422    	; 0x0 <__vectors>

000001a6 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* This just exists to keep the linker quiet. */
}
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	2a 97       	sbiw	r28, 0x0a	; 10
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	cd bf       	out	0x3d, r28	; 61
     1ba:	9a 87       	std	Y+10, r25	; 0x0a
     1bc:	89 87       	std	Y+9, r24	; 0x09
     1be:	1e 82       	std	Y+6, r1	; 0x06
     1c0:	1d 82       	std	Y+5, r1	; 0x05
     1c2:	0e 94 c5 14 	call	0x298a	; 0x298a <vTaskSuspendAll>
     1c6:	80 91 4e 10 	lds	r24, 0x104E	; 0x80104e <pxEnd>
     1ca:	90 91 4f 10 	lds	r25, 0x104F	; 0x80104f <pxEnd+0x1>
     1ce:	89 2b       	or	r24, r25
     1d0:	09 f4       	brne	.+2      	; 0x1d4 <pvPortMalloc+0x2e>
     1d2:	6e d1       	rcall	.+732    	; 0x4b0 <prvHeapInit>
     1d4:	20 91 58 10 	lds	r18, 0x1058	; 0x801058 <xBlockAllocatedBit>
     1d8:	30 91 59 10 	lds	r19, 0x1059	; 0x801059 <xBlockAllocatedBit+0x1>
     1dc:	89 85       	ldd	r24, Y+9	; 0x09
     1de:	9a 85       	ldd	r25, Y+10	; 0x0a
     1e0:	82 23       	and	r24, r18
     1e2:	93 23       	and	r25, r19
     1e4:	89 2b       	or	r24, r25
     1e6:	09 f0       	breq	.+2      	; 0x1ea <pvPortMalloc+0x44>
     1e8:	e1 c0       	rjmp	.+450    	; 0x3ac <pvPortMalloc+0x206>
     1ea:	89 85       	ldd	r24, Y+9	; 0x09
     1ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ee:	89 2b       	or	r24, r25
     1f0:	a1 f0       	breq	.+40     	; 0x21a <pvPortMalloc+0x74>
     1f2:	24 e0       	ldi	r18, 0x04	; 4
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	89 85       	ldd	r24, Y+9	; 0x09
     1f8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1fa:	28 0f       	add	r18, r24
     1fc:	39 1f       	adc	r19, r25
     1fe:	89 85       	ldd	r24, Y+9	; 0x09
     200:	9a 85       	ldd	r25, Y+10	; 0x0a
     202:	82 17       	cp	r24, r18
     204:	93 07       	cpc	r25, r19
     206:	48 f4       	brcc	.+18     	; 0x21a <pvPortMalloc+0x74>
     208:	84 e0       	ldi	r24, 0x04	; 4
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	29 85       	ldd	r18, Y+9	; 0x09
     20e:	3a 85       	ldd	r19, Y+10	; 0x0a
     210:	82 0f       	add	r24, r18
     212:	93 1f       	adc	r25, r19
     214:	9a 87       	std	Y+10, r25	; 0x0a
     216:	89 87       	std	Y+9, r24	; 0x09
     218:	02 c0       	rjmp	.+4      	; 0x21e <pvPortMalloc+0x78>
     21a:	1a 86       	std	Y+10, r1	; 0x0a
     21c:	19 86       	std	Y+9, r1	; 0x09
     21e:	89 85       	ldd	r24, Y+9	; 0x09
     220:	9a 85       	ldd	r25, Y+10	; 0x0a
     222:	89 2b       	or	r24, r25
     224:	09 f4       	brne	.+2      	; 0x228 <pvPortMalloc+0x82>
     226:	c2 c0       	rjmp	.+388    	; 0x3ac <pvPortMalloc+0x206>
     228:	80 91 50 10 	lds	r24, 0x1050	; 0x801050 <xFreeBytesRemaining>
     22c:	90 91 51 10 	lds	r25, 0x1051	; 0x801051 <xFreeBytesRemaining+0x1>
     230:	29 85       	ldd	r18, Y+9	; 0x09
     232:	3a 85       	ldd	r19, Y+10	; 0x0a
     234:	82 17       	cp	r24, r18
     236:	93 07       	cpc	r25, r19
     238:	08 f4       	brcc	.+2      	; 0x23c <pvPortMalloc+0x96>
     23a:	b8 c0       	rjmp	.+368    	; 0x3ac <pvPortMalloc+0x206>
     23c:	8a e4       	ldi	r24, 0x4A	; 74
     23e:	90 e1       	ldi	r25, 0x10	; 16
     240:	9c 83       	std	Y+4, r25	; 0x04
     242:	8b 83       	std	Y+3, r24	; 0x03
     244:	80 91 4a 10 	lds	r24, 0x104A	; 0x80104a <xStart>
     248:	90 91 4b 10 	lds	r25, 0x104B	; 0x80104b <xStart+0x1>
     24c:	9a 83       	std	Y+2, r25	; 0x02
     24e:	89 83       	std	Y+1, r24	; 0x01
     250:	0b c0       	rjmp	.+22     	; 0x268 <pvPortMalloc+0xc2>
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	9a 81       	ldd	r25, Y+2	; 0x02
     256:	9c 83       	std	Y+4, r25	; 0x04
     258:	8b 83       	std	Y+3, r24	; 0x03
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	9a 81       	ldd	r25, Y+2	; 0x02
     25e:	fc 01       	movw	r30, r24
     260:	80 81       	ld	r24, Z
     262:	91 81       	ldd	r25, Z+1	; 0x01
     264:	9a 83       	std	Y+2, r25	; 0x02
     266:	89 83       	std	Y+1, r24	; 0x01
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	9a 81       	ldd	r25, Y+2	; 0x02
     26c:	fc 01       	movw	r30, r24
     26e:	22 81       	ldd	r18, Z+2	; 0x02
     270:	33 81       	ldd	r19, Z+3	; 0x03
     272:	89 85       	ldd	r24, Y+9	; 0x09
     274:	9a 85       	ldd	r25, Y+10	; 0x0a
     276:	28 17       	cp	r18, r24
     278:	39 07       	cpc	r19, r25
     27a:	38 f4       	brcc	.+14     	; 0x28a <pvPortMalloc+0xe4>
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	9a 81       	ldd	r25, Y+2	; 0x02
     280:	fc 01       	movw	r30, r24
     282:	80 81       	ld	r24, Z
     284:	91 81       	ldd	r25, Z+1	; 0x01
     286:	89 2b       	or	r24, r25
     288:	21 f7       	brne	.-56     	; 0x252 <pvPortMalloc+0xac>
     28a:	80 91 4e 10 	lds	r24, 0x104E	; 0x80104e <pxEnd>
     28e:	90 91 4f 10 	lds	r25, 0x104F	; 0x80104f <pxEnd+0x1>
     292:	29 81       	ldd	r18, Y+1	; 0x01
     294:	3a 81       	ldd	r19, Y+2	; 0x02
     296:	28 17       	cp	r18, r24
     298:	39 07       	cpc	r19, r25
     29a:	09 f4       	brne	.+2      	; 0x29e <pvPortMalloc+0xf8>
     29c:	87 c0       	rjmp	.+270    	; 0x3ac <pvPortMalloc+0x206>
     29e:	8b 81       	ldd	r24, Y+3	; 0x03
     2a0:	9c 81       	ldd	r25, Y+4	; 0x04
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 81       	ld	r18, Z
     2a6:	31 81       	ldd	r19, Z+1	; 0x01
     2a8:	84 e0       	ldi	r24, 0x04	; 4
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	82 0f       	add	r24, r18
     2ae:	93 1f       	adc	r25, r19
     2b0:	9e 83       	std	Y+6, r25	; 0x06
     2b2:	8d 83       	std	Y+5, r24	; 0x05
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	9a 81       	ldd	r25, Y+2	; 0x02
     2b8:	fc 01       	movw	r30, r24
     2ba:	20 81       	ld	r18, Z
     2bc:	31 81       	ldd	r19, Z+1	; 0x01
     2be:	8b 81       	ldd	r24, Y+3	; 0x03
     2c0:	9c 81       	ldd	r25, Y+4	; 0x04
     2c2:	fc 01       	movw	r30, r24
     2c4:	31 83       	std	Z+1, r19	; 0x01
     2c6:	20 83       	st	Z, r18
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	9a 81       	ldd	r25, Y+2	; 0x02
     2cc:	fc 01       	movw	r30, r24
     2ce:	22 81       	ldd	r18, Z+2	; 0x02
     2d0:	33 81       	ldd	r19, Z+3	; 0x03
     2d2:	89 85       	ldd	r24, Y+9	; 0x09
     2d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     2d6:	28 1b       	sub	r18, r24
     2d8:	39 0b       	sbc	r19, r25
     2da:	84 e0       	ldi	r24, 0x04	; 4
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	82 17       	cp	r24, r18
     2e4:	93 07       	cpc	r25, r19
     2e6:	00 f5       	brcc	.+64     	; 0x328 <pvPortMalloc+0x182>
     2e8:	29 81       	ldd	r18, Y+1	; 0x01
     2ea:	3a 81       	ldd	r19, Y+2	; 0x02
     2ec:	89 85       	ldd	r24, Y+9	; 0x09
     2ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     2f0:	82 0f       	add	r24, r18
     2f2:	93 1f       	adc	r25, r19
     2f4:	98 87       	std	Y+8, r25	; 0x08
     2f6:	8f 83       	std	Y+7, r24	; 0x07
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	9a 81       	ldd	r25, Y+2	; 0x02
     2fc:	fc 01       	movw	r30, r24
     2fe:	22 81       	ldd	r18, Z+2	; 0x02
     300:	33 81       	ldd	r19, Z+3	; 0x03
     302:	89 85       	ldd	r24, Y+9	; 0x09
     304:	9a 85       	ldd	r25, Y+10	; 0x0a
     306:	28 1b       	sub	r18, r24
     308:	39 0b       	sbc	r19, r25
     30a:	8f 81       	ldd	r24, Y+7	; 0x07
     30c:	98 85       	ldd	r25, Y+8	; 0x08
     30e:	fc 01       	movw	r30, r24
     310:	33 83       	std	Z+3, r19	; 0x03
     312:	22 83       	std	Z+2, r18	; 0x02
     314:	89 81       	ldd	r24, Y+1	; 0x01
     316:	9a 81       	ldd	r25, Y+2	; 0x02
     318:	29 85       	ldd	r18, Y+9	; 0x09
     31a:	3a 85       	ldd	r19, Y+10	; 0x0a
     31c:	fc 01       	movw	r30, r24
     31e:	33 83       	std	Z+3, r19	; 0x03
     320:	22 83       	std	Z+2, r18	; 0x02
     322:	8f 81       	ldd	r24, Y+7	; 0x07
     324:	98 85       	ldd	r25, Y+8	; 0x08
     326:	44 d1       	rcall	.+648    	; 0x5b0 <prvInsertBlockIntoFreeList>
     328:	20 91 50 10 	lds	r18, 0x1050	; 0x801050 <xFreeBytesRemaining>
     32c:	30 91 51 10 	lds	r19, 0x1051	; 0x801051 <xFreeBytesRemaining+0x1>
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	9a 81       	ldd	r25, Y+2	; 0x02
     334:	fc 01       	movw	r30, r24
     336:	82 81       	ldd	r24, Z+2	; 0x02
     338:	93 81       	ldd	r25, Z+3	; 0x03
     33a:	a9 01       	movw	r20, r18
     33c:	48 1b       	sub	r20, r24
     33e:	59 0b       	sbc	r21, r25
     340:	ca 01       	movw	r24, r20
     342:	90 93 51 10 	sts	0x1051, r25	; 0x801051 <xFreeBytesRemaining+0x1>
     346:	80 93 50 10 	sts	0x1050, r24	; 0x801050 <xFreeBytesRemaining>
     34a:	20 91 50 10 	lds	r18, 0x1050	; 0x801050 <xFreeBytesRemaining>
     34e:	30 91 51 10 	lds	r19, 0x1051	; 0x801051 <xFreeBytesRemaining+0x1>
     352:	80 91 52 10 	lds	r24, 0x1052	; 0x801052 <xMinimumEverFreeBytesRemaining>
     356:	90 91 53 10 	lds	r25, 0x1053	; 0x801053 <xMinimumEverFreeBytesRemaining+0x1>
     35a:	28 17       	cp	r18, r24
     35c:	39 07       	cpc	r19, r25
     35e:	40 f4       	brcc	.+16     	; 0x370 <pvPortMalloc+0x1ca>
     360:	80 91 50 10 	lds	r24, 0x1050	; 0x801050 <xFreeBytesRemaining>
     364:	90 91 51 10 	lds	r25, 0x1051	; 0x801051 <xFreeBytesRemaining+0x1>
     368:	90 93 53 10 	sts	0x1053, r25	; 0x801053 <xMinimumEverFreeBytesRemaining+0x1>
     36c:	80 93 52 10 	sts	0x1052, r24	; 0x801052 <xMinimumEverFreeBytesRemaining>
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	9a 81       	ldd	r25, Y+2	; 0x02
     374:	fc 01       	movw	r30, r24
     376:	22 81       	ldd	r18, Z+2	; 0x02
     378:	33 81       	ldd	r19, Z+3	; 0x03
     37a:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <xBlockAllocatedBit>
     37e:	90 91 59 10 	lds	r25, 0x1059	; 0x801059 <xBlockAllocatedBit+0x1>
     382:	28 2b       	or	r18, r24
     384:	39 2b       	or	r19, r25
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	fc 01       	movw	r30, r24
     38c:	33 83       	std	Z+3, r19	; 0x03
     38e:	22 83       	std	Z+2, r18	; 0x02
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	9a 81       	ldd	r25, Y+2	; 0x02
     394:	fc 01       	movw	r30, r24
     396:	11 82       	std	Z+1, r1	; 0x01
     398:	10 82       	st	Z, r1
     39a:	80 91 54 10 	lds	r24, 0x1054	; 0x801054 <xNumberOfSuccessfulAllocations>
     39e:	90 91 55 10 	lds	r25, 0x1055	; 0x801055 <xNumberOfSuccessfulAllocations+0x1>
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	90 93 55 10 	sts	0x1055, r25	; 0x801055 <xNumberOfSuccessfulAllocations+0x1>
     3a8:	80 93 54 10 	sts	0x1054, r24	; 0x801054 <xNumberOfSuccessfulAllocations>
     3ac:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
     3b0:	8d 81       	ldd	r24, Y+5	; 0x05
     3b2:	9e 81       	ldd	r25, Y+6	; 0x06
     3b4:	89 2b       	or	r24, r25
     3b6:	11 f4       	brne	.+4      	; 0x3bc <pvPortMalloc+0x216>
     3b8:	0e 94 23 29 	call	0x5246	; 0x5246 <vApplicationMallocFailedHook>
     3bc:	8d 81       	ldd	r24, Y+5	; 0x05
     3be:	9e 81       	ldd	r25, Y+6	; 0x06
     3c0:	2a 96       	adiw	r28, 0x0a	; 10
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <vPortFree>:
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <vPortFree+0x6>
     3d8:	00 d0       	rcall	.+0      	; 0x3da <vPortFree+0x8>
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	9e 83       	std	Y+6, r25	; 0x06
     3e0:	8d 83       	std	Y+5, r24	; 0x05
     3e2:	8d 81       	ldd	r24, Y+5	; 0x05
     3e4:	9e 81       	ldd	r25, Y+6	; 0x06
     3e6:	9a 83       	std	Y+2, r25	; 0x02
     3e8:	89 83       	std	Y+1, r24	; 0x01
     3ea:	8d 81       	ldd	r24, Y+5	; 0x05
     3ec:	9e 81       	ldd	r25, Y+6	; 0x06
     3ee:	89 2b       	or	r24, r25
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <vPortFree+0x22>
     3f2:	54 c0       	rjmp	.+168    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	91 95       	neg	r25
     3fa:	81 95       	neg	r24
     3fc:	91 09       	sbc	r25, r1
     3fe:	29 81       	ldd	r18, Y+1	; 0x01
     400:	3a 81       	ldd	r19, Y+2	; 0x02
     402:	82 0f       	add	r24, r18
     404:	93 1f       	adc	r25, r19
     406:	9a 83       	std	Y+2, r25	; 0x02
     408:	89 83       	std	Y+1, r24	; 0x01
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	9c 83       	std	Y+4, r25	; 0x04
     410:	8b 83       	std	Y+3, r24	; 0x03
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	9c 81       	ldd	r25, Y+4	; 0x04
     416:	fc 01       	movw	r30, r24
     418:	22 81       	ldd	r18, Z+2	; 0x02
     41a:	33 81       	ldd	r19, Z+3	; 0x03
     41c:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <xBlockAllocatedBit>
     420:	90 91 59 10 	lds	r25, 0x1059	; 0x801059 <xBlockAllocatedBit+0x1>
     424:	82 23       	and	r24, r18
     426:	93 23       	and	r25, r19
     428:	89 2b       	or	r24, r25
     42a:	c1 f1       	breq	.+112    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     42c:	8b 81       	ldd	r24, Y+3	; 0x03
     42e:	9c 81       	ldd	r25, Y+4	; 0x04
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	91 81       	ldd	r25, Z+1	; 0x01
     436:	89 2b       	or	r24, r25
     438:	89 f5       	brne	.+98     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     43a:	8b 81       	ldd	r24, Y+3	; 0x03
     43c:	9c 81       	ldd	r25, Y+4	; 0x04
     43e:	fc 01       	movw	r30, r24
     440:	22 81       	ldd	r18, Z+2	; 0x02
     442:	33 81       	ldd	r19, Z+3	; 0x03
     444:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <xBlockAllocatedBit>
     448:	90 91 59 10 	lds	r25, 0x1059	; 0x801059 <xBlockAllocatedBit+0x1>
     44c:	80 95       	com	r24
     44e:	90 95       	com	r25
     450:	28 23       	and	r18, r24
     452:	39 23       	and	r19, r25
     454:	8b 81       	ldd	r24, Y+3	; 0x03
     456:	9c 81       	ldd	r25, Y+4	; 0x04
     458:	fc 01       	movw	r30, r24
     45a:	33 83       	std	Z+3, r19	; 0x03
     45c:	22 83       	std	Z+2, r18	; 0x02
     45e:	0e 94 c5 14 	call	0x298a	; 0x298a <vTaskSuspendAll>
     462:	8b 81       	ldd	r24, Y+3	; 0x03
     464:	9c 81       	ldd	r25, Y+4	; 0x04
     466:	fc 01       	movw	r30, r24
     468:	22 81       	ldd	r18, Z+2	; 0x02
     46a:	33 81       	ldd	r19, Z+3	; 0x03
     46c:	80 91 50 10 	lds	r24, 0x1050	; 0x801050 <xFreeBytesRemaining>
     470:	90 91 51 10 	lds	r25, 0x1051	; 0x801051 <xFreeBytesRemaining+0x1>
     474:	82 0f       	add	r24, r18
     476:	93 1f       	adc	r25, r19
     478:	90 93 51 10 	sts	0x1051, r25	; 0x801051 <xFreeBytesRemaining+0x1>
     47c:	80 93 50 10 	sts	0x1050, r24	; 0x801050 <xFreeBytesRemaining>
     480:	8b 81       	ldd	r24, Y+3	; 0x03
     482:	9c 81       	ldd	r25, Y+4	; 0x04
     484:	95 d0       	rcall	.+298    	; 0x5b0 <prvInsertBlockIntoFreeList>
     486:	80 91 56 10 	lds	r24, 0x1056	; 0x801056 <xNumberOfSuccessfulFrees>
     48a:	90 91 57 10 	lds	r25, 0x1057	; 0x801057 <xNumberOfSuccessfulFrees+0x1>
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	90 93 57 10 	sts	0x1057, r25	; 0x801057 <xNumberOfSuccessfulFrees+0x1>
     494:	80 93 56 10 	sts	0x1056, r24	; 0x801056 <xNumberOfSuccessfulFrees>
     498:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
     49c:	00 00       	nop
     49e:	26 96       	adiw	r28, 0x06	; 6
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	28 97       	sbiw	r28, 0x08	; 8
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
     4c4:	84 ec       	ldi	r24, 0xC4	; 196
     4c6:	99 e0       	ldi	r25, 0x09	; 9
     4c8:	9a 83       	std	Y+2, r25	; 0x02
     4ca:	89 83       	std	Y+1, r24	; 0x01

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
     4cc:	86 e8       	ldi	r24, 0x86	; 134
     4ce:	96 e0       	ldi	r25, 0x06	; 6
     4d0:	9c 83       	std	Y+4, r25	; 0x04
     4d2:	8b 83       	std	Y+3, r24	; 0x03
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	9c 81       	ldd	r25, Y+4	; 0x04
     4d8:	9e 83       	std	Y+6, r25	; 0x06
     4da:	8d 83       	std	Y+5, r24	; 0x05

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4dc:	8d 81       	ldd	r24, Y+5	; 0x05
     4de:	9e 81       	ldd	r25, Y+6	; 0x06
     4e0:	90 93 4b 10 	sts	0x104B, r25	; 0x80104b <xStart+0x1>
     4e4:	80 93 4a 10 	sts	0x104A, r24	; 0x80104a <xStart>
    xStart.xBlockSize = ( size_t ) 0;
     4e8:	10 92 4d 10 	sts	0x104D, r1	; 0x80104d <xStart+0x3>
     4ec:	10 92 4c 10 	sts	0x104C, r1	; 0x80104c <xStart+0x2>

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
     4f0:	2d 81       	ldd	r18, Y+5	; 0x05
     4f2:	3e 81       	ldd	r19, Y+6	; 0x06
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	9a 81       	ldd	r25, Y+2	; 0x02
     4f8:	82 0f       	add	r24, r18
     4fa:	93 1f       	adc	r25, r19
     4fc:	9c 83       	std	Y+4, r25	; 0x04
     4fe:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress -= xHeapStructSize;
     500:	84 e0       	ldi	r24, 0x04	; 4
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	2b 81       	ldd	r18, Y+3	; 0x03
     506:	3c 81       	ldd	r19, Y+4	; 0x04
     508:	a9 01       	movw	r20, r18
     50a:	48 1b       	sub	r20, r24
     50c:	59 0b       	sbc	r21, r25
     50e:	ca 01       	movw	r24, r20
     510:	9c 83       	std	Y+4, r25	; 0x04
     512:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	9c 81       	ldd	r25, Y+4	; 0x04
     518:	90 93 4f 10 	sts	0x104F, r25	; 0x80104f <pxEnd+0x1>
     51c:	80 93 4e 10 	sts	0x104E, r24	; 0x80104e <pxEnd>
    pxEnd->xBlockSize = 0;
     520:	80 91 4e 10 	lds	r24, 0x104E	; 0x80104e <pxEnd>
     524:	90 91 4f 10 	lds	r25, 0x104F	; 0x80104f <pxEnd+0x1>
     528:	fc 01       	movw	r30, r24
     52a:	13 82       	std	Z+3, r1	; 0x03
     52c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     52e:	80 91 4e 10 	lds	r24, 0x104E	; 0x80104e <pxEnd>
     532:	90 91 4f 10 	lds	r25, 0x104F	; 0x80104f <pxEnd+0x1>
     536:	fc 01       	movw	r30, r24
     538:	11 82       	std	Z+1, r1	; 0x01
     53a:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
     53c:	8d 81       	ldd	r24, Y+5	; 0x05
     53e:	9e 81       	ldd	r25, Y+6	; 0x06
     540:	98 87       	std	Y+8, r25	; 0x08
     542:	8f 83       	std	Y+7, r24	; 0x07
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     544:	8f 81       	ldd	r24, Y+7	; 0x07
     546:	98 85       	ldd	r25, Y+8	; 0x08
     548:	2b 81       	ldd	r18, Y+3	; 0x03
     54a:	3c 81       	ldd	r19, Y+4	; 0x04
     54c:	28 1b       	sub	r18, r24
     54e:	39 0b       	sbc	r19, r25
     550:	8f 81       	ldd	r24, Y+7	; 0x07
     552:	98 85       	ldd	r25, Y+8	; 0x08
     554:	fc 01       	movw	r30, r24
     556:	33 83       	std	Z+3, r19	; 0x03
     558:	22 83       	std	Z+2, r18	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     55a:	20 91 4e 10 	lds	r18, 0x104E	; 0x80104e <pxEnd>
     55e:	30 91 4f 10 	lds	r19, 0x104F	; 0x80104f <pxEnd+0x1>
     562:	8f 81       	ldd	r24, Y+7	; 0x07
     564:	98 85       	ldd	r25, Y+8	; 0x08
     566:	fc 01       	movw	r30, r24
     568:	31 83       	std	Z+1, r19	; 0x01
     56a:	20 83       	st	Z, r18

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     56c:	8f 81       	ldd	r24, Y+7	; 0x07
     56e:	98 85       	ldd	r25, Y+8	; 0x08
     570:	fc 01       	movw	r30, r24
     572:	82 81       	ldd	r24, Z+2	; 0x02
     574:	93 81       	ldd	r25, Z+3	; 0x03
     576:	90 93 53 10 	sts	0x1053, r25	; 0x801053 <xMinimumEverFreeBytesRemaining+0x1>
     57a:	80 93 52 10 	sts	0x1052, r24	; 0x801052 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     57e:	8f 81       	ldd	r24, Y+7	; 0x07
     580:	98 85       	ldd	r25, Y+8	; 0x08
     582:	fc 01       	movw	r30, r24
     584:	82 81       	ldd	r24, Z+2	; 0x02
     586:	93 81       	ldd	r25, Z+3	; 0x03
     588:	90 93 51 10 	sts	0x1051, r25	; 0x801051 <xFreeBytesRemaining+0x1>
     58c:	80 93 50 10 	sts	0x1050, r24	; 0x801050 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e8       	ldi	r25, 0x80	; 128
     594:	90 93 59 10 	sts	0x1059, r25	; 0x801059 <xBlockAllocatedBit+0x1>
     598:	80 93 58 10 	sts	0x1058, r24	; 0x801058 <xBlockAllocatedBit>
}
     59c:	00 00       	nop
     59e:	28 96       	adiw	r28, 0x08	; 8
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <prvInsertBlockIntoFreeList+0x6>
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <prvInsertBlockIntoFreeList+0x8>
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	9e 83       	std	Y+6, r25	; 0x06
     5be:	8d 83       	std	Y+5, r24	; 0x05
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     5c0:	8a e4       	ldi	r24, 0x4A	; 74
     5c2:	90 e1       	ldi	r25, 0x10	; 16
     5c4:	9a 83       	std	Y+2, r25	; 0x02
     5c6:	89 83       	std	Y+1, r24	; 0x01
     5c8:	07 c0       	rjmp	.+14     	; 0x5d8 <prvInsertBlockIntoFreeList+0x28>
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	9a 81       	ldd	r25, Y+2	; 0x02
     5ce:	fc 01       	movw	r30, r24
     5d0:	80 81       	ld	r24, Z
     5d2:	91 81       	ldd	r25, Z+1	; 0x01
     5d4:	9a 83       	std	Y+2, r25	; 0x02
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	fc 01       	movw	r30, r24
     5de:	20 81       	ld	r18, Z
     5e0:	31 81       	ldd	r19, Z+1	; 0x01
     5e2:	8d 81       	ldd	r24, Y+5	; 0x05
     5e4:	9e 81       	ldd	r25, Y+6	; 0x06
     5e6:	28 17       	cp	r18, r24
     5e8:	39 07       	cpc	r19, r25
     5ea:	78 f3       	brcs	.-34     	; 0x5ca <prvInsertBlockIntoFreeList+0x1a>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	9a 81       	ldd	r25, Y+2	; 0x02
     5f0:	9c 83       	std	Y+4, r25	; 0x04
     5f2:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	fc 01       	movw	r30, r24
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	93 81       	ldd	r25, Z+3	; 0x03
     5fe:	2b 81       	ldd	r18, Y+3	; 0x03
     600:	3c 81       	ldd	r19, Y+4	; 0x04
     602:	28 0f       	add	r18, r24
     604:	39 1f       	adc	r19, r25
     606:	8d 81       	ldd	r24, Y+5	; 0x05
     608:	9e 81       	ldd	r25, Y+6	; 0x06
     60a:	28 17       	cp	r18, r24
     60c:	39 07       	cpc	r19, r25
     60e:	a9 f4       	brne	.+42     	; 0x63a <prvInsertBlockIntoFreeList+0x8a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	9a 81       	ldd	r25, Y+2	; 0x02
     614:	fc 01       	movw	r30, r24
     616:	22 81       	ldd	r18, Z+2	; 0x02
     618:	33 81       	ldd	r19, Z+3	; 0x03
     61a:	8d 81       	ldd	r24, Y+5	; 0x05
     61c:	9e 81       	ldd	r25, Y+6	; 0x06
     61e:	fc 01       	movw	r30, r24
     620:	82 81       	ldd	r24, Z+2	; 0x02
     622:	93 81       	ldd	r25, Z+3	; 0x03
     624:	28 0f       	add	r18, r24
     626:	39 1f       	adc	r19, r25
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	9a 81       	ldd	r25, Y+2	; 0x02
     62c:	fc 01       	movw	r30, r24
     62e:	33 83       	std	Z+3, r19	; 0x03
     630:	22 83       	std	Z+2, r18	; 0x02
        pxBlockToInsert = pxIterator;
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	9e 83       	std	Y+6, r25	; 0x06
     638:	8d 83       	std	Y+5, r24	; 0x05
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
     63a:	8d 81       	ldd	r24, Y+5	; 0x05
     63c:	9e 81       	ldd	r25, Y+6	; 0x06
     63e:	9c 83       	std	Y+4, r25	; 0x04
     640:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     642:	8d 81       	ldd	r24, Y+5	; 0x05
     644:	9e 81       	ldd	r25, Y+6	; 0x06
     646:	fc 01       	movw	r30, r24
     648:	82 81       	ldd	r24, Z+2	; 0x02
     64a:	93 81       	ldd	r25, Z+3	; 0x03
     64c:	2b 81       	ldd	r18, Y+3	; 0x03
     64e:	3c 81       	ldd	r19, Y+4	; 0x04
     650:	28 0f       	add	r18, r24
     652:	39 1f       	adc	r19, r25
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	9a 81       	ldd	r25, Y+2	; 0x02
     658:	fc 01       	movw	r30, r24
     65a:	80 81       	ld	r24, Z
     65c:	91 81       	ldd	r25, Z+1	; 0x01
     65e:	28 17       	cp	r18, r24
     660:	39 07       	cpc	r19, r25
     662:	c1 f5       	brne	.+112    	; 0x6d4 <prvInsertBlockIntoFreeList+0x124>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	9a 81       	ldd	r25, Y+2	; 0x02
     668:	fc 01       	movw	r30, r24
     66a:	20 81       	ld	r18, Z
     66c:	31 81       	ldd	r19, Z+1	; 0x01
     66e:	80 91 4e 10 	lds	r24, 0x104E	; 0x80104e <pxEnd>
     672:	90 91 4f 10 	lds	r25, 0x104F	; 0x80104f <pxEnd+0x1>
     676:	28 17       	cp	r18, r24
     678:	39 07       	cpc	r19, r25
     67a:	11 f1       	breq	.+68     	; 0x6c0 <prvInsertBlockIntoFreeList+0x110>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     67c:	8d 81       	ldd	r24, Y+5	; 0x05
     67e:	9e 81       	ldd	r25, Y+6	; 0x06
     680:	fc 01       	movw	r30, r24
     682:	22 81       	ldd	r18, Z+2	; 0x02
     684:	33 81       	ldd	r19, Z+3	; 0x03
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	9a 81       	ldd	r25, Y+2	; 0x02
     68a:	fc 01       	movw	r30, r24
     68c:	80 81       	ld	r24, Z
     68e:	91 81       	ldd	r25, Z+1	; 0x01
     690:	fc 01       	movw	r30, r24
     692:	82 81       	ldd	r24, Z+2	; 0x02
     694:	93 81       	ldd	r25, Z+3	; 0x03
     696:	28 0f       	add	r18, r24
     698:	39 1f       	adc	r19, r25
     69a:	8d 81       	ldd	r24, Y+5	; 0x05
     69c:	9e 81       	ldd	r25, Y+6	; 0x06
     69e:	fc 01       	movw	r30, r24
     6a0:	33 83       	std	Z+3, r19	; 0x03
     6a2:	22 83       	std	Z+2, r18	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
     6a8:	fc 01       	movw	r30, r24
     6aa:	80 81       	ld	r24, Z
     6ac:	91 81       	ldd	r25, Z+1	; 0x01
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 81       	ld	r18, Z
     6b2:	31 81       	ldd	r19, Z+1	; 0x01
     6b4:	8d 81       	ldd	r24, Y+5	; 0x05
     6b6:	9e 81       	ldd	r25, Y+6	; 0x06
     6b8:	fc 01       	movw	r30, r24
     6ba:	31 83       	std	Z+1, r19	; 0x01
     6bc:	20 83       	st	Z, r18
     6be:	14 c0       	rjmp	.+40     	; 0x6e8 <prvInsertBlockIntoFreeList+0x138>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     6c0:	20 91 4e 10 	lds	r18, 0x104E	; 0x80104e <pxEnd>
     6c4:	30 91 4f 10 	lds	r19, 0x104F	; 0x80104f <pxEnd+0x1>
     6c8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ca:	9e 81       	ldd	r25, Y+6	; 0x06
     6cc:	fc 01       	movw	r30, r24
     6ce:	31 83       	std	Z+1, r19	; 0x01
     6d0:	20 83       	st	Z, r18
     6d2:	0a c0       	rjmp	.+20     	; 0x6e8 <prvInsertBlockIntoFreeList+0x138>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	fc 01       	movw	r30, r24
     6da:	20 81       	ld	r18, Z
     6dc:	31 81       	ldd	r19, Z+1	; 0x01
     6de:	8d 81       	ldd	r24, Y+5	; 0x05
     6e0:	9e 81       	ldd	r25, Y+6	; 0x06
     6e2:	fc 01       	movw	r30, r24
     6e4:	31 83       	std	Z+1, r19	; 0x01
     6e6:	20 83       	st	Z, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     6e8:	29 81       	ldd	r18, Y+1	; 0x01
     6ea:	3a 81       	ldd	r19, Y+2	; 0x02
     6ec:	8d 81       	ldd	r24, Y+5	; 0x05
     6ee:	9e 81       	ldd	r25, Y+6	; 0x06
     6f0:	28 17       	cp	r18, r24
     6f2:	39 07       	cpc	r19, r25
     6f4:	39 f0       	breq	.+14     	; 0x704 <prvInsertBlockIntoFreeList+0x154>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	9a 81       	ldd	r25, Y+2	; 0x02
     6fa:	2d 81       	ldd	r18, Y+5	; 0x05
     6fc:	3e 81       	ldd	r19, Y+6	; 0x06
     6fe:	fc 01       	movw	r30, r24
     700:	31 83       	std	Z+1, r19	; 0x01
     702:	20 83       	st	Z, r18
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     704:	00 00       	nop
     706:	26 96       	adiw	r28, 0x06	; 6
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	f8 94       	cli
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	0f be       	out	0x3f, r0	; 63
     710:	cd bf       	out	0x3d, r28	; 61
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	08 95       	ret

00000718 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	1f 92       	push	r1
     71e:	1f 92       	push	r1
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	9a 83       	std	Y+2, r25	; 0x02
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	9a 81       	ldd	r25, Y+2	; 0x02
     72c:	9c 01       	movw	r18, r24
     72e:	2d 5f       	subi	r18, 0xFD	; 253
     730:	3f 4f       	sbci	r19, 0xFF	; 255
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	9a 81       	ldd	r25, Y+2	; 0x02
     736:	fc 01       	movw	r30, r24
     738:	32 83       	std	Z+2, r19	; 0x02
     73a:	21 83       	std	Z+1, r18	; 0x01
     73c:	29 81       	ldd	r18, Y+1	; 0x01
     73e:	3a 81       	ldd	r19, Y+2	; 0x02
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	9f ef       	ldi	r25, 0xFF	; 255
     744:	dc 01       	movw	r26, r24
     746:	f9 01       	movw	r30, r18
     748:	83 83       	std	Z+3, r24	; 0x03
     74a:	94 83       	std	Z+4, r25	; 0x04
     74c:	a5 83       	std	Z+5, r26	; 0x05
     74e:	b6 83       	std	Z+6, r27	; 0x06
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	9a 81       	ldd	r25, Y+2	; 0x02
     754:	9c 01       	movw	r18, r24
     756:	2d 5f       	subi	r18, 0xFD	; 253
     758:	3f 4f       	sbci	r19, 0xFF	; 255
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	9a 81       	ldd	r25, Y+2	; 0x02
     75e:	fc 01       	movw	r30, r24
     760:	30 87       	std	Z+8, r19	; 0x08
     762:	27 83       	std	Z+7, r18	; 0x07
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	9a 81       	ldd	r25, Y+2	; 0x02
     768:	9c 01       	movw	r18, r24
     76a:	2d 5f       	subi	r18, 0xFD	; 253
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	fc 01       	movw	r30, r24
     774:	32 87       	std	Z+10, r19	; 0x0a
     776:	21 87       	std	Z+9, r18	; 0x09
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	fc 01       	movw	r30, r24
     77e:	10 82       	st	Z, r1
     780:	00 00       	nop
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <vListInitialiseItem>:
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	1f 92       	push	r1
     792:	1f 92       	push	r1
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	9a 83       	std	Y+2, r25	; 0x02
     79a:	89 83       	std	Y+1, r24	; 0x01
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
     7a0:	fc 01       	movw	r30, r24
     7a2:	13 86       	std	Z+11, r1	; 0x0b
     7a4:	12 86       	std	Z+10, r1	; 0x0a
     7a6:	00 00       	nop
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	2a 97       	sbiw	r28, 0x0a	; 10
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	98 87       	std	Y+8, r25	; 0x08
     7c8:	8f 83       	std	Y+7, r24	; 0x07
     7ca:	7a 87       	std	Y+10, r23	; 0x0a
     7cc:	69 87       	std	Y+9, r22	; 0x09
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7ce:	89 85       	ldd	r24, Y+9	; 0x09
     7d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d2:	fc 01       	movw	r30, r24
     7d4:	80 81       	ld	r24, Z
     7d6:	91 81       	ldd	r25, Z+1	; 0x01
     7d8:	a2 81       	ldd	r26, Z+2	; 0x02
     7da:	b3 81       	ldd	r27, Z+3	; 0x03
     7dc:	8b 83       	std	Y+3, r24	; 0x03
     7de:	9c 83       	std	Y+4, r25	; 0x04
     7e0:	ad 83       	std	Y+5, r26	; 0x05
     7e2:	be 83       	std	Y+6, r27	; 0x06
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	9c 81       	ldd	r25, Y+4	; 0x04
     7e8:	ad 81       	ldd	r26, Y+5	; 0x05
     7ea:	be 81       	ldd	r27, Y+6	; 0x06
     7ec:	8f 3f       	cpi	r24, 0xFF	; 255
     7ee:	9f 4f       	sbci	r25, 0xFF	; 255
     7f0:	af 4f       	sbci	r26, 0xFF	; 255
     7f2:	bf 4f       	sbci	r27, 0xFF	; 255
     7f4:	41 f4       	brne	.+16     	; 0x806 <vListInsert+0x54>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7f6:	8f 81       	ldd	r24, Y+7	; 0x07
     7f8:	98 85       	ldd	r25, Y+8	; 0x08
     7fa:	fc 01       	movw	r30, r24
     7fc:	81 85       	ldd	r24, Z+9	; 0x09
     7fe:	92 85       	ldd	r25, Z+10	; 0x0a
     800:	9a 83       	std	Y+2, r25	; 0x02
     802:	89 83       	std	Y+1, r24	; 0x01
     804:	20 c0       	rjmp	.+64     	; 0x846 <vListInsert+0x94>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     806:	8f 81       	ldd	r24, Y+7	; 0x07
     808:	98 85       	ldd	r25, Y+8	; 0x08
     80a:	03 96       	adiw	r24, 0x03	; 3
     80c:	9a 83       	std	Y+2, r25	; 0x02
     80e:	89 83       	std	Y+1, r24	; 0x01
     810:	07 c0       	rjmp	.+14     	; 0x820 <vListInsert+0x6e>
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	fc 01       	movw	r30, r24
     818:	84 81       	ldd	r24, Z+4	; 0x04
     81a:	95 81       	ldd	r25, Z+5	; 0x05
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	fc 01       	movw	r30, r24
     826:	84 81       	ldd	r24, Z+4	; 0x04
     828:	95 81       	ldd	r25, Z+5	; 0x05
     82a:	fc 01       	movw	r30, r24
     82c:	20 81       	ld	r18, Z
     82e:	31 81       	ldd	r19, Z+1	; 0x01
     830:	42 81       	ldd	r20, Z+2	; 0x02
     832:	53 81       	ldd	r21, Z+3	; 0x03
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	9c 81       	ldd	r25, Y+4	; 0x04
     838:	ad 81       	ldd	r26, Y+5	; 0x05
     83a:	be 81       	ldd	r27, Y+6	; 0x06
     83c:	82 17       	cp	r24, r18
     83e:	93 07       	cpc	r25, r19
     840:	a4 07       	cpc	r26, r20
     842:	b5 07       	cpc	r27, r21
     844:	30 f7       	brcc	.-52     	; 0x812 <vListInsert+0x60>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	9a 81       	ldd	r25, Y+2	; 0x02
     84a:	fc 01       	movw	r30, r24
     84c:	24 81       	ldd	r18, Z+4	; 0x04
     84e:	35 81       	ldd	r19, Z+5	; 0x05
     850:	89 85       	ldd	r24, Y+9	; 0x09
     852:	9a 85       	ldd	r25, Y+10	; 0x0a
     854:	fc 01       	movw	r30, r24
     856:	35 83       	std	Z+5, r19	; 0x05
     858:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     85a:	89 85       	ldd	r24, Y+9	; 0x09
     85c:	9a 85       	ldd	r25, Y+10	; 0x0a
     85e:	fc 01       	movw	r30, r24
     860:	84 81       	ldd	r24, Z+4	; 0x04
     862:	95 81       	ldd	r25, Z+5	; 0x05
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	fc 01       	movw	r30, r24
     86a:	37 83       	std	Z+7, r19	; 0x07
     86c:	26 83       	std	Z+6, r18	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     86e:	89 85       	ldd	r24, Y+9	; 0x09
     870:	9a 85       	ldd	r25, Y+10	; 0x0a
     872:	29 81       	ldd	r18, Y+1	; 0x01
     874:	3a 81       	ldd	r19, Y+2	; 0x02
     876:	fc 01       	movw	r30, r24
     878:	37 83       	std	Z+7, r19	; 0x07
     87a:	26 83       	std	Z+6, r18	; 0x06
    pxIterator->pxNext = pxNewListItem;
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	9a 81       	ldd	r25, Y+2	; 0x02
     880:	29 85       	ldd	r18, Y+9	; 0x09
     882:	3a 85       	ldd	r19, Y+10	; 0x0a
     884:	fc 01       	movw	r30, r24
     886:	35 83       	std	Z+5, r19	; 0x05
     888:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	9a 85       	ldd	r25, Y+10	; 0x0a
     88e:	2f 81       	ldd	r18, Y+7	; 0x07
     890:	38 85       	ldd	r19, Y+8	; 0x08
     892:	fc 01       	movw	r30, r24
     894:	33 87       	std	Z+11, r19	; 0x0b
     896:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     898:	8f 81       	ldd	r24, Y+7	; 0x07
     89a:	98 85       	ldd	r25, Y+8	; 0x08
     89c:	fc 01       	movw	r30, r24
     89e:	80 81       	ld	r24, Z
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	28 0f       	add	r18, r24
     8a4:	8f 81       	ldd	r24, Y+7	; 0x07
     8a6:	98 85       	ldd	r25, Y+8	; 0x08
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
}
     8ac:	00 00       	nop
     8ae:	2a 96       	adiw	r28, 0x0a	; 10
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <uxListRemove+0x6>
     8c6:	1f 92       	push	r1
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	9c 83       	std	Y+4, r25	; 0x04
     8ce:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     8d0:	8b 81       	ldd	r24, Y+3	; 0x03
     8d2:	9c 81       	ldd	r25, Y+4	; 0x04
     8d4:	fc 01       	movw	r30, r24
     8d6:	82 85       	ldd	r24, Z+10	; 0x0a
     8d8:	93 85       	ldd	r25, Z+11	; 0x0b
     8da:	9a 83       	std	Y+2, r25	; 0x02
     8dc:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     8de:	8b 81       	ldd	r24, Y+3	; 0x03
     8e0:	9c 81       	ldd	r25, Y+4	; 0x04
     8e2:	fc 01       	movw	r30, r24
     8e4:	84 81       	ldd	r24, Z+4	; 0x04
     8e6:	95 81       	ldd	r25, Z+5	; 0x05
     8e8:	2b 81       	ldd	r18, Y+3	; 0x03
     8ea:	3c 81       	ldd	r19, Y+4	; 0x04
     8ec:	f9 01       	movw	r30, r18
     8ee:	26 81       	ldd	r18, Z+6	; 0x06
     8f0:	37 81       	ldd	r19, Z+7	; 0x07
     8f2:	fc 01       	movw	r30, r24
     8f4:	37 83       	std	Z+7, r19	; 0x07
     8f6:	26 83       	std	Z+6, r18	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	9c 81       	ldd	r25, Y+4	; 0x04
     8fc:	fc 01       	movw	r30, r24
     8fe:	86 81       	ldd	r24, Z+6	; 0x06
     900:	97 81       	ldd	r25, Z+7	; 0x07
     902:	2b 81       	ldd	r18, Y+3	; 0x03
     904:	3c 81       	ldd	r19, Y+4	; 0x04
     906:	f9 01       	movw	r30, r18
     908:	24 81       	ldd	r18, Z+4	; 0x04
     90a:	35 81       	ldd	r19, Z+5	; 0x05
     90c:	fc 01       	movw	r30, r24
     90e:	35 83       	std	Z+5, r19	; 0x05
     910:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     912:	89 81       	ldd	r24, Y+1	; 0x01
     914:	9a 81       	ldd	r25, Y+2	; 0x02
     916:	fc 01       	movw	r30, r24
     918:	21 81       	ldd	r18, Z+1	; 0x01
     91a:	32 81       	ldd	r19, Z+2	; 0x02
     91c:	8b 81       	ldd	r24, Y+3	; 0x03
     91e:	9c 81       	ldd	r25, Y+4	; 0x04
     920:	28 17       	cp	r18, r24
     922:	39 07       	cpc	r19, r25
     924:	51 f4       	brne	.+20     	; 0x93a <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     926:	8b 81       	ldd	r24, Y+3	; 0x03
     928:	9c 81       	ldd	r25, Y+4	; 0x04
     92a:	fc 01       	movw	r30, r24
     92c:	26 81       	ldd	r18, Z+6	; 0x06
     92e:	37 81       	ldd	r19, Z+7	; 0x07
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	fc 01       	movw	r30, r24
     936:	32 83       	std	Z+2, r19	; 0x02
     938:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     93a:	8b 81       	ldd	r24, Y+3	; 0x03
     93c:	9c 81       	ldd	r25, Y+4	; 0x04
     93e:	fc 01       	movw	r30, r24
     940:	13 86       	std	Z+11, r1	; 0x0b
     942:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	9a 81       	ldd	r25, Y+2	; 0x02
     948:	fc 01       	movw	r30, r24
     94a:	80 81       	ld	r24, Z
     94c:	2f ef       	ldi	r18, 0xFF	; 255
     94e:	28 0f       	add	r18, r24
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	fc 01       	movw	r30, r24
     95e:	80 81       	ld	r24, Z
}
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <pxPortInitialiseStack>:
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
}
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	28 97       	sbiw	r28, 0x08	; 8
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	9c 83       	std	Y+4, r25	; 0x04
     984:	8b 83       	std	Y+3, r24	; 0x03
     986:	7e 83       	std	Y+6, r23	; 0x06
     988:	6d 83       	std	Y+5, r22	; 0x05
     98a:	58 87       	std	Y+8, r21	; 0x08
     98c:	4f 83       	std	Y+7, r20	; 0x07
     98e:	8d 81       	ldd	r24, Y+5	; 0x05
     990:	9e 81       	ldd	r25, Y+6	; 0x06
     992:	9a 83       	std	Y+2, r25	; 0x02
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	29 81       	ldd	r18, Y+1	; 0x01
     998:	8b 81       	ldd	r24, Y+3	; 0x03
     99a:	9c 81       	ldd	r25, Y+4	; 0x04
     99c:	fc 01       	movw	r30, r24
     99e:	20 83       	st	Z, r18
     9a0:	8b 81       	ldd	r24, Y+3	; 0x03
     9a2:	9c 81       	ldd	r25, Y+4	; 0x04
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	9c 83       	std	Y+4, r25	; 0x04
     9a8:	8b 83       	std	Y+3, r24	; 0x03
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	89 2f       	mov	r24, r25
     9b0:	99 27       	eor	r25, r25
     9b2:	9a 83       	std	Y+2, r25	; 0x02
     9b4:	89 83       	std	Y+1, r24	; 0x01
     9b6:	29 81       	ldd	r18, Y+1	; 0x01
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	9c 81       	ldd	r25, Y+4	; 0x04
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	9c 83       	std	Y+4, r25	; 0x04
     9c8:	8b 83       	std	Y+3, r24	; 0x03
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	fc 01       	movw	r30, r24
     9d0:	10 82       	st	Z, r1
     9d2:	8b 81       	ldd	r24, Y+3	; 0x03
     9d4:	9c 81       	ldd	r25, Y+4	; 0x04
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	8b 83       	std	Y+3, r24	; 0x03
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	fc 01       	movw	r30, r24
     9e2:	10 82       	st	Z, r1
     9e4:	8b 81       	ldd	r24, Y+3	; 0x03
     9e6:	9c 81       	ldd	r25, Y+4	; 0x04
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	9c 83       	std	Y+4, r25	; 0x04
     9ec:	8b 83       	std	Y+3, r24	; 0x03
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	9c 81       	ldd	r25, Y+4	; 0x04
     9f2:	20 e8       	ldi	r18, 0x80	; 128
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	9c 83       	std	Y+4, r25	; 0x04
     a00:	8b 83       	std	Y+3, r24	; 0x03
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	9c 81       	ldd	r25, Y+4	; 0x04
     a06:	fc 01       	movw	r30, r24
     a08:	10 82       	st	Z, r1
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	9c 81       	ldd	r25, Y+4	; 0x04
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	9c 83       	std	Y+4, r25	; 0x04
     a12:	8b 83       	std	Y+3, r24	; 0x03
     a14:	8b 81       	ldd	r24, Y+3	; 0x03
     a16:	9c 81       	ldd	r25, Y+4	; 0x04
     a18:	fc 01       	movw	r30, r24
     a1a:	10 82       	st	Z, r1
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	9c 81       	ldd	r25, Y+4	; 0x04
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	9c 83       	std	Y+4, r25	; 0x04
     a24:	8b 83       	std	Y+3, r24	; 0x03
     a26:	8b 81       	ldd	r24, Y+3	; 0x03
     a28:	9c 81       	ldd	r25, Y+4	; 0x04
     a2a:	fc 01       	movw	r30, r24
     a2c:	10 82       	st	Z, r1
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	9c 81       	ldd	r25, Y+4	; 0x04
     a32:	47 97       	sbiw	r24, 0x17	; 23
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	8f 81       	ldd	r24, Y+7	; 0x07
     a3a:	98 85       	ldd	r25, Y+8	; 0x08
     a3c:	9a 83       	std	Y+2, r25	; 0x02
     a3e:	89 83       	std	Y+1, r24	; 0x01
     a40:	29 81       	ldd	r18, Y+1	; 0x01
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	9c 81       	ldd	r25, Y+4	; 0x04
     a46:	fc 01       	movw	r30, r24
     a48:	20 83       	st	Z, r18
     a4a:	8b 81       	ldd	r24, Y+3	; 0x03
     a4c:	9c 81       	ldd	r25, Y+4	; 0x04
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	9c 83       	std	Y+4, r25	; 0x04
     a52:	8b 83       	std	Y+3, r24	; 0x03
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	89 2f       	mov	r24, r25
     a5a:	99 27       	eor	r25, r25
     a5c:	9a 83       	std	Y+2, r25	; 0x02
     a5e:	89 83       	std	Y+1, r24	; 0x01
     a60:	29 81       	ldd	r18, Y+1	; 0x01
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	9c 81       	ldd	r25, Y+4	; 0x04
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
     a6a:	8b 81       	ldd	r24, Y+3	; 0x03
     a6c:	9c 81       	ldd	r25, Y+4	; 0x04
     a6e:	07 97       	sbiw	r24, 0x07	; 7
     a70:	9c 83       	std	Y+4, r25	; 0x04
     a72:	8b 83       	std	Y+3, r24	; 0x03
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	9c 81       	ldd	r25, Y+4	; 0x04
     a78:	28 96       	adiw	r28, 0x08	; 8
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <xPortStartScheduler>:
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	ff d0       	rcall	.+510    	; 0xc92 <prvSetupTimerInterrupt>
     a94:	a0 91 5a 10 	lds	r26, 0x105A	; 0x80105a <pxCurrentTCB>
     a98:	b0 91 5b 10 	lds	r27, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
     a9c:	cd 91       	ld	r28, X+
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	dd 91       	ld	r29, X+
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	ff 91       	pop	r31
     aa6:	ef 91       	pop	r30
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	bf 91       	pop	r27
     aae:	af 91       	pop	r26
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	7f 91       	pop	r23
     ab6:	6f 91       	pop	r22
     ab8:	5f 91       	pop	r21
     aba:	4f 91       	pop	r20
     abc:	3f 91       	pop	r19
     abe:	2f 91       	pop	r18
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	bf 90       	pop	r11
     ace:	af 90       	pop	r10
     ad0:	9f 90       	pop	r9
     ad2:	8f 90       	pop	r8
     ad4:	7f 90       	pop	r7
     ad6:	6f 90       	pop	r6
     ad8:	5f 90       	pop	r5
     ada:	4f 90       	pop	r4
     adc:	3f 90       	pop	r3
     ade:	2f 90       	pop	r2
     ae0:	1f 90       	pop	r1
     ae2:	0f 90       	pop	r0
     ae4:	0c be       	out	0x3c, r0	; 60
     ae6:	0f 90       	pop	r0
     ae8:	0b be       	out	0x3b, r0	; 59
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	08 95       	ret
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <vPortYield>:
     afa:	0f 92       	push	r0
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	0f 92       	push	r0
     b02:	0b b6       	in	r0, 0x3b	; 59
     b04:	0f 92       	push	r0
     b06:	0c b6       	in	r0, 0x3c	; 60
     b08:	0f 92       	push	r0
     b0a:	1f 92       	push	r1
     b0c:	11 24       	eor	r1, r1
     b0e:	2f 92       	push	r2
     b10:	3f 92       	push	r3
     b12:	4f 92       	push	r4
     b14:	5f 92       	push	r5
     b16:	6f 92       	push	r6
     b18:	7f 92       	push	r7
     b1a:	8f 92       	push	r8
     b1c:	9f 92       	push	r9
     b1e:	af 92       	push	r10
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	2f 93       	push	r18
     b30:	3f 93       	push	r19
     b32:	4f 93       	push	r20
     b34:	5f 93       	push	r21
     b36:	6f 93       	push	r22
     b38:	7f 93       	push	r23
     b3a:	8f 93       	push	r24
     b3c:	9f 93       	push	r25
     b3e:	af 93       	push	r26
     b40:	bf 93       	push	r27
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
     b4a:	a0 91 5a 10 	lds	r26, 0x105A	; 0x80105a <pxCurrentTCB>
     b4e:	b0 91 5b 10 	lds	r27, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
     b52:	0d b6       	in	r0, 0x3d	; 61
     b54:	0d 92       	st	X+, r0
     b56:	0e b6       	in	r0, 0x3e	; 62
     b58:	0d 92       	st	X+, r0
     b5a:	0e 94 7d 18 	call	0x30fa	; 0x30fa <vTaskSwitchContext>
     b5e:	a0 91 5a 10 	lds	r26, 0x105A	; 0x80105a <pxCurrentTCB>
     b62:	b0 91 5b 10 	lds	r27, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
     b66:	cd 91       	ld	r28, X+
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	dd 91       	ld	r29, X+
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	ff 91       	pop	r31
     b70:	ef 91       	pop	r30
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	bf 91       	pop	r27
     b78:	af 91       	pop	r26
     b7a:	9f 91       	pop	r25
     b7c:	8f 91       	pop	r24
     b7e:	7f 91       	pop	r23
     b80:	6f 91       	pop	r22
     b82:	5f 91       	pop	r21
     b84:	4f 91       	pop	r20
     b86:	3f 91       	pop	r19
     b88:	2f 91       	pop	r18
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	8f 90       	pop	r8
     b9e:	7f 90       	pop	r7
     ba0:	6f 90       	pop	r6
     ba2:	5f 90       	pop	r5
     ba4:	4f 90       	pop	r4
     ba6:	3f 90       	pop	r3
     ba8:	2f 90       	pop	r2
     baa:	1f 90       	pop	r1
     bac:	0f 90       	pop	r0
     bae:	0c be       	out	0x3c, r0	; 60
     bb0:	0f 90       	pop	r0
     bb2:	0b be       	out	0x3b, r0	; 59
     bb4:	0f 90       	pop	r0
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	0f 90       	pop	r0
     bba:	08 95       	ret
	...

00000bbe <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	0f 92       	push	r0
     bc6:	0b b6       	in	r0, 0x3b	; 59
     bc8:	0f 92       	push	r0
     bca:	0c b6       	in	r0, 0x3c	; 60
     bcc:	0f 92       	push	r0
     bce:	1f 92       	push	r1
     bd0:	11 24       	eor	r1, r1
     bd2:	2f 92       	push	r2
     bd4:	3f 92       	push	r3
     bd6:	4f 92       	push	r4
     bd8:	5f 92       	push	r5
     bda:	6f 92       	push	r6
     bdc:	7f 92       	push	r7
     bde:	8f 92       	push	r8
     be0:	9f 92       	push	r9
     be2:	af 92       	push	r10
     be4:	bf 92       	push	r11
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	ef 93       	push	r30
     c0c:	ff 93       	push	r31
     c0e:	a0 91 5a 10 	lds	r26, 0x105A	; 0x80105a <pxCurrentTCB>
     c12:	b0 91 5b 10 	lds	r27, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
     c16:	0d b6       	in	r0, 0x3d	; 61
     c18:	0d 92       	st	X+, r0
     c1a:	0e b6       	in	r0, 0x3e	; 62
     c1c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c1e:	83 e5       	ldi	r24, 0x53	; 83
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	fc 01       	movw	r30, r24
     c24:	10 82       	st	Z, r1
    if( xTaskIncrementTick() != pdFALSE )
     c26:	0e 94 84 16 	call	0x2d08	; 0x2d08 <xTaskIncrementTick>
     c2a:	88 23       	and	r24, r24
     c2c:	11 f0       	breq	.+4      	; 0xc32 <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
     c2e:	0e 94 7d 18 	call	0x30fa	; 0x30fa <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     c32:	a0 91 5a 10 	lds	r26, 0x105A	; 0x80105a <pxCurrentTCB>
     c36:	b0 91 5b 10 	lds	r27, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
     c3a:	cd 91       	ld	r28, X+
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	dd 91       	ld	r29, X+
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	bf 91       	pop	r27
     c4c:	af 91       	pop	r26
     c4e:	9f 91       	pop	r25
     c50:	8f 91       	pop	r24
     c52:	7f 91       	pop	r23
     c54:	6f 91       	pop	r22
     c56:	5f 91       	pop	r21
     c58:	4f 91       	pop	r20
     c5a:	3f 91       	pop	r19
     c5c:	2f 91       	pop	r18
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	9f 90       	pop	r9
     c70:	8f 90       	pop	r8
     c72:	7f 90       	pop	r7
     c74:	6f 90       	pop	r6
     c76:	5f 90       	pop	r5
     c78:	4f 90       	pop	r4
     c7a:	3f 90       	pop	r3
     c7c:	2f 90       	pop	r2
     c7e:	1f 90       	pop	r1
     c80:	0f 90       	pop	r0
     c82:	0c be       	out	0x3c, r0	; 60
     c84:	0f 90       	pop	r0
     c86:	0b be       	out	0x3b, r0	; 59
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     c8e:	08 95       	ret
	...

00000c92 <prvSetupTimerInterrupt>:

/*
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
    /* reset watchdog */
    wdt_reset();
     c9a:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	88 70       	andi	r24, 0x08	; 8
     ca2:	99 27       	eor	r25, r25
     ca4:	89 2b       	or	r24, r25
     ca6:	11 f0       	breq	.+4      	; 0xcac <prvSetupTimerInterrupt+0x1a>
     ca8:	80 ee       	ldi	r24, 0xE0	; 224
     caa:	01 c0       	rjmp	.+2      	; 0xcae <prvSetupTimerInterrupt+0x1c>
     cac:	80 ec       	ldi	r24, 0xC0	; 192
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	97 70       	andi	r25, 0x07	; 7
     cb2:	89 2b       	or	r24, r25
     cb4:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
     cb6:	88 e1       	ldi	r24, 0x18	; 24
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	a8 95       	wdr
     cbe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    /* reset watchdog */
    wdt_reset();

    /* set up WDT Interrupt (rather than the WDT Reset). */
    wdt_interrupt_enable( portUSE_WDTO );
}
     cc8:	00 00       	nop
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     cd0:	76 df       	rcall	.-276    	; 0xbbe <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     cd2:	18 95       	reti
	...

00000cd6 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	00 d0       	rcall	.+0      	; 0xcdc <xQueueGenericReset+0x6>
     cdc:	1f 92       	push	r1
     cde:	1f 92       	push	r1
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	9c 83       	std	Y+4, r25	; 0x04
     ce6:	8b 83       	std	Y+3, r24	; 0x03
     ce8:	6d 83       	std	Y+5, r22	; 0x05
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	9a 83       	std	Y+2, r25	; 0x02
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	0f 92       	push	r0
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	fc 01       	movw	r30, r24
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	29 81       	ldd	r18, Y+1	; 0x01
     d04:	3a 81       	ldd	r19, Y+2	; 0x02
     d06:	f9 01       	movw	r30, r18
     d08:	27 8d       	ldd	r18, Z+31	; 0x1f
     d0a:	42 2f       	mov	r20, r18
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	29 81       	ldd	r18, Y+1	; 0x01
     d10:	3a 81       	ldd	r19, Y+2	; 0x02
     d12:	f9 01       	movw	r30, r18
     d14:	20 a1       	ldd	r18, Z+32	; 0x20
     d16:	22 2f       	mov	r18, r18
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	42 9f       	mul	r20, r18
     d1c:	b0 01       	movw	r22, r0
     d1e:	43 9f       	mul	r20, r19
     d20:	70 0d       	add	r23, r0
     d22:	52 9f       	mul	r21, r18
     d24:	70 0d       	add	r23, r0
     d26:	11 24       	eor	r1, r1
     d28:	9b 01       	movw	r18, r22
     d2a:	28 0f       	add	r18, r24
     d2c:	39 1f       	adc	r19, r25
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	fc 01       	movw	r30, r24
     d34:	35 83       	std	Z+5, r19	; 0x05
     d36:	24 83       	std	Z+4, r18	; 0x04
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	fc 01       	movw	r30, r24
     d3e:	16 8e       	std	Z+30, r1	; 0x1e
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	fc 01       	movw	r30, r24
     d46:	20 81       	ld	r18, Z
     d48:	31 81       	ldd	r19, Z+1	; 0x01
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	fc 01       	movw	r30, r24
     d50:	33 83       	std	Z+3, r19	; 0x03
     d52:	22 83       	std	Z+2, r18	; 0x02
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	fc 01       	movw	r30, r24
     d5a:	20 81       	ld	r18, Z
     d5c:	31 81       	ldd	r19, Z+1	; 0x01
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	fc 01       	movw	r30, r24
     d64:	87 8d       	ldd	r24, Z+31	; 0x1f
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	bc 01       	movw	r22, r24
     d6c:	61 50       	subi	r22, 0x01	; 1
     d6e:	71 09       	sbc	r23, r1
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	fc 01       	movw	r30, r24
     d76:	80 a1       	ldd	r24, Z+32	; 0x20
     d78:	48 2f       	mov	r20, r24
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	64 9f       	mul	r22, r20
     d7e:	c0 01       	movw	r24, r0
     d80:	65 9f       	mul	r22, r21
     d82:	90 0d       	add	r25, r0
     d84:	74 9f       	mul	r23, r20
     d86:	90 0d       	add	r25, r0
     d88:	11 24       	eor	r1, r1
     d8a:	28 0f       	add	r18, r24
     d8c:	39 1f       	adc	r19, r25
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	fc 01       	movw	r30, r24
     d94:	37 83       	std	Z+7, r19	; 0x07
     d96:	26 83       	std	Z+6, r18	; 0x06
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	2f ef       	ldi	r18, 0xFF	; 255
     d9e:	fc 01       	movw	r30, r24
     da0:	21 a3       	std	Z+33, r18	; 0x21
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	2f ef       	ldi	r18, 0xFF	; 255
     da8:	fc 01       	movw	r30, r24
     daa:	22 a3       	std	Z+34, r18	; 0x22
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	88 23       	and	r24, r24
     db0:	79 f4       	brne	.+30     	; 0xdd0 <xQueueGenericReset+0xfa>
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	fc 01       	movw	r30, r24
     db8:	80 85       	ldd	r24, Z+8	; 0x08
     dba:	88 23       	and	r24, r24
     dbc:	89 f0       	breq	.+34     	; 0xde0 <xQueueGenericReset+0x10a>
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	08 96       	adiw	r24, 0x08	; 8
     dc4:	0e 94 ab 19 	call	0x3356	; 0x3356 <xTaskRemoveFromEventList>
     dc8:	88 23       	and	r24, r24
     dca:	51 f0       	breq	.+20     	; 0xde0 <xQueueGenericReset+0x10a>
     dcc:	96 de       	rcall	.-724    	; 0xafa <vPortYield>
     dce:	08 c0       	rjmp	.+16     	; 0xde0 <xQueueGenericReset+0x10a>
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	08 96       	adiw	r24, 0x08	; 8
     dd6:	a0 dc       	rcall	.-1728   	; 0x718 <vListInitialise>
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	9a 81       	ldd	r25, Y+2	; 0x02
     ddc:	43 96       	adiw	r24, 0x13	; 19
     dde:	9c dc       	rcall	.-1736   	; 0x718 <vListInitialise>
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	08 95       	ret

00000df6 <xQueueGenericCreate>:
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	29 97       	sbiw	r28, 0x09	; 9
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	8f 83       	std	Y+7, r24	; 0x07
     e10:	68 87       	std	Y+8, r22	; 0x08
     e12:	49 87       	std	Y+9, r20	; 0x09
     e14:	8f 81       	ldd	r24, Y+7	; 0x07
     e16:	48 2f       	mov	r20, r24
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	88 85       	ldd	r24, Y+8	; 0x08
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	42 9f       	mul	r20, r18
     e22:	c0 01       	movw	r24, r0
     e24:	43 9f       	mul	r20, r19
     e26:	90 0d       	add	r25, r0
     e28:	52 9f       	mul	r21, r18
     e2a:	90 0d       	add	r25, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	83 96       	adiw	r24, 0x23	; 35
     e38:	b6 d9       	rcall	.-3220   	; 0x1a6 <pvPortMalloc>
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	89 2b       	or	r24, r25
     e44:	99 f0       	breq	.+38     	; 0xe6c <xQueueGenericCreate+0x76>
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	9e 83       	std	Y+6, r25	; 0x06
     e4c:	8d 83       	std	Y+5, r24	; 0x05
     e4e:	8d 81       	ldd	r24, Y+5	; 0x05
     e50:	9e 81       	ldd	r25, Y+6	; 0x06
     e52:	83 96       	adiw	r24, 0x23	; 35
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	3c 81       	ldd	r19, Y+4	; 0x04
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	89 01       	movw	r16, r18
     e62:	29 85       	ldd	r18, Y+9	; 0x09
     e64:	ac 01       	movw	r20, r24
     e66:	68 85       	ldd	r22, Y+8	; 0x08
     e68:	8f 81       	ldd	r24, Y+7	; 0x07
     e6a:	0d d0       	rcall	.+26     	; 0xe86 <prvInitialiseNewQueue>
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	9c 81       	ldd	r25, Y+4	; 0x04
     e70:	29 96       	adiw	r28, 0x09	; 9
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	08 95       	ret

00000e86 <prvInitialiseNewQueue>:
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	27 97       	sbiw	r28, 0x07	; 7
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	6a 83       	std	Y+2, r22	; 0x02
     ea2:	5c 83       	std	Y+4, r21	; 0x04
     ea4:	4b 83       	std	Y+3, r20	; 0x03
     ea6:	2d 83       	std	Y+5, r18	; 0x05
     ea8:	1f 83       	std	Y+7, r17	; 0x07
     eaa:	0e 83       	std	Y+6, r16	; 0x06
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	88 23       	and	r24, r24
     eb0:	41 f4       	brne	.+16     	; 0xec2 <prvInitialiseNewQueue+0x3c>
     eb2:	8e 81       	ldd	r24, Y+6	; 0x06
     eb4:	9f 81       	ldd	r25, Y+7	; 0x07
     eb6:	2e 81       	ldd	r18, Y+6	; 0x06
     eb8:	3f 81       	ldd	r19, Y+7	; 0x07
     eba:	fc 01       	movw	r30, r24
     ebc:	31 83       	std	Z+1, r19	; 0x01
     ebe:	20 83       	st	Z, r18
     ec0:	07 c0       	rjmp	.+14     	; 0xed0 <prvInitialiseNewQueue+0x4a>
     ec2:	8e 81       	ldd	r24, Y+6	; 0x06
     ec4:	9f 81       	ldd	r25, Y+7	; 0x07
     ec6:	2b 81       	ldd	r18, Y+3	; 0x03
     ec8:	3c 81       	ldd	r19, Y+4	; 0x04
     eca:	fc 01       	movw	r30, r24
     ecc:	31 83       	std	Z+1, r19	; 0x01
     ece:	20 83       	st	Z, r18
     ed0:	8e 81       	ldd	r24, Y+6	; 0x06
     ed2:	9f 81       	ldd	r25, Y+7	; 0x07
     ed4:	29 81       	ldd	r18, Y+1	; 0x01
     ed6:	fc 01       	movw	r30, r24
     ed8:	27 8f       	std	Z+31, r18	; 0x1f
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	9f 81       	ldd	r25, Y+7	; 0x07
     ede:	2a 81       	ldd	r18, Y+2	; 0x02
     ee0:	fc 01       	movw	r30, r24
     ee2:	20 a3       	std	Z+32, r18	; 0x20
     ee4:	8e 81       	ldd	r24, Y+6	; 0x06
     ee6:	9f 81       	ldd	r25, Y+7	; 0x07
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	f5 de       	rcall	.-534    	; 0xcd6 <xQueueGenericReset>
     eec:	00 00       	nop
     eee:	27 96       	adiw	r28, 0x07	; 7
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <prvInitialiseMutex>:
     f04:	0f 93       	push	r16
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	1f 92       	push	r1
     f0c:	1f 92       	push	r1
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	89 2b       	or	r24, r25
     f1c:	b9 f0       	breq	.+46     	; 0xf4c <prvInitialiseMutex+0x48>
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	fc 01       	movw	r30, r24
     f24:	15 82       	std	Z+5, r1	; 0x05
     f26:	14 82       	std	Z+4, r1	; 0x04
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	fc 01       	movw	r30, r24
     f2e:	11 82       	std	Z+1, r1	; 0x01
     f30:	10 82       	st	Z, r1
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	fc 01       	movw	r30, r24
     f38:	16 82       	std	Z+6, r1	; 0x06
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	9a 81       	ldd	r25, Y+2	; 0x02
     f3e:	00 e0       	ldi	r16, 0x00	; 0
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	a9 01       	movw	r20, r18
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	25 d0       	rcall	.+74     	; 0xf96 <xQueueGenericSend>
     f4c:	00 00       	nop
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <xQueueCreateMutex>:
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <xQueueCreateMutex+0x6>
     f60:	1f 92       	push	r1
     f62:	1f 92       	push	r1
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	8d 83       	std	Y+5, r24	; 0x05
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	1a 82       	std	Y+2, r1	; 0x02
     f70:	4d 81       	ldd	r20, Y+5	; 0x05
     f72:	6a 81       	ldd	r22, Y+2	; 0x02
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	3f df       	rcall	.-386    	; 0xdf6 <xQueueGenericCreate>
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	8b 83       	std	Y+3, r24	; 0x03
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	c1 df       	rcall	.-126    	; 0xf04 <prvInitialiseMutex>
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <xQueueGenericSend>:
     f96:	0f 93       	push	r16
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	62 97       	sbiw	r28, 0x12	; 18
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	9b 87       	std	Y+11, r25	; 0x0b
     fae:	8a 87       	std	Y+10, r24	; 0x0a
     fb0:	7d 87       	std	Y+13, r23	; 0x0d
     fb2:	6c 87       	std	Y+12, r22	; 0x0c
     fb4:	2e 87       	std	Y+14, r18	; 0x0e
     fb6:	3f 87       	std	Y+15, r19	; 0x0f
     fb8:	48 8b       	std	Y+16, r20	; 0x10
     fba:	59 8b       	std	Y+17, r21	; 0x11
     fbc:	0a 8b       	std	Y+18, r16	; 0x12
     fbe:	19 82       	std	Y+1, r1	; 0x01
     fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc2:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc4:	9b 83       	std	Y+3, r25	; 0x03
     fc6:	8a 83       	std	Y+2, r24	; 0x02
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	0f 92       	push	r0
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	fc 01       	movw	r30, r24
     fd4:	26 8d       	ldd	r18, Z+30	; 0x1e
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	9b 81       	ldd	r25, Y+3	; 0x03
     fda:	fc 01       	movw	r30, r24
     fdc:	87 8d       	ldd	r24, Z+31	; 0x1f
     fde:	28 17       	cp	r18, r24
     fe0:	18 f0       	brcs	.+6      	; 0xfe8 <xQueueGenericSend+0x52>
     fe2:	8a 89       	ldd	r24, Y+18	; 0x12
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	f9 f4       	brne	.+62     	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
     fe8:	2c 85       	ldd	r18, Y+12	; 0x0c
     fea:	3d 85       	ldd	r19, Y+13	; 0x0d
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	4a 89       	ldd	r20, Y+18	; 0x12
     ff2:	b9 01       	movw	r22, r18
     ff4:	9d d1       	rcall	.+826    	; 0x1330 <prvCopyDataToQueue>
     ff6:	8c 83       	std	Y+4, r24	; 0x04
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	9b 81       	ldd	r25, Y+3	; 0x03
     ffc:	fc 01       	movw	r30, r24
     ffe:	83 89       	ldd	r24, Z+19	; 0x13
    1000:	88 23       	and	r24, r24
    1002:	49 f0       	breq	.+18     	; 0x1016 <__EEPROM_REGION_LENGTH__+0x16>
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	9b 81       	ldd	r25, Y+3	; 0x03
    1008:	43 96       	adiw	r24, 0x13	; 19
    100a:	0e 94 ab 19 	call	0x3356	; 0x3356 <xTaskRemoveFromEventList>
    100e:	88 23       	and	r24, r24
    1010:	31 f0       	breq	.+12     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    1012:	73 dd       	rcall	.-1306   	; 0xafa <vPortYield>
    1014:	04 c0       	rjmp	.+8      	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	88 23       	and	r24, r24
    101a:	09 f0       	breq	.+2      	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
    101c:	6e dd       	rcall	.-1316   	; 0xafa <vPortYield>
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	64 c0       	rjmp	.+200    	; 0x10ee <__EEPROM_REGION_LENGTH__+0xee>
    1026:	8e 85       	ldd	r24, Y+14	; 0x0e
    1028:	9f 85       	ldd	r25, Y+15	; 0x0f
    102a:	a8 89       	ldd	r26, Y+16	; 0x10
    102c:	b9 89       	ldd	r27, Y+17	; 0x11
    102e:	89 2b       	or	r24, r25
    1030:	8a 2b       	or	r24, r26
    1032:	8b 2b       	or	r24, r27
    1034:	21 f4       	brne	.+8      	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	58 c0       	rjmp	.+176    	; 0x10ee <__EEPROM_REGION_LENGTH__+0xee>
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	88 23       	and	r24, r24
    1042:	31 f4       	brne	.+12     	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
    1044:	ce 01       	movw	r24, r28
    1046:	05 96       	adiw	r24, 0x05	; 5
    1048:	0e 94 48 1b 	call	0x3690	; 0x3690 <vTaskInternalSetTimeOutState>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	0e 94 c5 14 	call	0x298a	; 0x298a <vTaskSuspendAll>
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	0f 92       	push	r0
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	fc 01       	movw	r30, r24
    1064:	81 a1       	ldd	r24, Z+33	; 0x21
    1066:	8f 3f       	cpi	r24, 0xFF	; 255
    1068:	21 f4       	brne	.+8      	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	9b 81       	ldd	r25, Y+3	; 0x03
    106e:	fc 01       	movw	r30, r24
    1070:	11 a2       	std	Z+33, r1	; 0x21
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	fc 01       	movw	r30, r24
    1078:	82 a1       	ldd	r24, Z+34	; 0x22
    107a:	8f 3f       	cpi	r24, 0xFF	; 255
    107c:	21 f4       	brne	.+8      	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	fc 01       	movw	r30, r24
    1084:	12 a2       	std	Z+34, r1	; 0x22
    1086:	0f 90       	pop	r0
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	9e 01       	movw	r18, r28
    108c:	22 5f       	subi	r18, 0xF2	; 242
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
    1090:	ce 01       	movw	r24, r28
    1092:	05 96       	adiw	r24, 0x05	; 5
    1094:	b9 01       	movw	r22, r18
    1096:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <xTaskCheckForTimeOut>
    109a:	88 23       	and	r24, r24
    109c:	11 f5       	brne	.+68     	; 0x10e2 <__EEPROM_REGION_LENGTH__+0xe2>
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	9b 81       	ldd	r25, Y+3	; 0x03
    10a2:	e2 d2       	rcall	.+1476   	; 0x1668 <prvIsQueueFull>
    10a4:	88 23       	and	r24, r24
    10a6:	b9 f0       	breq	.+46     	; 0x10d6 <__EEPROM_REGION_LENGTH__+0xd6>
    10a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    10aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    10ac:	a8 89       	ldd	r26, Y+16	; 0x10
    10ae:	b9 89       	ldd	r27, Y+17	; 0x11
    10b0:	2a 81       	ldd	r18, Y+2	; 0x02
    10b2:	3b 81       	ldd	r19, Y+3	; 0x03
    10b4:	28 5f       	subi	r18, 0xF8	; 248
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	ac 01       	movw	r20, r24
    10ba:	bd 01       	movw	r22, r26
    10bc:	c9 01       	movw	r24, r18
    10be:	0e 94 09 19 	call	0x3212	; 0x3212 <vTaskPlaceOnEventList>
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	55 d2       	rcall	.+1194   	; 0x1572 <prvUnlockQueue>
    10c8:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    10cc:	88 23       	and	r24, r24
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <__EEPROM_REGION_LENGTH__+0xd2>
    10d0:	7b cf       	rjmp	.-266    	; 0xfc8 <xQueueGenericSend+0x32>
    10d2:	13 dd       	rcall	.-1498   	; 0xafa <vPortYield>
    10d4:	79 cf       	rjmp	.-270    	; 0xfc8 <xQueueGenericSend+0x32>
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	4b d2       	rcall	.+1174   	; 0x1572 <prvUnlockQueue>
    10dc:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    10e0:	73 cf       	rjmp	.-282    	; 0xfc8 <xQueueGenericSend+0x32>
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	45 d2       	rcall	.+1162   	; 0x1572 <prvUnlockQueue>
    10e8:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	62 96       	adiw	r28, 0x12	; 18
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret

00001102 <xQueueGenericSendFromISR>:
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	2d 97       	sbiw	r28, 0x0d	; 13
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	98 87       	std	Y+8, r25	; 0x08
    1118:	8f 83       	std	Y+7, r24	; 0x07
    111a:	7a 87       	std	Y+10, r23	; 0x0a
    111c:	69 87       	std	Y+9, r22	; 0x09
    111e:	5c 87       	std	Y+12, r21	; 0x0c
    1120:	4b 87       	std	Y+11, r20	; 0x0b
    1122:	2d 87       	std	Y+13, r18	; 0x0d
    1124:	8f 81       	ldd	r24, Y+7	; 0x07
    1126:	98 85       	ldd	r25, Y+8	; 0x08
    1128:	9b 83       	std	Y+3, r25	; 0x03
    112a:	8a 83       	std	Y+2, r24	; 0x02
    112c:	1c 82       	std	Y+4, r1	; 0x04
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	9b 81       	ldd	r25, Y+3	; 0x03
    1132:	fc 01       	movw	r30, r24
    1134:	26 8d       	ldd	r18, Z+30	; 0x1e
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	9b 81       	ldd	r25, Y+3	; 0x03
    113a:	fc 01       	movw	r30, r24
    113c:	87 8d       	ldd	r24, Z+31	; 0x1f
    113e:	28 17       	cp	r18, r24
    1140:	18 f0       	brcs	.+6      	; 0x1148 <xQueueGenericSendFromISR+0x46>
    1142:	8d 85       	ldd	r24, Y+13	; 0x0d
    1144:	82 30       	cpi	r24, 0x02	; 2
    1146:	a9 f5       	brne	.+106    	; 0x11b2 <xQueueGenericSendFromISR+0xb0>
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	9b 81       	ldd	r25, Y+3	; 0x03
    114c:	fc 01       	movw	r30, r24
    114e:	82 a1       	ldd	r24, Z+34	; 0x22
    1150:	8d 83       	std	Y+5, r24	; 0x05
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	9b 81       	ldd	r25, Y+3	; 0x03
    1156:	fc 01       	movw	r30, r24
    1158:	86 8d       	ldd	r24, Z+30	; 0x1e
    115a:	8e 83       	std	Y+6, r24	; 0x06
    115c:	29 85       	ldd	r18, Y+9	; 0x09
    115e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	9b 81       	ldd	r25, Y+3	; 0x03
    1164:	4d 85       	ldd	r20, Y+13	; 0x0d
    1166:	b9 01       	movw	r22, r18
    1168:	e3 d0       	rcall	.+454    	; 0x1330 <prvCopyDataToQueue>
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	8f 3f       	cpi	r24, 0xFF	; 255
    116e:	b9 f4       	brne	.+46     	; 0x119e <xQueueGenericSendFromISR+0x9c>
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	9b 81       	ldd	r25, Y+3	; 0x03
    1174:	fc 01       	movw	r30, r24
    1176:	83 89       	ldd	r24, Z+19	; 0x13
    1178:	88 23       	and	r24, r24
    117a:	c1 f0       	breq	.+48     	; 0x11ac <xQueueGenericSendFromISR+0xaa>
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	9b 81       	ldd	r25, Y+3	; 0x03
    1180:	43 96       	adiw	r24, 0x13	; 19
    1182:	0e 94 ab 19 	call	0x3356	; 0x3356 <xTaskRemoveFromEventList>
    1186:	88 23       	and	r24, r24
    1188:	89 f0       	breq	.+34     	; 0x11ac <xQueueGenericSendFromISR+0xaa>
    118a:	8b 85       	ldd	r24, Y+11	; 0x0b
    118c:	9c 85       	ldd	r25, Y+12	; 0x0c
    118e:	89 2b       	or	r24, r25
    1190:	69 f0       	breq	.+26     	; 0x11ac <xQueueGenericSendFromISR+0xaa>
    1192:	8b 85       	ldd	r24, Y+11	; 0x0b
    1194:	9c 85       	ldd	r25, Y+12	; 0x0c
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	fc 01       	movw	r30, r24
    119a:	20 83       	st	Z, r18
    119c:	07 c0       	rjmp	.+14     	; 0x11ac <xQueueGenericSendFromISR+0xaa>
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	8f 5f       	subi	r24, 0xFF	; 255
    11a2:	28 2f       	mov	r18, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	fc 01       	movw	r30, r24
    11aa:	22 a3       	std	Z+34, r18	; 0x22
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <xQueueGenericSendFromISR+0xb2>
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	2d 96       	adiw	r28, 0x0d	; 13
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <xQueueReceive>:
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	61 97       	sbiw	r28, 0x11	; 17
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	9b 87       	std	Y+11, r25	; 0x0b
    11de:	8a 87       	std	Y+10, r24	; 0x0a
    11e0:	7d 87       	std	Y+13, r23	; 0x0d
    11e2:	6c 87       	std	Y+12, r22	; 0x0c
    11e4:	2e 87       	std	Y+14, r18	; 0x0e
    11e6:	3f 87       	std	Y+15, r19	; 0x0f
    11e8:	48 8b       	std	Y+16, r20	; 0x10
    11ea:	59 8b       	std	Y+17, r21	; 0x11
    11ec:	19 82       	std	Y+1, r1	; 0x01
    11ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    11f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11f2:	9b 83       	std	Y+3, r25	; 0x03
    11f4:	8a 83       	std	Y+2, r24	; 0x02
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	0f 92       	push	r0
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1200:	fc 01       	movw	r30, r24
    1202:	86 8d       	ldd	r24, Z+30	; 0x1e
    1204:	8c 83       	std	Y+4, r24	; 0x04
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	88 23       	and	r24, r24
    120a:	f9 f0       	breq	.+62     	; 0x124a <xQueueReceive+0x82>
    120c:	2c 85       	ldd	r18, Y+12	; 0x0c
    120e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	9b 81       	ldd	r25, Y+3	; 0x03
    1214:	b9 01       	movw	r22, r18
    1216:	5c d1       	rcall	.+696    	; 0x14d0 <prvCopyDataFromQueue>
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	2f ef       	ldi	r18, 0xFF	; 255
    121c:	28 0f       	add	r18, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	9b 81       	ldd	r25, Y+3	; 0x03
    1222:	fc 01       	movw	r30, r24
    1224:	26 8f       	std	Z+30, r18	; 0x1e
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	9b 81       	ldd	r25, Y+3	; 0x03
    122a:	fc 01       	movw	r30, r24
    122c:	80 85       	ldd	r24, Z+8	; 0x08
    122e:	88 23       	and	r24, r24
    1230:	41 f0       	breq	.+16     	; 0x1242 <xQueueReceive+0x7a>
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	08 96       	adiw	r24, 0x08	; 8
    1238:	0e 94 ab 19 	call	0x3356	; 0x3356 <xTaskRemoveFromEventList>
    123c:	88 23       	and	r24, r24
    123e:	09 f0       	breq	.+2      	; 0x1242 <xQueueReceive+0x7a>
    1240:	5c dc       	rcall	.-1864   	; 0xafa <vPortYield>
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	6a c0       	rjmp	.+212    	; 0x131e <xQueueReceive+0x156>
    124a:	8e 85       	ldd	r24, Y+14	; 0x0e
    124c:	9f 85       	ldd	r25, Y+15	; 0x0f
    124e:	a8 89       	ldd	r26, Y+16	; 0x10
    1250:	b9 89       	ldd	r27, Y+17	; 0x11
    1252:	89 2b       	or	r24, r25
    1254:	8a 2b       	or	r24, r26
    1256:	8b 2b       	or	r24, r27
    1258:	21 f4       	brne	.+8      	; 0x1262 <xQueueReceive+0x9a>
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	5e c0       	rjmp	.+188    	; 0x131e <xQueueReceive+0x156>
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	88 23       	and	r24, r24
    1266:	31 f4       	brne	.+12     	; 0x1274 <xQueueReceive+0xac>
    1268:	ce 01       	movw	r24, r28
    126a:	05 96       	adiw	r24, 0x05	; 5
    126c:	0e 94 48 1b 	call	0x3690	; 0x3690 <vTaskInternalSetTimeOutState>
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	0f 90       	pop	r0
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	0e 94 c5 14 	call	0x298a	; 0x298a <vTaskSuspendAll>
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	0f 92       	push	r0
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	9b 81       	ldd	r25, Y+3	; 0x03
    1286:	fc 01       	movw	r30, r24
    1288:	81 a1       	ldd	r24, Z+33	; 0x21
    128a:	8f 3f       	cpi	r24, 0xFF	; 255
    128c:	21 f4       	brne	.+8      	; 0x1296 <xQueueReceive+0xce>
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	9b 81       	ldd	r25, Y+3	; 0x03
    1292:	fc 01       	movw	r30, r24
    1294:	11 a2       	std	Z+33, r1	; 0x21
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	fc 01       	movw	r30, r24
    129c:	82 a1       	ldd	r24, Z+34	; 0x22
    129e:	8f 3f       	cpi	r24, 0xFF	; 255
    12a0:	21 f4       	brne	.+8      	; 0x12aa <xQueueReceive+0xe2>
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	9b 81       	ldd	r25, Y+3	; 0x03
    12a6:	fc 01       	movw	r30, r24
    12a8:	12 a2       	std	Z+34, r1	; 0x22
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	9e 01       	movw	r18, r28
    12b0:	22 5f       	subi	r18, 0xF2	; 242
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	ce 01       	movw	r24, r28
    12b6:	05 96       	adiw	r24, 0x05	; 5
    12b8:	b9 01       	movw	r22, r18
    12ba:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <xTaskCheckForTimeOut>
    12be:	88 23       	and	r24, r24
    12c0:	11 f5       	brne	.+68     	; 0x1306 <xQueueReceive+0x13e>
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	b3 d1       	rcall	.+870    	; 0x162e <prvIsQueueEmpty>
    12c8:	88 23       	and	r24, r24
    12ca:	b9 f0       	breq	.+46     	; 0x12fa <xQueueReceive+0x132>
    12cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    12ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    12d0:	a8 89       	ldd	r26, Y+16	; 0x10
    12d2:	b9 89       	ldd	r27, Y+17	; 0x11
    12d4:	2a 81       	ldd	r18, Y+2	; 0x02
    12d6:	3b 81       	ldd	r19, Y+3	; 0x03
    12d8:	2d 5e       	subi	r18, 0xED	; 237
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	ac 01       	movw	r20, r24
    12de:	bd 01       	movw	r22, r26
    12e0:	c9 01       	movw	r24, r18
    12e2:	0e 94 09 19 	call	0x3212	; 0x3212 <vTaskPlaceOnEventList>
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ea:	43 d1       	rcall	.+646    	; 0x1572 <prvUnlockQueue>
    12ec:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    12f0:	88 23       	and	r24, r24
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <xQueueReceive+0x12e>
    12f4:	80 cf       	rjmp	.-256    	; 0x11f6 <xQueueReceive+0x2e>
    12f6:	01 dc       	rcall	.-2046   	; 0xafa <vPortYield>
    12f8:	7e cf       	rjmp	.-260    	; 0x11f6 <xQueueReceive+0x2e>
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	39 d1       	rcall	.+626    	; 0x1572 <prvUnlockQueue>
    1300:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    1304:	78 cf       	rjmp	.-272    	; 0x11f6 <xQueueReceive+0x2e>
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	9b 81       	ldd	r25, Y+3	; 0x03
    130a:	33 d1       	rcall	.+614    	; 0x1572 <prvUnlockQueue>
    130c:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	8c d1       	rcall	.+792    	; 0x162e <prvIsQueueEmpty>
    1316:	88 23       	and	r24, r24
    1318:	09 f4       	brne	.+2      	; 0x131c <xQueueReceive+0x154>
    131a:	6d cf       	rjmp	.-294    	; 0x11f6 <xQueueReceive+0x2e>
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	61 96       	adiw	r28, 0x11	; 17
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <prvCopyDataToQueue>:
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	27 97       	sbiw	r28, 0x07	; 7
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	7e 83       	std	Y+6, r23	; 0x06
    134a:	6d 83       	std	Y+5, r22	; 0x05
    134c:	4f 83       	std	Y+7, r20	; 0x07
    134e:	19 82       	std	Y+1, r1	; 0x01
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	fc 01       	movw	r30, r24
    1356:	86 8d       	ldd	r24, Z+30	; 0x1e
    1358:	8a 83       	std	Y+2, r24	; 0x02
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	fc 01       	movw	r30, r24
    1360:	80 a1       	ldd	r24, Z+32	; 0x20
    1362:	88 23       	and	r24, r24
    1364:	b1 f4       	brne	.+44     	; 0x1392 <prvCopyDataToQueue+0x62>
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	fc 01       	movw	r30, r24
    136c:	80 81       	ld	r24, Z
    136e:	91 81       	ldd	r25, Z+1	; 0x01
    1370:	89 2b       	or	r24, r25
    1372:	09 f0       	breq	.+2      	; 0x1376 <prvCopyDataToQueue+0x46>
    1374:	9c c0       	rjmp	.+312    	; 0x14ae <prvCopyDataToQueue+0x17e>
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	fc 01       	movw	r30, r24
    137c:	84 81       	ldd	r24, Z+4	; 0x04
    137e:	95 81       	ldd	r25, Z+5	; 0x05
    1380:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <xTaskPriorityDisinherit>
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	fc 01       	movw	r30, r24
    138c:	15 82       	std	Z+5, r1	; 0x05
    138e:	14 82       	std	Z+4, r1	; 0x04
    1390:	8e c0       	rjmp	.+284    	; 0x14ae <prvCopyDataToQueue+0x17e>
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	88 23       	and	r24, r24
    1396:	d9 f5       	brne	.+118    	; 0x140e <prvCopyDataToQueue+0xde>
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	fc 01       	movw	r30, r24
    139e:	80 a1       	ldd	r24, Z+32	; 0x20
    13a0:	48 2f       	mov	r20, r24
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	9c 81       	ldd	r25, Y+4	; 0x04
    13a8:	fc 01       	movw	r30, r24
    13aa:	82 81       	ldd	r24, Z+2	; 0x02
    13ac:	93 81       	ldd	r25, Z+3	; 0x03
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	b9 01       	movw	r22, r18
    13b4:	0e 94 24 3a 	call	0x7448	; 0x7448 <memcpy>
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	9c 81       	ldd	r25, Y+4	; 0x04
    13bc:	fc 01       	movw	r30, r24
    13be:	22 81       	ldd	r18, Z+2	; 0x02
    13c0:	33 81       	ldd	r19, Z+3	; 0x03
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	fc 01       	movw	r30, r24
    13c8:	80 a1       	ldd	r24, Z+32	; 0x20
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	28 0f       	add	r18, r24
    13d0:	39 1f       	adc	r19, r25
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	fc 01       	movw	r30, r24
    13d8:	33 83       	std	Z+3, r19	; 0x03
    13da:	22 83       	std	Z+2, r18	; 0x02
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	fc 01       	movw	r30, r24
    13e2:	22 81       	ldd	r18, Z+2	; 0x02
    13e4:	33 81       	ldd	r19, Z+3	; 0x03
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	fc 01       	movw	r30, r24
    13ec:	84 81       	ldd	r24, Z+4	; 0x04
    13ee:	95 81       	ldd	r25, Z+5	; 0x05
    13f0:	28 17       	cp	r18, r24
    13f2:	39 07       	cpc	r19, r25
    13f4:	08 f4       	brcc	.+2      	; 0x13f8 <prvCopyDataToQueue+0xc8>
    13f6:	5b c0       	rjmp	.+182    	; 0x14ae <prvCopyDataToQueue+0x17e>
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 81       	ld	r18, Z
    1400:	31 81       	ldd	r19, Z+1	; 0x01
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	fc 01       	movw	r30, r24
    1408:	33 83       	std	Z+3, r19	; 0x03
    140a:	22 83       	std	Z+2, r18	; 0x02
    140c:	50 c0       	rjmp	.+160    	; 0x14ae <prvCopyDataToQueue+0x17e>
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	fc 01       	movw	r30, r24
    1414:	80 a1       	ldd	r24, Z+32	; 0x20
    1416:	48 2f       	mov	r20, r24
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	fc 01       	movw	r30, r24
    1420:	86 81       	ldd	r24, Z+6	; 0x06
    1422:	97 81       	ldd	r25, Z+7	; 0x07
    1424:	2d 81       	ldd	r18, Y+5	; 0x05
    1426:	3e 81       	ldd	r19, Y+6	; 0x06
    1428:	b9 01       	movw	r22, r18
    142a:	0e 94 24 3a 	call	0x7448	; 0x7448 <memcpy>
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	fc 01       	movw	r30, r24
    1434:	26 81       	ldd	r18, Z+6	; 0x06
    1436:	37 81       	ldd	r19, Z+7	; 0x07
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	fc 01       	movw	r30, r24
    143e:	80 a1       	ldd	r24, Z+32	; 0x20
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	91 95       	neg	r25
    1446:	81 95       	neg	r24
    1448:	91 09       	sbc	r25, r1
    144a:	28 0f       	add	r18, r24
    144c:	39 1f       	adc	r19, r25
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	fc 01       	movw	r30, r24
    1454:	37 83       	std	Z+7, r19	; 0x07
    1456:	26 83       	std	Z+6, r18	; 0x06
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	fc 01       	movw	r30, r24
    145e:	26 81       	ldd	r18, Z+6	; 0x06
    1460:	37 81       	ldd	r19, Z+7	; 0x07
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	fc 01       	movw	r30, r24
    1468:	80 81       	ld	r24, Z
    146a:	91 81       	ldd	r25, Z+1	; 0x01
    146c:	28 17       	cp	r18, r24
    146e:	39 07       	cpc	r19, r25
    1470:	a8 f4       	brcc	.+42     	; 0x149c <prvCopyDataToQueue+0x16c>
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	fc 01       	movw	r30, r24
    1478:	24 81       	ldd	r18, Z+4	; 0x04
    147a:	35 81       	ldd	r19, Z+5	; 0x05
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	fc 01       	movw	r30, r24
    1482:	80 a1       	ldd	r24, Z+32	; 0x20
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	91 95       	neg	r25
    148a:	81 95       	neg	r24
    148c:	91 09       	sbc	r25, r1
    148e:	28 0f       	add	r18, r24
    1490:	39 1f       	adc	r19, r25
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	fc 01       	movw	r30, r24
    1498:	37 83       	std	Z+7, r19	; 0x07
    149a:	26 83       	std	Z+6, r18	; 0x06
    149c:	8f 81       	ldd	r24, Y+7	; 0x07
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	31 f4       	brne	.+12     	; 0x14ae <prvCopyDataToQueue+0x17e>
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	88 23       	and	r24, r24
    14a6:	19 f0       	breq	.+6      	; 0x14ae <prvCopyDataToQueue+0x17e>
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	81 50       	subi	r24, 0x01	; 1
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	21 e0       	ldi	r18, 0x01	; 1
    14b2:	28 0f       	add	r18, r24
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	fc 01       	movw	r30, r24
    14ba:	26 8f       	std	Z+30, r18	; 0x1e
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	27 96       	adiw	r28, 0x07	; 7
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <prvCopyDataFromQueue>:
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <prvCopyDataFromQueue+0x6>
    14d6:	1f 92       	push	r1
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	9a 83       	std	Y+2, r25	; 0x02
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	7c 83       	std	Y+4, r23	; 0x04
    14e2:	6b 83       	std	Y+3, r22	; 0x03
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	9a 81       	ldd	r25, Y+2	; 0x02
    14e8:	fc 01       	movw	r30, r24
    14ea:	80 a1       	ldd	r24, Z+32	; 0x20
    14ec:	88 23       	and	r24, r24
    14ee:	c9 f1       	breq	.+114    	; 0x1562 <prvCopyDataFromQueue+0x92>
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	fc 01       	movw	r30, r24
    14f6:	26 81       	ldd	r18, Z+6	; 0x06
    14f8:	37 81       	ldd	r19, Z+7	; 0x07
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	fc 01       	movw	r30, r24
    1500:	80 a1       	ldd	r24, Z+32	; 0x20
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	28 0f       	add	r18, r24
    1508:	39 1f       	adc	r19, r25
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	fc 01       	movw	r30, r24
    1510:	37 83       	std	Z+7, r19	; 0x07
    1512:	26 83       	std	Z+6, r18	; 0x06
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	fc 01       	movw	r30, r24
    151a:	26 81       	ldd	r18, Z+6	; 0x06
    151c:	37 81       	ldd	r19, Z+7	; 0x07
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	9a 81       	ldd	r25, Y+2	; 0x02
    1522:	fc 01       	movw	r30, r24
    1524:	84 81       	ldd	r24, Z+4	; 0x04
    1526:	95 81       	ldd	r25, Z+5	; 0x05
    1528:	28 17       	cp	r18, r24
    152a:	39 07       	cpc	r19, r25
    152c:	50 f0       	brcs	.+20     	; 0x1542 <prvCopyDataFromQueue+0x72>
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	fc 01       	movw	r30, r24
    1534:	20 81       	ld	r18, Z
    1536:	31 81       	ldd	r19, Z+1	; 0x01
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	9a 81       	ldd	r25, Y+2	; 0x02
    153c:	fc 01       	movw	r30, r24
    153e:	37 83       	std	Z+7, r19	; 0x07
    1540:	26 83       	std	Z+6, r18	; 0x06
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	fc 01       	movw	r30, r24
    1548:	80 a1       	ldd	r24, Z+32	; 0x20
    154a:	48 2f       	mov	r20, r24
    154c:	50 e0       	ldi	r21, 0x00	; 0
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	fc 01       	movw	r30, r24
    1554:	26 81       	ldd	r18, Z+6	; 0x06
    1556:	37 81       	ldd	r19, Z+7	; 0x07
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	b9 01       	movw	r22, r18
    155e:	0e 94 24 3a 	call	0x7448	; 0x7448 <memcpy>
    1562:	00 00       	nop
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <prvUnlockQueue>:
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	00 d0       	rcall	.+0      	; 0x1578 <prvUnlockQueue+0x6>
    1578:	1f 92       	push	r1
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	0f 92       	push	r0
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	fc 01       	movw	r30, r24
    158e:	82 a1       	ldd	r24, Z+34	; 0x22
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	12 c0       	rjmp	.+36     	; 0x15b8 <prvUnlockQueue+0x46>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	fc 01       	movw	r30, r24
    159a:	83 89       	ldd	r24, Z+19	; 0x13
    159c:	88 23       	and	r24, r24
    159e:	81 f0       	breq	.+32     	; 0x15c0 <prvUnlockQueue+0x4e>
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	43 96       	adiw	r24, 0x13	; 19
    15a6:	0e 94 ab 19 	call	0x3356	; 0x3356 <xTaskRemoveFromEventList>
    15aa:	88 23       	and	r24, r24
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <prvUnlockQueue+0x40>
    15ae:	0e 94 1b 1c 	call	0x3836	; 0x3836 <vTaskMissedYield>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	81 50       	subi	r24, 0x01	; 1
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	18 16       	cp	r1, r24
    15bc:	5c f3       	brlt	.-42     	; 0x1594 <prvUnlockQueue+0x22>
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <prvUnlockQueue+0x50>
    15c0:	00 00       	nop
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	2f ef       	ldi	r18, 0xFF	; 255
    15c8:	fc 01       	movw	r30, r24
    15ca:	22 a3       	std	Z+34, r18	; 0x22
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	0f 92       	push	r0
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	fc 01       	movw	r30, r24
    15dc:	81 a1       	ldd	r24, Z+33	; 0x21
    15de:	8a 83       	std	Y+2, r24	; 0x02
    15e0:	12 c0       	rjmp	.+36     	; 0x1606 <prvUnlockQueue+0x94>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	fc 01       	movw	r30, r24
    15e8:	80 85       	ldd	r24, Z+8	; 0x08
    15ea:	88 23       	and	r24, r24
    15ec:	81 f0       	breq	.+32     	; 0x160e <prvUnlockQueue+0x9c>
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	9c 81       	ldd	r25, Y+4	; 0x04
    15f2:	08 96       	adiw	r24, 0x08	; 8
    15f4:	0e 94 ab 19 	call	0x3356	; 0x3356 <xTaskRemoveFromEventList>
    15f8:	88 23       	and	r24, r24
    15fa:	11 f0       	breq	.+4      	; 0x1600 <prvUnlockQueue+0x8e>
    15fc:	0e 94 1b 1c 	call	0x3836	; 0x3836 <vTaskMissedYield>
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	81 50       	subi	r24, 0x01	; 1
    1604:	8a 83       	std	Y+2, r24	; 0x02
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	18 16       	cp	r1, r24
    160a:	5c f3       	brlt	.-42     	; 0x15e2 <prvUnlockQueue+0x70>
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <prvUnlockQueue+0x9e>
    160e:	00 00       	nop
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	2f ef       	ldi	r18, 0xFF	; 255
    1616:	fc 01       	movw	r30, r24
    1618:	21 a3       	std	Z+33, r18	; 0x21
    161a:	0f 90       	pop	r0
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	00 00       	nop
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <prvIsQueueEmpty>:
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	00 d0       	rcall	.+0      	; 0x1634 <prvIsQueueEmpty+0x6>
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	9b 83       	std	Y+3, r25	; 0x03
    163a:	8a 83       	std	Y+2, r24	; 0x02
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	0f 92       	push	r0
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	9b 81       	ldd	r25, Y+3	; 0x03
    1646:	fc 01       	movw	r30, r24
    1648:	86 8d       	ldd	r24, Z+30	; 0x1e
    164a:	88 23       	and	r24, r24
    164c:	19 f4       	brne	.+6      	; 0x1654 <prvIsQueueEmpty+0x26>
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <prvIsQueueEmpty+0x28>
    1654:	19 82       	std	Y+1, r1	; 0x01
    1656:	0f 90       	pop	r0
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <prvIsQueueFull>:
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	00 d0       	rcall	.+0      	; 0x166e <prvIsQueueFull+0x6>
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	9b 83       	std	Y+3, r25	; 0x03
    1674:	8a 83       	std	Y+2, r24	; 0x02
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	0f 92       	push	r0
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	9b 81       	ldd	r25, Y+3	; 0x03
    1680:	fc 01       	movw	r30, r24
    1682:	26 8d       	ldd	r18, Z+30	; 0x1e
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	fc 01       	movw	r30, r24
    168a:	87 8d       	ldd	r24, Z+31	; 0x1f
    168c:	28 17       	cp	r18, r24
    168e:	19 f4       	brne	.+6      	; 0x1696 <prvIsQueueFull+0x2e>
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <prvIsQueueFull+0x30>
    1696:	19 82       	std	Y+1, r1	; 0x01
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	29 97       	sbiw	r28, 0x09	; 9
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	9c 83       	std	Y+4, r25	; 0x04
    16c0:	8b 83       	std	Y+3, r24	; 0x03
    16c2:	4d 83       	std	Y+5, r20	; 0x05
    16c4:	5e 83       	std	Y+6, r21	; 0x06
    16c6:	6f 83       	std	Y+7, r22	; 0x07
    16c8:	78 87       	std	Y+8, r23	; 0x08
    16ca:	29 87       	std	Y+9, r18	; 0x09
        Queue_t * const pxQueue = xQueue;
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	0f 92       	push	r0
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	fc 01       	movw	r30, r24
    16e0:	81 a1       	ldd	r24, Z+33	; 0x21
    16e2:	8f 3f       	cpi	r24, 0xFF	; 255
    16e4:	21 f4       	brne	.+8      	; 0x16ee <vQueueWaitForMessageRestricted+0x44>
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	fc 01       	movw	r30, r24
    16ec:	11 a2       	std	Z+33, r1	; 0x21
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	fc 01       	movw	r30, r24
    16f4:	82 a1       	ldd	r24, Z+34	; 0x22
    16f6:	8f 3f       	cpi	r24, 0xFF	; 255
    16f8:	21 f4       	brne	.+8      	; 0x1702 <vQueueWaitForMessageRestricted+0x58>
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	fc 01       	movw	r30, r24
    1700:	12 a2       	std	Z+34, r1	; 0x22
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	fc 01       	movw	r30, r24
    170c:	86 8d       	ldd	r24, Z+30	; 0x1e
    170e:	88 23       	and	r24, r24
    1710:	71 f4       	brne	.+28     	; 0x172e <vQueueWaitForMessageRestricted+0x84>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	fc 01       	movw	r30, r24
    1718:	73 96       	adiw	r30, 0x13	; 19
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	af 81       	ldd	r26, Y+7	; 0x07
    1720:	b8 85       	ldd	r27, Y+8	; 0x08
    1722:	29 85       	ldd	r18, Y+9	; 0x09
    1724:	ac 01       	movw	r20, r24
    1726:	bd 01       	movw	r22, r26
    1728:	cf 01       	movw	r24, r30
    172a:	0e 94 34 19 	call	0x3268	; 0x3268 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	1f df       	rcall	.-450    	; 0x1572 <prvUnlockQueue>
    }
    1734:	00 00       	nop
    1736:	29 96       	adiw	r28, 0x09	; 9
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	08 95       	ret

00001748 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    1748:	0f 93       	push	r16
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	28 97       	sbiw	r28, 0x08	; 8
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	9d 83       	std	Y+5, r25	; 0x05
    1760:	8c 83       	std	Y+4, r24	; 0x04
    1762:	7f 83       	std	Y+7, r23	; 0x07
    1764:	6e 83       	std	Y+6, r22	; 0x06
    1766:	48 87       	std	Y+8, r20	; 0x08
    1768:	88 85       	ldd	r24, Y+8	; 0x08
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	19 f4       	brne	.+6      	; 0x1774 <xStreamBufferGenericCreate+0x2c>
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <xStreamBufferGenericCreate+0x2e>
    1774:	1b 82       	std	Y+3, r1	; 0x03
    1776:	8e 81       	ldd	r24, Y+6	; 0x06
    1778:	9f 81       	ldd	r25, Y+7	; 0x07
    177a:	89 2b       	or	r24, r25
    177c:	21 f4       	brne	.+8      	; 0x1786 <xStreamBufferGenericCreate+0x3e>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9f 83       	std	Y+7, r25	; 0x07
    1784:	8e 83       	std	Y+6, r24	; 0x06
    1786:	8c 81       	ldd	r24, Y+4	; 0x04
    1788:	9d 81       	ldd	r25, Y+5	; 0x05
    178a:	9c 01       	movw	r18, r24
    178c:	20 5f       	subi	r18, 0xF0	; 240
    178e:	3f 4f       	sbci	r19, 0xFF	; 255
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	9d 81       	ldd	r25, Y+5	; 0x05
    1794:	82 17       	cp	r24, r18
    1796:	93 07       	cpc	r25, r19
    1798:	68 f4       	brcc	.+26     	; 0x17b4 <xStreamBufferGenericCreate+0x6c>
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	9d 81       	ldd	r25, Y+5	; 0x05
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	9d 83       	std	Y+5, r25	; 0x05
    17a2:	8c 83       	std	Y+4, r24	; 0x04
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	0f 96       	adiw	r24, 0x0f	; 15
    17aa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pvPortMalloc>
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <xStreamBufferGenericCreate+0x70>
    17b4:	1a 82       	std	Y+2, r1	; 0x02
    17b6:	19 82       	std	Y+1, r1	; 0x01
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	9a 81       	ldd	r25, Y+2	; 0x02
    17bc:	89 2b       	or	r24, r25
    17be:	69 f0       	breq	.+26     	; 0x17da <xStreamBufferGenericCreate+0x92>
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	bc 01       	movw	r22, r24
    17c6:	61 5f       	subi	r22, 0xF1	; 241
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	2e 81       	ldd	r18, Y+6	; 0x06
    17cc:	3f 81       	ldd	r19, Y+7	; 0x07
    17ce:	4c 81       	ldd	r20, Y+4	; 0x04
    17d0:	5d 81       	ldd	r21, Y+5	; 0x05
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	0b 81       	ldd	r16, Y+3	; 0x03
    17d8:	38 d5       	rcall	.+2672   	; 0x224a <prvInitialiseNewStreamBuffer>
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	28 96       	adiw	r28, 0x08	; 8
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

000017f2 <xStreamBufferReset>:
    17f2:	0f 93       	push	r16
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <xStreamBufferReset+0x8>
    17fa:	1f 92       	push	r1
    17fc:	1f 92       	push	r1
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	9d 83       	std	Y+5, r25	; 0x05
    1804:	8c 83       	std	Y+4, r24	; 0x04
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	9b 83       	std	Y+3, r25	; 0x03
    180c:	8a 83       	std	Y+2, r24	; 0x02
    180e:	19 82       	std	Y+1, r1	; 0x01
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	0f 92       	push	r0
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	dc 01       	movw	r26, r24
    181c:	18 96       	adiw	r26, 0x08	; 8
    181e:	8d 91       	ld	r24, X+
    1820:	9c 91       	ld	r25, X
    1822:	19 97       	sbiw	r26, 0x09	; 9
    1824:	89 2b       	or	r24, r25
    1826:	39 f5       	brne	.+78     	; 0x1876 <xStreamBufferReset+0x84>
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	fc 01       	movw	r30, r24
    182e:	82 85       	ldd	r24, Z+10	; 0x0a
    1830:	93 85       	ldd	r25, Z+11	; 0x0b
    1832:	89 2b       	or	r24, r25
    1834:	01 f5       	brne	.+64     	; 0x1876 <xStreamBufferReset+0x84>
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	9b 81       	ldd	r25, Y+3	; 0x03
    183a:	dc 01       	movw	r26, r24
    183c:	1e 96       	adiw	r26, 0x0e	; 14
    183e:	ec 91       	ld	r30, X
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	dc 01       	movw	r26, r24
    1846:	16 96       	adiw	r26, 0x06	; 6
    1848:	2d 91       	ld	r18, X+
    184a:	3c 91       	ld	r19, X
    184c:	17 97       	sbiw	r26, 0x07	; 7
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	dc 01       	movw	r26, r24
    1854:	14 96       	adiw	r26, 0x04	; 4
    1856:	4d 91       	ld	r20, X+
    1858:	5c 91       	ld	r21, X
    185a:	15 97       	sbiw	r26, 0x05	; 5
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9b 81       	ldd	r25, Y+3	; 0x03
    1860:	dc 01       	movw	r26, r24
    1862:	1c 96       	adiw	r26, 0x0c	; 12
    1864:	6d 91       	ld	r22, X+
    1866:	7c 91       	ld	r23, X
    1868:	1d 97       	sbiw	r26, 0x0d	; 13
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	0e 2f       	mov	r16, r30
    1870:	ec d4       	rcall	.+2520   	; 0x224a <prvInitialiseNewStreamBuffer>
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	0f 91       	pop	r16
    188c:	08 95       	ret

0000188e <xStreamBufferSpacesAvailable>:
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	00 d0       	rcall	.+0      	; 0x1894 <xStreamBufferSpacesAvailable+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <xStreamBufferSpacesAvailable+0x8>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	9c 83       	std	Y+4, r25	; 0x04
    18a4:	8b 83       	std	Y+3, r24	; 0x03
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	fc 01       	movw	r30, r24
    18ac:	24 81       	ldd	r18, Z+4	; 0x04
    18ae:	35 81       	ldd	r19, Z+5	; 0x05
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	fc 01       	movw	r30, r24
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	82 0f       	add	r24, r18
    18bc:	93 1f       	adc	r25, r19
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	fc 01       	movw	r30, r24
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	93 81       	ldd	r25, Z+3	; 0x03
    18cc:	29 81       	ldd	r18, Y+1	; 0x01
    18ce:	3a 81       	ldd	r19, Y+2	; 0x02
    18d0:	a9 01       	movw	r20, r18
    18d2:	48 1b       	sub	r20, r24
    18d4:	59 0b       	sbc	r21, r25
    18d6:	ca 01       	movw	r24, r20
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	fc 01       	movw	r30, r24
    18ec:	24 81       	ldd	r18, Z+4	; 0x04
    18ee:	35 81       	ldd	r19, Z+5	; 0x05
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	82 17       	cp	r24, r18
    18f6:	93 07       	cpc	r25, r19
    18f8:	68 f0       	brcs	.+26     	; 0x1914 <xStreamBufferSpacesAvailable+0x86>
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	fc 01       	movw	r30, r24
    1900:	84 81       	ldd	r24, Z+4	; 0x04
    1902:	95 81       	ldd	r25, Z+5	; 0x05
    1904:	29 81       	ldd	r18, Y+1	; 0x01
    1906:	3a 81       	ldd	r19, Y+2	; 0x02
    1908:	a9 01       	movw	r20, r18
    190a:	48 1b       	sub	r20, r24
    190c:	59 0b       	sbc	r21, r25
    190e:	ca 01       	movw	r24, r20
    1910:	9a 83       	std	Y+2, r25	; 0x02
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	26 96       	adiw	r28, 0x06	; 6
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	08 95       	ret

0000192a <xStreamBufferSend>:
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	69 97       	sbiw	r28, 0x19	; 25
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	99 8b       	std	Y+17, r25	; 0x11
    1950:	88 8b       	std	Y+16, r24	; 0x10
    1952:	7b 8b       	std	Y+19, r23	; 0x13
    1954:	6a 8b       	std	Y+18, r22	; 0x12
    1956:	5d 8b       	std	Y+21, r21	; 0x15
    1958:	4c 8b       	std	Y+20, r20	; 0x14
    195a:	0e 8b       	std	Y+22, r16	; 0x16
    195c:	1f 8b       	std	Y+23, r17	; 0x17
    195e:	28 8f       	std	Y+24, r18	; 0x18
    1960:	39 8f       	std	Y+25, r19	; 0x19
    1962:	88 89       	ldd	r24, Y+16	; 0x10
    1964:	99 89       	ldd	r25, Y+17	; 0x11
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
    196a:	1a 82       	std	Y+2, r1	; 0x02
    196c:	19 82       	std	Y+1, r1	; 0x01
    196e:	8c 89       	ldd	r24, Y+20	; 0x14
    1970:	9d 89       	ldd	r25, Y+21	; 0x15
    1972:	9c 83       	std	Y+4, r25	; 0x04
    1974:	8b 83       	std	Y+3, r24	; 0x03
    1976:	8d 81       	ldd	r24, Y+5	; 0x05
    1978:	9e 81       	ldd	r25, Y+6	; 0x06
    197a:	fc 01       	movw	r30, r24
    197c:	84 81       	ldd	r24, Z+4	; 0x04
    197e:	95 81       	ldd	r25, Z+5	; 0x05
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	98 87       	std	Y+8, r25	; 0x08
    1984:	8f 83       	std	Y+7, r24	; 0x07
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	fc 01       	movw	r30, r24
    198c:	86 85       	ldd	r24, Z+14	; 0x0e
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	81 70       	andi	r24, 0x01	; 1
    1994:	99 27       	eor	r25, r25
    1996:	89 2b       	or	r24, r25
    1998:	89 f0       	breq	.+34     	; 0x19bc <xStreamBufferSend+0x92>
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	02 96       	adiw	r24, 0x02	; 2
    19a0:	9c 83       	std	Y+4, r25	; 0x04
    19a2:	8b 83       	std	Y+3, r24	; 0x03
    19a4:	2b 81       	ldd	r18, Y+3	; 0x03
    19a6:	3c 81       	ldd	r19, Y+4	; 0x04
    19a8:	8f 81       	ldd	r24, Y+7	; 0x07
    19aa:	98 85       	ldd	r25, Y+8	; 0x08
    19ac:	82 17       	cp	r24, r18
    19ae:	93 07       	cpc	r25, r19
    19b0:	80 f4       	brcc	.+32     	; 0x19d2 <xStreamBufferSend+0xa8>
    19b2:	1e 8a       	std	Y+22, r1	; 0x16
    19b4:	1f 8a       	std	Y+23, r1	; 0x17
    19b6:	18 8e       	std	Y+24, r1	; 0x18
    19b8:	19 8e       	std	Y+25, r1	; 0x19
    19ba:	0b c0       	rjmp	.+22     	; 0x19d2 <xStreamBufferSend+0xa8>
    19bc:	2b 81       	ldd	r18, Y+3	; 0x03
    19be:	3c 81       	ldd	r19, Y+4	; 0x04
    19c0:	8f 81       	ldd	r24, Y+7	; 0x07
    19c2:	98 85       	ldd	r25, Y+8	; 0x08
    19c4:	82 17       	cp	r24, r18
    19c6:	93 07       	cpc	r25, r19
    19c8:	20 f4       	brcc	.+8      	; 0x19d2 <xStreamBufferSend+0xa8>
    19ca:	8f 81       	ldd	r24, Y+7	; 0x07
    19cc:	98 85       	ldd	r25, Y+8	; 0x08
    19ce:	9c 83       	std	Y+4, r25	; 0x04
    19d0:	8b 83       	std	Y+3, r24	; 0x03
    19d2:	8e 89       	ldd	r24, Y+22	; 0x16
    19d4:	9f 89       	ldd	r25, Y+23	; 0x17
    19d6:	a8 8d       	ldd	r26, Y+24	; 0x18
    19d8:	b9 8d       	ldd	r27, Y+25	; 0x19
    19da:	89 2b       	or	r24, r25
    19dc:	8a 2b       	or	r24, r26
    19de:	8b 2b       	or	r24, r27
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <xStreamBufferSend+0xba>
    19e2:	47 c0       	rjmp	.+142    	; 0x1a72 <xStreamBufferSend+0x148>
    19e4:	ce 01       	movw	r24, r28
    19e6:	0b 96       	adiw	r24, 0x0b	; 11
    19e8:	0e 94 20 1b 	call	0x3640	; 0x3640 <vTaskSetTimeOutState>
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	0f 92       	push	r0
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	4b df       	rcall	.-362    	; 0x188e <xStreamBufferSpacesAvailable>
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	29 81       	ldd	r18, Y+1	; 0x01
    19fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	28 17       	cp	r18, r24
    1a06:	39 07       	cpc	r19, r25
    1a08:	70 f4       	brcc	.+28     	; 0x1a26 <xStreamBufferSend+0xfc>
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 e6 22 	call	0x45cc	; 0x45cc <xTaskGenericNotifyStateClear>
    1a14:	0e 94 df 1c 	call	0x39be	; 0x39be <xTaskGetCurrentTaskHandle>
    1a18:	9c 01       	movw	r18, r24
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	fc 01       	movw	r30, r24
    1a20:	33 87       	std	Z+11, r19	; 0x0b
    1a22:	22 87       	std	Z+10, r18	; 0x0a
    1a24:	03 c0       	rjmp	.+6      	; 0x1a2c <xStreamBufferSend+0x102>
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	23 c0       	rjmp	.+70     	; 0x1a72 <xStreamBufferSend+0x148>
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	8e 89       	ldd	r24, Y+22	; 0x16
    1a32:	9f 89       	ldd	r25, Y+23	; 0x17
    1a34:	a8 8d       	ldd	r26, Y+24	; 0x18
    1a36:	b9 8d       	ldd	r27, Y+25	; 0x19
    1a38:	5c 01       	movw	r10, r24
    1a3a:	6d 01       	movw	r12, r26
    1a3c:	e1 2c       	mov	r14, r1
    1a3e:	f1 2c       	mov	r15, r1
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	10 e0       	ldi	r17, 0x00	; 0
    1a44:	98 01       	movw	r18, r16
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	ba 01       	movw	r22, r20
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <xTaskGenericNotifyWait>
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	fc 01       	movw	r30, r24
    1a58:	13 86       	std	Z+11, r1	; 0x0b
    1a5a:	12 86       	std	Z+10, r1	; 0x0a
    1a5c:	9e 01       	movw	r18, r28
    1a5e:	2a 5e       	subi	r18, 0xEA	; 234
    1a60:	3f 4f       	sbci	r19, 0xFF	; 255
    1a62:	ce 01       	movw	r24, r28
    1a64:	0b 96       	adiw	r24, 0x0b	; 11
    1a66:	b9 01       	movw	r22, r18
    1a68:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <xTaskCheckForTimeOut>
    1a6c:	88 23       	and	r24, r24
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <xStreamBufferSend+0x148>
    1a70:	bd cf       	rjmp	.-134    	; 0x19ec <xStreamBufferSend+0xc2>
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	89 2b       	or	r24, r25
    1a78:	29 f4       	brne	.+10     	; 0x1a84 <xStreamBufferSend+0x15a>
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	07 df       	rcall	.-498    	; 0x188e <xStreamBufferSpacesAvailable>
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	eb 81       	ldd	r30, Y+3	; 0x03
    1a86:	fc 81       	ldd	r31, Y+4	; 0x04
    1a88:	29 81       	ldd	r18, Y+1	; 0x01
    1a8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a8c:	4c 89       	ldd	r20, Y+20	; 0x14
    1a8e:	5d 89       	ldd	r21, Y+21	; 0x15
    1a90:	6a 89       	ldd	r22, Y+18	; 0x12
    1a92:	7b 89       	ldd	r23, Y+19	; 0x13
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	8f 01       	movw	r16, r30
    1a9a:	c2 d0       	rcall	.+388    	; 0x1c20 <prvWriteMessageToBuffer>
    1a9c:	9a 87       	std	Y+10, r25	; 0x0a
    1a9e:	89 87       	std	Y+9, r24	; 0x09
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	89 2b       	or	r24, r25
    1aa6:	41 f1       	breq	.+80     	; 0x1af8 <xStreamBufferSend+0x1ce>
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	8b d3       	rcall	.+1814   	; 0x21c4 <prvBytesInBuffer>
    1aae:	9c 01       	movw	r18, r24
    1ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	86 81       	ldd	r24, Z+6	; 0x06
    1ab8:	97 81       	ldd	r25, Z+7	; 0x07
    1aba:	28 17       	cp	r18, r24
    1abc:	39 07       	cpc	r19, r25
    1abe:	e0 f0       	brcs	.+56     	; 0x1af8 <xStreamBufferSend+0x1ce>
    1ac0:	64 d7       	rcall	.+3784   	; 0x298a <vTaskSuspendAll>
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	80 85       	ldd	r24, Z+8	; 0x08
    1aca:	91 85       	ldd	r25, Z+9	; 0x09
    1acc:	89 2b       	or	r24, r25
    1ace:	99 f0       	breq	.+38     	; 0x1af6 <xStreamBufferSend+0x1cc>
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	80 85       	ldd	r24, Z+8	; 0x08
    1ad8:	91 85       	ldd	r25, Z+9	; 0x09
    1ada:	e1 2c       	mov	r14, r1
    1adc:	f1 2c       	mov	r15, r1
    1ade:	00 e0       	ldi	r16, 0x00	; 0
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	a9 01       	movw	r20, r18
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <xTaskGenericNotify>
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	fc 01       	movw	r30, r24
    1af2:	11 86       	std	Z+9, r1	; 0x09
    1af4:	10 86       	std	Z+8, r1	; 0x08
    1af6:	56 d7       	rcall	.+3756   	; 0x29a4 <xTaskResumeAll>
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	69 96       	adiw	r28, 0x19	; 25
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	1f 91       	pop	r17
    1b0e:	0f 91       	pop	r16
    1b10:	ff 90       	pop	r15
    1b12:	ef 90       	pop	r14
    1b14:	df 90       	pop	r13
    1b16:	cf 90       	pop	r12
    1b18:	bf 90       	pop	r11
    1b1a:	af 90       	pop	r10
    1b1c:	08 95       	ret

00001b1e <xStreamBufferSendFromISR>:
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	61 97       	sbiw	r28, 0x11	; 17
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	9b 87       	std	Y+11, r25	; 0x0b
    1b40:	8a 87       	std	Y+10, r24	; 0x0a
    1b42:	7d 87       	std	Y+13, r23	; 0x0d
    1b44:	6c 87       	std	Y+12, r22	; 0x0c
    1b46:	5f 87       	std	Y+15, r21	; 0x0f
    1b48:	4e 87       	std	Y+14, r20	; 0x0e
    1b4a:	39 8b       	std	Y+17, r19	; 0x11
    1b4c:	28 8b       	std	Y+16, r18	; 0x10
    1b4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b52:	9c 83       	std	Y+4, r25	; 0x04
    1b54:	8b 83       	std	Y+3, r24	; 0x03
    1b56:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b58:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b5a:	9a 83       	std	Y+2, r25	; 0x02
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	fc 01       	movw	r30, r24
    1b64:	86 85       	ldd	r24, Z+14	; 0x0e
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	81 70       	andi	r24, 0x01	; 1
    1b6c:	99 27       	eor	r25, r25
    1b6e:	89 2b       	or	r24, r25
    1b70:	29 f0       	breq	.+10     	; 0x1b7c <xStreamBufferSendFromISR+0x5e>
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	02 96       	adiw	r24, 0x02	; 2
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	86 de       	rcall	.-756    	; 0x188e <xStreamBufferSpacesAvailable>
    1b82:	9e 83       	std	Y+6, r25	; 0x06
    1b84:	8d 83       	std	Y+5, r24	; 0x05
    1b86:	e9 81       	ldd	r30, Y+1	; 0x01
    1b88:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b8c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1b90:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b92:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b94:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	8f 01       	movw	r16, r30
    1b9c:	41 d0       	rcall	.+130    	; 0x1c20 <prvWriteMessageToBuffer>
    1b9e:	98 87       	std	Y+8, r25	; 0x08
    1ba0:	8f 83       	std	Y+7, r24	; 0x07
    1ba2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba4:	98 85       	ldd	r25, Y+8	; 0x08
    1ba6:	89 2b       	or	r24, r25
    1ba8:	51 f1       	breq	.+84     	; 0x1bfe <xStreamBufferSendFromISR+0xe0>
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	0a d3       	rcall	.+1556   	; 0x21c4 <prvBytesInBuffer>
    1bb0:	9c 01       	movw	r18, r24
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	86 81       	ldd	r24, Z+6	; 0x06
    1bba:	97 81       	ldd	r25, Z+7	; 0x07
    1bbc:	28 17       	cp	r18, r24
    1bbe:	39 07       	cpc	r19, r25
    1bc0:	f0 f0       	brcs	.+60     	; 0x1bfe <xStreamBufferSendFromISR+0xe0>
    1bc2:	19 86       	std	Y+9, r1	; 0x09
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc8:	fc 01       	movw	r30, r24
    1bca:	80 85       	ldd	r24, Z+8	; 0x08
    1bcc:	91 85       	ldd	r25, Z+9	; 0x09
    1bce:	89 2b       	or	r24, r25
    1bd0:	b1 f0       	breq	.+44     	; 0x1bfe <xStreamBufferSendFromISR+0xe0>
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	80 85       	ldd	r24, Z+8	; 0x08
    1bda:	91 85       	ldd	r25, Z+9	; 0x09
    1bdc:	28 89       	ldd	r18, Y+16	; 0x10
    1bde:	39 89       	ldd	r19, Y+17	; 0x11
    1be0:	69 01       	movw	r12, r18
    1be2:	e1 2c       	mov	r14, r1
    1be4:	f1 2c       	mov	r15, r1
    1be6:	00 e0       	ldi	r16, 0x00	; 0
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	a9 01       	movw	r20, r18
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	0e 94 ca 20 	call	0x4194	; 0x4194 <xTaskGenericNotifyFromISR>
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	11 86       	std	Z+9, r1	; 0x09
    1bfc:	10 86       	std	Z+8, r1	; 0x08
    1bfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1c00:	98 85       	ldd	r25, Y+8	; 0x08
    1c02:	61 96       	adiw	r28, 0x11	; 17
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	ff 90       	pop	r15
    1c18:	ef 90       	pop	r14
    1c1a:	df 90       	pop	r13
    1c1c:	cf 90       	pop	r12
    1c1e:	08 95       	ret

00001c20 <prvWriteMessageToBuffer>:
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	61 97       	sbiw	r28, 0x11	; 17
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
    1c38:	99 87       	std	Y+9, r25	; 0x09
    1c3a:	88 87       	std	Y+8, r24	; 0x08
    1c3c:	7b 87       	std	Y+11, r23	; 0x0b
    1c3e:	6a 87       	std	Y+10, r22	; 0x0a
    1c40:	5d 87       	std	Y+13, r21	; 0x0d
    1c42:	4c 87       	std	Y+12, r20	; 0x0c
    1c44:	3f 87       	std	Y+15, r19	; 0x0f
    1c46:	2e 87       	std	Y+14, r18	; 0x0e
    1c48:	19 8b       	std	Y+17, r17	; 0x11
    1c4a:	08 8b       	std	Y+16, r16	; 0x10
    1c4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c50:	89 2b       	or	r24, r25
    1c52:	11 f4       	brne	.+4      	; 0x1c58 <prvWriteMessageToBuffer+0x38>
    1c54:	19 82       	std	Y+1, r1	; 0x01
    1c56:	33 c0       	rjmp	.+102    	; 0x1cbe <prvWriteMessageToBuffer+0x9e>
    1c58:	88 85       	ldd	r24, Y+8	; 0x08
    1c5a:	99 85       	ldd	r25, Y+9	; 0x09
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	86 85       	ldd	r24, Z+14	; 0x0e
    1c60:	88 2f       	mov	r24, r24
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	81 70       	andi	r24, 0x01	; 1
    1c66:	99 27       	eor	r25, r25
    1c68:	89 2b       	or	r24, r25
    1c6a:	a9 f4       	brne	.+42     	; 0x1c96 <prvWriteMessageToBuffer+0x76>
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c72:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c74:	9d 83       	std	Y+5, r25	; 0x05
    1c76:	8c 83       	std	Y+4, r24	; 0x04
    1c78:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c7c:	9f 83       	std	Y+7, r25	; 0x07
    1c7e:	8e 83       	std	Y+6, r24	; 0x06
    1c80:	2c 81       	ldd	r18, Y+4	; 0x04
    1c82:	3d 81       	ldd	r19, Y+5	; 0x05
    1c84:	8e 81       	ldd	r24, Y+6	; 0x06
    1c86:	9f 81       	ldd	r25, Y+7	; 0x07
    1c88:	28 17       	cp	r18, r24
    1c8a:	39 07       	cpc	r19, r25
    1c8c:	08 f4       	brcc	.+2      	; 0x1c90 <prvWriteMessageToBuffer+0x70>
    1c8e:	c9 01       	movw	r24, r18
    1c90:	9d 87       	std	Y+13, r25	; 0x0d
    1c92:	8c 87       	std	Y+12, r24	; 0x0c
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <prvWriteMessageToBuffer+0x9e>
    1c96:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c98:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c9a:	88 89       	ldd	r24, Y+16	; 0x10
    1c9c:	99 89       	ldd	r25, Y+17	; 0x11
    1c9e:	28 17       	cp	r18, r24
    1ca0:	39 07       	cpc	r19, r25
    1ca2:	60 f0       	brcs	.+24     	; 0x1cbc <prvWriteMessageToBuffer+0x9c>
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	9e 01       	movw	r18, r28
    1caa:	24 5f       	subi	r18, 0xF4	; 244
    1cac:	3f 4f       	sbci	r19, 0xFF	; 255
    1cae:	88 85       	ldd	r24, Y+8	; 0x08
    1cb0:	99 85       	ldd	r25, Y+9	; 0x09
    1cb2:	42 e0       	ldi	r20, 0x02	; 2
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	b9 01       	movw	r22, r18
    1cb8:	4f d1       	rcall	.+670    	; 0x1f58 <prvWriteBytesToBuffer>
    1cba:	01 c0       	rjmp	.+2      	; 0x1cbe <prvWriteMessageToBuffer+0x9e>
    1cbc:	19 82       	std	Y+1, r1	; 0x01
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	88 23       	and	r24, r24
    1cc2:	59 f0       	breq	.+22     	; 0x1cda <prvWriteMessageToBuffer+0xba>
    1cc4:	4c 85       	ldd	r20, Y+12	; 0x0c
    1cc6:	5d 85       	ldd	r21, Y+13	; 0x0d
    1cc8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1cca:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ccc:	88 85       	ldd	r24, Y+8	; 0x08
    1cce:	99 85       	ldd	r25, Y+9	; 0x09
    1cd0:	b9 01       	movw	r22, r18
    1cd2:	42 d1       	rcall	.+644    	; 0x1f58 <prvWriteBytesToBuffer>
    1cd4:	9b 83       	std	Y+3, r25	; 0x03
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <prvWriteMessageToBuffer+0xbe>
    1cda:	1b 82       	std	Y+3, r1	; 0x03
    1cdc:	1a 82       	std	Y+2, r1	; 0x02
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	61 96       	adiw	r28, 0x11	; 17
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	df 91       	pop	r29
    1cf0:	cf 91       	pop	r28
    1cf2:	1f 91       	pop	r17
    1cf4:	0f 91       	pop	r16
    1cf6:	08 95       	ret

00001cf8 <xStreamBufferReceive>:
    1cf8:	af 92       	push	r10
    1cfa:	bf 92       	push	r11
    1cfc:	cf 92       	push	r12
    1cfe:	df 92       	push	r13
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	62 97       	sbiw	r28, 0x12	; 18
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	9a 87       	std	Y+10, r25	; 0x0a
    1d1e:	89 87       	std	Y+9, r24	; 0x09
    1d20:	7c 87       	std	Y+12, r23	; 0x0c
    1d22:	6b 87       	std	Y+11, r22	; 0x0b
    1d24:	5e 87       	std	Y+14, r21	; 0x0e
    1d26:	4d 87       	std	Y+13, r20	; 0x0d
    1d28:	0f 87       	std	Y+15, r16	; 0x0f
    1d2a:	18 8b       	std	Y+16, r17	; 0x10
    1d2c:	29 8b       	std	Y+17, r18	; 0x11
    1d2e:	3a 8b       	std	Y+18, r19	; 0x12
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
    1d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d34:	98 87       	std	Y+8, r25	; 0x08
    1d36:	8f 83       	std	Y+7, r24	; 0x07
    1d38:	1a 82       	std	Y+2, r1	; 0x02
    1d3a:	19 82       	std	Y+1, r1	; 0x01
    1d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3e:	98 85       	ldd	r25, Y+8	; 0x08
    1d40:	fc 01       	movw	r30, r24
    1d42:	86 85       	ldd	r24, Z+14	; 0x0e
    1d44:	88 2f       	mov	r24, r24
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	81 70       	andi	r24, 0x01	; 1
    1d4a:	99 27       	eor	r25, r25
    1d4c:	89 2b       	or	r24, r25
    1d4e:	29 f0       	breq	.+10     	; 0x1d5a <xStreamBufferReceive+0x62>
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <xStreamBufferReceive+0x66>
    1d5a:	1e 82       	std	Y+6, r1	; 0x06
    1d5c:	1d 82       	std	Y+5, r1	; 0x05
    1d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d60:	98 89       	ldd	r25, Y+16	; 0x10
    1d62:	a9 89       	ldd	r26, Y+17	; 0x11
    1d64:	ba 89       	ldd	r27, Y+18	; 0x12
    1d66:	89 2b       	or	r24, r25
    1d68:	8a 2b       	or	r24, r26
    1d6a:	8b 2b       	or	r24, r27
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <xStreamBufferReceive+0x78>
    1d6e:	41 c0       	rjmp	.+130    	; 0x1df2 <xStreamBufferReceive+0xfa>
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	0f 92       	push	r0
    1d76:	8f 81       	ldd	r24, Y+7	; 0x07
    1d78:	98 85       	ldd	r25, Y+8	; 0x08
    1d7a:	24 d2       	rcall	.+1096   	; 0x21c4 <prvBytesInBuffer>
    1d7c:	9c 83       	std	Y+4, r25	; 0x04
    1d7e:	8b 83       	std	Y+3, r24	; 0x03
    1d80:	2b 81       	ldd	r18, Y+3	; 0x03
    1d82:	3c 81       	ldd	r19, Y+4	; 0x04
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	82 17       	cp	r24, r18
    1d8a:	93 07       	cpc	r25, r19
    1d8c:	68 f0       	brcs	.+26     	; 0x1da8 <xStreamBufferReceive+0xb0>
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	0e 94 e6 22 	call	0x45cc	; 0x45cc <xTaskGenericNotifyStateClear>
    1d98:	0e 94 df 1c 	call	0x39be	; 0x39be <xTaskGetCurrentTaskHandle>
    1d9c:	9c 01       	movw	r18, r24
    1d9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1da0:	98 85       	ldd	r25, Y+8	; 0x08
    1da2:	fc 01       	movw	r30, r24
    1da4:	31 87       	std	Z+9, r19	; 0x09
    1da6:	20 87       	std	Z+8, r18	; 0x08
    1da8:	0f 90       	pop	r0
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	2b 81       	ldd	r18, Y+3	; 0x03
    1dae:	3c 81       	ldd	r19, Y+4	; 0x04
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	82 17       	cp	r24, r18
    1db6:	93 07       	cpc	r25, r19
    1db8:	08 f1       	brcs	.+66     	; 0x1dfc <xStreamBufferReceive+0x104>
    1dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbc:	98 89       	ldd	r25, Y+16	; 0x10
    1dbe:	a9 89       	ldd	r26, Y+17	; 0x11
    1dc0:	ba 89       	ldd	r27, Y+18	; 0x12
    1dc2:	5c 01       	movw	r10, r24
    1dc4:	6d 01       	movw	r12, r26
    1dc6:	e1 2c       	mov	r14, r1
    1dc8:	f1 2c       	mov	r15, r1
    1dca:	00 e0       	ldi	r16, 0x00	; 0
    1dcc:	10 e0       	ldi	r17, 0x00	; 0
    1dce:	98 01       	movw	r18, r16
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	50 e0       	ldi	r21, 0x00	; 0
    1dd4:	ba 01       	movw	r22, r20
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <xTaskGenericNotifyWait>
    1ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dde:	98 85       	ldd	r25, Y+8	; 0x08
    1de0:	fc 01       	movw	r30, r24
    1de2:	11 86       	std	Z+9, r1	; 0x09
    1de4:	10 86       	std	Z+8, r1	; 0x08
    1de6:	8f 81       	ldd	r24, Y+7	; 0x07
    1de8:	98 85       	ldd	r25, Y+8	; 0x08
    1dea:	ec d1       	rcall	.+984    	; 0x21c4 <prvBytesInBuffer>
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	05 c0       	rjmp	.+10     	; 0x1dfc <xStreamBufferReceive+0x104>
    1df2:	8f 81       	ldd	r24, Y+7	; 0x07
    1df4:	98 85       	ldd	r25, Y+8	; 0x08
    1df6:	e6 d1       	rcall	.+972    	; 0x21c4 <prvBytesInBuffer>
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
    1dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	82 17       	cp	r24, r18
    1e06:	93 07       	cpc	r25, r19
    1e08:	70 f5       	brcc	.+92     	; 0x1e66 <xStreamBufferReceive+0x16e>
    1e0a:	ed 81       	ldd	r30, Y+5	; 0x05
    1e0c:	fe 81       	ldd	r31, Y+6	; 0x06
    1e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e10:	3c 81       	ldd	r19, Y+4	; 0x04
    1e12:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e14:	5e 85       	ldd	r21, Y+14	; 0x0e
    1e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1c:	98 85       	ldd	r25, Y+8	; 0x08
    1e1e:	8f 01       	movw	r16, r30
    1e20:	35 d0       	rcall	.+106    	; 0x1e8c <prvReadMessageFromBuffer>
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2a:	89 2b       	or	r24, r25
    1e2c:	e1 f0       	breq	.+56     	; 0x1e66 <xStreamBufferReceive+0x16e>
    1e2e:	ad d5       	rcall	.+2906   	; 0x298a <vTaskSuspendAll>
    1e30:	8f 81       	ldd	r24, Y+7	; 0x07
    1e32:	98 85       	ldd	r25, Y+8	; 0x08
    1e34:	fc 01       	movw	r30, r24
    1e36:	82 85       	ldd	r24, Z+10	; 0x0a
    1e38:	93 85       	ldd	r25, Z+11	; 0x0b
    1e3a:	89 2b       	or	r24, r25
    1e3c:	99 f0       	breq	.+38     	; 0x1e64 <xStreamBufferReceive+0x16c>
    1e3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e40:	98 85       	ldd	r25, Y+8	; 0x08
    1e42:	fc 01       	movw	r30, r24
    1e44:	82 85       	ldd	r24, Z+10	; 0x0a
    1e46:	93 85       	ldd	r25, Z+11	; 0x0b
    1e48:	e1 2c       	mov	r14, r1
    1e4a:	f1 2c       	mov	r15, r1
    1e4c:	00 e0       	ldi	r16, 0x00	; 0
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	a9 01       	movw	r20, r18
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <xTaskGenericNotify>
    1e5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5c:	98 85       	ldd	r25, Y+8	; 0x08
    1e5e:	fc 01       	movw	r30, r24
    1e60:	13 86       	std	Z+11, r1	; 0x0b
    1e62:	12 86       	std	Z+10, r1	; 0x0a
    1e64:	9f d5       	rcall	.+2878   	; 0x29a4 <xTaskResumeAll>
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6a:	62 96       	adiw	r28, 0x12	; 18
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	bf 90       	pop	r11
    1e88:	af 90       	pop	r10
    1e8a:	08 95       	ret

00001e8c <prvReadMessageFromBuffer>:
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	62 97       	sbiw	r28, 0x12	; 18
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	9a 87       	std	Y+10, r25	; 0x0a
    1ea6:	89 87       	std	Y+9, r24	; 0x09
    1ea8:	7c 87       	std	Y+12, r23	; 0x0c
    1eaa:	6b 87       	std	Y+11, r22	; 0x0b
    1eac:	5e 87       	std	Y+14, r21	; 0x0e
    1eae:	4d 87       	std	Y+13, r20	; 0x0d
    1eb0:	38 8b       	std	Y+16, r19	; 0x10
    1eb2:	2f 87       	std	Y+15, r18	; 0x0f
    1eb4:	1a 8b       	std	Y+18, r17	; 0x12
    1eb6:	09 8b       	std	Y+17, r16	; 0x11
    1eb8:	89 89       	ldd	r24, Y+17	; 0x11
    1eba:	9a 89       	ldd	r25, Y+18	; 0x12
    1ebc:	89 2b       	or	r24, r25
    1ebe:	81 f1       	breq	.+96     	; 0x1f20 <prvReadMessageFromBuffer+0x94>
    1ec0:	89 85       	ldd	r24, Y+9	; 0x09
    1ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	9c 83       	std	Y+4, r25	; 0x04
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
    1ece:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ed0:	38 89       	ldd	r19, Y+16	; 0x10
    1ed2:	49 89       	ldd	r20, Y+17	; 0x11
    1ed4:	5a 89       	ldd	r21, Y+18	; 0x12
    1ed6:	be 01       	movw	r22, r28
    1ed8:	69 5f       	subi	r22, 0xF9	; 249
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	ca d0       	rcall	.+404    	; 0x2076 <prvReadBytesFromBuffer>
    1ee2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee4:	98 85       	ldd	r25, Y+8	; 0x08
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	2f 85       	ldd	r18, Y+15	; 0x0f
    1eec:	38 89       	ldd	r19, Y+16	; 0x10
    1eee:	89 89       	ldd	r24, Y+17	; 0x11
    1ef0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	48 1b       	sub	r20, r24
    1ef6:	59 0b       	sbc	r21, r25
    1ef8:	ca 01       	movw	r24, r20
    1efa:	98 8b       	std	Y+16, r25	; 0x10
    1efc:	8f 87       	std	Y+15, r24	; 0x0f
    1efe:	29 81       	ldd	r18, Y+1	; 0x01
    1f00:	3a 81       	ldd	r19, Y+2	; 0x02
    1f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f06:	82 17       	cp	r24, r18
    1f08:	93 07       	cpc	r25, r19
    1f0a:	70 f4       	brcc	.+28     	; 0x1f28 <prvReadMessageFromBuffer+0x9c>
    1f0c:	89 85       	ldd	r24, Y+9	; 0x09
    1f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f10:	2b 81       	ldd	r18, Y+3	; 0x03
    1f12:	3c 81       	ldd	r19, Y+4	; 0x04
    1f14:	fc 01       	movw	r30, r24
    1f16:	31 83       	std	Z+1, r19	; 0x01
    1f18:	20 83       	st	Z, r18
    1f1a:	1a 82       	std	Y+2, r1	; 0x02
    1f1c:	19 82       	std	Y+1, r1	; 0x01
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <prvReadMessageFromBuffer+0x9c>
    1f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f24:	9a 83       	std	Y+2, r25	; 0x02
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	2f 85       	ldd	r18, Y+15	; 0x0f
    1f2a:	38 89       	ldd	r19, Y+16	; 0x10
    1f2c:	49 81       	ldd	r20, Y+1	; 0x01
    1f2e:	5a 81       	ldd	r21, Y+2	; 0x02
    1f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	9e d0       	rcall	.+316    	; 0x2076 <prvReadBytesFromBuffer>
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	62 96       	adiw	r28, 0x12	; 18
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	08 95       	ret

00001f58 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	2e 97       	sbiw	r28, 0x0e	; 14
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	9a 87       	std	Y+10, r25	; 0x0a
    1f6e:	89 87       	std	Y+9, r24	; 0x09
    1f70:	7c 87       	std	Y+12, r23	; 0x0c
    1f72:	6b 87       	std	Y+11, r22	; 0x0b
    1f74:	5e 87       	std	Y+14, r21	; 0x0e
    1f76:	4d 87       	std	Y+13, r20	; 0x0d
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    1f78:	89 85       	ldd	r24, Y+9	; 0x09
    1f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	24 81       	ldd	r18, Z+4	; 0x04
    1f8e:	35 81       	ldd	r19, Z+5	; 0x05
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	9a 81       	ldd	r25, Y+2	; 0x02
    1f94:	a9 01       	movw	r20, r18
    1f96:	48 1b       	sub	r20, r24
    1f98:	59 0b       	sbc	r21, r25
    1f9a:	ca 01       	movw	r24, r20
    1f9c:	9c 83       	std	Y+4, r25	; 0x04
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
    1fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
    1fa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1faa:	3c 81       	ldd	r19, Y+4	; 0x04
    1fac:	8d 81       	ldd	r24, Y+5	; 0x05
    1fae:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb0:	28 17       	cp	r18, r24
    1fb2:	39 07       	cpc	r19, r25
    1fb4:	08 f4       	brcc	.+2      	; 0x1fb8 <prvWriteBytesToBuffer+0x60>
    1fb6:	c9 01       	movw	r24, r18
    1fb8:	98 87       	std	Y+8, r25	; 0x08
    1fba:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	24 85       	ldd	r18, Z+12	; 0x0c
    1fc4:	35 85       	ldd	r19, Z+13	; 0x0d
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fca:	82 0f       	add	r24, r18
    1fcc:	93 1f       	adc	r25, r19
    1fce:	4f 81       	ldd	r20, Y+7	; 0x07
    1fd0:	58 85       	ldd	r21, Y+8	; 0x08
    1fd2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fd4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fd6:	b9 01       	movw	r22, r18
    1fd8:	0e 94 24 3a 	call	0x7448	; 0x7448 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    1fdc:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fde:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fe0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe2:	98 85       	ldd	r25, Y+8	; 0x08
    1fe4:	82 17       	cp	r24, r18
    1fe6:	93 07       	cpc	r25, r19
    1fe8:	a8 f4       	brcc	.+42     	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    1fea:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fec:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff0:	98 85       	ldd	r25, Y+8	; 0x08
    1ff2:	a9 01       	movw	r20, r18
    1ff4:	48 1b       	sub	r20, r24
    1ff6:	59 0b       	sbc	r21, r25
    1ff8:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ffa:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ffc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ffe:	98 85       	ldd	r25, Y+8	; 0x08
    2000:	28 0f       	add	r18, r24
    2002:	39 1f       	adc	r19, r25
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	fc 01       	movw	r30, r24
    200a:	84 85       	ldd	r24, Z+12	; 0x0c
    200c:	95 85       	ldd	r25, Z+13	; 0x0d
    200e:	b9 01       	movw	r22, r18
    2010:	0e 94 24 3a 	call	0x7448	; 0x7448 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    2014:	29 81       	ldd	r18, Y+1	; 0x01
    2016:	3a 81       	ldd	r19, Y+2	; 0x02
    2018:	8d 85       	ldd	r24, Y+13	; 0x0d
    201a:	9e 85       	ldd	r25, Y+14	; 0x0e
    201c:	82 0f       	add	r24, r18
    201e:	93 1f       	adc	r25, r19
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01

    if( xNextHead >= pxStreamBuffer->xLength )
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	fc 01       	movw	r30, r24
    202a:	24 81       	ldd	r18, Z+4	; 0x04
    202c:	35 81       	ldd	r19, Z+5	; 0x05
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	82 17       	cp	r24, r18
    2034:	93 07       	cpc	r25, r19
    2036:	68 f0       	brcs	.+26     	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    {
        xNextHead -= pxStreamBuffer->xLength;
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	fc 01       	movw	r30, r24
    203e:	84 81       	ldd	r24, Z+4	; 0x04
    2040:	95 81       	ldd	r25, Z+5	; 0x05
    2042:	29 81       	ldd	r18, Y+1	; 0x01
    2044:	3a 81       	ldd	r19, Y+2	; 0x02
    2046:	a9 01       	movw	r20, r18
    2048:	48 1b       	sub	r20, r24
    204a:	59 0b       	sbc	r21, r25
    204c:	ca 01       	movw	r24, r20
    204e:	9a 83       	std	Y+2, r25	; 0x02
    2050:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    2052:	89 85       	ldd	r24, Y+9	; 0x09
    2054:	9a 85       	ldd	r25, Y+10	; 0x0a
    2056:	29 81       	ldd	r18, Y+1	; 0x01
    2058:	3a 81       	ldd	r19, Y+2	; 0x02
    205a:	fc 01       	movw	r30, r24
    205c:	33 83       	std	Z+3, r19	; 0x03
    205e:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    2060:	8d 85       	ldd	r24, Y+13	; 0x0d
    2062:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    2064:	2e 96       	adiw	r28, 0x0e	; 14
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	de bf       	out	0x3e, r29	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	cd bf       	out	0x3d, r28	; 61
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	08 95       	ret

00002076 <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	66 97       	sbiw	r28, 0x16	; 22
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	98 8b       	std	Y+16, r25	; 0x10
    208c:	8f 87       	std	Y+15, r24	; 0x0f
    208e:	7a 8b       	std	Y+18, r23	; 0x12
    2090:	69 8b       	std	Y+17, r22	; 0x11
    2092:	5c 8b       	std	Y+20, r21	; 0x14
    2094:	4b 8b       	std	Y+19, r20	; 0x13
    2096:	3e 8b       	std	Y+22, r19	; 0x16
    2098:	2d 8b       	std	Y+21, r18	; 0x15
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    209a:	8d 89       	ldd	r24, Y+21	; 0x15
    209c:	9e 89       	ldd	r25, Y+22	; 0x16
    209e:	9c 83       	std	Y+4, r25	; 0x04
    20a0:	8b 83       	std	Y+3, r24	; 0x03
    20a2:	8b 89       	ldd	r24, Y+19	; 0x13
    20a4:	9c 89       	ldd	r25, Y+20	; 0x14
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	2b 81       	ldd	r18, Y+3	; 0x03
    20ac:	3c 81       	ldd	r19, Y+4	; 0x04
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	28 17       	cp	r18, r24
    20b4:	39 07       	cpc	r19, r25
    20b6:	08 f4       	brcc	.+2      	; 0x20ba <prvReadBytesFromBuffer+0x44>
    20b8:	c9 01       	movw	r24, r18
    20ba:	98 87       	std	Y+8, r25	; 0x08
    20bc:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    20be:	8f 81       	ldd	r24, Y+7	; 0x07
    20c0:	98 85       	ldd	r25, Y+8	; 0x08
    20c2:	89 2b       	or	r24, r25
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <prvReadBytesFromBuffer+0x52>
    20c6:	73 c0       	rjmp	.+230    	; 0x21ae <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    20c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ca:	98 89       	ldd	r25, Y+16	; 0x10
    20cc:	fc 01       	movw	r30, r24
    20ce:	80 81       	ld	r24, Z
    20d0:	91 81       	ldd	r25, Z+1	; 0x01
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    20d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20d8:	98 89       	ldd	r25, Y+16	; 0x10
    20da:	fc 01       	movw	r30, r24
    20dc:	24 81       	ldd	r18, Z+4	; 0x04
    20de:	35 81       	ldd	r19, Z+5	; 0x05
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	a9 01       	movw	r20, r18
    20e6:	48 1b       	sub	r20, r24
    20e8:	59 0b       	sbc	r21, r25
    20ea:	ca 01       	movw	r24, r20
    20ec:	9a 87       	std	Y+10, r25	; 0x0a
    20ee:	89 87       	std	Y+9, r24	; 0x09
    20f0:	8f 81       	ldd	r24, Y+7	; 0x07
    20f2:	98 85       	ldd	r25, Y+8	; 0x08
    20f4:	9c 87       	std	Y+12, r25	; 0x0c
    20f6:	8b 87       	std	Y+11, r24	; 0x0b
    20f8:	29 85       	ldd	r18, Y+9	; 0x09
    20fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    20fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    20fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    2100:	28 17       	cp	r18, r24
    2102:	39 07       	cpc	r19, r25
    2104:	08 f4       	brcc	.+2      	; 0x2108 <prvReadBytesFromBuffer+0x92>
    2106:	c9 01       	movw	r24, r18
    2108:	9e 87       	std	Y+14, r25	; 0x0e
    210a:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    210c:	8f 85       	ldd	r24, Y+15	; 0x0f
    210e:	98 89       	ldd	r25, Y+16	; 0x10
    2110:	fc 01       	movw	r30, r24
    2112:	24 85       	ldd	r18, Z+12	; 0x0c
    2114:	35 85       	ldd	r19, Z+13	; 0x0d
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	9a 81       	ldd	r25, Y+2	; 0x02
    211a:	28 0f       	add	r18, r24
    211c:	39 1f       	adc	r19, r25
    211e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2120:	5e 85       	ldd	r21, Y+14	; 0x0e
    2122:	89 89       	ldd	r24, Y+17	; 0x11
    2124:	9a 89       	ldd	r25, Y+18	; 0x12
    2126:	b9 01       	movw	r22, r18
    2128:	0e 94 24 3a 	call	0x7448	; 0x7448 <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
    212c:	2f 81       	ldd	r18, Y+7	; 0x07
    212e:	38 85       	ldd	r19, Y+8	; 0x08
    2130:	8d 85       	ldd	r24, Y+13	; 0x0d
    2132:	9e 85       	ldd	r25, Y+14	; 0x0e
    2134:	82 17       	cp	r24, r18
    2136:	93 07       	cpc	r25, r19
    2138:	a0 f4       	brcc	.+40     	; 0x2162 <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    213a:	2f 81       	ldd	r18, Y+7	; 0x07
    213c:	38 85       	ldd	r19, Y+8	; 0x08
    213e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2140:	9e 85       	ldd	r25, Y+14	; 0x0e
    2142:	a9 01       	movw	r20, r18
    2144:	48 1b       	sub	r20, r24
    2146:	59 0b       	sbc	r21, r25
    2148:	8f 85       	ldd	r24, Y+15	; 0x0f
    214a:	98 89       	ldd	r25, Y+16	; 0x10
    214c:	fc 01       	movw	r30, r24
    214e:	64 85       	ldd	r22, Z+12	; 0x0c
    2150:	75 85       	ldd	r23, Z+13	; 0x0d
    2152:	29 89       	ldd	r18, Y+17	; 0x11
    2154:	3a 89       	ldd	r19, Y+18	; 0x12
    2156:	8d 85       	ldd	r24, Y+13	; 0x0d
    2158:	9e 85       	ldd	r25, Y+14	; 0x0e
    215a:	82 0f       	add	r24, r18
    215c:	93 1f       	adc	r25, r19
    215e:	0e 94 24 3a 	call	0x7448	; 0x7448 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
    2162:	29 81       	ldd	r18, Y+1	; 0x01
    2164:	3a 81       	ldd	r19, Y+2	; 0x02
    2166:	8f 81       	ldd	r24, Y+7	; 0x07
    2168:	98 85       	ldd	r25, Y+8	; 0x08
    216a:	82 0f       	add	r24, r18
    216c:	93 1f       	adc	r25, r19
    216e:	9a 83       	std	Y+2, r25	; 0x02
    2170:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    2172:	8f 85       	ldd	r24, Y+15	; 0x0f
    2174:	98 89       	ldd	r25, Y+16	; 0x10
    2176:	fc 01       	movw	r30, r24
    2178:	24 81       	ldd	r18, Z+4	; 0x04
    217a:	35 81       	ldd	r19, Z+5	; 0x05
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	9a 81       	ldd	r25, Y+2	; 0x02
    2180:	82 17       	cp	r24, r18
    2182:	93 07       	cpc	r25, r19
    2184:	68 f0       	brcs	.+26     	; 0x21a0 <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    2186:	8f 85       	ldd	r24, Y+15	; 0x0f
    2188:	98 89       	ldd	r25, Y+16	; 0x10
    218a:	fc 01       	movw	r30, r24
    218c:	84 81       	ldd	r24, Z+4	; 0x04
    218e:	95 81       	ldd	r25, Z+5	; 0x05
    2190:	29 81       	ldd	r18, Y+1	; 0x01
    2192:	3a 81       	ldd	r19, Y+2	; 0x02
    2194:	a9 01       	movw	r20, r18
    2196:	48 1b       	sub	r20, r24
    2198:	59 0b       	sbc	r21, r25
    219a:	ca 01       	movw	r24, r20
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    21a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a2:	98 89       	ldd	r25, Y+16	; 0x10
    21a4:	29 81       	ldd	r18, Y+1	; 0x01
    21a6:	3a 81       	ldd	r19, Y+2	; 0x02
    21a8:	fc 01       	movw	r30, r24
    21aa:	31 83       	std	Z+1, r19	; 0x01
    21ac:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    21ae:	8f 81       	ldd	r24, Y+7	; 0x07
    21b0:	98 85       	ldd	r25, Y+8	; 0x08
}
    21b2:	66 96       	adiw	r28, 0x16	; 22
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	08 95       	ret

000021c4 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <prvBytesInBuffer+0x6>
    21ca:	1f 92       	push	r1
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	9c 83       	std	Y+4, r25	; 0x04
    21d2:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	fc 01       	movw	r30, r24
    21da:	24 81       	ldd	r18, Z+4	; 0x04
    21dc:	35 81       	ldd	r19, Z+5	; 0x05
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	9c 81       	ldd	r25, Y+4	; 0x04
    21e2:	fc 01       	movw	r30, r24
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	82 0f       	add	r24, r18
    21ea:	93 1f       	adc	r25, r19
    21ec:	9a 83       	std	Y+2, r25	; 0x02
    21ee:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	fc 01       	movw	r30, r24
    21f6:	80 81       	ld	r24, Z
    21f8:	91 81       	ldd	r25, Z+1	; 0x01
    21fa:	29 81       	ldd	r18, Y+1	; 0x01
    21fc:	3a 81       	ldd	r19, Y+2	; 0x02
    21fe:	a9 01       	movw	r20, r18
    2200:	48 1b       	sub	r20, r24
    2202:	59 0b       	sbc	r21, r25
    2204:	ca 01       	movw	r24, r20
    2206:	9a 83       	std	Y+2, r25	; 0x02
    2208:	89 83       	std	Y+1, r24	; 0x01

    if( xCount >= pxStreamBuffer->xLength )
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	fc 01       	movw	r30, r24
    2210:	24 81       	ldd	r18, Z+4	; 0x04
    2212:	35 81       	ldd	r19, Z+5	; 0x05
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	82 17       	cp	r24, r18
    221a:	93 07       	cpc	r25, r19
    221c:	68 f0       	brcs	.+26     	; 0x2238 <__stack+0x39>
    {
        xCount -= pxStreamBuffer->xLength;
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	9c 81       	ldd	r25, Y+4	; 0x04
    2222:	fc 01       	movw	r30, r24
    2224:	84 81       	ldd	r24, Z+4	; 0x04
    2226:	95 81       	ldd	r25, Z+5	; 0x05
    2228:	29 81       	ldd	r18, Y+1	; 0x01
    222a:	3a 81       	ldd	r19, Y+2	; 0x02
    222c:	a9 01       	movw	r20, r18
    222e:	48 1b       	sub	r20, r24
    2230:	59 0b       	sbc	r21, r25
    2232:	ca 01       	movw	r24, r20
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	08 95       	ret

0000224a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    224a:	0f 93       	push	r16
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	29 97       	sbiw	r28, 0x09	; 9
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	7c 83       	std	Y+4, r23	; 0x04
    2266:	6b 83       	std	Y+3, r22	; 0x03
    2268:	5e 83       	std	Y+6, r21	; 0x06
    226a:	4d 83       	std	Y+5, r20	; 0x05
    226c:	38 87       	std	Y+8, r19	; 0x08
    226e:	2f 83       	std	Y+7, r18	; 0x07
    2270:	09 87       	std	Y+9, r16	; 0x09
            const BaseType_t xWriteValue = 0x55;
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	4f e0       	ldi	r20, 0x0F	; 15
    2278:	50 e0       	ldi	r21, 0x00	; 0
    227a:	60 e0       	ldi	r22, 0x00	; 0
    227c:	70 e0       	ldi	r23, 0x00	; 0
    227e:	0e 94 2d 3a 	call	0x745a	; 0x745a <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	2b 81       	ldd	r18, Y+3	; 0x03
    2288:	3c 81       	ldd	r19, Y+4	; 0x04
    228a:	fc 01       	movw	r30, r24
    228c:	35 87       	std	Z+13, r19	; 0x0d
    228e:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	9a 81       	ldd	r25, Y+2	; 0x02
    2294:	2d 81       	ldd	r18, Y+5	; 0x05
    2296:	3e 81       	ldd	r19, Y+6	; 0x06
    2298:	fc 01       	movw	r30, r24
    229a:	35 83       	std	Z+5, r19	; 0x05
    229c:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	2f 81       	ldd	r18, Y+7	; 0x07
    22a4:	38 85       	ldd	r19, Y+8	; 0x08
    22a6:	fc 01       	movw	r30, r24
    22a8:	37 83       	std	Z+7, r19	; 0x07
    22aa:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	29 85       	ldd	r18, Y+9	; 0x09
    22b2:	fc 01       	movw	r30, r24
    22b4:	26 87       	std	Z+14, r18	; 0x0e
}
    22b6:	00 00       	nop
    22b8:	29 96       	adiw	r28, 0x09	; 9
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	0f 91       	pop	r16
    22ca:	08 95       	ret

000022cc <xTaskCreate>:
    22cc:	af 92       	push	r10
    22ce:	bf 92       	push	r11
    22d0:	cf 92       	push	r12
    22d2:	df 92       	push	r13
    22d4:	ef 92       	push	r14
    22d6:	ff 92       	push	r15
    22d8:	0f 93       	push	r16
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	60 97       	sbiw	r28, 0x10	; 16
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	9f 83       	std	Y+7, r25	; 0x07
    22f0:	8e 83       	std	Y+6, r24	; 0x06
    22f2:	79 87       	std	Y+9, r23	; 0x09
    22f4:	68 87       	std	Y+8, r22	; 0x08
    22f6:	5b 87       	std	Y+11, r21	; 0x0b
    22f8:	4a 87       	std	Y+10, r20	; 0x0a
    22fa:	3d 87       	std	Y+13, r19	; 0x0d
    22fc:	2c 87       	std	Y+12, r18	; 0x0c
    22fe:	0e 87       	std	Y+14, r16	; 0x0e
    2300:	f8 8a       	std	Y+16, r15	; 0x10
    2302:	ef 86       	std	Y+15, r14	; 0x0f
    2304:	8a 85       	ldd	r24, Y+10	; 0x0a
    2306:	9b 85       	ldd	r25, Y+11	; 0x0b
    2308:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pvPortMalloc>
    230c:	9d 83       	std	Y+5, r25	; 0x05
    230e:	8c 83       	std	Y+4, r24	; 0x04
    2310:	8c 81       	ldd	r24, Y+4	; 0x04
    2312:	9d 81       	ldd	r25, Y+5	; 0x05
    2314:	89 2b       	or	r24, r25
    2316:	b9 f0       	breq	.+46     	; 0x2346 <xTaskCreate+0x7a>
    2318:	84 e3       	ldi	r24, 0x34	; 52
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <pvPortMalloc>
    2320:	9a 83       	std	Y+2, r25	; 0x02
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	9a 81       	ldd	r25, Y+2	; 0x02
    2328:	89 2b       	or	r24, r25
    232a:	41 f0       	breq	.+16     	; 0x233c <xTaskCreate+0x70>
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	9a 81       	ldd	r25, Y+2	; 0x02
    2330:	2c 81       	ldd	r18, Y+4	; 0x04
    2332:	3d 81       	ldd	r19, Y+5	; 0x05
    2334:	fc 01       	movw	r30, r24
    2336:	34 8f       	std	Z+28, r19	; 0x1c
    2338:	23 8f       	std	Z+27, r18	; 0x1b
    233a:	07 c0       	rjmp	.+14     	; 0x234a <xTaskCreate+0x7e>
    233c:	8c 81       	ldd	r24, Y+4	; 0x04
    233e:	9d 81       	ldd	r25, Y+5	; 0x05
    2340:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vPortFree>
    2344:	02 c0       	rjmp	.+4      	; 0x234a <xTaskCreate+0x7e>
    2346:	1a 82       	std	Y+2, r1	; 0x02
    2348:	19 82       	std	Y+1, r1	; 0x01
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	89 2b       	or	r24, r25
    2350:	c1 f0       	breq	.+48     	; 0x2382 <xTaskCreate+0xb6>
    2352:	a9 81       	ldd	r26, Y+1	; 0x01
    2354:	ba 81       	ldd	r27, Y+2	; 0x02
    2356:	ef 85       	ldd	r30, Y+15	; 0x0f
    2358:	f8 89       	ldd	r31, Y+16	; 0x10
    235a:	2c 85       	ldd	r18, Y+12	; 0x0c
    235c:	3d 85       	ldd	r19, Y+13	; 0x0d
    235e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2360:	5b 85       	ldd	r21, Y+11	; 0x0b
    2362:	68 85       	ldd	r22, Y+8	; 0x08
    2364:	79 85       	ldd	r23, Y+9	; 0x09
    2366:	8e 81       	ldd	r24, Y+6	; 0x06
    2368:	9f 81       	ldd	r25, Y+7	; 0x07
    236a:	a1 2c       	mov	r10, r1
    236c:	b1 2c       	mov	r11, r1
    236e:	6d 01       	movw	r12, r26
    2370:	7f 01       	movw	r14, r30
    2372:	0e 85       	ldd	r16, Y+14	; 0x0e
    2374:	19 d0       	rcall	.+50     	; 0x23a8 <prvInitialiseNewTask>
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	05 d1       	rcall	.+522    	; 0x2586 <prvAddNewTaskToReadyList>
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	8b 83       	std	Y+3, r24	; 0x03
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <xTaskCreate+0xba>
    2382:	8f ef       	ldi	r24, 0xFF	; 255
    2384:	8b 83       	std	Y+3, r24	; 0x03
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	60 96       	adiw	r28, 0x10	; 16
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	bf 90       	pop	r11
    23a4:	af 90       	pop	r10
    23a6:	08 95       	ret

000023a8 <prvInitialiseNewTask>:
    23a8:	af 92       	push	r10
    23aa:	bf 92       	push	r11
    23ac:	cf 92       	push	r12
    23ae:	df 92       	push	r13
    23b0:	ef 92       	push	r14
    23b2:	ff 92       	push	r15
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	62 97       	sbiw	r28, 0x12	; 18
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	9d 83       	std	Y+5, r25	; 0x05
    23ce:	8c 83       	std	Y+4, r24	; 0x04
    23d0:	7f 83       	std	Y+7, r23	; 0x07
    23d2:	6e 83       	std	Y+6, r22	; 0x06
    23d4:	59 87       	std	Y+9, r21	; 0x09
    23d6:	48 87       	std	Y+8, r20	; 0x08
    23d8:	3b 87       	std	Y+11, r19	; 0x0b
    23da:	2a 87       	std	Y+10, r18	; 0x0a
    23dc:	0c 87       	std	Y+12, r16	; 0x0c
    23de:	fe 86       	std	Y+14, r15	; 0x0e
    23e0:	ed 86       	std	Y+13, r14	; 0x0d
    23e2:	d8 8a       	std	Y+16, r13	; 0x10
    23e4:	cf 86       	std	Y+15, r12	; 0x0f
    23e6:	ba 8a       	std	Y+18, r11	; 0x12
    23e8:	a9 8a       	std	Y+17, r10	; 0x11
    23ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ec:	98 89       	ldd	r25, Y+16	; 0x10
    23ee:	fc 01       	movw	r30, r24
    23f0:	83 8d       	ldd	r24, Z+27	; 0x1b
    23f2:	94 8d       	ldd	r25, Z+28	; 0x1c
    23f4:	28 85       	ldd	r18, Y+8	; 0x08
    23f6:	39 85       	ldd	r19, Y+9	; 0x09
    23f8:	a9 01       	movw	r20, r18
    23fa:	65 ea       	ldi	r22, 0xA5	; 165
    23fc:	70 e0       	ldi	r23, 0x00	; 0
    23fe:	0e 94 2d 3a 	call	0x745a	; 0x745a <memset>
    2402:	8f 85       	ldd	r24, Y+15	; 0x0f
    2404:	98 89       	ldd	r25, Y+16	; 0x10
    2406:	fc 01       	movw	r30, r24
    2408:	23 8d       	ldd	r18, Z+27	; 0x1b
    240a:	34 8d       	ldd	r19, Z+28	; 0x1c
    240c:	88 85       	ldd	r24, Y+8	; 0x08
    240e:	99 85       	ldd	r25, Y+9	; 0x09
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	82 0f       	add	r24, r18
    2414:	93 1f       	adc	r25, r19
    2416:	9b 83       	std	Y+3, r25	; 0x03
    2418:	8a 83       	std	Y+2, r24	; 0x02
    241a:	8e 81       	ldd	r24, Y+6	; 0x06
    241c:	9f 81       	ldd	r25, Y+7	; 0x07
    241e:	89 2b       	or	r24, r25
    2420:	69 f1       	breq	.+90     	; 0x247c <prvInitialiseNewTask+0xd4>
    2422:	19 82       	std	Y+1, r1	; 0x01
    2424:	21 c0       	rjmp	.+66     	; 0x2468 <prvInitialiseNewTask+0xc0>
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	29 81       	ldd	r18, Y+1	; 0x01
    242e:	22 2f       	mov	r18, r18
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4e 81       	ldd	r20, Y+6	; 0x06
    2434:	5f 81       	ldd	r21, Y+7	; 0x07
    2436:	24 0f       	add	r18, r20
    2438:	35 1f       	adc	r19, r21
    243a:	f9 01       	movw	r30, r18
    243c:	40 81       	ld	r20, Z
    243e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2440:	38 89       	ldd	r19, Y+16	; 0x10
    2442:	82 0f       	add	r24, r18
    2444:	93 1f       	adc	r25, r19
    2446:	4d 96       	adiw	r24, 0x1d	; 29
    2448:	fc 01       	movw	r30, r24
    244a:	40 83       	st	Z, r20
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	2e 81       	ldd	r18, Y+6	; 0x06
    2454:	3f 81       	ldd	r19, Y+7	; 0x07
    2456:	82 0f       	add	r24, r18
    2458:	93 1f       	adc	r25, r19
    245a:	fc 01       	movw	r30, r24
    245c:	80 81       	ld	r24, Z
    245e:	88 23       	and	r24, r24
    2460:	39 f0       	breq	.+14     	; 0x2470 <prvInitialiseNewTask+0xc8>
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	8f 5f       	subi	r24, 0xFF	; 255
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	89 81       	ldd	r24, Y+1	; 0x01
    246a:	80 31       	cpi	r24, 0x10	; 16
    246c:	e0 f2       	brcs	.-72     	; 0x2426 <prvInitialiseNewTask+0x7e>
    246e:	01 c0       	rjmp	.+2      	; 0x2472 <prvInitialiseNewTask+0xca>
    2470:	00 00       	nop
    2472:	8f 85       	ldd	r24, Y+15	; 0x0f
    2474:	98 89       	ldd	r25, Y+16	; 0x10
    2476:	fc 01       	movw	r30, r24
    2478:	14 a6       	std	Z+44, r1	; 0x2c
    247a:	04 c0       	rjmp	.+8      	; 0x2484 <prvInitialiseNewTask+0xdc>
    247c:	8f 85       	ldd	r24, Y+15	; 0x0f
    247e:	98 89       	ldd	r25, Y+16	; 0x10
    2480:	fc 01       	movw	r30, r24
    2482:	15 8e       	std	Z+29, r1	; 0x1d
    2484:	8c 85       	ldd	r24, Y+12	; 0x0c
    2486:	8a 30       	cpi	r24, 0x0A	; 10
    2488:	10 f0       	brcs	.+4      	; 0x248e <prvInitialiseNewTask+0xe6>
    248a:	89 e0       	ldi	r24, 0x09	; 9
    248c:	8c 87       	std	Y+12, r24	; 0x0c
    248e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2490:	98 89       	ldd	r25, Y+16	; 0x10
    2492:	2c 85       	ldd	r18, Y+12	; 0x0c
    2494:	fc 01       	movw	r30, r24
    2496:	22 8f       	std	Z+26, r18	; 0x1a
    2498:	8f 85       	ldd	r24, Y+15	; 0x0f
    249a:	98 89       	ldd	r25, Y+16	; 0x10
    249c:	2c 85       	ldd	r18, Y+12	; 0x0c
    249e:	fc 01       	movw	r30, r24
    24a0:	25 a7       	std	Z+45, r18	; 0x2d
    24a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a4:	98 89       	ldd	r25, Y+16	; 0x10
    24a6:	fc 01       	movw	r30, r24
    24a8:	16 a6       	std	Z+46, r1	; 0x2e
    24aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ac:	98 89       	ldd	r25, Y+16	; 0x10
    24ae:	02 96       	adiw	r24, 0x02	; 2
    24b0:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInitialiseItem>
    24b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b6:	98 89       	ldd	r25, Y+16	; 0x10
    24b8:	0e 96       	adiw	r24, 0x0e	; 14
    24ba:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInitialiseItem>
    24be:	8f 85       	ldd	r24, Y+15	; 0x0f
    24c0:	98 89       	ldd	r25, Y+16	; 0x10
    24c2:	2f 85       	ldd	r18, Y+15	; 0x0f
    24c4:	38 89       	ldd	r19, Y+16	; 0x10
    24c6:	fc 01       	movw	r30, r24
    24c8:	33 87       	std	Z+11, r19	; 0x0b
    24ca:	22 87       	std	Z+10, r18	; 0x0a
    24cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	a0 e0       	ldi	r26, 0x00	; 0
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	2a e0       	ldi	r18, 0x0A	; 10
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e0       	ldi	r20, 0x00	; 0
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	79 01       	movw	r14, r18
    24e0:	8a 01       	movw	r16, r20
    24e2:	e8 1a       	sub	r14, r24
    24e4:	f9 0a       	sbc	r15, r25
    24e6:	0a 0b       	sbc	r16, r26
    24e8:	1b 0b       	sbc	r17, r27
    24ea:	d8 01       	movw	r26, r16
    24ec:	c7 01       	movw	r24, r14
    24ee:	2f 85       	ldd	r18, Y+15	; 0x0f
    24f0:	38 89       	ldd	r19, Y+16	; 0x10
    24f2:	f9 01       	movw	r30, r18
    24f4:	86 87       	std	Z+14, r24	; 0x0e
    24f6:	97 87       	std	Z+15, r25	; 0x0f
    24f8:	a0 8b       	std	Z+16, r26	; 0x10
    24fa:	b1 8b       	std	Z+17, r27	; 0x11
    24fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fe:	98 89       	ldd	r25, Y+16	; 0x10
    2500:	2f 85       	ldd	r18, Y+15	; 0x0f
    2502:	38 89       	ldd	r19, Y+16	; 0x10
    2504:	fc 01       	movw	r30, r24
    2506:	37 8b       	std	Z+23, r19	; 0x17
    2508:	26 8b       	std	Z+22, r18	; 0x16
    250a:	8f 85       	ldd	r24, Y+15	; 0x0f
    250c:	98 89       	ldd	r25, Y+16	; 0x10
    250e:	8f 96       	adiw	r24, 0x2f	; 47
    2510:	44 e0       	ldi	r20, 0x04	; 4
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	60 e0       	ldi	r22, 0x00	; 0
    2516:	70 e0       	ldi	r23, 0x00	; 0
    2518:	0e 94 2d 3a 	call	0x745a	; 0x745a <memset>
    251c:	8f 85       	ldd	r24, Y+15	; 0x0f
    251e:	98 89       	ldd	r25, Y+16	; 0x10
    2520:	c3 96       	adiw	r24, 0x33	; 51
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	0e 94 2d 3a 	call	0x745a	; 0x745a <memset>
    252e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2530:	5b 85       	ldd	r21, Y+11	; 0x0b
    2532:	2c 81       	ldd	r18, Y+4	; 0x04
    2534:	3d 81       	ldd	r19, Y+5	; 0x05
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	9b 81       	ldd	r25, Y+3	; 0x03
    253a:	b9 01       	movw	r22, r18
    253c:	0e 94 b7 04 	call	0x96e	; 0x96e <pxPortInitialiseStack>
    2540:	9c 01       	movw	r18, r24
    2542:	8f 85       	ldd	r24, Y+15	; 0x0f
    2544:	98 89       	ldd	r25, Y+16	; 0x10
    2546:	fc 01       	movw	r30, r24
    2548:	31 83       	std	Z+1, r19	; 0x01
    254a:	20 83       	st	Z, r18
    254c:	8d 85       	ldd	r24, Y+13	; 0x0d
    254e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2550:	89 2b       	or	r24, r25
    2552:	39 f0       	breq	.+14     	; 0x2562 <prvInitialiseNewTask+0x1ba>
    2554:	8d 85       	ldd	r24, Y+13	; 0x0d
    2556:	9e 85       	ldd	r25, Y+14	; 0x0e
    2558:	2f 85       	ldd	r18, Y+15	; 0x0f
    255a:	38 89       	ldd	r19, Y+16	; 0x10
    255c:	fc 01       	movw	r30, r24
    255e:	31 83       	std	Z+1, r19	; 0x01
    2560:	20 83       	st	Z, r18
    2562:	00 00       	nop
    2564:	62 96       	adiw	r28, 0x12	; 18
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	ff 90       	pop	r15
    257a:	ef 90       	pop	r14
    257c:	df 90       	pop	r13
    257e:	cf 90       	pop	r12
    2580:	bf 90       	pop	r11
    2582:	af 90       	pop	r10
    2584:	08 95       	ret

00002586 <prvAddNewTaskToReadyList>:
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	00 d0       	rcall	.+0      	; 0x258c <prvAddNewTaskToReadyList+0x6>
    258c:	1f 92       	push	r1
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	9c 83       	std	Y+4, r25	; 0x04
    2594:	8b 83       	std	Y+3, r24	; 0x03
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	0f 92       	push	r0
    259c:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxCurrentNumberOfTasks>
    25a0:	8f 5f       	subi	r24, 0xFF	; 255
    25a2:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <uxCurrentNumberOfTasks>
    25a6:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    25aa:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    25ae:	89 2b       	or	r24, r25
    25b0:	69 f4       	brne	.+26     	; 0x25cc <prvAddNewTaskToReadyList+0x46>
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	90 93 5b 10 	sts	0x105B, r25	; 0x80105b <pxCurrentTCB+0x1>
    25ba:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <pxCurrentTCB>
    25be:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxCurrentNumberOfTasks>
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	c9 f4       	brne	.+50     	; 0x25f8 <prvAddNewTaskToReadyList+0x72>
    25c6:	0e 94 26 1c 	call	0x384c	; 0x384c <prvInitialiseTaskLists>
    25ca:	16 c0       	rjmp	.+44     	; 0x25f8 <prvAddNewTaskToReadyList+0x72>
    25cc:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <xSchedulerRunning>
    25d0:	88 23       	and	r24, r24
    25d2:	91 f4       	brne	.+36     	; 0x25f8 <prvAddNewTaskToReadyList+0x72>
    25d4:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    25d8:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    25dc:	fc 01       	movw	r30, r24
    25de:	22 8d       	ldd	r18, Z+26	; 0x1a
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	fc 01       	movw	r30, r24
    25e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    25e8:	82 17       	cp	r24, r18
    25ea:	30 f0       	brcs	.+12     	; 0x25f8 <prvAddNewTaskToReadyList+0x72>
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	90 93 5b 10 	sts	0x105B, r25	; 0x80105b <pxCurrentTCB+0x1>
    25f4:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <pxCurrentTCB>
    25f8:	80 91 13 11 	lds	r24, 0x1113	; 0x801113 <uxTaskNumber>
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	80 93 13 11 	sts	0x1113, r24	; 0x801113 <uxTaskNumber>
    2602:	8b 81       	ldd	r24, Y+3	; 0x03
    2604:	9c 81       	ldd	r25, Y+4	; 0x04
    2606:	fc 01       	movw	r30, r24
    2608:	92 8d       	ldd	r25, Z+26	; 0x1a
    260a:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <uxTopReadyPriority>
    260e:	89 17       	cp	r24, r25
    2610:	30 f4       	brcc	.+12     	; 0x261e <prvAddNewTaskToReadyList+0x98>
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	fc 01       	movw	r30, r24
    2618:	82 8d       	ldd	r24, Z+26	; 0x1a
    261a:	80 93 0b 11 	sts	0x110B, r24	; 0x80110b <uxTopReadyPriority>
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	fc 01       	movw	r30, r24
    2624:	82 8d       	ldd	r24, Z+26	; 0x1a
    2626:	28 2f       	mov	r18, r24
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4b e0       	ldi	r20, 0x0B	; 11
    262c:	42 9f       	mul	r20, r18
    262e:	c0 01       	movw	r24, r0
    2630:	43 9f       	mul	r20, r19
    2632:	90 0d       	add	r25, r0
    2634:	11 24       	eor	r1, r1
    2636:	83 5a       	subi	r24, 0xA3	; 163
    2638:	9f 4e       	sbci	r25, 0xEF	; 239
    263a:	fc 01       	movw	r30, r24
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	29 81       	ldd	r18, Y+1	; 0x01
    264a:	3a 81       	ldd	r19, Y+2	; 0x02
    264c:	fc 01       	movw	r30, r24
    264e:	37 83       	std	Z+7, r19	; 0x07
    2650:	26 83       	std	Z+6, r18	; 0x06
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	9a 81       	ldd	r25, Y+2	; 0x02
    2656:	fc 01       	movw	r30, r24
    2658:	26 81       	ldd	r18, Z+6	; 0x06
    265a:	37 81       	ldd	r19, Z+7	; 0x07
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	9c 81       	ldd	r25, Y+4	; 0x04
    2660:	fc 01       	movw	r30, r24
    2662:	31 87       	std	Z+9, r19	; 0x09
    2664:	20 87       	std	Z+8, r18	; 0x08
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	9a 81       	ldd	r25, Y+2	; 0x02
    266a:	fc 01       	movw	r30, r24
    266c:	86 81       	ldd	r24, Z+6	; 0x06
    266e:	97 81       	ldd	r25, Z+7	; 0x07
    2670:	2b 81       	ldd	r18, Y+3	; 0x03
    2672:	3c 81       	ldd	r19, Y+4	; 0x04
    2674:	2e 5f       	subi	r18, 0xFE	; 254
    2676:	3f 4f       	sbci	r19, 0xFF	; 255
    2678:	fc 01       	movw	r30, r24
    267a:	35 83       	std	Z+5, r19	; 0x05
    267c:	24 83       	std	Z+4, r18	; 0x04
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	9c 01       	movw	r18, r24
    2684:	2e 5f       	subi	r18, 0xFE	; 254
    2686:	3f 4f       	sbci	r19, 0xFF	; 255
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	9a 81       	ldd	r25, Y+2	; 0x02
    268c:	fc 01       	movw	r30, r24
    268e:	37 83       	std	Z+7, r19	; 0x07
    2690:	26 83       	std	Z+6, r18	; 0x06
    2692:	8b 81       	ldd	r24, Y+3	; 0x03
    2694:	9c 81       	ldd	r25, Y+4	; 0x04
    2696:	fc 01       	movw	r30, r24
    2698:	82 8d       	ldd	r24, Z+26	; 0x1a
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	4b e0       	ldi	r20, 0x0B	; 11
    26a0:	42 9f       	mul	r20, r18
    26a2:	c0 01       	movw	r24, r0
    26a4:	43 9f       	mul	r20, r19
    26a6:	90 0d       	add	r25, r0
    26a8:	11 24       	eor	r1, r1
    26aa:	9c 01       	movw	r18, r24
    26ac:	24 5a       	subi	r18, 0xA4	; 164
    26ae:	3f 4e       	sbci	r19, 0xEF	; 239
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	9c 81       	ldd	r25, Y+4	; 0x04
    26b4:	fc 01       	movw	r30, r24
    26b6:	35 87       	std	Z+13, r19	; 0x0d
    26b8:	24 87       	std	Z+12, r18	; 0x0c
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	fc 01       	movw	r30, r24
    26c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	4b e0       	ldi	r20, 0x0B	; 11
    26c8:	48 9f       	mul	r20, r24
    26ca:	90 01       	movw	r18, r0
    26cc:	49 9f       	mul	r20, r25
    26ce:	30 0d       	add	r19, r0
    26d0:	11 24       	eor	r1, r1
    26d2:	24 5a       	subi	r18, 0xA4	; 164
    26d4:	3f 4e       	sbci	r19, 0xEF	; 239
    26d6:	f9 01       	movw	r30, r18
    26d8:	20 81       	ld	r18, Z
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	42 0f       	add	r20, r18
    26de:	5b e0       	ldi	r21, 0x0B	; 11
    26e0:	58 9f       	mul	r21, r24
    26e2:	90 01       	movw	r18, r0
    26e4:	59 9f       	mul	r21, r25
    26e6:	30 0d       	add	r19, r0
    26e8:	11 24       	eor	r1, r1
    26ea:	c9 01       	movw	r24, r18
    26ec:	84 5a       	subi	r24, 0xA4	; 164
    26ee:	9f 4e       	sbci	r25, 0xEF	; 239
    26f0:	fc 01       	movw	r30, r24
    26f2:	40 83       	st	Z, r20
    26f4:	0f 90       	pop	r0
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <xSchedulerRunning>
    26fc:	88 23       	and	r24, r24
    26fe:	71 f0       	breq	.+28     	; 0x271c <prvAddNewTaskToReadyList+0x196>
    2700:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    2704:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    2708:	fc 01       	movw	r30, r24
    270a:	22 8d       	ldd	r18, Z+26	; 0x1a
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	fc 01       	movw	r30, r24
    2712:	82 8d       	ldd	r24, Z+26	; 0x1a
    2714:	28 17       	cp	r18, r24
    2716:	10 f4       	brcc	.+4      	; 0x271c <prvAddNewTaskToReadyList+0x196>
    2718:	0e 94 7d 05 	call	0xafa	; 0xafa <vPortYield>
    271c:	00 00       	nop
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	08 95       	ret

0000272c <xTaskDelayUntil>:
    272c:	ef 92       	push	r14
    272e:	ff 92       	push	r15
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	60 97       	sbiw	r28, 0x10	; 16
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	9c 87       	std	Y+12, r25	; 0x0c
    274a:	8b 87       	std	Y+11, r24	; 0x0b
    274c:	4d 87       	std	Y+13, r20	; 0x0d
    274e:	5e 87       	std	Y+14, r21	; 0x0e
    2750:	6f 87       	std	Y+15, r22	; 0x0f
    2752:	78 8b       	std	Y+16, r23	; 0x10
    2754:	19 82       	std	Y+1, r1	; 0x01
    2756:	19 d1       	rcall	.+562    	; 0x298a <vTaskSuspendAll>
    2758:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <xTickCount>
    275c:	90 91 08 11 	lds	r25, 0x1108	; 0x801108 <xTickCount+0x1>
    2760:	a0 91 09 11 	lds	r26, 0x1109	; 0x801109 <xTickCount+0x2>
    2764:	b0 91 0a 11 	lds	r27, 0x110A	; 0x80110a <xTickCount+0x3>
    2768:	8a 83       	std	Y+2, r24	; 0x02
    276a:	9b 83       	std	Y+3, r25	; 0x03
    276c:	ac 83       	std	Y+4, r26	; 0x04
    276e:	bd 83       	std	Y+5, r27	; 0x05
    2770:	8b 85       	ldd	r24, Y+11	; 0x0b
    2772:	9c 85       	ldd	r25, Y+12	; 0x0c
    2774:	fc 01       	movw	r30, r24
    2776:	20 81       	ld	r18, Z
    2778:	31 81       	ldd	r19, Z+1	; 0x01
    277a:	42 81       	ldd	r20, Z+2	; 0x02
    277c:	53 81       	ldd	r21, Z+3	; 0x03
    277e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2780:	9e 85       	ldd	r25, Y+14	; 0x0e
    2782:	af 85       	ldd	r26, Y+15	; 0x0f
    2784:	b8 89       	ldd	r27, Y+16	; 0x10
    2786:	82 0f       	add	r24, r18
    2788:	93 1f       	adc	r25, r19
    278a:	a4 1f       	adc	r26, r20
    278c:	b5 1f       	adc	r27, r21
    278e:	8e 83       	std	Y+6, r24	; 0x06
    2790:	9f 83       	std	Y+7, r25	; 0x07
    2792:	a8 87       	std	Y+8, r26	; 0x08
    2794:	b9 87       	std	Y+9, r27	; 0x09
    2796:	8b 85       	ldd	r24, Y+11	; 0x0b
    2798:	9c 85       	ldd	r25, Y+12	; 0x0c
    279a:	fc 01       	movw	r30, r24
    279c:	20 81       	ld	r18, Z
    279e:	31 81       	ldd	r19, Z+1	; 0x01
    27a0:	42 81       	ldd	r20, Z+2	; 0x02
    27a2:	53 81       	ldd	r21, Z+3	; 0x03
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	9b 81       	ldd	r25, Y+3	; 0x03
    27a8:	ac 81       	ldd	r26, Y+4	; 0x04
    27aa:	bd 81       	ldd	r27, Y+5	; 0x05
    27ac:	82 17       	cp	r24, r18
    27ae:	93 07       	cpc	r25, r19
    27b0:	a4 07       	cpc	r26, r20
    27b2:	b5 07       	cpc	r27, r21
    27b4:	00 f5       	brcc	.+64     	; 0x27f6 <xTaskDelayUntil+0xca>
    27b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ba:	fc 01       	movw	r30, r24
    27bc:	20 81       	ld	r18, Z
    27be:	31 81       	ldd	r19, Z+1	; 0x01
    27c0:	42 81       	ldd	r20, Z+2	; 0x02
    27c2:	53 81       	ldd	r21, Z+3	; 0x03
    27c4:	8e 81       	ldd	r24, Y+6	; 0x06
    27c6:	9f 81       	ldd	r25, Y+7	; 0x07
    27c8:	a8 85       	ldd	r26, Y+8	; 0x08
    27ca:	b9 85       	ldd	r27, Y+9	; 0x09
    27cc:	82 17       	cp	r24, r18
    27ce:	93 07       	cpc	r25, r19
    27d0:	a4 07       	cpc	r26, r20
    27d2:	b5 07       	cpc	r27, r21
    27d4:	78 f5       	brcc	.+94     	; 0x2834 <xTaskDelayUntil+0x108>
    27d6:	2e 81       	ldd	r18, Y+6	; 0x06
    27d8:	3f 81       	ldd	r19, Y+7	; 0x07
    27da:	48 85       	ldd	r20, Y+8	; 0x08
    27dc:	59 85       	ldd	r21, Y+9	; 0x09
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	9b 81       	ldd	r25, Y+3	; 0x03
    27e2:	ac 81       	ldd	r26, Y+4	; 0x04
    27e4:	bd 81       	ldd	r27, Y+5	; 0x05
    27e6:	82 17       	cp	r24, r18
    27e8:	93 07       	cpc	r25, r19
    27ea:	a4 07       	cpc	r26, r20
    27ec:	b5 07       	cpc	r27, r21
    27ee:	10 f5       	brcc	.+68     	; 0x2834 <xTaskDelayUntil+0x108>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	89 83       	std	Y+1, r24	; 0x01
    27f4:	1f c0       	rjmp	.+62     	; 0x2834 <xTaskDelayUntil+0x108>
    27f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27fa:	fc 01       	movw	r30, r24
    27fc:	20 81       	ld	r18, Z
    27fe:	31 81       	ldd	r19, Z+1	; 0x01
    2800:	42 81       	ldd	r20, Z+2	; 0x02
    2802:	53 81       	ldd	r21, Z+3	; 0x03
    2804:	8e 81       	ldd	r24, Y+6	; 0x06
    2806:	9f 81       	ldd	r25, Y+7	; 0x07
    2808:	a8 85       	ldd	r26, Y+8	; 0x08
    280a:	b9 85       	ldd	r27, Y+9	; 0x09
    280c:	82 17       	cp	r24, r18
    280e:	93 07       	cpc	r25, r19
    2810:	a4 07       	cpc	r26, r20
    2812:	b5 07       	cpc	r27, r21
    2814:	68 f0       	brcs	.+26     	; 0x2830 <xTaskDelayUntil+0x104>
    2816:	2e 81       	ldd	r18, Y+6	; 0x06
    2818:	3f 81       	ldd	r19, Y+7	; 0x07
    281a:	48 85       	ldd	r20, Y+8	; 0x08
    281c:	59 85       	ldd	r21, Y+9	; 0x09
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	9b 81       	ldd	r25, Y+3	; 0x03
    2822:	ac 81       	ldd	r26, Y+4	; 0x04
    2824:	bd 81       	ldd	r27, Y+5	; 0x05
    2826:	82 17       	cp	r24, r18
    2828:	93 07       	cpc	r25, r19
    282a:	a4 07       	cpc	r26, r20
    282c:	b5 07       	cpc	r27, r21
    282e:	10 f4       	brcc	.+4      	; 0x2834 <xTaskDelayUntil+0x108>
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	89 83       	std	Y+1, r24	; 0x01
    2834:	2b 85       	ldd	r18, Y+11	; 0x0b
    2836:	3c 85       	ldd	r19, Y+12	; 0x0c
    2838:	8e 81       	ldd	r24, Y+6	; 0x06
    283a:	9f 81       	ldd	r25, Y+7	; 0x07
    283c:	a8 85       	ldd	r26, Y+8	; 0x08
    283e:	b9 85       	ldd	r27, Y+9	; 0x09
    2840:	f9 01       	movw	r30, r18
    2842:	80 83       	st	Z, r24
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	a2 83       	std	Z+2, r26	; 0x02
    2848:	b3 83       	std	Z+3, r27	; 0x03
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	88 23       	and	r24, r24
    284e:	a9 f0       	breq	.+42     	; 0x287a <xTaskDelayUntil+0x14e>
    2850:	2e 81       	ldd	r18, Y+6	; 0x06
    2852:	3f 81       	ldd	r19, Y+7	; 0x07
    2854:	48 85       	ldd	r20, Y+8	; 0x08
    2856:	59 85       	ldd	r21, Y+9	; 0x09
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	9b 81       	ldd	r25, Y+3	; 0x03
    285c:	ac 81       	ldd	r26, Y+4	; 0x04
    285e:	bd 81       	ldd	r27, Y+5	; 0x05
    2860:	79 01       	movw	r14, r18
    2862:	8a 01       	movw	r16, r20
    2864:	e8 1a       	sub	r14, r24
    2866:	f9 0a       	sbc	r15, r25
    2868:	0a 0b       	sbc	r16, r26
    286a:	1b 0b       	sbc	r17, r27
    286c:	d8 01       	movw	r26, r16
    286e:	c7 01       	movw	r24, r14
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 25 23 	call	0x464a	; 0x464a <prvAddCurrentTaskToDelayedList>
    287a:	94 d0       	rcall	.+296    	; 0x29a4 <xTaskResumeAll>
    287c:	8a 87       	std	Y+10, r24	; 0x0a
    287e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2880:	88 23       	and	r24, r24
    2882:	11 f4       	brne	.+4      	; 0x2888 <xTaskDelayUntil+0x15c>
    2884:	0e 94 7d 05 	call	0xafa	; 0xafa <vPortYield>
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	60 96       	adiw	r28, 0x10	; 16
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
    289e:	ff 90       	pop	r15
    28a0:	ef 90       	pop	r14
    28a2:	08 95       	ret

000028a4 <vTaskDelay>:
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <vTaskDelay+0x6>
    28aa:	1f 92       	push	r1
    28ac:	1f 92       	push	r1
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	6a 83       	std	Y+2, r22	; 0x02
    28b4:	7b 83       	std	Y+3, r23	; 0x03
    28b6:	8c 83       	std	Y+4, r24	; 0x04
    28b8:	9d 83       	std	Y+5, r25	; 0x05
    28ba:	19 82       	std	Y+1, r1	; 0x01
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	9b 81       	ldd	r25, Y+3	; 0x03
    28c0:	ac 81       	ldd	r26, Y+4	; 0x04
    28c2:	bd 81       	ldd	r27, Y+5	; 0x05
    28c4:	89 2b       	or	r24, r25
    28c6:	8a 2b       	or	r24, r26
    28c8:	8b 2b       	or	r24, r27
    28ca:	61 f0       	breq	.+24     	; 0x28e4 <vTaskDelay+0x40>
    28cc:	5e d0       	rcall	.+188    	; 0x298a <vTaskSuspendAll>
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	9b 81       	ldd	r25, Y+3	; 0x03
    28d2:	ac 81       	ldd	r26, Y+4	; 0x04
    28d4:	bd 81       	ldd	r27, Y+5	; 0x05
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 25 23 	call	0x464a	; 0x464a <prvAddCurrentTaskToDelayedList>
    28e0:	61 d0       	rcall	.+194    	; 0x29a4 <xTaskResumeAll>
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	88 23       	and	r24, r24
    28e8:	11 f4       	brne	.+4      	; 0x28ee <vTaskDelay+0x4a>
    28ea:	0e 94 7d 05 	call	0xafa	; 0xafa <vPortYield>
    28ee:	00 00       	nop
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	08 95       	ret

00002900 <vTaskStartScheduler>:
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	0f 93       	push	r16
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	1f 92       	push	r1
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	0f 2e       	mov	r0, r31
    2912:	f8 e1       	ldi	r31, 0x18	; 24
    2914:	ef 2e       	mov	r14, r31
    2916:	f1 e1       	ldi	r31, 0x11	; 17
    2918:	ff 2e       	mov	r15, r31
    291a:	f0 2d       	mov	r31, r0
    291c:	00 e0       	ldi	r16, 0x00	; 0
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 ec       	ldi	r20, 0xC0	; 192
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	6d e1       	ldi	r22, 0x1D	; 29
    2928:	72 e0       	ldi	r23, 0x02	; 2
    292a:	8c e7       	ldi	r24, 0x7C	; 124
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	ce dc       	rcall	.-1636   	; 0x22cc <xTaskCreate>
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	81 30       	cpi	r24, 0x01	; 1
    2936:	19 f4       	brne	.+6      	; 0x293e <vTaskStartScheduler+0x3e>
    2938:	0e 94 08 24 	call	0x4810	; 0x4810 <xTimerCreateTimerTask>
    293c:	89 83       	std	Y+1, r24	; 0x01
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	81 30       	cpi	r24, 0x01	; 1
    2942:	c9 f4       	brne	.+50     	; 0x2976 <vTaskStartScheduler+0x76>
    2944:	f8 94       	cli
    2946:	8f ef       	ldi	r24, 0xFF	; 255
    2948:	9f ef       	ldi	r25, 0xFF	; 255
    294a:	dc 01       	movw	r26, r24
    294c:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <xNextTaskUnblockTime>
    2950:	90 93 15 11 	sts	0x1115, r25	; 0x801115 <xNextTaskUnblockTime+0x1>
    2954:	a0 93 16 11 	sts	0x1116, r26	; 0x801116 <xNextTaskUnblockTime+0x2>
    2958:	b0 93 17 11 	sts	0x1117, r27	; 0x801117 <xNextTaskUnblockTime+0x3>
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	80 93 0c 11 	sts	0x110C, r24	; 0x80110c <xSchedulerRunning>
    2962:	10 92 07 11 	sts	0x1107, r1	; 0x801107 <xTickCount>
    2966:	10 92 08 11 	sts	0x1108, r1	; 0x801108 <xTickCount+0x1>
    296a:	10 92 09 11 	sts	0x1109, r1	; 0x801109 <xTickCount+0x2>
    296e:	10 92 0a 11 	sts	0x110A, r1	; 0x80110a <xTickCount+0x3>
    2972:	0e 94 45 05 	call	0xa8a	; 0xa8a <xPortStartScheduler>
    2976:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    297a:	00 00       	nop
    297c:	0f 90       	pop	r0
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	08 95       	ret

0000298a <vTaskSuspendAll>:
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62
    2992:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxSchedulerSuspended>
    2996:	8f 5f       	subi	r24, 0xFF	; 255
    2998:	80 93 1a 11 	sts	0x111A, r24	; 0x80111a <uxSchedulerSuspended>
    299c:	00 00       	nop
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	08 95       	ret

000029a4 <xTaskResumeAll>:
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	2d 97       	sbiw	r28, 0x0d	; 13
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	1a 82       	std	Y+2, r1	; 0x02
    29ba:	19 82       	std	Y+1, r1	; 0x01
    29bc:	1b 82       	std	Y+3, r1	; 0x03
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	0f 92       	push	r0
    29c4:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxSchedulerSuspended>
    29c8:	81 50       	subi	r24, 0x01	; 1
    29ca:	80 93 1a 11 	sts	0x111A, r24	; 0x80111a <uxSchedulerSuspended>
    29ce:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxSchedulerSuspended>
    29d2:	88 23       	and	r24, r24
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <xTaskResumeAll+0x34>
    29d6:	68 c1       	rjmp	.+720    	; 0x2ca8 <xTaskResumeAll+0x304>
    29d8:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxCurrentNumberOfTasks>
    29dc:	88 23       	and	r24, r24
    29de:	09 f4       	brne	.+2      	; 0x29e2 <xTaskResumeAll+0x3e>
    29e0:	63 c1       	rjmp	.+710    	; 0x2ca8 <xTaskResumeAll+0x304>
    29e2:	1b c1       	rjmp	.+566    	; 0x2c1a <xTaskResumeAll+0x276>
    29e4:	80 91 eb 10 	lds	r24, 0x10EB	; 0x8010eb <xPendingReadyList+0x7>
    29e8:	90 91 ec 10 	lds	r25, 0x10EC	; 0x8010ec <xPendingReadyList+0x8>
    29ec:	fc 01       	movw	r30, r24
    29ee:	80 85       	ldd	r24, Z+8	; 0x08
    29f0:	91 85       	ldd	r25, Z+9	; 0x09
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	fc 01       	movw	r30, r24
    29fc:	80 8d       	ldd	r24, Z+24	; 0x18
    29fe:	91 8d       	ldd	r25, Z+25	; 0x19
    2a00:	99 87       	std	Y+9, r25	; 0x09
    2a02:	88 87       	std	Y+8, r24	; 0x08
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	9a 81       	ldd	r25, Y+2	; 0x02
    2a08:	fc 01       	movw	r30, r24
    2a0a:	82 89       	ldd	r24, Z+18	; 0x12
    2a0c:	93 89       	ldd	r25, Z+19	; 0x13
    2a0e:	29 81       	ldd	r18, Y+1	; 0x01
    2a10:	3a 81       	ldd	r19, Y+2	; 0x02
    2a12:	f9 01       	movw	r30, r18
    2a14:	24 89       	ldd	r18, Z+20	; 0x14
    2a16:	35 89       	ldd	r19, Z+21	; 0x15
    2a18:	fc 01       	movw	r30, r24
    2a1a:	37 83       	std	Z+7, r19	; 0x07
    2a1c:	26 83       	std	Z+6, r18	; 0x06
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	9a 81       	ldd	r25, Y+2	; 0x02
    2a22:	fc 01       	movw	r30, r24
    2a24:	84 89       	ldd	r24, Z+20	; 0x14
    2a26:	95 89       	ldd	r25, Z+21	; 0x15
    2a28:	29 81       	ldd	r18, Y+1	; 0x01
    2a2a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a2c:	f9 01       	movw	r30, r18
    2a2e:	22 89       	ldd	r18, Z+18	; 0x12
    2a30:	33 89       	ldd	r19, Z+19	; 0x13
    2a32:	fc 01       	movw	r30, r24
    2a34:	35 83       	std	Z+5, r19	; 0x05
    2a36:	24 83       	std	Z+4, r18	; 0x04
    2a38:	88 85       	ldd	r24, Y+8	; 0x08
    2a3a:	99 85       	ldd	r25, Y+9	; 0x09
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	21 81       	ldd	r18, Z+1	; 0x01
    2a40:	32 81       	ldd	r19, Z+2	; 0x02
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	9a 81       	ldd	r25, Y+2	; 0x02
    2a46:	0e 96       	adiw	r24, 0x0e	; 14
    2a48:	28 17       	cp	r18, r24
    2a4a:	39 07       	cpc	r19, r25
    2a4c:	51 f4       	brne	.+20     	; 0x2a62 <xTaskResumeAll+0xbe>
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	fc 01       	movw	r30, r24
    2a54:	24 89       	ldd	r18, Z+20	; 0x14
    2a56:	35 89       	ldd	r19, Z+21	; 0x15
    2a58:	88 85       	ldd	r24, Y+8	; 0x08
    2a5a:	99 85       	ldd	r25, Y+9	; 0x09
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	32 83       	std	Z+2, r19	; 0x02
    2a60:	21 83       	std	Z+1, r18	; 0x01
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	fc 01       	movw	r30, r24
    2a68:	11 8e       	std	Z+25, r1	; 0x19
    2a6a:	10 8e       	std	Z+24, r1	; 0x18
    2a6c:	88 85       	ldd	r24, Y+8	; 0x08
    2a6e:	99 85       	ldd	r25, Y+9	; 0x09
    2a70:	fc 01       	movw	r30, r24
    2a72:	80 81       	ld	r24, Z
    2a74:	2f ef       	ldi	r18, 0xFF	; 255
    2a76:	28 0f       	add	r18, r24
    2a78:	88 85       	ldd	r24, Y+8	; 0x08
    2a7a:	99 85       	ldd	r25, Y+9	; 0x09
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	20 83       	st	Z, r18
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	9a 81       	ldd	r25, Y+2	; 0x02
    2a84:	fc 01       	movw	r30, r24
    2a86:	84 85       	ldd	r24, Z+12	; 0x0c
    2a88:	95 85       	ldd	r25, Z+13	; 0x0d
    2a8a:	9b 87       	std	Y+11, r25	; 0x0b
    2a8c:	8a 87       	std	Y+10, r24	; 0x0a
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	fc 01       	movw	r30, r24
    2a94:	86 81       	ldd	r24, Z+6	; 0x06
    2a96:	97 81       	ldd	r25, Z+7	; 0x07
    2a98:	29 81       	ldd	r18, Y+1	; 0x01
    2a9a:	3a 81       	ldd	r19, Y+2	; 0x02
    2a9c:	f9 01       	movw	r30, r18
    2a9e:	20 85       	ldd	r18, Z+8	; 0x08
    2aa0:	31 85       	ldd	r19, Z+9	; 0x09
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	37 83       	std	Z+7, r19	; 0x07
    2aa6:	26 83       	std	Z+6, r18	; 0x06
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    2aac:	fc 01       	movw	r30, r24
    2aae:	80 85       	ldd	r24, Z+8	; 0x08
    2ab0:	91 85       	ldd	r25, Z+9	; 0x09
    2ab2:	29 81       	ldd	r18, Y+1	; 0x01
    2ab4:	3a 81       	ldd	r19, Y+2	; 0x02
    2ab6:	f9 01       	movw	r30, r18
    2ab8:	26 81       	ldd	r18, Z+6	; 0x06
    2aba:	37 81       	ldd	r19, Z+7	; 0x07
    2abc:	fc 01       	movw	r30, r24
    2abe:	35 83       	std	Z+5, r19	; 0x05
    2ac0:	24 83       	std	Z+4, r18	; 0x04
    2ac2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ac4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	21 81       	ldd	r18, Z+1	; 0x01
    2aca:	32 81       	ldd	r19, Z+2	; 0x02
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	02 96       	adiw	r24, 0x02	; 2
    2ad2:	28 17       	cp	r18, r24
    2ad4:	39 07       	cpc	r19, r25
    2ad6:	51 f4       	brne	.+20     	; 0x2aec <xTaskResumeAll+0x148>
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	9a 81       	ldd	r25, Y+2	; 0x02
    2adc:	fc 01       	movw	r30, r24
    2ade:	20 85       	ldd	r18, Z+8	; 0x08
    2ae0:	31 85       	ldd	r19, Z+9	; 0x09
    2ae2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	32 83       	std	Z+2, r19	; 0x02
    2aea:	21 83       	std	Z+1, r18	; 0x01
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	9a 81       	ldd	r25, Y+2	; 0x02
    2af0:	fc 01       	movw	r30, r24
    2af2:	15 86       	std	Z+13, r1	; 0x0d
    2af4:	14 86       	std	Z+12, r1	; 0x0c
    2af6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2af8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2afa:	fc 01       	movw	r30, r24
    2afc:	80 81       	ld	r24, Z
    2afe:	2f ef       	ldi	r18, 0xFF	; 255
    2b00:	28 0f       	add	r18, r24
    2b02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b04:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b06:	fc 01       	movw	r30, r24
    2b08:	20 83       	st	Z, r18
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0e:	fc 01       	movw	r30, r24
    2b10:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b12:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <uxTopReadyPriority>
    2b16:	89 17       	cp	r24, r25
    2b18:	30 f4       	brcc	.+12     	; 0x2b26 <xTaskResumeAll+0x182>
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b1e:	fc 01       	movw	r30, r24
    2b20:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b22:	80 93 0b 11 	sts	0x110B, r24	; 0x80110b <uxTopReadyPriority>
    2b26:	89 81       	ldd	r24, Y+1	; 0x01
    2b28:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b2e:	28 2f       	mov	r18, r24
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	4b e0       	ldi	r20, 0x0B	; 11
    2b34:	42 9f       	mul	r20, r18
    2b36:	c0 01       	movw	r24, r0
    2b38:	43 9f       	mul	r20, r19
    2b3a:	90 0d       	add	r25, r0
    2b3c:	11 24       	eor	r1, r1
    2b3e:	83 5a       	subi	r24, 0xA3	; 163
    2b40:	9f 4e       	sbci	r25, 0xEF	; 239
    2b42:	fc 01       	movw	r30, r24
    2b44:	80 81       	ld	r24, Z
    2b46:	91 81       	ldd	r25, Z+1	; 0x01
    2b48:	9d 87       	std	Y+13, r25	; 0x0d
    2b4a:	8c 87       	std	Y+12, r24	; 0x0c
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b52:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b54:	fc 01       	movw	r30, r24
    2b56:	37 83       	std	Z+7, r19	; 0x07
    2b58:	26 83       	std	Z+6, r18	; 0x06
    2b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b5c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b5e:	fc 01       	movw	r30, r24
    2b60:	26 81       	ldd	r18, Z+6	; 0x06
    2b62:	37 81       	ldd	r19, Z+7	; 0x07
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	fc 01       	movw	r30, r24
    2b6a:	31 87       	std	Z+9, r19	; 0x09
    2b6c:	20 87       	std	Z+8, r18	; 0x08
    2b6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b70:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b72:	fc 01       	movw	r30, r24
    2b74:	86 81       	ldd	r24, Z+6	; 0x06
    2b76:	97 81       	ldd	r25, Z+7	; 0x07
    2b78:	29 81       	ldd	r18, Y+1	; 0x01
    2b7a:	3a 81       	ldd	r19, Y+2	; 0x02
    2b7c:	2e 5f       	subi	r18, 0xFE	; 254
    2b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b80:	fc 01       	movw	r30, r24
    2b82:	35 83       	std	Z+5, r19	; 0x05
    2b84:	24 83       	std	Z+4, r18	; 0x04
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8a:	9c 01       	movw	r18, r24
    2b8c:	2e 5f       	subi	r18, 0xFE	; 254
    2b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b90:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b92:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b94:	fc 01       	movw	r30, r24
    2b96:	37 83       	std	Z+7, r19	; 0x07
    2b98:	26 83       	std	Z+6, r18	; 0x06
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	4b e0       	ldi	r20, 0x0B	; 11
    2ba8:	42 9f       	mul	r20, r18
    2baa:	c0 01       	movw	r24, r0
    2bac:	43 9f       	mul	r20, r19
    2bae:	90 0d       	add	r25, r0
    2bb0:	11 24       	eor	r1, r1
    2bb2:	9c 01       	movw	r18, r24
    2bb4:	24 5a       	subi	r18, 0xA4	; 164
    2bb6:	3f 4e       	sbci	r19, 0xEF	; 239
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	35 87       	std	Z+13, r19	; 0x0d
    2bc0:	24 87       	std	Z+12, r18	; 0x0c
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bca:	88 2f       	mov	r24, r24
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	4b e0       	ldi	r20, 0x0B	; 11
    2bd0:	48 9f       	mul	r20, r24
    2bd2:	90 01       	movw	r18, r0
    2bd4:	49 9f       	mul	r20, r25
    2bd6:	30 0d       	add	r19, r0
    2bd8:	11 24       	eor	r1, r1
    2bda:	24 5a       	subi	r18, 0xA4	; 164
    2bdc:	3f 4e       	sbci	r19, 0xEF	; 239
    2bde:	f9 01       	movw	r30, r18
    2be0:	20 81       	ld	r18, Z
    2be2:	41 e0       	ldi	r20, 0x01	; 1
    2be4:	42 0f       	add	r20, r18
    2be6:	5b e0       	ldi	r21, 0x0B	; 11
    2be8:	58 9f       	mul	r21, r24
    2bea:	90 01       	movw	r18, r0
    2bec:	59 9f       	mul	r21, r25
    2bee:	30 0d       	add	r19, r0
    2bf0:	11 24       	eor	r1, r1
    2bf2:	c9 01       	movw	r24, r18
    2bf4:	84 5a       	subi	r24, 0xA4	; 164
    2bf6:	9f 4e       	sbci	r25, 0xEF	; 239
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	40 83       	st	Z, r20
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2c00:	fc 01       	movw	r30, r24
    2c02:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c04:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    2c08:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c10:	28 17       	cp	r18, r24
    2c12:	18 f0       	brcs	.+6      	; 0x2c1a <xTaskResumeAll+0x276>
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	80 93 11 11 	sts	0x1111, r24	; 0x801111 <xYieldPending>
    2c1a:	80 91 e4 10 	lds	r24, 0x10E4	; 0x8010e4 <xPendingReadyList>
    2c1e:	88 23       	and	r24, r24
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <xTaskResumeAll+0x280>
    2c22:	e0 ce       	rjmp	.-576    	; 0x29e4 <xTaskResumeAll+0x40>
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	9a 81       	ldd	r25, Y+2	; 0x02
    2c28:	89 2b       	or	r24, r25
    2c2a:	09 f0       	breq	.+2      	; 0x2c2e <xTaskResumeAll+0x28a>
    2c2c:	98 d6       	rcall	.+3376   	; 0x395e <prvResetNextTaskUnblockTime>
    2c2e:	80 91 0d 11 	lds	r24, 0x110D	; 0x80110d <xPendedTicks>
    2c32:	90 91 0e 11 	lds	r25, 0x110E	; 0x80110e <xPendedTicks+0x1>
    2c36:	a0 91 0f 11 	lds	r26, 0x110F	; 0x80110f <xPendedTicks+0x2>
    2c3a:	b0 91 10 11 	lds	r27, 0x1110	; 0x801110 <xPendedTicks+0x3>
    2c3e:	8c 83       	std	Y+4, r24	; 0x04
    2c40:	9d 83       	std	Y+5, r25	; 0x05
    2c42:	ae 83       	std	Y+6, r26	; 0x06
    2c44:	bf 83       	std	Y+7, r27	; 0x07
    2c46:	8c 81       	ldd	r24, Y+4	; 0x04
    2c48:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4a:	ae 81       	ldd	r26, Y+6	; 0x06
    2c4c:	bf 81       	ldd	r27, Y+7	; 0x07
    2c4e:	89 2b       	or	r24, r25
    2c50:	8a 2b       	or	r24, r26
    2c52:	8b 2b       	or	r24, r27
    2c54:	09 f1       	breq	.+66     	; 0x2c98 <xTaskResumeAll+0x2f4>
    2c56:	58 d0       	rcall	.+176    	; 0x2d08 <xTaskIncrementTick>
    2c58:	88 23       	and	r24, r24
    2c5a:	19 f0       	breq	.+6      	; 0x2c62 <xTaskResumeAll+0x2be>
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	80 93 11 11 	sts	0x1111, r24	; 0x801111 <xYieldPending>
    2c62:	8c 81       	ldd	r24, Y+4	; 0x04
    2c64:	9d 81       	ldd	r25, Y+5	; 0x05
    2c66:	ae 81       	ldd	r26, Y+6	; 0x06
    2c68:	bf 81       	ldd	r27, Y+7	; 0x07
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	a1 09       	sbc	r26, r1
    2c6e:	b1 09       	sbc	r27, r1
    2c70:	8c 83       	std	Y+4, r24	; 0x04
    2c72:	9d 83       	std	Y+5, r25	; 0x05
    2c74:	ae 83       	std	Y+6, r26	; 0x06
    2c76:	bf 83       	std	Y+7, r27	; 0x07
    2c78:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7c:	ae 81       	ldd	r26, Y+6	; 0x06
    2c7e:	bf 81       	ldd	r27, Y+7	; 0x07
    2c80:	89 2b       	or	r24, r25
    2c82:	8a 2b       	or	r24, r26
    2c84:	8b 2b       	or	r24, r27
    2c86:	39 f7       	brne	.-50     	; 0x2c56 <xTaskResumeAll+0x2b2>
    2c88:	10 92 0d 11 	sts	0x110D, r1	; 0x80110d <xPendedTicks>
    2c8c:	10 92 0e 11 	sts	0x110E, r1	; 0x80110e <xPendedTicks+0x1>
    2c90:	10 92 0f 11 	sts	0x110F, r1	; 0x80110f <xPendedTicks+0x2>
    2c94:	10 92 10 11 	sts	0x1110, r1	; 0x801110 <xPendedTicks+0x3>
    2c98:	80 91 11 11 	lds	r24, 0x1111	; 0x801111 <xYieldPending>
    2c9c:	88 23       	and	r24, r24
    2c9e:	21 f0       	breq	.+8      	; 0x2ca8 <xTaskResumeAll+0x304>
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	8b 83       	std	Y+3, r24	; 0x03
    2ca4:	0e 94 7d 05 	call	0xafa	; 0xafa <vPortYield>
    2ca8:	0f 90       	pop	r0
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	2d 96       	adiw	r28, 0x0d	; 13
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	08 95       	ret

00002cc0 <xTaskGetTickCount>:
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <xTaskGetTickCount+0x6>
    2cc6:	1f 92       	push	r1
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	0f 92       	push	r0
    2cd2:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <xTickCount>
    2cd6:	90 91 08 11 	lds	r25, 0x1108	; 0x801108 <xTickCount+0x1>
    2cda:	a0 91 09 11 	lds	r26, 0x1109	; 0x801109 <xTickCount+0x2>
    2cde:	b0 91 0a 11 	lds	r27, 0x110A	; 0x80110a <xTickCount+0x3>
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	ab 83       	std	Y+3, r26	; 0x03
    2ce8:	bc 83       	std	Y+4, r27	; 0x04
    2cea:	0f 90       	pop	r0
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf2:	ab 81       	ldd	r26, Y+3	; 0x03
    2cf4:	bc 81       	ldd	r27, Y+4	; 0x04
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	cd 01       	movw	r24, r26
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	08 95       	ret

00002d08 <xTaskIncrementTick>:
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	63 97       	sbiw	r28, 0x13	; 19
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	19 82       	std	Y+1, r1	; 0x01
    2d1e:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxSchedulerSuspended>
    2d22:	88 23       	and	r24, r24
    2d24:	09 f0       	breq	.+2      	; 0x2d28 <xTaskIncrementTick+0x20>
    2d26:	cc c1       	rjmp	.+920    	; 0x30c0 <xTaskIncrementTick+0x3b8>
    2d28:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <xTickCount>
    2d2c:	90 91 08 11 	lds	r25, 0x1108	; 0x801108 <xTickCount+0x1>
    2d30:	a0 91 09 11 	lds	r26, 0x1109	; 0x801109 <xTickCount+0x2>
    2d34:	b0 91 0a 11 	lds	r27, 0x110A	; 0x80110a <xTickCount+0x3>
    2d38:	01 96       	adiw	r24, 0x01	; 1
    2d3a:	a1 1d       	adc	r26, r1
    2d3c:	b1 1d       	adc	r27, r1
    2d3e:	8a 83       	std	Y+2, r24	; 0x02
    2d40:	9b 83       	std	Y+3, r25	; 0x03
    2d42:	ac 83       	std	Y+4, r26	; 0x04
    2d44:	bd 83       	std	Y+5, r27	; 0x05
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4a:	ac 81       	ldd	r26, Y+4	; 0x04
    2d4c:	bd 81       	ldd	r27, Y+5	; 0x05
    2d4e:	80 93 07 11 	sts	0x1107, r24	; 0x801107 <xTickCount>
    2d52:	90 93 08 11 	sts	0x1108, r25	; 0x801108 <xTickCount+0x1>
    2d56:	a0 93 09 11 	sts	0x1109, r26	; 0x801109 <xTickCount+0x2>
    2d5a:	b0 93 0a 11 	sts	0x110A, r27	; 0x80110a <xTickCount+0x3>
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	9b 81       	ldd	r25, Y+3	; 0x03
    2d62:	ac 81       	ldd	r26, Y+4	; 0x04
    2d64:	bd 81       	ldd	r27, Y+5	; 0x05
    2d66:	89 2b       	or	r24, r25
    2d68:	8a 2b       	or	r24, r26
    2d6a:	8b 2b       	or	r24, r27
    2d6c:	d1 f4       	brne	.+52     	; 0x2da2 <xTaskIncrementTick+0x9a>
    2d6e:	80 91 e0 10 	lds	r24, 0x10E0	; 0x8010e0 <pxDelayedTaskList>
    2d72:	90 91 e1 10 	lds	r25, 0x10E1	; 0x8010e1 <pxDelayedTaskList+0x1>
    2d76:	9f 83       	std	Y+7, r25	; 0x07
    2d78:	8e 83       	std	Y+6, r24	; 0x06
    2d7a:	80 91 e2 10 	lds	r24, 0x10E2	; 0x8010e2 <pxOverflowDelayedTaskList>
    2d7e:	90 91 e3 10 	lds	r25, 0x10E3	; 0x8010e3 <pxOverflowDelayedTaskList+0x1>
    2d82:	90 93 e1 10 	sts	0x10E1, r25	; 0x8010e1 <pxDelayedTaskList+0x1>
    2d86:	80 93 e0 10 	sts	0x10E0, r24	; 0x8010e0 <pxDelayedTaskList>
    2d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8e:	90 93 e3 10 	sts	0x10E3, r25	; 0x8010e3 <pxOverflowDelayedTaskList+0x1>
    2d92:	80 93 e2 10 	sts	0x10E2, r24	; 0x8010e2 <pxOverflowDelayedTaskList>
    2d96:	80 91 12 11 	lds	r24, 0x1112	; 0x801112 <xNumOfOverflows>
    2d9a:	8f 5f       	subi	r24, 0xFF	; 255
    2d9c:	80 93 12 11 	sts	0x1112, r24	; 0x801112 <xNumOfOverflows>
    2da0:	de d5       	rcall	.+3004   	; 0x395e <prvResetNextTaskUnblockTime>
    2da2:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <xNextTaskUnblockTime>
    2da6:	90 91 15 11 	lds	r25, 0x1115	; 0x801115 <xNextTaskUnblockTime+0x1>
    2daa:	a0 91 16 11 	lds	r26, 0x1116	; 0x801116 <xNextTaskUnblockTime+0x2>
    2dae:	b0 91 17 11 	lds	r27, 0x1117	; 0x801117 <xNextTaskUnblockTime+0x3>
    2db2:	2a 81       	ldd	r18, Y+2	; 0x02
    2db4:	3b 81       	ldd	r19, Y+3	; 0x03
    2db6:	4c 81       	ldd	r20, Y+4	; 0x04
    2db8:	5d 81       	ldd	r21, Y+5	; 0x05
    2dba:	28 17       	cp	r18, r24
    2dbc:	39 07       	cpc	r19, r25
    2dbe:	4a 07       	cpc	r20, r26
    2dc0:	5b 07       	cpc	r21, r27
    2dc2:	08 f4       	brcc	.+2      	; 0x2dc6 <xTaskIncrementTick+0xbe>
    2dc4:	60 c1       	rjmp	.+704    	; 0x3086 <xTaskIncrementTick+0x37e>
    2dc6:	80 91 e0 10 	lds	r24, 0x10E0	; 0x8010e0 <pxDelayedTaskList>
    2dca:	90 91 e1 10 	lds	r25, 0x10E1	; 0x8010e1 <pxDelayedTaskList+0x1>
    2dce:	fc 01       	movw	r30, r24
    2dd0:	80 81       	ld	r24, Z
    2dd2:	88 23       	and	r24, r24
    2dd4:	61 f4       	brne	.+24     	; 0x2dee <xTaskIncrementTick+0xe6>
    2dd6:	8f ef       	ldi	r24, 0xFF	; 255
    2dd8:	9f ef       	ldi	r25, 0xFF	; 255
    2dda:	dc 01       	movw	r26, r24
    2ddc:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <xNextTaskUnblockTime>
    2de0:	90 93 15 11 	sts	0x1115, r25	; 0x801115 <xNextTaskUnblockTime+0x1>
    2de4:	a0 93 16 11 	sts	0x1116, r26	; 0x801116 <xNextTaskUnblockTime+0x2>
    2de8:	b0 93 17 11 	sts	0x1117, r27	; 0x801117 <xNextTaskUnblockTime+0x3>
    2dec:	4c c1       	rjmp	.+664    	; 0x3086 <xTaskIncrementTick+0x37e>
    2dee:	80 91 e0 10 	lds	r24, 0x10E0	; 0x8010e0 <pxDelayedTaskList>
    2df2:	90 91 e1 10 	lds	r25, 0x10E1	; 0x8010e1 <pxDelayedTaskList+0x1>
    2df6:	fc 01       	movw	r30, r24
    2df8:	87 81       	ldd	r24, Z+7	; 0x07
    2dfa:	90 85       	ldd	r25, Z+8	; 0x08
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	80 85       	ldd	r24, Z+8	; 0x08
    2e00:	91 85       	ldd	r25, Z+9	; 0x09
    2e02:	99 87       	std	Y+9, r25	; 0x09
    2e04:	88 87       	std	Y+8, r24	; 0x08
    2e06:	88 85       	ldd	r24, Y+8	; 0x08
    2e08:	99 85       	ldd	r25, Y+9	; 0x09
    2e0a:	fc 01       	movw	r30, r24
    2e0c:	82 81       	ldd	r24, Z+2	; 0x02
    2e0e:	93 81       	ldd	r25, Z+3	; 0x03
    2e10:	a4 81       	ldd	r26, Z+4	; 0x04
    2e12:	b5 81       	ldd	r27, Z+5	; 0x05
    2e14:	8a 87       	std	Y+10, r24	; 0x0a
    2e16:	9b 87       	std	Y+11, r25	; 0x0b
    2e18:	ac 87       	std	Y+12, r26	; 0x0c
    2e1a:	bd 87       	std	Y+13, r27	; 0x0d
    2e1c:	2a 81       	ldd	r18, Y+2	; 0x02
    2e1e:	3b 81       	ldd	r19, Y+3	; 0x03
    2e20:	4c 81       	ldd	r20, Y+4	; 0x04
    2e22:	5d 81       	ldd	r21, Y+5	; 0x05
    2e24:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e26:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e28:	ac 85       	ldd	r26, Y+12	; 0x0c
    2e2a:	bd 85       	ldd	r27, Y+13	; 0x0d
    2e2c:	28 17       	cp	r18, r24
    2e2e:	39 07       	cpc	r19, r25
    2e30:	4a 07       	cpc	r20, r26
    2e32:	5b 07       	cpc	r21, r27
    2e34:	68 f4       	brcc	.+26     	; 0x2e50 <xTaskIncrementTick+0x148>
    2e36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e38:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e3a:	ac 85       	ldd	r26, Y+12	; 0x0c
    2e3c:	bd 85       	ldd	r27, Y+13	; 0x0d
    2e3e:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <xNextTaskUnblockTime>
    2e42:	90 93 15 11 	sts	0x1115, r25	; 0x801115 <xNextTaskUnblockTime+0x1>
    2e46:	a0 93 16 11 	sts	0x1116, r26	; 0x801116 <xNextTaskUnblockTime+0x2>
    2e4a:	b0 93 17 11 	sts	0x1117, r27	; 0x801117 <xNextTaskUnblockTime+0x3>
    2e4e:	1b c1       	rjmp	.+566    	; 0x3086 <xTaskIncrementTick+0x37e>
    2e50:	88 85       	ldd	r24, Y+8	; 0x08
    2e52:	99 85       	ldd	r25, Y+9	; 0x09
    2e54:	fc 01       	movw	r30, r24
    2e56:	84 85       	ldd	r24, Z+12	; 0x0c
    2e58:	95 85       	ldd	r25, Z+13	; 0x0d
    2e5a:	9f 87       	std	Y+15, r25	; 0x0f
    2e5c:	8e 87       	std	Y+14, r24	; 0x0e
    2e5e:	88 85       	ldd	r24, Y+8	; 0x08
    2e60:	99 85       	ldd	r25, Y+9	; 0x09
    2e62:	fc 01       	movw	r30, r24
    2e64:	86 81       	ldd	r24, Z+6	; 0x06
    2e66:	97 81       	ldd	r25, Z+7	; 0x07
    2e68:	28 85       	ldd	r18, Y+8	; 0x08
    2e6a:	39 85       	ldd	r19, Y+9	; 0x09
    2e6c:	f9 01       	movw	r30, r18
    2e6e:	20 85       	ldd	r18, Z+8	; 0x08
    2e70:	31 85       	ldd	r19, Z+9	; 0x09
    2e72:	fc 01       	movw	r30, r24
    2e74:	37 83       	std	Z+7, r19	; 0x07
    2e76:	26 83       	std	Z+6, r18	; 0x06
    2e78:	88 85       	ldd	r24, Y+8	; 0x08
    2e7a:	99 85       	ldd	r25, Y+9	; 0x09
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	80 85       	ldd	r24, Z+8	; 0x08
    2e80:	91 85       	ldd	r25, Z+9	; 0x09
    2e82:	28 85       	ldd	r18, Y+8	; 0x08
    2e84:	39 85       	ldd	r19, Y+9	; 0x09
    2e86:	f9 01       	movw	r30, r18
    2e88:	26 81       	ldd	r18, Z+6	; 0x06
    2e8a:	37 81       	ldd	r19, Z+7	; 0x07
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	35 83       	std	Z+5, r19	; 0x05
    2e90:	24 83       	std	Z+4, r18	; 0x04
    2e92:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e94:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e96:	fc 01       	movw	r30, r24
    2e98:	21 81       	ldd	r18, Z+1	; 0x01
    2e9a:	32 81       	ldd	r19, Z+2	; 0x02
    2e9c:	88 85       	ldd	r24, Y+8	; 0x08
    2e9e:	99 85       	ldd	r25, Y+9	; 0x09
    2ea0:	02 96       	adiw	r24, 0x02	; 2
    2ea2:	28 17       	cp	r18, r24
    2ea4:	39 07       	cpc	r19, r25
    2ea6:	51 f4       	brne	.+20     	; 0x2ebc <xTaskIncrementTick+0x1b4>
    2ea8:	88 85       	ldd	r24, Y+8	; 0x08
    2eaa:	99 85       	ldd	r25, Y+9	; 0x09
    2eac:	fc 01       	movw	r30, r24
    2eae:	20 85       	ldd	r18, Z+8	; 0x08
    2eb0:	31 85       	ldd	r19, Z+9	; 0x09
    2eb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	32 83       	std	Z+2, r19	; 0x02
    2eba:	21 83       	std	Z+1, r18	; 0x01
    2ebc:	88 85       	ldd	r24, Y+8	; 0x08
    2ebe:	99 85       	ldd	r25, Y+9	; 0x09
    2ec0:	fc 01       	movw	r30, r24
    2ec2:	15 86       	std	Z+13, r1	; 0x0d
    2ec4:	14 86       	std	Z+12, r1	; 0x0c
    2ec6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ec8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eca:	fc 01       	movw	r30, r24
    2ecc:	80 81       	ld	r24, Z
    2ece:	2f ef       	ldi	r18, 0xFF	; 255
    2ed0:	28 0f       	add	r18, r24
    2ed2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ed4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	20 83       	st	Z, r18
    2eda:	88 85       	ldd	r24, Y+8	; 0x08
    2edc:	99 85       	ldd	r25, Y+9	; 0x09
    2ede:	fc 01       	movw	r30, r24
    2ee0:	80 8d       	ldd	r24, Z+24	; 0x18
    2ee2:	91 8d       	ldd	r25, Z+25	; 0x19
    2ee4:	89 2b       	or	r24, r25
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <xTaskIncrementTick+0x1e2>
    2ee8:	45 c0       	rjmp	.+138    	; 0x2f74 <xTaskIncrementTick+0x26c>
    2eea:	88 85       	ldd	r24, Y+8	; 0x08
    2eec:	99 85       	ldd	r25, Y+9	; 0x09
    2eee:	fc 01       	movw	r30, r24
    2ef0:	80 8d       	ldd	r24, Z+24	; 0x18
    2ef2:	91 8d       	ldd	r25, Z+25	; 0x19
    2ef4:	99 8b       	std	Y+17, r25	; 0x11
    2ef6:	88 8b       	std	Y+16, r24	; 0x10
    2ef8:	88 85       	ldd	r24, Y+8	; 0x08
    2efa:	99 85       	ldd	r25, Y+9	; 0x09
    2efc:	fc 01       	movw	r30, r24
    2efe:	82 89       	ldd	r24, Z+18	; 0x12
    2f00:	93 89       	ldd	r25, Z+19	; 0x13
    2f02:	28 85       	ldd	r18, Y+8	; 0x08
    2f04:	39 85       	ldd	r19, Y+9	; 0x09
    2f06:	f9 01       	movw	r30, r18
    2f08:	24 89       	ldd	r18, Z+20	; 0x14
    2f0a:	35 89       	ldd	r19, Z+21	; 0x15
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	37 83       	std	Z+7, r19	; 0x07
    2f10:	26 83       	std	Z+6, r18	; 0x06
    2f12:	88 85       	ldd	r24, Y+8	; 0x08
    2f14:	99 85       	ldd	r25, Y+9	; 0x09
    2f16:	fc 01       	movw	r30, r24
    2f18:	84 89       	ldd	r24, Z+20	; 0x14
    2f1a:	95 89       	ldd	r25, Z+21	; 0x15
    2f1c:	28 85       	ldd	r18, Y+8	; 0x08
    2f1e:	39 85       	ldd	r19, Y+9	; 0x09
    2f20:	f9 01       	movw	r30, r18
    2f22:	22 89       	ldd	r18, Z+18	; 0x12
    2f24:	33 89       	ldd	r19, Z+19	; 0x13
    2f26:	fc 01       	movw	r30, r24
    2f28:	35 83       	std	Z+5, r19	; 0x05
    2f2a:	24 83       	std	Z+4, r18	; 0x04
    2f2c:	88 89       	ldd	r24, Y+16	; 0x10
    2f2e:	99 89       	ldd	r25, Y+17	; 0x11
    2f30:	fc 01       	movw	r30, r24
    2f32:	21 81       	ldd	r18, Z+1	; 0x01
    2f34:	32 81       	ldd	r19, Z+2	; 0x02
    2f36:	88 85       	ldd	r24, Y+8	; 0x08
    2f38:	99 85       	ldd	r25, Y+9	; 0x09
    2f3a:	0e 96       	adiw	r24, 0x0e	; 14
    2f3c:	28 17       	cp	r18, r24
    2f3e:	39 07       	cpc	r19, r25
    2f40:	51 f4       	brne	.+20     	; 0x2f56 <xTaskIncrementTick+0x24e>
    2f42:	88 85       	ldd	r24, Y+8	; 0x08
    2f44:	99 85       	ldd	r25, Y+9	; 0x09
    2f46:	fc 01       	movw	r30, r24
    2f48:	24 89       	ldd	r18, Z+20	; 0x14
    2f4a:	35 89       	ldd	r19, Z+21	; 0x15
    2f4c:	88 89       	ldd	r24, Y+16	; 0x10
    2f4e:	99 89       	ldd	r25, Y+17	; 0x11
    2f50:	fc 01       	movw	r30, r24
    2f52:	32 83       	std	Z+2, r19	; 0x02
    2f54:	21 83       	std	Z+1, r18	; 0x01
    2f56:	88 85       	ldd	r24, Y+8	; 0x08
    2f58:	99 85       	ldd	r25, Y+9	; 0x09
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	11 8e       	std	Z+25, r1	; 0x19
    2f5e:	10 8e       	std	Z+24, r1	; 0x18
    2f60:	88 89       	ldd	r24, Y+16	; 0x10
    2f62:	99 89       	ldd	r25, Y+17	; 0x11
    2f64:	fc 01       	movw	r30, r24
    2f66:	80 81       	ld	r24, Z
    2f68:	2f ef       	ldi	r18, 0xFF	; 255
    2f6a:	28 0f       	add	r18, r24
    2f6c:	88 89       	ldd	r24, Y+16	; 0x10
    2f6e:	99 89       	ldd	r25, Y+17	; 0x11
    2f70:	fc 01       	movw	r30, r24
    2f72:	20 83       	st	Z, r18
    2f74:	88 85       	ldd	r24, Y+8	; 0x08
    2f76:	99 85       	ldd	r25, Y+9	; 0x09
    2f78:	fc 01       	movw	r30, r24
    2f7a:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f7c:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <uxTopReadyPriority>
    2f80:	89 17       	cp	r24, r25
    2f82:	30 f4       	brcc	.+12     	; 0x2f90 <xTaskIncrementTick+0x288>
    2f84:	88 85       	ldd	r24, Y+8	; 0x08
    2f86:	99 85       	ldd	r25, Y+9	; 0x09
    2f88:	fc 01       	movw	r30, r24
    2f8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f8c:	80 93 0b 11 	sts	0x110B, r24	; 0x80110b <uxTopReadyPriority>
    2f90:	88 85       	ldd	r24, Y+8	; 0x08
    2f92:	99 85       	ldd	r25, Y+9	; 0x09
    2f94:	fc 01       	movw	r30, r24
    2f96:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f98:	28 2f       	mov	r18, r24
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	4b e0       	ldi	r20, 0x0B	; 11
    2f9e:	42 9f       	mul	r20, r18
    2fa0:	c0 01       	movw	r24, r0
    2fa2:	43 9f       	mul	r20, r19
    2fa4:	90 0d       	add	r25, r0
    2fa6:	11 24       	eor	r1, r1
    2fa8:	83 5a       	subi	r24, 0xA3	; 163
    2faa:	9f 4e       	sbci	r25, 0xEF	; 239
    2fac:	fc 01       	movw	r30, r24
    2fae:	80 81       	ld	r24, Z
    2fb0:	91 81       	ldd	r25, Z+1	; 0x01
    2fb2:	9b 8b       	std	Y+19, r25	; 0x13
    2fb4:	8a 8b       	std	Y+18, r24	; 0x12
    2fb6:	88 85       	ldd	r24, Y+8	; 0x08
    2fb8:	99 85       	ldd	r25, Y+9	; 0x09
    2fba:	2a 89       	ldd	r18, Y+18	; 0x12
    2fbc:	3b 89       	ldd	r19, Y+19	; 0x13
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	37 83       	std	Z+7, r19	; 0x07
    2fc2:	26 83       	std	Z+6, r18	; 0x06
    2fc4:	8a 89       	ldd	r24, Y+18	; 0x12
    2fc6:	9b 89       	ldd	r25, Y+19	; 0x13
    2fc8:	fc 01       	movw	r30, r24
    2fca:	26 81       	ldd	r18, Z+6	; 0x06
    2fcc:	37 81       	ldd	r19, Z+7	; 0x07
    2fce:	88 85       	ldd	r24, Y+8	; 0x08
    2fd0:	99 85       	ldd	r25, Y+9	; 0x09
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	31 87       	std	Z+9, r19	; 0x09
    2fd6:	20 87       	std	Z+8, r18	; 0x08
    2fd8:	8a 89       	ldd	r24, Y+18	; 0x12
    2fda:	9b 89       	ldd	r25, Y+19	; 0x13
    2fdc:	fc 01       	movw	r30, r24
    2fde:	86 81       	ldd	r24, Z+6	; 0x06
    2fe0:	97 81       	ldd	r25, Z+7	; 0x07
    2fe2:	28 85       	ldd	r18, Y+8	; 0x08
    2fe4:	39 85       	ldd	r19, Y+9	; 0x09
    2fe6:	2e 5f       	subi	r18, 0xFE	; 254
    2fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fea:	fc 01       	movw	r30, r24
    2fec:	35 83       	std	Z+5, r19	; 0x05
    2fee:	24 83       	std	Z+4, r18	; 0x04
    2ff0:	88 85       	ldd	r24, Y+8	; 0x08
    2ff2:	99 85       	ldd	r25, Y+9	; 0x09
    2ff4:	9c 01       	movw	r18, r24
    2ff6:	2e 5f       	subi	r18, 0xFE	; 254
    2ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffa:	8a 89       	ldd	r24, Y+18	; 0x12
    2ffc:	9b 89       	ldd	r25, Y+19	; 0x13
    2ffe:	fc 01       	movw	r30, r24
    3000:	37 83       	std	Z+7, r19	; 0x07
    3002:	26 83       	std	Z+6, r18	; 0x06
    3004:	88 85       	ldd	r24, Y+8	; 0x08
    3006:	99 85       	ldd	r25, Y+9	; 0x09
    3008:	fc 01       	movw	r30, r24
    300a:	82 8d       	ldd	r24, Z+26	; 0x1a
    300c:	28 2f       	mov	r18, r24
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	4b e0       	ldi	r20, 0x0B	; 11
    3012:	42 9f       	mul	r20, r18
    3014:	c0 01       	movw	r24, r0
    3016:	43 9f       	mul	r20, r19
    3018:	90 0d       	add	r25, r0
    301a:	11 24       	eor	r1, r1
    301c:	9c 01       	movw	r18, r24
    301e:	24 5a       	subi	r18, 0xA4	; 164
    3020:	3f 4e       	sbci	r19, 0xEF	; 239
    3022:	88 85       	ldd	r24, Y+8	; 0x08
    3024:	99 85       	ldd	r25, Y+9	; 0x09
    3026:	fc 01       	movw	r30, r24
    3028:	35 87       	std	Z+13, r19	; 0x0d
    302a:	24 87       	std	Z+12, r18	; 0x0c
    302c:	88 85       	ldd	r24, Y+8	; 0x08
    302e:	99 85       	ldd	r25, Y+9	; 0x09
    3030:	fc 01       	movw	r30, r24
    3032:	82 8d       	ldd	r24, Z+26	; 0x1a
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	4b e0       	ldi	r20, 0x0B	; 11
    303a:	48 9f       	mul	r20, r24
    303c:	90 01       	movw	r18, r0
    303e:	49 9f       	mul	r20, r25
    3040:	30 0d       	add	r19, r0
    3042:	11 24       	eor	r1, r1
    3044:	24 5a       	subi	r18, 0xA4	; 164
    3046:	3f 4e       	sbci	r19, 0xEF	; 239
    3048:	f9 01       	movw	r30, r18
    304a:	20 81       	ld	r18, Z
    304c:	41 e0       	ldi	r20, 0x01	; 1
    304e:	42 0f       	add	r20, r18
    3050:	5b e0       	ldi	r21, 0x0B	; 11
    3052:	58 9f       	mul	r21, r24
    3054:	90 01       	movw	r18, r0
    3056:	59 9f       	mul	r21, r25
    3058:	30 0d       	add	r19, r0
    305a:	11 24       	eor	r1, r1
    305c:	c9 01       	movw	r24, r18
    305e:	84 5a       	subi	r24, 0xA4	; 164
    3060:	9f 4e       	sbci	r25, 0xEF	; 239
    3062:	fc 01       	movw	r30, r24
    3064:	40 83       	st	Z, r20
    3066:	88 85       	ldd	r24, Y+8	; 0x08
    3068:	99 85       	ldd	r25, Y+9	; 0x09
    306a:	fc 01       	movw	r30, r24
    306c:	22 8d       	ldd	r18, Z+26	; 0x1a
    306e:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    3072:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3076:	fc 01       	movw	r30, r24
    3078:	82 8d       	ldd	r24, Z+26	; 0x1a
    307a:	28 17       	cp	r18, r24
    307c:	08 f4       	brcc	.+2      	; 0x3080 <xTaskIncrementTick+0x378>
    307e:	a3 ce       	rjmp	.-698    	; 0x2dc6 <xTaskIncrementTick+0xbe>
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	89 83       	std	Y+1, r24	; 0x01
    3084:	a0 ce       	rjmp	.-704    	; 0x2dc6 <xTaskIncrementTick+0xbe>
    3086:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    308a:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    308e:	fc 01       	movw	r30, r24
    3090:	82 8d       	ldd	r24, Z+26	; 0x1a
    3092:	28 2f       	mov	r18, r24
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	4b e0       	ldi	r20, 0x0B	; 11
    3098:	42 9f       	mul	r20, r18
    309a:	c0 01       	movw	r24, r0
    309c:	43 9f       	mul	r20, r19
    309e:	90 0d       	add	r25, r0
    30a0:	11 24       	eor	r1, r1
    30a2:	84 5a       	subi	r24, 0xA4	; 164
    30a4:	9f 4e       	sbci	r25, 0xEF	; 239
    30a6:	fc 01       	movw	r30, r24
    30a8:	80 81       	ld	r24, Z
    30aa:	82 30       	cpi	r24, 0x02	; 2
    30ac:	10 f0       	brcs	.+4      	; 0x30b2 <xTaskIncrementTick+0x3aa>
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	89 83       	std	Y+1, r24	; 0x01
    30b2:	80 91 11 11 	lds	r24, 0x1111	; 0x801111 <xYieldPending>
    30b6:	88 23       	and	r24, r24
    30b8:	b1 f0       	breq	.+44     	; 0x30e6 <xTaskIncrementTick+0x3de>
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	89 83       	std	Y+1, r24	; 0x01
    30be:	13 c0       	rjmp	.+38     	; 0x30e6 <xTaskIncrementTick+0x3de>
    30c0:	80 91 0d 11 	lds	r24, 0x110D	; 0x80110d <xPendedTicks>
    30c4:	90 91 0e 11 	lds	r25, 0x110E	; 0x80110e <xPendedTicks+0x1>
    30c8:	a0 91 0f 11 	lds	r26, 0x110F	; 0x80110f <xPendedTicks+0x2>
    30cc:	b0 91 10 11 	lds	r27, 0x1110	; 0x801110 <xPendedTicks+0x3>
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	a1 1d       	adc	r26, r1
    30d4:	b1 1d       	adc	r27, r1
    30d6:	80 93 0d 11 	sts	0x110D, r24	; 0x80110d <xPendedTicks>
    30da:	90 93 0e 11 	sts	0x110E, r25	; 0x80110e <xPendedTicks+0x1>
    30de:	a0 93 0f 11 	sts	0x110F, r26	; 0x80110f <xPendedTicks+0x2>
    30e2:	b0 93 10 11 	sts	0x1110, r27	; 0x801110 <xPendedTicks+0x3>
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	63 96       	adiw	r28, 0x13	; 19
    30ea:	0f b6       	in	r0, 0x3f	; 63
    30ec:	f8 94       	cli
    30ee:	de bf       	out	0x3e, r29	; 62
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	08 95       	ret

000030fa <vTaskSwitchContext>:
    30fa:	cf 93       	push	r28
    30fc:	df 93       	push	r29
    30fe:	00 d0       	rcall	.+0      	; 0x3100 <vTaskSwitchContext+0x6>
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxSchedulerSuspended>
    3108:	88 23       	and	r24, r24
    310a:	21 f0       	breq	.+8      	; 0x3114 <vTaskSwitchContext+0x1a>
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	80 93 11 11 	sts	0x1111, r24	; 0x801111 <xYieldPending>
    3112:	78 c0       	rjmp	.+240    	; 0x3204 <vTaskSwitchContext+0x10a>
    3114:	10 92 11 11 	sts	0x1111, r1	; 0x801111 <xYieldPending>
    3118:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    311c:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3120:	fc 01       	movw	r30, r24
    3122:	20 81       	ld	r18, Z
    3124:	31 81       	ldd	r19, Z+1	; 0x01
    3126:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    312a:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    312e:	fc 01       	movw	r30, r24
    3130:	83 8d       	ldd	r24, Z+27	; 0x1b
    3132:	94 8d       	ldd	r25, Z+28	; 0x1c
    3134:	82 17       	cp	r24, r18
    3136:	93 07       	cpc	r25, r19
    3138:	70 f0       	brcs	.+28     	; 0x3156 <vTaskSwitchContext+0x5c>
    313a:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    313e:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3142:	9c 01       	movw	r18, r24
    3144:	23 5e       	subi	r18, 0xE3	; 227
    3146:	3f 4f       	sbci	r19, 0xFF	; 255
    3148:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    314c:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3150:	b9 01       	movw	r22, r18
    3152:	0e 94 9c 29 	call	0x5338	; 0x5338 <vApplicationStackOverflowHook>
    3156:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <uxTopReadyPriority>
    315a:	89 83       	std	Y+1, r24	; 0x01
    315c:	03 c0       	rjmp	.+6      	; 0x3164 <vTaskSwitchContext+0x6a>
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	81 50       	subi	r24, 0x01	; 1
    3162:	89 83       	std	Y+1, r24	; 0x01
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	4b e0       	ldi	r20, 0x0B	; 11
    316c:	42 9f       	mul	r20, r18
    316e:	c0 01       	movw	r24, r0
    3170:	43 9f       	mul	r20, r19
    3172:	90 0d       	add	r25, r0
    3174:	11 24       	eor	r1, r1
    3176:	84 5a       	subi	r24, 0xA4	; 164
    3178:	9f 4e       	sbci	r25, 0xEF	; 239
    317a:	fc 01       	movw	r30, r24
    317c:	80 81       	ld	r24, Z
    317e:	88 23       	and	r24, r24
    3180:	71 f3       	breq	.-36     	; 0x315e <vTaskSwitchContext+0x64>
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	4b e0       	ldi	r20, 0x0B	; 11
    318a:	42 9f       	mul	r20, r18
    318c:	c0 01       	movw	r24, r0
    318e:	43 9f       	mul	r20, r19
    3190:	90 0d       	add	r25, r0
    3192:	11 24       	eor	r1, r1
    3194:	84 5a       	subi	r24, 0xA4	; 164
    3196:	9f 4e       	sbci	r25, 0xEF	; 239
    3198:	9b 83       	std	Y+3, r25	; 0x03
    319a:	8a 83       	std	Y+2, r24	; 0x02
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	9b 81       	ldd	r25, Y+3	; 0x03
    31a0:	fc 01       	movw	r30, r24
    31a2:	81 81       	ldd	r24, Z+1	; 0x01
    31a4:	92 81       	ldd	r25, Z+2	; 0x02
    31a6:	fc 01       	movw	r30, r24
    31a8:	24 81       	ldd	r18, Z+4	; 0x04
    31aa:	35 81       	ldd	r19, Z+5	; 0x05
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	9b 81       	ldd	r25, Y+3	; 0x03
    31b0:	fc 01       	movw	r30, r24
    31b2:	32 83       	std	Z+2, r19	; 0x02
    31b4:	21 83       	std	Z+1, r18	; 0x01
    31b6:	8a 81       	ldd	r24, Y+2	; 0x02
    31b8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ba:	fc 01       	movw	r30, r24
    31bc:	21 81       	ldd	r18, Z+1	; 0x01
    31be:	32 81       	ldd	r19, Z+2	; 0x02
    31c0:	8a 81       	ldd	r24, Y+2	; 0x02
    31c2:	9b 81       	ldd	r25, Y+3	; 0x03
    31c4:	03 96       	adiw	r24, 0x03	; 3
    31c6:	28 17       	cp	r18, r24
    31c8:	39 07       	cpc	r19, r25
    31ca:	69 f4       	brne	.+26     	; 0x31e6 <vTaskSwitchContext+0xec>
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	9b 81       	ldd	r25, Y+3	; 0x03
    31d0:	fc 01       	movw	r30, r24
    31d2:	81 81       	ldd	r24, Z+1	; 0x01
    31d4:	92 81       	ldd	r25, Z+2	; 0x02
    31d6:	fc 01       	movw	r30, r24
    31d8:	24 81       	ldd	r18, Z+4	; 0x04
    31da:	35 81       	ldd	r19, Z+5	; 0x05
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	9b 81       	ldd	r25, Y+3	; 0x03
    31e0:	fc 01       	movw	r30, r24
    31e2:	32 83       	std	Z+2, r19	; 0x02
    31e4:	21 83       	std	Z+1, r18	; 0x01
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ea:	fc 01       	movw	r30, r24
    31ec:	81 81       	ldd	r24, Z+1	; 0x01
    31ee:	92 81       	ldd	r25, Z+2	; 0x02
    31f0:	fc 01       	movw	r30, r24
    31f2:	80 85       	ldd	r24, Z+8	; 0x08
    31f4:	91 85       	ldd	r25, Z+9	; 0x09
    31f6:	90 93 5b 10 	sts	0x105B, r25	; 0x80105b <pxCurrentTCB+0x1>
    31fa:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <pxCurrentTCB>
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	80 93 0b 11 	sts	0x110B, r24	; 0x80110b <uxTopReadyPriority>
    3204:	00 00       	nop
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	df 91       	pop	r29
    320e:	cf 91       	pop	r28
    3210:	08 95       	ret

00003212 <vTaskPlaceOnEventList>:
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	00 d0       	rcall	.+0      	; 0x3218 <vTaskPlaceOnEventList+0x6>
    3218:	00 d0       	rcall	.+0      	; 0x321a <vTaskPlaceOnEventList+0x8>
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	9a 83       	std	Y+2, r25	; 0x02
    3220:	89 83       	std	Y+1, r24	; 0x01
    3222:	4b 83       	std	Y+3, r20	; 0x03
    3224:	5c 83       	std	Y+4, r21	; 0x04
    3226:	6d 83       	std	Y+5, r22	; 0x05
    3228:	7e 83       	std	Y+6, r23	; 0x06
    322a:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    322e:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3232:	9c 01       	movw	r18, r24
    3234:	22 5f       	subi	r18, 0xF2	; 242
    3236:	3f 4f       	sbci	r19, 0xFF	; 255
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	9a 81       	ldd	r25, Y+2	; 0x02
    323c:	b9 01       	movw	r22, r18
    323e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vListInsert>
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	9c 81       	ldd	r25, Y+4	; 0x04
    3246:	ad 81       	ldd	r26, Y+5	; 0x05
    3248:	be 81       	ldd	r27, Y+6	; 0x06
    324a:	41 e0       	ldi	r20, 0x01	; 1
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 25 23 	call	0x464a	; 0x464a <prvAddCurrentTaskToDelayedList>
    3254:	00 00       	nop
    3256:	26 96       	adiw	r28, 0x06	; 6
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
    3262:	df 91       	pop	r29
    3264:	cf 91       	pop	r28
    3266:	08 95       	ret

00003268 <vTaskPlaceOnEventListRestricted>:
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	29 97       	sbiw	r28, 0x09	; 9
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	cd bf       	out	0x3d, r28	; 61
    327c:	9c 83       	std	Y+4, r25	; 0x04
    327e:	8b 83       	std	Y+3, r24	; 0x03
    3280:	4d 83       	std	Y+5, r20	; 0x05
    3282:	5e 83       	std	Y+6, r21	; 0x06
    3284:	6f 83       	std	Y+7, r22	; 0x07
    3286:	78 87       	std	Y+8, r23	; 0x08
    3288:	29 87       	std	Y+9, r18	; 0x09
    328a:	8b 81       	ldd	r24, Y+3	; 0x03
    328c:	9c 81       	ldd	r25, Y+4	; 0x04
    328e:	fc 01       	movw	r30, r24
    3290:	81 81       	ldd	r24, Z+1	; 0x01
    3292:	92 81       	ldd	r25, Z+2	; 0x02
    3294:	9a 83       	std	Y+2, r25	; 0x02
    3296:	89 83       	std	Y+1, r24	; 0x01
    3298:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    329c:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    32a0:	29 81       	ldd	r18, Y+1	; 0x01
    32a2:	3a 81       	ldd	r19, Y+2	; 0x02
    32a4:	fc 01       	movw	r30, r24
    32a6:	33 8b       	std	Z+19, r19	; 0x13
    32a8:	22 8b       	std	Z+18, r18	; 0x12
    32aa:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    32ae:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    32b2:	29 81       	ldd	r18, Y+1	; 0x01
    32b4:	3a 81       	ldd	r19, Y+2	; 0x02
    32b6:	f9 01       	movw	r30, r18
    32b8:	26 81       	ldd	r18, Z+6	; 0x06
    32ba:	37 81       	ldd	r19, Z+7	; 0x07
    32bc:	fc 01       	movw	r30, r24
    32be:	35 8b       	std	Z+21, r19	; 0x15
    32c0:	24 8b       	std	Z+20, r18	; 0x14
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	9a 81       	ldd	r25, Y+2	; 0x02
    32c6:	fc 01       	movw	r30, r24
    32c8:	86 81       	ldd	r24, Z+6	; 0x06
    32ca:	97 81       	ldd	r25, Z+7	; 0x07
    32cc:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <pxCurrentTCB>
    32d0:	30 91 5b 10 	lds	r19, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    32d4:	22 5f       	subi	r18, 0xF2	; 242
    32d6:	3f 4f       	sbci	r19, 0xFF	; 255
    32d8:	fc 01       	movw	r30, r24
    32da:	35 83       	std	Z+5, r19	; 0x05
    32dc:	24 83       	std	Z+4, r18	; 0x04
    32de:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    32e2:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    32e6:	9c 01       	movw	r18, r24
    32e8:	22 5f       	subi	r18, 0xF2	; 242
    32ea:	3f 4f       	sbci	r19, 0xFF	; 255
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	9a 81       	ldd	r25, Y+2	; 0x02
    32f0:	fc 01       	movw	r30, r24
    32f2:	37 83       	std	Z+7, r19	; 0x07
    32f4:	26 83       	std	Z+6, r18	; 0x06
    32f6:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    32fa:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    32fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3300:	3c 81       	ldd	r19, Y+4	; 0x04
    3302:	fc 01       	movw	r30, r24
    3304:	31 8f       	std	Z+25, r19	; 0x19
    3306:	20 8f       	std	Z+24, r18	; 0x18
    3308:	8b 81       	ldd	r24, Y+3	; 0x03
    330a:	9c 81       	ldd	r25, Y+4	; 0x04
    330c:	fc 01       	movw	r30, r24
    330e:	80 81       	ld	r24, Z
    3310:	21 e0       	ldi	r18, 0x01	; 1
    3312:	28 0f       	add	r18, r24
    3314:	8b 81       	ldd	r24, Y+3	; 0x03
    3316:	9c 81       	ldd	r25, Y+4	; 0x04
    3318:	fc 01       	movw	r30, r24
    331a:	20 83       	st	Z, r18
    331c:	89 85       	ldd	r24, Y+9	; 0x09
    331e:	88 23       	and	r24, r24
    3320:	39 f0       	breq	.+14     	; 0x3330 <vTaskPlaceOnEventListRestricted+0xc8>
    3322:	8f ef       	ldi	r24, 0xFF	; 255
    3324:	9f ef       	ldi	r25, 0xFF	; 255
    3326:	dc 01       	movw	r26, r24
    3328:	8d 83       	std	Y+5, r24	; 0x05
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	af 83       	std	Y+7, r26	; 0x07
    332e:	b8 87       	std	Y+8, r27	; 0x08
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	9e 81       	ldd	r25, Y+6	; 0x06
    3334:	af 81       	ldd	r26, Y+7	; 0x07
    3336:	b8 85       	ldd	r27, Y+8	; 0x08
    3338:	49 85       	ldd	r20, Y+9	; 0x09
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	0e 94 25 23 	call	0x464a	; 0x464a <prvAddCurrentTaskToDelayedList>
    3342:	00 00       	nop
    3344:	29 96       	adiw	r28, 0x09	; 9
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	df 91       	pop	r29
    3352:	cf 91       	pop	r28
    3354:	08 95       	ret

00003356 <xTaskRemoveFromEventList>:
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
    335e:	2d 97       	sbiw	r28, 0x0d	; 13
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	9d 87       	std	Y+13, r25	; 0x0d
    336c:	8c 87       	std	Y+12, r24	; 0x0c
    336e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3370:	9d 85       	ldd	r25, Y+13	; 0x0d
    3372:	fc 01       	movw	r30, r24
    3374:	87 81       	ldd	r24, Z+7	; 0x07
    3376:	90 85       	ldd	r25, Z+8	; 0x08
    3378:	fc 01       	movw	r30, r24
    337a:	80 85       	ldd	r24, Z+8	; 0x08
    337c:	91 85       	ldd	r25, Z+9	; 0x09
    337e:	9b 83       	std	Y+3, r25	; 0x03
    3380:	8a 83       	std	Y+2, r24	; 0x02
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	9b 81       	ldd	r25, Y+3	; 0x03
    3386:	fc 01       	movw	r30, r24
    3388:	80 8d       	ldd	r24, Z+24	; 0x18
    338a:	91 8d       	ldd	r25, Z+25	; 0x19
    338c:	9d 83       	std	Y+5, r25	; 0x05
    338e:	8c 83       	std	Y+4, r24	; 0x04
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	9b 81       	ldd	r25, Y+3	; 0x03
    3394:	fc 01       	movw	r30, r24
    3396:	82 89       	ldd	r24, Z+18	; 0x12
    3398:	93 89       	ldd	r25, Z+19	; 0x13
    339a:	2a 81       	ldd	r18, Y+2	; 0x02
    339c:	3b 81       	ldd	r19, Y+3	; 0x03
    339e:	f9 01       	movw	r30, r18
    33a0:	24 89       	ldd	r18, Z+20	; 0x14
    33a2:	35 89       	ldd	r19, Z+21	; 0x15
    33a4:	fc 01       	movw	r30, r24
    33a6:	37 83       	std	Z+7, r19	; 0x07
    33a8:	26 83       	std	Z+6, r18	; 0x06
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	9b 81       	ldd	r25, Y+3	; 0x03
    33ae:	fc 01       	movw	r30, r24
    33b0:	84 89       	ldd	r24, Z+20	; 0x14
    33b2:	95 89       	ldd	r25, Z+21	; 0x15
    33b4:	2a 81       	ldd	r18, Y+2	; 0x02
    33b6:	3b 81       	ldd	r19, Y+3	; 0x03
    33b8:	f9 01       	movw	r30, r18
    33ba:	22 89       	ldd	r18, Z+18	; 0x12
    33bc:	33 89       	ldd	r19, Z+19	; 0x13
    33be:	fc 01       	movw	r30, r24
    33c0:	35 83       	std	Z+5, r19	; 0x05
    33c2:	24 83       	std	Z+4, r18	; 0x04
    33c4:	8c 81       	ldd	r24, Y+4	; 0x04
    33c6:	9d 81       	ldd	r25, Y+5	; 0x05
    33c8:	fc 01       	movw	r30, r24
    33ca:	21 81       	ldd	r18, Z+1	; 0x01
    33cc:	32 81       	ldd	r19, Z+2	; 0x02
    33ce:	8a 81       	ldd	r24, Y+2	; 0x02
    33d0:	9b 81       	ldd	r25, Y+3	; 0x03
    33d2:	0e 96       	adiw	r24, 0x0e	; 14
    33d4:	28 17       	cp	r18, r24
    33d6:	39 07       	cpc	r19, r25
    33d8:	51 f4       	brne	.+20     	; 0x33ee <xTaskRemoveFromEventList+0x98>
    33da:	8a 81       	ldd	r24, Y+2	; 0x02
    33dc:	9b 81       	ldd	r25, Y+3	; 0x03
    33de:	fc 01       	movw	r30, r24
    33e0:	24 89       	ldd	r18, Z+20	; 0x14
    33e2:	35 89       	ldd	r19, Z+21	; 0x15
    33e4:	8c 81       	ldd	r24, Y+4	; 0x04
    33e6:	9d 81       	ldd	r25, Y+5	; 0x05
    33e8:	fc 01       	movw	r30, r24
    33ea:	32 83       	std	Z+2, r19	; 0x02
    33ec:	21 83       	std	Z+1, r18	; 0x01
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	9b 81       	ldd	r25, Y+3	; 0x03
    33f2:	fc 01       	movw	r30, r24
    33f4:	11 8e       	std	Z+25, r1	; 0x19
    33f6:	10 8e       	std	Z+24, r1	; 0x18
    33f8:	8c 81       	ldd	r24, Y+4	; 0x04
    33fa:	9d 81       	ldd	r25, Y+5	; 0x05
    33fc:	fc 01       	movw	r30, r24
    33fe:	80 81       	ld	r24, Z
    3400:	2f ef       	ldi	r18, 0xFF	; 255
    3402:	28 0f       	add	r18, r24
    3404:	8c 81       	ldd	r24, Y+4	; 0x04
    3406:	9d 81       	ldd	r25, Y+5	; 0x05
    3408:	fc 01       	movw	r30, r24
    340a:	20 83       	st	Z, r18
    340c:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxSchedulerSuspended>
    3410:	88 23       	and	r24, r24
    3412:	09 f0       	breq	.+2      	; 0x3416 <xTaskRemoveFromEventList+0xc0>
    3414:	bf c0       	rjmp	.+382    	; 0x3594 <xTaskRemoveFromEventList+0x23e>
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	9b 81       	ldd	r25, Y+3	; 0x03
    341a:	fc 01       	movw	r30, r24
    341c:	84 85       	ldd	r24, Z+12	; 0x0c
    341e:	95 85       	ldd	r25, Z+13	; 0x0d
    3420:	9f 83       	std	Y+7, r25	; 0x07
    3422:	8e 83       	std	Y+6, r24	; 0x06
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	9b 81       	ldd	r25, Y+3	; 0x03
    3428:	fc 01       	movw	r30, r24
    342a:	86 81       	ldd	r24, Z+6	; 0x06
    342c:	97 81       	ldd	r25, Z+7	; 0x07
    342e:	2a 81       	ldd	r18, Y+2	; 0x02
    3430:	3b 81       	ldd	r19, Y+3	; 0x03
    3432:	f9 01       	movw	r30, r18
    3434:	20 85       	ldd	r18, Z+8	; 0x08
    3436:	31 85       	ldd	r19, Z+9	; 0x09
    3438:	fc 01       	movw	r30, r24
    343a:	37 83       	std	Z+7, r19	; 0x07
    343c:	26 83       	std	Z+6, r18	; 0x06
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	9b 81       	ldd	r25, Y+3	; 0x03
    3442:	fc 01       	movw	r30, r24
    3444:	80 85       	ldd	r24, Z+8	; 0x08
    3446:	91 85       	ldd	r25, Z+9	; 0x09
    3448:	2a 81       	ldd	r18, Y+2	; 0x02
    344a:	3b 81       	ldd	r19, Y+3	; 0x03
    344c:	f9 01       	movw	r30, r18
    344e:	26 81       	ldd	r18, Z+6	; 0x06
    3450:	37 81       	ldd	r19, Z+7	; 0x07
    3452:	fc 01       	movw	r30, r24
    3454:	35 83       	std	Z+5, r19	; 0x05
    3456:	24 83       	std	Z+4, r18	; 0x04
    3458:	8e 81       	ldd	r24, Y+6	; 0x06
    345a:	9f 81       	ldd	r25, Y+7	; 0x07
    345c:	fc 01       	movw	r30, r24
    345e:	21 81       	ldd	r18, Z+1	; 0x01
    3460:	32 81       	ldd	r19, Z+2	; 0x02
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	9b 81       	ldd	r25, Y+3	; 0x03
    3466:	02 96       	adiw	r24, 0x02	; 2
    3468:	28 17       	cp	r18, r24
    346a:	39 07       	cpc	r19, r25
    346c:	51 f4       	brne	.+20     	; 0x3482 <xTaskRemoveFromEventList+0x12c>
    346e:	8a 81       	ldd	r24, Y+2	; 0x02
    3470:	9b 81       	ldd	r25, Y+3	; 0x03
    3472:	fc 01       	movw	r30, r24
    3474:	20 85       	ldd	r18, Z+8	; 0x08
    3476:	31 85       	ldd	r19, Z+9	; 0x09
    3478:	8e 81       	ldd	r24, Y+6	; 0x06
    347a:	9f 81       	ldd	r25, Y+7	; 0x07
    347c:	fc 01       	movw	r30, r24
    347e:	32 83       	std	Z+2, r19	; 0x02
    3480:	21 83       	std	Z+1, r18	; 0x01
    3482:	8a 81       	ldd	r24, Y+2	; 0x02
    3484:	9b 81       	ldd	r25, Y+3	; 0x03
    3486:	fc 01       	movw	r30, r24
    3488:	15 86       	std	Z+13, r1	; 0x0d
    348a:	14 86       	std	Z+12, r1	; 0x0c
    348c:	8e 81       	ldd	r24, Y+6	; 0x06
    348e:	9f 81       	ldd	r25, Y+7	; 0x07
    3490:	fc 01       	movw	r30, r24
    3492:	80 81       	ld	r24, Z
    3494:	2f ef       	ldi	r18, 0xFF	; 255
    3496:	28 0f       	add	r18, r24
    3498:	8e 81       	ldd	r24, Y+6	; 0x06
    349a:	9f 81       	ldd	r25, Y+7	; 0x07
    349c:	fc 01       	movw	r30, r24
    349e:	20 83       	st	Z, r18
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	9b 81       	ldd	r25, Y+3	; 0x03
    34a4:	fc 01       	movw	r30, r24
    34a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    34a8:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <uxTopReadyPriority>
    34ac:	89 17       	cp	r24, r25
    34ae:	30 f4       	brcc	.+12     	; 0x34bc <xTaskRemoveFromEventList+0x166>
    34b0:	8a 81       	ldd	r24, Y+2	; 0x02
    34b2:	9b 81       	ldd	r25, Y+3	; 0x03
    34b4:	fc 01       	movw	r30, r24
    34b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    34b8:	80 93 0b 11 	sts	0x110B, r24	; 0x80110b <uxTopReadyPriority>
    34bc:	8a 81       	ldd	r24, Y+2	; 0x02
    34be:	9b 81       	ldd	r25, Y+3	; 0x03
    34c0:	fc 01       	movw	r30, r24
    34c2:	82 8d       	ldd	r24, Z+26	; 0x1a
    34c4:	28 2f       	mov	r18, r24
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	4b e0       	ldi	r20, 0x0B	; 11
    34ca:	42 9f       	mul	r20, r18
    34cc:	c0 01       	movw	r24, r0
    34ce:	43 9f       	mul	r20, r19
    34d0:	90 0d       	add	r25, r0
    34d2:	11 24       	eor	r1, r1
    34d4:	83 5a       	subi	r24, 0xA3	; 163
    34d6:	9f 4e       	sbci	r25, 0xEF	; 239
    34d8:	fc 01       	movw	r30, r24
    34da:	80 81       	ld	r24, Z
    34dc:	91 81       	ldd	r25, Z+1	; 0x01
    34de:	99 87       	std	Y+9, r25	; 0x09
    34e0:	88 87       	std	Y+8, r24	; 0x08
    34e2:	8a 81       	ldd	r24, Y+2	; 0x02
    34e4:	9b 81       	ldd	r25, Y+3	; 0x03
    34e6:	28 85       	ldd	r18, Y+8	; 0x08
    34e8:	39 85       	ldd	r19, Y+9	; 0x09
    34ea:	fc 01       	movw	r30, r24
    34ec:	37 83       	std	Z+7, r19	; 0x07
    34ee:	26 83       	std	Z+6, r18	; 0x06
    34f0:	88 85       	ldd	r24, Y+8	; 0x08
    34f2:	99 85       	ldd	r25, Y+9	; 0x09
    34f4:	fc 01       	movw	r30, r24
    34f6:	26 81       	ldd	r18, Z+6	; 0x06
    34f8:	37 81       	ldd	r19, Z+7	; 0x07
    34fa:	8a 81       	ldd	r24, Y+2	; 0x02
    34fc:	9b 81       	ldd	r25, Y+3	; 0x03
    34fe:	fc 01       	movw	r30, r24
    3500:	31 87       	std	Z+9, r19	; 0x09
    3502:	20 87       	std	Z+8, r18	; 0x08
    3504:	88 85       	ldd	r24, Y+8	; 0x08
    3506:	99 85       	ldd	r25, Y+9	; 0x09
    3508:	fc 01       	movw	r30, r24
    350a:	86 81       	ldd	r24, Z+6	; 0x06
    350c:	97 81       	ldd	r25, Z+7	; 0x07
    350e:	2a 81       	ldd	r18, Y+2	; 0x02
    3510:	3b 81       	ldd	r19, Y+3	; 0x03
    3512:	2e 5f       	subi	r18, 0xFE	; 254
    3514:	3f 4f       	sbci	r19, 0xFF	; 255
    3516:	fc 01       	movw	r30, r24
    3518:	35 83       	std	Z+5, r19	; 0x05
    351a:	24 83       	std	Z+4, r18	; 0x04
    351c:	8a 81       	ldd	r24, Y+2	; 0x02
    351e:	9b 81       	ldd	r25, Y+3	; 0x03
    3520:	9c 01       	movw	r18, r24
    3522:	2e 5f       	subi	r18, 0xFE	; 254
    3524:	3f 4f       	sbci	r19, 0xFF	; 255
    3526:	88 85       	ldd	r24, Y+8	; 0x08
    3528:	99 85       	ldd	r25, Y+9	; 0x09
    352a:	fc 01       	movw	r30, r24
    352c:	37 83       	std	Z+7, r19	; 0x07
    352e:	26 83       	std	Z+6, r18	; 0x06
    3530:	8a 81       	ldd	r24, Y+2	; 0x02
    3532:	9b 81       	ldd	r25, Y+3	; 0x03
    3534:	fc 01       	movw	r30, r24
    3536:	82 8d       	ldd	r24, Z+26	; 0x1a
    3538:	28 2f       	mov	r18, r24
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	4b e0       	ldi	r20, 0x0B	; 11
    353e:	42 9f       	mul	r20, r18
    3540:	c0 01       	movw	r24, r0
    3542:	43 9f       	mul	r20, r19
    3544:	90 0d       	add	r25, r0
    3546:	11 24       	eor	r1, r1
    3548:	9c 01       	movw	r18, r24
    354a:	24 5a       	subi	r18, 0xA4	; 164
    354c:	3f 4e       	sbci	r19, 0xEF	; 239
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	9b 81       	ldd	r25, Y+3	; 0x03
    3552:	fc 01       	movw	r30, r24
    3554:	35 87       	std	Z+13, r19	; 0x0d
    3556:	24 87       	std	Z+12, r18	; 0x0c
    3558:	8a 81       	ldd	r24, Y+2	; 0x02
    355a:	9b 81       	ldd	r25, Y+3	; 0x03
    355c:	fc 01       	movw	r30, r24
    355e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3560:	88 2f       	mov	r24, r24
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	4b e0       	ldi	r20, 0x0B	; 11
    3566:	48 9f       	mul	r20, r24
    3568:	90 01       	movw	r18, r0
    356a:	49 9f       	mul	r20, r25
    356c:	30 0d       	add	r19, r0
    356e:	11 24       	eor	r1, r1
    3570:	24 5a       	subi	r18, 0xA4	; 164
    3572:	3f 4e       	sbci	r19, 0xEF	; 239
    3574:	f9 01       	movw	r30, r18
    3576:	20 81       	ld	r18, Z
    3578:	41 e0       	ldi	r20, 0x01	; 1
    357a:	42 0f       	add	r20, r18
    357c:	5b e0       	ldi	r21, 0x0B	; 11
    357e:	58 9f       	mul	r21, r24
    3580:	90 01       	movw	r18, r0
    3582:	59 9f       	mul	r21, r25
    3584:	30 0d       	add	r19, r0
    3586:	11 24       	eor	r1, r1
    3588:	c9 01       	movw	r24, r18
    358a:	84 5a       	subi	r24, 0xA4	; 164
    358c:	9f 4e       	sbci	r25, 0xEF	; 239
    358e:	fc 01       	movw	r30, r24
    3590:	40 83       	st	Z, r20
    3592:	39 c0       	rjmp	.+114    	; 0x3606 <xTaskRemoveFromEventList+0x2b0>
    3594:	80 91 e5 10 	lds	r24, 0x10E5	; 0x8010e5 <xPendingReadyList+0x1>
    3598:	90 91 e6 10 	lds	r25, 0x10E6	; 0x8010e6 <xPendingReadyList+0x2>
    359c:	9b 87       	std	Y+11, r25	; 0x0b
    359e:	8a 87       	std	Y+10, r24	; 0x0a
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	9b 81       	ldd	r25, Y+3	; 0x03
    35a4:	2a 85       	ldd	r18, Y+10	; 0x0a
    35a6:	3b 85       	ldd	r19, Y+11	; 0x0b
    35a8:	fc 01       	movw	r30, r24
    35aa:	33 8b       	std	Z+19, r19	; 0x13
    35ac:	22 8b       	std	Z+18, r18	; 0x12
    35ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    35b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    35b2:	fc 01       	movw	r30, r24
    35b4:	26 81       	ldd	r18, Z+6	; 0x06
    35b6:	37 81       	ldd	r19, Z+7	; 0x07
    35b8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ba:	9b 81       	ldd	r25, Y+3	; 0x03
    35bc:	fc 01       	movw	r30, r24
    35be:	35 8b       	std	Z+21, r19	; 0x15
    35c0:	24 8b       	std	Z+20, r18	; 0x14
    35c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    35c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    35c6:	fc 01       	movw	r30, r24
    35c8:	86 81       	ldd	r24, Z+6	; 0x06
    35ca:	97 81       	ldd	r25, Z+7	; 0x07
    35cc:	2a 81       	ldd	r18, Y+2	; 0x02
    35ce:	3b 81       	ldd	r19, Y+3	; 0x03
    35d0:	22 5f       	subi	r18, 0xF2	; 242
    35d2:	3f 4f       	sbci	r19, 0xFF	; 255
    35d4:	fc 01       	movw	r30, r24
    35d6:	35 83       	std	Z+5, r19	; 0x05
    35d8:	24 83       	std	Z+4, r18	; 0x04
    35da:	8a 81       	ldd	r24, Y+2	; 0x02
    35dc:	9b 81       	ldd	r25, Y+3	; 0x03
    35de:	9c 01       	movw	r18, r24
    35e0:	22 5f       	subi	r18, 0xF2	; 242
    35e2:	3f 4f       	sbci	r19, 0xFF	; 255
    35e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    35e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    35e8:	fc 01       	movw	r30, r24
    35ea:	37 83       	std	Z+7, r19	; 0x07
    35ec:	26 83       	std	Z+6, r18	; 0x06
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	9b 81       	ldd	r25, Y+3	; 0x03
    35f2:	24 ee       	ldi	r18, 0xE4	; 228
    35f4:	30 e1       	ldi	r19, 0x10	; 16
    35f6:	fc 01       	movw	r30, r24
    35f8:	31 8f       	std	Z+25, r19	; 0x19
    35fa:	20 8f       	std	Z+24, r18	; 0x18
    35fc:	80 91 e4 10 	lds	r24, 0x10E4	; 0x8010e4 <xPendingReadyList>
    3600:	8f 5f       	subi	r24, 0xFF	; 255
    3602:	80 93 e4 10 	sts	0x10E4, r24	; 0x8010e4 <xPendingReadyList>
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	9b 81       	ldd	r25, Y+3	; 0x03
    360a:	fc 01       	movw	r30, r24
    360c:	22 8d       	ldd	r18, Z+26	; 0x1a
    360e:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    3612:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3616:	fc 01       	movw	r30, r24
    3618:	82 8d       	ldd	r24, Z+26	; 0x1a
    361a:	82 17       	cp	r24, r18
    361c:	30 f4       	brcc	.+12     	; 0x362a <xTaskRemoveFromEventList+0x2d4>
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	89 83       	std	Y+1, r24	; 0x01
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	80 93 11 11 	sts	0x1111, r24	; 0x801111 <xYieldPending>
    3628:	01 c0       	rjmp	.+2      	; 0x362c <xTaskRemoveFromEventList+0x2d6>
    362a:	19 82       	std	Y+1, r1	; 0x01
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	2d 96       	adiw	r28, 0x0d	; 13
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	08 95       	ret

00003640 <vTaskSetTimeOutState>:
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	1f 92       	push	r1
    3646:	1f 92       	push	r1
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
    364c:	9a 83       	std	Y+2, r25	; 0x02
    364e:	89 83       	std	Y+1, r24	; 0x01
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	0f 92       	push	r0
    3656:	20 91 12 11 	lds	r18, 0x1112	; 0x801112 <xNumOfOverflows>
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	9a 81       	ldd	r25, Y+2	; 0x02
    365e:	fc 01       	movw	r30, r24
    3660:	20 83       	st	Z, r18
    3662:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <xTickCount>
    3666:	90 91 08 11 	lds	r25, 0x1108	; 0x801108 <xTickCount+0x1>
    366a:	a0 91 09 11 	lds	r26, 0x1109	; 0x801109 <xTickCount+0x2>
    366e:	b0 91 0a 11 	lds	r27, 0x110A	; 0x80110a <xTickCount+0x3>
    3672:	29 81       	ldd	r18, Y+1	; 0x01
    3674:	3a 81       	ldd	r19, Y+2	; 0x02
    3676:	f9 01       	movw	r30, r18
    3678:	81 83       	std	Z+1, r24	; 0x01
    367a:	92 83       	std	Z+2, r25	; 0x02
    367c:	a3 83       	std	Z+3, r26	; 0x03
    367e:	b4 83       	std	Z+4, r27	; 0x04
    3680:	0f 90       	pop	r0
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	00 00       	nop
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	08 95       	ret

00003690 <vTaskInternalSetTimeOutState>:
    3690:	cf 93       	push	r28
    3692:	df 93       	push	r29
    3694:	1f 92       	push	r1
    3696:	1f 92       	push	r1
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
    36a0:	20 91 12 11 	lds	r18, 0x1112	; 0x801112 <xNumOfOverflows>
    36a4:	89 81       	ldd	r24, Y+1	; 0x01
    36a6:	9a 81       	ldd	r25, Y+2	; 0x02
    36a8:	fc 01       	movw	r30, r24
    36aa:	20 83       	st	Z, r18
    36ac:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <xTickCount>
    36b0:	90 91 08 11 	lds	r25, 0x1108	; 0x801108 <xTickCount+0x1>
    36b4:	a0 91 09 11 	lds	r26, 0x1109	; 0x801109 <xTickCount+0x2>
    36b8:	b0 91 0a 11 	lds	r27, 0x110A	; 0x80110a <xTickCount+0x3>
    36bc:	29 81       	ldd	r18, Y+1	; 0x01
    36be:	3a 81       	ldd	r19, Y+2	; 0x02
    36c0:	f9 01       	movw	r30, r18
    36c2:	81 83       	std	Z+1, r24	; 0x01
    36c4:	92 83       	std	Z+2, r25	; 0x02
    36c6:	a3 83       	std	Z+3, r26	; 0x03
    36c8:	b4 83       	std	Z+4, r27	; 0x04
    36ca:	00 00       	nop
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	df 91       	pop	r29
    36d2:	cf 91       	pop	r28
    36d4:	08 95       	ret

000036d6 <xTaskCheckForTimeOut>:
    36d6:	ef 92       	push	r14
    36d8:	ff 92       	push	r15
    36da:	0f 93       	push	r16
    36dc:	1f 93       	push	r17
    36de:	cf 93       	push	r28
    36e0:	df 93       	push	r29
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	2d 97       	sbiw	r28, 0x0d	; 13
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	9b 87       	std	Y+11, r25	; 0x0b
    36f4:	8a 87       	std	Y+10, r24	; 0x0a
    36f6:	7d 87       	std	Y+13, r23	; 0x0d
    36f8:	6c 87       	std	Y+12, r22	; 0x0c
    36fa:	0f b6       	in	r0, 0x3f	; 63
    36fc:	f8 94       	cli
    36fe:	0f 92       	push	r0
    3700:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <xTickCount>
    3704:	90 91 08 11 	lds	r25, 0x1108	; 0x801108 <xTickCount+0x1>
    3708:	a0 91 09 11 	lds	r26, 0x1109	; 0x801109 <xTickCount+0x2>
    370c:	b0 91 0a 11 	lds	r27, 0x110A	; 0x80110a <xTickCount+0x3>
    3710:	8a 83       	std	Y+2, r24	; 0x02
    3712:	9b 83       	std	Y+3, r25	; 0x03
    3714:	ac 83       	std	Y+4, r26	; 0x04
    3716:	bd 83       	std	Y+5, r27	; 0x05
    3718:	8a 85       	ldd	r24, Y+10	; 0x0a
    371a:	9b 85       	ldd	r25, Y+11	; 0x0b
    371c:	fc 01       	movw	r30, r24
    371e:	81 81       	ldd	r24, Z+1	; 0x01
    3720:	92 81       	ldd	r25, Z+2	; 0x02
    3722:	a3 81       	ldd	r26, Z+3	; 0x03
    3724:	b4 81       	ldd	r27, Z+4	; 0x04
    3726:	2a 81       	ldd	r18, Y+2	; 0x02
    3728:	3b 81       	ldd	r19, Y+3	; 0x03
    372a:	4c 81       	ldd	r20, Y+4	; 0x04
    372c:	5d 81       	ldd	r21, Y+5	; 0x05
    372e:	79 01       	movw	r14, r18
    3730:	8a 01       	movw	r16, r20
    3732:	e8 1a       	sub	r14, r24
    3734:	f9 0a       	sbc	r15, r25
    3736:	0a 0b       	sbc	r16, r26
    3738:	1b 0b       	sbc	r17, r27
    373a:	d8 01       	movw	r26, r16
    373c:	c7 01       	movw	r24, r14
    373e:	8e 83       	std	Y+6, r24	; 0x06
    3740:	9f 83       	std	Y+7, r25	; 0x07
    3742:	a8 87       	std	Y+8, r26	; 0x08
    3744:	b9 87       	std	Y+9, r27	; 0x09
    3746:	8c 85       	ldd	r24, Y+12	; 0x0c
    3748:	9d 85       	ldd	r25, Y+13	; 0x0d
    374a:	fc 01       	movw	r30, r24
    374c:	80 81       	ld	r24, Z
    374e:	91 81       	ldd	r25, Z+1	; 0x01
    3750:	a2 81       	ldd	r26, Z+2	; 0x02
    3752:	b3 81       	ldd	r27, Z+3	; 0x03
    3754:	8f 3f       	cpi	r24, 0xFF	; 255
    3756:	9f 4f       	sbci	r25, 0xFF	; 255
    3758:	af 4f       	sbci	r26, 0xFF	; 255
    375a:	bf 4f       	sbci	r27, 0xFF	; 255
    375c:	11 f4       	brne	.+4      	; 0x3762 <xTaskCheckForTimeOut+0x8c>
    375e:	19 82       	std	Y+1, r1	; 0x01
    3760:	5a c0       	rjmp	.+180    	; 0x3816 <xTaskCheckForTimeOut+0x140>
    3762:	8a 85       	ldd	r24, Y+10	; 0x0a
    3764:	9b 85       	ldd	r25, Y+11	; 0x0b
    3766:	fc 01       	movw	r30, r24
    3768:	90 81       	ld	r25, Z
    376a:	80 91 12 11 	lds	r24, 0x1112	; 0x801112 <xNumOfOverflows>
    376e:	98 17       	cp	r25, r24
    3770:	d1 f0       	breq	.+52     	; 0x37a6 <xTaskCheckForTimeOut+0xd0>
    3772:	8a 85       	ldd	r24, Y+10	; 0x0a
    3774:	9b 85       	ldd	r25, Y+11	; 0x0b
    3776:	fc 01       	movw	r30, r24
    3778:	21 81       	ldd	r18, Z+1	; 0x01
    377a:	32 81       	ldd	r19, Z+2	; 0x02
    377c:	43 81       	ldd	r20, Z+3	; 0x03
    377e:	54 81       	ldd	r21, Z+4	; 0x04
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	9b 81       	ldd	r25, Y+3	; 0x03
    3784:	ac 81       	ldd	r26, Y+4	; 0x04
    3786:	bd 81       	ldd	r27, Y+5	; 0x05
    3788:	82 17       	cp	r24, r18
    378a:	93 07       	cpc	r25, r19
    378c:	a4 07       	cpc	r26, r20
    378e:	b5 07       	cpc	r27, r21
    3790:	50 f0       	brcs	.+20     	; 0x37a6 <xTaskCheckForTimeOut+0xd0>
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	89 83       	std	Y+1, r24	; 0x01
    3796:	8c 85       	ldd	r24, Y+12	; 0x0c
    3798:	9d 85       	ldd	r25, Y+13	; 0x0d
    379a:	fc 01       	movw	r30, r24
    379c:	10 82       	st	Z, r1
    379e:	11 82       	std	Z+1, r1	; 0x01
    37a0:	12 82       	std	Z+2, r1	; 0x02
    37a2:	13 82       	std	Z+3, r1	; 0x03
    37a4:	38 c0       	rjmp	.+112    	; 0x3816 <xTaskCheckForTimeOut+0x140>
    37a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    37a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    37aa:	fc 01       	movw	r30, r24
    37ac:	20 81       	ld	r18, Z
    37ae:	31 81       	ldd	r19, Z+1	; 0x01
    37b0:	42 81       	ldd	r20, Z+2	; 0x02
    37b2:	53 81       	ldd	r21, Z+3	; 0x03
    37b4:	8e 81       	ldd	r24, Y+6	; 0x06
    37b6:	9f 81       	ldd	r25, Y+7	; 0x07
    37b8:	a8 85       	ldd	r26, Y+8	; 0x08
    37ba:	b9 85       	ldd	r27, Y+9	; 0x09
    37bc:	82 17       	cp	r24, r18
    37be:	93 07       	cpc	r25, r19
    37c0:	a4 07       	cpc	r26, r20
    37c2:	b5 07       	cpc	r27, r21
    37c4:	f8 f4       	brcc	.+62     	; 0x3804 <xTaskCheckForTimeOut+0x12e>
    37c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    37c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    37ca:	fc 01       	movw	r30, r24
    37cc:	20 81       	ld	r18, Z
    37ce:	31 81       	ldd	r19, Z+1	; 0x01
    37d0:	42 81       	ldd	r20, Z+2	; 0x02
    37d2:	53 81       	ldd	r21, Z+3	; 0x03
    37d4:	8e 81       	ldd	r24, Y+6	; 0x06
    37d6:	9f 81       	ldd	r25, Y+7	; 0x07
    37d8:	a8 85       	ldd	r26, Y+8	; 0x08
    37da:	b9 85       	ldd	r27, Y+9	; 0x09
    37dc:	79 01       	movw	r14, r18
    37de:	8a 01       	movw	r16, r20
    37e0:	e8 1a       	sub	r14, r24
    37e2:	f9 0a       	sbc	r15, r25
    37e4:	0a 0b       	sbc	r16, r26
    37e6:	1b 0b       	sbc	r17, r27
    37e8:	d8 01       	movw	r26, r16
    37ea:	c7 01       	movw	r24, r14
    37ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    37ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    37f0:	f9 01       	movw	r30, r18
    37f2:	80 83       	st	Z, r24
    37f4:	91 83       	std	Z+1, r25	; 0x01
    37f6:	a2 83       	std	Z+2, r26	; 0x02
    37f8:	b3 83       	std	Z+3, r27	; 0x03
    37fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    37fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    37fe:	48 df       	rcall	.-368    	; 0x3690 <vTaskInternalSetTimeOutState>
    3800:	19 82       	std	Y+1, r1	; 0x01
    3802:	09 c0       	rjmp	.+18     	; 0x3816 <xTaskCheckForTimeOut+0x140>
    3804:	8c 85       	ldd	r24, Y+12	; 0x0c
    3806:	9d 85       	ldd	r25, Y+13	; 0x0d
    3808:	fc 01       	movw	r30, r24
    380a:	10 82       	st	Z, r1
    380c:	11 82       	std	Z+1, r1	; 0x01
    380e:	12 82       	std	Z+2, r1	; 0x02
    3810:	13 82       	std	Z+3, r1	; 0x03
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	89 83       	std	Y+1, r24	; 0x01
    3816:	0f 90       	pop	r0
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	2d 96       	adiw	r28, 0x0d	; 13
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	0f be       	out	0x3f, r0	; 63
    3826:	cd bf       	out	0x3d, r28	; 61
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	ff 90       	pop	r15
    3832:	ef 90       	pop	r14
    3834:	08 95       	ret

00003836 <vTaskMissedYield>:
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	cd b7       	in	r28, 0x3d	; 61
    383c:	de b7       	in	r29, 0x3e	; 62
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	80 93 11 11 	sts	0x1111, r24	; 0x801111 <xYieldPending>
    3844:	00 00       	nop
    3846:	df 91       	pop	r29
    3848:	cf 91       	pop	r28
    384a:	08 95       	ret

0000384c <prvInitialiseTaskLists>:
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29
    3850:	1f 92       	push	r1
    3852:	cd b7       	in	r28, 0x3d	; 61
    3854:	de b7       	in	r29, 0x3e	; 62
    3856:	19 82       	std	Y+1, r1	; 0x01
    3858:	10 c0       	rjmp	.+32     	; 0x387a <prvInitialiseTaskLists+0x2e>
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	28 2f       	mov	r18, r24
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4b e0       	ldi	r20, 0x0B	; 11
    3862:	42 9f       	mul	r20, r18
    3864:	c0 01       	movw	r24, r0
    3866:	43 9f       	mul	r20, r19
    3868:	90 0d       	add	r25, r0
    386a:	11 24       	eor	r1, r1
    386c:	84 5a       	subi	r24, 0xA4	; 164
    386e:	9f 4e       	sbci	r25, 0xEF	; 239
    3870:	0e 94 8c 03 	call	0x718	; 0x718 <vListInitialise>
    3874:	89 81       	ldd	r24, Y+1	; 0x01
    3876:	8f 5f       	subi	r24, 0xFF	; 255
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	8a 30       	cpi	r24, 0x0A	; 10
    387e:	68 f3       	brcs	.-38     	; 0x385a <prvInitialiseTaskLists+0xe>
    3880:	8a ec       	ldi	r24, 0xCA	; 202
    3882:	90 e1       	ldi	r25, 0x10	; 16
    3884:	0e 94 8c 03 	call	0x718	; 0x718 <vListInitialise>
    3888:	85 ed       	ldi	r24, 0xD5	; 213
    388a:	90 e1       	ldi	r25, 0x10	; 16
    388c:	0e 94 8c 03 	call	0x718	; 0x718 <vListInitialise>
    3890:	84 ee       	ldi	r24, 0xE4	; 228
    3892:	90 e1       	ldi	r25, 0x10	; 16
    3894:	0e 94 8c 03 	call	0x718	; 0x718 <vListInitialise>
    3898:	8f ee       	ldi	r24, 0xEF	; 239
    389a:	90 e1       	ldi	r25, 0x10	; 16
    389c:	0e 94 8c 03 	call	0x718	; 0x718 <vListInitialise>
    38a0:	8b ef       	ldi	r24, 0xFB	; 251
    38a2:	90 e1       	ldi	r25, 0x10	; 16
    38a4:	0e 94 8c 03 	call	0x718	; 0x718 <vListInitialise>
    38a8:	8a ec       	ldi	r24, 0xCA	; 202
    38aa:	90 e1       	ldi	r25, 0x10	; 16
    38ac:	90 93 e1 10 	sts	0x10E1, r25	; 0x8010e1 <pxDelayedTaskList+0x1>
    38b0:	80 93 e0 10 	sts	0x10E0, r24	; 0x8010e0 <pxDelayedTaskList>
    38b4:	85 ed       	ldi	r24, 0xD5	; 213
    38b6:	90 e1       	ldi	r25, 0x10	; 16
    38b8:	90 93 e3 10 	sts	0x10E3, r25	; 0x8010e3 <pxOverflowDelayedTaskList+0x1>
    38bc:	80 93 e2 10 	sts	0x10E2, r24	; 0x8010e2 <pxOverflowDelayedTaskList>
    38c0:	00 00       	nop
    38c2:	0f 90       	pop	r0
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	08 95       	ret

000038ca <prvCheckTasksWaitingTermination>:
    38ca:	cf 93       	push	r28
    38cc:	df 93       	push	r29
    38ce:	1f 92       	push	r1
    38d0:	1f 92       	push	r1
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
    38d6:	20 c0       	rjmp	.+64     	; 0x3918 <prvCheckTasksWaitingTermination+0x4e>
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	0f 92       	push	r0
    38de:	80 91 f6 10 	lds	r24, 0x10F6	; 0x8010f6 <xTasksWaitingTermination+0x7>
    38e2:	90 91 f7 10 	lds	r25, 0x10F7	; 0x8010f7 <xTasksWaitingTermination+0x8>
    38e6:	fc 01       	movw	r30, r24
    38e8:	80 85       	ldd	r24, Z+8	; 0x08
    38ea:	91 85       	ldd	r25, Z+9	; 0x09
    38ec:	9a 83       	std	Y+2, r25	; 0x02
    38ee:	89 83       	std	Y+1, r24	; 0x01
    38f0:	89 81       	ldd	r24, Y+1	; 0x01
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	02 96       	adiw	r24, 0x02	; 2
    38f6:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uxListRemove>
    38fa:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxCurrentNumberOfTasks>
    38fe:	81 50       	subi	r24, 0x01	; 1
    3900:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <uxCurrentNumberOfTasks>
    3904:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <uxDeletedTasksWaitingCleanUp>
    3908:	81 50       	subi	r24, 0x01	; 1
    390a:	80 93 fa 10 	sts	0x10FA, r24	; 0x8010fa <uxDeletedTasksWaitingCleanUp>
    390e:	0f 90       	pop	r0
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	9a 81       	ldd	r25, Y+2	; 0x02
    3916:	0a d0       	rcall	.+20     	; 0x392c <prvDeleteTCB>
    3918:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <uxDeletedTasksWaitingCleanUp>
    391c:	88 23       	and	r24, r24
    391e:	e1 f6       	brne	.-72     	; 0x38d8 <prvCheckTasksWaitingTermination+0xe>
    3920:	00 00       	nop
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
    3926:	df 91       	pop	r29
    3928:	cf 91       	pop	r28
    392a:	08 95       	ret

0000392c <prvDeleteTCB>:
    392c:	cf 93       	push	r28
    392e:	df 93       	push	r29
    3930:	1f 92       	push	r1
    3932:	1f 92       	push	r1
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
    3938:	9a 83       	std	Y+2, r25	; 0x02
    393a:	89 83       	std	Y+1, r24	; 0x01
    393c:	89 81       	ldd	r24, Y+1	; 0x01
    393e:	9a 81       	ldd	r25, Y+2	; 0x02
    3940:	fc 01       	movw	r30, r24
    3942:	83 8d       	ldd	r24, Z+27	; 0x1b
    3944:	94 8d       	ldd	r25, Z+28	; 0x1c
    3946:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vPortFree>
    394a:	89 81       	ldd	r24, Y+1	; 0x01
    394c:	9a 81       	ldd	r25, Y+2	; 0x02
    394e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vPortFree>
    3952:	00 00       	nop
    3954:	0f 90       	pop	r0
    3956:	0f 90       	pop	r0
    3958:	df 91       	pop	r29
    395a:	cf 91       	pop	r28
    395c:	08 95       	ret

0000395e <prvResetNextTaskUnblockTime>:
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	cd b7       	in	r28, 0x3d	; 61
    3964:	de b7       	in	r29, 0x3e	; 62
    3966:	80 91 e0 10 	lds	r24, 0x10E0	; 0x8010e0 <pxDelayedTaskList>
    396a:	90 91 e1 10 	lds	r25, 0x10E1	; 0x8010e1 <pxDelayedTaskList+0x1>
    396e:	fc 01       	movw	r30, r24
    3970:	80 81       	ld	r24, Z
    3972:	88 23       	and	r24, r24
    3974:	61 f4       	brne	.+24     	; 0x398e <prvResetNextTaskUnblockTime+0x30>
    3976:	8f ef       	ldi	r24, 0xFF	; 255
    3978:	9f ef       	ldi	r25, 0xFF	; 255
    397a:	dc 01       	movw	r26, r24
    397c:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <xNextTaskUnblockTime>
    3980:	90 93 15 11 	sts	0x1115, r25	; 0x801115 <xNextTaskUnblockTime+0x1>
    3984:	a0 93 16 11 	sts	0x1116, r26	; 0x801116 <xNextTaskUnblockTime+0x2>
    3988:	b0 93 17 11 	sts	0x1117, r27	; 0x801117 <xNextTaskUnblockTime+0x3>
    398c:	14 c0       	rjmp	.+40     	; 0x39b6 <prvResetNextTaskUnblockTime+0x58>
    398e:	80 91 e0 10 	lds	r24, 0x10E0	; 0x8010e0 <pxDelayedTaskList>
    3992:	90 91 e1 10 	lds	r25, 0x10E1	; 0x8010e1 <pxDelayedTaskList+0x1>
    3996:	fc 01       	movw	r30, r24
    3998:	87 81       	ldd	r24, Z+7	; 0x07
    399a:	90 85       	ldd	r25, Z+8	; 0x08
    399c:	fc 01       	movw	r30, r24
    399e:	80 81       	ld	r24, Z
    39a0:	91 81       	ldd	r25, Z+1	; 0x01
    39a2:	a2 81       	ldd	r26, Z+2	; 0x02
    39a4:	b3 81       	ldd	r27, Z+3	; 0x03
    39a6:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <xNextTaskUnblockTime>
    39aa:	90 93 15 11 	sts	0x1115, r25	; 0x801115 <xNextTaskUnblockTime+0x1>
    39ae:	a0 93 16 11 	sts	0x1116, r26	; 0x801116 <xNextTaskUnblockTime+0x2>
    39b2:	b0 93 17 11 	sts	0x1117, r27	; 0x801117 <xNextTaskUnblockTime+0x3>
    39b6:	00 00       	nop
    39b8:	df 91       	pop	r29
    39ba:	cf 91       	pop	r28
    39bc:	08 95       	ret

000039be <xTaskGetCurrentTaskHandle>:
    39be:	cf 93       	push	r28
    39c0:	df 93       	push	r29
    39c2:	1f 92       	push	r1
    39c4:	1f 92       	push	r1
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
    39ca:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    39ce:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    39d2:	9a 83       	std	Y+2, r25	; 0x02
    39d4:	89 83       	std	Y+1, r24	; 0x01
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	9a 81       	ldd	r25, Y+2	; 0x02
    39da:	0f 90       	pop	r0
    39dc:	0f 90       	pop	r0
    39de:	df 91       	pop	r29
    39e0:	cf 91       	pop	r28
    39e2:	08 95       	ret

000039e4 <xTaskGetSchedulerState>:
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	1f 92       	push	r1
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <xSchedulerRunning>
    39f2:	88 23       	and	r24, r24
    39f4:	19 f4       	brne	.+6      	; 0x39fc <xTaskGetSchedulerState+0x18>
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	89 83       	std	Y+1, r24	; 0x01
    39fa:	08 c0       	rjmp	.+16     	; 0x3a0c <xTaskGetSchedulerState+0x28>
    39fc:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxSchedulerSuspended>
    3a00:	88 23       	and	r24, r24
    3a02:	19 f4       	brne	.+6      	; 0x3a0a <xTaskGetSchedulerState+0x26>
    3a04:	82 e0       	ldi	r24, 0x02	; 2
    3a06:	89 83       	std	Y+1, r24	; 0x01
    3a08:	01 c0       	rjmp	.+2      	; 0x3a0c <xTaskGetSchedulerState+0x28>
    3a0a:	19 82       	std	Y+1, r1	; 0x01
    3a0c:	89 81       	ldd	r24, Y+1	; 0x01
    3a0e:	0f 90       	pop	r0
    3a10:	df 91       	pop	r29
    3a12:	cf 91       	pop	r28
    3a14:	08 95       	ret

00003a16 <xTaskPriorityDisinherit>:
    3a16:	ef 92       	push	r14
    3a18:	ff 92       	push	r15
    3a1a:	0f 93       	push	r16
    3a1c:	1f 93       	push	r17
    3a1e:	cf 93       	push	r28
    3a20:	df 93       	push	r29
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	27 97       	sbiw	r28, 0x07	; 7
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	de bf       	out	0x3e, r29	; 62
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	9f 83       	std	Y+7, r25	; 0x07
    3a34:	8e 83       	std	Y+6, r24	; 0x06
    3a36:	8e 81       	ldd	r24, Y+6	; 0x06
    3a38:	9f 81       	ldd	r25, Y+7	; 0x07
    3a3a:	9b 83       	std	Y+3, r25	; 0x03
    3a3c:	8a 83       	std	Y+2, r24	; 0x02
    3a3e:	19 82       	std	Y+1, r1	; 0x01
    3a40:	8e 81       	ldd	r24, Y+6	; 0x06
    3a42:	9f 81       	ldd	r25, Y+7	; 0x07
    3a44:	89 2b       	or	r24, r25
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <xTaskPriorityDisinherit+0x34>
    3a48:	bf c0       	rjmp	.+382    	; 0x3bc8 <xTaskPriorityDisinherit+0x1b2>
    3a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a4e:	fc 01       	movw	r30, r24
    3a50:	86 a5       	ldd	r24, Z+46	; 0x2e
    3a52:	2f ef       	ldi	r18, 0xFF	; 255
    3a54:	28 0f       	add	r18, r24
    3a56:	8a 81       	ldd	r24, Y+2	; 0x02
    3a58:	9b 81       	ldd	r25, Y+3	; 0x03
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	26 a7       	std	Z+46, r18	; 0x2e
    3a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a60:	9b 81       	ldd	r25, Y+3	; 0x03
    3a62:	fc 01       	movw	r30, r24
    3a64:	22 8d       	ldd	r18, Z+26	; 0x1a
    3a66:	8a 81       	ldd	r24, Y+2	; 0x02
    3a68:	9b 81       	ldd	r25, Y+3	; 0x03
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	85 a5       	ldd	r24, Z+45	; 0x2d
    3a6e:	28 17       	cp	r18, r24
    3a70:	09 f4       	brne	.+2      	; 0x3a74 <xTaskPriorityDisinherit+0x5e>
    3a72:	aa c0       	rjmp	.+340    	; 0x3bc8 <xTaskPriorityDisinherit+0x1b2>
    3a74:	8a 81       	ldd	r24, Y+2	; 0x02
    3a76:	9b 81       	ldd	r25, Y+3	; 0x03
    3a78:	fc 01       	movw	r30, r24
    3a7a:	86 a5       	ldd	r24, Z+46	; 0x2e
    3a7c:	88 23       	and	r24, r24
    3a7e:	09 f0       	breq	.+2      	; 0x3a82 <xTaskPriorityDisinherit+0x6c>
    3a80:	a3 c0       	rjmp	.+326    	; 0x3bc8 <xTaskPriorityDisinherit+0x1b2>
    3a82:	8a 81       	ldd	r24, Y+2	; 0x02
    3a84:	9b 81       	ldd	r25, Y+3	; 0x03
    3a86:	02 96       	adiw	r24, 0x02	; 2
    3a88:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uxListRemove>
    3a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a90:	fc 01       	movw	r30, r24
    3a92:	25 a5       	ldd	r18, Z+45	; 0x2d
    3a94:	8a 81       	ldd	r24, Y+2	; 0x02
    3a96:	9b 81       	ldd	r25, Y+3	; 0x03
    3a98:	fc 01       	movw	r30, r24
    3a9a:	22 8f       	std	Z+26, r18	; 0x1a
    3a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3aa4:	88 2f       	mov	r24, r24
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	a0 e0       	ldi	r26, 0x00	; 0
    3aaa:	b0 e0       	ldi	r27, 0x00	; 0
    3aac:	2a e0       	ldi	r18, 0x0A	; 10
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	50 e0       	ldi	r21, 0x00	; 0
    3ab4:	79 01       	movw	r14, r18
    3ab6:	8a 01       	movw	r16, r20
    3ab8:	e8 1a       	sub	r14, r24
    3aba:	f9 0a       	sbc	r15, r25
    3abc:	0a 0b       	sbc	r16, r26
    3abe:	1b 0b       	sbc	r17, r27
    3ac0:	d8 01       	movw	r26, r16
    3ac2:	c7 01       	movw	r24, r14
    3ac4:	2a 81       	ldd	r18, Y+2	; 0x02
    3ac6:	3b 81       	ldd	r19, Y+3	; 0x03
    3ac8:	f9 01       	movw	r30, r18
    3aca:	86 87       	std	Z+14, r24	; 0x0e
    3acc:	97 87       	std	Z+15, r25	; 0x0f
    3ace:	a0 8b       	std	Z+16, r26	; 0x10
    3ad0:	b1 8b       	std	Z+17, r27	; 0x11
    3ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	92 8d       	ldd	r25, Z+26	; 0x1a
    3ada:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <uxTopReadyPriority>
    3ade:	89 17       	cp	r24, r25
    3ae0:	30 f4       	brcc	.+12     	; 0x3aee <xTaskPriorityDisinherit+0xd8>
    3ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae6:	fc 01       	movw	r30, r24
    3ae8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3aea:	80 93 0b 11 	sts	0x110B, r24	; 0x80110b <uxTopReadyPriority>
    3aee:	8a 81       	ldd	r24, Y+2	; 0x02
    3af0:	9b 81       	ldd	r25, Y+3	; 0x03
    3af2:	fc 01       	movw	r30, r24
    3af4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3af6:	28 2f       	mov	r18, r24
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	4b e0       	ldi	r20, 0x0B	; 11
    3afc:	42 9f       	mul	r20, r18
    3afe:	c0 01       	movw	r24, r0
    3b00:	43 9f       	mul	r20, r19
    3b02:	90 0d       	add	r25, r0
    3b04:	11 24       	eor	r1, r1
    3b06:	83 5a       	subi	r24, 0xA3	; 163
    3b08:	9f 4e       	sbci	r25, 0xEF	; 239
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	80 81       	ld	r24, Z
    3b0e:	91 81       	ldd	r25, Z+1	; 0x01
    3b10:	9d 83       	std	Y+5, r25	; 0x05
    3b12:	8c 83       	std	Y+4, r24	; 0x04
    3b14:	8a 81       	ldd	r24, Y+2	; 0x02
    3b16:	9b 81       	ldd	r25, Y+3	; 0x03
    3b18:	2c 81       	ldd	r18, Y+4	; 0x04
    3b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	37 83       	std	Z+7, r19	; 0x07
    3b20:	26 83       	std	Z+6, r18	; 0x06
    3b22:	8c 81       	ldd	r24, Y+4	; 0x04
    3b24:	9d 81       	ldd	r25, Y+5	; 0x05
    3b26:	fc 01       	movw	r30, r24
    3b28:	26 81       	ldd	r18, Z+6	; 0x06
    3b2a:	37 81       	ldd	r19, Z+7	; 0x07
    3b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b30:	fc 01       	movw	r30, r24
    3b32:	31 87       	std	Z+9, r19	; 0x09
    3b34:	20 87       	std	Z+8, r18	; 0x08
    3b36:	8c 81       	ldd	r24, Y+4	; 0x04
    3b38:	9d 81       	ldd	r25, Y+5	; 0x05
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	86 81       	ldd	r24, Z+6	; 0x06
    3b3e:	97 81       	ldd	r25, Z+7	; 0x07
    3b40:	2a 81       	ldd	r18, Y+2	; 0x02
    3b42:	3b 81       	ldd	r19, Y+3	; 0x03
    3b44:	2e 5f       	subi	r18, 0xFE	; 254
    3b46:	3f 4f       	sbci	r19, 0xFF	; 255
    3b48:	fc 01       	movw	r30, r24
    3b4a:	35 83       	std	Z+5, r19	; 0x05
    3b4c:	24 83       	std	Z+4, r18	; 0x04
    3b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b50:	9b 81       	ldd	r25, Y+3	; 0x03
    3b52:	9c 01       	movw	r18, r24
    3b54:	2e 5f       	subi	r18, 0xFE	; 254
    3b56:	3f 4f       	sbci	r19, 0xFF	; 255
    3b58:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b5c:	fc 01       	movw	r30, r24
    3b5e:	37 83       	std	Z+7, r19	; 0x07
    3b60:	26 83       	std	Z+6, r18	; 0x06
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	9b 81       	ldd	r25, Y+3	; 0x03
    3b66:	fc 01       	movw	r30, r24
    3b68:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b6a:	28 2f       	mov	r18, r24
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	4b e0       	ldi	r20, 0x0B	; 11
    3b70:	42 9f       	mul	r20, r18
    3b72:	c0 01       	movw	r24, r0
    3b74:	43 9f       	mul	r20, r19
    3b76:	90 0d       	add	r25, r0
    3b78:	11 24       	eor	r1, r1
    3b7a:	9c 01       	movw	r18, r24
    3b7c:	24 5a       	subi	r18, 0xA4	; 164
    3b7e:	3f 4e       	sbci	r19, 0xEF	; 239
    3b80:	8a 81       	ldd	r24, Y+2	; 0x02
    3b82:	9b 81       	ldd	r25, Y+3	; 0x03
    3b84:	fc 01       	movw	r30, r24
    3b86:	35 87       	std	Z+13, r19	; 0x0d
    3b88:	24 87       	std	Z+12, r18	; 0x0c
    3b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b8e:	fc 01       	movw	r30, r24
    3b90:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b92:	88 2f       	mov	r24, r24
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	4b e0       	ldi	r20, 0x0B	; 11
    3b98:	48 9f       	mul	r20, r24
    3b9a:	90 01       	movw	r18, r0
    3b9c:	49 9f       	mul	r20, r25
    3b9e:	30 0d       	add	r19, r0
    3ba0:	11 24       	eor	r1, r1
    3ba2:	24 5a       	subi	r18, 0xA4	; 164
    3ba4:	3f 4e       	sbci	r19, 0xEF	; 239
    3ba6:	f9 01       	movw	r30, r18
    3ba8:	20 81       	ld	r18, Z
    3baa:	41 e0       	ldi	r20, 0x01	; 1
    3bac:	42 0f       	add	r20, r18
    3bae:	5b e0       	ldi	r21, 0x0B	; 11
    3bb0:	58 9f       	mul	r21, r24
    3bb2:	90 01       	movw	r18, r0
    3bb4:	59 9f       	mul	r21, r25
    3bb6:	30 0d       	add	r19, r0
    3bb8:	11 24       	eor	r1, r1
    3bba:	c9 01       	movw	r24, r18
    3bbc:	84 5a       	subi	r24, 0xA4	; 164
    3bbe:	9f 4e       	sbci	r25, 0xEF	; 239
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	40 83       	st	Z, r20
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	89 83       	std	Y+1, r24	; 0x01
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	27 96       	adiw	r28, 0x07	; 7
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	f8 94       	cli
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	cd bf       	out	0x3d, r28	; 61
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	ff 90       	pop	r15
    3be0:	ef 90       	pop	r14
    3be2:	08 95       	ret

00003be4 <xTaskGenericNotifyWait>:
    3be4:	af 92       	push	r10
    3be6:	bf 92       	push	r11
    3be8:	cf 92       	push	r12
    3bea:	df 92       	push	r13
    3bec:	ef 92       	push	r14
    3bee:	ff 92       	push	r15
    3bf0:	0f 93       	push	r16
    3bf2:	1f 93       	push	r17
    3bf4:	cf 93       	push	r28
    3bf6:	df 93       	push	r29
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	60 97       	sbiw	r28, 0x10	; 16
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	cd bf       	out	0x3d, r28	; 61
    3c08:	8a 83       	std	Y+2, r24	; 0x02
    3c0a:	4b 83       	std	Y+3, r20	; 0x03
    3c0c:	5c 83       	std	Y+4, r21	; 0x04
    3c0e:	6d 83       	std	Y+5, r22	; 0x05
    3c10:	7e 83       	std	Y+6, r23	; 0x06
    3c12:	0f 83       	std	Y+7, r16	; 0x07
    3c14:	18 87       	std	Y+8, r17	; 0x08
    3c16:	29 87       	std	Y+9, r18	; 0x09
    3c18:	3a 87       	std	Y+10, r19	; 0x0a
    3c1a:	fc 86       	std	Y+12, r15	; 0x0c
    3c1c:	eb 86       	std	Y+11, r14	; 0x0b
    3c1e:	ad 86       	std	Y+13, r10	; 0x0d
    3c20:	be 86       	std	Y+14, r11	; 0x0e
    3c22:	cf 86       	std	Y+15, r12	; 0x0f
    3c24:	d8 8a       	std	Y+16, r13	; 0x10
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	f8 94       	cli
    3c2a:	0f 92       	push	r0
    3c2c:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <pxCurrentTCB>
    3c30:	30 91 5b 10 	lds	r19, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	88 2f       	mov	r24, r24
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	82 0f       	add	r24, r18
    3c3c:	93 1f       	adc	r25, r19
    3c3e:	c3 96       	adiw	r24, 0x33	; 51
    3c40:	dc 01       	movw	r26, r24
    3c42:	8c 91       	ld	r24, X
    3c44:	82 30       	cpi	r24, 0x02	; 2
    3c46:	09 f4       	brne	.+2      	; 0x3c4a <xTaskGenericNotifyWait+0x66>
    3c48:	4f c0       	rjmp	.+158    	; 0x3ce8 <xTaskGenericNotifyWait+0x104>
    3c4a:	60 91 5a 10 	lds	r22, 0x105A	; 0x80105a <pxCurrentTCB>
    3c4e:	70 91 5b 10 	lds	r23, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3c52:	8a 81       	ldd	r24, Y+2	; 0x02
    3c54:	e8 2f       	mov	r30, r24
    3c56:	f0 e0       	ldi	r31, 0x00	; 0
    3c58:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5a:	88 2f       	mov	r24, r24
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	88 0f       	add	r24, r24
    3c60:	99 1f       	adc	r25, r25
    3c62:	88 0f       	add	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	86 0f       	add	r24, r22
    3c68:	97 1f       	adc	r25, r23
    3c6a:	8f 96       	adiw	r24, 0x2f	; 47
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	2d 91       	ld	r18, X+
    3c70:	3d 91       	ld	r19, X+
    3c72:	4d 91       	ld	r20, X+
    3c74:	5c 91       	ld	r21, X
    3c76:	8b 81       	ldd	r24, Y+3	; 0x03
    3c78:	9c 81       	ldd	r25, Y+4	; 0x04
    3c7a:	ad 81       	ldd	r26, Y+5	; 0x05
    3c7c:	be 81       	ldd	r27, Y+6	; 0x06
    3c7e:	80 95       	com	r24
    3c80:	90 95       	com	r25
    3c82:	a0 95       	com	r26
    3c84:	b0 95       	com	r27
    3c86:	82 23       	and	r24, r18
    3c88:	93 23       	and	r25, r19
    3c8a:	a4 23       	and	r26, r20
    3c8c:	b5 23       	and	r27, r21
    3c8e:	9f 01       	movw	r18, r30
    3c90:	22 0f       	add	r18, r18
    3c92:	33 1f       	adc	r19, r19
    3c94:	22 0f       	add	r18, r18
    3c96:	33 1f       	adc	r19, r19
    3c98:	26 0f       	add	r18, r22
    3c9a:	37 1f       	adc	r19, r23
    3c9c:	21 5d       	subi	r18, 0xD1	; 209
    3c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca0:	f9 01       	movw	r30, r18
    3ca2:	80 83       	st	Z, r24
    3ca4:	91 83       	std	Z+1, r25	; 0x01
    3ca6:	a2 83       	std	Z+2, r26	; 0x02
    3ca8:	b3 83       	std	Z+3, r27	; 0x03
    3caa:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <pxCurrentTCB>
    3cae:	30 91 5b 10 	lds	r19, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb4:	88 2f       	mov	r24, r24
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	82 0f       	add	r24, r18
    3cba:	93 1f       	adc	r25, r19
    3cbc:	c3 96       	adiw	r24, 0x33	; 51
    3cbe:	21 e0       	ldi	r18, 0x01	; 1
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	2c 93       	st	X, r18
    3cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc8:	af 85       	ldd	r26, Y+15	; 0x0f
    3cca:	b8 89       	ldd	r27, Y+16	; 0x10
    3ccc:	89 2b       	or	r24, r25
    3cce:	8a 2b       	or	r24, r26
    3cd0:	8b 2b       	or	r24, r27
    3cd2:	51 f0       	breq	.+20     	; 0x3ce8 <xTaskGenericNotifyWait+0x104>
    3cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd8:	af 85       	ldd	r26, Y+15	; 0x0f
    3cda:	b8 89       	ldd	r27, Y+16	; 0x10
    3cdc:	41 e0       	ldi	r20, 0x01	; 1
    3cde:	bc 01       	movw	r22, r24
    3ce0:	cd 01       	movw	r24, r26
    3ce2:	b3 d4       	rcall	.+2406   	; 0x464a <prvAddCurrentTaskToDelayedList>
    3ce4:	0e 94 7d 05 	call	0xafa	; 0xafa <vPortYield>
    3ce8:	0f 90       	pop	r0
    3cea:	0f be       	out	0x3f, r0	; 63
    3cec:	0f b6       	in	r0, 0x3f	; 63
    3cee:	f8 94       	cli
    3cf0:	0f 92       	push	r0
    3cf2:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cf4:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cf6:	89 2b       	or	r24, r25
    3cf8:	d1 f0       	breq	.+52     	; 0x3d2e <xTaskGenericNotifyWait+0x14a>
    3cfa:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <pxCurrentTCB>
    3cfe:	30 91 5b 10 	lds	r19, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	88 2f       	mov	r24, r24
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	82 0f       	add	r24, r18
    3d12:	93 1f       	adc	r25, r19
    3d14:	8f 96       	adiw	r24, 0x2f	; 47
    3d16:	fc 01       	movw	r30, r24
    3d18:	80 81       	ld	r24, Z
    3d1a:	91 81       	ldd	r25, Z+1	; 0x01
    3d1c:	a2 81       	ldd	r26, Z+2	; 0x02
    3d1e:	b3 81       	ldd	r27, Z+3	; 0x03
    3d20:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d22:	3c 85       	ldd	r19, Y+12	; 0x0c
    3d24:	f9 01       	movw	r30, r18
    3d26:	80 83       	st	Z, r24
    3d28:	91 83       	std	Z+1, r25	; 0x01
    3d2a:	a2 83       	std	Z+2, r26	; 0x02
    3d2c:	b3 83       	std	Z+3, r27	; 0x03
    3d2e:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <pxCurrentTCB>
    3d32:	30 91 5b 10 	lds	r19, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3d36:	8a 81       	ldd	r24, Y+2	; 0x02
    3d38:	88 2f       	mov	r24, r24
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	82 0f       	add	r24, r18
    3d3e:	93 1f       	adc	r25, r19
    3d40:	c3 96       	adiw	r24, 0x33	; 51
    3d42:	dc 01       	movw	r26, r24
    3d44:	8c 91       	ld	r24, X
    3d46:	82 30       	cpi	r24, 0x02	; 2
    3d48:	11 f0       	breq	.+4      	; 0x3d4e <xTaskGenericNotifyWait+0x16a>
    3d4a:	19 82       	std	Y+1, r1	; 0x01
    3d4c:	32 c0       	rjmp	.+100    	; 0x3db2 <xTaskGenericNotifyWait+0x1ce>
    3d4e:	60 91 5a 10 	lds	r22, 0x105A	; 0x80105a <pxCurrentTCB>
    3d52:	70 91 5b 10 	lds	r23, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3d56:	8a 81       	ldd	r24, Y+2	; 0x02
    3d58:	e8 2f       	mov	r30, r24
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5e:	88 2f       	mov	r24, r24
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	88 0f       	add	r24, r24
    3d68:	99 1f       	adc	r25, r25
    3d6a:	86 0f       	add	r24, r22
    3d6c:	97 1f       	adc	r25, r23
    3d6e:	8f 96       	adiw	r24, 0x2f	; 47
    3d70:	dc 01       	movw	r26, r24
    3d72:	2d 91       	ld	r18, X+
    3d74:	3d 91       	ld	r19, X+
    3d76:	4d 91       	ld	r20, X+
    3d78:	5c 91       	ld	r21, X
    3d7a:	8f 81       	ldd	r24, Y+7	; 0x07
    3d7c:	98 85       	ldd	r25, Y+8	; 0x08
    3d7e:	a9 85       	ldd	r26, Y+9	; 0x09
    3d80:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d82:	80 95       	com	r24
    3d84:	90 95       	com	r25
    3d86:	a0 95       	com	r26
    3d88:	b0 95       	com	r27
    3d8a:	82 23       	and	r24, r18
    3d8c:	93 23       	and	r25, r19
    3d8e:	a4 23       	and	r26, r20
    3d90:	b5 23       	and	r27, r21
    3d92:	9f 01       	movw	r18, r30
    3d94:	22 0f       	add	r18, r18
    3d96:	33 1f       	adc	r19, r19
    3d98:	22 0f       	add	r18, r18
    3d9a:	33 1f       	adc	r19, r19
    3d9c:	26 0f       	add	r18, r22
    3d9e:	37 1f       	adc	r19, r23
    3da0:	21 5d       	subi	r18, 0xD1	; 209
    3da2:	3f 4f       	sbci	r19, 0xFF	; 255
    3da4:	f9 01       	movw	r30, r18
    3da6:	80 83       	st	Z, r24
    3da8:	91 83       	std	Z+1, r25	; 0x01
    3daa:	a2 83       	std	Z+2, r26	; 0x02
    3dac:	b3 83       	std	Z+3, r27	; 0x03
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	89 83       	std	Y+1, r24	; 0x01
    3db2:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <pxCurrentTCB>
    3db6:	30 91 5b 10 	lds	r19, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    3dba:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbc:	88 2f       	mov	r24, r24
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	82 0f       	add	r24, r18
    3dc2:	93 1f       	adc	r25, r19
    3dc4:	c3 96       	adiw	r24, 0x33	; 51
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	1c 92       	st	X, r1
    3dca:	0f 90       	pop	r0
    3dcc:	0f be       	out	0x3f, r0	; 63
    3dce:	89 81       	ldd	r24, Y+1	; 0x01
    3dd0:	60 96       	adiw	r28, 0x10	; 16
    3dd2:	0f b6       	in	r0, 0x3f	; 63
    3dd4:	f8 94       	cli
    3dd6:	de bf       	out	0x3e, r29	; 62
    3dd8:	0f be       	out	0x3f, r0	; 63
    3dda:	cd bf       	out	0x3d, r28	; 61
    3ddc:	df 91       	pop	r29
    3dde:	cf 91       	pop	r28
    3de0:	1f 91       	pop	r17
    3de2:	0f 91       	pop	r16
    3de4:	ff 90       	pop	r15
    3de6:	ef 90       	pop	r14
    3de8:	df 90       	pop	r13
    3dea:	cf 90       	pop	r12
    3dec:	bf 90       	pop	r11
    3dee:	af 90       	pop	r10
    3df0:	08 95       	ret

00003df2 <xTaskGenericNotify>:
    3df2:	ef 92       	push	r14
    3df4:	ff 92       	push	r15
    3df6:	0f 93       	push	r16
    3df8:	cf 93       	push	r28
    3dfa:	df 93       	push	r29
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
    3e00:	62 97       	sbiw	r28, 0x12	; 18
    3e02:	0f b6       	in	r0, 0x3f	; 63
    3e04:	f8 94       	cli
    3e06:	de bf       	out	0x3e, r29	; 62
    3e08:	0f be       	out	0x3f, r0	; 63
    3e0a:	cd bf       	out	0x3d, r28	; 61
    3e0c:	9a 87       	std	Y+10, r25	; 0x0a
    3e0e:	89 87       	std	Y+9, r24	; 0x09
    3e10:	6b 87       	std	Y+11, r22	; 0x0b
    3e12:	2c 87       	std	Y+12, r18	; 0x0c
    3e14:	3d 87       	std	Y+13, r19	; 0x0d
    3e16:	4e 87       	std	Y+14, r20	; 0x0e
    3e18:	5f 87       	std	Y+15, r21	; 0x0f
    3e1a:	08 8b       	std	Y+16, r16	; 0x10
    3e1c:	fa 8a       	std	Y+18, r15	; 0x12
    3e1e:	e9 8a       	std	Y+17, r14	; 0x11
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	89 83       	std	Y+1, r24	; 0x01
    3e24:	89 85       	ldd	r24, Y+9	; 0x09
    3e26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e28:	9b 83       	std	Y+3, r25	; 0x03
    3e2a:	8a 83       	std	Y+2, r24	; 0x02
    3e2c:	0f b6       	in	r0, 0x3f	; 63
    3e2e:	f8 94       	cli
    3e30:	0f 92       	push	r0
    3e32:	89 89       	ldd	r24, Y+17	; 0x11
    3e34:	9a 89       	ldd	r25, Y+18	; 0x12
    3e36:	89 2b       	or	r24, r25
    3e38:	c1 f0       	breq	.+48     	; 0x3e6a <xTaskGenericNotify+0x78>
    3e3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e3c:	88 2f       	mov	r24, r24
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	2a 81       	ldd	r18, Y+2	; 0x02
    3e42:	3b 81       	ldd	r19, Y+3	; 0x03
    3e44:	88 0f       	add	r24, r24
    3e46:	99 1f       	adc	r25, r25
    3e48:	88 0f       	add	r24, r24
    3e4a:	99 1f       	adc	r25, r25
    3e4c:	82 0f       	add	r24, r18
    3e4e:	93 1f       	adc	r25, r19
    3e50:	8f 96       	adiw	r24, 0x2f	; 47
    3e52:	fc 01       	movw	r30, r24
    3e54:	80 81       	ld	r24, Z
    3e56:	91 81       	ldd	r25, Z+1	; 0x01
    3e58:	a2 81       	ldd	r26, Z+2	; 0x02
    3e5a:	b3 81       	ldd	r27, Z+3	; 0x03
    3e5c:	29 89       	ldd	r18, Y+17	; 0x11
    3e5e:	3a 89       	ldd	r19, Y+18	; 0x12
    3e60:	f9 01       	movw	r30, r18
    3e62:	80 83       	st	Z, r24
    3e64:	91 83       	std	Z+1, r25	; 0x01
    3e66:	a2 83       	std	Z+2, r26	; 0x02
    3e68:	b3 83       	std	Z+3, r27	; 0x03
    3e6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e6c:	88 2f       	mov	r24, r24
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	2a 81       	ldd	r18, Y+2	; 0x02
    3e72:	3b 81       	ldd	r19, Y+3	; 0x03
    3e74:	82 0f       	add	r24, r18
    3e76:	93 1f       	adc	r25, r19
    3e78:	c3 96       	adiw	r24, 0x33	; 51
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	80 81       	ld	r24, Z
    3e7e:	8c 83       	std	Y+4, r24	; 0x04
    3e80:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e82:	88 2f       	mov	r24, r24
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	2a 81       	ldd	r18, Y+2	; 0x02
    3e88:	3b 81       	ldd	r19, Y+3	; 0x03
    3e8a:	82 0f       	add	r24, r18
    3e8c:	93 1f       	adc	r25, r19
    3e8e:	c3 96       	adiw	r24, 0x33	; 51
    3e90:	22 e0       	ldi	r18, 0x02	; 2
    3e92:	fc 01       	movw	r30, r24
    3e94:	20 83       	st	Z, r18
    3e96:	88 89       	ldd	r24, Y+16	; 0x10
    3e98:	88 2f       	mov	r24, r24
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	82 30       	cpi	r24, 0x02	; 2
    3e9e:	91 05       	cpc	r25, r1
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <xTaskGenericNotify+0xb2>
    3ea2:	3e c0       	rjmp	.+124    	; 0x3f20 <xTaskGenericNotify+0x12e>
    3ea4:	83 30       	cpi	r24, 0x03	; 3
    3ea6:	91 05       	cpc	r25, r1
    3ea8:	34 f4       	brge	.+12     	; 0x3eb6 <xTaskGenericNotify+0xc4>
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	09 f4       	brne	.+2      	; 0x3eb0 <xTaskGenericNotify+0xbe>
    3eae:	92 c0       	rjmp	.+292    	; 0x3fd4 <xTaskGenericNotify+0x1e2>
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	49 f0       	breq	.+18     	; 0x3ec6 <xTaskGenericNotify+0xd4>
    3eb4:	90 c0       	rjmp	.+288    	; 0x3fd6 <xTaskGenericNotify+0x1e4>
    3eb6:	83 30       	cpi	r24, 0x03	; 3
    3eb8:	91 05       	cpc	r25, r1
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <xTaskGenericNotify+0xcc>
    3ebc:	56 c0       	rjmp	.+172    	; 0x3f6a <xTaskGenericNotify+0x178>
    3ebe:	04 97       	sbiw	r24, 0x04	; 4
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <xTaskGenericNotify+0xd2>
    3ec2:	6b c0       	rjmp	.+214    	; 0x3f9a <xTaskGenericNotify+0x1a8>
    3ec4:	88 c0       	rjmp	.+272    	; 0x3fd6 <xTaskGenericNotify+0x1e4>
    3ec6:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ec8:	68 2f       	mov	r22, r24
    3eca:	70 e0       	ldi	r23, 0x00	; 0
    3ecc:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ece:	88 2f       	mov	r24, r24
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	2a 81       	ldd	r18, Y+2	; 0x02
    3ed4:	3b 81       	ldd	r19, Y+3	; 0x03
    3ed6:	88 0f       	add	r24, r24
    3ed8:	99 1f       	adc	r25, r25
    3eda:	88 0f       	add	r24, r24
    3edc:	99 1f       	adc	r25, r25
    3ede:	82 0f       	add	r24, r18
    3ee0:	93 1f       	adc	r25, r19
    3ee2:	8f 96       	adiw	r24, 0x2f	; 47
    3ee4:	fc 01       	movw	r30, r24
    3ee6:	20 81       	ld	r18, Z
    3ee8:	31 81       	ldd	r19, Z+1	; 0x01
    3eea:	42 81       	ldd	r20, Z+2	; 0x02
    3eec:	53 81       	ldd	r21, Z+3	; 0x03
    3eee:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ef0:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ef2:	ae 85       	ldd	r26, Y+14	; 0x0e
    3ef4:	bf 85       	ldd	r27, Y+15	; 0x0f
    3ef6:	82 2b       	or	r24, r18
    3ef8:	93 2b       	or	r25, r19
    3efa:	a4 2b       	or	r26, r20
    3efc:	b5 2b       	or	r27, r21
    3efe:	4a 81       	ldd	r20, Y+2	; 0x02
    3f00:	5b 81       	ldd	r21, Y+3	; 0x03
    3f02:	9b 01       	movw	r18, r22
    3f04:	22 0f       	add	r18, r18
    3f06:	33 1f       	adc	r19, r19
    3f08:	22 0f       	add	r18, r18
    3f0a:	33 1f       	adc	r19, r19
    3f0c:	24 0f       	add	r18, r20
    3f0e:	35 1f       	adc	r19, r21
    3f10:	21 5d       	subi	r18, 0xD1	; 209
    3f12:	3f 4f       	sbci	r19, 0xFF	; 255
    3f14:	f9 01       	movw	r30, r18
    3f16:	80 83       	st	Z, r24
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	a2 83       	std	Z+2, r26	; 0x02
    3f1c:	b3 83       	std	Z+3, r27	; 0x03
    3f1e:	5b c0       	rjmp	.+182    	; 0x3fd6 <xTaskGenericNotify+0x1e4>
    3f20:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f22:	28 2f       	mov	r18, r24
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	4a 81       	ldd	r20, Y+2	; 0x02
    3f28:	5b 81       	ldd	r21, Y+3	; 0x03
    3f2a:	c9 01       	movw	r24, r18
    3f2c:	88 0f       	add	r24, r24
    3f2e:	99 1f       	adc	r25, r25
    3f30:	88 0f       	add	r24, r24
    3f32:	99 1f       	adc	r25, r25
    3f34:	84 0f       	add	r24, r20
    3f36:	95 1f       	adc	r25, r21
    3f38:	8f 96       	adiw	r24, 0x2f	; 47
    3f3a:	fc 01       	movw	r30, r24
    3f3c:	80 81       	ld	r24, Z
    3f3e:	91 81       	ldd	r25, Z+1	; 0x01
    3f40:	a2 81       	ldd	r26, Z+2	; 0x02
    3f42:	b3 81       	ldd	r27, Z+3	; 0x03
    3f44:	01 96       	adiw	r24, 0x01	; 1
    3f46:	a1 1d       	adc	r26, r1
    3f48:	b1 1d       	adc	r27, r1
    3f4a:	4a 81       	ldd	r20, Y+2	; 0x02
    3f4c:	5b 81       	ldd	r21, Y+3	; 0x03
    3f4e:	22 0f       	add	r18, r18
    3f50:	33 1f       	adc	r19, r19
    3f52:	22 0f       	add	r18, r18
    3f54:	33 1f       	adc	r19, r19
    3f56:	24 0f       	add	r18, r20
    3f58:	35 1f       	adc	r19, r21
    3f5a:	21 5d       	subi	r18, 0xD1	; 209
    3f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f5e:	f9 01       	movw	r30, r18
    3f60:	80 83       	st	Z, r24
    3f62:	91 83       	std	Z+1, r25	; 0x01
    3f64:	a2 83       	std	Z+2, r26	; 0x02
    3f66:	b3 83       	std	Z+3, r27	; 0x03
    3f68:	36 c0       	rjmp	.+108    	; 0x3fd6 <xTaskGenericNotify+0x1e4>
    3f6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f6c:	88 2f       	mov	r24, r24
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	2a 81       	ldd	r18, Y+2	; 0x02
    3f72:	3b 81       	ldd	r19, Y+3	; 0x03
    3f74:	88 0f       	add	r24, r24
    3f76:	99 1f       	adc	r25, r25
    3f78:	88 0f       	add	r24, r24
    3f7a:	99 1f       	adc	r25, r25
    3f7c:	82 0f       	add	r24, r18
    3f7e:	93 1f       	adc	r25, r19
    3f80:	9c 01       	movw	r18, r24
    3f82:	21 5d       	subi	r18, 0xD1	; 209
    3f84:	3f 4f       	sbci	r19, 0xFF	; 255
    3f86:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f88:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f8a:	ae 85       	ldd	r26, Y+14	; 0x0e
    3f8c:	bf 85       	ldd	r27, Y+15	; 0x0f
    3f8e:	f9 01       	movw	r30, r18
    3f90:	80 83       	st	Z, r24
    3f92:	91 83       	std	Z+1, r25	; 0x01
    3f94:	a2 83       	std	Z+2, r26	; 0x02
    3f96:	b3 83       	std	Z+3, r27	; 0x03
    3f98:	1e c0       	rjmp	.+60     	; 0x3fd6 <xTaskGenericNotify+0x1e4>
    3f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f9c:	82 30       	cpi	r24, 0x02	; 2
    3f9e:	c1 f0       	breq	.+48     	; 0x3fd0 <xTaskGenericNotify+0x1de>
    3fa0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fa2:	88 2f       	mov	r24, r24
    3fa4:	90 e0       	ldi	r25, 0x00	; 0
    3fa6:	2a 81       	ldd	r18, Y+2	; 0x02
    3fa8:	3b 81       	ldd	r19, Y+3	; 0x03
    3faa:	88 0f       	add	r24, r24
    3fac:	99 1f       	adc	r25, r25
    3fae:	88 0f       	add	r24, r24
    3fb0:	99 1f       	adc	r25, r25
    3fb2:	82 0f       	add	r24, r18
    3fb4:	93 1f       	adc	r25, r19
    3fb6:	9c 01       	movw	r18, r24
    3fb8:	21 5d       	subi	r18, 0xD1	; 209
    3fba:	3f 4f       	sbci	r19, 0xFF	; 255
    3fbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3fbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3fc0:	ae 85       	ldd	r26, Y+14	; 0x0e
    3fc2:	bf 85       	ldd	r27, Y+15	; 0x0f
    3fc4:	f9 01       	movw	r30, r18
    3fc6:	80 83       	st	Z, r24
    3fc8:	91 83       	std	Z+1, r25	; 0x01
    3fca:	a2 83       	std	Z+2, r26	; 0x02
    3fcc:	b3 83       	std	Z+3, r27	; 0x03
    3fce:	03 c0       	rjmp	.+6      	; 0x3fd6 <xTaskGenericNotify+0x1e4>
    3fd0:	19 82       	std	Y+1, r1	; 0x01
    3fd2:	01 c0       	rjmp	.+2      	; 0x3fd6 <xTaskGenericNotify+0x1e4>
    3fd4:	00 00       	nop
    3fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd8:	81 30       	cpi	r24, 0x01	; 1
    3fda:	09 f0       	breq	.+2      	; 0x3fde <xTaskGenericNotify+0x1ec>
    3fdc:	cc c0       	rjmp	.+408    	; 0x4176 <xTaskGenericNotify+0x384>
    3fde:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fe2:	fc 01       	movw	r30, r24
    3fe4:	84 85       	ldd	r24, Z+12	; 0x0c
    3fe6:	95 85       	ldd	r25, Z+13	; 0x0d
    3fe8:	9e 83       	std	Y+6, r25	; 0x06
    3fea:	8d 83       	std	Y+5, r24	; 0x05
    3fec:	8a 81       	ldd	r24, Y+2	; 0x02
    3fee:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	86 81       	ldd	r24, Z+6	; 0x06
    3ff4:	97 81       	ldd	r25, Z+7	; 0x07
    3ff6:	2a 81       	ldd	r18, Y+2	; 0x02
    3ff8:	3b 81       	ldd	r19, Y+3	; 0x03
    3ffa:	f9 01       	movw	r30, r18
    3ffc:	20 85       	ldd	r18, Z+8	; 0x08
    3ffe:	31 85       	ldd	r19, Z+9	; 0x09
    4000:	fc 01       	movw	r30, r24
    4002:	37 83       	std	Z+7, r19	; 0x07
    4004:	26 83       	std	Z+6, r18	; 0x06
    4006:	8a 81       	ldd	r24, Y+2	; 0x02
    4008:	9b 81       	ldd	r25, Y+3	; 0x03
    400a:	fc 01       	movw	r30, r24
    400c:	80 85       	ldd	r24, Z+8	; 0x08
    400e:	91 85       	ldd	r25, Z+9	; 0x09
    4010:	2a 81       	ldd	r18, Y+2	; 0x02
    4012:	3b 81       	ldd	r19, Y+3	; 0x03
    4014:	f9 01       	movw	r30, r18
    4016:	26 81       	ldd	r18, Z+6	; 0x06
    4018:	37 81       	ldd	r19, Z+7	; 0x07
    401a:	fc 01       	movw	r30, r24
    401c:	35 83       	std	Z+5, r19	; 0x05
    401e:	24 83       	std	Z+4, r18	; 0x04
    4020:	8d 81       	ldd	r24, Y+5	; 0x05
    4022:	9e 81       	ldd	r25, Y+6	; 0x06
    4024:	fc 01       	movw	r30, r24
    4026:	21 81       	ldd	r18, Z+1	; 0x01
    4028:	32 81       	ldd	r19, Z+2	; 0x02
    402a:	8a 81       	ldd	r24, Y+2	; 0x02
    402c:	9b 81       	ldd	r25, Y+3	; 0x03
    402e:	02 96       	adiw	r24, 0x02	; 2
    4030:	28 17       	cp	r18, r24
    4032:	39 07       	cpc	r19, r25
    4034:	51 f4       	brne	.+20     	; 0x404a <xTaskGenericNotify+0x258>
    4036:	8a 81       	ldd	r24, Y+2	; 0x02
    4038:	9b 81       	ldd	r25, Y+3	; 0x03
    403a:	fc 01       	movw	r30, r24
    403c:	20 85       	ldd	r18, Z+8	; 0x08
    403e:	31 85       	ldd	r19, Z+9	; 0x09
    4040:	8d 81       	ldd	r24, Y+5	; 0x05
    4042:	9e 81       	ldd	r25, Y+6	; 0x06
    4044:	fc 01       	movw	r30, r24
    4046:	32 83       	std	Z+2, r19	; 0x02
    4048:	21 83       	std	Z+1, r18	; 0x01
    404a:	8a 81       	ldd	r24, Y+2	; 0x02
    404c:	9b 81       	ldd	r25, Y+3	; 0x03
    404e:	fc 01       	movw	r30, r24
    4050:	15 86       	std	Z+13, r1	; 0x0d
    4052:	14 86       	std	Z+12, r1	; 0x0c
    4054:	8d 81       	ldd	r24, Y+5	; 0x05
    4056:	9e 81       	ldd	r25, Y+6	; 0x06
    4058:	fc 01       	movw	r30, r24
    405a:	80 81       	ld	r24, Z
    405c:	2f ef       	ldi	r18, 0xFF	; 255
    405e:	28 0f       	add	r18, r24
    4060:	8d 81       	ldd	r24, Y+5	; 0x05
    4062:	9e 81       	ldd	r25, Y+6	; 0x06
    4064:	fc 01       	movw	r30, r24
    4066:	20 83       	st	Z, r18
    4068:	8a 81       	ldd	r24, Y+2	; 0x02
    406a:	9b 81       	ldd	r25, Y+3	; 0x03
    406c:	fc 01       	movw	r30, r24
    406e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4070:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <uxTopReadyPriority>
    4074:	89 17       	cp	r24, r25
    4076:	30 f4       	brcc	.+12     	; 0x4084 <xTaskGenericNotify+0x292>
    4078:	8a 81       	ldd	r24, Y+2	; 0x02
    407a:	9b 81       	ldd	r25, Y+3	; 0x03
    407c:	fc 01       	movw	r30, r24
    407e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4080:	80 93 0b 11 	sts	0x110B, r24	; 0x80110b <uxTopReadyPriority>
    4084:	8a 81       	ldd	r24, Y+2	; 0x02
    4086:	9b 81       	ldd	r25, Y+3	; 0x03
    4088:	fc 01       	movw	r30, r24
    408a:	82 8d       	ldd	r24, Z+26	; 0x1a
    408c:	28 2f       	mov	r18, r24
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	4b e0       	ldi	r20, 0x0B	; 11
    4092:	42 9f       	mul	r20, r18
    4094:	c0 01       	movw	r24, r0
    4096:	43 9f       	mul	r20, r19
    4098:	90 0d       	add	r25, r0
    409a:	11 24       	eor	r1, r1
    409c:	83 5a       	subi	r24, 0xA3	; 163
    409e:	9f 4e       	sbci	r25, 0xEF	; 239
    40a0:	fc 01       	movw	r30, r24
    40a2:	80 81       	ld	r24, Z
    40a4:	91 81       	ldd	r25, Z+1	; 0x01
    40a6:	98 87       	std	Y+8, r25	; 0x08
    40a8:	8f 83       	std	Y+7, r24	; 0x07
    40aa:	8a 81       	ldd	r24, Y+2	; 0x02
    40ac:	9b 81       	ldd	r25, Y+3	; 0x03
    40ae:	2f 81       	ldd	r18, Y+7	; 0x07
    40b0:	38 85       	ldd	r19, Y+8	; 0x08
    40b2:	fc 01       	movw	r30, r24
    40b4:	37 83       	std	Z+7, r19	; 0x07
    40b6:	26 83       	std	Z+6, r18	; 0x06
    40b8:	8f 81       	ldd	r24, Y+7	; 0x07
    40ba:	98 85       	ldd	r25, Y+8	; 0x08
    40bc:	fc 01       	movw	r30, r24
    40be:	26 81       	ldd	r18, Z+6	; 0x06
    40c0:	37 81       	ldd	r19, Z+7	; 0x07
    40c2:	8a 81       	ldd	r24, Y+2	; 0x02
    40c4:	9b 81       	ldd	r25, Y+3	; 0x03
    40c6:	fc 01       	movw	r30, r24
    40c8:	31 87       	std	Z+9, r19	; 0x09
    40ca:	20 87       	std	Z+8, r18	; 0x08
    40cc:	8f 81       	ldd	r24, Y+7	; 0x07
    40ce:	98 85       	ldd	r25, Y+8	; 0x08
    40d0:	fc 01       	movw	r30, r24
    40d2:	86 81       	ldd	r24, Z+6	; 0x06
    40d4:	97 81       	ldd	r25, Z+7	; 0x07
    40d6:	2a 81       	ldd	r18, Y+2	; 0x02
    40d8:	3b 81       	ldd	r19, Y+3	; 0x03
    40da:	2e 5f       	subi	r18, 0xFE	; 254
    40dc:	3f 4f       	sbci	r19, 0xFF	; 255
    40de:	fc 01       	movw	r30, r24
    40e0:	35 83       	std	Z+5, r19	; 0x05
    40e2:	24 83       	std	Z+4, r18	; 0x04
    40e4:	8a 81       	ldd	r24, Y+2	; 0x02
    40e6:	9b 81       	ldd	r25, Y+3	; 0x03
    40e8:	9c 01       	movw	r18, r24
    40ea:	2e 5f       	subi	r18, 0xFE	; 254
    40ec:	3f 4f       	sbci	r19, 0xFF	; 255
    40ee:	8f 81       	ldd	r24, Y+7	; 0x07
    40f0:	98 85       	ldd	r25, Y+8	; 0x08
    40f2:	fc 01       	movw	r30, r24
    40f4:	37 83       	std	Z+7, r19	; 0x07
    40f6:	26 83       	std	Z+6, r18	; 0x06
    40f8:	8a 81       	ldd	r24, Y+2	; 0x02
    40fa:	9b 81       	ldd	r25, Y+3	; 0x03
    40fc:	fc 01       	movw	r30, r24
    40fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    4100:	28 2f       	mov	r18, r24
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	4b e0       	ldi	r20, 0x0B	; 11
    4106:	42 9f       	mul	r20, r18
    4108:	c0 01       	movw	r24, r0
    410a:	43 9f       	mul	r20, r19
    410c:	90 0d       	add	r25, r0
    410e:	11 24       	eor	r1, r1
    4110:	9c 01       	movw	r18, r24
    4112:	24 5a       	subi	r18, 0xA4	; 164
    4114:	3f 4e       	sbci	r19, 0xEF	; 239
    4116:	8a 81       	ldd	r24, Y+2	; 0x02
    4118:	9b 81       	ldd	r25, Y+3	; 0x03
    411a:	fc 01       	movw	r30, r24
    411c:	35 87       	std	Z+13, r19	; 0x0d
    411e:	24 87       	std	Z+12, r18	; 0x0c
    4120:	8a 81       	ldd	r24, Y+2	; 0x02
    4122:	9b 81       	ldd	r25, Y+3	; 0x03
    4124:	fc 01       	movw	r30, r24
    4126:	82 8d       	ldd	r24, Z+26	; 0x1a
    4128:	88 2f       	mov	r24, r24
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	4b e0       	ldi	r20, 0x0B	; 11
    412e:	48 9f       	mul	r20, r24
    4130:	90 01       	movw	r18, r0
    4132:	49 9f       	mul	r20, r25
    4134:	30 0d       	add	r19, r0
    4136:	11 24       	eor	r1, r1
    4138:	24 5a       	subi	r18, 0xA4	; 164
    413a:	3f 4e       	sbci	r19, 0xEF	; 239
    413c:	f9 01       	movw	r30, r18
    413e:	20 81       	ld	r18, Z
    4140:	41 e0       	ldi	r20, 0x01	; 1
    4142:	42 0f       	add	r20, r18
    4144:	5b e0       	ldi	r21, 0x0B	; 11
    4146:	58 9f       	mul	r21, r24
    4148:	90 01       	movw	r18, r0
    414a:	59 9f       	mul	r21, r25
    414c:	30 0d       	add	r19, r0
    414e:	11 24       	eor	r1, r1
    4150:	c9 01       	movw	r24, r18
    4152:	84 5a       	subi	r24, 0xA4	; 164
    4154:	9f 4e       	sbci	r25, 0xEF	; 239
    4156:	fc 01       	movw	r30, r24
    4158:	40 83       	st	Z, r20
    415a:	8a 81       	ldd	r24, Y+2	; 0x02
    415c:	9b 81       	ldd	r25, Y+3	; 0x03
    415e:	fc 01       	movw	r30, r24
    4160:	22 8d       	ldd	r18, Z+26	; 0x1a
    4162:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    4166:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    416a:	fc 01       	movw	r30, r24
    416c:	82 8d       	ldd	r24, Z+26	; 0x1a
    416e:	82 17       	cp	r24, r18
    4170:	10 f4       	brcc	.+4      	; 0x4176 <xTaskGenericNotify+0x384>
    4172:	0e 94 7d 05 	call	0xafa	; 0xafa <vPortYield>
    4176:	0f 90       	pop	r0
    4178:	0f be       	out	0x3f, r0	; 63
    417a:	89 81       	ldd	r24, Y+1	; 0x01
    417c:	62 96       	adiw	r28, 0x12	; 18
    417e:	0f b6       	in	r0, 0x3f	; 63
    4180:	f8 94       	cli
    4182:	de bf       	out	0x3e, r29	; 62
    4184:	0f be       	out	0x3f, r0	; 63
    4186:	cd bf       	out	0x3d, r28	; 61
    4188:	df 91       	pop	r29
    418a:	cf 91       	pop	r28
    418c:	0f 91       	pop	r16
    418e:	ff 90       	pop	r15
    4190:	ef 90       	pop	r14
    4192:	08 95       	ret

00004194 <xTaskGenericNotifyFromISR>:
    4194:	cf 92       	push	r12
    4196:	df 92       	push	r13
    4198:	ef 92       	push	r14
    419a:	ff 92       	push	r15
    419c:	0f 93       	push	r16
    419e:	cf 93       	push	r28
    41a0:	df 93       	push	r29
    41a2:	cd b7       	in	r28, 0x3d	; 61
    41a4:	de b7       	in	r29, 0x3e	; 62
    41a6:	67 97       	sbiw	r28, 0x17	; 23
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	f8 94       	cli
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	9d 87       	std	Y+13, r25	; 0x0d
    41b4:	8c 87       	std	Y+12, r24	; 0x0c
    41b6:	6e 87       	std	Y+14, r22	; 0x0e
    41b8:	2f 87       	std	Y+15, r18	; 0x0f
    41ba:	38 8b       	std	Y+16, r19	; 0x10
    41bc:	49 8b       	std	Y+17, r20	; 0x11
    41be:	5a 8b       	std	Y+18, r21	; 0x12
    41c0:	0b 8b       	std	Y+19, r16	; 0x13
    41c2:	fd 8a       	std	Y+21, r15	; 0x15
    41c4:	ec 8a       	std	Y+20, r14	; 0x14
    41c6:	df 8a       	std	Y+23, r13	; 0x17
    41c8:	ce 8a       	std	Y+22, r12	; 0x16
    41ca:	81 e0       	ldi	r24, 0x01	; 1
    41cc:	89 83       	std	Y+1, r24	; 0x01
    41ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    41d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    41d2:	9b 83       	std	Y+3, r25	; 0x03
    41d4:	8a 83       	std	Y+2, r24	; 0x02
    41d6:	1c 82       	std	Y+4, r1	; 0x04
    41d8:	8c 89       	ldd	r24, Y+20	; 0x14
    41da:	9d 89       	ldd	r25, Y+21	; 0x15
    41dc:	89 2b       	or	r24, r25
    41de:	c1 f0       	breq	.+48     	; 0x4210 <xTaskGenericNotifyFromISR+0x7c>
    41e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    41e2:	88 2f       	mov	r24, r24
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	2a 81       	ldd	r18, Y+2	; 0x02
    41e8:	3b 81       	ldd	r19, Y+3	; 0x03
    41ea:	88 0f       	add	r24, r24
    41ec:	99 1f       	adc	r25, r25
    41ee:	88 0f       	add	r24, r24
    41f0:	99 1f       	adc	r25, r25
    41f2:	82 0f       	add	r24, r18
    41f4:	93 1f       	adc	r25, r19
    41f6:	8f 96       	adiw	r24, 0x2f	; 47
    41f8:	fc 01       	movw	r30, r24
    41fa:	80 81       	ld	r24, Z
    41fc:	91 81       	ldd	r25, Z+1	; 0x01
    41fe:	a2 81       	ldd	r26, Z+2	; 0x02
    4200:	b3 81       	ldd	r27, Z+3	; 0x03
    4202:	2c 89       	ldd	r18, Y+20	; 0x14
    4204:	3d 89       	ldd	r19, Y+21	; 0x15
    4206:	f9 01       	movw	r30, r18
    4208:	80 83       	st	Z, r24
    420a:	91 83       	std	Z+1, r25	; 0x01
    420c:	a2 83       	std	Z+2, r26	; 0x02
    420e:	b3 83       	std	Z+3, r27	; 0x03
    4210:	8e 85       	ldd	r24, Y+14	; 0x0e
    4212:	88 2f       	mov	r24, r24
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	2a 81       	ldd	r18, Y+2	; 0x02
    4218:	3b 81       	ldd	r19, Y+3	; 0x03
    421a:	82 0f       	add	r24, r18
    421c:	93 1f       	adc	r25, r19
    421e:	c3 96       	adiw	r24, 0x33	; 51
    4220:	fc 01       	movw	r30, r24
    4222:	80 81       	ld	r24, Z
    4224:	8d 83       	std	Y+5, r24	; 0x05
    4226:	8e 85       	ldd	r24, Y+14	; 0x0e
    4228:	88 2f       	mov	r24, r24
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	2a 81       	ldd	r18, Y+2	; 0x02
    422e:	3b 81       	ldd	r19, Y+3	; 0x03
    4230:	82 0f       	add	r24, r18
    4232:	93 1f       	adc	r25, r19
    4234:	c3 96       	adiw	r24, 0x33	; 51
    4236:	22 e0       	ldi	r18, 0x02	; 2
    4238:	fc 01       	movw	r30, r24
    423a:	20 83       	st	Z, r18
    423c:	8b 89       	ldd	r24, Y+19	; 0x13
    423e:	88 2f       	mov	r24, r24
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	82 30       	cpi	r24, 0x02	; 2
    4244:	91 05       	cpc	r25, r1
    4246:	09 f4       	brne	.+2      	; 0x424a <xTaskGenericNotifyFromISR+0xb6>
    4248:	3e c0       	rjmp	.+124    	; 0x42c6 <xTaskGenericNotifyFromISR+0x132>
    424a:	83 30       	cpi	r24, 0x03	; 3
    424c:	91 05       	cpc	r25, r1
    424e:	34 f4       	brge	.+12     	; 0x425c <xTaskGenericNotifyFromISR+0xc8>
    4250:	00 97       	sbiw	r24, 0x00	; 0
    4252:	09 f4       	brne	.+2      	; 0x4256 <xTaskGenericNotifyFromISR+0xc2>
    4254:	92 c0       	rjmp	.+292    	; 0x437a <xTaskGenericNotifyFromISR+0x1e6>
    4256:	01 97       	sbiw	r24, 0x01	; 1
    4258:	49 f0       	breq	.+18     	; 0x426c <xTaskGenericNotifyFromISR+0xd8>
    425a:	90 c0       	rjmp	.+288    	; 0x437c <xTaskGenericNotifyFromISR+0x1e8>
    425c:	83 30       	cpi	r24, 0x03	; 3
    425e:	91 05       	cpc	r25, r1
    4260:	09 f4       	brne	.+2      	; 0x4264 <xTaskGenericNotifyFromISR+0xd0>
    4262:	56 c0       	rjmp	.+172    	; 0x4310 <xTaskGenericNotifyFromISR+0x17c>
    4264:	04 97       	sbiw	r24, 0x04	; 4
    4266:	09 f4       	brne	.+2      	; 0x426a <xTaskGenericNotifyFromISR+0xd6>
    4268:	6b c0       	rjmp	.+214    	; 0x4340 <xTaskGenericNotifyFromISR+0x1ac>
    426a:	88 c0       	rjmp	.+272    	; 0x437c <xTaskGenericNotifyFromISR+0x1e8>
    426c:	8e 85       	ldd	r24, Y+14	; 0x0e
    426e:	68 2f       	mov	r22, r24
    4270:	70 e0       	ldi	r23, 0x00	; 0
    4272:	8e 85       	ldd	r24, Y+14	; 0x0e
    4274:	88 2f       	mov	r24, r24
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	2a 81       	ldd	r18, Y+2	; 0x02
    427a:	3b 81       	ldd	r19, Y+3	; 0x03
    427c:	88 0f       	add	r24, r24
    427e:	99 1f       	adc	r25, r25
    4280:	88 0f       	add	r24, r24
    4282:	99 1f       	adc	r25, r25
    4284:	82 0f       	add	r24, r18
    4286:	93 1f       	adc	r25, r19
    4288:	8f 96       	adiw	r24, 0x2f	; 47
    428a:	fc 01       	movw	r30, r24
    428c:	20 81       	ld	r18, Z
    428e:	31 81       	ldd	r19, Z+1	; 0x01
    4290:	42 81       	ldd	r20, Z+2	; 0x02
    4292:	53 81       	ldd	r21, Z+3	; 0x03
    4294:	8f 85       	ldd	r24, Y+15	; 0x0f
    4296:	98 89       	ldd	r25, Y+16	; 0x10
    4298:	a9 89       	ldd	r26, Y+17	; 0x11
    429a:	ba 89       	ldd	r27, Y+18	; 0x12
    429c:	82 2b       	or	r24, r18
    429e:	93 2b       	or	r25, r19
    42a0:	a4 2b       	or	r26, r20
    42a2:	b5 2b       	or	r27, r21
    42a4:	4a 81       	ldd	r20, Y+2	; 0x02
    42a6:	5b 81       	ldd	r21, Y+3	; 0x03
    42a8:	9b 01       	movw	r18, r22
    42aa:	22 0f       	add	r18, r18
    42ac:	33 1f       	adc	r19, r19
    42ae:	22 0f       	add	r18, r18
    42b0:	33 1f       	adc	r19, r19
    42b2:	24 0f       	add	r18, r20
    42b4:	35 1f       	adc	r19, r21
    42b6:	21 5d       	subi	r18, 0xD1	; 209
    42b8:	3f 4f       	sbci	r19, 0xFF	; 255
    42ba:	f9 01       	movw	r30, r18
    42bc:	80 83       	st	Z, r24
    42be:	91 83       	std	Z+1, r25	; 0x01
    42c0:	a2 83       	std	Z+2, r26	; 0x02
    42c2:	b3 83       	std	Z+3, r27	; 0x03
    42c4:	5b c0       	rjmp	.+182    	; 0x437c <xTaskGenericNotifyFromISR+0x1e8>
    42c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    42c8:	28 2f       	mov	r18, r24
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	4a 81       	ldd	r20, Y+2	; 0x02
    42ce:	5b 81       	ldd	r21, Y+3	; 0x03
    42d0:	c9 01       	movw	r24, r18
    42d2:	88 0f       	add	r24, r24
    42d4:	99 1f       	adc	r25, r25
    42d6:	88 0f       	add	r24, r24
    42d8:	99 1f       	adc	r25, r25
    42da:	84 0f       	add	r24, r20
    42dc:	95 1f       	adc	r25, r21
    42de:	8f 96       	adiw	r24, 0x2f	; 47
    42e0:	fc 01       	movw	r30, r24
    42e2:	80 81       	ld	r24, Z
    42e4:	91 81       	ldd	r25, Z+1	; 0x01
    42e6:	a2 81       	ldd	r26, Z+2	; 0x02
    42e8:	b3 81       	ldd	r27, Z+3	; 0x03
    42ea:	01 96       	adiw	r24, 0x01	; 1
    42ec:	a1 1d       	adc	r26, r1
    42ee:	b1 1d       	adc	r27, r1
    42f0:	4a 81       	ldd	r20, Y+2	; 0x02
    42f2:	5b 81       	ldd	r21, Y+3	; 0x03
    42f4:	22 0f       	add	r18, r18
    42f6:	33 1f       	adc	r19, r19
    42f8:	22 0f       	add	r18, r18
    42fa:	33 1f       	adc	r19, r19
    42fc:	24 0f       	add	r18, r20
    42fe:	35 1f       	adc	r19, r21
    4300:	21 5d       	subi	r18, 0xD1	; 209
    4302:	3f 4f       	sbci	r19, 0xFF	; 255
    4304:	f9 01       	movw	r30, r18
    4306:	80 83       	st	Z, r24
    4308:	91 83       	std	Z+1, r25	; 0x01
    430a:	a2 83       	std	Z+2, r26	; 0x02
    430c:	b3 83       	std	Z+3, r27	; 0x03
    430e:	36 c0       	rjmp	.+108    	; 0x437c <xTaskGenericNotifyFromISR+0x1e8>
    4310:	8e 85       	ldd	r24, Y+14	; 0x0e
    4312:	88 2f       	mov	r24, r24
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	2a 81       	ldd	r18, Y+2	; 0x02
    4318:	3b 81       	ldd	r19, Y+3	; 0x03
    431a:	88 0f       	add	r24, r24
    431c:	99 1f       	adc	r25, r25
    431e:	88 0f       	add	r24, r24
    4320:	99 1f       	adc	r25, r25
    4322:	82 0f       	add	r24, r18
    4324:	93 1f       	adc	r25, r19
    4326:	9c 01       	movw	r18, r24
    4328:	21 5d       	subi	r18, 0xD1	; 209
    432a:	3f 4f       	sbci	r19, 0xFF	; 255
    432c:	8f 85       	ldd	r24, Y+15	; 0x0f
    432e:	98 89       	ldd	r25, Y+16	; 0x10
    4330:	a9 89       	ldd	r26, Y+17	; 0x11
    4332:	ba 89       	ldd	r27, Y+18	; 0x12
    4334:	f9 01       	movw	r30, r18
    4336:	80 83       	st	Z, r24
    4338:	91 83       	std	Z+1, r25	; 0x01
    433a:	a2 83       	std	Z+2, r26	; 0x02
    433c:	b3 83       	std	Z+3, r27	; 0x03
    433e:	1e c0       	rjmp	.+60     	; 0x437c <xTaskGenericNotifyFromISR+0x1e8>
    4340:	8d 81       	ldd	r24, Y+5	; 0x05
    4342:	82 30       	cpi	r24, 0x02	; 2
    4344:	c1 f0       	breq	.+48     	; 0x4376 <xTaskGenericNotifyFromISR+0x1e2>
    4346:	8e 85       	ldd	r24, Y+14	; 0x0e
    4348:	88 2f       	mov	r24, r24
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	2a 81       	ldd	r18, Y+2	; 0x02
    434e:	3b 81       	ldd	r19, Y+3	; 0x03
    4350:	88 0f       	add	r24, r24
    4352:	99 1f       	adc	r25, r25
    4354:	88 0f       	add	r24, r24
    4356:	99 1f       	adc	r25, r25
    4358:	82 0f       	add	r24, r18
    435a:	93 1f       	adc	r25, r19
    435c:	9c 01       	movw	r18, r24
    435e:	21 5d       	subi	r18, 0xD1	; 209
    4360:	3f 4f       	sbci	r19, 0xFF	; 255
    4362:	8f 85       	ldd	r24, Y+15	; 0x0f
    4364:	98 89       	ldd	r25, Y+16	; 0x10
    4366:	a9 89       	ldd	r26, Y+17	; 0x11
    4368:	ba 89       	ldd	r27, Y+18	; 0x12
    436a:	f9 01       	movw	r30, r18
    436c:	80 83       	st	Z, r24
    436e:	91 83       	std	Z+1, r25	; 0x01
    4370:	a2 83       	std	Z+2, r26	; 0x02
    4372:	b3 83       	std	Z+3, r27	; 0x03
    4374:	03 c0       	rjmp	.+6      	; 0x437c <xTaskGenericNotifyFromISR+0x1e8>
    4376:	19 82       	std	Y+1, r1	; 0x01
    4378:	01 c0       	rjmp	.+2      	; 0x437c <xTaskGenericNotifyFromISR+0x1e8>
    437a:	00 00       	nop
    437c:	8d 81       	ldd	r24, Y+5	; 0x05
    437e:	81 30       	cpi	r24, 0x01	; 1
    4380:	09 f0       	breq	.+2      	; 0x4384 <xTaskGenericNotifyFromISR+0x1f0>
    4382:	15 c1       	rjmp	.+554    	; 0x45ae <xTaskGenericNotifyFromISR+0x41a>
    4384:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <uxSchedulerSuspended>
    4388:	88 23       	and	r24, r24
    438a:	09 f0       	breq	.+2      	; 0x438e <xTaskGenericNotifyFromISR+0x1fa>
    438c:	bf c0       	rjmp	.+382    	; 0x450c <xTaskGenericNotifyFromISR+0x378>
    438e:	8a 81       	ldd	r24, Y+2	; 0x02
    4390:	9b 81       	ldd	r25, Y+3	; 0x03
    4392:	fc 01       	movw	r30, r24
    4394:	84 85       	ldd	r24, Z+12	; 0x0c
    4396:	95 85       	ldd	r25, Z+13	; 0x0d
    4398:	9f 83       	std	Y+7, r25	; 0x07
    439a:	8e 83       	std	Y+6, r24	; 0x06
    439c:	8a 81       	ldd	r24, Y+2	; 0x02
    439e:	9b 81       	ldd	r25, Y+3	; 0x03
    43a0:	fc 01       	movw	r30, r24
    43a2:	86 81       	ldd	r24, Z+6	; 0x06
    43a4:	97 81       	ldd	r25, Z+7	; 0x07
    43a6:	2a 81       	ldd	r18, Y+2	; 0x02
    43a8:	3b 81       	ldd	r19, Y+3	; 0x03
    43aa:	f9 01       	movw	r30, r18
    43ac:	20 85       	ldd	r18, Z+8	; 0x08
    43ae:	31 85       	ldd	r19, Z+9	; 0x09
    43b0:	fc 01       	movw	r30, r24
    43b2:	37 83       	std	Z+7, r19	; 0x07
    43b4:	26 83       	std	Z+6, r18	; 0x06
    43b6:	8a 81       	ldd	r24, Y+2	; 0x02
    43b8:	9b 81       	ldd	r25, Y+3	; 0x03
    43ba:	fc 01       	movw	r30, r24
    43bc:	80 85       	ldd	r24, Z+8	; 0x08
    43be:	91 85       	ldd	r25, Z+9	; 0x09
    43c0:	2a 81       	ldd	r18, Y+2	; 0x02
    43c2:	3b 81       	ldd	r19, Y+3	; 0x03
    43c4:	f9 01       	movw	r30, r18
    43c6:	26 81       	ldd	r18, Z+6	; 0x06
    43c8:	37 81       	ldd	r19, Z+7	; 0x07
    43ca:	fc 01       	movw	r30, r24
    43cc:	35 83       	std	Z+5, r19	; 0x05
    43ce:	24 83       	std	Z+4, r18	; 0x04
    43d0:	8e 81       	ldd	r24, Y+6	; 0x06
    43d2:	9f 81       	ldd	r25, Y+7	; 0x07
    43d4:	fc 01       	movw	r30, r24
    43d6:	21 81       	ldd	r18, Z+1	; 0x01
    43d8:	32 81       	ldd	r19, Z+2	; 0x02
    43da:	8a 81       	ldd	r24, Y+2	; 0x02
    43dc:	9b 81       	ldd	r25, Y+3	; 0x03
    43de:	02 96       	adiw	r24, 0x02	; 2
    43e0:	28 17       	cp	r18, r24
    43e2:	39 07       	cpc	r19, r25
    43e4:	51 f4       	brne	.+20     	; 0x43fa <xTaskGenericNotifyFromISR+0x266>
    43e6:	8a 81       	ldd	r24, Y+2	; 0x02
    43e8:	9b 81       	ldd	r25, Y+3	; 0x03
    43ea:	fc 01       	movw	r30, r24
    43ec:	20 85       	ldd	r18, Z+8	; 0x08
    43ee:	31 85       	ldd	r19, Z+9	; 0x09
    43f0:	8e 81       	ldd	r24, Y+6	; 0x06
    43f2:	9f 81       	ldd	r25, Y+7	; 0x07
    43f4:	fc 01       	movw	r30, r24
    43f6:	32 83       	std	Z+2, r19	; 0x02
    43f8:	21 83       	std	Z+1, r18	; 0x01
    43fa:	8a 81       	ldd	r24, Y+2	; 0x02
    43fc:	9b 81       	ldd	r25, Y+3	; 0x03
    43fe:	fc 01       	movw	r30, r24
    4400:	15 86       	std	Z+13, r1	; 0x0d
    4402:	14 86       	std	Z+12, r1	; 0x0c
    4404:	8e 81       	ldd	r24, Y+6	; 0x06
    4406:	9f 81       	ldd	r25, Y+7	; 0x07
    4408:	fc 01       	movw	r30, r24
    440a:	80 81       	ld	r24, Z
    440c:	2f ef       	ldi	r18, 0xFF	; 255
    440e:	28 0f       	add	r18, r24
    4410:	8e 81       	ldd	r24, Y+6	; 0x06
    4412:	9f 81       	ldd	r25, Y+7	; 0x07
    4414:	fc 01       	movw	r30, r24
    4416:	20 83       	st	Z, r18
    4418:	8a 81       	ldd	r24, Y+2	; 0x02
    441a:	9b 81       	ldd	r25, Y+3	; 0x03
    441c:	fc 01       	movw	r30, r24
    441e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4420:	80 91 0b 11 	lds	r24, 0x110B	; 0x80110b <uxTopReadyPriority>
    4424:	89 17       	cp	r24, r25
    4426:	30 f4       	brcc	.+12     	; 0x4434 <xTaskGenericNotifyFromISR+0x2a0>
    4428:	8a 81       	ldd	r24, Y+2	; 0x02
    442a:	9b 81       	ldd	r25, Y+3	; 0x03
    442c:	fc 01       	movw	r30, r24
    442e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4430:	80 93 0b 11 	sts	0x110B, r24	; 0x80110b <uxTopReadyPriority>
    4434:	8a 81       	ldd	r24, Y+2	; 0x02
    4436:	9b 81       	ldd	r25, Y+3	; 0x03
    4438:	fc 01       	movw	r30, r24
    443a:	82 8d       	ldd	r24, Z+26	; 0x1a
    443c:	28 2f       	mov	r18, r24
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	4b e0       	ldi	r20, 0x0B	; 11
    4442:	42 9f       	mul	r20, r18
    4444:	c0 01       	movw	r24, r0
    4446:	43 9f       	mul	r20, r19
    4448:	90 0d       	add	r25, r0
    444a:	11 24       	eor	r1, r1
    444c:	83 5a       	subi	r24, 0xA3	; 163
    444e:	9f 4e       	sbci	r25, 0xEF	; 239
    4450:	fc 01       	movw	r30, r24
    4452:	80 81       	ld	r24, Z
    4454:	91 81       	ldd	r25, Z+1	; 0x01
    4456:	99 87       	std	Y+9, r25	; 0x09
    4458:	88 87       	std	Y+8, r24	; 0x08
    445a:	8a 81       	ldd	r24, Y+2	; 0x02
    445c:	9b 81       	ldd	r25, Y+3	; 0x03
    445e:	28 85       	ldd	r18, Y+8	; 0x08
    4460:	39 85       	ldd	r19, Y+9	; 0x09
    4462:	fc 01       	movw	r30, r24
    4464:	37 83       	std	Z+7, r19	; 0x07
    4466:	26 83       	std	Z+6, r18	; 0x06
    4468:	88 85       	ldd	r24, Y+8	; 0x08
    446a:	99 85       	ldd	r25, Y+9	; 0x09
    446c:	fc 01       	movw	r30, r24
    446e:	26 81       	ldd	r18, Z+6	; 0x06
    4470:	37 81       	ldd	r19, Z+7	; 0x07
    4472:	8a 81       	ldd	r24, Y+2	; 0x02
    4474:	9b 81       	ldd	r25, Y+3	; 0x03
    4476:	fc 01       	movw	r30, r24
    4478:	31 87       	std	Z+9, r19	; 0x09
    447a:	20 87       	std	Z+8, r18	; 0x08
    447c:	88 85       	ldd	r24, Y+8	; 0x08
    447e:	99 85       	ldd	r25, Y+9	; 0x09
    4480:	fc 01       	movw	r30, r24
    4482:	86 81       	ldd	r24, Z+6	; 0x06
    4484:	97 81       	ldd	r25, Z+7	; 0x07
    4486:	2a 81       	ldd	r18, Y+2	; 0x02
    4488:	3b 81       	ldd	r19, Y+3	; 0x03
    448a:	2e 5f       	subi	r18, 0xFE	; 254
    448c:	3f 4f       	sbci	r19, 0xFF	; 255
    448e:	fc 01       	movw	r30, r24
    4490:	35 83       	std	Z+5, r19	; 0x05
    4492:	24 83       	std	Z+4, r18	; 0x04
    4494:	8a 81       	ldd	r24, Y+2	; 0x02
    4496:	9b 81       	ldd	r25, Y+3	; 0x03
    4498:	9c 01       	movw	r18, r24
    449a:	2e 5f       	subi	r18, 0xFE	; 254
    449c:	3f 4f       	sbci	r19, 0xFF	; 255
    449e:	88 85       	ldd	r24, Y+8	; 0x08
    44a0:	99 85       	ldd	r25, Y+9	; 0x09
    44a2:	fc 01       	movw	r30, r24
    44a4:	37 83       	std	Z+7, r19	; 0x07
    44a6:	26 83       	std	Z+6, r18	; 0x06
    44a8:	8a 81       	ldd	r24, Y+2	; 0x02
    44aa:	9b 81       	ldd	r25, Y+3	; 0x03
    44ac:	fc 01       	movw	r30, r24
    44ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    44b0:	28 2f       	mov	r18, r24
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	4b e0       	ldi	r20, 0x0B	; 11
    44b6:	42 9f       	mul	r20, r18
    44b8:	c0 01       	movw	r24, r0
    44ba:	43 9f       	mul	r20, r19
    44bc:	90 0d       	add	r25, r0
    44be:	11 24       	eor	r1, r1
    44c0:	9c 01       	movw	r18, r24
    44c2:	24 5a       	subi	r18, 0xA4	; 164
    44c4:	3f 4e       	sbci	r19, 0xEF	; 239
    44c6:	8a 81       	ldd	r24, Y+2	; 0x02
    44c8:	9b 81       	ldd	r25, Y+3	; 0x03
    44ca:	fc 01       	movw	r30, r24
    44cc:	35 87       	std	Z+13, r19	; 0x0d
    44ce:	24 87       	std	Z+12, r18	; 0x0c
    44d0:	8a 81       	ldd	r24, Y+2	; 0x02
    44d2:	9b 81       	ldd	r25, Y+3	; 0x03
    44d4:	fc 01       	movw	r30, r24
    44d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    44d8:	88 2f       	mov	r24, r24
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	4b e0       	ldi	r20, 0x0B	; 11
    44de:	48 9f       	mul	r20, r24
    44e0:	90 01       	movw	r18, r0
    44e2:	49 9f       	mul	r20, r25
    44e4:	30 0d       	add	r19, r0
    44e6:	11 24       	eor	r1, r1
    44e8:	24 5a       	subi	r18, 0xA4	; 164
    44ea:	3f 4e       	sbci	r19, 0xEF	; 239
    44ec:	f9 01       	movw	r30, r18
    44ee:	20 81       	ld	r18, Z
    44f0:	41 e0       	ldi	r20, 0x01	; 1
    44f2:	42 0f       	add	r20, r18
    44f4:	5b e0       	ldi	r21, 0x0B	; 11
    44f6:	58 9f       	mul	r21, r24
    44f8:	90 01       	movw	r18, r0
    44fa:	59 9f       	mul	r21, r25
    44fc:	30 0d       	add	r19, r0
    44fe:	11 24       	eor	r1, r1
    4500:	c9 01       	movw	r24, r18
    4502:	84 5a       	subi	r24, 0xA4	; 164
    4504:	9f 4e       	sbci	r25, 0xEF	; 239
    4506:	fc 01       	movw	r30, r24
    4508:	40 83       	st	Z, r20
    450a:	39 c0       	rjmp	.+114    	; 0x457e <xTaskGenericNotifyFromISR+0x3ea>
    450c:	80 91 e5 10 	lds	r24, 0x10E5	; 0x8010e5 <xPendingReadyList+0x1>
    4510:	90 91 e6 10 	lds	r25, 0x10E6	; 0x8010e6 <xPendingReadyList+0x2>
    4514:	9b 87       	std	Y+11, r25	; 0x0b
    4516:	8a 87       	std	Y+10, r24	; 0x0a
    4518:	8a 81       	ldd	r24, Y+2	; 0x02
    451a:	9b 81       	ldd	r25, Y+3	; 0x03
    451c:	2a 85       	ldd	r18, Y+10	; 0x0a
    451e:	3b 85       	ldd	r19, Y+11	; 0x0b
    4520:	fc 01       	movw	r30, r24
    4522:	33 8b       	std	Z+19, r19	; 0x13
    4524:	22 8b       	std	Z+18, r18	; 0x12
    4526:	8a 85       	ldd	r24, Y+10	; 0x0a
    4528:	9b 85       	ldd	r25, Y+11	; 0x0b
    452a:	fc 01       	movw	r30, r24
    452c:	26 81       	ldd	r18, Z+6	; 0x06
    452e:	37 81       	ldd	r19, Z+7	; 0x07
    4530:	8a 81       	ldd	r24, Y+2	; 0x02
    4532:	9b 81       	ldd	r25, Y+3	; 0x03
    4534:	fc 01       	movw	r30, r24
    4536:	35 8b       	std	Z+21, r19	; 0x15
    4538:	24 8b       	std	Z+20, r18	; 0x14
    453a:	8a 85       	ldd	r24, Y+10	; 0x0a
    453c:	9b 85       	ldd	r25, Y+11	; 0x0b
    453e:	fc 01       	movw	r30, r24
    4540:	86 81       	ldd	r24, Z+6	; 0x06
    4542:	97 81       	ldd	r25, Z+7	; 0x07
    4544:	2a 81       	ldd	r18, Y+2	; 0x02
    4546:	3b 81       	ldd	r19, Y+3	; 0x03
    4548:	22 5f       	subi	r18, 0xF2	; 242
    454a:	3f 4f       	sbci	r19, 0xFF	; 255
    454c:	fc 01       	movw	r30, r24
    454e:	35 83       	std	Z+5, r19	; 0x05
    4550:	24 83       	std	Z+4, r18	; 0x04
    4552:	8a 81       	ldd	r24, Y+2	; 0x02
    4554:	9b 81       	ldd	r25, Y+3	; 0x03
    4556:	9c 01       	movw	r18, r24
    4558:	22 5f       	subi	r18, 0xF2	; 242
    455a:	3f 4f       	sbci	r19, 0xFF	; 255
    455c:	8a 85       	ldd	r24, Y+10	; 0x0a
    455e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4560:	fc 01       	movw	r30, r24
    4562:	37 83       	std	Z+7, r19	; 0x07
    4564:	26 83       	std	Z+6, r18	; 0x06
    4566:	8a 81       	ldd	r24, Y+2	; 0x02
    4568:	9b 81       	ldd	r25, Y+3	; 0x03
    456a:	24 ee       	ldi	r18, 0xE4	; 228
    456c:	30 e1       	ldi	r19, 0x10	; 16
    456e:	fc 01       	movw	r30, r24
    4570:	31 8f       	std	Z+25, r19	; 0x19
    4572:	20 8f       	std	Z+24, r18	; 0x18
    4574:	80 91 e4 10 	lds	r24, 0x10E4	; 0x8010e4 <xPendingReadyList>
    4578:	8f 5f       	subi	r24, 0xFF	; 255
    457a:	80 93 e4 10 	sts	0x10E4, r24	; 0x8010e4 <xPendingReadyList>
    457e:	8a 81       	ldd	r24, Y+2	; 0x02
    4580:	9b 81       	ldd	r25, Y+3	; 0x03
    4582:	fc 01       	movw	r30, r24
    4584:	22 8d       	ldd	r18, Z+26	; 0x1a
    4586:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    458a:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    458e:	fc 01       	movw	r30, r24
    4590:	82 8d       	ldd	r24, Z+26	; 0x1a
    4592:	82 17       	cp	r24, r18
    4594:	60 f4       	brcc	.+24     	; 0x45ae <xTaskGenericNotifyFromISR+0x41a>
    4596:	8e 89       	ldd	r24, Y+22	; 0x16
    4598:	9f 89       	ldd	r25, Y+23	; 0x17
    459a:	89 2b       	or	r24, r25
    459c:	29 f0       	breq	.+10     	; 0x45a8 <xTaskGenericNotifyFromISR+0x414>
    459e:	8e 89       	ldd	r24, Y+22	; 0x16
    45a0:	9f 89       	ldd	r25, Y+23	; 0x17
    45a2:	21 e0       	ldi	r18, 0x01	; 1
    45a4:	fc 01       	movw	r30, r24
    45a6:	20 83       	st	Z, r18
    45a8:	81 e0       	ldi	r24, 0x01	; 1
    45aa:	80 93 11 11 	sts	0x1111, r24	; 0x801111 <xYieldPending>
    45ae:	89 81       	ldd	r24, Y+1	; 0x01
    45b0:	67 96       	adiw	r28, 0x17	; 23
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	cd bf       	out	0x3d, r28	; 61
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	0f 91       	pop	r16
    45c2:	ff 90       	pop	r15
    45c4:	ef 90       	pop	r14
    45c6:	df 90       	pop	r13
    45c8:	cf 90       	pop	r12
    45ca:	08 95       	ret

000045cc <xTaskGenericNotifyStateClear>:
    45cc:	cf 93       	push	r28
    45ce:	df 93       	push	r29
    45d0:	00 d0       	rcall	.+0      	; 0x45d2 <xTaskGenericNotifyStateClear+0x6>
    45d2:	00 d0       	rcall	.+0      	; 0x45d4 <xTaskGenericNotifyStateClear+0x8>
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	9d 83       	std	Y+5, r25	; 0x05
    45da:	8c 83       	std	Y+4, r24	; 0x04
    45dc:	6e 83       	std	Y+6, r22	; 0x06
    45de:	8c 81       	ldd	r24, Y+4	; 0x04
    45e0:	9d 81       	ldd	r25, Y+5	; 0x05
    45e2:	89 2b       	or	r24, r25
    45e4:	29 f4       	brne	.+10     	; 0x45f0 <xTaskGenericNotifyStateClear+0x24>
    45e6:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    45ea:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    45ee:	02 c0       	rjmp	.+4      	; 0x45f4 <xTaskGenericNotifyStateClear+0x28>
    45f0:	8c 81       	ldd	r24, Y+4	; 0x04
    45f2:	9d 81       	ldd	r25, Y+5	; 0x05
    45f4:	9b 83       	std	Y+3, r25	; 0x03
    45f6:	8a 83       	std	Y+2, r24	; 0x02
    45f8:	0f b6       	in	r0, 0x3f	; 63
    45fa:	f8 94       	cli
    45fc:	0f 92       	push	r0
    45fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4600:	88 2f       	mov	r24, r24
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	2a 81       	ldd	r18, Y+2	; 0x02
    4606:	3b 81       	ldd	r19, Y+3	; 0x03
    4608:	82 0f       	add	r24, r18
    460a:	93 1f       	adc	r25, r19
    460c:	c3 96       	adiw	r24, 0x33	; 51
    460e:	fc 01       	movw	r30, r24
    4610:	80 81       	ld	r24, Z
    4612:	82 30       	cpi	r24, 0x02	; 2
    4614:	69 f4       	brne	.+26     	; 0x4630 <xTaskGenericNotifyStateClear+0x64>
    4616:	8e 81       	ldd	r24, Y+6	; 0x06
    4618:	88 2f       	mov	r24, r24
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	2a 81       	ldd	r18, Y+2	; 0x02
    461e:	3b 81       	ldd	r19, Y+3	; 0x03
    4620:	82 0f       	add	r24, r18
    4622:	93 1f       	adc	r25, r19
    4624:	c3 96       	adiw	r24, 0x33	; 51
    4626:	fc 01       	movw	r30, r24
    4628:	10 82       	st	Z, r1
    462a:	81 e0       	ldi	r24, 0x01	; 1
    462c:	89 83       	std	Y+1, r24	; 0x01
    462e:	01 c0       	rjmp	.+2      	; 0x4632 <xTaskGenericNotifyStateClear+0x66>
    4630:	19 82       	std	Y+1, r1	; 0x01
    4632:	0f 90       	pop	r0
    4634:	0f be       	out	0x3f, r0	; 63
    4636:	89 81       	ldd	r24, Y+1	; 0x01
    4638:	26 96       	adiw	r28, 0x06	; 6
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	f8 94       	cli
    463e:	de bf       	out	0x3e, r29	; 62
    4640:	0f be       	out	0x3f, r0	; 63
    4642:	cd bf       	out	0x3d, r28	; 61
    4644:	df 91       	pop	r29
    4646:	cf 91       	pop	r28
    4648:	08 95       	ret

0000464a <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    464a:	cf 93       	push	r28
    464c:	df 93       	push	r29
    464e:	cd b7       	in	r28, 0x3d	; 61
    4650:	de b7       	in	r29, 0x3e	; 62
    4652:	2f 97       	sbiw	r28, 0x0f	; 15
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	f8 94       	cli
    4658:	de bf       	out	0x3e, r29	; 62
    465a:	0f be       	out	0x3f, r0	; 63
    465c:	cd bf       	out	0x3d, r28	; 61
    465e:	6b 87       	std	Y+11, r22	; 0x0b
    4660:	7c 87       	std	Y+12, r23	; 0x0c
    4662:	8d 87       	std	Y+13, r24	; 0x0d
    4664:	9e 87       	std	Y+14, r25	; 0x0e
    4666:	4f 87       	std	Y+15, r20	; 0x0f
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    4668:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <xTickCount>
    466c:	90 91 08 11 	lds	r25, 0x1108	; 0x801108 <xTickCount+0x1>
    4670:	a0 91 09 11 	lds	r26, 0x1109	; 0x801109 <xTickCount+0x2>
    4674:	b0 91 0a 11 	lds	r27, 0x110A	; 0x80110a <xTickCount+0x3>
    4678:	89 83       	std	Y+1, r24	; 0x01
    467a:	9a 83       	std	Y+2, r25	; 0x02
    467c:	ab 83       	std	Y+3, r26	; 0x03
    467e:	bc 83       	std	Y+4, r27	; 0x04
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4680:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    4684:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    4688:	02 96       	adiw	r24, 0x02	; 2
    468a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    468e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4690:	9c 85       	ldd	r25, Y+12	; 0x0c
    4692:	ad 85       	ldd	r26, Y+13	; 0x0d
    4694:	be 85       	ldd	r27, Y+14	; 0x0e
    4696:	8f 3f       	cpi	r24, 0xFF	; 255
    4698:	9f 4f       	sbci	r25, 0xFF	; 255
    469a:	af 4f       	sbci	r26, 0xFF	; 255
    469c:	bf 4f       	sbci	r27, 0xFF	; 255
    469e:	09 f0       	breq	.+2      	; 0x46a2 <prvAddCurrentTaskToDelayedList+0x58>
    46a0:	49 c0       	rjmp	.+146    	; 0x4734 <prvAddCurrentTaskToDelayedList+0xea>
    46a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    46a4:	88 23       	and	r24, r24
    46a6:	09 f4       	brne	.+2      	; 0x46aa <prvAddCurrentTaskToDelayedList+0x60>
    46a8:	45 c0       	rjmp	.+138    	; 0x4734 <prvAddCurrentTaskToDelayedList+0xea>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    46aa:	80 91 fc 10 	lds	r24, 0x10FC	; 0x8010fc <xSuspendedTaskList+0x1>
    46ae:	90 91 fd 10 	lds	r25, 0x10FD	; 0x8010fd <xSuspendedTaskList+0x2>
    46b2:	9e 83       	std	Y+6, r25	; 0x06
    46b4:	8d 83       	std	Y+5, r24	; 0x05
    46b6:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    46ba:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    46be:	2d 81       	ldd	r18, Y+5	; 0x05
    46c0:	3e 81       	ldd	r19, Y+6	; 0x06
    46c2:	fc 01       	movw	r30, r24
    46c4:	37 83       	std	Z+7, r19	; 0x07
    46c6:	26 83       	std	Z+6, r18	; 0x06
    46c8:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    46cc:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    46d0:	2d 81       	ldd	r18, Y+5	; 0x05
    46d2:	3e 81       	ldd	r19, Y+6	; 0x06
    46d4:	f9 01       	movw	r30, r18
    46d6:	26 81       	ldd	r18, Z+6	; 0x06
    46d8:	37 81       	ldd	r19, Z+7	; 0x07
    46da:	fc 01       	movw	r30, r24
    46dc:	31 87       	std	Z+9, r19	; 0x09
    46de:	20 87       	std	Z+8, r18	; 0x08
    46e0:	8d 81       	ldd	r24, Y+5	; 0x05
    46e2:	9e 81       	ldd	r25, Y+6	; 0x06
    46e4:	fc 01       	movw	r30, r24
    46e6:	86 81       	ldd	r24, Z+6	; 0x06
    46e8:	97 81       	ldd	r25, Z+7	; 0x07
    46ea:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <pxCurrentTCB>
    46ee:	30 91 5b 10 	lds	r19, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    46f2:	2e 5f       	subi	r18, 0xFE	; 254
    46f4:	3f 4f       	sbci	r19, 0xFF	; 255
    46f6:	fc 01       	movw	r30, r24
    46f8:	35 83       	std	Z+5, r19	; 0x05
    46fa:	24 83       	std	Z+4, r18	; 0x04
    46fc:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    4700:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    4704:	9c 01       	movw	r18, r24
    4706:	2e 5f       	subi	r18, 0xFE	; 254
    4708:	3f 4f       	sbci	r19, 0xFF	; 255
    470a:	8d 81       	ldd	r24, Y+5	; 0x05
    470c:	9e 81       	ldd	r25, Y+6	; 0x06
    470e:	fc 01       	movw	r30, r24
    4710:	37 83       	std	Z+7, r19	; 0x07
    4712:	26 83       	std	Z+6, r18	; 0x06
    4714:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    4718:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    471c:	2b ef       	ldi	r18, 0xFB	; 251
    471e:	30 e1       	ldi	r19, 0x10	; 16
    4720:	fc 01       	movw	r30, r24
    4722:	35 87       	std	Z+13, r19	; 0x0d
    4724:	24 87       	std	Z+12, r18	; 0x0c
    4726:	80 91 fb 10 	lds	r24, 0x10FB	; 0x8010fb <xSuspendedTaskList>
    472a:	8f 5f       	subi	r24, 0xFF	; 255
    472c:	80 93 fb 10 	sts	0x10FB, r24	; 0x8010fb <xSuspendedTaskList>
    4730:	00 00       	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    4732:	64 c0       	rjmp	.+200    	; 0x47fc <prvAddCurrentTaskToDelayedList+0x1b2>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
    4734:	29 81       	ldd	r18, Y+1	; 0x01
    4736:	3a 81       	ldd	r19, Y+2	; 0x02
    4738:	4b 81       	ldd	r20, Y+3	; 0x03
    473a:	5c 81       	ldd	r21, Y+4	; 0x04
    473c:	8b 85       	ldd	r24, Y+11	; 0x0b
    473e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4740:	ad 85       	ldd	r26, Y+13	; 0x0d
    4742:	be 85       	ldd	r27, Y+14	; 0x0e
    4744:	82 0f       	add	r24, r18
    4746:	93 1f       	adc	r25, r19
    4748:	a4 1f       	adc	r26, r20
    474a:	b5 1f       	adc	r27, r21
    474c:	8f 83       	std	Y+7, r24	; 0x07
    474e:	98 87       	std	Y+8, r25	; 0x08
    4750:	a9 87       	std	Y+9, r26	; 0x09
    4752:	ba 87       	std	Y+10, r27	; 0x0a

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    4754:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <pxCurrentTCB>
    4758:	30 91 5b 10 	lds	r19, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    475c:	8f 81       	ldd	r24, Y+7	; 0x07
    475e:	98 85       	ldd	r25, Y+8	; 0x08
    4760:	a9 85       	ldd	r26, Y+9	; 0x09
    4762:	ba 85       	ldd	r27, Y+10	; 0x0a
    4764:	f9 01       	movw	r30, r18
    4766:	82 83       	std	Z+2, r24	; 0x02
    4768:	93 83       	std	Z+3, r25	; 0x03
    476a:	a4 83       	std	Z+4, r26	; 0x04
    476c:	b5 83       	std	Z+5, r27	; 0x05

                if( xTimeToWake < xConstTickCount )
    476e:	2f 81       	ldd	r18, Y+7	; 0x07
    4770:	38 85       	ldd	r19, Y+8	; 0x08
    4772:	49 85       	ldd	r20, Y+9	; 0x09
    4774:	5a 85       	ldd	r21, Y+10	; 0x0a
    4776:	89 81       	ldd	r24, Y+1	; 0x01
    4778:	9a 81       	ldd	r25, Y+2	; 0x02
    477a:	ab 81       	ldd	r26, Y+3	; 0x03
    477c:	bc 81       	ldd	r27, Y+4	; 0x04
    477e:	28 17       	cp	r18, r24
    4780:	39 07       	cpc	r19, r25
    4782:	4a 07       	cpc	r20, r26
    4784:	5b 07       	cpc	r21, r27
    4786:	78 f4       	brcc	.+30     	; 0x47a6 <prvAddCurrentTaskToDelayedList+0x15c>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4788:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    478c:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    4790:	9c 01       	movw	r18, r24
    4792:	2e 5f       	subi	r18, 0xFE	; 254
    4794:	3f 4f       	sbci	r19, 0xFF	; 255
    4796:	80 91 e2 10 	lds	r24, 0x10E2	; 0x8010e2 <pxOverflowDelayedTaskList>
    479a:	90 91 e3 10 	lds	r25, 0x10E3	; 0x8010e3 <pxOverflowDelayedTaskList+0x1>
    479e:	b9 01       	movw	r22, r18
    47a0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    47a4:	2b c0       	rjmp	.+86     	; 0x47fc <prvAddCurrentTaskToDelayedList+0x1b2>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    47a6:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <pxCurrentTCB>
    47aa:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <pxCurrentTCB+0x1>
    47ae:	9c 01       	movw	r18, r24
    47b0:	2e 5f       	subi	r18, 0xFE	; 254
    47b2:	3f 4f       	sbci	r19, 0xFF	; 255
    47b4:	80 91 e0 10 	lds	r24, 0x10E0	; 0x8010e0 <pxDelayedTaskList>
    47b8:	90 91 e1 10 	lds	r25, 0x10E1	; 0x8010e1 <pxDelayedTaskList+0x1>
    47bc:	b9 01       	movw	r22, r18
    47be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vListInsert>

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
    47c2:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <xNextTaskUnblockTime>
    47c6:	90 91 15 11 	lds	r25, 0x1115	; 0x801115 <xNextTaskUnblockTime+0x1>
    47ca:	a0 91 16 11 	lds	r26, 0x1116	; 0x801116 <xNextTaskUnblockTime+0x2>
    47ce:	b0 91 17 11 	lds	r27, 0x1117	; 0x801117 <xNextTaskUnblockTime+0x3>
    47d2:	2f 81       	ldd	r18, Y+7	; 0x07
    47d4:	38 85       	ldd	r19, Y+8	; 0x08
    47d6:	49 85       	ldd	r20, Y+9	; 0x09
    47d8:	5a 85       	ldd	r21, Y+10	; 0x0a
    47da:	28 17       	cp	r18, r24
    47dc:	39 07       	cpc	r19, r25
    47de:	4a 07       	cpc	r20, r26
    47e0:	5b 07       	cpc	r21, r27
    47e2:	60 f4       	brcc	.+24     	; 0x47fc <prvAddCurrentTaskToDelayedList+0x1b2>
                    {
                        xNextTaskUnblockTime = xTimeToWake;
    47e4:	8f 81       	ldd	r24, Y+7	; 0x07
    47e6:	98 85       	ldd	r25, Y+8	; 0x08
    47e8:	a9 85       	ldd	r26, Y+9	; 0x09
    47ea:	ba 85       	ldd	r27, Y+10	; 0x0a
    47ec:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <xNextTaskUnblockTime>
    47f0:	90 93 15 11 	sts	0x1115, r25	; 0x801115 <xNextTaskUnblockTime+0x1>
    47f4:	a0 93 16 11 	sts	0x1116, r26	; 0x801116 <xNextTaskUnblockTime+0x2>
    47f8:	b0 93 17 11 	sts	0x1117, r27	; 0x801117 <xNextTaskUnblockTime+0x3>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    47fc:	00 00       	nop
    47fe:	2f 96       	adiw	r28, 0x0f	; 15
    4800:	0f b6       	in	r0, 0x3f	; 63
    4802:	f8 94       	cli
    4804:	de bf       	out	0x3e, r29	; 62
    4806:	0f be       	out	0x3f, r0	; 63
    4808:	cd bf       	out	0x3d, r28	; 61
    480a:	df 91       	pop	r29
    480c:	cf 91       	pop	r28
    480e:	08 95       	ret

00004810 <xTimerCreateTimerTask>:
    4810:	ef 92       	push	r14
    4812:	ff 92       	push	r15
    4814:	0f 93       	push	r16
    4816:	cf 93       	push	r28
    4818:	df 93       	push	r29
    481a:	1f 92       	push	r1
    481c:	cd b7       	in	r28, 0x3d	; 61
    481e:	de b7       	in	r29, 0x3e	; 62
    4820:	19 82       	std	Y+1, r1	; 0x01
    4822:	ae d4       	rcall	.+2396   	; 0x5180 <prvCheckForValidListAndQueue>
    4824:	80 91 35 11 	lds	r24, 0x1135	; 0x801135 <xTimerQueue>
    4828:	90 91 36 11 	lds	r25, 0x1136	; 0x801136 <xTimerQueue+0x1>
    482c:	89 2b       	or	r24, r25
    482e:	91 f0       	breq	.+36     	; 0x4854 <xTimerCreateTimerTask+0x44>
    4830:	0f 2e       	mov	r0, r31
    4832:	f7 e3       	ldi	r31, 0x37	; 55
    4834:	ef 2e       	mov	r14, r31
    4836:	f1 e1       	ldi	r31, 0x11	; 17
    4838:	ff 2e       	mov	r15, r31
    483a:	f0 2d       	mov	r31, r0
    483c:	03 e0       	ldi	r16, 0x03	; 3
    483e:	20 e0       	ldi	r18, 0x00	; 0
    4840:	30 e0       	ldi	r19, 0x00	; 0
    4842:	40 ec       	ldi	r20, 0xC0	; 192
    4844:	50 e0       	ldi	r21, 0x00	; 0
    4846:	62 e2       	ldi	r22, 0x22	; 34
    4848:	72 e0       	ldi	r23, 0x02	; 2
    484a:	8e e8       	ldi	r24, 0x8E	; 142
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskCreate>
    4852:	89 83       	std	Y+1, r24	; 0x01
    4854:	89 81       	ldd	r24, Y+1	; 0x01
    4856:	0f 90       	pop	r0
    4858:	df 91       	pop	r29
    485a:	cf 91       	pop	r28
    485c:	0f 91       	pop	r16
    485e:	ff 90       	pop	r15
    4860:	ef 90       	pop	r14
    4862:	08 95       	ret

00004864 <xTimerGenericCommand>:
    4864:	cf 92       	push	r12
    4866:	df 92       	push	r13
    4868:	ef 92       	push	r14
    486a:	ff 92       	push	r15
    486c:	0f 93       	push	r16
    486e:	1f 93       	push	r17
    4870:	cf 93       	push	r28
    4872:	df 93       	push	r29
    4874:	cd b7       	in	r28, 0x3d	; 61
    4876:	de b7       	in	r29, 0x3e	; 62
    4878:	65 97       	sbiw	r28, 0x15	; 21
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	0f be       	out	0x3f, r0	; 63
    4882:	cd bf       	out	0x3d, r28	; 61
    4884:	9a 87       	std	Y+10, r25	; 0x0a
    4886:	89 87       	std	Y+9, r24	; 0x09
    4888:	6b 87       	std	Y+11, r22	; 0x0b
    488a:	2c 87       	std	Y+12, r18	; 0x0c
    488c:	3d 87       	std	Y+13, r19	; 0x0d
    488e:	4e 87       	std	Y+14, r20	; 0x0e
    4890:	5f 87       	std	Y+15, r21	; 0x0f
    4892:	19 8b       	std	Y+17, r17	; 0x11
    4894:	08 8b       	std	Y+16, r16	; 0x10
    4896:	ca 8a       	std	Y+18, r12	; 0x12
    4898:	db 8a       	std	Y+19, r13	; 0x13
    489a:	ec 8a       	std	Y+20, r14	; 0x14
    489c:	fd 8a       	std	Y+21, r15	; 0x15
    489e:	19 82       	std	Y+1, r1	; 0x01
    48a0:	80 91 35 11 	lds	r24, 0x1135	; 0x801135 <xTimerQueue>
    48a4:	90 91 36 11 	lds	r25, 0x1136	; 0x801136 <xTimerQueue+0x1>
    48a8:	89 2b       	or	r24, r25
    48aa:	09 f4       	brne	.+2      	; 0x48ae <xTimerGenericCommand+0x4a>
    48ac:	43 c0       	rjmp	.+134    	; 0x4934 <xTimerGenericCommand+0xd0>
    48ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    48b0:	8a 83       	std	Y+2, r24	; 0x02
    48b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    48b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    48b6:	ae 85       	ldd	r26, Y+14	; 0x0e
    48b8:	bf 85       	ldd	r27, Y+15	; 0x0f
    48ba:	8b 83       	std	Y+3, r24	; 0x03
    48bc:	9c 83       	std	Y+4, r25	; 0x04
    48be:	ad 83       	std	Y+5, r26	; 0x05
    48c0:	be 83       	std	Y+6, r27	; 0x06
    48c2:	89 85       	ldd	r24, Y+9	; 0x09
    48c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    48c6:	98 87       	std	Y+8, r25	; 0x08
    48c8:	8f 83       	std	Y+7, r24	; 0x07
    48ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    48cc:	86 30       	cpi	r24, 0x06	; 6
    48ce:	2c f5       	brge	.+74     	; 0x491a <xTimerGenericCommand+0xb6>
    48d0:	89 d8       	rcall	.-3822   	; 0x39e4 <xTaskGetSchedulerState>
    48d2:	82 30       	cpi	r24, 0x02	; 2
    48d4:	99 f4       	brne	.+38     	; 0x48fc <xTimerGenericCommand+0x98>
    48d6:	e0 91 35 11 	lds	r30, 0x1135	; 0x801135 <xTimerQueue>
    48da:	f0 91 36 11 	lds	r31, 0x1136	; 0x801136 <xTimerQueue+0x1>
    48de:	8a 89       	ldd	r24, Y+18	; 0x12
    48e0:	9b 89       	ldd	r25, Y+19	; 0x13
    48e2:	ac 89       	ldd	r26, Y+20	; 0x14
    48e4:	bd 89       	ldd	r27, Y+21	; 0x15
    48e6:	be 01       	movw	r22, r28
    48e8:	6e 5f       	subi	r22, 0xFE	; 254
    48ea:	7f 4f       	sbci	r23, 0xFF	; 255
    48ec:	00 e0       	ldi	r16, 0x00	; 0
    48ee:	9c 01       	movw	r18, r24
    48f0:	ad 01       	movw	r20, r26
    48f2:	cf 01       	movw	r24, r30
    48f4:	0e 94 cb 07 	call	0xf96	; 0xf96 <xQueueGenericSend>
    48f8:	89 83       	std	Y+1, r24	; 0x01
    48fa:	1c c0       	rjmp	.+56     	; 0x4934 <xTimerGenericCommand+0xd0>
    48fc:	80 91 35 11 	lds	r24, 0x1135	; 0x801135 <xTimerQueue>
    4900:	90 91 36 11 	lds	r25, 0x1136	; 0x801136 <xTimerQueue+0x1>
    4904:	be 01       	movw	r22, r28
    4906:	6e 5f       	subi	r22, 0xFE	; 254
    4908:	7f 4f       	sbci	r23, 0xFF	; 255
    490a:	00 e0       	ldi	r16, 0x00	; 0
    490c:	20 e0       	ldi	r18, 0x00	; 0
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	a9 01       	movw	r20, r18
    4912:	0e 94 cb 07 	call	0xf96	; 0xf96 <xQueueGenericSend>
    4916:	89 83       	std	Y+1, r24	; 0x01
    4918:	0d c0       	rjmp	.+26     	; 0x4934 <xTimerGenericCommand+0xd0>
    491a:	80 91 35 11 	lds	r24, 0x1135	; 0x801135 <xTimerQueue>
    491e:	90 91 36 11 	lds	r25, 0x1136	; 0x801136 <xTimerQueue+0x1>
    4922:	48 89       	ldd	r20, Y+16	; 0x10
    4924:	59 89       	ldd	r21, Y+17	; 0x11
    4926:	be 01       	movw	r22, r28
    4928:	6e 5f       	subi	r22, 0xFE	; 254
    492a:	7f 4f       	sbci	r23, 0xFF	; 255
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	0e 94 81 08 	call	0x1102	; 0x1102 <xQueueGenericSendFromISR>
    4932:	89 83       	std	Y+1, r24	; 0x01
    4934:	89 81       	ldd	r24, Y+1	; 0x01
    4936:	65 96       	adiw	r28, 0x15	; 21
    4938:	0f b6       	in	r0, 0x3f	; 63
    493a:	f8 94       	cli
    493c:	de bf       	out	0x3e, r29	; 62
    493e:	0f be       	out	0x3f, r0	; 63
    4940:	cd bf       	out	0x3d, r28	; 61
    4942:	df 91       	pop	r29
    4944:	cf 91       	pop	r28
    4946:	1f 91       	pop	r17
    4948:	0f 91       	pop	r16
    494a:	ff 90       	pop	r15
    494c:	ef 90       	pop	r14
    494e:	df 90       	pop	r13
    4950:	cf 90       	pop	r12
    4952:	08 95       	ret

00004954 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    4954:	cf 92       	push	r12
    4956:	df 92       	push	r13
    4958:	ef 92       	push	r14
    495a:	ff 92       	push	r15
    495c:	0f 93       	push	r16
    495e:	1f 93       	push	r17
    4960:	cf 93       	push	r28
    4962:	df 93       	push	r29
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
    4968:	2b 97       	sbiw	r28, 0x0b	; 11
    496a:	0f b6       	in	r0, 0x3f	; 63
    496c:	f8 94       	cli
    496e:	de bf       	out	0x3e, r29	; 62
    4970:	0f be       	out	0x3f, r0	; 63
    4972:	cd bf       	out	0x3d, r28	; 61
    4974:	6c 83       	std	Y+4, r22	; 0x04
    4976:	7d 83       	std	Y+5, r23	; 0x05
    4978:	8e 83       	std	Y+6, r24	; 0x06
    497a:	9f 83       	std	Y+7, r25	; 0x07
    497c:	28 87       	std	Y+8, r18	; 0x08
    497e:	39 87       	std	Y+9, r19	; 0x09
    4980:	4a 87       	std	Y+10, r20	; 0x0a
    4982:	5b 87       	std	Y+11, r21	; 0x0b
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4984:	80 91 31 11 	lds	r24, 0x1131	; 0x801131 <pxCurrentTimerList>
    4988:	90 91 32 11 	lds	r25, 0x1132	; 0x801132 <pxCurrentTimerList+0x1>
    498c:	fc 01       	movw	r30, r24
    498e:	87 81       	ldd	r24, Z+7	; 0x07
    4990:	90 85       	ldd	r25, Z+8	; 0x08
    4992:	fc 01       	movw	r30, r24
    4994:	80 85       	ldd	r24, Z+8	; 0x08
    4996:	91 85       	ldd	r25, Z+9	; 0x09
    4998:	9a 83       	std	Y+2, r25	; 0x02
    499a:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    499c:	89 81       	ldd	r24, Y+1	; 0x01
    499e:	9a 81       	ldd	r25, Y+2	; 0x02
    49a0:	02 96       	adiw	r24, 0x02	; 2
    49a2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    49a6:	89 81       	ldd	r24, Y+1	; 0x01
    49a8:	9a 81       	ldd	r25, Y+2	; 0x02
    49aa:	fc 01       	movw	r30, r24
    49ac:	86 89       	ldd	r24, Z+22	; 0x16
    49ae:	88 2f       	mov	r24, r24
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	84 70       	andi	r24, 0x04	; 4
    49b4:	99 27       	eor	r25, r25
    49b6:	89 2b       	or	r24, r25
    49b8:	a9 f1       	breq	.+106    	; 0x4a24 <prvProcessExpiredTimer+0xd0>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    49ba:	89 81       	ldd	r24, Y+1	; 0x01
    49bc:	9a 81       	ldd	r25, Y+2	; 0x02
    49be:	fc 01       	movw	r30, r24
    49c0:	26 85       	ldd	r18, Z+14	; 0x0e
    49c2:	37 85       	ldd	r19, Z+15	; 0x0f
    49c4:	40 89       	ldd	r20, Z+16	; 0x10
    49c6:	51 89       	ldd	r21, Z+17	; 0x11
    49c8:	8c 81       	ldd	r24, Y+4	; 0x04
    49ca:	9d 81       	ldd	r25, Y+5	; 0x05
    49cc:	ae 81       	ldd	r26, Y+6	; 0x06
    49ce:	bf 81       	ldd	r27, Y+7	; 0x07
    49d0:	82 0f       	add	r24, r18
    49d2:	93 1f       	adc	r25, r19
    49d4:	a4 1f       	adc	r26, r20
    49d6:	b5 1f       	adc	r27, r21
    49d8:	ec 80       	ldd	r14, Y+4	; 0x04
    49da:	fd 80       	ldd	r15, Y+5	; 0x05
    49dc:	0e 81       	ldd	r16, Y+6	; 0x06
    49de:	1f 81       	ldd	r17, Y+7	; 0x07
    49e0:	28 85       	ldd	r18, Y+8	; 0x08
    49e2:	39 85       	ldd	r19, Y+9	; 0x09
    49e4:	4a 85       	ldd	r20, Y+10	; 0x0a
    49e6:	5b 85       	ldd	r21, Y+11	; 0x0b
    49e8:	e9 81       	ldd	r30, Y+1	; 0x01
    49ea:	fa 81       	ldd	r31, Y+2	; 0x02
    49ec:	67 01       	movw	r12, r14
    49ee:	78 01       	movw	r14, r16
    49f0:	89 01       	movw	r16, r18
    49f2:	9a 01       	movw	r18, r20
    49f4:	ac 01       	movw	r20, r24
    49f6:	bd 01       	movw	r22, r26
    49f8:	cf 01       	movw	r24, r30
    49fa:	3e d1       	rcall	.+636    	; 0x4c78 <prvInsertTimerInActiveList>
    49fc:	88 23       	and	r24, r24
    49fe:	e1 f0       	breq	.+56     	; 0x4a38 <prvProcessExpiredTimer+0xe4>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4a00:	8c 81       	ldd	r24, Y+4	; 0x04
    4a02:	9d 81       	ldd	r25, Y+5	; 0x05
    4a04:	ae 81       	ldd	r26, Y+6	; 0x06
    4a06:	bf 81       	ldd	r27, Y+7	; 0x07
    4a08:	e9 81       	ldd	r30, Y+1	; 0x01
    4a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a0c:	c1 2c       	mov	r12, r1
    4a0e:	d1 2c       	mov	r13, r1
    4a10:	76 01       	movw	r14, r12
    4a12:	00 e0       	ldi	r16, 0x00	; 0
    4a14:	10 e0       	ldi	r17, 0x00	; 0
    4a16:	9c 01       	movw	r18, r24
    4a18:	ad 01       	movw	r20, r26
    4a1a:	60 e0       	ldi	r22, 0x00	; 0
    4a1c:	cf 01       	movw	r24, r30
    4a1e:	22 df       	rcall	.-444    	; 0x4864 <xTimerGenericCommand>
    4a20:	8b 83       	std	Y+3, r24	; 0x03
    4a22:	0a c0       	rjmp	.+20     	; 0x4a38 <prvProcessExpiredTimer+0xe4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4a24:	89 81       	ldd	r24, Y+1	; 0x01
    4a26:	9a 81       	ldd	r25, Y+2	; 0x02
    4a28:	fc 01       	movw	r30, r24
    4a2a:	86 89       	ldd	r24, Z+22	; 0x16
    4a2c:	28 2f       	mov	r18, r24
    4a2e:	2e 7f       	andi	r18, 0xFE	; 254
    4a30:	89 81       	ldd	r24, Y+1	; 0x01
    4a32:	9a 81       	ldd	r25, Y+2	; 0x02
    4a34:	fc 01       	movw	r30, r24
    4a36:	26 8b       	std	Z+22, r18	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
    4a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3c:	fc 01       	movw	r30, r24
    4a3e:	24 89       	ldd	r18, Z+20	; 0x14
    4a40:	35 89       	ldd	r19, Z+21	; 0x15
    4a42:	89 81       	ldd	r24, Y+1	; 0x01
    4a44:	9a 81       	ldd	r25, Y+2	; 0x02
    4a46:	f9 01       	movw	r30, r18
    4a48:	19 95       	eicall
    }
    4a4a:	00 00       	nop
    4a4c:	2b 96       	adiw	r28, 0x0b	; 11
    4a4e:	0f b6       	in	r0, 0x3f	; 63
    4a50:	f8 94       	cli
    4a52:	de bf       	out	0x3e, r29	; 62
    4a54:	0f be       	out	0x3f, r0	; 63
    4a56:	cd bf       	out	0x3d, r28	; 61
    4a58:	df 91       	pop	r29
    4a5a:	cf 91       	pop	r28
    4a5c:	1f 91       	pop	r17
    4a5e:	0f 91       	pop	r16
    4a60:	ff 90       	pop	r15
    4a62:	ef 90       	pop	r14
    4a64:	df 90       	pop	r13
    4a66:	cf 90       	pop	r12
    4a68:	08 95       	ret

00004a6a <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    4a6a:	ef 92       	push	r14
    4a6c:	ff 92       	push	r15
    4a6e:	0f 93       	push	r16
    4a70:	1f 93       	push	r17
    4a72:	cf 93       	push	r28
    4a74:	df 93       	push	r29
    4a76:	cd b7       	in	r28, 0x3d	; 61
    4a78:	de b7       	in	r29, 0x3e	; 62
    4a7a:	2a 97       	sbiw	r28, 0x0a	; 10
    4a7c:	0f b6       	in	r0, 0x3f	; 63
    4a7e:	f8 94       	cli
    4a80:	de bf       	out	0x3e, r29	; 62
    4a82:	0f be       	out	0x3f, r0	; 63
    4a84:	cd bf       	out	0x3d, r28	; 61
    4a86:	6e 83       	std	Y+6, r22	; 0x06
    4a88:	7f 83       	std	Y+7, r23	; 0x07
    4a8a:	88 87       	std	Y+8, r24	; 0x08
    4a8c:	99 87       	std	Y+9, r25	; 0x09
    4a8e:	4a 87       	std	Y+10, r20	; 0x0a
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    4a90:	0e 94 c5 14 	call	0x298a	; 0x298a <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4a94:	ce 01       	movw	r24, r28
    4a96:	05 96       	adiw	r24, 0x05	; 5
    4a98:	a8 d0       	rcall	.+336    	; 0x4bea <prvSampleTimeNow>
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	cb 01       	movw	r24, r22
    4a9e:	89 83       	std	Y+1, r24	; 0x01
    4aa0:	9a 83       	std	Y+2, r25	; 0x02
    4aa2:	ab 83       	std	Y+3, r26	; 0x03
    4aa4:	bc 83       	std	Y+4, r27	; 0x04

            if( xTimerListsWereSwitched == pdFALSE )
    4aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa8:	88 23       	and	r24, r24
    4aaa:	09 f0       	breq	.+2      	; 0x4aae <prvProcessTimerOrBlockTask+0x44>
    4aac:	4d c0       	rjmp	.+154    	; 0x4b48 <prvProcessTimerOrBlockTask+0xde>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    4aae:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ab0:	88 23       	and	r24, r24
    4ab2:	d9 f4       	brne	.+54     	; 0x4aea <prvProcessTimerOrBlockTask+0x80>
    4ab4:	2e 81       	ldd	r18, Y+6	; 0x06
    4ab6:	3f 81       	ldd	r19, Y+7	; 0x07
    4ab8:	48 85       	ldd	r20, Y+8	; 0x08
    4aba:	59 85       	ldd	r21, Y+9	; 0x09
    4abc:	89 81       	ldd	r24, Y+1	; 0x01
    4abe:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac0:	ab 81       	ldd	r26, Y+3	; 0x03
    4ac2:	bc 81       	ldd	r27, Y+4	; 0x04
    4ac4:	82 17       	cp	r24, r18
    4ac6:	93 07       	cpc	r25, r19
    4ac8:	a4 07       	cpc	r26, r20
    4aca:	b5 07       	cpc	r27, r21
    4acc:	70 f0       	brcs	.+28     	; 0x4aea <prvProcessTimerOrBlockTask+0x80>
                {
                    ( void ) xTaskResumeAll();
    4ace:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    4ad2:	29 81       	ldd	r18, Y+1	; 0x01
    4ad4:	3a 81       	ldd	r19, Y+2	; 0x02
    4ad6:	4b 81       	ldd	r20, Y+3	; 0x03
    4ad8:	5c 81       	ldd	r21, Y+4	; 0x04
    4ada:	8e 81       	ldd	r24, Y+6	; 0x06
    4adc:	9f 81       	ldd	r25, Y+7	; 0x07
    4ade:	a8 85       	ldd	r26, Y+8	; 0x08
    4ae0:	b9 85       	ldd	r27, Y+9	; 0x09
    4ae2:	bc 01       	movw	r22, r24
    4ae4:	cd 01       	movw	r24, r26
    4ae6:	36 df       	rcall	.-404    	; 0x4954 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    4ae8:	31 c0       	rjmp	.+98     	; 0x4b4c <prvProcessTimerOrBlockTask+0xe2>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    4aea:	8a 85       	ldd	r24, Y+10	; 0x0a
    4aec:	88 23       	and	r24, r24
    4aee:	59 f0       	breq	.+22     	; 0x4b06 <prvProcessTimerOrBlockTask+0x9c>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    4af0:	80 91 33 11 	lds	r24, 0x1133	; 0x801133 <pxOverflowTimerList>
    4af4:	90 91 34 11 	lds	r25, 0x1134	; 0x801134 <pxOverflowTimerList+0x1>
    4af8:	fc 01       	movw	r30, r24
    4afa:	90 81       	ld	r25, Z
    4afc:	81 e0       	ldi	r24, 0x01	; 1
    4afe:	99 23       	and	r25, r25
    4b00:	09 f0       	breq	.+2      	; 0x4b04 <prvProcessTimerOrBlockTask+0x9a>
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	8a 87       	std	Y+10, r24	; 0x0a
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    4b06:	2e 81       	ldd	r18, Y+6	; 0x06
    4b08:	3f 81       	ldd	r19, Y+7	; 0x07
    4b0a:	48 85       	ldd	r20, Y+8	; 0x08
    4b0c:	59 85       	ldd	r21, Y+9	; 0x09
    4b0e:	89 81       	ldd	r24, Y+1	; 0x01
    4b10:	9a 81       	ldd	r25, Y+2	; 0x02
    4b12:	ab 81       	ldd	r26, Y+3	; 0x03
    4b14:	bc 81       	ldd	r27, Y+4	; 0x04
    4b16:	79 01       	movw	r14, r18
    4b18:	8a 01       	movw	r16, r20
    4b1a:	e8 1a       	sub	r14, r24
    4b1c:	f9 0a       	sbc	r15, r25
    4b1e:	0a 0b       	sbc	r16, r26
    4b20:	1b 0b       	sbc	r17, r27
    4b22:	d8 01       	movw	r26, r16
    4b24:	c7 01       	movw	r24, r14
    4b26:	e0 91 35 11 	lds	r30, 0x1135	; 0x801135 <xTimerQueue>
    4b2a:	f0 91 36 11 	lds	r31, 0x1136	; 0x801136 <xTimerQueue+0x1>
    4b2e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4b30:	ac 01       	movw	r20, r24
    4b32:	bd 01       	movw	r22, r26
    4b34:	cf 01       	movw	r24, r30
    4b36:	0e 94 55 0b 	call	0x16aa	; 0x16aa <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    4b3a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    4b3e:	88 23       	and	r24, r24
    4b40:	29 f4       	brne	.+10     	; 0x4b4c <prvProcessTimerOrBlockTask+0xe2>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    4b42:	0e 94 7d 05 	call	0xafa	; 0xafa <vPortYield>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    4b46:	02 c0       	rjmp	.+4      	; 0x4b4c <prvProcessTimerOrBlockTask+0xe2>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    4b48:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
            }
        }
    }
    4b4c:	00 00       	nop
    4b4e:	2a 96       	adiw	r28, 0x0a	; 10
    4b50:	0f b6       	in	r0, 0x3f	; 63
    4b52:	f8 94       	cli
    4b54:	de bf       	out	0x3e, r29	; 62
    4b56:	0f be       	out	0x3f, r0	; 63
    4b58:	cd bf       	out	0x3d, r28	; 61
    4b5a:	df 91       	pop	r29
    4b5c:	cf 91       	pop	r28
    4b5e:	1f 91       	pop	r17
    4b60:	0f 91       	pop	r16
    4b62:	ff 90       	pop	r15
    4b64:	ef 90       	pop	r14
    4b66:	08 95       	ret

00004b68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    4b68:	cf 93       	push	r28
    4b6a:	df 93       	push	r29
    4b6c:	00 d0       	rcall	.+0      	; 0x4b6e <prvGetNextExpireTime+0x6>
    4b6e:	00 d0       	rcall	.+0      	; 0x4b70 <prvGetNextExpireTime+0x8>
    4b70:	cd b7       	in	r28, 0x3d	; 61
    4b72:	de b7       	in	r29, 0x3e	; 62
    4b74:	9e 83       	std	Y+6, r25	; 0x06
    4b76:	8d 83       	std	Y+5, r24	; 0x05
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    4b78:	80 91 31 11 	lds	r24, 0x1131	; 0x801131 <pxCurrentTimerList>
    4b7c:	90 91 32 11 	lds	r25, 0x1132	; 0x801132 <pxCurrentTimerList+0x1>
    4b80:	fc 01       	movw	r30, r24
    4b82:	90 81       	ld	r25, Z
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	99 23       	and	r25, r25
    4b88:	09 f0       	breq	.+2      	; 0x4b8c <prvGetNextExpireTime+0x24>
    4b8a:	80 e0       	ldi	r24, 0x00	; 0
    4b8c:	28 2f       	mov	r18, r24
    4b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b90:	9e 81       	ldd	r25, Y+6	; 0x06
    4b92:	fc 01       	movw	r30, r24
    4b94:	20 83       	st	Z, r18

        if( *pxListWasEmpty == pdFALSE )
    4b96:	8d 81       	ldd	r24, Y+5	; 0x05
    4b98:	9e 81       	ldd	r25, Y+6	; 0x06
    4b9a:	fc 01       	movw	r30, r24
    4b9c:	80 81       	ld	r24, Z
    4b9e:	88 23       	and	r24, r24
    4ba0:	89 f4       	brne	.+34     	; 0x4bc4 <prvGetNextExpireTime+0x5c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    4ba2:	80 91 31 11 	lds	r24, 0x1131	; 0x801131 <pxCurrentTimerList>
    4ba6:	90 91 32 11 	lds	r25, 0x1132	; 0x801132 <pxCurrentTimerList+0x1>
    4baa:	fc 01       	movw	r30, r24
    4bac:	87 81       	ldd	r24, Z+7	; 0x07
    4bae:	90 85       	ldd	r25, Z+8	; 0x08
    4bb0:	fc 01       	movw	r30, r24
    4bb2:	80 81       	ld	r24, Z
    4bb4:	91 81       	ldd	r25, Z+1	; 0x01
    4bb6:	a2 81       	ldd	r26, Z+2	; 0x02
    4bb8:	b3 81       	ldd	r27, Z+3	; 0x03
    4bba:	89 83       	std	Y+1, r24	; 0x01
    4bbc:	9a 83       	std	Y+2, r25	; 0x02
    4bbe:	ab 83       	std	Y+3, r26	; 0x03
    4bc0:	bc 83       	std	Y+4, r27	; 0x04
    4bc2:	04 c0       	rjmp	.+8      	; 0x4bcc <prvGetNextExpireTime+0x64>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    4bc4:	19 82       	std	Y+1, r1	; 0x01
    4bc6:	1a 82       	std	Y+2, r1	; 0x02
    4bc8:	1b 82       	std	Y+3, r1	; 0x03
    4bca:	1c 82       	std	Y+4, r1	; 0x04
        }

        return xNextExpireTime;
    4bcc:	89 81       	ldd	r24, Y+1	; 0x01
    4bce:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd0:	ab 81       	ldd	r26, Y+3	; 0x03
    4bd2:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    4bd4:	bc 01       	movw	r22, r24
    4bd6:	cd 01       	movw	r24, r26
    4bd8:	26 96       	adiw	r28, 0x06	; 6
    4bda:	0f b6       	in	r0, 0x3f	; 63
    4bdc:	f8 94       	cli
    4bde:	de bf       	out	0x3e, r29	; 62
    4be0:	0f be       	out	0x3f, r0	; 63
    4be2:	cd bf       	out	0x3d, r28	; 61
    4be4:	df 91       	pop	r29
    4be6:	cf 91       	pop	r28
    4be8:	08 95       	ret

00004bea <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    4bea:	cf 93       	push	r28
    4bec:	df 93       	push	r29
    4bee:	00 d0       	rcall	.+0      	; 0x4bf0 <prvSampleTimeNow+0x6>
    4bf0:	00 d0       	rcall	.+0      	; 0x4bf2 <prvSampleTimeNow+0x8>
    4bf2:	cd b7       	in	r28, 0x3d	; 61
    4bf4:	de b7       	in	r29, 0x3e	; 62
    4bf6:	9e 83       	std	Y+6, r25	; 0x06
    4bf8:	8d 83       	std	Y+5, r24	; 0x05
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    4bfa:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <xTaskGetTickCount>
    4bfe:	dc 01       	movw	r26, r24
    4c00:	cb 01       	movw	r24, r22
    4c02:	89 83       	std	Y+1, r24	; 0x01
    4c04:	9a 83       	std	Y+2, r25	; 0x02
    4c06:	ab 83       	std	Y+3, r26	; 0x03
    4c08:	bc 83       	std	Y+4, r27	; 0x04

        if( xTimeNow < xLastTime )
    4c0a:	80 91 39 11 	lds	r24, 0x1139	; 0x801139 <xLastTime.2436>
    4c0e:	90 91 3a 11 	lds	r25, 0x113A	; 0x80113a <xLastTime.2436+0x1>
    4c12:	a0 91 3b 11 	lds	r26, 0x113B	; 0x80113b <xLastTime.2436+0x2>
    4c16:	b0 91 3c 11 	lds	r27, 0x113C	; 0x80113c <xLastTime.2436+0x3>
    4c1a:	29 81       	ldd	r18, Y+1	; 0x01
    4c1c:	3a 81       	ldd	r19, Y+2	; 0x02
    4c1e:	4b 81       	ldd	r20, Y+3	; 0x03
    4c20:	5c 81       	ldd	r21, Y+4	; 0x04
    4c22:	28 17       	cp	r18, r24
    4c24:	39 07       	cpc	r19, r25
    4c26:	4a 07       	cpc	r20, r26
    4c28:	5b 07       	cpc	r21, r27
    4c2a:	38 f4       	brcc	.+14     	; 0x4c3a <prvSampleTimeNow+0x50>
        {
            prvSwitchTimerLists();
    4c2c:	e6 d1       	rcall	.+972    	; 0x4ffa <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    4c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c30:	9e 81       	ldd	r25, Y+6	; 0x06
    4c32:	21 e0       	ldi	r18, 0x01	; 1
    4c34:	fc 01       	movw	r30, r24
    4c36:	20 83       	st	Z, r18
    4c38:	04 c0       	rjmp	.+8      	; 0x4c42 <prvSampleTimeNow+0x58>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    4c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c3e:	fc 01       	movw	r30, r24
    4c40:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    4c42:	89 81       	ldd	r24, Y+1	; 0x01
    4c44:	9a 81       	ldd	r25, Y+2	; 0x02
    4c46:	ab 81       	ldd	r26, Y+3	; 0x03
    4c48:	bc 81       	ldd	r27, Y+4	; 0x04
    4c4a:	80 93 39 11 	sts	0x1139, r24	; 0x801139 <xLastTime.2436>
    4c4e:	90 93 3a 11 	sts	0x113A, r25	; 0x80113a <xLastTime.2436+0x1>
    4c52:	a0 93 3b 11 	sts	0x113B, r26	; 0x80113b <xLastTime.2436+0x2>
    4c56:	b0 93 3c 11 	sts	0x113C, r27	; 0x80113c <xLastTime.2436+0x3>

        return xTimeNow;
    4c5a:	89 81       	ldd	r24, Y+1	; 0x01
    4c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c5e:	ab 81       	ldd	r26, Y+3	; 0x03
    4c60:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    4c62:	bc 01       	movw	r22, r24
    4c64:	cd 01       	movw	r24, r26
    4c66:	26 96       	adiw	r28, 0x06	; 6
    4c68:	0f b6       	in	r0, 0x3f	; 63
    4c6a:	f8 94       	cli
    4c6c:	de bf       	out	0x3e, r29	; 62
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	cd bf       	out	0x3d, r28	; 61
    4c72:	df 91       	pop	r29
    4c74:	cf 91       	pop	r28
    4c76:	08 95       	ret

00004c78 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    4c78:	cf 92       	push	r12
    4c7a:	df 92       	push	r13
    4c7c:	ef 92       	push	r14
    4c7e:	ff 92       	push	r15
    4c80:	0f 93       	push	r16
    4c82:	1f 93       	push	r17
    4c84:	cf 93       	push	r28
    4c86:	df 93       	push	r29
    4c88:	cd b7       	in	r28, 0x3d	; 61
    4c8a:	de b7       	in	r29, 0x3e	; 62
    4c8c:	2f 97       	sbiw	r28, 0x0f	; 15
    4c8e:	0f b6       	in	r0, 0x3f	; 63
    4c90:	f8 94       	cli
    4c92:	de bf       	out	0x3e, r29	; 62
    4c94:	0f be       	out	0x3f, r0	; 63
    4c96:	cd bf       	out	0x3d, r28	; 61
    4c98:	9b 83       	std	Y+3, r25	; 0x03
    4c9a:	8a 83       	std	Y+2, r24	; 0x02
    4c9c:	4c 83       	std	Y+4, r20	; 0x04
    4c9e:	5d 83       	std	Y+5, r21	; 0x05
    4ca0:	6e 83       	std	Y+6, r22	; 0x06
    4ca2:	7f 83       	std	Y+7, r23	; 0x07
    4ca4:	08 87       	std	Y+8, r16	; 0x08
    4ca6:	19 87       	std	Y+9, r17	; 0x09
    4ca8:	2a 87       	std	Y+10, r18	; 0x0a
    4caa:	3b 87       	std	Y+11, r19	; 0x0b
    4cac:	cc 86       	std	Y+12, r12	; 0x0c
    4cae:	dd 86       	std	Y+13, r13	; 0x0d
    4cb0:	ee 86       	std	Y+14, r14	; 0x0e
    4cb2:	ff 86       	std	Y+15, r15	; 0x0f
        BaseType_t xProcessTimerNow = pdFALSE;
    4cb4:	19 82       	std	Y+1, r1	; 0x01

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    4cb6:	2a 81       	ldd	r18, Y+2	; 0x02
    4cb8:	3b 81       	ldd	r19, Y+3	; 0x03
    4cba:	8c 81       	ldd	r24, Y+4	; 0x04
    4cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    4cbe:	ae 81       	ldd	r26, Y+6	; 0x06
    4cc0:	bf 81       	ldd	r27, Y+7	; 0x07
    4cc2:	f9 01       	movw	r30, r18
    4cc4:	82 83       	std	Z+2, r24	; 0x02
    4cc6:	93 83       	std	Z+3, r25	; 0x03
    4cc8:	a4 83       	std	Z+4, r26	; 0x04
    4cca:	b5 83       	std	Z+5, r27	; 0x05
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    4cce:	9b 81       	ldd	r25, Y+3	; 0x03
    4cd0:	2a 81       	ldd	r18, Y+2	; 0x02
    4cd2:	3b 81       	ldd	r19, Y+3	; 0x03
    4cd4:	fc 01       	movw	r30, r24
    4cd6:	33 87       	std	Z+11, r19	; 0x0b
    4cd8:	22 87       	std	Z+10, r18	; 0x0a

        if( xNextExpiryTime <= xTimeNow )
    4cda:	2c 81       	ldd	r18, Y+4	; 0x04
    4cdc:	3d 81       	ldd	r19, Y+5	; 0x05
    4cde:	4e 81       	ldd	r20, Y+6	; 0x06
    4ce0:	5f 81       	ldd	r21, Y+7	; 0x07
    4ce2:	88 85       	ldd	r24, Y+8	; 0x08
    4ce4:	99 85       	ldd	r25, Y+9	; 0x09
    4ce6:	aa 85       	ldd	r26, Y+10	; 0x0a
    4ce8:	bb 85       	ldd	r27, Y+11	; 0x0b
    4cea:	82 17       	cp	r24, r18
    4cec:	93 07       	cpc	r25, r19
    4cee:	a4 07       	cpc	r26, r20
    4cf0:	b5 07       	cpc	r27, r21
    4cf2:	40 f1       	brcs	.+80     	; 0x4d44 <prvInsertTimerInActiveList+0xcc>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4cf4:	28 85       	ldd	r18, Y+8	; 0x08
    4cf6:	39 85       	ldd	r19, Y+9	; 0x09
    4cf8:	4a 85       	ldd	r20, Y+10	; 0x0a
    4cfa:	5b 85       	ldd	r21, Y+11	; 0x0b
    4cfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    4cfe:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d00:	ae 85       	ldd	r26, Y+14	; 0x0e
    4d02:	bf 85       	ldd	r27, Y+15	; 0x0f
    4d04:	28 1b       	sub	r18, r24
    4d06:	39 0b       	sbc	r19, r25
    4d08:	4a 0b       	sbc	r20, r26
    4d0a:	5b 0b       	sbc	r21, r27
    4d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d10:	fc 01       	movw	r30, r24
    4d12:	86 85       	ldd	r24, Z+14	; 0x0e
    4d14:	97 85       	ldd	r25, Z+15	; 0x0f
    4d16:	a0 89       	ldd	r26, Z+16	; 0x10
    4d18:	b1 89       	ldd	r27, Z+17	; 0x11
    4d1a:	28 17       	cp	r18, r24
    4d1c:	39 07       	cpc	r19, r25
    4d1e:	4a 07       	cpc	r20, r26
    4d20:	5b 07       	cpc	r21, r27
    4d22:	18 f0       	brcs	.+6      	; 0x4d2a <prvInsertTimerInActiveList+0xb2>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	89 83       	std	Y+1, r24	; 0x01
    4d28:	36 c0       	rjmp	.+108    	; 0x4d96 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    4d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d2e:	9c 01       	movw	r18, r24
    4d30:	2e 5f       	subi	r18, 0xFE	; 254
    4d32:	3f 4f       	sbci	r19, 0xFF	; 255
    4d34:	80 91 33 11 	lds	r24, 0x1133	; 0x801133 <pxOverflowTimerList>
    4d38:	90 91 34 11 	lds	r25, 0x1134	; 0x801134 <pxOverflowTimerList+0x1>
    4d3c:	b9 01       	movw	r22, r18
    4d3e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vListInsert>
    4d42:	29 c0       	rjmp	.+82     	; 0x4d96 <prvInsertTimerInActiveList+0x11e>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    4d44:	28 85       	ldd	r18, Y+8	; 0x08
    4d46:	39 85       	ldd	r19, Y+9	; 0x09
    4d48:	4a 85       	ldd	r20, Y+10	; 0x0a
    4d4a:	5b 85       	ldd	r21, Y+11	; 0x0b
    4d4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d50:	ae 85       	ldd	r26, Y+14	; 0x0e
    4d52:	bf 85       	ldd	r27, Y+15	; 0x0f
    4d54:	28 17       	cp	r18, r24
    4d56:	39 07       	cpc	r19, r25
    4d58:	4a 07       	cpc	r20, r26
    4d5a:	5b 07       	cpc	r21, r27
    4d5c:	80 f4       	brcc	.+32     	; 0x4d7e <prvInsertTimerInActiveList+0x106>
    4d5e:	2c 81       	ldd	r18, Y+4	; 0x04
    4d60:	3d 81       	ldd	r19, Y+5	; 0x05
    4d62:	4e 81       	ldd	r20, Y+6	; 0x06
    4d64:	5f 81       	ldd	r21, Y+7	; 0x07
    4d66:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d68:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d6a:	ae 85       	ldd	r26, Y+14	; 0x0e
    4d6c:	bf 85       	ldd	r27, Y+15	; 0x0f
    4d6e:	28 17       	cp	r18, r24
    4d70:	39 07       	cpc	r19, r25
    4d72:	4a 07       	cpc	r20, r26
    4d74:	5b 07       	cpc	r21, r27
    4d76:	18 f0       	brcs	.+6      	; 0x4d7e <prvInsertTimerInActiveList+0x106>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	89 83       	std	Y+1, r24	; 0x01
    4d7c:	0c c0       	rjmp	.+24     	; 0x4d96 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d80:	9b 81       	ldd	r25, Y+3	; 0x03
    4d82:	9c 01       	movw	r18, r24
    4d84:	2e 5f       	subi	r18, 0xFE	; 254
    4d86:	3f 4f       	sbci	r19, 0xFF	; 255
    4d88:	80 91 31 11 	lds	r24, 0x1131	; 0x801131 <pxCurrentTimerList>
    4d8c:	90 91 32 11 	lds	r25, 0x1132	; 0x801132 <pxCurrentTimerList+0x1>
    4d90:	b9 01       	movw	r22, r18
    4d92:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
    4d96:	89 81       	ldd	r24, Y+1	; 0x01
    }
    4d98:	2f 96       	adiw	r28, 0x0f	; 15
    4d9a:	0f b6       	in	r0, 0x3f	; 63
    4d9c:	f8 94       	cli
    4d9e:	de bf       	out	0x3e, r29	; 62
    4da0:	0f be       	out	0x3f, r0	; 63
    4da2:	cd bf       	out	0x3d, r28	; 61
    4da4:	df 91       	pop	r29
    4da6:	cf 91       	pop	r28
    4da8:	1f 91       	pop	r17
    4daa:	0f 91       	pop	r16
    4dac:	ff 90       	pop	r15
    4dae:	ef 90       	pop	r14
    4db0:	df 90       	pop	r13
    4db2:	cf 90       	pop	r12
    4db4:	08 95       	ret

00004db6 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    4db6:	cf 92       	push	r12
    4db8:	df 92       	push	r13
    4dba:	ef 92       	push	r14
    4dbc:	ff 92       	push	r15
    4dbe:	0f 93       	push	r16
    4dc0:	1f 93       	push	r17
    4dc2:	cf 93       	push	r28
    4dc4:	df 93       	push	r29
    4dc6:	cd b7       	in	r28, 0x3d	; 61
    4dc8:	de b7       	in	r29, 0x3e	; 62
    4dca:	2f 97       	sbiw	r28, 0x0f	; 15
    4dcc:	0f b6       	in	r0, 0x3f	; 63
    4dce:	f8 94       	cli
    4dd0:	de bf       	out	0x3e, r29	; 62
    4dd2:	0f be       	out	0x3f, r0	; 63
    4dd4:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4dd6:	f2 c0       	rjmp	.+484    	; 0x4fbc <prvProcessReceivedCommands+0x206>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    4dd8:	88 85       	ldd	r24, Y+8	; 0x08
    4dda:	88 23       	and	r24, r24
    4ddc:	0c f4       	brge	.+2      	; 0x4de0 <prvProcessReceivedCommands+0x2a>
    4dde:	ee c0       	rjmp	.+476    	; 0x4fbc <prvProcessReceivedCommands+0x206>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4de4:	9a 83       	std	Y+2, r25	; 0x02
    4de6:	89 83       	std	Y+1, r24	; 0x01

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    4de8:	89 81       	ldd	r24, Y+1	; 0x01
    4dea:	9a 81       	ldd	r25, Y+2	; 0x02
    4dec:	fc 01       	movw	r30, r24
    4dee:	84 85       	ldd	r24, Z+12	; 0x0c
    4df0:	95 85       	ldd	r25, Z+13	; 0x0d
    4df2:	89 2b       	or	r24, r25
    4df4:	29 f0       	breq	.+10     	; 0x4e00 <prvProcessReceivedCommands+0x4a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4df6:	89 81       	ldd	r24, Y+1	; 0x01
    4df8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfa:	02 96       	adiw	r24, 0x02	; 2
    4dfc:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4e00:	ce 01       	movw	r24, r28
    4e02:	0f 96       	adiw	r24, 0x0f	; 15
    4e04:	f2 de       	rcall	.-540    	; 0x4bea <prvSampleTimeNow>
    4e06:	dc 01       	movw	r26, r24
    4e08:	cb 01       	movw	r24, r22
    4e0a:	8b 83       	std	Y+3, r24	; 0x03
    4e0c:	9c 83       	std	Y+4, r25	; 0x04
    4e0e:	ad 83       	std	Y+5, r26	; 0x05
    4e10:	be 83       	std	Y+6, r27	; 0x06

                switch( xMessage.xMessageID )
    4e12:	88 85       	ldd	r24, Y+8	; 0x08
    4e14:	08 2e       	mov	r0, r24
    4e16:	00 0c       	add	r0, r0
    4e18:	99 0b       	sbc	r25, r25
    4e1a:	09 2e       	mov	r0, r25
    4e1c:	00 0c       	add	r0, r0
    4e1e:	aa 0b       	sbc	r26, r26
    4e20:	bb 0b       	sbc	r27, r27
    4e22:	40 e0       	ldi	r20, 0x00	; 0
    4e24:	50 e0       	ldi	r21, 0x00	; 0
    4e26:	29 e0       	ldi	r18, 0x09	; 9
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	84 1b       	sub	r24, r20
    4e2c:	95 0b       	sbc	r25, r21
    4e2e:	28 17       	cp	r18, r24
    4e30:	39 07       	cpc	r19, r25
    4e32:	08 f4       	brcc	.+2      	; 0x4e36 <prvProcessReceivedCommands+0x80>
    4e34:	c2 c0       	rjmp	.+388    	; 0x4fba <prvProcessReceivedCommands+0x204>
    4e36:	fc 01       	movw	r30, r24
    4e38:	88 27       	eor	r24, r24
    4e3a:	ee 58       	subi	r30, 0x8E	; 142
    4e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e40:	0c 94 f7 38 	jmp	0x71ee	; 0x71ee <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4e44:	89 81       	ldd	r24, Y+1	; 0x01
    4e46:	9a 81       	ldd	r25, Y+2	; 0x02
    4e48:	fc 01       	movw	r30, r24
    4e4a:	86 89       	ldd	r24, Z+22	; 0x16
    4e4c:	28 2f       	mov	r18, r24
    4e4e:	21 60       	ori	r18, 0x01	; 1
    4e50:	89 81       	ldd	r24, Y+1	; 0x01
    4e52:	9a 81       	ldd	r25, Y+2	; 0x02
    4e54:	fc 01       	movw	r30, r24
    4e56:	26 8b       	std	Z+22, r18	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    4e58:	e9 84       	ldd	r14, Y+9	; 0x09
    4e5a:	fa 84       	ldd	r15, Y+10	; 0x0a
    4e5c:	0b 85       	ldd	r16, Y+11	; 0x0b
    4e5e:	1c 85       	ldd	r17, Y+12	; 0x0c
    4e60:	29 85       	ldd	r18, Y+9	; 0x09
    4e62:	3a 85       	ldd	r19, Y+10	; 0x0a
    4e64:	4b 85       	ldd	r20, Y+11	; 0x0b
    4e66:	5c 85       	ldd	r21, Y+12	; 0x0c
    4e68:	89 81       	ldd	r24, Y+1	; 0x01
    4e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e6c:	fc 01       	movw	r30, r24
    4e6e:	86 85       	ldd	r24, Z+14	; 0x0e
    4e70:	97 85       	ldd	r25, Z+15	; 0x0f
    4e72:	a0 89       	ldd	r26, Z+16	; 0x10
    4e74:	b1 89       	ldd	r27, Z+17	; 0x11
    4e76:	82 0f       	add	r24, r18
    4e78:	93 1f       	adc	r25, r19
    4e7a:	a4 1f       	adc	r26, r20
    4e7c:	b5 1f       	adc	r27, r21
    4e7e:	2b 81       	ldd	r18, Y+3	; 0x03
    4e80:	3c 81       	ldd	r19, Y+4	; 0x04
    4e82:	4d 81       	ldd	r20, Y+5	; 0x05
    4e84:	5e 81       	ldd	r21, Y+6	; 0x06
    4e86:	e9 81       	ldd	r30, Y+1	; 0x01
    4e88:	fa 81       	ldd	r31, Y+2	; 0x02
    4e8a:	67 01       	movw	r12, r14
    4e8c:	78 01       	movw	r14, r16
    4e8e:	89 01       	movw	r16, r18
    4e90:	9a 01       	movw	r18, r20
    4e92:	ac 01       	movw	r20, r24
    4e94:	bd 01       	movw	r22, r26
    4e96:	cf 01       	movw	r24, r30
    4e98:	ef de       	rcall	.-546    	; 0x4c78 <prvInsertTimerInActiveList>
    4e9a:	88 23       	and	r24, r24
    4e9c:	09 f4       	brne	.+2      	; 0x4ea0 <prvProcessReceivedCommands+0xea>
    4e9e:	8e c0       	rjmp	.+284    	; 0x4fbc <prvProcessReceivedCommands+0x206>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    4ea0:	89 81       	ldd	r24, Y+1	; 0x01
    4ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ea4:	fc 01       	movw	r30, r24
    4ea6:	24 89       	ldd	r18, Z+20	; 0x14
    4ea8:	35 89       	ldd	r19, Z+21	; 0x15
    4eaa:	89 81       	ldd	r24, Y+1	; 0x01
    4eac:	9a 81       	ldd	r25, Y+2	; 0x02
    4eae:	f9 01       	movw	r30, r18
    4eb0:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    4eb2:	89 81       	ldd	r24, Y+1	; 0x01
    4eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb6:	fc 01       	movw	r30, r24
    4eb8:	86 89       	ldd	r24, Z+22	; 0x16
    4eba:	88 2f       	mov	r24, r24
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	84 70       	andi	r24, 0x04	; 4
    4ec0:	99 27       	eor	r25, r25
    4ec2:	89 2b       	or	r24, r25
    4ec4:	09 f4       	brne	.+2      	; 0x4ec8 <prvProcessReceivedCommands+0x112>
    4ec6:	7a c0       	rjmp	.+244    	; 0x4fbc <prvProcessReceivedCommands+0x206>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    4ec8:	29 85       	ldd	r18, Y+9	; 0x09
    4eca:	3a 85       	ldd	r19, Y+10	; 0x0a
    4ecc:	4b 85       	ldd	r20, Y+11	; 0x0b
    4ece:	5c 85       	ldd	r21, Y+12	; 0x0c
    4ed0:	89 81       	ldd	r24, Y+1	; 0x01
    4ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed4:	fc 01       	movw	r30, r24
    4ed6:	86 85       	ldd	r24, Z+14	; 0x0e
    4ed8:	97 85       	ldd	r25, Z+15	; 0x0f
    4eda:	a0 89       	ldd	r26, Z+16	; 0x10
    4edc:	b1 89       	ldd	r27, Z+17	; 0x11
    4ede:	82 0f       	add	r24, r18
    4ee0:	93 1f       	adc	r25, r19
    4ee2:	a4 1f       	adc	r26, r20
    4ee4:	b5 1f       	adc	r27, r21
    4ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    4ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    4eea:	c1 2c       	mov	r12, r1
    4eec:	d1 2c       	mov	r13, r1
    4eee:	76 01       	movw	r14, r12
    4ef0:	00 e0       	ldi	r16, 0x00	; 0
    4ef2:	10 e0       	ldi	r17, 0x00	; 0
    4ef4:	9c 01       	movw	r18, r24
    4ef6:	ad 01       	movw	r20, r26
    4ef8:	60 e0       	ldi	r22, 0x00	; 0
    4efa:	cf 01       	movw	r24, r30
    4efc:	b3 dc       	rcall	.-1690   	; 0x4864 <xTimerGenericCommand>
    4efe:	8f 83       	std	Y+7, r24	; 0x07
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
    4f00:	5d c0       	rjmp	.+186    	; 0x4fbc <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4f02:	89 81       	ldd	r24, Y+1	; 0x01
    4f04:	9a 81       	ldd	r25, Y+2	; 0x02
    4f06:	fc 01       	movw	r30, r24
    4f08:	86 89       	ldd	r24, Z+22	; 0x16
    4f0a:	28 2f       	mov	r18, r24
    4f0c:	2e 7f       	andi	r18, 0xFE	; 254
    4f0e:	89 81       	ldd	r24, Y+1	; 0x01
    4f10:	9a 81       	ldd	r25, Y+2	; 0x02
    4f12:	fc 01       	movw	r30, r24
    4f14:	26 8b       	std	Z+22, r18	; 0x16
                        break;
    4f16:	52 c0       	rjmp	.+164    	; 0x4fbc <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    4f18:	89 81       	ldd	r24, Y+1	; 0x01
    4f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	86 89       	ldd	r24, Z+22	; 0x16
    4f20:	28 2f       	mov	r18, r24
    4f22:	21 60       	ori	r18, 0x01	; 1
    4f24:	89 81       	ldd	r24, Y+1	; 0x01
    4f26:	9a 81       	ldd	r25, Y+2	; 0x02
    4f28:	fc 01       	movw	r30, r24
    4f2a:	26 8b       	std	Z+22, r18	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    4f2c:	89 85       	ldd	r24, Y+9	; 0x09
    4f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f30:	ab 85       	ldd	r26, Y+11	; 0x0b
    4f32:	bc 85       	ldd	r27, Y+12	; 0x0c
    4f34:	29 81       	ldd	r18, Y+1	; 0x01
    4f36:	3a 81       	ldd	r19, Y+2	; 0x02
    4f38:	f9 01       	movw	r30, r18
    4f3a:	86 87       	std	Z+14, r24	; 0x0e
    4f3c:	97 87       	std	Z+15, r25	; 0x0f
    4f3e:	a0 8b       	std	Z+16, r26	; 0x10
    4f40:	b1 8b       	std	Z+17, r27	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    4f42:	89 81       	ldd	r24, Y+1	; 0x01
    4f44:	9a 81       	ldd	r25, Y+2	; 0x02
    4f46:	fc 01       	movw	r30, r24
    4f48:	26 85       	ldd	r18, Z+14	; 0x0e
    4f4a:	37 85       	ldd	r19, Z+15	; 0x0f
    4f4c:	40 89       	ldd	r20, Z+16	; 0x10
    4f4e:	51 89       	ldd	r21, Z+17	; 0x11
    4f50:	8b 81       	ldd	r24, Y+3	; 0x03
    4f52:	9c 81       	ldd	r25, Y+4	; 0x04
    4f54:	ad 81       	ldd	r26, Y+5	; 0x05
    4f56:	be 81       	ldd	r27, Y+6	; 0x06
    4f58:	82 0f       	add	r24, r18
    4f5a:	93 1f       	adc	r25, r19
    4f5c:	a4 1f       	adc	r26, r20
    4f5e:	b5 1f       	adc	r27, r21
    4f60:	eb 80       	ldd	r14, Y+3	; 0x03
    4f62:	fc 80       	ldd	r15, Y+4	; 0x04
    4f64:	0d 81       	ldd	r16, Y+5	; 0x05
    4f66:	1e 81       	ldd	r17, Y+6	; 0x06
    4f68:	2b 81       	ldd	r18, Y+3	; 0x03
    4f6a:	3c 81       	ldd	r19, Y+4	; 0x04
    4f6c:	4d 81       	ldd	r20, Y+5	; 0x05
    4f6e:	5e 81       	ldd	r21, Y+6	; 0x06
    4f70:	e9 81       	ldd	r30, Y+1	; 0x01
    4f72:	fa 81       	ldd	r31, Y+2	; 0x02
    4f74:	67 01       	movw	r12, r14
    4f76:	78 01       	movw	r14, r16
    4f78:	89 01       	movw	r16, r18
    4f7a:	9a 01       	movw	r18, r20
    4f7c:	ac 01       	movw	r20, r24
    4f7e:	bd 01       	movw	r22, r26
    4f80:	cf 01       	movw	r24, r30
    4f82:	7a de       	rcall	.-780    	; 0x4c78 <prvInsertTimerInActiveList>
                        break;
    4f84:	1b c0       	rjmp	.+54     	; 0x4fbc <prvProcessReceivedCommands+0x206>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    4f86:	89 81       	ldd	r24, Y+1	; 0x01
    4f88:	9a 81       	ldd	r25, Y+2	; 0x02
    4f8a:	fc 01       	movw	r30, r24
    4f8c:	86 89       	ldd	r24, Z+22	; 0x16
    4f8e:	88 2f       	mov	r24, r24
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	82 70       	andi	r24, 0x02	; 2
    4f94:	99 27       	eor	r25, r25
    4f96:	89 2b       	or	r24, r25
    4f98:	29 f4       	brne	.+10     	; 0x4fa4 <prvProcessReceivedCommands+0x1ee>
                                {
                                    vPortFree( pxTimer );
    4f9a:	89 81       	ldd	r24, Y+1	; 0x01
    4f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f9e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vPortFree>
    4fa2:	0c c0       	rjmp	.+24     	; 0x4fbc <prvProcessReceivedCommands+0x206>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4fa4:	89 81       	ldd	r24, Y+1	; 0x01
    4fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa8:	fc 01       	movw	r30, r24
    4faa:	86 89       	ldd	r24, Z+22	; 0x16
    4fac:	28 2f       	mov	r18, r24
    4fae:	2e 7f       	andi	r18, 0xFE	; 254
    4fb0:	89 81       	ldd	r24, Y+1	; 0x01
    4fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb4:	fc 01       	movw	r30, r24
    4fb6:	26 8b       	std	Z+22, r18	; 0x16
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
    4fb8:	01 c0       	rjmp	.+2      	; 0x4fbc <prvProcessReceivedCommands+0x206>

                    default:
                        /* Don't expect to get here. */
                        break;
    4fba:	00 00       	nop
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    4fbc:	80 91 35 11 	lds	r24, 0x1135	; 0x801135 <xTimerQueue>
    4fc0:	90 91 36 11 	lds	r25, 0x1136	; 0x801136 <xTimerQueue+0x1>
    4fc4:	be 01       	movw	r22, r28
    4fc6:	68 5f       	subi	r22, 0xF8	; 248
    4fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	a9 01       	movw	r20, r18
    4fd0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <xQueueReceive>
    4fd4:	88 23       	and	r24, r24
    4fd6:	09 f0       	breq	.+2      	; 0x4fda <prvProcessReceivedCommands+0x224>
    4fd8:	ff ce       	rjmp	.-514    	; 0x4dd8 <prvProcessReceivedCommands+0x22>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    4fda:	00 00       	nop
    4fdc:	2f 96       	adiw	r28, 0x0f	; 15
    4fde:	0f b6       	in	r0, 0x3f	; 63
    4fe0:	f8 94       	cli
    4fe2:	de bf       	out	0x3e, r29	; 62
    4fe4:	0f be       	out	0x3f, r0	; 63
    4fe6:	cd bf       	out	0x3d, r28	; 61
    4fe8:	df 91       	pop	r29
    4fea:	cf 91       	pop	r28
    4fec:	1f 91       	pop	r17
    4fee:	0f 91       	pop	r16
    4ff0:	ff 90       	pop	r15
    4ff2:	ef 90       	pop	r14
    4ff4:	df 90       	pop	r13
    4ff6:	cf 90       	pop	r12
    4ff8:	08 95       	ret

00004ffa <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    4ffa:	cf 92       	push	r12
    4ffc:	df 92       	push	r13
    4ffe:	ef 92       	push	r14
    5000:	ff 92       	push	r15
    5002:	0f 93       	push	r16
    5004:	1f 93       	push	r17
    5006:	cf 93       	push	r28
    5008:	df 93       	push	r29
    500a:	cd b7       	in	r28, 0x3d	; 61
    500c:	de b7       	in	r29, 0x3e	; 62
    500e:	2d 97       	sbiw	r28, 0x0d	; 13
    5010:	0f b6       	in	r0, 0x3f	; 63
    5012:	f8 94       	cli
    5014:	de bf       	out	0x3e, r29	; 62
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	cd bf       	out	0x3d, r28	; 61

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    501a:	85 c0       	rjmp	.+266    	; 0x5126 <prvSwitchTimerLists+0x12c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    501c:	80 91 31 11 	lds	r24, 0x1131	; 0x801131 <pxCurrentTimerList>
    5020:	90 91 32 11 	lds	r25, 0x1132	; 0x801132 <pxCurrentTimerList+0x1>
    5024:	fc 01       	movw	r30, r24
    5026:	87 81       	ldd	r24, Z+7	; 0x07
    5028:	90 85       	ldd	r25, Z+8	; 0x08
    502a:	fc 01       	movw	r30, r24
    502c:	80 81       	ld	r24, Z
    502e:	91 81       	ldd	r25, Z+1	; 0x01
    5030:	a2 81       	ldd	r26, Z+2	; 0x02
    5032:	b3 81       	ldd	r27, Z+3	; 0x03
    5034:	89 83       	std	Y+1, r24	; 0x01
    5036:	9a 83       	std	Y+2, r25	; 0x02
    5038:	ab 83       	std	Y+3, r26	; 0x03
    503a:	bc 83       	std	Y+4, r27	; 0x04

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    503c:	80 91 31 11 	lds	r24, 0x1131	; 0x801131 <pxCurrentTimerList>
    5040:	90 91 32 11 	lds	r25, 0x1132	; 0x801132 <pxCurrentTimerList+0x1>
    5044:	fc 01       	movw	r30, r24
    5046:	87 81       	ldd	r24, Z+7	; 0x07
    5048:	90 85       	ldd	r25, Z+8	; 0x08
    504a:	fc 01       	movw	r30, r24
    504c:	80 85       	ldd	r24, Z+8	; 0x08
    504e:	91 85       	ldd	r25, Z+9	; 0x09
    5050:	9e 83       	std	Y+6, r25	; 0x06
    5052:	8d 83       	std	Y+5, r24	; 0x05
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5054:	8d 81       	ldd	r24, Y+5	; 0x05
    5056:	9e 81       	ldd	r25, Y+6	; 0x06
    5058:	02 96       	adiw	r24, 0x02	; 2
    505a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    505e:	8d 81       	ldd	r24, Y+5	; 0x05
    5060:	9e 81       	ldd	r25, Y+6	; 0x06
    5062:	fc 01       	movw	r30, r24
    5064:	24 89       	ldd	r18, Z+20	; 0x14
    5066:	35 89       	ldd	r19, Z+21	; 0x15
    5068:	8d 81       	ldd	r24, Y+5	; 0x05
    506a:	9e 81       	ldd	r25, Y+6	; 0x06
    506c:	f9 01       	movw	r30, r18
    506e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    5070:	8d 81       	ldd	r24, Y+5	; 0x05
    5072:	9e 81       	ldd	r25, Y+6	; 0x06
    5074:	fc 01       	movw	r30, r24
    5076:	86 89       	ldd	r24, Z+22	; 0x16
    5078:	88 2f       	mov	r24, r24
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	84 70       	andi	r24, 0x04	; 4
    507e:	99 27       	eor	r25, r25
    5080:	89 2b       	or	r24, r25
    5082:	09 f4       	brne	.+2      	; 0x5086 <prvSwitchTimerLists+0x8c>
    5084:	50 c0       	rjmp	.+160    	; 0x5126 <prvSwitchTimerLists+0x12c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    5086:	8d 81       	ldd	r24, Y+5	; 0x05
    5088:	9e 81       	ldd	r25, Y+6	; 0x06
    508a:	fc 01       	movw	r30, r24
    508c:	26 85       	ldd	r18, Z+14	; 0x0e
    508e:	37 85       	ldd	r19, Z+15	; 0x0f
    5090:	40 89       	ldd	r20, Z+16	; 0x10
    5092:	51 89       	ldd	r21, Z+17	; 0x11
    5094:	89 81       	ldd	r24, Y+1	; 0x01
    5096:	9a 81       	ldd	r25, Y+2	; 0x02
    5098:	ab 81       	ldd	r26, Y+3	; 0x03
    509a:	bc 81       	ldd	r27, Y+4	; 0x04
    509c:	82 0f       	add	r24, r18
    509e:	93 1f       	adc	r25, r19
    50a0:	a4 1f       	adc	r26, r20
    50a2:	b5 1f       	adc	r27, r21
    50a4:	8f 83       	std	Y+7, r24	; 0x07
    50a6:	98 87       	std	Y+8, r25	; 0x08
    50a8:	a9 87       	std	Y+9, r26	; 0x09
    50aa:	ba 87       	std	Y+10, r27	; 0x0a

                if( xReloadTime > xNextExpireTime )
    50ac:	2f 81       	ldd	r18, Y+7	; 0x07
    50ae:	38 85       	ldd	r19, Y+8	; 0x08
    50b0:	49 85       	ldd	r20, Y+9	; 0x09
    50b2:	5a 85       	ldd	r21, Y+10	; 0x0a
    50b4:	89 81       	ldd	r24, Y+1	; 0x01
    50b6:	9a 81       	ldd	r25, Y+2	; 0x02
    50b8:	ab 81       	ldd	r26, Y+3	; 0x03
    50ba:	bc 81       	ldd	r27, Y+4	; 0x04
    50bc:	82 17       	cp	r24, r18
    50be:	93 07       	cpc	r25, r19
    50c0:	a4 07       	cpc	r26, r20
    50c2:	b5 07       	cpc	r27, r21
    50c4:	f8 f4       	brcc	.+62     	; 0x5104 <prvSwitchTimerLists+0x10a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    50c6:	2d 81       	ldd	r18, Y+5	; 0x05
    50c8:	3e 81       	ldd	r19, Y+6	; 0x06
    50ca:	8f 81       	ldd	r24, Y+7	; 0x07
    50cc:	98 85       	ldd	r25, Y+8	; 0x08
    50ce:	a9 85       	ldd	r26, Y+9	; 0x09
    50d0:	ba 85       	ldd	r27, Y+10	; 0x0a
    50d2:	f9 01       	movw	r30, r18
    50d4:	82 83       	std	Z+2, r24	; 0x02
    50d6:	93 83       	std	Z+3, r25	; 0x03
    50d8:	a4 83       	std	Z+4, r26	; 0x04
    50da:	b5 83       	std	Z+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    50dc:	8d 81       	ldd	r24, Y+5	; 0x05
    50de:	9e 81       	ldd	r25, Y+6	; 0x06
    50e0:	2d 81       	ldd	r18, Y+5	; 0x05
    50e2:	3e 81       	ldd	r19, Y+6	; 0x06
    50e4:	fc 01       	movw	r30, r24
    50e6:	33 87       	std	Z+11, r19	; 0x0b
    50e8:	22 87       	std	Z+10, r18	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    50ea:	8d 81       	ldd	r24, Y+5	; 0x05
    50ec:	9e 81       	ldd	r25, Y+6	; 0x06
    50ee:	9c 01       	movw	r18, r24
    50f0:	2e 5f       	subi	r18, 0xFE	; 254
    50f2:	3f 4f       	sbci	r19, 0xFF	; 255
    50f4:	80 91 31 11 	lds	r24, 0x1131	; 0x801131 <pxCurrentTimerList>
    50f8:	90 91 32 11 	lds	r25, 0x1132	; 0x801132 <pxCurrentTimerList+0x1>
    50fc:	b9 01       	movw	r22, r18
    50fe:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <vListInsert>
    5102:	11 c0       	rjmp	.+34     	; 0x5126 <prvSwitchTimerLists+0x12c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5104:	89 81       	ldd	r24, Y+1	; 0x01
    5106:	9a 81       	ldd	r25, Y+2	; 0x02
    5108:	ab 81       	ldd	r26, Y+3	; 0x03
    510a:	bc 81       	ldd	r27, Y+4	; 0x04
    510c:	ed 81       	ldd	r30, Y+5	; 0x05
    510e:	fe 81       	ldd	r31, Y+6	; 0x06
    5110:	c1 2c       	mov	r12, r1
    5112:	d1 2c       	mov	r13, r1
    5114:	76 01       	movw	r14, r12
    5116:	00 e0       	ldi	r16, 0x00	; 0
    5118:	10 e0       	ldi	r17, 0x00	; 0
    511a:	9c 01       	movw	r18, r24
    511c:	ad 01       	movw	r20, r26
    511e:	60 e0       	ldi	r22, 0x00	; 0
    5120:	cf 01       	movw	r24, r30
    5122:	a0 db       	rcall	.-2240   	; 0x4864 <xTimerGenericCommand>
    5124:	8b 87       	std	Y+11, r24	; 0x0b

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    5126:	80 91 31 11 	lds	r24, 0x1131	; 0x801131 <pxCurrentTimerList>
    512a:	90 91 32 11 	lds	r25, 0x1132	; 0x801132 <pxCurrentTimerList+0x1>
    512e:	fc 01       	movw	r30, r24
    5130:	80 81       	ld	r24, Z
    5132:	88 23       	and	r24, r24
    5134:	09 f0       	breq	.+2      	; 0x5138 <prvSwitchTimerLists+0x13e>
    5136:	72 cf       	rjmp	.-284    	; 0x501c <prvSwitchTimerLists+0x22>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
    5138:	80 91 31 11 	lds	r24, 0x1131	; 0x801131 <pxCurrentTimerList>
    513c:	90 91 32 11 	lds	r25, 0x1132	; 0x801132 <pxCurrentTimerList+0x1>
    5140:	9d 87       	std	Y+13, r25	; 0x0d
    5142:	8c 87       	std	Y+12, r24	; 0x0c
        pxCurrentTimerList = pxOverflowTimerList;
    5144:	80 91 33 11 	lds	r24, 0x1133	; 0x801133 <pxOverflowTimerList>
    5148:	90 91 34 11 	lds	r25, 0x1134	; 0x801134 <pxOverflowTimerList+0x1>
    514c:	90 93 32 11 	sts	0x1132, r25	; 0x801132 <pxCurrentTimerList+0x1>
    5150:	80 93 31 11 	sts	0x1131, r24	; 0x801131 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    5154:	8c 85       	ldd	r24, Y+12	; 0x0c
    5156:	9d 85       	ldd	r25, Y+13	; 0x0d
    5158:	90 93 34 11 	sts	0x1134, r25	; 0x801134 <pxOverflowTimerList+0x1>
    515c:	80 93 33 11 	sts	0x1133, r24	; 0x801133 <pxOverflowTimerList>
    }
    5160:	00 00       	nop
    5162:	2d 96       	adiw	r28, 0x0d	; 13
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	f8 94       	cli
    5168:	de bf       	out	0x3e, r29	; 62
    516a:	0f be       	out	0x3f, r0	; 63
    516c:	cd bf       	out	0x3d, r28	; 61
    516e:	df 91       	pop	r29
    5170:	cf 91       	pop	r28
    5172:	1f 91       	pop	r17
    5174:	0f 91       	pop	r16
    5176:	ff 90       	pop	r15
    5178:	ef 90       	pop	r14
    517a:	df 90       	pop	r13
    517c:	cf 90       	pop	r12
    517e:	08 95       	ret

00005180 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    5180:	cf 93       	push	r28
    5182:	df 93       	push	r29
    5184:	cd b7       	in	r28, 0x3d	; 61
    5186:	de b7       	in	r29, 0x3e	; 62
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	f8 94       	cli
    518c:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    518e:	80 91 35 11 	lds	r24, 0x1135	; 0x801135 <xTimerQueue>
    5192:	90 91 36 11 	lds	r25, 0x1136	; 0x801136 <xTimerQueue+0x1>
    5196:	89 2b       	or	r24, r25
    5198:	e9 f4       	brne	.+58     	; 0x51d4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
    519a:	8b e1       	ldi	r24, 0x1B	; 27
    519c:	91 e1       	ldi	r25, 0x11	; 17
    519e:	0e 94 8c 03 	call	0x718	; 0x718 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    51a2:	86 e2       	ldi	r24, 0x26	; 38
    51a4:	91 e1       	ldi	r25, 0x11	; 17
    51a6:	0e 94 8c 03 	call	0x718	; 0x718 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    51aa:	8b e1       	ldi	r24, 0x1B	; 27
    51ac:	91 e1       	ldi	r25, 0x11	; 17
    51ae:	90 93 32 11 	sts	0x1132, r25	; 0x801132 <pxCurrentTimerList+0x1>
    51b2:	80 93 31 11 	sts	0x1131, r24	; 0x801131 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    51b6:	86 e2       	ldi	r24, 0x26	; 38
    51b8:	91 e1       	ldi	r25, 0x11	; 17
    51ba:	90 93 34 11 	sts	0x1134, r25	; 0x801134 <pxOverflowTimerList+0x1>
    51be:	80 93 33 11 	sts	0x1133, r24	; 0x801133 <pxOverflowTimerList>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    51c2:	40 e0       	ldi	r20, 0x00	; 0
    51c4:	67 e0       	ldi	r22, 0x07	; 7
    51c6:	8a e0       	ldi	r24, 0x0A	; 10
    51c8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <xQueueGenericCreate>
    51cc:	90 93 36 11 	sts	0x1136, r25	; 0x801136 <xTimerQueue+0x1>
    51d0:	80 93 35 11 	sts	0x1135, r24	; 0x801135 <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    51d4:	0f 90       	pop	r0
    51d6:	0f be       	out	0x3f, r0	; 63
    }
    51d8:	00 00       	nop
    51da:	df 91       	pop	r29
    51dc:	cf 91       	pop	r28
    51de:	08 95       	ret

000051e0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    51e0:	cf 93       	push	r28
    51e2:	df 93       	push	r29
    51e4:	cd b7       	in	r28, 0x3d	; 61
    51e6:	de b7       	in	r29, 0x3e	; 62
}
    51e8:	00 00       	nop
    51ea:	df 91       	pop	r29
    51ec:	cf 91       	pop	r28
    51ee:	08 95       	ret

000051f0 <prvSetMainLedOn>:

/**
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
    51f0:	cf 93       	push	r28
    51f2:	df 93       	push	r29
    51f4:	cd b7       	in	r28, 0x3d	; 61
    51f6:	de b7       	in	r29, 0x3e	; 62
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    51f8:	84 e2       	ldi	r24, 0x24	; 36
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	24 e2       	ldi	r18, 0x24	; 36
    51fe:	30 e0       	ldi	r19, 0x00	; 0
    5200:	f9 01       	movw	r30, r18
    5202:	20 81       	ld	r18, Z
    5204:	20 68       	ori	r18, 0x80	; 128
    5206:	fc 01       	movw	r30, r24
    5208:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    520a:	85 e2       	ldi	r24, 0x25	; 37
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	25 e2       	ldi	r18, 0x25	; 37
    5210:	30 e0       	ldi	r19, 0x00	; 0
    5212:	f9 01       	movw	r30, r18
    5214:	20 81       	ld	r18, Z
    5216:	20 68       	ori	r18, 0x80	; 128
    5218:	fc 01       	movw	r30, r24
    521a:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

}
    521c:	00 00       	nop
    521e:	df 91       	pop	r29
    5220:	cf 91       	pop	r28
    5222:	08 95       	ret

00005224 <prvBlinkMainLed>:

/**
 * Private function to blink board led to use it in application hooks
 */
void prvBlinkMainLed( void ) 
{
    5224:	cf 93       	push	r28
    5226:	df 93       	push	r29
    5228:	cd b7       	in	r28, 0x3d	; 61
    522a:	de b7       	in	r29, 0x3e	; 62

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    522c:	83 e2       	ldi	r24, 0x23	; 35
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	23 e2       	ldi	r18, 0x23	; 35
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	f9 01       	movw	r30, r18
    5236:	20 81       	ld	r18, Z
    5238:	20 68       	ori	r18, 0x80	; 128
    523a:	fc 01       	movw	r30, r24
    523c:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle.

#endif

}
    523e:	00 00       	nop
    5240:	df 91       	pop	r29
    5242:	cf 91       	pop	r28
    5244:	08 95       	ret

00005246 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    5246:	cf 93       	push	r28
    5248:	df 93       	push	r29
    524a:	cd b7       	in	r28, 0x3d	; 61
    524c:	de b7       	in	r29, 0x3e	; 62
    524e:	2e 97       	sbiw	r28, 0x0e	; 14
    5250:	0f b6       	in	r0, 0x3f	; 63
    5252:	f8 94       	cli
    5254:	de bf       	out	0x3e, r29	; 62
    5256:	0f be       	out	0x3f, r0	; 63
    5258:	cd bf       	out	0x3d, r28	; 61
    prvSetMainLedOn(); // Main LED on.
    525a:	ca df       	rcall	.-108    	; 0x51f0 <prvSetMainLedOn>
    525c:	80 e0       	ldi	r24, 0x00	; 0
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	a8 e4       	ldi	r26, 0x48	; 72
    5262:	b2 e4       	ldi	r27, 0x42	; 66
    5264:	89 83       	std	Y+1, r24	; 0x01
    5266:	9a 83       	std	Y+2, r25	; 0x02
    5268:	ab 83       	std	Y+3, r26	; 0x03
    526a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	4a e7       	ldi	r20, 0x7A	; 122
    5272:	55 e4       	ldi	r21, 0x45	; 69
    5274:	69 81       	ldd	r22, Y+1	; 0x01
    5276:	7a 81       	ldd	r23, Y+2	; 0x02
    5278:	8b 81       	ldd	r24, Y+3	; 0x03
    527a:	9c 81       	ldd	r25, Y+4	; 0x04
    527c:	fd d3       	rcall	.+2042   	; 0x5a78 <__mulsf3>
    527e:	dc 01       	movw	r26, r24
    5280:	cb 01       	movw	r24, r22
    5282:	8d 83       	std	Y+5, r24	; 0x05
    5284:	9e 83       	std	Y+6, r25	; 0x06
    5286:	af 83       	std	Y+7, r26	; 0x07
    5288:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    528a:	20 e0       	ldi	r18, 0x00	; 0
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	40 e8       	ldi	r20, 0x80	; 128
    5290:	5f e3       	ldi	r21, 0x3F	; 63
    5292:	6d 81       	ldd	r22, Y+5	; 0x05
    5294:	7e 81       	ldd	r23, Y+6	; 0x06
    5296:	8f 81       	ldd	r24, Y+7	; 0x07
    5298:	98 85       	ldd	r25, Y+8	; 0x08
    529a:	6d d3       	rcall	.+1754   	; 0x5976 <__cmpsf2>
    529c:	88 23       	and	r24, r24
    529e:	2c f4       	brge	.+10     	; 0x52aa <vApplicationMallocFailedHook+0x64>
		__ticks = 1;
    52a0:	81 e0       	ldi	r24, 0x01	; 1
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	9a 87       	std	Y+10, r25	; 0x0a
    52a6:	89 87       	std	Y+9, r24	; 0x09
    52a8:	3b c0       	rjmp	.+118    	; 0x5320 <vApplicationMallocFailedHook+0xda>
	else if (__tmp > 65535)
    52aa:	20 e0       	ldi	r18, 0x00	; 0
    52ac:	3f ef       	ldi	r19, 0xFF	; 255
    52ae:	4f e7       	ldi	r20, 0x7F	; 127
    52b0:	57 e4       	ldi	r21, 0x47	; 71
    52b2:	6d 81       	ldd	r22, Y+5	; 0x05
    52b4:	7e 81       	ldd	r23, Y+6	; 0x06
    52b6:	8f 81       	ldd	r24, Y+7	; 0x07
    52b8:	98 85       	ldd	r25, Y+8	; 0x08
    52ba:	da d3       	rcall	.+1972   	; 0x5a70 <__gesf2>
    52bc:	18 16       	cp	r1, r24
    52be:	3c f5       	brge	.+78     	; 0x530e <vApplicationMallocFailedHook+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	40 e2       	ldi	r20, 0x20	; 32
    52c6:	51 e4       	ldi	r21, 0x41	; 65
    52c8:	69 81       	ldd	r22, Y+1	; 0x01
    52ca:	7a 81       	ldd	r23, Y+2	; 0x02
    52cc:	8b 81       	ldd	r24, Y+3	; 0x03
    52ce:	9c 81       	ldd	r25, Y+4	; 0x04
    52d0:	d3 d3       	rcall	.+1958   	; 0x5a78 <__mulsf3>
    52d2:	dc 01       	movw	r26, r24
    52d4:	cb 01       	movw	r24, r22
    52d6:	bc 01       	movw	r22, r24
    52d8:	cd 01       	movw	r24, r26
    52da:	51 d3       	rcall	.+1698   	; 0x597e <__fixunssfsi>
    52dc:	dc 01       	movw	r26, r24
    52de:	cb 01       	movw	r24, r22
    52e0:	9a 87       	std	Y+10, r25	; 0x0a
    52e2:	89 87       	std	Y+9, r24	; 0x09
    52e4:	0f c0       	rjmp	.+30     	; 0x5304 <vApplicationMallocFailedHook+0xbe>
    52e6:	80 e9       	ldi	r24, 0x90	; 144
    52e8:	91 e0       	ldi	r25, 0x01	; 1
    52ea:	9c 87       	std	Y+12, r25	; 0x0c
    52ec:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    52ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    52f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    52f2:	01 97       	sbiw	r24, 0x01	; 1
    52f4:	f1 f7       	brne	.-4      	; 0x52f2 <vApplicationMallocFailedHook+0xac>
    52f6:	9c 87       	std	Y+12, r25	; 0x0c
    52f8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52fa:	89 85       	ldd	r24, Y+9	; 0x09
    52fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    52fe:	01 97       	sbiw	r24, 0x01	; 1
    5300:	9a 87       	std	Y+10, r25	; 0x0a
    5302:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5304:	89 85       	ldd	r24, Y+9	; 0x09
    5306:	9a 85       	ldd	r25, Y+10	; 0x0a
    5308:	89 2b       	or	r24, r25
    530a:	69 f7       	brne	.-38     	; 0x52e6 <vApplicationMallocFailedHook+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    530c:	13 c0       	rjmp	.+38     	; 0x5334 <vApplicationMallocFailedHook+0xee>
    530e:	6d 81       	ldd	r22, Y+5	; 0x05
    5310:	7e 81       	ldd	r23, Y+6	; 0x06
    5312:	8f 81       	ldd	r24, Y+7	; 0x07
    5314:	98 85       	ldd	r25, Y+8	; 0x08
    5316:	33 d3       	rcall	.+1638   	; 0x597e <__fixunssfsi>
    5318:	dc 01       	movw	r26, r24
    531a:	cb 01       	movw	r24, r22
    531c:	9a 87       	std	Y+10, r25	; 0x0a
    531e:	89 87       	std	Y+9, r24	; 0x09
    5320:	89 85       	ldd	r24, Y+9	; 0x09
    5322:	9a 85       	ldd	r25, Y+10	; 0x0a
    5324:	9e 87       	std	Y+14, r25	; 0x0e
    5326:	8d 87       	std	Y+13, r24	; 0x0d
    5328:	8d 85       	ldd	r24, Y+13	; 0x0d
    532a:	9e 85       	ldd	r25, Y+14	; 0x0e
    532c:	01 97       	sbiw	r24, 0x01	; 1
    532e:	f1 f7       	brne	.-4      	; 0x532c <vApplicationMallocFailedHook+0xe6>
    5330:	9e 87       	std	Y+14, r25	; 0x0e
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    5332:	8d 87       	std	Y+13, r24	; 0x0d
    5334:	77 df       	rcall	.-274    	; 0x5224 <prvBlinkMainLed>
    }
    5336:	92 cf       	rjmp	.-220    	; 0x525c <vApplicationMallocFailedHook+0x16>

00005338 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    char * pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{
    5338:	cf 93       	push	r28
    533a:	df 93       	push	r29
    533c:	cd b7       	in	r28, 0x3d	; 61
    533e:	de b7       	in	r29, 0x3e	; 62
    5340:	62 97       	sbiw	r28, 0x12	; 18
    5342:	0f b6       	in	r0, 0x3f	; 63
    5344:	f8 94       	cli
    5346:	de bf       	out	0x3e, r29	; 62
    5348:	0f be       	out	0x3f, r0	; 63
    534a:	cd bf       	out	0x3d, r28	; 61
    534c:	98 8b       	std	Y+16, r25	; 0x10
    534e:	8f 87       	std	Y+15, r24	; 0x0f
    5350:	7a 8b       	std	Y+18, r23	; 0x12
    5352:	69 8b       	std	Y+17, r22	; 0x11

    prvSetMainLedOn(); // Main LED on.
    5354:	4d df       	rcall	.-358    	; 0x51f0 <prvSetMainLedOn>
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	aa ef       	ldi	r26, 0xFA	; 250
    535c:	b4 e4       	ldi	r27, 0x44	; 68
    535e:	89 83       	std	Y+1, r24	; 0x01
    5360:	9a 83       	std	Y+2, r25	; 0x02
    5362:	ab 83       	std	Y+3, r26	; 0x03
    5364:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	4a e7       	ldi	r20, 0x7A	; 122
    536c:	55 e4       	ldi	r21, 0x45	; 69
    536e:	69 81       	ldd	r22, Y+1	; 0x01
    5370:	7a 81       	ldd	r23, Y+2	; 0x02
    5372:	8b 81       	ldd	r24, Y+3	; 0x03
    5374:	9c 81       	ldd	r25, Y+4	; 0x04
    5376:	80 d3       	rcall	.+1792   	; 0x5a78 <__mulsf3>
    5378:	dc 01       	movw	r26, r24
    537a:	cb 01       	movw	r24, r22
    537c:	8d 83       	std	Y+5, r24	; 0x05
    537e:	9e 83       	std	Y+6, r25	; 0x06
    5380:	af 83       	std	Y+7, r26	; 0x07
    5382:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    5384:	20 e0       	ldi	r18, 0x00	; 0
    5386:	30 e0       	ldi	r19, 0x00	; 0
    5388:	40 e8       	ldi	r20, 0x80	; 128
    538a:	5f e3       	ldi	r21, 0x3F	; 63
    538c:	6d 81       	ldd	r22, Y+5	; 0x05
    538e:	7e 81       	ldd	r23, Y+6	; 0x06
    5390:	8f 81       	ldd	r24, Y+7	; 0x07
    5392:	98 85       	ldd	r25, Y+8	; 0x08
    5394:	f0 d2       	rcall	.+1504   	; 0x5976 <__cmpsf2>
    5396:	88 23       	and	r24, r24
    5398:	2c f4       	brge	.+10     	; 0x53a4 <vApplicationStackOverflowHook+0x6c>
		__ticks = 1;
    539a:	81 e0       	ldi	r24, 0x01	; 1
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	9a 87       	std	Y+10, r25	; 0x0a
    53a0:	89 87       	std	Y+9, r24	; 0x09
    53a2:	3b c0       	rjmp	.+118    	; 0x541a <vApplicationStackOverflowHook+0xe2>
	else if (__tmp > 65535)
    53a4:	20 e0       	ldi	r18, 0x00	; 0
    53a6:	3f ef       	ldi	r19, 0xFF	; 255
    53a8:	4f e7       	ldi	r20, 0x7F	; 127
    53aa:	57 e4       	ldi	r21, 0x47	; 71
    53ac:	6d 81       	ldd	r22, Y+5	; 0x05
    53ae:	7e 81       	ldd	r23, Y+6	; 0x06
    53b0:	8f 81       	ldd	r24, Y+7	; 0x07
    53b2:	98 85       	ldd	r25, Y+8	; 0x08
    53b4:	5d d3       	rcall	.+1722   	; 0x5a70 <__gesf2>
    53b6:	18 16       	cp	r1, r24
    53b8:	3c f5       	brge	.+78     	; 0x5408 <vApplicationStackOverflowHook+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53ba:	20 e0       	ldi	r18, 0x00	; 0
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	40 e2       	ldi	r20, 0x20	; 32
    53c0:	51 e4       	ldi	r21, 0x41	; 65
    53c2:	69 81       	ldd	r22, Y+1	; 0x01
    53c4:	7a 81       	ldd	r23, Y+2	; 0x02
    53c6:	8b 81       	ldd	r24, Y+3	; 0x03
    53c8:	9c 81       	ldd	r25, Y+4	; 0x04
    53ca:	56 d3       	rcall	.+1708   	; 0x5a78 <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	bc 01       	movw	r22, r24
    53d2:	cd 01       	movw	r24, r26
    53d4:	d4 d2       	rcall	.+1448   	; 0x597e <__fixunssfsi>
    53d6:	dc 01       	movw	r26, r24
    53d8:	cb 01       	movw	r24, r22
    53da:	9a 87       	std	Y+10, r25	; 0x0a
    53dc:	89 87       	std	Y+9, r24	; 0x09
    53de:	0f c0       	rjmp	.+30     	; 0x53fe <vApplicationStackOverflowHook+0xc6>
    53e0:	80 e9       	ldi	r24, 0x90	; 144
    53e2:	91 e0       	ldi	r25, 0x01	; 1
    53e4:	9c 87       	std	Y+12, r25	; 0x0c
    53e6:	8b 87       	std	Y+11, r24	; 0x0b
    53e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    53ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    53ec:	01 97       	sbiw	r24, 0x01	; 1
    53ee:	f1 f7       	brne	.-4      	; 0x53ec <vApplicationStackOverflowHook+0xb4>
    53f0:	9c 87       	std	Y+12, r25	; 0x0c
    53f2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53f4:	89 85       	ldd	r24, Y+9	; 0x09
    53f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53f8:	01 97       	sbiw	r24, 0x01	; 1
    53fa:	9a 87       	std	Y+10, r25	; 0x0a
    53fc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53fe:	89 85       	ldd	r24, Y+9	; 0x09
    5400:	9a 85       	ldd	r25, Y+10	; 0x0a
    5402:	89 2b       	or	r24, r25
    5404:	69 f7       	brne	.-38     	; 0x53e0 <vApplicationStackOverflowHook+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5406:	13 c0       	rjmp	.+38     	; 0x542e <vApplicationStackOverflowHook+0xf6>
    5408:	6d 81       	ldd	r22, Y+5	; 0x05
    540a:	7e 81       	ldd	r23, Y+6	; 0x06
    540c:	8f 81       	ldd	r24, Y+7	; 0x07
    540e:	98 85       	ldd	r25, Y+8	; 0x08
    5410:	b6 d2       	rcall	.+1388   	; 0x597e <__fixunssfsi>
    5412:	dc 01       	movw	r26, r24
    5414:	cb 01       	movw	r24, r22
    5416:	9a 87       	std	Y+10, r25	; 0x0a
    5418:	89 87       	std	Y+9, r24	; 0x09
    541a:	89 85       	ldd	r24, Y+9	; 0x09
    541c:	9a 85       	ldd	r25, Y+10	; 0x0a
    541e:	9e 87       	std	Y+14, r25	; 0x0e
    5420:	8d 87       	std	Y+13, r24	; 0x0d
    5422:	8d 85       	ldd	r24, Y+13	; 0x0d
    5424:	9e 85       	ldd	r25, Y+14	; 0x0e
    5426:	01 97       	sbiw	r24, 0x01	; 1
    5428:	f1 f7       	brne	.-4      	; 0x5426 <vApplicationStackOverflowHook+0xee>
    542a:	9e 87       	std	Y+14, r25	; 0x0e

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    542c:	8d 87       	std	Y+13, r24	; 0x0d
    542e:	fa de       	rcall	.-524    	; 0x5224 <prvBlinkMainLed>
    }
    5430:	92 cf       	rjmp	.-220    	; 0x5356 <vApplicationStackOverflowHook+0x1e>

00005432 <lora_handler_initialise>:
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    5432:	ef 92       	push	r14
    5434:	ff 92       	push	r15
    5436:	0f 93       	push	r16
    5438:	cf 93       	push	r28
    543a:	df 93       	push	r29
    543c:	1f 92       	push	r1
    543e:	cd b7       	in	r28, 0x3d	; 61
    5440:	de b7       	in	r29, 0x3e	; 62
    5442:	89 83       	std	Y+1, r24	; 0x01
	xTaskCreate(
    5444:	e1 2c       	mov	r14, r1
    5446:	f1 2c       	mov	r15, r1
    5448:	09 81       	ldd	r16, Y+1	; 0x01
    544a:	20 e0       	ldi	r18, 0x00	; 0
    544c:	30 e0       	ldi	r19, 0x00	; 0
    544e:	48 e8       	ldi	r20, 0x88	; 136
    5450:	51 e0       	ldi	r21, 0x01	; 1
    5452:	6a e2       	ldi	r22, 0x2A	; 42
    5454:	72 e0       	ldi	r23, 0x02	; 2
    5456:	8b e5       	ldi	r24, 0x5B	; 91
    5458:	9b e2       	ldi	r25, 0x2B	; 43
    545a:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    545e:	00 00       	nop
    5460:	0f 90       	pop	r0
    5462:	df 91       	pop	r29
    5464:	cf 91       	pop	r28
    5466:	0f 91       	pop	r16
    5468:	ff 90       	pop	r15
    546a:	ef 90       	pop	r14
    546c:	08 95       	ret

0000546e <_lora_setup>:

static void _lora_setup(void)
{
    546e:	cf 93       	push	r28
    5470:	df 93       	push	r29
    5472:	1f 92       	push	r1
    5474:	1f 92       	push	r1
    5476:	cd b7       	in	r28, 0x3d	; 61
    5478:	de b7       	in	r29, 0x3e	; 62
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    547a:	81 e0       	ldi	r24, 0x01	; 1
    547c:	0e 94 39 37 	call	0x6e72	; 0x6e72 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    5480:	f3 d4       	rcall	.+2534   	; 0x5e68 <lora_driver_rn2483FactoryReset>
    5482:	6f d7       	rcall	.+3806   	; 0x6362 <lora_driver_mapReturnCodeToText>
    5484:	29 2f       	mov	r18, r25
    5486:	2f 93       	push	r18
    5488:	8f 93       	push	r24
    548a:	81 e3       	ldi	r24, 0x31	; 49
    548c:	92 e0       	ldi	r25, 0x02	; 2
    548e:	89 2f       	mov	r24, r25
    5490:	8f 93       	push	r24
    5492:	81 e3       	ldi	r24, 0x31	; 49
    5494:	92 e0       	ldi	r25, 0x02	; 2
    5496:	8f 93       	push	r24
    5498:	0e 94 83 3a 	call	0x7506	; 0x7506 <printf>
    549c:	0f 90       	pop	r0
    549e:	0f 90       	pop	r0
    54a0:	0f 90       	pop	r0
    54a2:	0f 90       	pop	r0
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    54a4:	5f d6       	rcall	.+3262   	; 0x6164 <lora_driver_configureToEu868>
    54a6:	5d d7       	rcall	.+3770   	; 0x6362 <lora_driver_mapReturnCodeToText>
    54a8:	29 2f       	mov	r18, r25
    54aa:	2f 93       	push	r18
    54ac:	8f 93       	push	r24
    54ae:	84 e4       	ldi	r24, 0x44	; 68
    54b0:	92 e0       	ldi	r25, 0x02	; 2
    54b2:	89 2f       	mov	r24, r25
    54b4:	8f 93       	push	r24
    54b6:	84 e4       	ldi	r24, 0x44	; 68
    54b8:	92 e0       	ldi	r25, 0x02	; 2
    54ba:	8f 93       	push	r24
    54bc:	0e 94 83 3a 	call	0x7506	; 0x7506 <printf>
    54c0:	0f 90       	pop	r0
    54c2:	0f 90       	pop	r0
    54c4:	0f 90       	pop	r0
    54c6:	0f 90       	pop	r0
    54c8:	8d e3       	ldi	r24, 0x3D	; 61

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    54ca:	91 e1       	ldi	r25, 0x11	; 17
    54cc:	df d4       	rcall	.+2494   	; 0x5e8c <lora_driver_getRn2483Hweui>
    54ce:	8a 83       	std	Y+2, r24	; 0x02
    54d0:	8a 81       	ldd	r24, Y+2	; 0x02
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    54d2:	47 d7       	rcall	.+3726   	; 0x6362 <lora_driver_mapReturnCodeToText>
    54d4:	9c 01       	movw	r18, r24
    54d6:	8d e3       	ldi	r24, 0x3D	; 61
    54d8:	91 e1       	ldi	r25, 0x11	; 17
    54da:	89 2f       	mov	r24, r25
    54dc:	8f 93       	push	r24
    54de:	8d e3       	ldi	r24, 0x3D	; 61
    54e0:	91 e1       	ldi	r25, 0x11	; 17
    54e2:	8f 93       	push	r24
    54e4:	83 2f       	mov	r24, r19
    54e6:	8f 93       	push	r24
    54e8:	82 2f       	mov	r24, r18
    54ea:	8f 93       	push	r24
    54ec:	8d e5       	ldi	r24, 0x5D	; 93
    54ee:	92 e0       	ldi	r25, 0x02	; 2
    54f0:	89 2f       	mov	r24, r25
    54f2:	8f 93       	push	r24
    54f4:	8d e5       	ldi	r24, 0x5D	; 93
    54f6:	92 e0       	ldi	r25, 0x02	; 2
    54f8:	8f 93       	push	r24
    54fa:	0e 94 83 3a 	call	0x7506	; 0x7506 <printf>
    54fe:	0f 90       	pop	r0
    5500:	0f 90       	pop	r0
    5502:	0f 90       	pop	r0
    5504:	0f 90       	pop	r0
    5506:	0f 90       	pop	r0
    5508:	0f 90       	pop	r0

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    550a:	8d e3       	ldi	r24, 0x3D	; 61
    550c:	91 e1       	ldi	r25, 0x11	; 17
    550e:	da d4       	rcall	.+2484   	; 0x5ec4 <lora_driver_setDeviceIdentifier>
    5510:	28 d7       	rcall	.+3664   	; 0x6362 <lora_driver_mapReturnCodeToText>
    5512:	29 2f       	mov	r18, r25
    5514:	2f 93       	push	r18
    5516:	8f 93       	push	r24
    5518:	8d e3       	ldi	r24, 0x3D	; 61
    551a:	91 e1       	ldi	r25, 0x11	; 17
    551c:	89 2f       	mov	r24, r25
    551e:	8f 93       	push	r24
    5520:	8d e3       	ldi	r24, 0x3D	; 61
    5522:	91 e1       	ldi	r25, 0x11	; 17
    5524:	8f 93       	push	r24
    5526:	81 e7       	ldi	r24, 0x71	; 113
    5528:	92 e0       	ldi	r25, 0x02	; 2
    552a:	89 2f       	mov	r24, r25
    552c:	8f 93       	push	r24
    552e:	81 e7       	ldi	r24, 0x71	; 113
    5530:	92 e0       	ldi	r25, 0x02	; 2
    5532:	8f 93       	push	r24
    5534:	0e 94 83 3a 	call	0x7506	; 0x7506 <printf>
    5538:	0f 90       	pop	r0
    553a:	0f 90       	pop	r0
    553c:	0f 90       	pop	r0
    553e:	0f 90       	pop	r0
    5540:	0f 90       	pop	r0
    5542:	0f 90       	pop	r0
    5544:	4d e3       	ldi	r20, 0x3D	; 61

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    5546:	51 e1       	ldi	r21, 0x11	; 17
    5548:	66 e8       	ldi	r22, 0x86	; 134
    554a:	72 e0       	ldi	r23, 0x02	; 2
    554c:	87 ea       	ldi	r24, 0xA7	; 167
    554e:	92 e0       	ldi	r25, 0x02	; 2
    5550:	e7 d6       	rcall	.+3534   	; 0x6320 <lora_driver_setOtaaIdentity>
    5552:	07 d7       	rcall	.+3598   	; 0x6362 <lora_driver_mapReturnCodeToText>
    5554:	29 2f       	mov	r18, r25
    5556:	2f 93       	push	r18
    5558:	8f 93       	push	r24
    555a:	8d e3       	ldi	r24, 0x3D	; 61
    555c:	91 e1       	ldi	r25, 0x11	; 17
    555e:	89 2f       	mov	r24, r25
    5560:	8f 93       	push	r24
    5562:	8d e3       	ldi	r24, 0x3D	; 61
    5564:	91 e1       	ldi	r25, 0x11	; 17
    5566:	8f 93       	push	r24
    5568:	86 e8       	ldi	r24, 0x86	; 134
    556a:	92 e0       	ldi	r25, 0x02	; 2
    556c:	89 2f       	mov	r24, r25
    556e:	8f 93       	push	r24
    5570:	86 e8       	ldi	r24, 0x86	; 134
    5572:	92 e0       	ldi	r25, 0x02	; 2
    5574:	8f 93       	push	r24
    5576:	87 ea       	ldi	r24, 0xA7	; 167
    5578:	92 e0       	ldi	r25, 0x02	; 2
    557a:	89 2f       	mov	r24, r25
    557c:	8f 93       	push	r24
    557e:	87 ea       	ldi	r24, 0xA7	; 167
    5580:	92 e0       	ldi	r25, 0x02	; 2
    5582:	8f 93       	push	r24
    5584:	88 eb       	ldi	r24, 0xB8	; 184
    5586:	92 e0       	ldi	r25, 0x02	; 2
    5588:	89 2f       	mov	r24, r25
    558a:	8f 93       	push	r24
    558c:	88 eb       	ldi	r24, 0xB8	; 184
    558e:	92 e0       	ldi	r25, 0x02	; 2
    5590:	8f 93       	push	r24
    5592:	0e 94 83 3a 	call	0x7506	; 0x7506 <printf>
    5596:	8d b7       	in	r24, 0x3d	; 61
    5598:	9e b7       	in	r25, 0x3e	; 62
    559a:	0a 96       	adiw	r24, 0x0a	; 10
    559c:	0f b6       	in	r0, 0x3f	; 63
    559e:	f8 94       	cli
    55a0:	de bf       	out	0x3e, r29	; 62
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	cd bf       	out	0x3d, r28	; 61
    55a6:	c1 d4       	rcall	.+2434   	; 0x5f2a <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    55a8:	dc d6       	rcall	.+3512   	; 0x6362 <lora_driver_mapReturnCodeToText>
    55aa:	29 2f       	mov	r18, r25
    55ac:	2f 93       	push	r18
    55ae:	8f 93       	push	r24
    55b0:	8e ee       	ldi	r24, 0xEE	; 238
    55b2:	92 e0       	ldi	r25, 0x02	; 2
    55b4:	89 2f       	mov	r24, r25
    55b6:	8f 93       	push	r24
    55b8:	8e ee       	ldi	r24, 0xEE	; 238
    55ba:	92 e0       	ldi	r25, 0x02	; 2
    55bc:	8f 93       	push	r24
    55be:	0e 94 83 3a 	call	0x7506	; 0x7506 <printf>
    55c2:	0f 90       	pop	r0
    55c4:	0f 90       	pop	r0
    55c6:	0f 90       	pop	r0
    55c8:	0f 90       	pop	r0
    55ca:	81 e0       	ldi	r24, 0x01	; 1

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    55cc:	a8 d5       	rcall	.+2896   	; 0x611e <lora_driver_setAdaptiveDataRate>
    55ce:	c9 d6       	rcall	.+3474   	; 0x6362 <lora_driver_mapReturnCodeToText>
    55d0:	29 2f       	mov	r18, r25
    55d2:	2f 93       	push	r18
    55d4:	8f 93       	push	r24
    55d6:	8d ef       	ldi	r24, 0xFD	; 253
    55d8:	92 e0       	ldi	r25, 0x02	; 2
    55da:	89 2f       	mov	r24, r25
    55dc:	8f 93       	push	r24
    55de:	8d ef       	ldi	r24, 0xFD	; 253
    55e0:	92 e0       	ldi	r25, 0x02	; 2
    55e2:	8f 93       	push	r24
    55e4:	0e 94 83 3a 	call	0x7506	; 0x7506 <printf>
    55e8:	0f 90       	pop	r0
    55ea:	0f 90       	pop	r0
    55ec:	0f 90       	pop	r0
    55ee:	0f 90       	pop	r0
    55f0:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    55f2:	91 e0       	ldi	r25, 0x01	; 1
    55f4:	9f d5       	rcall	.+2878   	; 0x6134 <lora_driver_setReceiveDelay>
    55f6:	b5 d6       	rcall	.+3434   	; 0x6362 <lora_driver_mapReturnCodeToText>
    55f8:	29 2f       	mov	r18, r25
    55fa:	2f 93       	push	r18
    55fc:	8f 93       	push	r24
    55fe:	81 e0       	ldi	r24, 0x01	; 1
    5600:	8f 93       	push	r24
    5602:	84 ef       	ldi	r24, 0xF4	; 244
    5604:	8f 93       	push	r24
    5606:	8e e1       	ldi	r24, 0x1E	; 30
    5608:	93 e0       	ldi	r25, 0x03	; 3
    560a:	89 2f       	mov	r24, r25
    560c:	8f 93       	push	r24
    560e:	8e e1       	ldi	r24, 0x1E	; 30
    5610:	93 e0       	ldi	r25, 0x03	; 3
    5612:	8f 93       	push	r24
    5614:	0e 94 83 3a 	call	0x7506	; 0x7506 <printf>
    5618:	0f 90       	pop	r0
    561a:	0f 90       	pop	r0
    561c:	0f 90       	pop	r0
    561e:	0f 90       	pop	r0
    5620:	0f 90       	pop	r0
    5622:	0f 90       	pop	r0
    5624:	8a e0       	ldi	r24, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    5626:	89 83       	std	Y+1, r24	; 0x01
    5628:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    562a:	85 d4       	rcall	.+2314   	; 0x5f36 <lora_driver_join>
    562c:	8a 83       	std	Y+2, r24	; 0x02
    562e:	8a 81       	ldd	r24, Y+2	; 0x02
    5630:	98 d6       	rcall	.+3376   	; 0x6362 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    5632:	9c 01       	movw	r18, r24
    5634:	89 81       	ldd	r24, Y+1	; 0x01
    5636:	88 2f       	mov	r24, r24
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	43 2f       	mov	r20, r19
    563c:	4f 93       	push	r20
    563e:	2f 93       	push	r18
    5640:	29 2f       	mov	r18, r25
    5642:	2f 93       	push	r18
    5644:	8f 93       	push	r24
    5646:	8e e3       	ldi	r24, 0x3E	; 62
    5648:	93 e0       	ldi	r25, 0x03	; 3
    564a:	89 2f       	mov	r24, r25
    564c:	8f 93       	push	r24
    564e:	8e e3       	ldi	r24, 0x3E	; 62
    5650:	93 e0       	ldi	r25, 0x03	; 3
    5652:	8f 93       	push	r24
    5654:	0e 94 83 3a 	call	0x7506	; 0x7506 <printf>
    5658:	0f 90       	pop	r0
    565a:	0f 90       	pop	r0
    565c:	0f 90       	pop	r0
    565e:	0f 90       	pop	r0
    5660:	0f 90       	pop	r0
    5662:	0f 90       	pop	r0
    5664:	8a 81       	ldd	r24, Y+2	; 0x02
    5666:	88 30       	cpi	r24, 0x08	; 8
    5668:	81 f0       	breq	.+32     	; 0x568a <_lora_setup+0x21c>

		if ( rc != LORA_ACCEPTED)
    566a:	80 e0       	ldi	r24, 0x00	; 0
    566c:	0e 94 9d 37 	call	0x6f3a	; 0x6f3a <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    5670:	66 e3       	ldi	r22, 0x36	; 54
    5672:	71 e0       	ldi	r23, 0x01	; 1
    5674:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	0e 94 52 14 	call	0x28a4	; 0x28a4 <vTaskDelay>
    567c:	89 81       	ldd	r24, Y+1	; 0x01
    567e:	81 50       	subi	r24, 0x01	; 1
    5680:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    5682:	89 81       	ldd	r24, Y+1	; 0x01
    5684:	88 23       	and	r24, r24
    5686:	81 f6       	brne	.-96     	; 0x5628 <_lora_setup+0x1ba>
    5688:	01 c0       	rjmp	.+2      	; 0x568c <_lora_setup+0x21e>
    568a:	00 00       	nop
    568c:	8a 81       	ldd	r24, Y+2	; 0x02
    568e:	88 30       	cpi	r24, 0x08	; 8
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
		}
		else
		{
			break;
    5690:	21 f4       	brne	.+8      	; 0x569a <_lora_setup+0x22c>
		}
	} while (--maxJoinTriesLeft);

	if (rc == LORA_ACCEPTED)
    5692:	81 e0       	ldi	r24, 0x01	; 1
    5694:	0e 94 7f 37 	call	0x6efe	; 0x6efe <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    5698:	09 c0       	rjmp	.+18     	; 0x56ac <_lora_setup+0x23e>
    569a:	81 e0       	ldi	r24, 0x01	; 1
    569c:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    56a0:	80 e0       	ldi	r24, 0x00	; 0
    56a2:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    56a6:	0e 94 7d 05 	call	0xafa	; 0xafa <vPortYield>
    56aa:	fd cf       	rjmp	.-6      	; 0x56a6 <_lora_setup+0x238>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    56ac:	0f 90       	pop	r0
    56ae:	0f 90       	pop	r0
		}
    56b0:	df 91       	pop	r29
	}
}
    56b2:	cf 91       	pop	r28
    56b4:	08 95       	ret

000056b6 <lora_handler_task>:
    56b6:	cf 93       	push	r28
    56b8:	df 93       	push	r29
    56ba:	cd b7       	in	r28, 0x3d	; 61

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    56bc:	de b7       	in	r29, 0x3e	; 62
    56be:	60 97       	sbiw	r28, 0x10	; 16
    56c0:	0f b6       	in	r0, 0x3f	; 63
    56c2:	f8 94       	cli
    56c4:	de bf       	out	0x3e, r29	; 62
    56c6:	0f be       	out	0x3f, r0	; 63
    56c8:	cd bf       	out	0x3d, r28	; 61
    56ca:	98 8b       	std	Y+16, r25	; 0x10
    56cc:	8f 87       	std	Y+15, r24	; 0x0f
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    56ce:	81 e0       	ldi	r24, 0x01	; 1
    56d0:	bd d3       	rcall	.+1914   	; 0x5e4c <lora_driver_resetRn2483>
	vTaskDelay(2);
    56d2:	62 e0       	ldi	r22, 0x02	; 2
    56d4:	70 e0       	ldi	r23, 0x00	; 0
    56d6:	80 e0       	ldi	r24, 0x00	; 0
    56d8:	90 e0       	ldi	r25, 0x00	; 0
    56da:	0e 94 52 14 	call	0x28a4	; 0x28a4 <vTaskDelay>
	lora_driver_resetRn2483(0);
    56de:	80 e0       	ldi	r24, 0x00	; 0
    56e0:	b5 d3       	rcall	.+1898   	; 0x5e4c <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    56e2:	66 e9       	ldi	r22, 0x96	; 150
    56e4:	70 e0       	ldi	r23, 0x00	; 0
    56e6:	80 e0       	ldi	r24, 0x00	; 0
    56e8:	90 e0       	ldi	r25, 0x00	; 0
    56ea:	0e 94 52 14 	call	0x28a4	; 0x28a4 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    56ee:	67 d3       	rcall	.+1742   	; 0x5dbe <lora_driver_flushBuffers>

	_lora_setup();
    56f0:	be de       	rcall	.-644    	; 0x546e <_lora_setup>
    56f2:	86 e0       	ldi	r24, 0x06	; 6

	_uplink_payload.len = 6;
    56f4:	80 93 a2 11 	sts	0x11A2, r24	; 0x8011a2 <_uplink_payload+0x1>
    56f8:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    56fa:	80 93 a1 11 	sts	0x11A1, r24	; 0x8011a1 <_uplink_payload>
    56fe:	88 ea       	ldi	r24, 0xA8	; 168

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
    5700:	98 e4       	ldi	r25, 0x48	; 72
    5702:	a0 e0       	ldi	r26, 0x00	; 0
    5704:	b0 e0       	ldi	r27, 0x00	; 0
    5706:	89 83       	std	Y+1, r24	; 0x01
    5708:	9a 83       	std	Y+2, r25	; 0x02
    570a:	ab 83       	std	Y+3, r26	; 0x03
    570c:	bc 83       	std	Y+4, r27	; 0x04
    570e:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <xTaskGetTickCount>
	xLastWakeTime = xTaskGetTickCount();
    5712:	dc 01       	movw	r26, r24
    5714:	cb 01       	movw	r24, r22
    5716:	8b 87       	std	Y+11, r24	; 0x0b
    5718:	9c 87       	std	Y+12, r25	; 0x0c
    571a:	ad 87       	std	Y+13, r26	; 0x0d
    571c:	be 87       	std	Y+14, r27	; 0x0e
    571e:	89 81       	ldd	r24, Y+1	; 0x01
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    5720:	9a 81       	ldd	r25, Y+2	; 0x02
    5722:	ab 81       	ldd	r26, Y+3	; 0x03
    5724:	bc 81       	ldd	r27, Y+4	; 0x04
    5726:	9e 01       	movw	r18, r28
    5728:	25 5f       	subi	r18, 0xF5	; 245
    572a:	3f 4f       	sbci	r19, 0xFF	; 255
    572c:	ac 01       	movw	r20, r24
    572e:	bd 01       	movw	r22, r26
    5730:	c9 01       	movw	r24, r18
    5732:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskDelayUntil>
    5736:	89 e3       	ldi	r24, 0x39	; 57

		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
    5738:	90 e3       	ldi	r25, 0x30	; 48
    573a:	9e 83       	std	Y+6, r25	; 0x06
    573c:	8d 83       	std	Y+5, r24	; 0x05
    573e:	83 ea       	ldi	r24, 0xA3	; 163
		int16_t temp = 675; // Dummy temp
    5740:	92 e0       	ldi	r25, 0x02	; 2
    5742:	98 87       	std	Y+8, r25	; 0x08
    5744:	8f 83       	std	Y+7, r24	; 0x07
    5746:	8a e1       	ldi	r24, 0x1A	; 26
		uint16_t co2_ppm = 1050; // Dummy CO2
    5748:	94 e0       	ldi	r25, 0x04	; 4
    574a:	9a 87       	std	Y+10, r25	; 0x0a
    574c:	89 87       	std	Y+9, r24	; 0x09
    574e:	8d 81       	ldd	r24, Y+5	; 0x05

		_uplink_payload.bytes[0] = hum >> 8;
    5750:	9e 81       	ldd	r25, Y+6	; 0x06
    5752:	89 2f       	mov	r24, r25
    5754:	99 27       	eor	r25, r25
    5756:	80 93 a3 11 	sts	0x11A3, r24	; 0x8011a3 <_uplink_payload+0x2>
    575a:	8d 81       	ldd	r24, Y+5	; 0x05
		_uplink_payload.bytes[1] = hum & 0xFF;
    575c:	80 93 a4 11 	sts	0x11A4, r24	; 0x8011a4 <_uplink_payload+0x3>
    5760:	8f 81       	ldd	r24, Y+7	; 0x07
		_uplink_payload.bytes[2] = temp >> 8;
    5762:	98 85       	ldd	r25, Y+8	; 0x08
    5764:	89 2f       	mov	r24, r25
    5766:	99 0f       	add	r25, r25
    5768:	99 0b       	sbc	r25, r25
    576a:	80 93 a5 11 	sts	0x11A5, r24	; 0x8011a5 <_uplink_payload+0x4>
    576e:	8f 81       	ldd	r24, Y+7	; 0x07
		_uplink_payload.bytes[3] = temp & 0xFF;
    5770:	80 93 a6 11 	sts	0x11A6, r24	; 0x8011a6 <_uplink_payload+0x5>
    5774:	89 85       	ldd	r24, Y+9	; 0x09
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    5776:	9a 85       	ldd	r25, Y+10	; 0x0a
    5778:	89 2f       	mov	r24, r25
    577a:	99 27       	eor	r25, r25
    577c:	80 93 a7 11 	sts	0x11A7, r24	; 0x8011a7 <_uplink_payload+0x6>
    5780:	89 85       	ldd	r24, Y+9	; 0x09
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    5782:	80 93 a8 11 	sts	0x11A8, r24	; 0x8011a8 <_uplink_payload+0x7>
    5786:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    5788:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    578c:	61 ea       	ldi	r22, 0xA1	; 161
    578e:	71 e1       	ldi	r23, 0x11	; 17
    5790:	80 e0       	ldi	r24, 0x00	; 0
    5792:	fa d3       	rcall	.+2036   	; 0x5f88 <lora_driver_sendUploadMessage>
    5794:	e6 d5       	rcall	.+3020   	; 0x6362 <lora_driver_mapReturnCodeToText>
    5796:	29 2f       	mov	r18, r25
    5798:	2f 93       	push	r18
    579a:	8f 93       	push	r24
    579c:	8e e5       	ldi	r24, 0x5E	; 94
    579e:	93 e0       	ldi	r25, 0x03	; 3
    57a0:	89 2f       	mov	r24, r25
    57a2:	8f 93       	push	r24
    57a4:	8e e5       	ldi	r24, 0x5E	; 94
    57a6:	93 e0       	ldi	r25, 0x03	; 3
    57a8:	8f 93       	push	r24
    57aa:	0e 94 83 3a 	call	0x7506	; 0x7506 <printf>
    57ae:	0f 90       	pop	r0
    57b0:	0f 90       	pop	r0
    57b2:	0f 90       	pop	r0
    57b4:	0f 90       	pop	r0
    57b6:	b3 cf       	rjmp	.-154    	; 0x571e <lora_handler_task+0x68>

000057b8 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    57b8:	ef 92       	push	r14
    57ba:	ff 92       	push	r15
    57bc:	0f 93       	push	r16
    57be:	cf 93       	push	r28
    57c0:	df 93       	push	r29
    57c2:	cd b7       	in	r28, 0x3d	; 61
    57c4:	de b7       	in	r29, 0x3e	; 62
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    57c6:	80 91 f6 12 	lds	r24, 0x12F6	; 0x8012f6 <xTestSemaphore>
    57ca:	90 91 f7 12 	lds	r25, 0x12F7	; 0x8012f7 <xTestSemaphore+0x1>
    57ce:	89 2b       	or	r24, r25
    57d0:	c9 f4       	brne	.+50     	; 0x5804 <create_tasks_and_semaphores+0x4c>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    57d2:	81 e0       	ldi	r24, 0x01	; 1
    57d4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <xQueueCreateMutex>
    57d8:	90 93 f7 12 	sts	0x12F7, r25	; 0x8012f7 <xTestSemaphore+0x1>
    57dc:	80 93 f6 12 	sts	0x12F6, r24	; 0x8012f6 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    57e0:	80 91 f6 12 	lds	r24, 0x12F6	; 0x8012f6 <xTestSemaphore>
    57e4:	90 91 f7 12 	lds	r25, 0x12F7	; 0x8012f7 <xTestSemaphore+0x1>
    57e8:	89 2b       	or	r24, r25
    57ea:	61 f0       	breq	.+24     	; 0x5804 <create_tasks_and_semaphores+0x4c>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    57ec:	80 91 f6 12 	lds	r24, 0x12F6	; 0x8012f6 <xTestSemaphore>
    57f0:	90 91 f7 12 	lds	r25, 0x12F7	; 0x8012f7 <xTestSemaphore+0x1>
    57f4:	00 e0       	ldi	r16, 0x00	; 0
    57f6:	20 e0       	ldi	r18, 0x00	; 0
    57f8:	30 e0       	ldi	r19, 0x00	; 0
    57fa:	a9 01       	movw	r20, r18
    57fc:	60 e0       	ldi	r22, 0x00	; 0
    57fe:	70 e0       	ldi	r23, 0x00	; 0
    5800:	0e 94 cb 07 	call	0xf96	; 0xf96 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    5804:	e1 2c       	mov	r14, r1
    5806:	f1 2c       	mov	r15, r1
    5808:	02 e0       	ldi	r16, 0x02	; 2
    580a:	20 e0       	ldi	r18, 0x00	; 0
    580c:	30 e0       	ldi	r19, 0x00	; 0
    580e:	40 ec       	ldi	r20, 0xC0	; 192
    5810:	50 e0       	ldi	r21, 0x00	; 0
    5812:	63 e7       	ldi	r22, 0x73	; 115
    5814:	73 e0       	ldi	r23, 0x03	; 3
    5816:	83 e2       	ldi	r24, 0x23	; 35
    5818:	9c e2       	ldi	r25, 0x2C	; 44
    581a:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    581e:	e1 2c       	mov	r14, r1
    5820:	f1 2c       	mov	r15, r1
    5822:	01 e0       	ldi	r16, 0x01	; 1
    5824:	20 e0       	ldi	r18, 0x00	; 0
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	40 ec       	ldi	r20, 0xC0	; 192
    582a:	50 e0       	ldi	r21, 0x00	; 0
    582c:	69 e7       	ldi	r22, 0x79	; 121
    582e:	73 e0       	ldi	r23, 0x03	; 3
    5830:	8a e5       	ldi	r24, 0x5A	; 90
    5832:	9c e2       	ldi	r25, 0x2C	; 44
    5834:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskCreate>
	,  "Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    5838:	00 00       	nop
    583a:	df 91       	pop	r29
    583c:	cf 91       	pop	r28
    583e:	0f 91       	pop	r16
    5840:	ff 90       	pop	r15
    5842:	ef 90       	pop	r14
    5844:	08 95       	ret

00005846 <task1>:

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    5846:	cf 93       	push	r28
    5848:	df 93       	push	r29
    584a:	cd b7       	in	r28, 0x3d	; 61
    584c:	de b7       	in	r29, 0x3e	; 62
    584e:	2a 97       	sbiw	r28, 0x0a	; 10
    5850:	0f b6       	in	r0, 0x3f	; 63
    5852:	f8 94       	cli
    5854:	de bf       	out	0x3e, r29	; 62
    5856:	0f be       	out	0x3f, r0	; 63
    5858:	cd bf       	out	0x3d, r28	; 61
    585a:	9a 87       	std	Y+10, r25	; 0x0a
    585c:	89 87       	std	Y+9, r24	; 0x09
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms
    585e:	8f e1       	ldi	r24, 0x1F	; 31
    5860:	90 e0       	ldi	r25, 0x00	; 0
    5862:	a0 e0       	ldi	r26, 0x00	; 0
    5864:	b0 e0       	ldi	r27, 0x00	; 0
    5866:	89 83       	std	Y+1, r24	; 0x01
    5868:	9a 83       	std	Y+2, r25	; 0x02
    586a:	ab 83       	std	Y+3, r26	; 0x03
    586c:	bc 83       	std	Y+4, r27	; 0x04

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    586e:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <xTaskGetTickCount>
    5872:	dc 01       	movw	r26, r24
    5874:	cb 01       	movw	r24, r22
    5876:	8d 83       	std	Y+5, r24	; 0x05
    5878:	9e 83       	std	Y+6, r25	; 0x06
    587a:	af 83       	std	Y+7, r26	; 0x07
    587c:	b8 87       	std	Y+8, r27	; 0x08

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    587e:	89 81       	ldd	r24, Y+1	; 0x01
    5880:	9a 81       	ldd	r25, Y+2	; 0x02
    5882:	ab 81       	ldd	r26, Y+3	; 0x03
    5884:	bc 81       	ldd	r27, Y+4	; 0x04
    5886:	9e 01       	movw	r18, r28
    5888:	2b 5f       	subi	r18, 0xFB	; 251
    588a:	3f 4f       	sbci	r19, 0xFF	; 255
    588c:	ac 01       	movw	r20, r24
    588e:	bd 01       	movw	r22, r26
    5890:	c9 01       	movw	r24, r18
    5892:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskDelayUntil>
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    5896:	83 e7       	ldi	r24, 0x73	; 115
    5898:	93 e0       	ldi	r25, 0x03	; 3
    589a:	0e 94 96 3a 	call	0x752c	; 0x752c <puts>
		PORTA ^= _BV(PA0);
    589e:	82 e2       	ldi	r24, 0x22	; 34
    58a0:	90 e0       	ldi	r25, 0x00	; 0
    58a2:	22 e2       	ldi	r18, 0x22	; 34
    58a4:	30 e0       	ldi	r19, 0x00	; 0
    58a6:	f9 01       	movw	r30, r18
    58a8:	30 81       	ld	r19, Z
    58aa:	21 e0       	ldi	r18, 0x01	; 1
    58ac:	23 27       	eor	r18, r19
    58ae:	fc 01       	movw	r30, r24
    58b0:	20 83       	st	Z, r18
	}
    58b2:	e5 cf       	rjmp	.-54     	; 0x587e <task1+0x38>

000058b4 <task2>:
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    58b4:	cf 93       	push	r28
    58b6:	df 93       	push	r29
    58b8:	cd b7       	in	r28, 0x3d	; 61
    58ba:	de b7       	in	r29, 0x3e	; 62
    58bc:	2a 97       	sbiw	r28, 0x0a	; 10
    58be:	0f b6       	in	r0, 0x3f	; 63
    58c0:	f8 94       	cli
    58c2:	de bf       	out	0x3e, r29	; 62
    58c4:	0f be       	out	0x3f, r0	; 63
    58c6:	cd bf       	out	0x3d, r28	; 61
    58c8:	9a 87       	std	Y+10, r25	; 0x0a
    58ca:	89 87       	std	Y+9, r24	; 0x09
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms
    58cc:	8e e3       	ldi	r24, 0x3E	; 62
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	a0 e0       	ldi	r26, 0x00	; 0
    58d2:	b0 e0       	ldi	r27, 0x00	; 0
    58d4:	89 83       	std	Y+1, r24	; 0x01
    58d6:	9a 83       	std	Y+2, r25	; 0x02
    58d8:	ab 83       	std	Y+3, r26	; 0x03
    58da:	bc 83       	std	Y+4, r27	; 0x04

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    58dc:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <xTaskGetTickCount>
    58e0:	dc 01       	movw	r26, r24
    58e2:	cb 01       	movw	r24, r22
    58e4:	8d 83       	std	Y+5, r24	; 0x05
    58e6:	9e 83       	std	Y+6, r25	; 0x06
    58e8:	af 83       	std	Y+7, r26	; 0x07
    58ea:	b8 87       	std	Y+8, r27	; 0x08

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    58ec:	89 81       	ldd	r24, Y+1	; 0x01
    58ee:	9a 81       	ldd	r25, Y+2	; 0x02
    58f0:	ab 81       	ldd	r26, Y+3	; 0x03
    58f2:	bc 81       	ldd	r27, Y+4	; 0x04
    58f4:	9e 01       	movw	r18, r28
    58f6:	2b 5f       	subi	r18, 0xFB	; 251
    58f8:	3f 4f       	sbci	r19, 0xFF	; 255
    58fa:	ac 01       	movw	r20, r24
    58fc:	bd 01       	movw	r22, r26
    58fe:	c9 01       	movw	r24, r18
    5900:	0e 94 96 13 	call	0x272c	; 0x272c <xTaskDelayUntil>
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    5904:	89 e7       	ldi	r24, 0x79	; 121
    5906:	93 e0       	ldi	r25, 0x03	; 3
    5908:	0e 94 96 3a 	call	0x752c	; 0x752c <puts>
		PORTA ^= _BV(PA7);
    590c:	82 e2       	ldi	r24, 0x22	; 34
    590e:	90 e0       	ldi	r25, 0x00	; 0
    5910:	22 e2       	ldi	r18, 0x22	; 34
    5912:	30 e0       	ldi	r19, 0x00	; 0
    5914:	f9 01       	movw	r30, r18
    5916:	30 81       	ld	r19, Z
    5918:	20 e8       	ldi	r18, 0x80	; 128
    591a:	23 27       	eor	r18, r19
    591c:	fc 01       	movw	r30, r24
    591e:	20 83       	st	Z, r18
	}
    5920:	e5 cf       	rjmp	.-54     	; 0x58ec <task2+0x38>

00005922 <initialiseSystem>:
}

/*-----------------------------------------------------------*/
void initialiseSystem()
{
    5922:	cf 93       	push	r28
    5924:	df 93       	push	r29
    5926:	cd b7       	in	r28, 0x3d	; 61
    5928:	de b7       	in	r29, 0x3e	; 62
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    592a:	81 e2       	ldi	r24, 0x21	; 33
    592c:	90 e0       	ldi	r25, 0x00	; 0
    592e:	21 e2       	ldi	r18, 0x21	; 33
    5930:	30 e0       	ldi	r19, 0x00	; 0
    5932:	f9 01       	movw	r30, r18
    5934:	20 81       	ld	r18, Z
    5936:	21 68       	ori	r18, 0x81	; 129
    5938:	fc 01       	movw	r30, r24
    593a:	20 83       	st	Z, r18

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    593c:	80 e0       	ldi	r24, 0x00	; 0
    593e:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    5942:	3a df       	rcall	.-396    	; 0x57b8 <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    5944:	85 e0       	ldi	r24, 0x05	; 5
    5946:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    594a:	60 e0       	ldi	r22, 0x00	; 0
    594c:	70 e0       	ldi	r23, 0x00	; 0
    594e:	81 e0       	ldi	r24, 0x01	; 1
    5950:	3d d2       	rcall	.+1146   	; 0x5dcc <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    5952:	83 e0       	ldi	r24, 0x03	; 3
    5954:	6e dd       	rcall	.-1316   	; 0x5432 <lora_handler_initialise>
    5956:	00 00       	nop
}
    5958:	df 91       	pop	r29
    595a:	cf 91       	pop	r28
    595c:	08 95       	ret

0000595e <main>:
    595e:	cf 93       	push	r28

/*-----------------------------------------------------------*/
int main(void)
{
    5960:	df 93       	push	r29
    5962:	cd b7       	in	r28, 0x3d	; 61
    5964:	de b7       	in	r29, 0x3e	; 62
	initialiseSystem(); // Must be done as the very first thing!!
    5966:	dd df       	rcall	.-70     	; 0x5922 <initialiseSystem>
	printf("Program Started!!\n");
    5968:	8f e7       	ldi	r24, 0x7F	; 127
    596a:	93 e0       	ldi	r25, 0x03	; 3
    596c:	0e 94 96 3a 	call	0x752c	; 0x752c <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    5970:	0e 94 80 14 	call	0x2900	; 0x2900 <vTaskStartScheduler>

	/* Replace with your application code */
	while (1)
	{
	}
    5974:	ff cf       	rjmp	.-2      	; 0x5974 <main+0x16>

00005976 <__cmpsf2>:
    5976:	2f d0       	rcall	.+94     	; 0x59d6 <__fp_cmp>
    5978:	08 f4       	brcc	.+2      	; 0x597c <__cmpsf2+0x6>
    597a:	81 e0       	ldi	r24, 0x01	; 1
    597c:	08 95       	ret

0000597e <__fixunssfsi>:
    597e:	57 d0       	rcall	.+174    	; 0x5a2e <__fp_splitA>
    5980:	88 f0       	brcs	.+34     	; 0x59a4 <__fixunssfsi+0x26>
    5982:	9f 57       	subi	r25, 0x7F	; 127
    5984:	90 f0       	brcs	.+36     	; 0x59aa <__fixunssfsi+0x2c>
    5986:	b9 2f       	mov	r27, r25
    5988:	99 27       	eor	r25, r25
    598a:	b7 51       	subi	r27, 0x17	; 23
    598c:	a0 f0       	brcs	.+40     	; 0x59b6 <__fixunssfsi+0x38>
    598e:	d1 f0       	breq	.+52     	; 0x59c4 <__fixunssfsi+0x46>
    5990:	66 0f       	add	r22, r22
    5992:	77 1f       	adc	r23, r23
    5994:	88 1f       	adc	r24, r24
    5996:	99 1f       	adc	r25, r25
    5998:	1a f0       	brmi	.+6      	; 0x59a0 <__fixunssfsi+0x22>
    599a:	ba 95       	dec	r27
    599c:	c9 f7       	brne	.-14     	; 0x5990 <__fixunssfsi+0x12>
    599e:	12 c0       	rjmp	.+36     	; 0x59c4 <__fixunssfsi+0x46>
    59a0:	b1 30       	cpi	r27, 0x01	; 1
    59a2:	81 f0       	breq	.+32     	; 0x59c4 <__fixunssfsi+0x46>
    59a4:	5e d0       	rcall	.+188    	; 0x5a62 <__fp_zero>
    59a6:	b1 e0       	ldi	r27, 0x01	; 1
    59a8:	08 95       	ret
    59aa:	5b c0       	rjmp	.+182    	; 0x5a62 <__fp_zero>
    59ac:	67 2f       	mov	r22, r23
    59ae:	78 2f       	mov	r23, r24
    59b0:	88 27       	eor	r24, r24
    59b2:	b8 5f       	subi	r27, 0xF8	; 248
    59b4:	39 f0       	breq	.+14     	; 0x59c4 <__fixunssfsi+0x46>
    59b6:	b9 3f       	cpi	r27, 0xF9	; 249
    59b8:	cc f3       	brlt	.-14     	; 0x59ac <__fixunssfsi+0x2e>
    59ba:	86 95       	lsr	r24
    59bc:	77 95       	ror	r23
    59be:	67 95       	ror	r22
    59c0:	b3 95       	inc	r27
    59c2:	d9 f7       	brne	.-10     	; 0x59ba <__fixunssfsi+0x3c>
    59c4:	3e f4       	brtc	.+14     	; 0x59d4 <__fixunssfsi+0x56>
    59c6:	90 95       	com	r25
    59c8:	80 95       	com	r24
    59ca:	70 95       	com	r23
    59cc:	61 95       	neg	r22
    59ce:	7f 4f       	sbci	r23, 0xFF	; 255
    59d0:	8f 4f       	sbci	r24, 0xFF	; 255
    59d2:	9f 4f       	sbci	r25, 0xFF	; 255
    59d4:	08 95       	ret

000059d6 <__fp_cmp>:
    59d6:	99 0f       	add	r25, r25
    59d8:	00 08       	sbc	r0, r0
    59da:	55 0f       	add	r21, r21
    59dc:	aa 0b       	sbc	r26, r26
    59de:	e0 e8       	ldi	r30, 0x80	; 128
    59e0:	fe ef       	ldi	r31, 0xFE	; 254
    59e2:	16 16       	cp	r1, r22
    59e4:	17 06       	cpc	r1, r23
    59e6:	e8 07       	cpc	r30, r24
    59e8:	f9 07       	cpc	r31, r25
    59ea:	c0 f0       	brcs	.+48     	; 0x5a1c <__fp_cmp+0x46>
    59ec:	12 16       	cp	r1, r18
    59ee:	13 06       	cpc	r1, r19
    59f0:	e4 07       	cpc	r30, r20
    59f2:	f5 07       	cpc	r31, r21
    59f4:	98 f0       	brcs	.+38     	; 0x5a1c <__fp_cmp+0x46>
    59f6:	62 1b       	sub	r22, r18
    59f8:	73 0b       	sbc	r23, r19
    59fa:	84 0b       	sbc	r24, r20
    59fc:	95 0b       	sbc	r25, r21
    59fe:	39 f4       	brne	.+14     	; 0x5a0e <__fp_cmp+0x38>
    5a00:	0a 26       	eor	r0, r26
    5a02:	61 f0       	breq	.+24     	; 0x5a1c <__fp_cmp+0x46>
    5a04:	23 2b       	or	r18, r19
    5a06:	24 2b       	or	r18, r20
    5a08:	25 2b       	or	r18, r21
    5a0a:	21 f4       	brne	.+8      	; 0x5a14 <__fp_cmp+0x3e>
    5a0c:	08 95       	ret
    5a0e:	0a 26       	eor	r0, r26
    5a10:	09 f4       	brne	.+2      	; 0x5a14 <__fp_cmp+0x3e>
    5a12:	a1 40       	sbci	r26, 0x01	; 1
    5a14:	a6 95       	lsr	r26
    5a16:	8f ef       	ldi	r24, 0xFF	; 255
    5a18:	81 1d       	adc	r24, r1
    5a1a:	81 1d       	adc	r24, r1
    5a1c:	08 95       	ret

00005a1e <__fp_split3>:
    5a1e:	57 fd       	sbrc	r21, 7
    5a20:	90 58       	subi	r25, 0x80	; 128
    5a22:	44 0f       	add	r20, r20
    5a24:	55 1f       	adc	r21, r21
    5a26:	59 f0       	breq	.+22     	; 0x5a3e <__fp_splitA+0x10>
    5a28:	5f 3f       	cpi	r21, 0xFF	; 255
    5a2a:	71 f0       	breq	.+28     	; 0x5a48 <__fp_splitA+0x1a>
    5a2c:	47 95       	ror	r20

00005a2e <__fp_splitA>:
    5a2e:	88 0f       	add	r24, r24
    5a30:	97 fb       	bst	r25, 7
    5a32:	99 1f       	adc	r25, r25
    5a34:	61 f0       	breq	.+24     	; 0x5a4e <__fp_splitA+0x20>
    5a36:	9f 3f       	cpi	r25, 0xFF	; 255
    5a38:	79 f0       	breq	.+30     	; 0x5a58 <__fp_splitA+0x2a>
    5a3a:	87 95       	ror	r24
    5a3c:	08 95       	ret
    5a3e:	12 16       	cp	r1, r18
    5a40:	13 06       	cpc	r1, r19
    5a42:	14 06       	cpc	r1, r20
    5a44:	55 1f       	adc	r21, r21
    5a46:	f2 cf       	rjmp	.-28     	; 0x5a2c <__fp_split3+0xe>
    5a48:	46 95       	lsr	r20
    5a4a:	f1 df       	rcall	.-30     	; 0x5a2e <__fp_splitA>
    5a4c:	08 c0       	rjmp	.+16     	; 0x5a5e <__fp_splitA+0x30>
    5a4e:	16 16       	cp	r1, r22
    5a50:	17 06       	cpc	r1, r23
    5a52:	18 06       	cpc	r1, r24
    5a54:	99 1f       	adc	r25, r25
    5a56:	f1 cf       	rjmp	.-30     	; 0x5a3a <__fp_splitA+0xc>
    5a58:	86 95       	lsr	r24
    5a5a:	71 05       	cpc	r23, r1
    5a5c:	61 05       	cpc	r22, r1
    5a5e:	08 94       	sec
    5a60:	08 95       	ret

00005a62 <__fp_zero>:
    5a62:	e8 94       	clt

00005a64 <__fp_szero>:
    5a64:	bb 27       	eor	r27, r27
    5a66:	66 27       	eor	r22, r22
    5a68:	77 27       	eor	r23, r23
    5a6a:	cb 01       	movw	r24, r22
    5a6c:	97 f9       	bld	r25, 7
    5a6e:	08 95       	ret

00005a70 <__gesf2>:
    5a70:	b2 df       	rcall	.-156    	; 0x59d6 <__fp_cmp>
    5a72:	08 f4       	brcc	.+2      	; 0x5a76 <__gesf2+0x6>
    5a74:	8f ef       	ldi	r24, 0xFF	; 255
    5a76:	08 95       	ret

00005a78 <__mulsf3>:
    5a78:	0b d0       	rcall	.+22     	; 0x5a90 <__mulsf3x>
    5a7a:	78 c0       	rjmp	.+240    	; 0x5b6c <__fp_round>
    5a7c:	69 d0       	rcall	.+210    	; 0x5b50 <__fp_pscA>
    5a7e:	28 f0       	brcs	.+10     	; 0x5a8a <__mulsf3+0x12>
    5a80:	6e d0       	rcall	.+220    	; 0x5b5e <__fp_pscB>
    5a82:	18 f0       	brcs	.+6      	; 0x5a8a <__mulsf3+0x12>
    5a84:	95 23       	and	r25, r21
    5a86:	09 f0       	breq	.+2      	; 0x5a8a <__mulsf3+0x12>
    5a88:	5a c0       	rjmp	.+180    	; 0x5b3e <__fp_inf>
    5a8a:	5f c0       	rjmp	.+190    	; 0x5b4a <__fp_nan>
    5a8c:	11 24       	eor	r1, r1
    5a8e:	ea cf       	rjmp	.-44     	; 0x5a64 <__fp_szero>

00005a90 <__mulsf3x>:
    5a90:	c6 df       	rcall	.-116    	; 0x5a1e <__fp_split3>
    5a92:	a0 f3       	brcs	.-24     	; 0x5a7c <__mulsf3+0x4>

00005a94 <__mulsf3_pse>:
    5a94:	95 9f       	mul	r25, r21
    5a96:	d1 f3       	breq	.-12     	; 0x5a8c <__mulsf3+0x14>
    5a98:	95 0f       	add	r25, r21
    5a9a:	50 e0       	ldi	r21, 0x00	; 0
    5a9c:	55 1f       	adc	r21, r21
    5a9e:	62 9f       	mul	r22, r18
    5aa0:	f0 01       	movw	r30, r0
    5aa2:	72 9f       	mul	r23, r18
    5aa4:	bb 27       	eor	r27, r27
    5aa6:	f0 0d       	add	r31, r0
    5aa8:	b1 1d       	adc	r27, r1
    5aaa:	63 9f       	mul	r22, r19
    5aac:	aa 27       	eor	r26, r26
    5aae:	f0 0d       	add	r31, r0
    5ab0:	b1 1d       	adc	r27, r1
    5ab2:	aa 1f       	adc	r26, r26
    5ab4:	64 9f       	mul	r22, r20
    5ab6:	66 27       	eor	r22, r22
    5ab8:	b0 0d       	add	r27, r0
    5aba:	a1 1d       	adc	r26, r1
    5abc:	66 1f       	adc	r22, r22
    5abe:	82 9f       	mul	r24, r18
    5ac0:	22 27       	eor	r18, r18
    5ac2:	b0 0d       	add	r27, r0
    5ac4:	a1 1d       	adc	r26, r1
    5ac6:	62 1f       	adc	r22, r18
    5ac8:	73 9f       	mul	r23, r19
    5aca:	b0 0d       	add	r27, r0
    5acc:	a1 1d       	adc	r26, r1
    5ace:	62 1f       	adc	r22, r18
    5ad0:	83 9f       	mul	r24, r19
    5ad2:	a0 0d       	add	r26, r0
    5ad4:	61 1d       	adc	r22, r1
    5ad6:	22 1f       	adc	r18, r18
    5ad8:	74 9f       	mul	r23, r20
    5ada:	33 27       	eor	r19, r19
    5adc:	a0 0d       	add	r26, r0
    5ade:	61 1d       	adc	r22, r1
    5ae0:	23 1f       	adc	r18, r19
    5ae2:	84 9f       	mul	r24, r20
    5ae4:	60 0d       	add	r22, r0
    5ae6:	21 1d       	adc	r18, r1
    5ae8:	82 2f       	mov	r24, r18
    5aea:	76 2f       	mov	r23, r22
    5aec:	6a 2f       	mov	r22, r26
    5aee:	11 24       	eor	r1, r1
    5af0:	9f 57       	subi	r25, 0x7F	; 127
    5af2:	50 40       	sbci	r21, 0x00	; 0
    5af4:	8a f0       	brmi	.+34     	; 0x5b18 <__mulsf3_pse+0x84>
    5af6:	e1 f0       	breq	.+56     	; 0x5b30 <__mulsf3_pse+0x9c>
    5af8:	88 23       	and	r24, r24
    5afa:	4a f0       	brmi	.+18     	; 0x5b0e <__mulsf3_pse+0x7a>
    5afc:	ee 0f       	add	r30, r30
    5afe:	ff 1f       	adc	r31, r31
    5b00:	bb 1f       	adc	r27, r27
    5b02:	66 1f       	adc	r22, r22
    5b04:	77 1f       	adc	r23, r23
    5b06:	88 1f       	adc	r24, r24
    5b08:	91 50       	subi	r25, 0x01	; 1
    5b0a:	50 40       	sbci	r21, 0x00	; 0
    5b0c:	a9 f7       	brne	.-22     	; 0x5af8 <__mulsf3_pse+0x64>
    5b0e:	9e 3f       	cpi	r25, 0xFE	; 254
    5b10:	51 05       	cpc	r21, r1
    5b12:	70 f0       	brcs	.+28     	; 0x5b30 <__mulsf3_pse+0x9c>
    5b14:	14 c0       	rjmp	.+40     	; 0x5b3e <__fp_inf>
    5b16:	a6 cf       	rjmp	.-180    	; 0x5a64 <__fp_szero>
    5b18:	5f 3f       	cpi	r21, 0xFF	; 255
    5b1a:	ec f3       	brlt	.-6      	; 0x5b16 <__mulsf3_pse+0x82>
    5b1c:	98 3e       	cpi	r25, 0xE8	; 232
    5b1e:	dc f3       	brlt	.-10     	; 0x5b16 <__mulsf3_pse+0x82>
    5b20:	86 95       	lsr	r24
    5b22:	77 95       	ror	r23
    5b24:	67 95       	ror	r22
    5b26:	b7 95       	ror	r27
    5b28:	f7 95       	ror	r31
    5b2a:	e7 95       	ror	r30
    5b2c:	9f 5f       	subi	r25, 0xFF	; 255
    5b2e:	c1 f7       	brne	.-16     	; 0x5b20 <__mulsf3_pse+0x8c>
    5b30:	fe 2b       	or	r31, r30
    5b32:	88 0f       	add	r24, r24
    5b34:	91 1d       	adc	r25, r1
    5b36:	96 95       	lsr	r25
    5b38:	87 95       	ror	r24
    5b3a:	97 f9       	bld	r25, 7
    5b3c:	08 95       	ret

00005b3e <__fp_inf>:
    5b3e:	97 f9       	bld	r25, 7
    5b40:	9f 67       	ori	r25, 0x7F	; 127
    5b42:	80 e8       	ldi	r24, 0x80	; 128
    5b44:	70 e0       	ldi	r23, 0x00	; 0
    5b46:	60 e0       	ldi	r22, 0x00	; 0
    5b48:	08 95       	ret

00005b4a <__fp_nan>:
    5b4a:	9f ef       	ldi	r25, 0xFF	; 255
    5b4c:	80 ec       	ldi	r24, 0xC0	; 192
    5b4e:	08 95       	ret

00005b50 <__fp_pscA>:
    5b50:	00 24       	eor	r0, r0
    5b52:	0a 94       	dec	r0
    5b54:	16 16       	cp	r1, r22
    5b56:	17 06       	cpc	r1, r23
    5b58:	18 06       	cpc	r1, r24
    5b5a:	09 06       	cpc	r0, r25
    5b5c:	08 95       	ret

00005b5e <__fp_pscB>:
    5b5e:	00 24       	eor	r0, r0
    5b60:	0a 94       	dec	r0
    5b62:	12 16       	cp	r1, r18
    5b64:	13 06       	cpc	r1, r19
    5b66:	14 06       	cpc	r1, r20
    5b68:	05 06       	cpc	r0, r21
    5b6a:	08 95       	ret

00005b6c <__fp_round>:
    5b6c:	09 2e       	mov	r0, r25
    5b6e:	03 94       	inc	r0
    5b70:	00 0c       	add	r0, r0
    5b72:	11 f4       	brne	.+4      	; 0x5b78 <__fp_round+0xc>
    5b74:	88 23       	and	r24, r24
    5b76:	52 f0       	brmi	.+20     	; 0x5b8c <__fp_round+0x20>
    5b78:	bb 0f       	add	r27, r27
    5b7a:	40 f4       	brcc	.+16     	; 0x5b8c <__fp_round+0x20>
    5b7c:	bf 2b       	or	r27, r31
    5b7e:	11 f4       	brne	.+4      	; 0x5b84 <__fp_round+0x18>
    5b80:	60 ff       	sbrs	r22, 0
    5b82:	04 c0       	rjmp	.+8      	; 0x5b8c <__fp_round+0x20>
    5b84:	6f 5f       	subi	r22, 0xFF	; 255
    5b86:	7f 4f       	sbci	r23, 0xFF	; 255
    5b88:	8f 4f       	sbci	r24, 0xFF	; 255
    5b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b8c:	08 95       	ret

00005b8e <_serialCallBack>:
    5b8e:	0f 93       	push	r16
    5b90:	1f 93       	push	r17
    5b92:	cf 93       	push	r28
    5b94:	df 93       	push	r29
    5b96:	1f 92       	push	r1
    5b98:	1f 92       	push	r1
    5b9a:	cd b7       	in	r28, 0x3d	; 61
    5b9c:	de b7       	in	r29, 0x3e	; 62
    5b9e:	8c 01       	movw	r16, r24
    5ba0:	19 82       	std	Y+1, r1	; 0x01
    5ba2:	2d c0       	rjmp	.+90     	; 0x5bfe <_serialCallBack+0x70>
    5ba4:	e0 91 1b 12 	lds	r30, 0x121B	; 0x80121b <rec_buf_inp.2878>
    5ba8:	ec 32       	cpi	r30, 0x2C	; 44
    5baa:	50 f4       	brcc	.+20     	; 0x5bc0 <_serialCallBack+0x32>
    5bac:	81 e0       	ldi	r24, 0x01	; 1
    5bae:	8e 0f       	add	r24, r30
    5bb0:	80 93 1b 12 	sts	0x121B, r24	; 0x80121b <rec_buf_inp.2878>
    5bb4:	f0 e0       	ldi	r31, 0x00	; 0
    5bb6:	e3 5b       	subi	r30, 0xB3	; 179
    5bb8:	fd 4e       	sbci	r31, 0xED	; 237
    5bba:	8a 81       	ldd	r24, Y+2	; 0x02
    5bbc:	80 83       	st	Z, r24
    5bbe:	02 c0       	rjmp	.+4      	; 0x5bc4 <_serialCallBack+0x36>
    5bc0:	10 92 1b 12 	sts	0x121B, r1	; 0x80121b <rec_buf_inp.2878>
    5bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc6:	8a 30       	cpi	r24, 0x0A	; 10
    5bc8:	d1 f4       	brne	.+52     	; 0x5bfe <_serialCallBack+0x70>
    5bca:	40 91 1b 12 	lds	r20, 0x121B	; 0x80121b <rec_buf_inp.2878>
    5bce:	50 e0       	ldi	r21, 0x00	; 0
    5bd0:	fa 01       	movw	r30, r20
    5bd2:	e5 5b       	subi	r30, 0xB5	; 181
    5bd4:	fd 4e       	sbci	r31, 0xED	; 237
    5bd6:	10 82       	st	Z, r1
    5bd8:	41 50       	subi	r20, 0x01	; 1
    5bda:	51 09       	sbc	r21, r1
    5bdc:	9e 01       	movw	r18, r28
    5bde:	2f 5f       	subi	r18, 0xFF	; 255
    5be0:	3f 4f       	sbci	r19, 0xFF	; 255
    5be2:	6d e4       	ldi	r22, 0x4D	; 77
    5be4:	72 e1       	ldi	r23, 0x12	; 18
    5be6:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    5bea:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    5bee:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <xStreamBufferSendFromISR>
    5bf2:	89 81       	ldd	r24, Y+1	; 0x01
    5bf4:	81 11       	cpse	r24, r1
    5bf6:	0e 94 7d 05 	call	0xafa	; 0xafa <vPortYield>
    5bfa:	10 92 1b 12 	sts	0x121B, r1	; 0x80121b <rec_buf_inp.2878>
    5bfe:	be 01       	movw	r22, r28
    5c00:	6e 5f       	subi	r22, 0xFE	; 254
    5c02:	7f 4f       	sbci	r23, 0xFF	; 255
    5c04:	c8 01       	movw	r24, r16
    5c06:	4a d5       	rcall	.+2708   	; 0x669c <serial_getByte>
    5c08:	88 23       	and	r24, r24
    5c0a:	61 f2       	breq	.-104    	; 0x5ba4 <_serialCallBack+0x16>
    5c0c:	0f 90       	pop	r0
    5c0e:	0f 90       	pop	r0
    5c10:	df 91       	pop	r29
    5c12:	cf 91       	pop	r28
    5c14:	1f 91       	pop	r17
    5c16:	0f 91       	pop	r16
    5c18:	08 95       	ret

00005c1a <_uploadMessage>:
    5c1a:	0f 93       	push	r16
    5c1c:	1f 93       	push	r17
    5c1e:	cf 93       	push	r28
    5c20:	df 93       	push	r29
    5c22:	8c 01       	movw	r16, r24
    5c24:	eb 01       	movw	r28, r22
    5c26:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    5c2a:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    5c2e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <xStreamBufferReset>
    5c32:	b8 01       	movw	r22, r16
    5c34:	87 eb       	ldi	r24, 0xB7	; 183
    5c36:	91 e1       	ldi	r25, 0x11	; 17
    5c38:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <strcpy>
    5c3c:	20 97       	sbiw	r28, 0x00	; 0
    5c3e:	79 f0       	breq	.+30     	; 0x5c5e <_uploadMessage+0x44>
    5c40:	e7 eb       	ldi	r30, 0xB7	; 183
    5c42:	f1 e1       	ldi	r31, 0x11	; 17
    5c44:	01 90       	ld	r0, Z+
    5c46:	00 20       	and	r0, r0
    5c48:	e9 f7       	brne	.-6      	; 0x5c44 <_uploadMessage+0x2a>
    5c4a:	31 97       	sbiw	r30, 0x01	; 1
    5c4c:	80 e2       	ldi	r24, 0x20	; 32
    5c4e:	90 e0       	ldi	r25, 0x00	; 0
    5c50:	91 83       	std	Z+1, r25	; 0x01
    5c52:	80 83       	st	Z, r24
    5c54:	be 01       	movw	r22, r28
    5c56:	87 eb       	ldi	r24, 0xB7	; 183
    5c58:	91 e1       	ldi	r25, 0x11	; 17
    5c5a:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <strcat>
    5c5e:	e7 eb       	ldi	r30, 0xB7	; 183
    5c60:	f1 e1       	ldi	r31, 0x11	; 17
    5c62:	df 01       	movw	r26, r30
    5c64:	0d 90       	ld	r0, X+
    5c66:	00 20       	and	r0, r0
    5c68:	e9 f7       	brne	.-6      	; 0x5c64 <_uploadMessage+0x4a>
    5c6a:	11 97       	sbiw	r26, 0x01	; 1
    5c6c:	8d e0       	ldi	r24, 0x0D	; 13
    5c6e:	9a e0       	ldi	r25, 0x0A	; 10
    5c70:	11 96       	adiw	r26, 0x01	; 1
    5c72:	9c 93       	st	X, r25
    5c74:	8e 93       	st	-X, r24
    5c76:	12 96       	adiw	r26, 0x02	; 2
    5c78:	1c 92       	st	X, r1
    5c7a:	01 90       	ld	r0, Z+
    5c7c:	00 20       	and	r0, r0
    5c7e:	e9 f7       	brne	.-6      	; 0x5c7a <_uploadMessage+0x60>
    5c80:	31 97       	sbiw	r30, 0x01	; 1
    5c82:	e7 5b       	subi	r30, 0xB7	; 183
    5c84:	f1 41       	sbci	r31, 0x11	; 17
    5c86:	ae 2f       	mov	r26, r30
    5c88:	87 eb       	ldi	r24, 0xB7	; 183
    5c8a:	91 e1       	ldi	r25, 0x11	; 17
    5c8c:	ac 01       	movw	r20, r24
    5c8e:	6a 2f       	mov	r22, r26
    5c90:	80 91 20 12 	lds	r24, 0x1220	; 0x801220 <_rn2483_serial>
    5c94:	90 91 21 12 	lds	r25, 0x1221	; 0x801221 <_rn2483_serial+0x1>
    5c98:	ac d4       	rcall	.+2392   	; 0x65f2 <serial_sendBytes>
    5c9a:	81 11       	cpse	r24, r1
    5c9c:	11 c0       	rjmp	.+34     	; 0x5cc0 <_uploadMessage+0xa6>
    5c9e:	08 e2       	ldi	r16, 0x28	; 40
    5ca0:	15 e0       	ldi	r17, 0x05	; 5
    5ca2:	20 e0       	ldi	r18, 0x00	; 0
    5ca4:	30 e0       	ldi	r19, 0x00	; 0
    5ca6:	4d e2       	ldi	r20, 0x2D	; 45
    5ca8:	50 e0       	ldi	r21, 0x00	; 0
    5caa:	67 ea       	ldi	r22, 0xA7	; 167
    5cac:	72 e1       	ldi	r23, 0x12	; 18
    5cae:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    5cb2:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    5cb6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <xStreamBufferReceive>
    5cba:	87 ea       	ldi	r24, 0xA7	; 167
    5cbc:	92 e1       	ldi	r25, 0x12	; 18
    5cbe:	02 c0       	rjmp	.+4      	; 0x5cc4 <_uploadMessage+0xaa>
    5cc0:	80 e0       	ldi	r24, 0x00	; 0
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	df 91       	pop	r29
    5cc6:	cf 91       	pop	r28
    5cc8:	1f 91       	pop	r17
    5cca:	0f 91       	pop	r16
    5ccc:	08 95       	ret

00005cce <_reply2ReturnCode>:
    5cce:	2f 92       	push	r2
    5cd0:	3f 92       	push	r3
    5cd2:	4f 92       	push	r4
    5cd4:	5f 92       	push	r5
    5cd6:	6f 92       	push	r6
    5cd8:	7f 92       	push	r7
    5cda:	8f 92       	push	r8
    5cdc:	9f 92       	push	r9
    5cde:	af 92       	push	r10
    5ce0:	bf 92       	push	r11
    5ce2:	cf 92       	push	r12
    5ce4:	df 92       	push	r13
    5ce6:	ef 92       	push	r14
    5ce8:	ff 92       	push	r15
    5cea:	0f 93       	push	r16
    5cec:	1f 93       	push	r17
    5cee:	cf 93       	push	r28
    5cf0:	df 93       	push	r29
    5cf2:	5c 01       	movw	r10, r24
    5cf4:	fc 01       	movw	r30, r24
    5cf6:	01 90       	ld	r0, Z+
    5cf8:	00 20       	and	r0, r0
    5cfa:	e9 f7       	brne	.-6      	; 0x5cf6 <_reply2ReturnCode+0x28>
    5cfc:	31 97       	sbiw	r30, 0x01	; 1
    5cfe:	6f 01       	movw	r12, r30
    5d00:	c8 1a       	sub	r12, r24
    5d02:	d9 0a       	sbc	r13, r25
    5d04:	5c 2c       	mov	r5, r12
    5d06:	0f 2e       	mov	r0, r31
    5d08:	fa e4       	ldi	r31, 0x4A	; 74
    5d0a:	8f 2e       	mov	r8, r31
    5d0c:	f6 e0       	ldi	r31, 0x06	; 6
    5d0e:	9f 2e       	mov	r9, r31
    5d10:	f0 2d       	mov	r31, r0
    5d12:	e1 2c       	mov	r14, r1
    5d14:	f1 2c       	mov	r15, r1
    5d16:	4c 2c       	mov	r4, r12
    5d18:	37 01       	movw	r6, r14
    5d1a:	f4 01       	movw	r30, r8
    5d1c:	01 81       	ldd	r16, Z+1	; 0x01
    5d1e:	12 81       	ldd	r17, Z+2	; 0x02
    5d20:	e8 01       	movw	r28, r16
    5d22:	09 90       	ld	r0, Y+
    5d24:	00 20       	and	r0, r0
    5d26:	e9 f7       	brne	.-6      	; 0x5d22 <_reply2ReturnCode+0x54>
    5d28:	21 97       	sbiw	r28, 0x01	; 1
    5d2a:	c0 1b       	sub	r28, r16
    5d2c:	d1 0b       	sbc	r29, r17
    5d2e:	3c 2e       	mov	r3, r28
    5d30:	f9 e0       	ldi	r31, 0x09	; 9
    5d32:	cf 16       	cp	r12, r31
    5d34:	d1 04       	cpc	r13, r1
    5d36:	58 f0       	brcs	.+22     	; 0x5d4e <_reply2ReturnCode+0x80>
    5d38:	f4 01       	movw	r30, r8
    5d3a:	20 80       	ld	r2, Z
    5d3c:	fe e0       	ldi	r31, 0x0E	; 14
    5d3e:	2f 12       	cpse	r2, r31
    5d40:	06 c0       	rjmp	.+12     	; 0x5d4e <_reply2ReturnCode+0x80>
    5d42:	b8 01       	movw	r22, r16
    5d44:	c5 01       	movw	r24, r10
    5d46:	0e 94 34 3a 	call	0x7468	; 0x7468 <strcasestr>
    5d4a:	89 2b       	or	r24, r25
    5d4c:	09 f5       	brne	.+66     	; 0x5d90 <_reply2ReturnCode+0xc2>
    5d4e:	44 2d       	mov	r20, r4
    5d50:	35 14       	cp	r3, r5
    5d52:	08 f4       	brcc	.+2      	; 0x5d56 <_reply2ReturnCode+0x88>
    5d54:	4c 2f       	mov	r20, r28
    5d56:	50 e0       	ldi	r21, 0x00	; 0
    5d58:	b8 01       	movw	r22, r16
    5d5a:	c5 01       	movw	r24, r10
    5d5c:	0e 94 6b 3a 	call	0x74d6	; 0x74d6 <strncasecmp>
    5d60:	89 2b       	or	r24, r25
    5d62:	49 f4       	brne	.+18     	; 0x5d76 <_reply2ReturnCode+0xa8>
    5d64:	f3 01       	movw	r30, r6
    5d66:	ee 0f       	add	r30, r30
    5d68:	ff 1f       	adc	r31, r31
    5d6a:	e6 0d       	add	r30, r6
    5d6c:	f7 1d       	adc	r31, r7
    5d6e:	e6 5b       	subi	r30, 0xB6	; 182
    5d70:	f9 4f       	sbci	r31, 0xF9	; 249
    5d72:	20 80       	ld	r2, Z
    5d74:	0d c0       	rjmp	.+26     	; 0x5d90 <_reply2ReturnCode+0xc2>
    5d76:	8f ef       	ldi	r24, 0xFF	; 255
    5d78:	e8 1a       	sub	r14, r24
    5d7a:	f8 0a       	sbc	r15, r24
    5d7c:	e3 e0       	ldi	r30, 0x03	; 3
    5d7e:	8e 0e       	add	r8, r30
    5d80:	91 1c       	adc	r9, r1
    5d82:	f1 e1       	ldi	r31, 0x11	; 17
    5d84:	ef 16       	cp	r14, r31
    5d86:	f1 04       	cpc	r15, r1
    5d88:	39 f6       	brne	.-114    	; 0x5d18 <_reply2ReturnCode+0x4a>
    5d8a:	68 94       	set
    5d8c:	22 24       	eor	r2, r2
    5d8e:	24 f8       	bld	r2, 4
    5d90:	82 2d       	mov	r24, r2
    5d92:	df 91       	pop	r29
    5d94:	cf 91       	pop	r28
    5d96:	1f 91       	pop	r17
    5d98:	0f 91       	pop	r16
    5d9a:	ff 90       	pop	r15
    5d9c:	ef 90       	pop	r14
    5d9e:	df 90       	pop	r13
    5da0:	cf 90       	pop	r12
    5da2:	bf 90       	pop	r11
    5da4:	af 90       	pop	r10
    5da6:	9f 90       	pop	r9
    5da8:	8f 90       	pop	r8
    5daa:	7f 90       	pop	r7
    5dac:	6f 90       	pop	r6
    5dae:	5f 90       	pop	r5
    5db0:	4f 90       	pop	r4
    5db2:	3f 90       	pop	r3
    5db4:	2f 90       	pop	r2
    5db6:	08 95       	ret

00005db8 <_uploadMessageRc>:
    5db8:	30 df       	rcall	.-416    	; 0x5c1a <_uploadMessage>
    5dba:	89 cf       	rjmp	.-238    	; 0x5cce <_reply2ReturnCode>
    5dbc:	08 95       	ret

00005dbe <lora_driver_flushBuffers>:
    5dbe:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    5dc2:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    5dc6:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <xStreamBufferReset>
    5dca:	08 95       	ret

00005dcc <lora_driver_initialise>:
    5dcc:	8f 92       	push	r8
    5dce:	9f 92       	push	r9
    5dd0:	af 92       	push	r10
    5dd2:	cf 92       	push	r12
    5dd4:	ef 92       	push	r14
    5dd6:	0f 93       	push	r16
    5dd8:	1f 93       	push	r17
    5dda:	cf 93       	push	r28
    5ddc:	c8 2f       	mov	r28, r24
    5dde:	8b 01       	movw	r16, r22
    5de0:	41 e0       	ldi	r20, 0x01	; 1
    5de2:	60 e0       	ldi	r22, 0x00	; 0
    5de4:	70 e0       	ldi	r23, 0x00	; 0
    5de6:	88 ec       	ldi	r24, 0xC8	; 200
    5de8:	90 e0       	ldi	r25, 0x00	; 0
    5dea:	0e 94 a4 0b 	call	0x1748	; 0x1748 <xStreamBufferGenericCreate>
    5dee:	90 93 1f 12 	sts	0x121F, r25	; 0x80121f <_serialReplyBufferHandle+0x1>
    5df2:	80 93 1e 12 	sts	0x121E, r24	; 0x80121e <_serialReplyBufferHandle>
    5df6:	10 93 1d 12 	sts	0x121D, r17	; 0x80121d <_downlinkMessageBuffer+0x1>
    5dfa:	00 93 1c 12 	sts	0x121C, r16	; 0x80121c <_downlinkMessageBuffer>
    5dfe:	0f 2e       	mov	r0, r31
    5e00:	f7 ec       	ldi	r31, 0xC7	; 199
    5e02:	8f 2e       	mov	r8, r31
    5e04:	fd e2       	ldi	r31, 0x2D	; 45
    5e06:	9f 2e       	mov	r9, r31
    5e08:	f0 2d       	mov	r31, r0
    5e0a:	68 94       	set
    5e0c:	aa 24       	eor	r10, r10
    5e0e:	a6 f8       	bld	r10, 6
    5e10:	68 94       	set
    5e12:	cc 24       	eor	r12, r12
    5e14:	c6 f8       	bld	r12, 6
    5e16:	e1 2c       	mov	r14, r1
    5e18:	00 e0       	ldi	r16, 0x00	; 0
    5e1a:	23 e0       	ldi	r18, 0x03	; 3
    5e1c:	40 e0       	ldi	r20, 0x00	; 0
    5e1e:	51 ee       	ldi	r21, 0xE1	; 225
    5e20:	60 e0       	ldi	r22, 0x00	; 0
    5e22:	70 e0       	ldi	r23, 0x00	; 0
    5e24:	8c 2f       	mov	r24, r28
    5e26:	1e d3       	rcall	.+1596   	; 0x6464 <serial_create>
    5e28:	90 93 21 12 	sts	0x1221, r25	; 0x801221 <_rn2483_serial+0x1>
    5e2c:	80 93 20 12 	sts	0x1220, r24	; 0x801220 <_rn2483_serial>
    5e30:	e7 e0       	ldi	r30, 0x07	; 7
    5e32:	f1 e0       	ldi	r31, 0x01	; 1
    5e34:	80 81       	ld	r24, Z
    5e36:	80 61       	ori	r24, 0x10	; 16
    5e38:	80 83       	st	Z, r24
    5e3a:	cf 91       	pop	r28
    5e3c:	1f 91       	pop	r17
    5e3e:	0f 91       	pop	r16
    5e40:	ef 90       	pop	r14
    5e42:	cf 90       	pop	r12
    5e44:	af 90       	pop	r10
    5e46:	9f 90       	pop	r9
    5e48:	8f 90       	pop	r8
    5e4a:	08 95       	ret

00005e4c <lora_driver_resetRn2483>:
    5e4c:	88 23       	and	r24, r24
    5e4e:	31 f0       	breq	.+12     	; 0x5e5c <lora_driver_resetRn2483+0x10>
    5e50:	e8 e0       	ldi	r30, 0x08	; 8
    5e52:	f1 e0       	ldi	r31, 0x01	; 1
    5e54:	80 81       	ld	r24, Z
    5e56:	8f 7e       	andi	r24, 0xEF	; 239
    5e58:	80 83       	st	Z, r24
    5e5a:	08 95       	ret
    5e5c:	e8 e0       	ldi	r30, 0x08	; 8
    5e5e:	f1 e0       	ldi	r31, 0x01	; 1
    5e60:	80 81       	ld	r24, Z
    5e62:	80 61       	ori	r24, 0x10	; 16
    5e64:	80 83       	st	Z, r24
    5e66:	08 95       	ret

00005e68 <lora_driver_rn2483FactoryReset>:
    5e68:	60 e0       	ldi	r22, 0x00	; 0
    5e6a:	70 e0       	ldi	r23, 0x00	; 0
    5e6c:	80 ed       	ldi	r24, 0xD0	; 208
    5e6e:	93 e0       	ldi	r25, 0x03	; 3
    5e70:	d4 de       	rcall	.-600    	; 0x5c1a <_uploadMessage>
    5e72:	e7 ea       	ldi	r30, 0xA7	; 167
    5e74:	f2 e1       	ldi	r31, 0x12	; 18
    5e76:	01 90       	ld	r0, Z+
    5e78:	00 20       	and	r0, r0
    5e7a:	e9 f7       	brne	.-6      	; 0x5e76 <lora_driver_rn2483FactoryReset+0xe>
    5e7c:	31 97       	sbiw	r30, 0x01	; 1
    5e7e:	e7 5a       	subi	r30, 0xA7	; 167
    5e80:	f2 41       	sbci	r31, 0x12	; 18
    5e82:	81 e0       	ldi	r24, 0x01	; 1
    5e84:	75 97       	sbiw	r30, 0x15	; 21
    5e86:	08 f0       	brcs	.+2      	; 0x5e8a <lora_driver_rn2483FactoryReset+0x22>
    5e88:	80 e0       	ldi	r24, 0x00	; 0
    5e8a:	08 95       	ret

00005e8c <lora_driver_getRn2483Hweui>:
    5e8c:	cf 93       	push	r28
    5e8e:	df 93       	push	r29
    5e90:	ec 01       	movw	r28, r24
    5e92:	60 e0       	ldi	r22, 0x00	; 0
    5e94:	70 e0       	ldi	r23, 0x00	; 0
    5e96:	81 ee       	ldi	r24, 0xE1	; 225
    5e98:	93 e0       	ldi	r25, 0x03	; 3
    5e9a:	bf de       	rcall	.-642    	; 0x5c1a <_uploadMessage>
    5e9c:	e7 ea       	ldi	r30, 0xA7	; 167
    5e9e:	f2 e1       	ldi	r31, 0x12	; 18
    5ea0:	01 90       	ld	r0, Z+
    5ea2:	00 20       	and	r0, r0
    5ea4:	e9 f7       	brne	.-6      	; 0x5ea0 <lora_driver_getRn2483Hweui+0x14>
    5ea6:	e8 5b       	subi	r30, 0xB8	; 184
    5ea8:	f2 41       	sbci	r31, 0x12	; 18
    5eaa:	39 f4       	brne	.+14     	; 0x5eba <lora_driver_getRn2483Hweui+0x2e>
    5eac:	67 ea       	ldi	r22, 0xA7	; 167
    5eae:	72 e1       	ldi	r23, 0x12	; 18
    5eb0:	ce 01       	movw	r24, r28
    5eb2:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <strcpy>
    5eb6:	80 e0       	ldi	r24, 0x00	; 0
    5eb8:	02 c0       	rjmp	.+4      	; 0x5ebe <lora_driver_getRn2483Hweui+0x32>
    5eba:	18 82       	st	Y, r1
    5ebc:	81 e0       	ldi	r24, 0x01	; 1
    5ebe:	df 91       	pop	r29
    5ec0:	cf 91       	pop	r28
    5ec2:	08 95       	ret

00005ec4 <lora_driver_setDeviceIdentifier>:
    5ec4:	fc 01       	movw	r30, r24
    5ec6:	01 90       	ld	r0, Z+
    5ec8:	00 20       	and	r0, r0
    5eca:	e9 f7       	brne	.-6      	; 0x5ec6 <lora_driver_setDeviceIdentifier+0x2>
    5ecc:	9f 01       	movw	r18, r30
    5ece:	21 51       	subi	r18, 0x11	; 17
    5ed0:	31 09       	sbc	r19, r1
    5ed2:	28 17       	cp	r18, r24
    5ed4:	39 07       	cpc	r19, r25
    5ed6:	29 f4       	brne	.+10     	; 0x5ee2 <lora_driver_setDeviceIdentifier+0x1e>
    5ed8:	bc 01       	movw	r22, r24
    5eda:	8f e0       	ldi	r24, 0x0F	; 15
    5edc:	94 e0       	ldi	r25, 0x04	; 4
    5ede:	6c cf       	rjmp	.-296    	; 0x5db8 <_uploadMessageRc>
    5ee0:	08 95       	ret
    5ee2:	89 e0       	ldi	r24, 0x09	; 9
    5ee4:	08 95       	ret

00005ee6 <lora_driver_setApplicationIdentifier>:
    5ee6:	fc 01       	movw	r30, r24
    5ee8:	01 90       	ld	r0, Z+
    5eea:	00 20       	and	r0, r0
    5eec:	e9 f7       	brne	.-6      	; 0x5ee8 <lora_driver_setApplicationIdentifier+0x2>
    5eee:	9f 01       	movw	r18, r30
    5ef0:	21 51       	subi	r18, 0x11	; 17
    5ef2:	31 09       	sbc	r19, r1
    5ef4:	28 17       	cp	r18, r24
    5ef6:	39 07       	cpc	r19, r25
    5ef8:	29 f4       	brne	.+10     	; 0x5f04 <lora_driver_setApplicationIdentifier+0x1e>
    5efa:	bc 01       	movw	r22, r24
    5efc:	8e e1       	ldi	r24, 0x1E	; 30
    5efe:	94 e0       	ldi	r25, 0x04	; 4
    5f00:	5b cf       	rjmp	.-330    	; 0x5db8 <_uploadMessageRc>
    5f02:	08 95       	ret
    5f04:	89 e0       	ldi	r24, 0x09	; 9
    5f06:	08 95       	ret

00005f08 <lora_driver_setApplicationKey>:
    5f08:	fc 01       	movw	r30, r24
    5f0a:	01 90       	ld	r0, Z+
    5f0c:	00 20       	and	r0, r0
    5f0e:	e9 f7       	brne	.-6      	; 0x5f0a <lora_driver_setApplicationKey+0x2>
    5f10:	9f 01       	movw	r18, r30
    5f12:	21 52       	subi	r18, 0x21	; 33
    5f14:	31 09       	sbc	r19, r1
    5f16:	28 17       	cp	r18, r24
    5f18:	39 07       	cpc	r19, r25
    5f1a:	29 f4       	brne	.+10     	; 0x5f26 <lora_driver_setApplicationKey+0x1e>
    5f1c:	bc 01       	movw	r22, r24
    5f1e:	8d e2       	ldi	r24, 0x2D	; 45
    5f20:	94 e0       	ldi	r25, 0x04	; 4
    5f22:	4a cf       	rjmp	.-364    	; 0x5db8 <_uploadMessageRc>
    5f24:	08 95       	ret
    5f26:	89 e0       	ldi	r24, 0x09	; 9
    5f28:	08 95       	ret

00005f2a <lora_driver_saveMac>:
    5f2a:	60 e0       	ldi	r22, 0x00	; 0
    5f2c:	70 e0       	ldi	r23, 0x00	; 0
    5f2e:	8c e6       	ldi	r24, 0x6C	; 108
    5f30:	94 e0       	ldi	r25, 0x04	; 4
    5f32:	42 cf       	rjmp	.-380    	; 0x5db8 <_uploadMessageRc>
    5f34:	08 95       	ret

00005f36 <lora_driver_join>:
    5f36:	0f 93       	push	r16
    5f38:	1f 93       	push	r17
    5f3a:	e8 2f       	mov	r30, r24
    5f3c:	f0 e0       	ldi	r31, 0x00	; 0
    5f3e:	ee 0f       	add	r30, r30
    5f40:	ff 1f       	adc	r31, r31
    5f42:	ea 5b       	subi	r30, 0xBA	; 186
    5f44:	f9 4f       	sbci	r31, 0xF9	; 249
    5f46:	60 81       	ld	r22, Z
    5f48:	71 81       	ldd	r23, Z+1	; 0x01
    5f4a:	85 e7       	ldi	r24, 0x75	; 117
    5f4c:	94 e0       	ldi	r25, 0x04	; 4
    5f4e:	34 df       	rcall	.-408    	; 0x5db8 <_uploadMessageRc>
    5f50:	81 11       	cpse	r24, r1
    5f52:	14 c0       	rjmp	.+40     	; 0x5f7c <lora_driver_join+0x46>
    5f54:	08 e2       	ldi	r16, 0x28	; 40
    5f56:	15 e0       	ldi	r17, 0x05	; 5
    5f58:	20 e0       	ldi	r18, 0x00	; 0
    5f5a:	30 e0       	ldi	r19, 0x00	; 0
    5f5c:	4d e2       	ldi	r20, 0x2D	; 45
    5f5e:	50 e0       	ldi	r21, 0x00	; 0
    5f60:	67 ea       	ldi	r22, 0xA7	; 167
    5f62:	72 e1       	ldi	r23, 0x12	; 18
    5f64:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    5f68:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    5f6c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <xStreamBufferReceive>
    5f70:	88 23       	and	r24, r24
    5f72:	21 f0       	breq	.+8      	; 0x5f7c <lora_driver_join+0x46>
    5f74:	87 ea       	ldi	r24, 0xA7	; 167
    5f76:	92 e1       	ldi	r25, 0x12	; 18
    5f78:	aa de       	rcall	.-684    	; 0x5cce <_reply2ReturnCode>
    5f7a:	03 c0       	rjmp	.+6      	; 0x5f82 <lora_driver_join+0x4c>
    5f7c:	87 ea       	ldi	r24, 0xA7	; 167
    5f7e:	92 e1       	ldi	r25, 0x12	; 18
    5f80:	a6 de       	rcall	.-692    	; 0x5cce <_reply2ReturnCode>
    5f82:	1f 91       	pop	r17
    5f84:	0f 91       	pop	r16
    5f86:	08 95       	ret

00005f88 <lora_driver_sendUploadMessage>:
    5f88:	0f 93       	push	r16
    5f8a:	1f 93       	push	r17
    5f8c:	cf 93       	push	r28
    5f8e:	df 93       	push	r29
    5f90:	1f 92       	push	r1
    5f92:	cd b7       	in	r28, 0x3d	; 61
    5f94:	de b7       	in	r29, 0x3e	; 62
    5f96:	db 01       	movw	r26, r22
    5f98:	11 96       	adiw	r26, 0x01	; 1
    5f9a:	9c 91       	ld	r25, X
    5f9c:	11 97       	sbiw	r26, 0x01	; 1
    5f9e:	95 31       	cpi	r25, 0x15	; 21
    5fa0:	08 f0       	brcs	.+2      	; 0x5fa4 <lora_driver_sendUploadMessage+0x1c>
    5fa2:	b4 c0       	rjmp	.+360    	; 0x610c <lora_driver_sendUploadMessage+0x184>
    5fa4:	99 23       	and	r25, r25
    5fa6:	81 f1       	breq	.+96     	; 0x6008 <lora_driver_sendUploadMessage+0x80>
    5fa8:	60 e0       	ldi	r22, 0x00	; 0
    5faa:	70 e0       	ldi	r23, 0x00	; 0
    5fac:	27 2f       	mov	r18, r23
    5fae:	30 e0       	ldi	r19, 0x00	; 0
    5fb0:	46 2f       	mov	r20, r22
    5fb2:	50 e0       	ldi	r21, 0x00	; 0
    5fb4:	fd 01       	movw	r30, r26
    5fb6:	e4 0f       	add	r30, r20
    5fb8:	f5 1f       	adc	r31, r21
    5fba:	92 81       	ldd	r25, Z+2	; 0x02
    5fbc:	92 95       	swap	r25
    5fbe:	9f 70       	andi	r25, 0x0F	; 15
    5fc0:	9a 30       	cpi	r25, 0x0A	; 10
    5fc2:	10 f0       	brcs	.+4      	; 0x5fc8 <lora_driver_sendUploadMessage+0x40>
    5fc4:	99 5c       	subi	r25, 0xC9	; 201
    5fc6:	01 c0       	rjmp	.+2      	; 0x5fca <lora_driver_sendUploadMessage+0x42>
    5fc8:	90 5d       	subi	r25, 0xD0	; 208
    5fca:	f9 01       	movw	r30, r18
    5fcc:	e8 5c       	subi	r30, 0xC8	; 200
    5fce:	fd 4e       	sbci	r31, 0xED	; 237
    5fd0:	90 83       	st	Z, r25
    5fd2:	2f 5f       	subi	r18, 0xFF	; 255
    5fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd6:	fd 01       	movw	r30, r26
    5fd8:	e4 0f       	add	r30, r20
    5fda:	f5 1f       	adc	r31, r21
    5fdc:	92 81       	ldd	r25, Z+2	; 0x02
    5fde:	9f 70       	andi	r25, 0x0F	; 15
    5fe0:	49 2f       	mov	r20, r25
    5fe2:	50 e0       	ldi	r21, 0x00	; 0
    5fe4:	4a 30       	cpi	r20, 0x0A	; 10
    5fe6:	51 05       	cpc	r21, r1
    5fe8:	14 f0       	brlt	.+4      	; 0x5fee <lora_driver_sendUploadMessage+0x66>
    5fea:	99 5c       	subi	r25, 0xC9	; 201
    5fec:	01 c0       	rjmp	.+2      	; 0x5ff0 <lora_driver_sendUploadMessage+0x68>
    5fee:	90 5d       	subi	r25, 0xD0	; 208
    5ff0:	f9 01       	movw	r30, r18
    5ff2:	e8 5c       	subi	r30, 0xC8	; 200
    5ff4:	fd 4e       	sbci	r31, 0xED	; 237
    5ff6:	90 83       	st	Z, r25
    5ff8:	7e 5f       	subi	r23, 0xFE	; 254
    5ffa:	6f 5f       	subi	r22, 0xFF	; 255
    5ffc:	11 96       	adiw	r26, 0x01	; 1
    5ffe:	9c 91       	ld	r25, X
    6000:	11 97       	sbiw	r26, 0x01	; 1
    6002:	69 17       	cp	r22, r25
    6004:	98 f2       	brcs	.-90     	; 0x5fac <lora_driver_sendUploadMessage+0x24>
    6006:	01 c0       	rjmp	.+2      	; 0x600a <lora_driver_sendUploadMessage+0x82>
    6008:	70 e0       	ldi	r23, 0x00	; 0
    600a:	e7 2f       	mov	r30, r23
    600c:	f0 e0       	ldi	r31, 0x00	; 0
    600e:	e8 5c       	subi	r30, 0xC8	; 200
    6010:	fd 4e       	sbci	r31, 0xED	; 237
    6012:	10 82       	st	Z, r1
    6014:	4c 91       	ld	r20, X
    6016:	81 11       	cpse	r24, r1
    6018:	03 c0       	rjmp	.+6      	; 0x6020 <lora_driver_sendUploadMessage+0x98>
    601a:	8e e7       	ldi	r24, 0x7E	; 126
    601c:	94 e0       	ldi	r25, 0x04	; 4
    601e:	02 c0       	rjmp	.+4      	; 0x6024 <lora_driver_sendUploadMessage+0x9c>
    6020:	80 e8       	ldi	r24, 0x80	; 128
    6022:	94 e0       	ldi	r25, 0x04	; 4
    6024:	28 e3       	ldi	r18, 0x38	; 56
    6026:	32 e1       	ldi	r19, 0x12	; 18
    6028:	3f 93       	push	r19
    602a:	2f 93       	push	r18
    602c:	1f 92       	push	r1
    602e:	4f 93       	push	r20
    6030:	9f 93       	push	r25
    6032:	8f 93       	push	r24
    6034:	84 e8       	ldi	r24, 0x84	; 132
    6036:	94 e0       	ldi	r25, 0x04	; 4
    6038:	9f 93       	push	r25
    603a:	8f 93       	push	r24
    603c:	8a e7       	ldi	r24, 0x7A	; 122
    603e:	92 e1       	ldi	r25, 0x12	; 18
    6040:	9f 93       	push	r25
    6042:	8f 93       	push	r24
    6044:	0e 94 c6 3a 	call	0x758c	; 0x758c <sprintf>
    6048:	60 e0       	ldi	r22, 0x00	; 0
    604a:	70 e0       	ldi	r23, 0x00	; 0
    604c:	8a e7       	ldi	r24, 0x7A	; 122
    604e:	92 e1       	ldi	r25, 0x12	; 18
    6050:	b3 de       	rcall	.-666    	; 0x5db8 <_uploadMessageRc>
    6052:	0f b6       	in	r0, 0x3f	; 63
    6054:	f8 94       	cli
    6056:	de bf       	out	0x3e, r29	; 62
    6058:	0f be       	out	0x3f, r0	; 63
    605a:	cd bf       	out	0x3d, r28	; 61
    605c:	81 11       	cpse	r24, r1
    605e:	59 c0       	rjmp	.+178    	; 0x6112 <lora_driver_sendUploadMessage+0x18a>
    6060:	08 e2       	ldi	r16, 0x28	; 40
    6062:	15 e0       	ldi	r17, 0x05	; 5
    6064:	20 e0       	ldi	r18, 0x00	; 0
    6066:	30 e0       	ldi	r19, 0x00	; 0
    6068:	4d e2       	ldi	r20, 0x2D	; 45
    606a:	50 e0       	ldi	r21, 0x00	; 0
    606c:	67 ea       	ldi	r22, 0xA7	; 167
    606e:	72 e1       	ldi	r23, 0x12	; 18
    6070:	80 91 1e 12 	lds	r24, 0x121E	; 0x80121e <_serialReplyBufferHandle>
    6074:	90 91 1f 12 	lds	r25, 0x121F	; 0x80121f <_serialReplyBufferHandle+0x1>
    6078:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <xStreamBufferReceive>
    607c:	88 23       	and	r24, r24
    607e:	09 f4       	brne	.+2      	; 0x6082 <lora_driver_sendUploadMessage+0xfa>
    6080:	47 c0       	rjmp	.+142    	; 0x6110 <lora_driver_sendUploadMessage+0x188>
    6082:	87 ea       	ldi	r24, 0xA7	; 167
    6084:	92 e1       	ldi	r25, 0x12	; 18
    6086:	23 de       	rcall	.-954    	; 0x5cce <_reply2ReturnCode>
    6088:	8e 30       	cpi	r24, 0x0E	; 14
    608a:	09 f0       	breq	.+2      	; 0x608e <lora_driver_sendUploadMessage+0x106>
    608c:	42 c0       	rjmp	.+132    	; 0x6112 <lora_driver_sendUploadMessage+0x18a>
    608e:	87 e0       	ldi	r24, 0x07	; 7
    6090:	89 83       	std	Y+1, r24	; 0x01
    6092:	80 91 1c 12 	lds	r24, 0x121C	; 0x80121c <_downlinkMessageBuffer>
    6096:	90 91 1d 12 	lds	r25, 0x121D	; 0x80121d <_downlinkMessageBuffer+0x1>
    609a:	89 2b       	or	r24, r25
    609c:	a9 f1       	breq	.+106    	; 0x6108 <lora_driver_sendUploadMessage+0x180>
    609e:	be 01       	movw	r22, r28
    60a0:	6f 5f       	subi	r22, 0xFF	; 255
    60a2:	7f 4f       	sbci	r23, 0xFF	; 255
    60a4:	87 ea       	ldi	r24, 0xA7	; 167
    60a6:	92 e1       	ldi	r25, 0x12	; 18
    60a8:	68 d1       	rcall	.+720    	; 0x637a <decode_port_no>
    60aa:	80 93 22 12 	sts	0x1222, r24	; 0x801222 <_downlinkPayload>
    60ae:	e9 81       	ldd	r30, Y+1	; 0x01
    60b0:	f0 e0       	ldi	r31, 0x00	; 0
    60b2:	e9 55       	subi	r30, 0x59	; 89
    60b4:	fd 4e       	sbci	r31, 0xED	; 237
    60b6:	df 01       	movw	r26, r30
    60b8:	0d 90       	ld	r0, X+
    60ba:	00 20       	and	r0, r0
    60bc:	e9 f7       	brne	.-6      	; 0x60b8 <lora_driver_sendUploadMessage+0x130>
    60be:	11 97       	sbiw	r26, 0x01	; 1
    60c0:	ae 1b       	sub	r26, r30
    60c2:	bf 0b       	sbc	r27, r31
    60c4:	aa 23       	and	r26, r26
    60c6:	91 f0       	breq	.+36     	; 0x60ec <lora_driver_sendUploadMessage+0x164>
    60c8:	bb 27       	eor	r27, r27
    60ca:	cd 01       	movw	r24, r26
    60cc:	01 97       	sbiw	r24, 0x01	; 1
    60ce:	9c 01       	movw	r18, r24
    60d0:	12 f4       	brpl	.+4      	; 0x60d6 <lora_driver_sendUploadMessage+0x14e>
    60d2:	2f 5f       	subi	r18, 0xFF	; 255
    60d4:	3f 4f       	sbci	r19, 0xFF	; 255
    60d6:	35 95       	asr	r19
    60d8:	27 95       	ror	r18
    60da:	20 93 23 12 	sts	0x1223, r18	; 0x801223 <_downlinkPayload+0x1>
    60de:	af 01       	movw	r20, r30
    60e0:	4f 5f       	subi	r20, 0xFF	; 255
    60e2:	5f 4f       	sbci	r21, 0xFF	; 255
    60e4:	64 e1       	ldi	r22, 0x14	; 20
    60e6:	84 e2       	ldi	r24, 0x24	; 36
    60e8:	92 e1       	ldi	r25, 0x12	; 18
    60ea:	73 d1       	rcall	.+742    	; 0x63d2 <decode_hexadecimal_string_bytes>
    60ec:	01 e0       	ldi	r16, 0x01	; 1
    60ee:	10 e0       	ldi	r17, 0x00	; 0
    60f0:	20 e0       	ldi	r18, 0x00	; 0
    60f2:	30 e0       	ldi	r19, 0x00	; 0
    60f4:	46 e1       	ldi	r20, 0x16	; 22
    60f6:	50 e0       	ldi	r21, 0x00	; 0
    60f8:	62 e2       	ldi	r22, 0x22	; 34
    60fa:	72 e1       	ldi	r23, 0x12	; 18
    60fc:	80 91 1c 12 	lds	r24, 0x121C	; 0x80121c <_downlinkMessageBuffer>
    6100:	90 91 1d 12 	lds	r25, 0x121D	; 0x80121d <_downlinkMessageBuffer+0x1>
    6104:	0e 94 95 0c 	call	0x192a	; 0x192a <xStreamBufferSend>
    6108:	8e e0       	ldi	r24, 0x0E	; 14
    610a:	03 c0       	rjmp	.+6      	; 0x6112 <lora_driver_sendUploadMessage+0x18a>
    610c:	84 e1       	ldi	r24, 0x14	; 20
    610e:	01 c0       	rjmp	.+2      	; 0x6112 <lora_driver_sendUploadMessage+0x18a>
    6110:	80 e0       	ldi	r24, 0x00	; 0
    6112:	0f 90       	pop	r0
    6114:	df 91       	pop	r29
    6116:	cf 91       	pop	r28
    6118:	1f 91       	pop	r17
    611a:	0f 91       	pop	r16
    611c:	08 95       	ret

0000611e <lora_driver_setAdaptiveDataRate>:
    611e:	81 30       	cpi	r24, 0x01	; 1
    6120:	19 f0       	breq	.+6      	; 0x6128 <lora_driver_setAdaptiveDataRate+0xa>
    6122:	64 e9       	ldi	r22, 0x94	; 148
    6124:	74 e0       	ldi	r23, 0x04	; 4
    6126:	02 c0       	rjmp	.+4      	; 0x612c <lora_driver_setAdaptiveDataRate+0xe>
    6128:	6d e6       	ldi	r22, 0x6D	; 109
    612a:	75 e0       	ldi	r23, 0x05	; 5
    612c:	88 e9       	ldi	r24, 0x98	; 152
    612e:	94 e0       	ldi	r25, 0x04	; 4
    6130:	43 ce       	rjmp	.-890    	; 0x5db8 <_uploadMessageRc>
    6132:	08 95       	ret

00006134 <lora_driver_setReceiveDelay>:
    6134:	9f 93       	push	r25
    6136:	8f 93       	push	r24
    6138:	89 ec       	ldi	r24, 0xC9	; 201
    613a:	94 e0       	ldi	r25, 0x04	; 4
    613c:	9f 93       	push	r25
    613e:	8f 93       	push	r24
    6140:	8a e7       	ldi	r24, 0x7A	; 122
    6142:	92 e1       	ldi	r25, 0x12	; 18
    6144:	9f 93       	push	r25
    6146:	8f 93       	push	r24
    6148:	0e 94 c6 3a 	call	0x758c	; 0x758c <sprintf>
    614c:	60 e0       	ldi	r22, 0x00	; 0
    614e:	70 e0       	ldi	r23, 0x00	; 0
    6150:	8a e7       	ldi	r24, 0x7A	; 122
    6152:	92 e1       	ldi	r25, 0x12	; 18
    6154:	31 de       	rcall	.-926    	; 0x5db8 <_uploadMessageRc>
    6156:	0f 90       	pop	r0
    6158:	0f 90       	pop	r0
    615a:	0f 90       	pop	r0
    615c:	0f 90       	pop	r0
    615e:	0f 90       	pop	r0
    6160:	0f 90       	pop	r0
    6162:	08 95       	ret

00006164 <lora_driver_configureToEu868>:
    6164:	2f 92       	push	r2
    6166:	3f 92       	push	r3
    6168:	4f 92       	push	r4
    616a:	5f 92       	push	r5
    616c:	6f 92       	push	r6
    616e:	7f 92       	push	r7
    6170:	8f 92       	push	r8
    6172:	9f 92       	push	r9
    6174:	af 92       	push	r10
    6176:	bf 92       	push	r11
    6178:	cf 92       	push	r12
    617a:	df 92       	push	r13
    617c:	ef 92       	push	r14
    617e:	ff 92       	push	r15
    6180:	0f 93       	push	r16
    6182:	1f 93       	push	r17
    6184:	cf 93       	push	r28
    6186:	df 93       	push	r29
    6188:	cd b7       	in	r28, 0x3d	; 61
    618a:	de b7       	in	r29, 0x3e	; 62
    618c:	a0 97       	sbiw	r28, 0x20	; 32
    618e:	0f b6       	in	r0, 0x3f	; 63
    6190:	f8 94       	cli
    6192:	de bf       	out	0x3e, r29	; 62
    6194:	0f be       	out	0x3f, r0	; 63
    6196:	cd bf       	out	0x3d, r28	; 61
    6198:	66 ef       	ldi	r22, 0xF6	; 246
    619a:	74 e0       	ldi	r23, 0x04	; 4
    619c:	82 e0       	ldi	r24, 0x02	; 2
    619e:	95 e0       	ldi	r25, 0x05	; 5
    61a0:	3c dd       	rcall	.-1416   	; 0x5c1a <_uploadMessage>
    61a2:	95 dd       	rcall	.-1238   	; 0x5cce <_reply2ReturnCode>
    61a4:	81 11       	cpse	r24, r1
    61a6:	a3 c0       	rjmp	.+326    	; 0x62ee <lora_driver_configureToEu868+0x18a>
    61a8:	80 e2       	ldi	r24, 0x20	; 32
    61aa:	e1 e9       	ldi	r30, 0x91	; 145
    61ac:	f3 e0       	ldi	r31, 0x03	; 3
    61ae:	de 01       	movw	r26, r28
    61b0:	11 96       	adiw	r26, 0x01	; 1
    61b2:	01 90       	ld	r0, Z+
    61b4:	0d 92       	st	X+, r0
    61b6:	8a 95       	dec	r24
    61b8:	e1 f7       	brne	.-8      	; 0x61b2 <lora_driver_configureToEu868+0x4e>
    61ba:	9e 01       	movw	r18, r28
    61bc:	2f 5f       	subi	r18, 0xFF	; 255
    61be:	3f 4f       	sbci	r19, 0xFF	; 255
    61c0:	69 01       	movw	r12, r18
    61c2:	e1 2c       	mov	r14, r1
    61c4:	f1 2c       	mov	r15, r1
    61c6:	0f 2e       	mov	r0, r31
    61c8:	fe e0       	ldi	r31, 0x0E	; 14
    61ca:	af 2e       	mov	r10, r31
    61cc:	f5 e0       	ldi	r31, 0x05	; 5
    61ce:	bf 2e       	mov	r11, r31
    61d0:	f0 2d       	mov	r31, r0
    61d2:	0a e7       	ldi	r16, 0x7A	; 122
    61d4:	12 e1       	ldi	r17, 0x12	; 18
    61d6:	0f 2e       	mov	r0, r31
    61d8:	f7 e2       	ldi	r31, 0x27	; 39
    61da:	4f 2e       	mov	r4, r31
    61dc:	f5 e0       	ldi	r31, 0x05	; 5
    61de:	5f 2e       	mov	r5, r31
    61e0:	f0 2d       	mov	r31, r0
    61e2:	0f 2e       	mov	r0, r31
    61e4:	fe e3       	ldi	r31, 0x3E	; 62
    61e6:	8f 2e       	mov	r8, r31
    61e8:	f5 e0       	ldi	r31, 0x05	; 5
    61ea:	9f 2e       	mov	r9, r31
    61ec:	f0 2d       	mov	r31, r0
    61ee:	0f 2e       	mov	r0, r31
    61f0:	f8 e5       	ldi	r31, 0x58	; 88
    61f2:	6f 2e       	mov	r6, r31
    61f4:	f5 e0       	ldi	r31, 0x05	; 5
    61f6:	7f 2e       	mov	r7, r31
    61f8:	f0 2d       	mov	r31, r0
    61fa:	3e 2c       	mov	r3, r14
    61fc:	2f 2c       	mov	r2, r15
    61fe:	ff 92       	push	r15
    6200:	ef 92       	push	r14
    6202:	bf 92       	push	r11
    6204:	af 92       	push	r10
    6206:	1f 93       	push	r17
    6208:	0f 93       	push	r16
    620a:	0e 94 c6 3a 	call	0x758c	; 0x758c <sprintf>
    620e:	60 e0       	ldi	r22, 0x00	; 0
    6210:	70 e0       	ldi	r23, 0x00	; 0
    6212:	c8 01       	movw	r24, r16
    6214:	02 dd       	rcall	.-1532   	; 0x5c1a <_uploadMessage>
    6216:	5b dd       	rcall	.-1354   	; 0x5cce <_reply2ReturnCode>
    6218:	0f 90       	pop	r0
    621a:	0f 90       	pop	r0
    621c:	0f 90       	pop	r0
    621e:	0f 90       	pop	r0
    6220:	0f 90       	pop	r0
    6222:	0f 90       	pop	r0
    6224:	81 11       	cpse	r24, r1
    6226:	63 c0       	rjmp	.+198    	; 0x62ee <lora_driver_configureToEu868+0x18a>
    6228:	32 e0       	ldi	r19, 0x02	; 2
    622a:	3e 15       	cp	r19, r14
    622c:	e8 f4       	brcc	.+58     	; 0x6268 <lora_driver_configureToEu868+0x104>
    622e:	f6 01       	movw	r30, r12
    6230:	83 81       	ldd	r24, Z+3	; 0x03
    6232:	8f 93       	push	r24
    6234:	82 81       	ldd	r24, Z+2	; 0x02
    6236:	8f 93       	push	r24
    6238:	81 81       	ldd	r24, Z+1	; 0x01
    623a:	8f 93       	push	r24
    623c:	80 81       	ld	r24, Z
    623e:	8f 93       	push	r24
    6240:	ff 92       	push	r15
    6242:	ef 92       	push	r14
    6244:	5f 92       	push	r5
    6246:	4f 92       	push	r4
    6248:	1f 93       	push	r17
    624a:	0f 93       	push	r16
    624c:	0e 94 c6 3a 	call	0x758c	; 0x758c <sprintf>
    6250:	60 e0       	ldi	r22, 0x00	; 0
    6252:	70 e0       	ldi	r23, 0x00	; 0
    6254:	c8 01       	movw	r24, r16
    6256:	e1 dc       	rcall	.-1598   	; 0x5c1a <_uploadMessage>
    6258:	3a dd       	rcall	.-1420   	; 0x5cce <_reply2ReturnCode>
    625a:	0f b6       	in	r0, 0x3f	; 63
    625c:	f8 94       	cli
    625e:	de bf       	out	0x3e, r29	; 62
    6260:	0f be       	out	0x3f, r0	; 63
    6262:	cd bf       	out	0x3d, r28	; 61
    6264:	81 11       	cpse	r24, r1
    6266:	43 c0       	rjmp	.+134    	; 0x62ee <lora_driver_configureToEu868+0x18a>
    6268:	2f 92       	push	r2
    626a:	3f 92       	push	r3
    626c:	9f 92       	push	r9
    626e:	8f 92       	push	r8
    6270:	1f 93       	push	r17
    6272:	0f 93       	push	r16
    6274:	0e 94 c6 3a 	call	0x758c	; 0x758c <sprintf>
    6278:	60 e0       	ldi	r22, 0x00	; 0
    627a:	70 e0       	ldi	r23, 0x00	; 0
    627c:	c8 01       	movw	r24, r16
    627e:	cd dc       	rcall	.-1638   	; 0x5c1a <_uploadMessage>
    6280:	26 dd       	rcall	.-1460   	; 0x5cce <_reply2ReturnCode>
    6282:	0f 90       	pop	r0
    6284:	0f 90       	pop	r0
    6286:	0f 90       	pop	r0
    6288:	0f 90       	pop	r0
    628a:	0f 90       	pop	r0
    628c:	0f 90       	pop	r0
    628e:	81 11       	cpse	r24, r1
    6290:	2e c0       	rjmp	.+92     	; 0x62ee <lora_driver_configureToEu868+0x18a>
    6292:	2f 92       	push	r2
    6294:	3f 92       	push	r3
    6296:	7f 92       	push	r7
    6298:	6f 92       	push	r6
    629a:	1f 93       	push	r17
    629c:	0f 93       	push	r16
    629e:	0e 94 c6 3a 	call	0x758c	; 0x758c <sprintf>
    62a2:	60 e0       	ldi	r22, 0x00	; 0
    62a4:	70 e0       	ldi	r23, 0x00	; 0
    62a6:	c8 01       	movw	r24, r16
    62a8:	b8 dc       	rcall	.-1680   	; 0x5c1a <_uploadMessage>
    62aa:	11 dd       	rcall	.-1502   	; 0x5cce <_reply2ReturnCode>
    62ac:	0f 90       	pop	r0
    62ae:	0f 90       	pop	r0
    62b0:	0f 90       	pop	r0
    62b2:	0f 90       	pop	r0
    62b4:	0f 90       	pop	r0
    62b6:	0f 90       	pop	r0
    62b8:	81 11       	cpse	r24, r1
    62ba:	19 c0       	rjmp	.+50     	; 0x62ee <lora_driver_configureToEu868+0x18a>
    62bc:	3f ef       	ldi	r19, 0xFF	; 255
    62be:	e3 1a       	sub	r14, r19
    62c0:	f3 0a       	sbc	r15, r19
    62c2:	84 e0       	ldi	r24, 0x04	; 4
    62c4:	c8 0e       	add	r12, r24
    62c6:	d1 1c       	adc	r13, r1
    62c8:	98 e0       	ldi	r25, 0x08	; 8
    62ca:	e9 16       	cp	r14, r25
    62cc:	f1 04       	cpc	r15, r1
    62ce:	09 f0       	breq	.+2      	; 0x62d2 <lora_driver_configureToEu868+0x16e>
    62d0:	94 cf       	rjmp	.-216    	; 0x61fa <lora_driver_configureToEu868+0x96>
    62d2:	60 e0       	ldi	r22, 0x00	; 0
    62d4:	70 e0       	ldi	r23, 0x00	; 0
    62d6:	80 e7       	ldi	r24, 0x70	; 112
    62d8:	95 e0       	ldi	r25, 0x05	; 5
    62da:	9f dc       	rcall	.-1730   	; 0x5c1a <_uploadMessage>
    62dc:	f8 dc       	rcall	.-1552   	; 0x5cce <_reply2ReturnCode>
    62de:	81 11       	cpse	r24, r1
    62e0:	06 c0       	rjmp	.+12     	; 0x62ee <lora_driver_configureToEu868+0x18a>
    62e2:	60 e0       	ldi	r22, 0x00	; 0
    62e4:	70 e0       	ldi	r23, 0x00	; 0
    62e6:	81 e8       	ldi	r24, 0x81	; 129
    62e8:	95 e0       	ldi	r25, 0x05	; 5
    62ea:	97 dc       	rcall	.-1746   	; 0x5c1a <_uploadMessage>
    62ec:	f0 dc       	rcall	.-1568   	; 0x5cce <_reply2ReturnCode>
    62ee:	a0 96       	adiw	r28, 0x20	; 32
    62f0:	0f b6       	in	r0, 0x3f	; 63
    62f2:	f8 94       	cli
    62f4:	de bf       	out	0x3e, r29	; 62
    62f6:	0f be       	out	0x3f, r0	; 63
    62f8:	cd bf       	out	0x3d, r28	; 61
    62fa:	df 91       	pop	r29
    62fc:	cf 91       	pop	r28
    62fe:	1f 91       	pop	r17
    6300:	0f 91       	pop	r16
    6302:	ff 90       	pop	r15
    6304:	ef 90       	pop	r14
    6306:	df 90       	pop	r13
    6308:	cf 90       	pop	r12
    630a:	bf 90       	pop	r11
    630c:	af 90       	pop	r10
    630e:	9f 90       	pop	r9
    6310:	8f 90       	pop	r8
    6312:	7f 90       	pop	r7
    6314:	6f 90       	pop	r6
    6316:	5f 90       	pop	r5
    6318:	4f 90       	pop	r4
    631a:	3f 90       	pop	r3
    631c:	2f 90       	pop	r2
    631e:	08 95       	ret

00006320 <lora_driver_setOtaaIdentity>:
    6320:	ef 92       	push	r14
    6322:	ff 92       	push	r15
    6324:	0f 93       	push	r16
    6326:	1f 93       	push	r17
    6328:	cf 93       	push	r28
    632a:	df 93       	push	r29
    632c:	ec 01       	movw	r28, r24
    632e:	8b 01       	movw	r16, r22
    6330:	7a 01       	movw	r14, r20
    6332:	81 e0       	ldi	r24, 0x01	; 1
    6334:	f4 de       	rcall	.-536    	; 0x611e <lora_driver_setAdaptiveDataRate>
    6336:	81 11       	cpse	r24, r1
    6338:	0d c0       	rjmp	.+26     	; 0x6354 <lora_driver_setOtaaIdentity+0x34>
    633a:	ce 01       	movw	r24, r28
    633c:	d4 dd       	rcall	.-1112   	; 0x5ee6 <lora_driver_setApplicationIdentifier>
    633e:	81 11       	cpse	r24, r1
    6340:	09 c0       	rjmp	.+18     	; 0x6354 <lora_driver_setOtaaIdentity+0x34>
    6342:	c8 01       	movw	r24, r16
    6344:	e1 dd       	rcall	.-1086   	; 0x5f08 <lora_driver_setApplicationKey>
    6346:	81 11       	cpse	r24, r1
    6348:	05 c0       	rjmp	.+10     	; 0x6354 <lora_driver_setOtaaIdentity+0x34>
    634a:	c7 01       	movw	r24, r14
    634c:	bb dd       	rcall	.-1162   	; 0x5ec4 <lora_driver_setDeviceIdentifier>
    634e:	81 11       	cpse	r24, r1
    6350:	01 c0       	rjmp	.+2      	; 0x6354 <lora_driver_setOtaaIdentity+0x34>
    6352:	eb dd       	rcall	.-1066   	; 0x5f2a <lora_driver_saveMac>
    6354:	df 91       	pop	r29
    6356:	cf 91       	pop	r28
    6358:	1f 91       	pop	r17
    635a:	0f 91       	pop	r16
    635c:	ff 90       	pop	r15
    635e:	ef 90       	pop	r14
    6360:	08 95       	ret

00006362 <lora_driver_mapReturnCodeToText>:
    6362:	90 e0       	ldi	r25, 0x00	; 0
    6364:	fc 01       	movw	r30, r24
    6366:	ee 0f       	add	r30, r30
    6368:	ff 1f       	adc	r31, r31
    636a:	8e 0f       	add	r24, r30
    636c:	9f 1f       	adc	r25, r31
    636e:	fc 01       	movw	r30, r24
    6370:	e6 5b       	subi	r30, 0xB6	; 182
    6372:	f9 4f       	sbci	r31, 0xF9	; 249
    6374:	81 81       	ldd	r24, Z+1	; 0x01
    6376:	92 81       	ldd	r25, Z+2	; 0x02
    6378:	08 95       	ret

0000637a <decode_port_no>:
    637a:	dc 01       	movw	r26, r24
    637c:	00 97       	sbiw	r24, 0x00	; 0
    637e:	29 f1       	breq	.+74     	; 0x63ca <decode_port_no+0x50>
    6380:	fb 01       	movw	r30, r22
    6382:	20 81       	ld	r18, Z
    6384:	fc 01       	movw	r30, r24
    6386:	01 90       	ld	r0, Z+
    6388:	00 20       	and	r0, r0
    638a:	e9 f7       	brne	.-6      	; 0x6386 <decode_port_no+0xc>
    638c:	31 97       	sbiw	r30, 0x01	; 1
    638e:	e8 1b       	sub	r30, r24
    6390:	f9 0b       	sbc	r31, r25
    6392:	82 2f       	mov	r24, r18
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	e8 17       	cp	r30, r24
    6398:	f9 07       	cpc	r31, r25
    639a:	c8 f0       	brcs	.+50     	; 0x63ce <decode_port_no+0x54>
    639c:	80 e0       	ldi	r24, 0x00	; 0
    639e:	08 c0       	rjmp	.+16     	; 0x63b0 <decode_port_no+0x36>
    63a0:	88 0f       	add	r24, r24
    63a2:	38 2f       	mov	r19, r24
    63a4:	33 0f       	add	r19, r19
    63a6:	33 0f       	add	r19, r19
    63a8:	83 0f       	add	r24, r19
    63aa:	80 53       	subi	r24, 0x30	; 48
    63ac:	89 0f       	add	r24, r25
    63ae:	2f 5f       	subi	r18, 0xFF	; 255
    63b0:	fd 01       	movw	r30, r26
    63b2:	e2 0f       	add	r30, r18
    63b4:	f1 1d       	adc	r31, r1
    63b6:	90 81       	ld	r25, Z
    63b8:	30 ed       	ldi	r19, 0xD0	; 208
    63ba:	39 0f       	add	r19, r25
    63bc:	3a 30       	cpi	r19, 0x0A	; 10
    63be:	10 f4       	brcc	.+4      	; 0x63c4 <decode_port_no+0x4a>
    63c0:	91 11       	cpse	r25, r1
    63c2:	ee cf       	rjmp	.-36     	; 0x63a0 <decode_port_no+0x26>
    63c4:	fb 01       	movw	r30, r22
    63c6:	20 83       	st	Z, r18
    63c8:	08 95       	ret
    63ca:	80 e0       	ldi	r24, 0x00	; 0
    63cc:	08 95       	ret
    63ce:	80 e0       	ldi	r24, 0x00	; 0
    63d0:	08 95       	ret

000063d2 <decode_hexadecimal_string_bytes>:
    63d2:	0f 93       	push	r16
    63d4:	1f 93       	push	r17
    63d6:	cf 93       	push	r28
    63d8:	df 93       	push	r29
    63da:	dc 01       	movw	r26, r24
    63dc:	ea 01       	movw	r28, r20
    63de:	20 97       	sbiw	r28, 0x00	; 0
    63e0:	e1 f1       	breq	.+120    	; 0x645a <decode_hexadecimal_string_bytes+0x88>
    63e2:	fa 01       	movw	r30, r20
    63e4:	01 90       	ld	r0, Z+
    63e6:	00 20       	and	r0, r0
    63e8:	e9 f7       	brne	.-6      	; 0x63e4 <decode_hexadecimal_string_bytes+0x12>
    63ea:	31 97       	sbiw	r30, 0x01	; 1
    63ec:	e4 1b       	sub	r30, r20
    63ee:	f5 0b       	sbc	r31, r21
    63f0:	32 97       	sbiw	r30, 0x02	; 2
    63f2:	10 f5       	brcc	.+68     	; 0x6438 <decode_hexadecimal_string_bytes+0x66>
    63f4:	32 c0       	rjmp	.+100    	; 0x645a <decode_hexadecimal_string_bytes+0x88>
    63f6:	8d 01       	movw	r16, r26
    63f8:	04 0f       	add	r16, r20
    63fa:	15 1f       	adc	r17, r21
    63fc:	30 e0       	ldi	r19, 0x00	; 0
    63fe:	ae 01       	movw	r20, r28
    6400:	42 0f       	add	r20, r18
    6402:	53 1f       	adc	r21, r19
    6404:	fa 01       	movw	r30, r20
    6406:	90 81       	ld	r25, Z
    6408:	91 34       	cpi	r25, 0x41	; 65
    640a:	28 f0       	brcs	.+10     	; 0x6416 <decode_hexadecimal_string_bytes+0x44>
    640c:	97 53       	subi	r25, 0x37	; 55
    640e:	59 2f       	mov	r21, r25
    6410:	52 95       	swap	r21
    6412:	50 7f       	andi	r21, 0xF0	; 240
    6414:	03 c0       	rjmp	.+6      	; 0x641c <decode_hexadecimal_string_bytes+0x4a>
    6416:	59 2f       	mov	r21, r25
    6418:	52 95       	swap	r21
    641a:	50 7f       	andi	r21, 0xF0	; 240
    641c:	2c 0f       	add	r18, r28
    641e:	3d 1f       	adc	r19, r29
    6420:	f9 01       	movw	r30, r18
    6422:	91 81       	ldd	r25, Z+1	; 0x01
    6424:	91 34       	cpi	r25, 0x41	; 65
    6426:	10 f0       	brcs	.+4      	; 0x642c <decode_hexadecimal_string_bytes+0x5a>
    6428:	97 53       	subi	r25, 0x37	; 55
    642a:	01 c0       	rjmp	.+2      	; 0x642e <decode_hexadecimal_string_bytes+0x5c>
    642c:	90 53       	subi	r25, 0x30	; 48
    642e:	95 0f       	add	r25, r21
    6430:	f8 01       	movw	r30, r16
    6432:	90 83       	st	Z, r25
    6434:	8f 5f       	subi	r24, 0xFF	; 255
    6436:	01 c0       	rjmp	.+2      	; 0x643a <decode_hexadecimal_string_bytes+0x68>
    6438:	80 e0       	ldi	r24, 0x00	; 0
    643a:	28 2f       	mov	r18, r24
    643c:	22 0f       	add	r18, r18
    643e:	48 2f       	mov	r20, r24
    6440:	50 e0       	ldi	r21, 0x00	; 0
    6442:	fe 01       	movw	r30, r28
    6444:	01 90       	ld	r0, Z+
    6446:	00 20       	and	r0, r0
    6448:	e9 f7       	brne	.-6      	; 0x6444 <decode_hexadecimal_string_bytes+0x72>
    644a:	31 97       	sbiw	r30, 0x01	; 1
    644c:	ec 1b       	sub	r30, r28
    644e:	fd 0b       	sbc	r31, r29
    6450:	4e 17       	cp	r20, r30
    6452:	5f 07       	cpc	r21, r31
    6454:	10 f4       	brcc	.+4      	; 0x645a <decode_hexadecimal_string_bytes+0x88>
    6456:	86 13       	cpse	r24, r22
    6458:	ce cf       	rjmp	.-100    	; 0x63f6 <decode_hexadecimal_string_bytes+0x24>
    645a:	df 91       	pop	r29
    645c:	cf 91       	pop	r28
    645e:	1f 91       	pop	r17
    6460:	0f 91       	pop	r16
    6462:	08 95       	ret

00006464 <serial_create>:
    6464:	2f 92       	push	r2
    6466:	3f 92       	push	r3
    6468:	4f 92       	push	r4
    646a:	5f 92       	push	r5
    646c:	6f 92       	push	r6
    646e:	7f 92       	push	r7
    6470:	8f 92       	push	r8
    6472:	9f 92       	push	r9
    6474:	af 92       	push	r10
    6476:	cf 92       	push	r12
    6478:	ef 92       	push	r14
    647a:	ff 92       	push	r15
    647c:	0f 93       	push	r16
    647e:	1f 93       	push	r17
    6480:	cf 93       	push	r28
    6482:	df 93       	push	r29
    6484:	cd b7       	in	r28, 0x3d	; 61
    6486:	de b7       	in	r29, 0x3e	; 62
    6488:	f8 2e       	mov	r15, r24
    648a:	2a 01       	movw	r4, r20
    648c:	3b 01       	movw	r6, r22
    648e:	88 e0       	ldi	r24, 0x08	; 8
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	b5 d6       	rcall	.+3434   	; 0x71fe <malloc>
    6494:	8c 01       	movw	r16, r24
    6496:	8f 2d       	mov	r24, r15
    6498:	90 e0       	ldi	r25, 0x00	; 0
    649a:	fc 01       	movw	r30, r24
    649c:	ee 0f       	add	r30, r30
    649e:	ff 1f       	adc	r31, r31
    64a0:	ec 52       	subi	r30, 0x2C	; 44
    64a2:	fd 4e       	sbci	r31, 0xED	; 237
    64a4:	11 83       	std	Z+1, r17	; 0x01
    64a6:	00 83       	st	Z, r16
    64a8:	01 15       	cp	r16, r1
    64aa:	11 05       	cpc	r17, r1
    64ac:	09 f4       	brne	.+2      	; 0x64b0 <serial_create+0x4c>
    64ae:	64 c0       	rjmp	.+200    	; 0x6578 <serial_create+0x114>
    64b0:	88 0f       	add	r24, r24
    64b2:	99 1f       	adc	r25, r25
    64b4:	fc 01       	movw	r30, r24
    64b6:	e9 5f       	subi	r30, 0xF9	; 249
    64b8:	fd 4f       	sbci	r31, 0xFD	; 253
    64ba:	80 81       	ld	r24, Z
    64bc:	91 81       	ldd	r25, Z+1	; 0x01
    64be:	d8 01       	movw	r26, r16
    64c0:	8d 93       	st	X+, r24
    64c2:	9c 93       	st	X, r25
    64c4:	8c 2d       	mov	r24, r12
    64c6:	90 e0       	ldi	r25, 0x00	; 0
    64c8:	88 0f       	add	r24, r24
    64ca:	99 1f       	adc	r25, r25
    64cc:	88 0f       	add	r24, r24
    64ce:	99 1f       	adc	r25, r25
    64d0:	96 d6       	rcall	.+3372   	; 0x71fe <malloc>
    64d2:	1c 01       	movw	r2, r24
    64d4:	86 e0       	ldi	r24, 0x06	; 6
    64d6:	90 e0       	ldi	r25, 0x00	; 0
    64d8:	92 d6       	rcall	.+3364   	; 0x71fe <malloc>
    64da:	7c 01       	movw	r14, r24
    64dc:	4c 2d       	mov	r20, r12
    64de:	b1 01       	movw	r22, r2
    64e0:	50 d5       	rcall	.+2720   	; 0x6f82 <fifo_init>
    64e2:	f8 01       	movw	r30, r16
    64e4:	f5 82       	std	Z+5, r15	; 0x05
    64e6:	e4 82       	std	Z+4, r14	; 0x04
    64e8:	8a 2d       	mov	r24, r10
    64ea:	90 e0       	ldi	r25, 0x00	; 0
    64ec:	88 0f       	add	r24, r24
    64ee:	99 1f       	adc	r25, r25
    64f0:	88 0f       	add	r24, r24
    64f2:	99 1f       	adc	r25, r25
    64f4:	84 d6       	rcall	.+3336   	; 0x71fe <malloc>
    64f6:	1c 01       	movw	r2, r24
    64f8:	86 e0       	ldi	r24, 0x06	; 6
    64fa:	90 e0       	ldi	r25, 0x00	; 0
    64fc:	80 d6       	rcall	.+3328   	; 0x71fe <malloc>
    64fe:	7c 01       	movw	r14, r24
    6500:	4a 2d       	mov	r20, r10
    6502:	b1 01       	movw	r22, r2
    6504:	3e d5       	rcall	.+2684   	; 0x6f82 <fifo_init>
    6506:	d8 01       	movw	r26, r16
    6508:	13 96       	adiw	r26, 0x03	; 3
    650a:	fc 92       	st	X, r15
    650c:	ee 92       	st	-X, r14
    650e:	12 97       	sbiw	r26, 0x02	; 2
    6510:	17 96       	adiw	r26, 0x07	; 7
    6512:	9c 92       	st	X, r9
    6514:	8e 92       	st	-X, r8
    6516:	16 97       	sbiw	r26, 0x06	; 6
    6518:	ff b6       	in	r15, 0x3f	; 63
    651a:	f8 94       	cli
    651c:	ed 91       	ld	r30, X+
    651e:	fc 91       	ld	r31, X
    6520:	11 97       	sbiw	r26, 0x01	; 1
    6522:	36 97       	sbiw	r30, 0x06	; 6
    6524:	80 81       	ld	r24, Z
    6526:	82 60       	ori	r24, 0x02	; 2
    6528:	80 83       	st	Z, r24
    652a:	8d 90       	ld	r8, X+
    652c:	9c 90       	ld	r9, X
    652e:	c3 01       	movw	r24, r6
    6530:	b2 01       	movw	r22, r4
    6532:	20 d6       	rcall	.+3136   	; 0x7174 <__floatunsisf>
    6534:	20 e0       	ldi	r18, 0x00	; 0
    6536:	30 e0       	ldi	r19, 0x00	; 0
    6538:	40 e0       	ldi	r20, 0x00	; 0
    653a:	51 e4       	ldi	r21, 0x41	; 65
    653c:	9d da       	rcall	.-2758   	; 0x5a78 <__mulsf3>
    653e:	9b 01       	movw	r18, r22
    6540:	ac 01       	movw	r20, r24
    6542:	60 e0       	ldi	r22, 0x00	; 0
    6544:	74 e2       	ldi	r23, 0x24	; 36
    6546:	84 e7       	ldi	r24, 0x74	; 116
    6548:	9b e4       	ldi	r25, 0x4B	; 75
    654a:	a3 d5       	rcall	.+2886   	; 0x7092 <__divsf3>
    654c:	20 e0       	ldi	r18, 0x00	; 0
    654e:	30 e0       	ldi	r19, 0x00	; 0
    6550:	40 e8       	ldi	r20, 0x80	; 128
    6552:	5f e3       	ldi	r21, 0x3F	; 63
    6554:	32 d5       	rcall	.+2660   	; 0x6fba <__subsf3>
    6556:	13 da       	rcall	.-3034   	; 0x597e <__fixunssfsi>
    6558:	f4 01       	movw	r30, r8
    655a:	32 97       	sbiw	r30, 0x02	; 2
    655c:	60 83       	st	Z, r22
    655e:	d8 01       	movw	r26, r16
    6560:	ed 91       	ld	r30, X+
    6562:	fc 91       	ld	r31, X
    6564:	11 97       	sbiw	r26, 0x01	; 1
    6566:	35 97       	sbiw	r30, 0x05	; 5
    6568:	88 e9       	ldi	r24, 0x98	; 152
    656a:	80 83       	st	Z, r24
    656c:	ed 91       	ld	r30, X+
    656e:	fc 91       	ld	r31, X
    6570:	34 97       	sbiw	r30, 0x04	; 4
    6572:	86 e0       	ldi	r24, 0x06	; 6
    6574:	80 83       	st	Z, r24
    6576:	ff be       	out	0x3f, r15	; 63
    6578:	c8 01       	movw	r24, r16
    657a:	df 91       	pop	r29
    657c:	cf 91       	pop	r28
    657e:	1f 91       	pop	r17
    6580:	0f 91       	pop	r16
    6582:	ff 90       	pop	r15
    6584:	ef 90       	pop	r14
    6586:	cf 90       	pop	r12
    6588:	af 90       	pop	r10
    658a:	9f 90       	pop	r9
    658c:	8f 90       	pop	r8
    658e:	7f 90       	pop	r7
    6590:	6f 90       	pop	r6
    6592:	5f 90       	pop	r5
    6594:	4f 90       	pop	r4
    6596:	3f 90       	pop	r3
    6598:	2f 90       	pop	r2
    659a:	08 95       	ret

0000659c <serial_sendByte>:
    659c:	cf 93       	push	r28
    659e:	df 93       	push	r29
    65a0:	dc 01       	movw	r26, r24
    65a2:	89 2b       	or	r24, r25
    65a4:	01 f1       	breq	.+64     	; 0x65e6 <serial_sendByte+0x4a>
    65a6:	12 96       	adiw	r26, 0x02	; 2
    65a8:	ed 91       	ld	r30, X+
    65aa:	fc 91       	ld	r31, X
    65ac:	13 97       	sbiw	r26, 0x03	; 3
    65ae:	93 81       	ldd	r25, Z+3	; 0x03
    65b0:	82 81       	ldd	r24, Z+2	; 0x02
    65b2:	25 81       	ldd	r18, Z+5	; 0x05
    65b4:	98 1b       	sub	r25, r24
    65b6:	92 23       	and	r25, r18
    65b8:	84 81       	ldd	r24, Z+4	; 0x04
    65ba:	98 17       	cp	r25, r24
    65bc:	b1 f0       	breq	.+44     	; 0x65ea <serial_sendByte+0x4e>
    65be:	83 81       	ldd	r24, Z+3	; 0x03
    65c0:	26 95       	lsr	r18
    65c2:	28 23       	and	r18, r24
    65c4:	c0 81       	ld	r28, Z
    65c6:	d1 81       	ldd	r29, Z+1	; 0x01
    65c8:	c2 0f       	add	r28, r18
    65ca:	d1 1d       	adc	r29, r1
    65cc:	68 83       	st	Y, r22
    65ce:	8f 5f       	subi	r24, 0xFF	; 255
    65d0:	95 81       	ldd	r25, Z+5	; 0x05
    65d2:	89 23       	and	r24, r25
    65d4:	83 83       	std	Z+3, r24	; 0x03
    65d6:	ed 91       	ld	r30, X+
    65d8:	fc 91       	ld	r31, X
    65da:	35 97       	sbiw	r30, 0x05	; 5
    65dc:	80 81       	ld	r24, Z
    65de:	80 62       	ori	r24, 0x20	; 32
    65e0:	80 83       	st	Z, r24
    65e2:	80 e0       	ldi	r24, 0x00	; 0
    65e4:	03 c0       	rjmp	.+6      	; 0x65ec <serial_sendByte+0x50>
    65e6:	81 e0       	ldi	r24, 0x01	; 1
    65e8:	01 c0       	rjmp	.+2      	; 0x65ec <serial_sendByte+0x50>
    65ea:	82 e0       	ldi	r24, 0x02	; 2
    65ec:	df 91       	pop	r29
    65ee:	cf 91       	pop	r28
    65f0:	08 95       	ret

000065f2 <serial_sendBytes>:
    65f2:	ef 92       	push	r14
    65f4:	ff 92       	push	r15
    65f6:	0f 93       	push	r16
    65f8:	1f 93       	push	r17
    65fa:	cf 93       	push	r28
    65fc:	df 93       	push	r29
    65fe:	7c 01       	movw	r14, r24
    6600:	00 97       	sbiw	r24, 0x00	; 0
    6602:	09 f4       	brne	.+2      	; 0x6606 <serial_sendBytes+0x14>
    6604:	41 c0       	rjmp	.+130    	; 0x6688 <serial_sendBytes+0x96>
    6606:	dc 01       	movw	r26, r24
    6608:	12 96       	adiw	r26, 0x02	; 2
    660a:	ed 91       	ld	r30, X+
    660c:	fc 91       	ld	r31, X
    660e:	13 97       	sbiw	r26, 0x03	; 3
    6610:	93 81       	ldd	r25, Z+3	; 0x03
    6612:	82 81       	ldd	r24, Z+2	; 0x02
    6614:	98 1b       	sub	r25, r24
    6616:	85 81       	ldd	r24, Z+5	; 0x05
    6618:	98 23       	and	r25, r24
    661a:	84 81       	ldd	r24, Z+4	; 0x04
    661c:	89 1b       	sub	r24, r25
    661e:	86 17       	cp	r24, r22
    6620:	a8 f1       	brcs	.+106    	; 0x668c <serial_sendBytes+0x9a>
    6622:	66 23       	and	r22, r22
    6624:	41 f1       	breq	.+80     	; 0x6676 <serial_sendBytes+0x84>
    6626:	84 2f       	mov	r24, r20
    6628:	95 2f       	mov	r25, r21
    662a:	dc 01       	movw	r26, r24
    662c:	61 50       	subi	r22, 0x01	; 1
    662e:	46 2f       	mov	r20, r22
    6630:	50 e0       	ldi	r21, 0x00	; 0
    6632:	4f 5f       	subi	r20, 0xFF	; 255
    6634:	5f 4f       	sbci	r21, 0xFF	; 255
    6636:	48 0f       	add	r20, r24
    6638:	59 1f       	adc	r21, r25
    663a:	e7 01       	movw	r28, r14
    663c:	ea 81       	ldd	r30, Y+2	; 0x02
    663e:	fb 81       	ldd	r31, Y+3	; 0x03
    6640:	93 81       	ldd	r25, Z+3	; 0x03
    6642:	82 81       	ldd	r24, Z+2	; 0x02
    6644:	25 81       	ldd	r18, Z+5	; 0x05
    6646:	98 1b       	sub	r25, r24
    6648:	92 23       	and	r25, r18
    664a:	84 81       	ldd	r24, Z+4	; 0x04
    664c:	98 17       	cp	r25, r24
    664e:	79 f0       	breq	.+30     	; 0x666e <serial_sendBytes+0x7c>
    6650:	8c 91       	ld	r24, X
    6652:	93 81       	ldd	r25, Z+3	; 0x03
    6654:	26 95       	lsr	r18
    6656:	29 23       	and	r18, r25
    6658:	60 81       	ld	r22, Z
    665a:	71 81       	ldd	r23, Z+1	; 0x01
    665c:	8b 01       	movw	r16, r22
    665e:	02 0f       	add	r16, r18
    6660:	11 1d       	adc	r17, r1
    6662:	e8 01       	movw	r28, r16
    6664:	88 83       	st	Y, r24
    6666:	9f 5f       	subi	r25, 0xFF	; 255
    6668:	85 81       	ldd	r24, Z+5	; 0x05
    666a:	98 23       	and	r25, r24
    666c:	93 83       	std	Z+3, r25	; 0x03
    666e:	11 96       	adiw	r26, 0x01	; 1
    6670:	a4 17       	cp	r26, r20
    6672:	b5 07       	cpc	r27, r21
    6674:	11 f7       	brne	.-60     	; 0x663a <serial_sendBytes+0x48>
    6676:	d7 01       	movw	r26, r14
    6678:	ed 91       	ld	r30, X+
    667a:	fc 91       	ld	r31, X
    667c:	35 97       	sbiw	r30, 0x05	; 5
    667e:	80 81       	ld	r24, Z
    6680:	80 62       	ori	r24, 0x20	; 32
    6682:	80 83       	st	Z, r24
    6684:	80 e0       	ldi	r24, 0x00	; 0
    6686:	03 c0       	rjmp	.+6      	; 0x668e <serial_sendBytes+0x9c>
    6688:	81 e0       	ldi	r24, 0x01	; 1
    668a:	01 c0       	rjmp	.+2      	; 0x668e <serial_sendBytes+0x9c>
    668c:	82 e0       	ldi	r24, 0x02	; 2
    668e:	df 91       	pop	r29
    6690:	cf 91       	pop	r28
    6692:	1f 91       	pop	r17
    6694:	0f 91       	pop	r16
    6696:	ff 90       	pop	r15
    6698:	ef 90       	pop	r14
    669a:	08 95       	ret

0000669c <serial_getByte>:
    669c:	00 97       	sbiw	r24, 0x00	; 0
    669e:	d1 f0       	breq	.+52     	; 0x66d4 <serial_getByte+0x38>
    66a0:	dc 01       	movw	r26, r24
    66a2:	14 96       	adiw	r26, 0x04	; 4
    66a4:	ed 91       	ld	r30, X+
    66a6:	fc 91       	ld	r31, X
    66a8:	15 97       	sbiw	r26, 0x05	; 5
    66aa:	93 81       	ldd	r25, Z+3	; 0x03
    66ac:	82 81       	ldd	r24, Z+2	; 0x02
    66ae:	98 17       	cp	r25, r24
    66b0:	99 f0       	breq	.+38     	; 0x66d8 <serial_getByte+0x3c>
    66b2:	92 81       	ldd	r25, Z+2	; 0x02
    66b4:	85 81       	ldd	r24, Z+5	; 0x05
    66b6:	86 95       	lsr	r24
    66b8:	89 23       	and	r24, r25
    66ba:	a0 81       	ld	r26, Z
    66bc:	b1 81       	ldd	r27, Z+1	; 0x01
    66be:	a8 0f       	add	r26, r24
    66c0:	b1 1d       	adc	r27, r1
    66c2:	8c 91       	ld	r24, X
    66c4:	db 01       	movw	r26, r22
    66c6:	8c 93       	st	X, r24
    66c8:	9f 5f       	subi	r25, 0xFF	; 255
    66ca:	85 81       	ldd	r24, Z+5	; 0x05
    66cc:	98 23       	and	r25, r24
    66ce:	92 83       	std	Z+2, r25	; 0x02
    66d0:	80 e0       	ldi	r24, 0x00	; 0
    66d2:	08 95       	ret
    66d4:	81 e0       	ldi	r24, 0x01	; 1
    66d6:	08 95       	ret
    66d8:	83 e0       	ldi	r24, 0x03	; 3
    66da:	08 95       	ret

000066dc <__vector_25>:
    66dc:	1f 92       	push	r1
    66de:	0f 92       	push	r0
    66e0:	0f b6       	in	r0, 0x3f	; 63
    66e2:	0f 92       	push	r0
    66e4:	11 24       	eor	r1, r1
    66e6:	0b b6       	in	r0, 0x3b	; 59
    66e8:	0f 92       	push	r0
    66ea:	2f 93       	push	r18
    66ec:	3f 93       	push	r19
    66ee:	4f 93       	push	r20
    66f0:	5f 93       	push	r21
    66f2:	6f 93       	push	r22
    66f4:	7f 93       	push	r23
    66f6:	8f 93       	push	r24
    66f8:	9f 93       	push	r25
    66fa:	af 93       	push	r26
    66fc:	bf 93       	push	r27
    66fe:	cf 93       	push	r28
    6700:	df 93       	push	r29
    6702:	ef 93       	push	r30
    6704:	ff 93       	push	r31
    6706:	a0 91 d4 12 	lds	r26, 0x12D4	; 0x8012d4 <_ser_handle>
    670a:	b0 91 d5 12 	lds	r27, 0x12D5	; 0x8012d5 <_ser_handle+0x1>
    670e:	10 97       	sbiw	r26, 0x00	; 0
    6710:	11 f1       	breq	.+68     	; 0x6756 <__vector_25+0x7a>
    6712:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    6716:	14 96       	adiw	r26, 0x04	; 4
    6718:	ed 91       	ld	r30, X+
    671a:	fc 91       	ld	r31, X
    671c:	15 97       	sbiw	r26, 0x05	; 5
    671e:	93 81       	ldd	r25, Z+3	; 0x03
    6720:	82 81       	ldd	r24, Z+2	; 0x02
    6722:	25 81       	ldd	r18, Z+5	; 0x05
    6724:	98 1b       	sub	r25, r24
    6726:	92 23       	and	r25, r18
    6728:	84 81       	ldd	r24, Z+4	; 0x04
    672a:	98 17       	cp	r25, r24
    672c:	61 f0       	breq	.+24     	; 0x6746 <__vector_25+0x6a>
    672e:	83 81       	ldd	r24, Z+3	; 0x03
    6730:	26 95       	lsr	r18
    6732:	28 23       	and	r18, r24
    6734:	c0 81       	ld	r28, Z
    6736:	d1 81       	ldd	r29, Z+1	; 0x01
    6738:	c2 0f       	add	r28, r18
    673a:	d1 1d       	adc	r29, r1
    673c:	68 83       	st	Y, r22
    673e:	8f 5f       	subi	r24, 0xFF	; 255
    6740:	95 81       	ldd	r25, Z+5	; 0x05
    6742:	89 23       	and	r24, r25
    6744:	83 83       	std	Z+3, r24	; 0x03
    6746:	16 96       	adiw	r26, 0x06	; 6
    6748:	ed 91       	ld	r30, X+
    674a:	fc 91       	ld	r31, X
    674c:	17 97       	sbiw	r26, 0x07	; 7
    674e:	30 97       	sbiw	r30, 0x00	; 0
    6750:	11 f0       	breq	.+4      	; 0x6756 <__vector_25+0x7a>
    6752:	cd 01       	movw	r24, r26
    6754:	19 95       	eicall
    6756:	ff 91       	pop	r31
    6758:	ef 91       	pop	r30
    675a:	df 91       	pop	r29
    675c:	cf 91       	pop	r28
    675e:	bf 91       	pop	r27
    6760:	af 91       	pop	r26
    6762:	9f 91       	pop	r25
    6764:	8f 91       	pop	r24
    6766:	7f 91       	pop	r23
    6768:	6f 91       	pop	r22
    676a:	5f 91       	pop	r21
    676c:	4f 91       	pop	r20
    676e:	3f 91       	pop	r19
    6770:	2f 91       	pop	r18
    6772:	0f 90       	pop	r0
    6774:	0b be       	out	0x3b, r0	; 59
    6776:	0f 90       	pop	r0
    6778:	0f be       	out	0x3f, r0	; 63
    677a:	0f 90       	pop	r0
    677c:	1f 90       	pop	r1
    677e:	18 95       	reti

00006780 <__vector_26>:
    6780:	1f 92       	push	r1
    6782:	0f 92       	push	r0
    6784:	0f b6       	in	r0, 0x3f	; 63
    6786:	0f 92       	push	r0
    6788:	11 24       	eor	r1, r1
    678a:	0b b6       	in	r0, 0x3b	; 59
    678c:	0f 92       	push	r0
    678e:	2f 93       	push	r18
    6790:	8f 93       	push	r24
    6792:	9f 93       	push	r25
    6794:	af 93       	push	r26
    6796:	bf 93       	push	r27
    6798:	ef 93       	push	r30
    679a:	ff 93       	push	r31
    679c:	e0 91 d4 12 	lds	r30, 0x12D4	; 0x8012d4 <_ser_handle>
    67a0:	f0 91 d5 12 	lds	r31, 0x12D5	; 0x8012d5 <_ser_handle+0x1>
    67a4:	30 97       	sbiw	r30, 0x00	; 0
    67a6:	b9 f0       	breq	.+46     	; 0x67d6 <__vector_26+0x56>
    67a8:	02 80       	ldd	r0, Z+2	; 0x02
    67aa:	f3 81       	ldd	r31, Z+3	; 0x03
    67ac:	e0 2d       	mov	r30, r0
    67ae:	93 81       	ldd	r25, Z+3	; 0x03
    67b0:	82 81       	ldd	r24, Z+2	; 0x02
    67b2:	98 17       	cp	r25, r24
    67b4:	b1 f0       	breq	.+44     	; 0x67e2 <__vector_26+0x62>
    67b6:	92 81       	ldd	r25, Z+2	; 0x02
    67b8:	85 81       	ldd	r24, Z+5	; 0x05
    67ba:	28 2f       	mov	r18, r24
    67bc:	26 95       	lsr	r18
    67be:	29 23       	and	r18, r25
    67c0:	a0 81       	ld	r26, Z
    67c2:	b1 81       	ldd	r27, Z+1	; 0x01
    67c4:	a2 0f       	add	r26, r18
    67c6:	b1 1d       	adc	r27, r1
    67c8:	2c 91       	ld	r18, X
    67ca:	9f 5f       	subi	r25, 0xFF	; 255
    67cc:	89 23       	and	r24, r25
    67ce:	82 83       	std	Z+2, r24	; 0x02
    67d0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    67d4:	0b c0       	rjmp	.+22     	; 0x67ec <__vector_26+0x6c>
    67d6:	e1 ec       	ldi	r30, 0xC1	; 193
    67d8:	f0 e0       	ldi	r31, 0x00	; 0
    67da:	80 81       	ld	r24, Z
    67dc:	8f 7d       	andi	r24, 0xDF	; 223
    67de:	80 83       	st	Z, r24
    67e0:	05 c0       	rjmp	.+10     	; 0x67ec <__vector_26+0x6c>
    67e2:	e1 ec       	ldi	r30, 0xC1	; 193
    67e4:	f0 e0       	ldi	r31, 0x00	; 0
    67e6:	80 81       	ld	r24, Z
    67e8:	8f 7d       	andi	r24, 0xDF	; 223
    67ea:	80 83       	st	Z, r24
    67ec:	ff 91       	pop	r31
    67ee:	ef 91       	pop	r30
    67f0:	bf 91       	pop	r27
    67f2:	af 91       	pop	r26
    67f4:	9f 91       	pop	r25
    67f6:	8f 91       	pop	r24
    67f8:	2f 91       	pop	r18
    67fa:	0f 90       	pop	r0
    67fc:	0b be       	out	0x3b, r0	; 59
    67fe:	0f 90       	pop	r0
    6800:	0f be       	out	0x3f, r0	; 63
    6802:	0f 90       	pop	r0
    6804:	1f 90       	pop	r1
    6806:	18 95       	reti

00006808 <__vector_36>:
    6808:	1f 92       	push	r1
    680a:	0f 92       	push	r0
    680c:	0f b6       	in	r0, 0x3f	; 63
    680e:	0f 92       	push	r0
    6810:	11 24       	eor	r1, r1
    6812:	0b b6       	in	r0, 0x3b	; 59
    6814:	0f 92       	push	r0
    6816:	2f 93       	push	r18
    6818:	3f 93       	push	r19
    681a:	4f 93       	push	r20
    681c:	5f 93       	push	r21
    681e:	6f 93       	push	r22
    6820:	7f 93       	push	r23
    6822:	8f 93       	push	r24
    6824:	9f 93       	push	r25
    6826:	af 93       	push	r26
    6828:	bf 93       	push	r27
    682a:	cf 93       	push	r28
    682c:	df 93       	push	r29
    682e:	ef 93       	push	r30
    6830:	ff 93       	push	r31
    6832:	a0 91 d6 12 	lds	r26, 0x12D6	; 0x8012d6 <_ser_handle+0x2>
    6836:	b0 91 d7 12 	lds	r27, 0x12D7	; 0x8012d7 <_ser_handle+0x3>
    683a:	10 97       	sbiw	r26, 0x00	; 0
    683c:	11 f1       	breq	.+68     	; 0x6882 <__vector_36+0x7a>
    683e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    6842:	14 96       	adiw	r26, 0x04	; 4
    6844:	ed 91       	ld	r30, X+
    6846:	fc 91       	ld	r31, X
    6848:	15 97       	sbiw	r26, 0x05	; 5
    684a:	93 81       	ldd	r25, Z+3	; 0x03
    684c:	82 81       	ldd	r24, Z+2	; 0x02
    684e:	25 81       	ldd	r18, Z+5	; 0x05
    6850:	98 1b       	sub	r25, r24
    6852:	92 23       	and	r25, r18
    6854:	84 81       	ldd	r24, Z+4	; 0x04
    6856:	98 17       	cp	r25, r24
    6858:	61 f0       	breq	.+24     	; 0x6872 <__vector_36+0x6a>
    685a:	83 81       	ldd	r24, Z+3	; 0x03
    685c:	26 95       	lsr	r18
    685e:	28 23       	and	r18, r24
    6860:	c0 81       	ld	r28, Z
    6862:	d1 81       	ldd	r29, Z+1	; 0x01
    6864:	c2 0f       	add	r28, r18
    6866:	d1 1d       	adc	r29, r1
    6868:	68 83       	st	Y, r22
    686a:	8f 5f       	subi	r24, 0xFF	; 255
    686c:	95 81       	ldd	r25, Z+5	; 0x05
    686e:	89 23       	and	r24, r25
    6870:	83 83       	std	Z+3, r24	; 0x03
    6872:	16 96       	adiw	r26, 0x06	; 6
    6874:	ed 91       	ld	r30, X+
    6876:	fc 91       	ld	r31, X
    6878:	17 97       	sbiw	r26, 0x07	; 7
    687a:	30 97       	sbiw	r30, 0x00	; 0
    687c:	11 f0       	breq	.+4      	; 0x6882 <__vector_36+0x7a>
    687e:	cd 01       	movw	r24, r26
    6880:	19 95       	eicall
    6882:	ff 91       	pop	r31
    6884:	ef 91       	pop	r30
    6886:	df 91       	pop	r29
    6888:	cf 91       	pop	r28
    688a:	bf 91       	pop	r27
    688c:	af 91       	pop	r26
    688e:	9f 91       	pop	r25
    6890:	8f 91       	pop	r24
    6892:	7f 91       	pop	r23
    6894:	6f 91       	pop	r22
    6896:	5f 91       	pop	r21
    6898:	4f 91       	pop	r20
    689a:	3f 91       	pop	r19
    689c:	2f 91       	pop	r18
    689e:	0f 90       	pop	r0
    68a0:	0b be       	out	0x3b, r0	; 59
    68a2:	0f 90       	pop	r0
    68a4:	0f be       	out	0x3f, r0	; 63
    68a6:	0f 90       	pop	r0
    68a8:	1f 90       	pop	r1
    68aa:	18 95       	reti

000068ac <__vector_37>:
    68ac:	1f 92       	push	r1
    68ae:	0f 92       	push	r0
    68b0:	0f b6       	in	r0, 0x3f	; 63
    68b2:	0f 92       	push	r0
    68b4:	11 24       	eor	r1, r1
    68b6:	0b b6       	in	r0, 0x3b	; 59
    68b8:	0f 92       	push	r0
    68ba:	2f 93       	push	r18
    68bc:	8f 93       	push	r24
    68be:	9f 93       	push	r25
    68c0:	af 93       	push	r26
    68c2:	bf 93       	push	r27
    68c4:	ef 93       	push	r30
    68c6:	ff 93       	push	r31
    68c8:	e0 91 d6 12 	lds	r30, 0x12D6	; 0x8012d6 <_ser_handle+0x2>
    68cc:	f0 91 d7 12 	lds	r31, 0x12D7	; 0x8012d7 <_ser_handle+0x3>
    68d0:	30 97       	sbiw	r30, 0x00	; 0
    68d2:	b9 f0       	breq	.+46     	; 0x6902 <__vector_37+0x56>
    68d4:	02 80       	ldd	r0, Z+2	; 0x02
    68d6:	f3 81       	ldd	r31, Z+3	; 0x03
    68d8:	e0 2d       	mov	r30, r0
    68da:	93 81       	ldd	r25, Z+3	; 0x03
    68dc:	82 81       	ldd	r24, Z+2	; 0x02
    68de:	98 17       	cp	r25, r24
    68e0:	b1 f0       	breq	.+44     	; 0x690e <__vector_37+0x62>
    68e2:	92 81       	ldd	r25, Z+2	; 0x02
    68e4:	85 81       	ldd	r24, Z+5	; 0x05
    68e6:	28 2f       	mov	r18, r24
    68e8:	26 95       	lsr	r18
    68ea:	29 23       	and	r18, r25
    68ec:	a0 81       	ld	r26, Z
    68ee:	b1 81       	ldd	r27, Z+1	; 0x01
    68f0:	a2 0f       	add	r26, r18
    68f2:	b1 1d       	adc	r27, r1
    68f4:	2c 91       	ld	r18, X
    68f6:	9f 5f       	subi	r25, 0xFF	; 255
    68f8:	89 23       	and	r24, r25
    68fa:	82 83       	std	Z+2, r24	; 0x02
    68fc:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    6900:	0b c0       	rjmp	.+22     	; 0x6918 <__vector_37+0x6c>
    6902:	e9 ec       	ldi	r30, 0xC9	; 201
    6904:	f0 e0       	ldi	r31, 0x00	; 0
    6906:	80 81       	ld	r24, Z
    6908:	8f 7d       	andi	r24, 0xDF	; 223
    690a:	80 83       	st	Z, r24
    690c:	05 c0       	rjmp	.+10     	; 0x6918 <__vector_37+0x6c>
    690e:	e9 ec       	ldi	r30, 0xC9	; 201
    6910:	f0 e0       	ldi	r31, 0x00	; 0
    6912:	80 81       	ld	r24, Z
    6914:	8f 7d       	andi	r24, 0xDF	; 223
    6916:	80 83       	st	Z, r24
    6918:	ff 91       	pop	r31
    691a:	ef 91       	pop	r30
    691c:	bf 91       	pop	r27
    691e:	af 91       	pop	r26
    6920:	9f 91       	pop	r25
    6922:	8f 91       	pop	r24
    6924:	2f 91       	pop	r18
    6926:	0f 90       	pop	r0
    6928:	0b be       	out	0x3b, r0	; 59
    692a:	0f 90       	pop	r0
    692c:	0f be       	out	0x3f, r0	; 63
    692e:	0f 90       	pop	r0
    6930:	1f 90       	pop	r1
    6932:	18 95       	reti

00006934 <__vector_51>:
    6934:	1f 92       	push	r1
    6936:	0f 92       	push	r0
    6938:	0f b6       	in	r0, 0x3f	; 63
    693a:	0f 92       	push	r0
    693c:	11 24       	eor	r1, r1
    693e:	0b b6       	in	r0, 0x3b	; 59
    6940:	0f 92       	push	r0
    6942:	2f 93       	push	r18
    6944:	3f 93       	push	r19
    6946:	4f 93       	push	r20
    6948:	5f 93       	push	r21
    694a:	6f 93       	push	r22
    694c:	7f 93       	push	r23
    694e:	8f 93       	push	r24
    6950:	9f 93       	push	r25
    6952:	af 93       	push	r26
    6954:	bf 93       	push	r27
    6956:	cf 93       	push	r28
    6958:	df 93       	push	r29
    695a:	ef 93       	push	r30
    695c:	ff 93       	push	r31
    695e:	a0 91 d8 12 	lds	r26, 0x12D8	; 0x8012d8 <_ser_handle+0x4>
    6962:	b0 91 d9 12 	lds	r27, 0x12D9	; 0x8012d9 <_ser_handle+0x5>
    6966:	10 97       	sbiw	r26, 0x00	; 0
    6968:	11 f1       	breq	.+68     	; 0x69ae <__vector_51+0x7a>
    696a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    696e:	14 96       	adiw	r26, 0x04	; 4
    6970:	ed 91       	ld	r30, X+
    6972:	fc 91       	ld	r31, X
    6974:	15 97       	sbiw	r26, 0x05	; 5
    6976:	93 81       	ldd	r25, Z+3	; 0x03
    6978:	82 81       	ldd	r24, Z+2	; 0x02
    697a:	25 81       	ldd	r18, Z+5	; 0x05
    697c:	98 1b       	sub	r25, r24
    697e:	92 23       	and	r25, r18
    6980:	84 81       	ldd	r24, Z+4	; 0x04
    6982:	98 17       	cp	r25, r24
    6984:	61 f0       	breq	.+24     	; 0x699e <__vector_51+0x6a>
    6986:	83 81       	ldd	r24, Z+3	; 0x03
    6988:	26 95       	lsr	r18
    698a:	28 23       	and	r18, r24
    698c:	c0 81       	ld	r28, Z
    698e:	d1 81       	ldd	r29, Z+1	; 0x01
    6990:	c2 0f       	add	r28, r18
    6992:	d1 1d       	adc	r29, r1
    6994:	68 83       	st	Y, r22
    6996:	8f 5f       	subi	r24, 0xFF	; 255
    6998:	95 81       	ldd	r25, Z+5	; 0x05
    699a:	89 23       	and	r24, r25
    699c:	83 83       	std	Z+3, r24	; 0x03
    699e:	16 96       	adiw	r26, 0x06	; 6
    69a0:	ed 91       	ld	r30, X+
    69a2:	fc 91       	ld	r31, X
    69a4:	17 97       	sbiw	r26, 0x07	; 7
    69a6:	30 97       	sbiw	r30, 0x00	; 0
    69a8:	11 f0       	breq	.+4      	; 0x69ae <__vector_51+0x7a>
    69aa:	cd 01       	movw	r24, r26
    69ac:	19 95       	eicall
    69ae:	ff 91       	pop	r31
    69b0:	ef 91       	pop	r30
    69b2:	df 91       	pop	r29
    69b4:	cf 91       	pop	r28
    69b6:	bf 91       	pop	r27
    69b8:	af 91       	pop	r26
    69ba:	9f 91       	pop	r25
    69bc:	8f 91       	pop	r24
    69be:	7f 91       	pop	r23
    69c0:	6f 91       	pop	r22
    69c2:	5f 91       	pop	r21
    69c4:	4f 91       	pop	r20
    69c6:	3f 91       	pop	r19
    69c8:	2f 91       	pop	r18
    69ca:	0f 90       	pop	r0
    69cc:	0b be       	out	0x3b, r0	; 59
    69ce:	0f 90       	pop	r0
    69d0:	0f be       	out	0x3f, r0	; 63
    69d2:	0f 90       	pop	r0
    69d4:	1f 90       	pop	r1
    69d6:	18 95       	reti

000069d8 <__vector_52>:
    69d8:	1f 92       	push	r1
    69da:	0f 92       	push	r0
    69dc:	0f b6       	in	r0, 0x3f	; 63
    69de:	0f 92       	push	r0
    69e0:	11 24       	eor	r1, r1
    69e2:	0b b6       	in	r0, 0x3b	; 59
    69e4:	0f 92       	push	r0
    69e6:	2f 93       	push	r18
    69e8:	8f 93       	push	r24
    69ea:	9f 93       	push	r25
    69ec:	af 93       	push	r26
    69ee:	bf 93       	push	r27
    69f0:	ef 93       	push	r30
    69f2:	ff 93       	push	r31
    69f4:	e0 91 d8 12 	lds	r30, 0x12D8	; 0x8012d8 <_ser_handle+0x4>
    69f8:	f0 91 d9 12 	lds	r31, 0x12D9	; 0x8012d9 <_ser_handle+0x5>
    69fc:	30 97       	sbiw	r30, 0x00	; 0
    69fe:	b9 f0       	breq	.+46     	; 0x6a2e <__vector_52+0x56>
    6a00:	02 80       	ldd	r0, Z+2	; 0x02
    6a02:	f3 81       	ldd	r31, Z+3	; 0x03
    6a04:	e0 2d       	mov	r30, r0
    6a06:	93 81       	ldd	r25, Z+3	; 0x03
    6a08:	82 81       	ldd	r24, Z+2	; 0x02
    6a0a:	98 17       	cp	r25, r24
    6a0c:	b1 f0       	breq	.+44     	; 0x6a3a <__vector_52+0x62>
    6a0e:	92 81       	ldd	r25, Z+2	; 0x02
    6a10:	85 81       	ldd	r24, Z+5	; 0x05
    6a12:	28 2f       	mov	r18, r24
    6a14:	26 95       	lsr	r18
    6a16:	29 23       	and	r18, r25
    6a18:	a0 81       	ld	r26, Z
    6a1a:	b1 81       	ldd	r27, Z+1	; 0x01
    6a1c:	a2 0f       	add	r26, r18
    6a1e:	b1 1d       	adc	r27, r1
    6a20:	2c 91       	ld	r18, X
    6a22:	9f 5f       	subi	r25, 0xFF	; 255
    6a24:	89 23       	and	r24, r25
    6a26:	82 83       	std	Z+2, r24	; 0x02
    6a28:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    6a2c:	0b c0       	rjmp	.+22     	; 0x6a44 <__vector_52+0x6c>
    6a2e:	e1 ed       	ldi	r30, 0xD1	; 209
    6a30:	f0 e0       	ldi	r31, 0x00	; 0
    6a32:	80 81       	ld	r24, Z
    6a34:	8f 7d       	andi	r24, 0xDF	; 223
    6a36:	80 83       	st	Z, r24
    6a38:	05 c0       	rjmp	.+10     	; 0x6a44 <__vector_52+0x6c>
    6a3a:	e1 ed       	ldi	r30, 0xD1	; 209
    6a3c:	f0 e0       	ldi	r31, 0x00	; 0
    6a3e:	80 81       	ld	r24, Z
    6a40:	8f 7d       	andi	r24, 0xDF	; 223
    6a42:	80 83       	st	Z, r24
    6a44:	ff 91       	pop	r31
    6a46:	ef 91       	pop	r30
    6a48:	bf 91       	pop	r27
    6a4a:	af 91       	pop	r26
    6a4c:	9f 91       	pop	r25
    6a4e:	8f 91       	pop	r24
    6a50:	2f 91       	pop	r18
    6a52:	0f 90       	pop	r0
    6a54:	0b be       	out	0x3b, r0	; 59
    6a56:	0f 90       	pop	r0
    6a58:	0f be       	out	0x3f, r0	; 63
    6a5a:	0f 90       	pop	r0
    6a5c:	1f 90       	pop	r1
    6a5e:	18 95       	reti

00006a60 <__vector_54>:
    6a60:	1f 92       	push	r1
    6a62:	0f 92       	push	r0
    6a64:	0f b6       	in	r0, 0x3f	; 63
    6a66:	0f 92       	push	r0
    6a68:	11 24       	eor	r1, r1
    6a6a:	0b b6       	in	r0, 0x3b	; 59
    6a6c:	0f 92       	push	r0
    6a6e:	2f 93       	push	r18
    6a70:	3f 93       	push	r19
    6a72:	4f 93       	push	r20
    6a74:	5f 93       	push	r21
    6a76:	6f 93       	push	r22
    6a78:	7f 93       	push	r23
    6a7a:	8f 93       	push	r24
    6a7c:	9f 93       	push	r25
    6a7e:	af 93       	push	r26
    6a80:	bf 93       	push	r27
    6a82:	cf 93       	push	r28
    6a84:	df 93       	push	r29
    6a86:	ef 93       	push	r30
    6a88:	ff 93       	push	r31
    6a8a:	a0 91 da 12 	lds	r26, 0x12DA	; 0x8012da <_ser_handle+0x6>
    6a8e:	b0 91 db 12 	lds	r27, 0x12DB	; 0x8012db <_ser_handle+0x7>
    6a92:	10 97       	sbiw	r26, 0x00	; 0
    6a94:	11 f1       	breq	.+68     	; 0x6ada <__vector_54+0x7a>
    6a96:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    6a9a:	14 96       	adiw	r26, 0x04	; 4
    6a9c:	ed 91       	ld	r30, X+
    6a9e:	fc 91       	ld	r31, X
    6aa0:	15 97       	sbiw	r26, 0x05	; 5
    6aa2:	93 81       	ldd	r25, Z+3	; 0x03
    6aa4:	82 81       	ldd	r24, Z+2	; 0x02
    6aa6:	25 81       	ldd	r18, Z+5	; 0x05
    6aa8:	98 1b       	sub	r25, r24
    6aaa:	92 23       	and	r25, r18
    6aac:	84 81       	ldd	r24, Z+4	; 0x04
    6aae:	98 17       	cp	r25, r24
    6ab0:	61 f0       	breq	.+24     	; 0x6aca <__vector_54+0x6a>
    6ab2:	83 81       	ldd	r24, Z+3	; 0x03
    6ab4:	26 95       	lsr	r18
    6ab6:	28 23       	and	r18, r24
    6ab8:	c0 81       	ld	r28, Z
    6aba:	d1 81       	ldd	r29, Z+1	; 0x01
    6abc:	c2 0f       	add	r28, r18
    6abe:	d1 1d       	adc	r29, r1
    6ac0:	68 83       	st	Y, r22
    6ac2:	8f 5f       	subi	r24, 0xFF	; 255
    6ac4:	95 81       	ldd	r25, Z+5	; 0x05
    6ac6:	89 23       	and	r24, r25
    6ac8:	83 83       	std	Z+3, r24	; 0x03
    6aca:	16 96       	adiw	r26, 0x06	; 6
    6acc:	ed 91       	ld	r30, X+
    6ace:	fc 91       	ld	r31, X
    6ad0:	17 97       	sbiw	r26, 0x07	; 7
    6ad2:	30 97       	sbiw	r30, 0x00	; 0
    6ad4:	11 f0       	breq	.+4      	; 0x6ada <__vector_54+0x7a>
    6ad6:	cd 01       	movw	r24, r26
    6ad8:	19 95       	eicall
    6ada:	ff 91       	pop	r31
    6adc:	ef 91       	pop	r30
    6ade:	df 91       	pop	r29
    6ae0:	cf 91       	pop	r28
    6ae2:	bf 91       	pop	r27
    6ae4:	af 91       	pop	r26
    6ae6:	9f 91       	pop	r25
    6ae8:	8f 91       	pop	r24
    6aea:	7f 91       	pop	r23
    6aec:	6f 91       	pop	r22
    6aee:	5f 91       	pop	r21
    6af0:	4f 91       	pop	r20
    6af2:	3f 91       	pop	r19
    6af4:	2f 91       	pop	r18
    6af6:	0f 90       	pop	r0
    6af8:	0b be       	out	0x3b, r0	; 59
    6afa:	0f 90       	pop	r0
    6afc:	0f be       	out	0x3f, r0	; 63
    6afe:	0f 90       	pop	r0
    6b00:	1f 90       	pop	r1
    6b02:	18 95       	reti

00006b04 <__vector_55>:
    6b04:	1f 92       	push	r1
    6b06:	0f 92       	push	r0
    6b08:	0f b6       	in	r0, 0x3f	; 63
    6b0a:	0f 92       	push	r0
    6b0c:	11 24       	eor	r1, r1
    6b0e:	0b b6       	in	r0, 0x3b	; 59
    6b10:	0f 92       	push	r0
    6b12:	2f 93       	push	r18
    6b14:	8f 93       	push	r24
    6b16:	9f 93       	push	r25
    6b18:	af 93       	push	r26
    6b1a:	bf 93       	push	r27
    6b1c:	ef 93       	push	r30
    6b1e:	ff 93       	push	r31
    6b20:	e0 91 da 12 	lds	r30, 0x12DA	; 0x8012da <_ser_handle+0x6>
    6b24:	f0 91 db 12 	lds	r31, 0x12DB	; 0x8012db <_ser_handle+0x7>
    6b28:	30 97       	sbiw	r30, 0x00	; 0
    6b2a:	b9 f0       	breq	.+46     	; 0x6b5a <__vector_55+0x56>
    6b2c:	02 80       	ldd	r0, Z+2	; 0x02
    6b2e:	f3 81       	ldd	r31, Z+3	; 0x03
    6b30:	e0 2d       	mov	r30, r0
    6b32:	93 81       	ldd	r25, Z+3	; 0x03
    6b34:	82 81       	ldd	r24, Z+2	; 0x02
    6b36:	98 17       	cp	r25, r24
    6b38:	b1 f0       	breq	.+44     	; 0x6b66 <__vector_55+0x62>
    6b3a:	92 81       	ldd	r25, Z+2	; 0x02
    6b3c:	85 81       	ldd	r24, Z+5	; 0x05
    6b3e:	28 2f       	mov	r18, r24
    6b40:	26 95       	lsr	r18
    6b42:	29 23       	and	r18, r25
    6b44:	a0 81       	ld	r26, Z
    6b46:	b1 81       	ldd	r27, Z+1	; 0x01
    6b48:	a2 0f       	add	r26, r18
    6b4a:	b1 1d       	adc	r27, r1
    6b4c:	2c 91       	ld	r18, X
    6b4e:	9f 5f       	subi	r25, 0xFF	; 255
    6b50:	89 23       	and	r24, r25
    6b52:	82 83       	std	Z+2, r24	; 0x02
    6b54:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    6b58:	0b c0       	rjmp	.+22     	; 0x6b70 <__vector_55+0x6c>
    6b5a:	e1 e3       	ldi	r30, 0x31	; 49
    6b5c:	f1 e0       	ldi	r31, 0x01	; 1
    6b5e:	80 81       	ld	r24, Z
    6b60:	8f 7d       	andi	r24, 0xDF	; 223
    6b62:	80 83       	st	Z, r24
    6b64:	05 c0       	rjmp	.+10     	; 0x6b70 <__vector_55+0x6c>
    6b66:	e1 e3       	ldi	r30, 0x31	; 49
    6b68:	f1 e0       	ldi	r31, 0x01	; 1
    6b6a:	80 81       	ld	r24, Z
    6b6c:	8f 7d       	andi	r24, 0xDF	; 223
    6b6e:	80 83       	st	Z, r24
    6b70:	ff 91       	pop	r31
    6b72:	ef 91       	pop	r30
    6b74:	bf 91       	pop	r27
    6b76:	af 91       	pop	r26
    6b78:	9f 91       	pop	r25
    6b7a:	8f 91       	pop	r24
    6b7c:	2f 91       	pop	r18
    6b7e:	0f 90       	pop	r0
    6b80:	0b be       	out	0x3b, r0	; 59
    6b82:	0f 90       	pop	r0
    6b84:	0f be       	out	0x3f, r0	; 63
    6b86:	0f 90       	pop	r0
    6b88:	1f 90       	pop	r1
    6b8a:	18 95       	reti

00006b8c <usart_getchar>:
    6b8c:	cf 93       	push	r28
    6b8e:	df 93       	push	r29
    6b90:	1f 92       	push	r1
    6b92:	cd b7       	in	r28, 0x3d	; 61
    6b94:	de b7       	in	r29, 0x3e	; 62
    6b96:	be 01       	movw	r22, r28
    6b98:	6f 5f       	subi	r22, 0xFF	; 255
    6b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b9c:	80 91 dc 12 	lds	r24, 0x12DC	; 0x8012dc <_com_serial_instance>
    6ba0:	90 91 dd 12 	lds	r25, 0x12DD	; 0x8012dd <_com_serial_instance+0x1>
    6ba4:	7b dd       	rcall	.-1290   	; 0x669c <serial_getByte>
    6ba6:	81 11       	cpse	r24, r1
    6ba8:	f6 cf       	rjmp	.-20     	; 0x6b96 <usart_getchar+0xa>
    6baa:	89 81       	ldd	r24, Y+1	; 0x01
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	0f 90       	pop	r0
    6bb0:	df 91       	pop	r29
    6bb2:	cf 91       	pop	r28
    6bb4:	08 95       	ret

00006bb6 <usart_putchar>:
    6bb6:	68 2f       	mov	r22, r24
    6bb8:	80 91 dc 12 	lds	r24, 0x12DC	; 0x8012dc <_com_serial_instance>
    6bbc:	90 91 dd 12 	lds	r25, 0x12DD	; 0x8012dd <_com_serial_instance+0x1>
    6bc0:	ed dc       	rcall	.-1574   	; 0x659c <serial_sendByte>
    6bc2:	80 e0       	ldi	r24, 0x00	; 0
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	08 95       	ret

00006bc8 <stdio_initialise>:
    6bc8:	8f 92       	push	r8
    6bca:	9f 92       	push	r9
    6bcc:	af 92       	push	r10
    6bce:	cf 92       	push	r12
    6bd0:	ef 92       	push	r14
    6bd2:	0f 93       	push	r16
    6bd4:	81 2c       	mov	r8, r1
    6bd6:	91 2c       	mov	r9, r1
    6bd8:	68 94       	set
    6bda:	aa 24       	eor	r10, r10
    6bdc:	a7 f8       	bld	r10, 7
    6bde:	68 94       	set
    6be0:	cc 24       	eor	r12, r12
    6be2:	c7 f8       	bld	r12, 7
    6be4:	e1 2c       	mov	r14, r1
    6be6:	00 e0       	ldi	r16, 0x00	; 0
    6be8:	23 e0       	ldi	r18, 0x03	; 3
    6bea:	40 e0       	ldi	r20, 0x00	; 0
    6bec:	51 ee       	ldi	r21, 0xE1	; 225
    6bee:	60 e0       	ldi	r22, 0x00	; 0
    6bf0:	70 e0       	ldi	r23, 0x00	; 0
    6bf2:	38 dc       	rcall	.-1936   	; 0x6464 <serial_create>
    6bf4:	90 93 dd 12 	sts	0x12DD, r25	; 0x8012dd <_com_serial_instance+0x1>
    6bf8:	80 93 dc 12 	sts	0x12DC, r24	; 0x8012dc <_com_serial_instance>
    6bfc:	ec ef       	ldi	r30, 0xFC	; 252
    6bfe:	f2 e1       	ldi	r31, 0x12	; 18
    6c00:	8f e0       	ldi	r24, 0x0F	; 15
    6c02:	92 e0       	ldi	r25, 0x02	; 2
    6c04:	91 83       	std	Z+1, r25	; 0x01
    6c06:	80 83       	st	Z, r24
    6c08:	93 83       	std	Z+3, r25	; 0x03
    6c0a:	82 83       	std	Z+2, r24	; 0x02
    6c0c:	0f 91       	pop	r16
    6c0e:	ef 90       	pop	r14
    6c10:	cf 90       	pop	r12
    6c12:	af 90       	pop	r10
    6c14:	9f 90       	pop	r9
    6c16:	8f 90       	pop	r8
    6c18:	08 95       	ret

00006c1a <_turn_off>:
    6c1a:	90 e0       	ldi	r25, 0x00	; 0
    6c1c:	fc 01       	movw	r30, r24
    6c1e:	ee 0f       	add	r30, r30
    6c20:	ff 1f       	adc	r31, r31
    6c22:	e8 0f       	add	r30, r24
    6c24:	f9 1f       	adc	r31, r25
    6c26:	ee 0f       	add	r30, r30
    6c28:	ff 1f       	adc	r31, r31
    6c2a:	e2 52       	subi	r30, 0x22	; 34
    6c2c:	fd 4e       	sbci	r31, 0xED	; 237
    6c2e:	23 81       	ldd	r18, Z+3	; 0x03
    6c30:	21 11       	cpse	r18, r1
    6c32:	1f c0       	rjmp	.+62     	; 0x6c72 <_turn_off+0x58>
    6c34:	9c 01       	movw	r18, r24
    6c36:	22 0f       	add	r18, r18
    6c38:	33 1f       	adc	r19, r19
    6c3a:	f9 01       	movw	r30, r18
    6c3c:	e8 0f       	add	r30, r24
    6c3e:	f9 1f       	adc	r31, r25
    6c40:	ee 0f       	add	r30, r30
    6c42:	ff 1f       	adc	r31, r31
    6c44:	e2 52       	subi	r30, 0x22	; 34
    6c46:	fd 4e       	sbci	r31, 0xED	; 237
    6c48:	a0 81       	ld	r26, Z
    6c4a:	b1 81       	ldd	r27, Z+1	; 0x01
    6c4c:	4c 91       	ld	r20, X
    6c4e:	f9 01       	movw	r30, r18
    6c50:	e8 0f       	add	r30, r24
    6c52:	f9 1f       	adc	r31, r25
    6c54:	ee 0f       	add	r30, r30
    6c56:	ff 1f       	adc	r31, r31
    6c58:	e2 52       	subi	r30, 0x22	; 34
    6c5a:	fd 4e       	sbci	r31, 0xED	; 237
    6c5c:	81 e0       	ldi	r24, 0x01	; 1
    6c5e:	90 e0       	ldi	r25, 0x00	; 0
    6c60:	02 80       	ldd	r0, Z+2	; 0x02
    6c62:	02 c0       	rjmp	.+4      	; 0x6c68 <_turn_off+0x4e>
    6c64:	88 0f       	add	r24, r24
    6c66:	99 1f       	adc	r25, r25
    6c68:	0a 94       	dec	r0
    6c6a:	e2 f7       	brpl	.-8      	; 0x6c64 <_turn_off+0x4a>
    6c6c:	84 2b       	or	r24, r20
    6c6e:	8c 93       	st	X, r24
    6c70:	08 95       	ret
    6c72:	fc 01       	movw	r30, r24
    6c74:	ee 0f       	add	r30, r30
    6c76:	ff 1f       	adc	r31, r31
    6c78:	df 01       	movw	r26, r30
    6c7a:	a8 0f       	add	r26, r24
    6c7c:	b9 1f       	adc	r27, r25
    6c7e:	aa 0f       	add	r26, r26
    6c80:	bb 1f       	adc	r27, r27
    6c82:	a2 52       	subi	r26, 0x22	; 34
    6c84:	bd 4e       	sbci	r27, 0xED	; 237
    6c86:	0d 90       	ld	r0, X+
    6c88:	bc 91       	ld	r27, X
    6c8a:	a0 2d       	mov	r26, r0
    6c8c:	2c 91       	ld	r18, X
    6c8e:	e8 0f       	add	r30, r24
    6c90:	f9 1f       	adc	r31, r25
    6c92:	ee 0f       	add	r30, r30
    6c94:	ff 1f       	adc	r31, r31
    6c96:	e2 52       	subi	r30, 0x22	; 34
    6c98:	fd 4e       	sbci	r31, 0xED	; 237
    6c9a:	81 e0       	ldi	r24, 0x01	; 1
    6c9c:	90 e0       	ldi	r25, 0x00	; 0
    6c9e:	02 80       	ldd	r0, Z+2	; 0x02
    6ca0:	02 c0       	rjmp	.+4      	; 0x6ca6 <_turn_off+0x8c>
    6ca2:	88 0f       	add	r24, r24
    6ca4:	99 1f       	adc	r25, r25
    6ca6:	0a 94       	dec	r0
    6ca8:	e2 f7       	brpl	.-8      	; 0x6ca2 <_turn_off+0x88>
    6caa:	80 95       	com	r24
    6cac:	82 23       	and	r24, r18
    6cae:	8c 93       	st	X, r24
    6cb0:	08 95       	ret

00006cb2 <_turn_on>:
    6cb2:	90 e0       	ldi	r25, 0x00	; 0
    6cb4:	fc 01       	movw	r30, r24
    6cb6:	ee 0f       	add	r30, r30
    6cb8:	ff 1f       	adc	r31, r31
    6cba:	e8 0f       	add	r30, r24
    6cbc:	f9 1f       	adc	r31, r25
    6cbe:	ee 0f       	add	r30, r30
    6cc0:	ff 1f       	adc	r31, r31
    6cc2:	e2 52       	subi	r30, 0x22	; 34
    6cc4:	fd 4e       	sbci	r31, 0xED	; 237
    6cc6:	23 81       	ldd	r18, Z+3	; 0x03
    6cc8:	21 11       	cpse	r18, r1
    6cca:	20 c0       	rjmp	.+64     	; 0x6d0c <_turn_on+0x5a>
    6ccc:	9c 01       	movw	r18, r24
    6cce:	22 0f       	add	r18, r18
    6cd0:	33 1f       	adc	r19, r19
    6cd2:	f9 01       	movw	r30, r18
    6cd4:	e8 0f       	add	r30, r24
    6cd6:	f9 1f       	adc	r31, r25
    6cd8:	ee 0f       	add	r30, r30
    6cda:	ff 1f       	adc	r31, r31
    6cdc:	e2 52       	subi	r30, 0x22	; 34
    6cde:	fd 4e       	sbci	r31, 0xED	; 237
    6ce0:	a0 81       	ld	r26, Z
    6ce2:	b1 81       	ldd	r27, Z+1	; 0x01
    6ce4:	4c 91       	ld	r20, X
    6ce6:	f9 01       	movw	r30, r18
    6ce8:	e8 0f       	add	r30, r24
    6cea:	f9 1f       	adc	r31, r25
    6cec:	ee 0f       	add	r30, r30
    6cee:	ff 1f       	adc	r31, r31
    6cf0:	e2 52       	subi	r30, 0x22	; 34
    6cf2:	fd 4e       	sbci	r31, 0xED	; 237
    6cf4:	81 e0       	ldi	r24, 0x01	; 1
    6cf6:	90 e0       	ldi	r25, 0x00	; 0
    6cf8:	02 80       	ldd	r0, Z+2	; 0x02
    6cfa:	02 c0       	rjmp	.+4      	; 0x6d00 <_turn_on+0x4e>
    6cfc:	88 0f       	add	r24, r24
    6cfe:	99 1f       	adc	r25, r25
    6d00:	0a 94       	dec	r0
    6d02:	e2 f7       	brpl	.-8      	; 0x6cfc <_turn_on+0x4a>
    6d04:	80 95       	com	r24
    6d06:	84 23       	and	r24, r20
    6d08:	8c 93       	st	X, r24
    6d0a:	08 95       	ret
    6d0c:	fc 01       	movw	r30, r24
    6d0e:	ee 0f       	add	r30, r30
    6d10:	ff 1f       	adc	r31, r31
    6d12:	df 01       	movw	r26, r30
    6d14:	a8 0f       	add	r26, r24
    6d16:	b9 1f       	adc	r27, r25
    6d18:	aa 0f       	add	r26, r26
    6d1a:	bb 1f       	adc	r27, r27
    6d1c:	a2 52       	subi	r26, 0x22	; 34
    6d1e:	bd 4e       	sbci	r27, 0xED	; 237
    6d20:	0d 90       	ld	r0, X+
    6d22:	bc 91       	ld	r27, X
    6d24:	a0 2d       	mov	r26, r0
    6d26:	2c 91       	ld	r18, X
    6d28:	e8 0f       	add	r30, r24
    6d2a:	f9 1f       	adc	r31, r25
    6d2c:	ee 0f       	add	r30, r30
    6d2e:	ff 1f       	adc	r31, r31
    6d30:	e2 52       	subi	r30, 0x22	; 34
    6d32:	fd 4e       	sbci	r31, 0xED	; 237
    6d34:	81 e0       	ldi	r24, 0x01	; 1
    6d36:	90 e0       	ldi	r25, 0x00	; 0
    6d38:	02 80       	ldd	r0, Z+2	; 0x02
    6d3a:	02 c0       	rjmp	.+4      	; 0x6d40 <_turn_on+0x8e>
    6d3c:	88 0f       	add	r24, r24
    6d3e:	99 1f       	adc	r25, r25
    6d40:	0a 94       	dec	r0
    6d42:	e2 f7       	brpl	.-8      	; 0x6d3c <_turn_on+0x8a>
    6d44:	82 2b       	or	r24, r18
    6d46:	8c 93       	st	X, r24
    6d48:	08 95       	ret

00006d4a <_hal_led_task>:
    6d4a:	cc 24       	eor	r12, r12
    6d4c:	c3 94       	inc	r12
    6d4e:	d1 2c       	mov	r13, r1
    6d50:	68 94       	set
    6d52:	bb 24       	eor	r11, r11
    6d54:	b2 f8       	bld	r11, 2
    6d56:	ce ed       	ldi	r28, 0xDE	; 222
    6d58:	d2 e1       	ldi	r29, 0x12	; 18
    6d5a:	10 e0       	ldi	r17, 0x00	; 0
    6d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    6d5e:	81 30       	cpi	r24, 0x01	; 1
    6d60:	81 f0       	breq	.+32     	; 0x6d82 <_hal_led_task+0x38>
    6d62:	18 f1       	brcs	.+70     	; 0x6daa <_hal_led_task+0x60>
    6d64:	82 30       	cpi	r24, 0x02	; 2
    6d66:	61 f5       	brne	.+88     	; 0x6dc0 <_hal_led_task+0x76>
    6d68:	e8 81       	ld	r30, Y
    6d6a:	f9 81       	ldd	r31, Y+1	; 0x01
    6d6c:	20 81       	ld	r18, Z
    6d6e:	c6 01       	movw	r24, r12
    6d70:	0a 80       	ldd	r0, Y+2	; 0x02
    6d72:	02 c0       	rjmp	.+4      	; 0x6d78 <_hal_led_task+0x2e>
    6d74:	88 0f       	add	r24, r24
    6d76:	99 1f       	adc	r25, r25
    6d78:	0a 94       	dec	r0
    6d7a:	e2 f7       	brpl	.-8      	; 0x6d74 <_hal_led_task+0x2a>
    6d7c:	82 27       	eor	r24, r18
    6d7e:	80 83       	st	Z, r24
    6d80:	1f c0       	rjmp	.+62     	; 0x6dc0 <_hal_led_task+0x76>
    6d82:	8d 81       	ldd	r24, Y+5	; 0x05
    6d84:	8f 5f       	subi	r24, 0xFF	; 255
    6d86:	8a 30       	cpi	r24, 0x0A	; 10
    6d88:	10 f4       	brcc	.+4      	; 0x6d8e <_hal_led_task+0x44>
    6d8a:	8d 83       	std	Y+5, r24	; 0x05
    6d8c:	19 c0       	rjmp	.+50     	; 0x6dc0 <_hal_led_task+0x76>
    6d8e:	1d 82       	std	Y+5, r1	; 0x05
    6d90:	e8 81       	ld	r30, Y
    6d92:	f9 81       	ldd	r31, Y+1	; 0x01
    6d94:	20 81       	ld	r18, Z
    6d96:	c6 01       	movw	r24, r12
    6d98:	0a 80       	ldd	r0, Y+2	; 0x02
    6d9a:	02 c0       	rjmp	.+4      	; 0x6da0 <_hal_led_task+0x56>
    6d9c:	88 0f       	add	r24, r24
    6d9e:	99 1f       	adc	r25, r25
    6da0:	0a 94       	dec	r0
    6da2:	e2 f7       	brpl	.-8      	; 0x6d9c <_hal_led_task+0x52>
    6da4:	82 27       	eor	r24, r18
    6da6:	80 83       	st	Z, r24
    6da8:	0b c0       	rjmp	.+22     	; 0x6dc0 <_hal_led_task+0x76>
    6daa:	0d 81       	ldd	r16, Y+5	; 0x05
    6dac:	00 23       	and	r16, r16
    6dae:	29 f0       	breq	.+10     	; 0x6dba <_hal_led_task+0x70>
    6db0:	81 2f       	mov	r24, r17
    6db2:	7f df       	rcall	.-258    	; 0x6cb2 <_turn_on>
    6db4:	01 50       	subi	r16, 0x01	; 1
    6db6:	0d 83       	std	Y+5, r16	; 0x05
    6db8:	03 c0       	rjmp	.+6      	; 0x6dc0 <_hal_led_task+0x76>
    6dba:	bc 82       	std	Y+4, r11	; 0x04
    6dbc:	81 2f       	mov	r24, r17
    6dbe:	2d df       	rcall	.-422    	; 0x6c1a <_turn_off>
    6dc0:	1f 5f       	subi	r17, 0xFF	; 255
    6dc2:	26 96       	adiw	r28, 0x06	; 6
    6dc4:	14 30       	cpi	r17, 0x04	; 4
    6dc6:	51 f6       	brne	.-108    	; 0x6d5c <_hal_led_task+0x12>
    6dc8:	65 e0       	ldi	r22, 0x05	; 5
    6dca:	70 e0       	ldi	r23, 0x00	; 0
    6dcc:	80 e0       	ldi	r24, 0x00	; 0
    6dce:	90 e0       	ldi	r25, 0x00	; 0
    6dd0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <vTaskDelay>
    6dd4:	c0 cf       	rjmp	.-128    	; 0x6d56 <_hal_led_task+0xc>

00006dd6 <status_leds_initialise>:
    6dd6:	ef 92       	push	r14
    6dd8:	ff 92       	push	r15
    6dda:	0f 93       	push	r16
    6ddc:	1f 93       	push	r17
    6dde:	cf 93       	push	r28
    6de0:	df 93       	push	r29
    6de2:	08 2f       	mov	r16, r24
    6de4:	80 e4       	ldi	r24, 0x40	; 64
    6de6:	87 b9       	out	0x07, r24	; 7
    6de8:	ce ed       	ldi	r28, 0xDE	; 222
    6dea:	d2 e1       	ldi	r29, 0x12	; 18
    6dec:	0f 2e       	mov	r0, r31
    6dee:	f8 e2       	ldi	r31, 0x28	; 40
    6df0:	ef 2e       	mov	r14, r31
    6df2:	f1 2c       	mov	r15, r1
    6df4:	f0 2d       	mov	r31, r0
    6df6:	f9 82       	std	Y+1, r15	; 0x01
    6df8:	e8 82       	st	Y, r14
    6dfa:	86 e0       	ldi	r24, 0x06	; 6
    6dfc:	8a 83       	std	Y+2, r24	; 0x02
    6dfe:	1b 82       	std	Y+3, r1	; 0x03
    6e00:	14 e0       	ldi	r17, 0x04	; 4
    6e02:	1c 83       	std	Y+4, r17	; 0x04
    6e04:	80 e0       	ldi	r24, 0x00	; 0
    6e06:	09 df       	rcall	.-494    	; 0x6c1a <_turn_off>
    6e08:	80 e8       	ldi	r24, 0x80	; 128
    6e0a:	87 b9       	out	0x07, r24	; 7
    6e0c:	ff 82       	std	Y+7, r15	; 0x07
    6e0e:	ee 82       	std	Y+6, r14	; 0x06
    6e10:	87 e0       	ldi	r24, 0x07	; 7
    6e12:	88 87       	std	Y+8, r24	; 0x08
    6e14:	19 86       	std	Y+9, r1	; 0x09
    6e16:	1a 87       	std	Y+10, r17	; 0x0a
    6e18:	81 e0       	ldi	r24, 0x01	; 1
    6e1a:	ff de       	rcall	.-514    	; 0x6c1a <_turn_off>
    6e1c:	80 e2       	ldi	r24, 0x20	; 32
    6e1e:	83 bb       	out	0x13, r24	; 19
    6e20:	84 e3       	ldi	r24, 0x34	; 52
    6e22:	90 e0       	ldi	r25, 0x00	; 0
    6e24:	9d 87       	std	Y+13, r25	; 0x0d
    6e26:	8c 87       	std	Y+12, r24	; 0x0c
    6e28:	85 e0       	ldi	r24, 0x05	; 5
    6e2a:	8e 87       	std	Y+14, r24	; 0x0e
    6e2c:	1f 86       	std	Y+15, r1	; 0x0f
    6e2e:	18 8b       	std	Y+16, r17	; 0x10
    6e30:	82 e0       	ldi	r24, 0x02	; 2
    6e32:	f3 de       	rcall	.-538    	; 0x6c1a <_turn_off>
    6e34:	80 e1       	ldi	r24, 0x10	; 16
    6e36:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    6e3a:	82 e0       	ldi	r24, 0x02	; 2
    6e3c:	91 e0       	ldi	r25, 0x01	; 1
    6e3e:	9b 8b       	std	Y+19, r25	; 0x13
    6e40:	8a 8b       	std	Y+18, r24	; 0x12
    6e42:	1c 8b       	std	Y+20, r17	; 0x14
    6e44:	1d 8a       	std	Y+21, r1	; 0x15
    6e46:	1e 8b       	std	Y+22, r17	; 0x16
    6e48:	83 e0       	ldi	r24, 0x03	; 3
    6e4a:	e7 de       	rcall	.-562    	; 0x6c1a <_turn_off>
    6e4c:	e1 2c       	mov	r14, r1
    6e4e:	f1 2c       	mov	r15, r1
    6e50:	20 e0       	ldi	r18, 0x00	; 0
    6e52:	30 e0       	ldi	r19, 0x00	; 0
    6e54:	40 ec       	ldi	r20, 0xC0	; 192
    6e56:	50 e0       	ldi	r21, 0x00	; 0
    6e58:	6d e7       	ldi	r22, 0x7D	; 125
    6e5a:	76 e0       	ldi	r23, 0x06	; 6
    6e5c:	85 ea       	ldi	r24, 0xA5	; 165
    6e5e:	96 e3       	ldi	r25, 0x36	; 54
    6e60:	0e 94 66 11 	call	0x22cc	; 0x22cc <xTaskCreate>
    6e64:	df 91       	pop	r29
    6e66:	cf 91       	pop	r28
    6e68:	1f 91       	pop	r17
    6e6a:	0f 91       	pop	r16
    6e6c:	ff 90       	pop	r15
    6e6e:	ef 90       	pop	r14
    6e70:	08 95       	ret

00006e72 <status_leds_slowBlink>:
    6e72:	cf 93       	push	r28
    6e74:	df 93       	push	r29
    6e76:	90 e0       	ldi	r25, 0x00	; 0
    6e78:	fc 01       	movw	r30, r24
    6e7a:	ee 0f       	add	r30, r30
    6e7c:	ff 1f       	adc	r31, r31
    6e7e:	df 01       	movw	r26, r30
    6e80:	a8 0f       	add	r26, r24
    6e82:	b9 1f       	adc	r27, r25
    6e84:	aa 0f       	add	r26, r26
    6e86:	bb 1f       	adc	r27, r27
    6e88:	a2 52       	subi	r26, 0x22	; 34
    6e8a:	bd 4e       	sbci	r27, 0xED	; 237
    6e8c:	cd 91       	ld	r28, X+
    6e8e:	dc 91       	ld	r29, X
    6e90:	11 97       	sbiw	r26, 0x01	; 1
    6e92:	48 81       	ld	r20, Y
    6e94:	21 e0       	ldi	r18, 0x01	; 1
    6e96:	30 e0       	ldi	r19, 0x00	; 0
    6e98:	12 96       	adiw	r26, 0x02	; 2
    6e9a:	0c 90       	ld	r0, X
    6e9c:	12 97       	sbiw	r26, 0x02	; 2
    6e9e:	02 c0       	rjmp	.+4      	; 0x6ea4 <status_leds_slowBlink+0x32>
    6ea0:	22 0f       	add	r18, r18
    6ea2:	33 1f       	adc	r19, r19
    6ea4:	0a 94       	dec	r0
    6ea6:	e2 f7       	brpl	.-8      	; 0x6ea0 <status_leds_slowBlink+0x2e>
    6ea8:	24 27       	eor	r18, r20
    6eaa:	28 83       	st	Y, r18
    6eac:	fd 01       	movw	r30, r26
    6eae:	81 e0       	ldi	r24, 0x01	; 1
    6eb0:	84 83       	std	Z+4, r24	; 0x04
    6eb2:	df 91       	pop	r29
    6eb4:	cf 91       	pop	r28
    6eb6:	08 95       	ret

00006eb8 <status_leds_fastBlink>:
    6eb8:	cf 93       	push	r28
    6eba:	df 93       	push	r29
    6ebc:	90 e0       	ldi	r25, 0x00	; 0
    6ebe:	fc 01       	movw	r30, r24
    6ec0:	ee 0f       	add	r30, r30
    6ec2:	ff 1f       	adc	r31, r31
    6ec4:	df 01       	movw	r26, r30
    6ec6:	a8 0f       	add	r26, r24
    6ec8:	b9 1f       	adc	r27, r25
    6eca:	aa 0f       	add	r26, r26
    6ecc:	bb 1f       	adc	r27, r27
    6ece:	a2 52       	subi	r26, 0x22	; 34
    6ed0:	bd 4e       	sbci	r27, 0xED	; 237
    6ed2:	cd 91       	ld	r28, X+
    6ed4:	dc 91       	ld	r29, X
    6ed6:	11 97       	sbiw	r26, 0x01	; 1
    6ed8:	48 81       	ld	r20, Y
    6eda:	21 e0       	ldi	r18, 0x01	; 1
    6edc:	30 e0       	ldi	r19, 0x00	; 0
    6ede:	12 96       	adiw	r26, 0x02	; 2
    6ee0:	0c 90       	ld	r0, X
    6ee2:	12 97       	sbiw	r26, 0x02	; 2
    6ee4:	02 c0       	rjmp	.+4      	; 0x6eea <status_leds_fastBlink+0x32>
    6ee6:	22 0f       	add	r18, r18
    6ee8:	33 1f       	adc	r19, r19
    6eea:	0a 94       	dec	r0
    6eec:	e2 f7       	brpl	.-8      	; 0x6ee6 <status_leds_fastBlink+0x2e>
    6eee:	24 27       	eor	r18, r20
    6ef0:	28 83       	st	Y, r18
    6ef2:	fd 01       	movw	r30, r26
    6ef4:	82 e0       	ldi	r24, 0x02	; 2
    6ef6:	84 83       	std	Z+4, r24	; 0x04
    6ef8:	df 91       	pop	r29
    6efa:	cf 91       	pop	r28
    6efc:	08 95       	ret

00006efe <status_leds_ledOn>:
    6efe:	28 2f       	mov	r18, r24
    6f00:	30 e0       	ldi	r19, 0x00	; 0
    6f02:	f9 01       	movw	r30, r18
    6f04:	ee 0f       	add	r30, r30
    6f06:	ff 1f       	adc	r31, r31
    6f08:	e2 0f       	add	r30, r18
    6f0a:	f3 1f       	adc	r31, r19
    6f0c:	ee 0f       	add	r30, r30
    6f0e:	ff 1f       	adc	r31, r31
    6f10:	e2 52       	subi	r30, 0x22	; 34
    6f12:	fd 4e       	sbci	r31, 0xED	; 237
    6f14:	93 e0       	ldi	r25, 0x03	; 3
    6f16:	94 83       	std	Z+4, r25	; 0x04
    6f18:	cc ce       	rjmp	.-616    	; 0x6cb2 <_turn_on>
    6f1a:	08 95       	ret

00006f1c <status_leds_ledOff>:
    6f1c:	28 2f       	mov	r18, r24
    6f1e:	30 e0       	ldi	r19, 0x00	; 0
    6f20:	f9 01       	movw	r30, r18
    6f22:	ee 0f       	add	r30, r30
    6f24:	ff 1f       	adc	r31, r31
    6f26:	e2 0f       	add	r30, r18
    6f28:	f3 1f       	adc	r31, r19
    6f2a:	ee 0f       	add	r30, r30
    6f2c:	ff 1f       	adc	r31, r31
    6f2e:	e2 52       	subi	r30, 0x22	; 34
    6f30:	fd 4e       	sbci	r31, 0xED	; 237
    6f32:	94 e0       	ldi	r25, 0x04	; 4
    6f34:	94 83       	std	Z+4, r25	; 0x04
    6f36:	71 ce       	rjmp	.-798    	; 0x6c1a <_turn_off>
    6f38:	08 95       	ret

00006f3a <status_leds_longPuls>:
    6f3a:	90 e0       	ldi	r25, 0x00	; 0
    6f3c:	fc 01       	movw	r30, r24
    6f3e:	ee 0f       	add	r30, r30
    6f40:	ff 1f       	adc	r31, r31
    6f42:	df 01       	movw	r26, r30
    6f44:	a8 0f       	add	r26, r24
    6f46:	b9 1f       	adc	r27, r25
    6f48:	aa 0f       	add	r26, r26
    6f4a:	bb 1f       	adc	r27, r27
    6f4c:	a2 52       	subi	r26, 0x22	; 34
    6f4e:	bd 4e       	sbci	r27, 0xED	; 237
    6f50:	24 e0       	ldi	r18, 0x04	; 4
    6f52:	15 96       	adiw	r26, 0x05	; 5
    6f54:	2c 93       	st	X, r18
    6f56:	15 97       	sbiw	r26, 0x05	; 5
    6f58:	fd 01       	movw	r30, r26
    6f5a:	14 82       	std	Z+4, r1	; 0x04
    6f5c:	08 95       	ret

00006f5e <status_leds_shortPuls>:
    6f5e:	90 e0       	ldi	r25, 0x00	; 0
    6f60:	fc 01       	movw	r30, r24
    6f62:	ee 0f       	add	r30, r30
    6f64:	ff 1f       	adc	r31, r31
    6f66:	df 01       	movw	r26, r30
    6f68:	a8 0f       	add	r26, r24
    6f6a:	b9 1f       	adc	r27, r25
    6f6c:	aa 0f       	add	r26, r26
    6f6e:	bb 1f       	adc	r27, r27
    6f70:	a2 52       	subi	r26, 0x22	; 34
    6f72:	bd 4e       	sbci	r27, 0xED	; 237
    6f74:	21 e0       	ldi	r18, 0x01	; 1
    6f76:	15 96       	adiw	r26, 0x05	; 5
    6f78:	2c 93       	st	X, r18
    6f7a:	15 97       	sbiw	r26, 0x05	; 5
    6f7c:	fd 01       	movw	r30, r26
    6f7e:	14 82       	std	Z+4, r1	; 0x04
    6f80:	08 95       	ret

00006f82 <fifo_init>:
    6f82:	fc 01       	movw	r30, r24
    6f84:	41 11       	cpse	r20, r1
    6f86:	01 c0       	rjmp	.+2      	; 0x6f8a <fifo_init+0x8>
    6f88:	5b d2       	rcall	.+1206   	; 0x7440 <abort>
    6f8a:	84 2f       	mov	r24, r20
    6f8c:	90 e0       	ldi	r25, 0x00	; 0
    6f8e:	9c 01       	movw	r18, r24
    6f90:	21 50       	subi	r18, 0x01	; 1
    6f92:	31 09       	sbc	r19, r1
    6f94:	82 23       	and	r24, r18
    6f96:	93 23       	and	r25, r19
    6f98:	89 2b       	or	r24, r25
    6f9a:	09 f0       	breq	.+2      	; 0x6f9e <fifo_init+0x1c>
    6f9c:	51 d2       	rcall	.+1186   	; 0x7440 <abort>
    6f9e:	41 38       	cpi	r20, 0x81	; 129
    6fa0:	08 f0       	brcs	.+2      	; 0x6fa4 <fifo_init+0x22>
    6fa2:	4e d2       	rcall	.+1180   	; 0x7440 <abort>
    6fa4:	12 82       	std	Z+2, r1	; 0x02
    6fa6:	13 82       	std	Z+3, r1	; 0x03
    6fa8:	44 83       	std	Z+4, r20	; 0x04
    6faa:	44 0f       	add	r20, r20
    6fac:	41 50       	subi	r20, 0x01	; 1
    6fae:	45 83       	std	Z+5, r20	; 0x05
    6fb0:	71 83       	std	Z+1, r23	; 0x01
    6fb2:	60 83       	st	Z, r22
    6fb4:	80 e0       	ldi	r24, 0x00	; 0
    6fb6:	90 e0       	ldi	r25, 0x00	; 0
    6fb8:	08 95       	ret

00006fba <__subsf3>:
    6fba:	50 58       	subi	r21, 0x80	; 128

00006fbc <__addsf3>:
    6fbc:	bb 27       	eor	r27, r27
    6fbe:	aa 27       	eor	r26, r26
    6fc0:	13 d0       	rcall	.+38     	; 0x6fe8 <__addsf3x>
    6fc2:	0c 94 b6 2d 	jmp	0x5b6c	; 0x5b6c <__fp_round>
    6fc6:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__fp_pscA>
    6fca:	38 f0       	brcs	.+14     	; 0x6fda <__addsf3+0x1e>
    6fcc:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__fp_pscB>
    6fd0:	20 f0       	brcs	.+8      	; 0x6fda <__addsf3+0x1e>
    6fd2:	39 f4       	brne	.+14     	; 0x6fe2 <__addsf3+0x26>
    6fd4:	9f 3f       	cpi	r25, 0xFF	; 255
    6fd6:	19 f4       	brne	.+6      	; 0x6fde <__addsf3+0x22>
    6fd8:	26 f4       	brtc	.+8      	; 0x6fe2 <__addsf3+0x26>
    6fda:	0c 94 a5 2d 	jmp	0x5b4a	; 0x5b4a <__fp_nan>
    6fde:	0e f4       	brtc	.+2      	; 0x6fe2 <__addsf3+0x26>
    6fe0:	e0 95       	com	r30
    6fe2:	e7 fb       	bst	r30, 7
    6fe4:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <__fp_inf>

00006fe8 <__addsf3x>:
    6fe8:	e9 2f       	mov	r30, r25
    6fea:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <__fp_split3>
    6fee:	58 f3       	brcs	.-42     	; 0x6fc6 <__addsf3+0xa>
    6ff0:	ba 17       	cp	r27, r26
    6ff2:	62 07       	cpc	r22, r18
    6ff4:	73 07       	cpc	r23, r19
    6ff6:	84 07       	cpc	r24, r20
    6ff8:	95 07       	cpc	r25, r21
    6ffa:	20 f0       	brcs	.+8      	; 0x7004 <__addsf3x+0x1c>
    6ffc:	79 f4       	brne	.+30     	; 0x701c <__addsf3x+0x34>
    6ffe:	a6 f5       	brtc	.+104    	; 0x7068 <__addsf3x+0x80>
    7000:	0c 94 31 2d 	jmp	0x5a62	; 0x5a62 <__fp_zero>
    7004:	0e f4       	brtc	.+2      	; 0x7008 <__addsf3x+0x20>
    7006:	e0 95       	com	r30
    7008:	0b 2e       	mov	r0, r27
    700a:	ba 2f       	mov	r27, r26
    700c:	a0 2d       	mov	r26, r0
    700e:	0b 01       	movw	r0, r22
    7010:	b9 01       	movw	r22, r18
    7012:	90 01       	movw	r18, r0
    7014:	0c 01       	movw	r0, r24
    7016:	ca 01       	movw	r24, r20
    7018:	a0 01       	movw	r20, r0
    701a:	11 24       	eor	r1, r1
    701c:	ff 27       	eor	r31, r31
    701e:	59 1b       	sub	r21, r25
    7020:	99 f0       	breq	.+38     	; 0x7048 <__addsf3x+0x60>
    7022:	59 3f       	cpi	r21, 0xF9	; 249
    7024:	50 f4       	brcc	.+20     	; 0x703a <__addsf3x+0x52>
    7026:	50 3e       	cpi	r21, 0xE0	; 224
    7028:	68 f1       	brcs	.+90     	; 0x7084 <__addsf3x+0x9c>
    702a:	1a 16       	cp	r1, r26
    702c:	f0 40       	sbci	r31, 0x00	; 0
    702e:	a2 2f       	mov	r26, r18
    7030:	23 2f       	mov	r18, r19
    7032:	34 2f       	mov	r19, r20
    7034:	44 27       	eor	r20, r20
    7036:	58 5f       	subi	r21, 0xF8	; 248
    7038:	f3 cf       	rjmp	.-26     	; 0x7020 <__addsf3x+0x38>
    703a:	46 95       	lsr	r20
    703c:	37 95       	ror	r19
    703e:	27 95       	ror	r18
    7040:	a7 95       	ror	r26
    7042:	f0 40       	sbci	r31, 0x00	; 0
    7044:	53 95       	inc	r21
    7046:	c9 f7       	brne	.-14     	; 0x703a <__addsf3x+0x52>
    7048:	7e f4       	brtc	.+30     	; 0x7068 <__addsf3x+0x80>
    704a:	1f 16       	cp	r1, r31
    704c:	ba 0b       	sbc	r27, r26
    704e:	62 0b       	sbc	r22, r18
    7050:	73 0b       	sbc	r23, r19
    7052:	84 0b       	sbc	r24, r20
    7054:	ba f0       	brmi	.+46     	; 0x7084 <__addsf3x+0x9c>
    7056:	91 50       	subi	r25, 0x01	; 1
    7058:	a1 f0       	breq	.+40     	; 0x7082 <__addsf3x+0x9a>
    705a:	ff 0f       	add	r31, r31
    705c:	bb 1f       	adc	r27, r27
    705e:	66 1f       	adc	r22, r22
    7060:	77 1f       	adc	r23, r23
    7062:	88 1f       	adc	r24, r24
    7064:	c2 f7       	brpl	.-16     	; 0x7056 <__addsf3x+0x6e>
    7066:	0e c0       	rjmp	.+28     	; 0x7084 <__addsf3x+0x9c>
    7068:	ba 0f       	add	r27, r26
    706a:	62 1f       	adc	r22, r18
    706c:	73 1f       	adc	r23, r19
    706e:	84 1f       	adc	r24, r20
    7070:	48 f4       	brcc	.+18     	; 0x7084 <__addsf3x+0x9c>
    7072:	87 95       	ror	r24
    7074:	77 95       	ror	r23
    7076:	67 95       	ror	r22
    7078:	b7 95       	ror	r27
    707a:	f7 95       	ror	r31
    707c:	9e 3f       	cpi	r25, 0xFE	; 254
    707e:	08 f0       	brcs	.+2      	; 0x7082 <__addsf3x+0x9a>
    7080:	b0 cf       	rjmp	.-160    	; 0x6fe2 <__addsf3+0x26>
    7082:	93 95       	inc	r25
    7084:	88 0f       	add	r24, r24
    7086:	08 f0       	brcs	.+2      	; 0x708a <__addsf3x+0xa2>
    7088:	99 27       	eor	r25, r25
    708a:	ee 0f       	add	r30, r30
    708c:	97 95       	ror	r25
    708e:	87 95       	ror	r24
    7090:	08 95       	ret

00007092 <__divsf3>:
    7092:	12 d0       	rcall	.+36     	; 0x70b8 <__divsf3x>
    7094:	0c 94 b6 2d 	jmp	0x5b6c	; 0x5b6c <__fp_round>
    7098:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__fp_pscB>
    709c:	58 f0       	brcs	.+22     	; 0x70b4 <__divsf3+0x22>
    709e:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <__fp_pscA>
    70a2:	40 f0       	brcs	.+16     	; 0x70b4 <__divsf3+0x22>
    70a4:	29 f4       	brne	.+10     	; 0x70b0 <__divsf3+0x1e>
    70a6:	5f 3f       	cpi	r21, 0xFF	; 255
    70a8:	29 f0       	breq	.+10     	; 0x70b4 <__divsf3+0x22>
    70aa:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <__fp_inf>
    70ae:	51 11       	cpse	r21, r1
    70b0:	0c 94 32 2d 	jmp	0x5a64	; 0x5a64 <__fp_szero>
    70b4:	0c 94 a5 2d 	jmp	0x5b4a	; 0x5b4a <__fp_nan>

000070b8 <__divsf3x>:
    70b8:	0e 94 0f 2d 	call	0x5a1e	; 0x5a1e <__fp_split3>
    70bc:	68 f3       	brcs	.-38     	; 0x7098 <__divsf3+0x6>

000070be <__divsf3_pse>:
    70be:	99 23       	and	r25, r25
    70c0:	b1 f3       	breq	.-20     	; 0x70ae <__divsf3+0x1c>
    70c2:	55 23       	and	r21, r21
    70c4:	91 f3       	breq	.-28     	; 0x70aa <__divsf3+0x18>
    70c6:	95 1b       	sub	r25, r21
    70c8:	55 0b       	sbc	r21, r21
    70ca:	bb 27       	eor	r27, r27
    70cc:	aa 27       	eor	r26, r26
    70ce:	62 17       	cp	r22, r18
    70d0:	73 07       	cpc	r23, r19
    70d2:	84 07       	cpc	r24, r20
    70d4:	38 f0       	brcs	.+14     	; 0x70e4 <__divsf3_pse+0x26>
    70d6:	9f 5f       	subi	r25, 0xFF	; 255
    70d8:	5f 4f       	sbci	r21, 0xFF	; 255
    70da:	22 0f       	add	r18, r18
    70dc:	33 1f       	adc	r19, r19
    70de:	44 1f       	adc	r20, r20
    70e0:	aa 1f       	adc	r26, r26
    70e2:	a9 f3       	breq	.-22     	; 0x70ce <__divsf3_pse+0x10>
    70e4:	35 d0       	rcall	.+106    	; 0x7150 <__divsf3_pse+0x92>
    70e6:	0e 2e       	mov	r0, r30
    70e8:	3a f0       	brmi	.+14     	; 0x70f8 <__divsf3_pse+0x3a>
    70ea:	e0 e8       	ldi	r30, 0x80	; 128
    70ec:	32 d0       	rcall	.+100    	; 0x7152 <__divsf3_pse+0x94>
    70ee:	91 50       	subi	r25, 0x01	; 1
    70f0:	50 40       	sbci	r21, 0x00	; 0
    70f2:	e6 95       	lsr	r30
    70f4:	00 1c       	adc	r0, r0
    70f6:	ca f7       	brpl	.-14     	; 0x70ea <__divsf3_pse+0x2c>
    70f8:	2b d0       	rcall	.+86     	; 0x7150 <__divsf3_pse+0x92>
    70fa:	fe 2f       	mov	r31, r30
    70fc:	29 d0       	rcall	.+82     	; 0x7150 <__divsf3_pse+0x92>
    70fe:	66 0f       	add	r22, r22
    7100:	77 1f       	adc	r23, r23
    7102:	88 1f       	adc	r24, r24
    7104:	bb 1f       	adc	r27, r27
    7106:	26 17       	cp	r18, r22
    7108:	37 07       	cpc	r19, r23
    710a:	48 07       	cpc	r20, r24
    710c:	ab 07       	cpc	r26, r27
    710e:	b0 e8       	ldi	r27, 0x80	; 128
    7110:	09 f0       	breq	.+2      	; 0x7114 <__divsf3_pse+0x56>
    7112:	bb 0b       	sbc	r27, r27
    7114:	80 2d       	mov	r24, r0
    7116:	bf 01       	movw	r22, r30
    7118:	ff 27       	eor	r31, r31
    711a:	93 58       	subi	r25, 0x83	; 131
    711c:	5f 4f       	sbci	r21, 0xFF	; 255
    711e:	3a f0       	brmi	.+14     	; 0x712e <__divsf3_pse+0x70>
    7120:	9e 3f       	cpi	r25, 0xFE	; 254
    7122:	51 05       	cpc	r21, r1
    7124:	78 f0       	brcs	.+30     	; 0x7144 <__divsf3_pse+0x86>
    7126:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <__fp_inf>
    712a:	0c 94 32 2d 	jmp	0x5a64	; 0x5a64 <__fp_szero>
    712e:	5f 3f       	cpi	r21, 0xFF	; 255
    7130:	e4 f3       	brlt	.-8      	; 0x712a <__divsf3_pse+0x6c>
    7132:	98 3e       	cpi	r25, 0xE8	; 232
    7134:	d4 f3       	brlt	.-12     	; 0x712a <__divsf3_pse+0x6c>
    7136:	86 95       	lsr	r24
    7138:	77 95       	ror	r23
    713a:	67 95       	ror	r22
    713c:	b7 95       	ror	r27
    713e:	f7 95       	ror	r31
    7140:	9f 5f       	subi	r25, 0xFF	; 255
    7142:	c9 f7       	brne	.-14     	; 0x7136 <__divsf3_pse+0x78>
    7144:	88 0f       	add	r24, r24
    7146:	91 1d       	adc	r25, r1
    7148:	96 95       	lsr	r25
    714a:	87 95       	ror	r24
    714c:	97 f9       	bld	r25, 7
    714e:	08 95       	ret
    7150:	e1 e0       	ldi	r30, 0x01	; 1
    7152:	66 0f       	add	r22, r22
    7154:	77 1f       	adc	r23, r23
    7156:	88 1f       	adc	r24, r24
    7158:	bb 1f       	adc	r27, r27
    715a:	62 17       	cp	r22, r18
    715c:	73 07       	cpc	r23, r19
    715e:	84 07       	cpc	r24, r20
    7160:	ba 07       	cpc	r27, r26
    7162:	20 f0       	brcs	.+8      	; 0x716c <__divsf3_pse+0xae>
    7164:	62 1b       	sub	r22, r18
    7166:	73 0b       	sbc	r23, r19
    7168:	84 0b       	sbc	r24, r20
    716a:	ba 0b       	sbc	r27, r26
    716c:	ee 1f       	adc	r30, r30
    716e:	88 f7       	brcc	.-30     	; 0x7152 <__divsf3_pse+0x94>
    7170:	e0 95       	com	r30
    7172:	08 95       	ret

00007174 <__floatunsisf>:
    7174:	e8 94       	clt
    7176:	09 c0       	rjmp	.+18     	; 0x718a <__floatsisf+0x12>

00007178 <__floatsisf>:
    7178:	97 fb       	bst	r25, 7
    717a:	3e f4       	brtc	.+14     	; 0x718a <__floatsisf+0x12>
    717c:	90 95       	com	r25
    717e:	80 95       	com	r24
    7180:	70 95       	com	r23
    7182:	61 95       	neg	r22
    7184:	7f 4f       	sbci	r23, 0xFF	; 255
    7186:	8f 4f       	sbci	r24, 0xFF	; 255
    7188:	9f 4f       	sbci	r25, 0xFF	; 255
    718a:	99 23       	and	r25, r25
    718c:	a9 f0       	breq	.+42     	; 0x71b8 <__floatsisf+0x40>
    718e:	f9 2f       	mov	r31, r25
    7190:	96 e9       	ldi	r25, 0x96	; 150
    7192:	bb 27       	eor	r27, r27
    7194:	93 95       	inc	r25
    7196:	f6 95       	lsr	r31
    7198:	87 95       	ror	r24
    719a:	77 95       	ror	r23
    719c:	67 95       	ror	r22
    719e:	b7 95       	ror	r27
    71a0:	f1 11       	cpse	r31, r1
    71a2:	f8 cf       	rjmp	.-16     	; 0x7194 <__floatsisf+0x1c>
    71a4:	fa f4       	brpl	.+62     	; 0x71e4 <__floatsisf+0x6c>
    71a6:	bb 0f       	add	r27, r27
    71a8:	11 f4       	brne	.+4      	; 0x71ae <__floatsisf+0x36>
    71aa:	60 ff       	sbrs	r22, 0
    71ac:	1b c0       	rjmp	.+54     	; 0x71e4 <__floatsisf+0x6c>
    71ae:	6f 5f       	subi	r22, 0xFF	; 255
    71b0:	7f 4f       	sbci	r23, 0xFF	; 255
    71b2:	8f 4f       	sbci	r24, 0xFF	; 255
    71b4:	9f 4f       	sbci	r25, 0xFF	; 255
    71b6:	16 c0       	rjmp	.+44     	; 0x71e4 <__floatsisf+0x6c>
    71b8:	88 23       	and	r24, r24
    71ba:	11 f0       	breq	.+4      	; 0x71c0 <__floatsisf+0x48>
    71bc:	96 e9       	ldi	r25, 0x96	; 150
    71be:	11 c0       	rjmp	.+34     	; 0x71e2 <__floatsisf+0x6a>
    71c0:	77 23       	and	r23, r23
    71c2:	21 f0       	breq	.+8      	; 0x71cc <__floatsisf+0x54>
    71c4:	9e e8       	ldi	r25, 0x8E	; 142
    71c6:	87 2f       	mov	r24, r23
    71c8:	76 2f       	mov	r23, r22
    71ca:	05 c0       	rjmp	.+10     	; 0x71d6 <__floatsisf+0x5e>
    71cc:	66 23       	and	r22, r22
    71ce:	71 f0       	breq	.+28     	; 0x71ec <__floatsisf+0x74>
    71d0:	96 e8       	ldi	r25, 0x86	; 134
    71d2:	86 2f       	mov	r24, r22
    71d4:	70 e0       	ldi	r23, 0x00	; 0
    71d6:	60 e0       	ldi	r22, 0x00	; 0
    71d8:	2a f0       	brmi	.+10     	; 0x71e4 <__floatsisf+0x6c>
    71da:	9a 95       	dec	r25
    71dc:	66 0f       	add	r22, r22
    71de:	77 1f       	adc	r23, r23
    71e0:	88 1f       	adc	r24, r24
    71e2:	da f7       	brpl	.-10     	; 0x71da <__floatsisf+0x62>
    71e4:	88 0f       	add	r24, r24
    71e6:	96 95       	lsr	r25
    71e8:	87 95       	ror	r24
    71ea:	97 f9       	bld	r25, 7
    71ec:	08 95       	ret

000071ee <__tablejump2__>:
    71ee:	ee 0f       	add	r30, r30
    71f0:	ff 1f       	adc	r31, r31
    71f2:	88 1f       	adc	r24, r24
    71f4:	8b bf       	out	0x3b, r24	; 59
    71f6:	07 90       	elpm	r0, Z+
    71f8:	f6 91       	elpm	r31, Z
    71fa:	e0 2d       	mov	r30, r0
    71fc:	19 94       	eijmp

000071fe <malloc>:
    71fe:	0f 93       	push	r16
    7200:	1f 93       	push	r17
    7202:	cf 93       	push	r28
    7204:	df 93       	push	r29
    7206:	82 30       	cpi	r24, 0x02	; 2
    7208:	91 05       	cpc	r25, r1
    720a:	10 f4       	brcc	.+4      	; 0x7210 <malloc+0x12>
    720c:	82 e0       	ldi	r24, 0x02	; 2
    720e:	90 e0       	ldi	r25, 0x00	; 0
    7210:	e0 91 fa 12 	lds	r30, 0x12FA	; 0x8012fa <__flp>
    7214:	f0 91 fb 12 	lds	r31, 0x12FB	; 0x8012fb <__flp+0x1>
    7218:	20 e0       	ldi	r18, 0x00	; 0
    721a:	30 e0       	ldi	r19, 0x00	; 0
    721c:	a0 e0       	ldi	r26, 0x00	; 0
    721e:	b0 e0       	ldi	r27, 0x00	; 0
    7220:	30 97       	sbiw	r30, 0x00	; 0
    7222:	19 f1       	breq	.+70     	; 0x726a <malloc+0x6c>
    7224:	40 81       	ld	r20, Z
    7226:	51 81       	ldd	r21, Z+1	; 0x01
    7228:	02 81       	ldd	r16, Z+2	; 0x02
    722a:	13 81       	ldd	r17, Z+3	; 0x03
    722c:	48 17       	cp	r20, r24
    722e:	59 07       	cpc	r21, r25
    7230:	c8 f0       	brcs	.+50     	; 0x7264 <malloc+0x66>
    7232:	84 17       	cp	r24, r20
    7234:	95 07       	cpc	r25, r21
    7236:	69 f4       	brne	.+26     	; 0x7252 <malloc+0x54>
    7238:	10 97       	sbiw	r26, 0x00	; 0
    723a:	31 f0       	breq	.+12     	; 0x7248 <malloc+0x4a>
    723c:	12 96       	adiw	r26, 0x02	; 2
    723e:	0c 93       	st	X, r16
    7240:	12 97       	sbiw	r26, 0x02	; 2
    7242:	13 96       	adiw	r26, 0x03	; 3
    7244:	1c 93       	st	X, r17
    7246:	27 c0       	rjmp	.+78     	; 0x7296 <malloc+0x98>
    7248:	00 93 fa 12 	sts	0x12FA, r16	; 0x8012fa <__flp>
    724c:	10 93 fb 12 	sts	0x12FB, r17	; 0x8012fb <__flp+0x1>
    7250:	22 c0       	rjmp	.+68     	; 0x7296 <malloc+0x98>
    7252:	21 15       	cp	r18, r1
    7254:	31 05       	cpc	r19, r1
    7256:	19 f0       	breq	.+6      	; 0x725e <malloc+0x60>
    7258:	42 17       	cp	r20, r18
    725a:	53 07       	cpc	r21, r19
    725c:	18 f4       	brcc	.+6      	; 0x7264 <malloc+0x66>
    725e:	9a 01       	movw	r18, r20
    7260:	bd 01       	movw	r22, r26
    7262:	ef 01       	movw	r28, r30
    7264:	df 01       	movw	r26, r30
    7266:	f8 01       	movw	r30, r16
    7268:	db cf       	rjmp	.-74     	; 0x7220 <malloc+0x22>
    726a:	21 15       	cp	r18, r1
    726c:	31 05       	cpc	r19, r1
    726e:	f9 f0       	breq	.+62     	; 0x72ae <malloc+0xb0>
    7270:	28 1b       	sub	r18, r24
    7272:	39 0b       	sbc	r19, r25
    7274:	24 30       	cpi	r18, 0x04	; 4
    7276:	31 05       	cpc	r19, r1
    7278:	80 f4       	brcc	.+32     	; 0x729a <malloc+0x9c>
    727a:	8a 81       	ldd	r24, Y+2	; 0x02
    727c:	9b 81       	ldd	r25, Y+3	; 0x03
    727e:	61 15       	cp	r22, r1
    7280:	71 05       	cpc	r23, r1
    7282:	21 f0       	breq	.+8      	; 0x728c <malloc+0x8e>
    7284:	fb 01       	movw	r30, r22
    7286:	93 83       	std	Z+3, r25	; 0x03
    7288:	82 83       	std	Z+2, r24	; 0x02
    728a:	04 c0       	rjmp	.+8      	; 0x7294 <malloc+0x96>
    728c:	90 93 fb 12 	sts	0x12FB, r25	; 0x8012fb <__flp+0x1>
    7290:	80 93 fa 12 	sts	0x12FA, r24	; 0x8012fa <__flp>
    7294:	fe 01       	movw	r30, r28
    7296:	32 96       	adiw	r30, 0x02	; 2
    7298:	44 c0       	rjmp	.+136    	; 0x7322 <malloc+0x124>
    729a:	fe 01       	movw	r30, r28
    729c:	e2 0f       	add	r30, r18
    729e:	f3 1f       	adc	r31, r19
    72a0:	81 93       	st	Z+, r24
    72a2:	91 93       	st	Z+, r25
    72a4:	22 50       	subi	r18, 0x02	; 2
    72a6:	31 09       	sbc	r19, r1
    72a8:	39 83       	std	Y+1, r19	; 0x01
    72aa:	28 83       	st	Y, r18
    72ac:	3a c0       	rjmp	.+116    	; 0x7322 <malloc+0x124>
    72ae:	20 91 f8 12 	lds	r18, 0x12F8	; 0x8012f8 <__brkval>
    72b2:	30 91 f9 12 	lds	r19, 0x12F9	; 0x8012f9 <__brkval+0x1>
    72b6:	23 2b       	or	r18, r19
    72b8:	41 f4       	brne	.+16     	; 0x72ca <malloc+0xcc>
    72ba:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    72be:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    72c2:	30 93 f9 12 	sts	0x12F9, r19	; 0x8012f9 <__brkval+0x1>
    72c6:	20 93 f8 12 	sts	0x12F8, r18	; 0x8012f8 <__brkval>
    72ca:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    72ce:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    72d2:	21 15       	cp	r18, r1
    72d4:	31 05       	cpc	r19, r1
    72d6:	41 f4       	brne	.+16     	; 0x72e8 <malloc+0xea>
    72d8:	2d b7       	in	r18, 0x3d	; 61
    72da:	3e b7       	in	r19, 0x3e	; 62
    72dc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    72e0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    72e4:	24 1b       	sub	r18, r20
    72e6:	35 0b       	sbc	r19, r21
    72e8:	e0 91 f8 12 	lds	r30, 0x12F8	; 0x8012f8 <__brkval>
    72ec:	f0 91 f9 12 	lds	r31, 0x12F9	; 0x8012f9 <__brkval+0x1>
    72f0:	e2 17       	cp	r30, r18
    72f2:	f3 07       	cpc	r31, r19
    72f4:	a0 f4       	brcc	.+40     	; 0x731e <malloc+0x120>
    72f6:	2e 1b       	sub	r18, r30
    72f8:	3f 0b       	sbc	r19, r31
    72fa:	28 17       	cp	r18, r24
    72fc:	39 07       	cpc	r19, r25
    72fe:	78 f0       	brcs	.+30     	; 0x731e <malloc+0x120>
    7300:	ac 01       	movw	r20, r24
    7302:	4e 5f       	subi	r20, 0xFE	; 254
    7304:	5f 4f       	sbci	r21, 0xFF	; 255
    7306:	24 17       	cp	r18, r20
    7308:	35 07       	cpc	r19, r21
    730a:	48 f0       	brcs	.+18     	; 0x731e <malloc+0x120>
    730c:	4e 0f       	add	r20, r30
    730e:	5f 1f       	adc	r21, r31
    7310:	50 93 f9 12 	sts	0x12F9, r21	; 0x8012f9 <__brkval+0x1>
    7314:	40 93 f8 12 	sts	0x12F8, r20	; 0x8012f8 <__brkval>
    7318:	81 93       	st	Z+, r24
    731a:	91 93       	st	Z+, r25
    731c:	02 c0       	rjmp	.+4      	; 0x7322 <malloc+0x124>
    731e:	e0 e0       	ldi	r30, 0x00	; 0
    7320:	f0 e0       	ldi	r31, 0x00	; 0
    7322:	cf 01       	movw	r24, r30
    7324:	df 91       	pop	r29
    7326:	cf 91       	pop	r28
    7328:	1f 91       	pop	r17
    732a:	0f 91       	pop	r16
    732c:	08 95       	ret

0000732e <free>:
    732e:	cf 93       	push	r28
    7330:	df 93       	push	r29
    7332:	00 97       	sbiw	r24, 0x00	; 0
    7334:	09 f4       	brne	.+2      	; 0x7338 <free+0xa>
    7336:	81 c0       	rjmp	.+258    	; 0x743a <free+0x10c>
    7338:	fc 01       	movw	r30, r24
    733a:	32 97       	sbiw	r30, 0x02	; 2
    733c:	13 82       	std	Z+3, r1	; 0x03
    733e:	12 82       	std	Z+2, r1	; 0x02
    7340:	a0 91 fa 12 	lds	r26, 0x12FA	; 0x8012fa <__flp>
    7344:	b0 91 fb 12 	lds	r27, 0x12FB	; 0x8012fb <__flp+0x1>
    7348:	10 97       	sbiw	r26, 0x00	; 0
    734a:	81 f4       	brne	.+32     	; 0x736c <free+0x3e>
    734c:	20 81       	ld	r18, Z
    734e:	31 81       	ldd	r19, Z+1	; 0x01
    7350:	82 0f       	add	r24, r18
    7352:	93 1f       	adc	r25, r19
    7354:	20 91 f8 12 	lds	r18, 0x12F8	; 0x8012f8 <__brkval>
    7358:	30 91 f9 12 	lds	r19, 0x12F9	; 0x8012f9 <__brkval+0x1>
    735c:	28 17       	cp	r18, r24
    735e:	39 07       	cpc	r19, r25
    7360:	51 f5       	brne	.+84     	; 0x73b6 <free+0x88>
    7362:	f0 93 f9 12 	sts	0x12F9, r31	; 0x8012f9 <__brkval+0x1>
    7366:	e0 93 f8 12 	sts	0x12F8, r30	; 0x8012f8 <__brkval>
    736a:	67 c0       	rjmp	.+206    	; 0x743a <free+0x10c>
    736c:	ed 01       	movw	r28, r26
    736e:	20 e0       	ldi	r18, 0x00	; 0
    7370:	30 e0       	ldi	r19, 0x00	; 0
    7372:	ce 17       	cp	r28, r30
    7374:	df 07       	cpc	r29, r31
    7376:	40 f4       	brcc	.+16     	; 0x7388 <free+0x5a>
    7378:	4a 81       	ldd	r20, Y+2	; 0x02
    737a:	5b 81       	ldd	r21, Y+3	; 0x03
    737c:	9e 01       	movw	r18, r28
    737e:	41 15       	cp	r20, r1
    7380:	51 05       	cpc	r21, r1
    7382:	f1 f0       	breq	.+60     	; 0x73c0 <free+0x92>
    7384:	ea 01       	movw	r28, r20
    7386:	f5 cf       	rjmp	.-22     	; 0x7372 <free+0x44>
    7388:	d3 83       	std	Z+3, r29	; 0x03
    738a:	c2 83       	std	Z+2, r28	; 0x02
    738c:	40 81       	ld	r20, Z
    738e:	51 81       	ldd	r21, Z+1	; 0x01
    7390:	84 0f       	add	r24, r20
    7392:	95 1f       	adc	r25, r21
    7394:	c8 17       	cp	r28, r24
    7396:	d9 07       	cpc	r29, r25
    7398:	59 f4       	brne	.+22     	; 0x73b0 <free+0x82>
    739a:	88 81       	ld	r24, Y
    739c:	99 81       	ldd	r25, Y+1	; 0x01
    739e:	84 0f       	add	r24, r20
    73a0:	95 1f       	adc	r25, r21
    73a2:	02 96       	adiw	r24, 0x02	; 2
    73a4:	91 83       	std	Z+1, r25	; 0x01
    73a6:	80 83       	st	Z, r24
    73a8:	8a 81       	ldd	r24, Y+2	; 0x02
    73aa:	9b 81       	ldd	r25, Y+3	; 0x03
    73ac:	93 83       	std	Z+3, r25	; 0x03
    73ae:	82 83       	std	Z+2, r24	; 0x02
    73b0:	21 15       	cp	r18, r1
    73b2:	31 05       	cpc	r19, r1
    73b4:	29 f4       	brne	.+10     	; 0x73c0 <free+0x92>
    73b6:	f0 93 fb 12 	sts	0x12FB, r31	; 0x8012fb <__flp+0x1>
    73ba:	e0 93 fa 12 	sts	0x12FA, r30	; 0x8012fa <__flp>
    73be:	3d c0       	rjmp	.+122    	; 0x743a <free+0x10c>
    73c0:	e9 01       	movw	r28, r18
    73c2:	fb 83       	std	Y+3, r31	; 0x03
    73c4:	ea 83       	std	Y+2, r30	; 0x02
    73c6:	49 91       	ld	r20, Y+
    73c8:	59 91       	ld	r21, Y+
    73ca:	c4 0f       	add	r28, r20
    73cc:	d5 1f       	adc	r29, r21
    73ce:	ec 17       	cp	r30, r28
    73d0:	fd 07       	cpc	r31, r29
    73d2:	61 f4       	brne	.+24     	; 0x73ec <free+0xbe>
    73d4:	80 81       	ld	r24, Z
    73d6:	91 81       	ldd	r25, Z+1	; 0x01
    73d8:	84 0f       	add	r24, r20
    73da:	95 1f       	adc	r25, r21
    73dc:	02 96       	adiw	r24, 0x02	; 2
    73de:	e9 01       	movw	r28, r18
    73e0:	99 83       	std	Y+1, r25	; 0x01
    73e2:	88 83       	st	Y, r24
    73e4:	82 81       	ldd	r24, Z+2	; 0x02
    73e6:	93 81       	ldd	r25, Z+3	; 0x03
    73e8:	9b 83       	std	Y+3, r25	; 0x03
    73ea:	8a 83       	std	Y+2, r24	; 0x02
    73ec:	e0 e0       	ldi	r30, 0x00	; 0
    73ee:	f0 e0       	ldi	r31, 0x00	; 0
    73f0:	12 96       	adiw	r26, 0x02	; 2
    73f2:	8d 91       	ld	r24, X+
    73f4:	9c 91       	ld	r25, X
    73f6:	13 97       	sbiw	r26, 0x03	; 3
    73f8:	00 97       	sbiw	r24, 0x00	; 0
    73fa:	19 f0       	breq	.+6      	; 0x7402 <free+0xd4>
    73fc:	fd 01       	movw	r30, r26
    73fe:	dc 01       	movw	r26, r24
    7400:	f7 cf       	rjmp	.-18     	; 0x73f0 <free+0xc2>
    7402:	8d 91       	ld	r24, X+
    7404:	9c 91       	ld	r25, X
    7406:	11 97       	sbiw	r26, 0x01	; 1
    7408:	9d 01       	movw	r18, r26
    740a:	2e 5f       	subi	r18, 0xFE	; 254
    740c:	3f 4f       	sbci	r19, 0xFF	; 255
    740e:	82 0f       	add	r24, r18
    7410:	93 1f       	adc	r25, r19
    7412:	20 91 f8 12 	lds	r18, 0x12F8	; 0x8012f8 <__brkval>
    7416:	30 91 f9 12 	lds	r19, 0x12F9	; 0x8012f9 <__brkval+0x1>
    741a:	28 17       	cp	r18, r24
    741c:	39 07       	cpc	r19, r25
    741e:	69 f4       	brne	.+26     	; 0x743a <free+0x10c>
    7420:	30 97       	sbiw	r30, 0x00	; 0
    7422:	29 f4       	brne	.+10     	; 0x742e <free+0x100>
    7424:	10 92 fb 12 	sts	0x12FB, r1	; 0x8012fb <__flp+0x1>
    7428:	10 92 fa 12 	sts	0x12FA, r1	; 0x8012fa <__flp>
    742c:	02 c0       	rjmp	.+4      	; 0x7432 <free+0x104>
    742e:	13 82       	std	Z+3, r1	; 0x03
    7430:	12 82       	std	Z+2, r1	; 0x02
    7432:	b0 93 f9 12 	sts	0x12F9, r27	; 0x8012f9 <__brkval+0x1>
    7436:	a0 93 f8 12 	sts	0x12F8, r26	; 0x8012f8 <__brkval>
    743a:	df 91       	pop	r29
    743c:	cf 91       	pop	r28
    743e:	08 95       	ret

00007440 <abort>:
    7440:	81 e0       	ldi	r24, 0x01	; 1
    7442:	90 e0       	ldi	r25, 0x00	; 0
    7444:	f8 94       	cli
    7446:	7d c3       	rjmp	.+1786   	; 0x7b42 <_exit>

00007448 <memcpy>:
    7448:	fb 01       	movw	r30, r22
    744a:	dc 01       	movw	r26, r24
    744c:	02 c0       	rjmp	.+4      	; 0x7452 <memcpy+0xa>
    744e:	01 90       	ld	r0, Z+
    7450:	0d 92       	st	X+, r0
    7452:	41 50       	subi	r20, 0x01	; 1
    7454:	50 40       	sbci	r21, 0x00	; 0
    7456:	d8 f7       	brcc	.-10     	; 0x744e <memcpy+0x6>
    7458:	08 95       	ret

0000745a <memset>:
    745a:	dc 01       	movw	r26, r24
    745c:	01 c0       	rjmp	.+2      	; 0x7460 <memset+0x6>
    745e:	6d 93       	st	X+, r22
    7460:	41 50       	subi	r20, 0x01	; 1
    7462:	50 40       	sbci	r21, 0x00	; 0
    7464:	e0 f7       	brcc	.-8      	; 0x745e <memset+0x4>
    7466:	08 95       	ret

00007468 <strcasestr>:
    7468:	fb 01       	movw	r30, r22
    746a:	51 91       	ld	r21, Z+
    746c:	55 23       	and	r21, r21
    746e:	b1 f0       	breq	.+44     	; 0x749c <strcasestr+0x34>
    7470:	bf 01       	movw	r22, r30
    7472:	dc 01       	movw	r26, r24
    7474:	05 2e       	mov	r0, r21
    7476:	4d 91       	ld	r20, X+
    7478:	44 23       	and	r20, r20
    747a:	69 f0       	breq	.+26     	; 0x7496 <strcasestr+0x2e>
    747c:	10 d0       	rcall	.+32     	; 0x749e <strcasestr+0x36>
    747e:	d9 f7       	brne	.-10     	; 0x7476 <strcasestr+0xe>
    7480:	cd 01       	movw	r24, r26
    7482:	01 90       	ld	r0, Z+
    7484:	00 20       	and	r0, r0
    7486:	49 f0       	breq	.+18     	; 0x749a <strcasestr+0x32>
    7488:	4d 91       	ld	r20, X+
    748a:	41 11       	cpse	r20, r1
    748c:	08 d0       	rcall	.+16     	; 0x749e <strcasestr+0x36>
    748e:	c9 f3       	breq	.-14     	; 0x7482 <strcasestr+0x1a>
    7490:	fb 01       	movw	r30, r22
    7492:	41 11       	cpse	r20, r1
    7494:	ee cf       	rjmp	.-36     	; 0x7472 <strcasestr+0xa>
    7496:	81 e0       	ldi	r24, 0x01	; 1
    7498:	90 e0       	ldi	r25, 0x00	; 0
    749a:	01 97       	sbiw	r24, 0x01	; 1
    749c:	08 95       	ret
    749e:	40 25       	eor	r20, r0
    74a0:	39 f0       	breq	.+14     	; 0x74b0 <strcasestr+0x48>
    74a2:	40 32       	cpi	r20, 0x20	; 32
    74a4:	29 f4       	brne	.+10     	; 0x74b0 <strcasestr+0x48>
    74a6:	40 29       	or	r20, r0
    74a8:	4b 57       	subi	r20, 0x7B	; 123
    74aa:	46 5e       	subi	r20, 0xE6	; 230
    74ac:	08 f0       	brcs	.+2      	; 0x74b0 <strcasestr+0x48>
    74ae:	18 94       	sez
    74b0:	08 95       	ret

000074b2 <strcat>:
    74b2:	fb 01       	movw	r30, r22
    74b4:	dc 01       	movw	r26, r24
    74b6:	0d 90       	ld	r0, X+
    74b8:	00 20       	and	r0, r0
    74ba:	e9 f7       	brne	.-6      	; 0x74b6 <strcat+0x4>
    74bc:	11 97       	sbiw	r26, 0x01	; 1
    74be:	01 90       	ld	r0, Z+
    74c0:	0d 92       	st	X+, r0
    74c2:	00 20       	and	r0, r0
    74c4:	e1 f7       	brne	.-8      	; 0x74be <strcat+0xc>
    74c6:	08 95       	ret

000074c8 <strcpy>:
    74c8:	fb 01       	movw	r30, r22
    74ca:	dc 01       	movw	r26, r24
    74cc:	01 90       	ld	r0, Z+
    74ce:	0d 92       	st	X+, r0
    74d0:	00 20       	and	r0, r0
    74d2:	e1 f7       	brne	.-8      	; 0x74cc <strcpy+0x4>
    74d4:	08 95       	ret

000074d6 <strncasecmp>:
    74d6:	fb 01       	movw	r30, r22
    74d8:	dc 01       	movw	r26, r24
    74da:	41 50       	subi	r20, 0x01	; 1
    74dc:	50 40       	sbci	r21, 0x00	; 0
    74de:	88 f0       	brcs	.+34     	; 0x7502 <strncasecmp+0x2c>
    74e0:	8d 91       	ld	r24, X+
    74e2:	81 34       	cpi	r24, 0x41	; 65
    74e4:	1c f0       	brlt	.+6      	; 0x74ec <strncasecmp+0x16>
    74e6:	8b 35       	cpi	r24, 0x5B	; 91
    74e8:	0c f4       	brge	.+2      	; 0x74ec <strncasecmp+0x16>
    74ea:	80 5e       	subi	r24, 0xE0	; 224
    74ec:	61 91       	ld	r22, Z+
    74ee:	61 34       	cpi	r22, 0x41	; 65
    74f0:	1c f0       	brlt	.+6      	; 0x74f8 <strncasecmp+0x22>
    74f2:	6b 35       	cpi	r22, 0x5B	; 91
    74f4:	0c f4       	brge	.+2      	; 0x74f8 <strncasecmp+0x22>
    74f6:	60 5e       	subi	r22, 0xE0	; 224
    74f8:	86 1b       	sub	r24, r22
    74fa:	61 11       	cpse	r22, r1
    74fc:	71 f3       	breq	.-36     	; 0x74da <strncasecmp+0x4>
    74fe:	99 0b       	sbc	r25, r25
    7500:	08 95       	ret
    7502:	88 1b       	sub	r24, r24
    7504:	fc cf       	rjmp	.-8      	; 0x74fe <strncasecmp+0x28>

00007506 <printf>:
    7506:	cf 93       	push	r28
    7508:	df 93       	push	r29
    750a:	cd b7       	in	r28, 0x3d	; 61
    750c:	de b7       	in	r29, 0x3e	; 62
    750e:	ae 01       	movw	r20, r28
    7510:	4a 5f       	subi	r20, 0xFA	; 250
    7512:	5f 4f       	sbci	r21, 0xFF	; 255
    7514:	fa 01       	movw	r30, r20
    7516:	61 91       	ld	r22, Z+
    7518:	71 91       	ld	r23, Z+
    751a:	af 01       	movw	r20, r30
    751c:	80 91 fe 12 	lds	r24, 0x12FE	; 0x8012fe <__iob+0x2>
    7520:	90 91 ff 12 	lds	r25, 0x12FF	; 0x8012ff <__iob+0x3>
    7524:	61 d0       	rcall	.+194    	; 0x75e8 <vfprintf>
    7526:	df 91       	pop	r29
    7528:	cf 91       	pop	r28
    752a:	08 95       	ret

0000752c <puts>:
    752c:	0f 93       	push	r16
    752e:	1f 93       	push	r17
    7530:	cf 93       	push	r28
    7532:	df 93       	push	r29
    7534:	e0 91 fe 12 	lds	r30, 0x12FE	; 0x8012fe <__iob+0x2>
    7538:	f0 91 ff 12 	lds	r31, 0x12FF	; 0x8012ff <__iob+0x3>
    753c:	23 81       	ldd	r18, Z+3	; 0x03
    753e:	21 ff       	sbrs	r18, 1
    7540:	1b c0       	rjmp	.+54     	; 0x7578 <puts+0x4c>
    7542:	8c 01       	movw	r16, r24
    7544:	d0 e0       	ldi	r29, 0x00	; 0
    7546:	c0 e0       	ldi	r28, 0x00	; 0
    7548:	f8 01       	movw	r30, r16
    754a:	81 91       	ld	r24, Z+
    754c:	8f 01       	movw	r16, r30
    754e:	60 91 fe 12 	lds	r22, 0x12FE	; 0x8012fe <__iob+0x2>
    7552:	70 91 ff 12 	lds	r23, 0x12FF	; 0x8012ff <__iob+0x3>
    7556:	db 01       	movw	r26, r22
    7558:	18 96       	adiw	r26, 0x08	; 8
    755a:	ed 91       	ld	r30, X+
    755c:	fc 91       	ld	r31, X
    755e:	19 97       	sbiw	r26, 0x09	; 9
    7560:	88 23       	and	r24, r24
    7562:	31 f0       	breq	.+12     	; 0x7570 <puts+0x44>
    7564:	19 95       	eicall
    7566:	89 2b       	or	r24, r25
    7568:	79 f3       	breq	.-34     	; 0x7548 <puts+0x1c>
    756a:	df ef       	ldi	r29, 0xFF	; 255
    756c:	cf ef       	ldi	r28, 0xFF	; 255
    756e:	ec cf       	rjmp	.-40     	; 0x7548 <puts+0x1c>
    7570:	8a e0       	ldi	r24, 0x0A	; 10
    7572:	19 95       	eicall
    7574:	89 2b       	or	r24, r25
    7576:	19 f0       	breq	.+6      	; 0x757e <puts+0x52>
    7578:	8f ef       	ldi	r24, 0xFF	; 255
    757a:	9f ef       	ldi	r25, 0xFF	; 255
    757c:	02 c0       	rjmp	.+4      	; 0x7582 <puts+0x56>
    757e:	8d 2f       	mov	r24, r29
    7580:	9c 2f       	mov	r25, r28
    7582:	df 91       	pop	r29
    7584:	cf 91       	pop	r28
    7586:	1f 91       	pop	r17
    7588:	0f 91       	pop	r16
    758a:	08 95       	ret

0000758c <sprintf>:
    758c:	0f 93       	push	r16
    758e:	1f 93       	push	r17
    7590:	cf 93       	push	r28
    7592:	df 93       	push	r29
    7594:	cd b7       	in	r28, 0x3d	; 61
    7596:	de b7       	in	r29, 0x3e	; 62
    7598:	2e 97       	sbiw	r28, 0x0e	; 14
    759a:	0f b6       	in	r0, 0x3f	; 63
    759c:	f8 94       	cli
    759e:	de bf       	out	0x3e, r29	; 62
    75a0:	0f be       	out	0x3f, r0	; 63
    75a2:	cd bf       	out	0x3d, r28	; 61
    75a4:	0e 89       	ldd	r16, Y+22	; 0x16
    75a6:	1f 89       	ldd	r17, Y+23	; 0x17
    75a8:	86 e0       	ldi	r24, 0x06	; 6
    75aa:	8c 83       	std	Y+4, r24	; 0x04
    75ac:	1a 83       	std	Y+2, r17	; 0x02
    75ae:	09 83       	std	Y+1, r16	; 0x01
    75b0:	8f ef       	ldi	r24, 0xFF	; 255
    75b2:	9f e7       	ldi	r25, 0x7F	; 127
    75b4:	9e 83       	std	Y+6, r25	; 0x06
    75b6:	8d 83       	std	Y+5, r24	; 0x05
    75b8:	ae 01       	movw	r20, r28
    75ba:	46 5e       	subi	r20, 0xE6	; 230
    75bc:	5f 4f       	sbci	r21, 0xFF	; 255
    75be:	68 8d       	ldd	r22, Y+24	; 0x18
    75c0:	79 8d       	ldd	r23, Y+25	; 0x19
    75c2:	ce 01       	movw	r24, r28
    75c4:	01 96       	adiw	r24, 0x01	; 1
    75c6:	10 d0       	rcall	.+32     	; 0x75e8 <vfprintf>
    75c8:	ef 81       	ldd	r30, Y+7	; 0x07
    75ca:	f8 85       	ldd	r31, Y+8	; 0x08
    75cc:	e0 0f       	add	r30, r16
    75ce:	f1 1f       	adc	r31, r17
    75d0:	10 82       	st	Z, r1
    75d2:	2e 96       	adiw	r28, 0x0e	; 14
    75d4:	0f b6       	in	r0, 0x3f	; 63
    75d6:	f8 94       	cli
    75d8:	de bf       	out	0x3e, r29	; 62
    75da:	0f be       	out	0x3f, r0	; 63
    75dc:	cd bf       	out	0x3d, r28	; 61
    75de:	df 91       	pop	r29
    75e0:	cf 91       	pop	r28
    75e2:	1f 91       	pop	r17
    75e4:	0f 91       	pop	r16
    75e6:	08 95       	ret

000075e8 <vfprintf>:
    75e8:	2f 92       	push	r2
    75ea:	3f 92       	push	r3
    75ec:	4f 92       	push	r4
    75ee:	5f 92       	push	r5
    75f0:	6f 92       	push	r6
    75f2:	7f 92       	push	r7
    75f4:	8f 92       	push	r8
    75f6:	9f 92       	push	r9
    75f8:	af 92       	push	r10
    75fa:	bf 92       	push	r11
    75fc:	cf 92       	push	r12
    75fe:	df 92       	push	r13
    7600:	ef 92       	push	r14
    7602:	ff 92       	push	r15
    7604:	0f 93       	push	r16
    7606:	1f 93       	push	r17
    7608:	cf 93       	push	r28
    760a:	df 93       	push	r29
    760c:	cd b7       	in	r28, 0x3d	; 61
    760e:	de b7       	in	r29, 0x3e	; 62
    7610:	2b 97       	sbiw	r28, 0x0b	; 11
    7612:	0f b6       	in	r0, 0x3f	; 63
    7614:	f8 94       	cli
    7616:	de bf       	out	0x3e, r29	; 62
    7618:	0f be       	out	0x3f, r0	; 63
    761a:	cd bf       	out	0x3d, r28	; 61
    761c:	6c 01       	movw	r12, r24
    761e:	7b 01       	movw	r14, r22
    7620:	8a 01       	movw	r16, r20
    7622:	fc 01       	movw	r30, r24
    7624:	17 82       	std	Z+7, r1	; 0x07
    7626:	16 82       	std	Z+6, r1	; 0x06
    7628:	83 81       	ldd	r24, Z+3	; 0x03
    762a:	81 ff       	sbrs	r24, 1
    762c:	bf c1       	rjmp	.+894    	; 0x79ac <vfprintf+0x3c4>
    762e:	ce 01       	movw	r24, r28
    7630:	01 96       	adiw	r24, 0x01	; 1
    7632:	3c 01       	movw	r6, r24
    7634:	f6 01       	movw	r30, r12
    7636:	93 81       	ldd	r25, Z+3	; 0x03
    7638:	f7 01       	movw	r30, r14
    763a:	93 fd       	sbrc	r25, 3
    763c:	85 91       	lpm	r24, Z+
    763e:	93 ff       	sbrs	r25, 3
    7640:	81 91       	ld	r24, Z+
    7642:	7f 01       	movw	r14, r30
    7644:	88 23       	and	r24, r24
    7646:	09 f4       	brne	.+2      	; 0x764a <vfprintf+0x62>
    7648:	ad c1       	rjmp	.+858    	; 0x79a4 <vfprintf+0x3bc>
    764a:	85 32       	cpi	r24, 0x25	; 37
    764c:	39 f4       	brne	.+14     	; 0x765c <vfprintf+0x74>
    764e:	93 fd       	sbrc	r25, 3
    7650:	85 91       	lpm	r24, Z+
    7652:	93 ff       	sbrs	r25, 3
    7654:	81 91       	ld	r24, Z+
    7656:	7f 01       	movw	r14, r30
    7658:	85 32       	cpi	r24, 0x25	; 37
    765a:	21 f4       	brne	.+8      	; 0x7664 <vfprintf+0x7c>
    765c:	b6 01       	movw	r22, r12
    765e:	90 e0       	ldi	r25, 0x00	; 0
    7660:	d6 d1       	rcall	.+940    	; 0x7a0e <fputc>
    7662:	e8 cf       	rjmp	.-48     	; 0x7634 <vfprintf+0x4c>
    7664:	91 2c       	mov	r9, r1
    7666:	21 2c       	mov	r2, r1
    7668:	31 2c       	mov	r3, r1
    766a:	ff e1       	ldi	r31, 0x1F	; 31
    766c:	f3 15       	cp	r31, r3
    766e:	d8 f0       	brcs	.+54     	; 0x76a6 <vfprintf+0xbe>
    7670:	8b 32       	cpi	r24, 0x2B	; 43
    7672:	79 f0       	breq	.+30     	; 0x7692 <vfprintf+0xaa>
    7674:	38 f4       	brcc	.+14     	; 0x7684 <vfprintf+0x9c>
    7676:	80 32       	cpi	r24, 0x20	; 32
    7678:	79 f0       	breq	.+30     	; 0x7698 <vfprintf+0xb0>
    767a:	83 32       	cpi	r24, 0x23	; 35
    767c:	a1 f4       	brne	.+40     	; 0x76a6 <vfprintf+0xbe>
    767e:	23 2d       	mov	r18, r3
    7680:	20 61       	ori	r18, 0x10	; 16
    7682:	1d c0       	rjmp	.+58     	; 0x76be <vfprintf+0xd6>
    7684:	8d 32       	cpi	r24, 0x2D	; 45
    7686:	61 f0       	breq	.+24     	; 0x76a0 <vfprintf+0xb8>
    7688:	80 33       	cpi	r24, 0x30	; 48
    768a:	69 f4       	brne	.+26     	; 0x76a6 <vfprintf+0xbe>
    768c:	23 2d       	mov	r18, r3
    768e:	21 60       	ori	r18, 0x01	; 1
    7690:	16 c0       	rjmp	.+44     	; 0x76be <vfprintf+0xd6>
    7692:	83 2d       	mov	r24, r3
    7694:	82 60       	ori	r24, 0x02	; 2
    7696:	38 2e       	mov	r3, r24
    7698:	e3 2d       	mov	r30, r3
    769a:	e4 60       	ori	r30, 0x04	; 4
    769c:	3e 2e       	mov	r3, r30
    769e:	2a c0       	rjmp	.+84     	; 0x76f4 <vfprintf+0x10c>
    76a0:	f3 2d       	mov	r31, r3
    76a2:	f8 60       	ori	r31, 0x08	; 8
    76a4:	1d c0       	rjmp	.+58     	; 0x76e0 <vfprintf+0xf8>
    76a6:	37 fc       	sbrc	r3, 7
    76a8:	2d c0       	rjmp	.+90     	; 0x7704 <vfprintf+0x11c>
    76aa:	20 ed       	ldi	r18, 0xD0	; 208
    76ac:	28 0f       	add	r18, r24
    76ae:	2a 30       	cpi	r18, 0x0A	; 10
    76b0:	40 f0       	brcs	.+16     	; 0x76c2 <vfprintf+0xda>
    76b2:	8e 32       	cpi	r24, 0x2E	; 46
    76b4:	b9 f4       	brne	.+46     	; 0x76e4 <vfprintf+0xfc>
    76b6:	36 fc       	sbrc	r3, 6
    76b8:	75 c1       	rjmp	.+746    	; 0x79a4 <vfprintf+0x3bc>
    76ba:	23 2d       	mov	r18, r3
    76bc:	20 64       	ori	r18, 0x40	; 64
    76be:	32 2e       	mov	r3, r18
    76c0:	19 c0       	rjmp	.+50     	; 0x76f4 <vfprintf+0x10c>
    76c2:	36 fe       	sbrs	r3, 6
    76c4:	06 c0       	rjmp	.+12     	; 0x76d2 <vfprintf+0xea>
    76c6:	8a e0       	ldi	r24, 0x0A	; 10
    76c8:	98 9e       	mul	r9, r24
    76ca:	20 0d       	add	r18, r0
    76cc:	11 24       	eor	r1, r1
    76ce:	92 2e       	mov	r9, r18
    76d0:	11 c0       	rjmp	.+34     	; 0x76f4 <vfprintf+0x10c>
    76d2:	ea e0       	ldi	r30, 0x0A	; 10
    76d4:	2e 9e       	mul	r2, r30
    76d6:	20 0d       	add	r18, r0
    76d8:	11 24       	eor	r1, r1
    76da:	22 2e       	mov	r2, r18
    76dc:	f3 2d       	mov	r31, r3
    76de:	f0 62       	ori	r31, 0x20	; 32
    76e0:	3f 2e       	mov	r3, r31
    76e2:	08 c0       	rjmp	.+16     	; 0x76f4 <vfprintf+0x10c>
    76e4:	8c 36       	cpi	r24, 0x6C	; 108
    76e6:	21 f4       	brne	.+8      	; 0x76f0 <vfprintf+0x108>
    76e8:	83 2d       	mov	r24, r3
    76ea:	80 68       	ori	r24, 0x80	; 128
    76ec:	38 2e       	mov	r3, r24
    76ee:	02 c0       	rjmp	.+4      	; 0x76f4 <vfprintf+0x10c>
    76f0:	88 36       	cpi	r24, 0x68	; 104
    76f2:	41 f4       	brne	.+16     	; 0x7704 <vfprintf+0x11c>
    76f4:	f7 01       	movw	r30, r14
    76f6:	93 fd       	sbrc	r25, 3
    76f8:	85 91       	lpm	r24, Z+
    76fa:	93 ff       	sbrs	r25, 3
    76fc:	81 91       	ld	r24, Z+
    76fe:	7f 01       	movw	r14, r30
    7700:	81 11       	cpse	r24, r1
    7702:	b3 cf       	rjmp	.-154    	; 0x766a <vfprintf+0x82>
    7704:	98 2f       	mov	r25, r24
    7706:	9f 7d       	andi	r25, 0xDF	; 223
    7708:	95 54       	subi	r25, 0x45	; 69
    770a:	93 30       	cpi	r25, 0x03	; 3
    770c:	28 f4       	brcc	.+10     	; 0x7718 <vfprintf+0x130>
    770e:	0c 5f       	subi	r16, 0xFC	; 252
    7710:	1f 4f       	sbci	r17, 0xFF	; 255
    7712:	9f e3       	ldi	r25, 0x3F	; 63
    7714:	99 83       	std	Y+1, r25	; 0x01
    7716:	0d c0       	rjmp	.+26     	; 0x7732 <vfprintf+0x14a>
    7718:	83 36       	cpi	r24, 0x63	; 99
    771a:	31 f0       	breq	.+12     	; 0x7728 <vfprintf+0x140>
    771c:	83 37       	cpi	r24, 0x73	; 115
    771e:	71 f0       	breq	.+28     	; 0x773c <vfprintf+0x154>
    7720:	83 35       	cpi	r24, 0x53	; 83
    7722:	09 f0       	breq	.+2      	; 0x7726 <vfprintf+0x13e>
    7724:	55 c0       	rjmp	.+170    	; 0x77d0 <vfprintf+0x1e8>
    7726:	20 c0       	rjmp	.+64     	; 0x7768 <vfprintf+0x180>
    7728:	f8 01       	movw	r30, r16
    772a:	80 81       	ld	r24, Z
    772c:	89 83       	std	Y+1, r24	; 0x01
    772e:	0e 5f       	subi	r16, 0xFE	; 254
    7730:	1f 4f       	sbci	r17, 0xFF	; 255
    7732:	88 24       	eor	r8, r8
    7734:	83 94       	inc	r8
    7736:	91 2c       	mov	r9, r1
    7738:	53 01       	movw	r10, r6
    773a:	12 c0       	rjmp	.+36     	; 0x7760 <vfprintf+0x178>
    773c:	28 01       	movw	r4, r16
    773e:	f2 e0       	ldi	r31, 0x02	; 2
    7740:	4f 0e       	add	r4, r31
    7742:	51 1c       	adc	r5, r1
    7744:	f8 01       	movw	r30, r16
    7746:	a0 80       	ld	r10, Z
    7748:	b1 80       	ldd	r11, Z+1	; 0x01
    774a:	36 fe       	sbrs	r3, 6
    774c:	03 c0       	rjmp	.+6      	; 0x7754 <vfprintf+0x16c>
    774e:	69 2d       	mov	r22, r9
    7750:	70 e0       	ldi	r23, 0x00	; 0
    7752:	02 c0       	rjmp	.+4      	; 0x7758 <vfprintf+0x170>
    7754:	6f ef       	ldi	r22, 0xFF	; 255
    7756:	7f ef       	ldi	r23, 0xFF	; 255
    7758:	c5 01       	movw	r24, r10
    775a:	4e d1       	rcall	.+668    	; 0x79f8 <strnlen>
    775c:	4c 01       	movw	r8, r24
    775e:	82 01       	movw	r16, r4
    7760:	f3 2d       	mov	r31, r3
    7762:	ff 77       	andi	r31, 0x7F	; 127
    7764:	3f 2e       	mov	r3, r31
    7766:	15 c0       	rjmp	.+42     	; 0x7792 <vfprintf+0x1aa>
    7768:	28 01       	movw	r4, r16
    776a:	22 e0       	ldi	r18, 0x02	; 2
    776c:	42 0e       	add	r4, r18
    776e:	51 1c       	adc	r5, r1
    7770:	f8 01       	movw	r30, r16
    7772:	a0 80       	ld	r10, Z
    7774:	b1 80       	ldd	r11, Z+1	; 0x01
    7776:	36 fe       	sbrs	r3, 6
    7778:	03 c0       	rjmp	.+6      	; 0x7780 <vfprintf+0x198>
    777a:	69 2d       	mov	r22, r9
    777c:	70 e0       	ldi	r23, 0x00	; 0
    777e:	02 c0       	rjmp	.+4      	; 0x7784 <vfprintf+0x19c>
    7780:	6f ef       	ldi	r22, 0xFF	; 255
    7782:	7f ef       	ldi	r23, 0xFF	; 255
    7784:	c5 01       	movw	r24, r10
    7786:	2d d1       	rcall	.+602    	; 0x79e2 <strnlen_P>
    7788:	4c 01       	movw	r8, r24
    778a:	f3 2d       	mov	r31, r3
    778c:	f0 68       	ori	r31, 0x80	; 128
    778e:	3f 2e       	mov	r3, r31
    7790:	82 01       	movw	r16, r4
    7792:	33 fc       	sbrc	r3, 3
    7794:	19 c0       	rjmp	.+50     	; 0x77c8 <vfprintf+0x1e0>
    7796:	82 2d       	mov	r24, r2
    7798:	90 e0       	ldi	r25, 0x00	; 0
    779a:	88 16       	cp	r8, r24
    779c:	99 06       	cpc	r9, r25
    779e:	a0 f4       	brcc	.+40     	; 0x77c8 <vfprintf+0x1e0>
    77a0:	b6 01       	movw	r22, r12
    77a2:	80 e2       	ldi	r24, 0x20	; 32
    77a4:	90 e0       	ldi	r25, 0x00	; 0
    77a6:	33 d1       	rcall	.+614    	; 0x7a0e <fputc>
    77a8:	2a 94       	dec	r2
    77aa:	f5 cf       	rjmp	.-22     	; 0x7796 <vfprintf+0x1ae>
    77ac:	f5 01       	movw	r30, r10
    77ae:	37 fc       	sbrc	r3, 7
    77b0:	85 91       	lpm	r24, Z+
    77b2:	37 fe       	sbrs	r3, 7
    77b4:	81 91       	ld	r24, Z+
    77b6:	5f 01       	movw	r10, r30
    77b8:	b6 01       	movw	r22, r12
    77ba:	90 e0       	ldi	r25, 0x00	; 0
    77bc:	28 d1       	rcall	.+592    	; 0x7a0e <fputc>
    77be:	21 10       	cpse	r2, r1
    77c0:	2a 94       	dec	r2
    77c2:	21 e0       	ldi	r18, 0x01	; 1
    77c4:	82 1a       	sub	r8, r18
    77c6:	91 08       	sbc	r9, r1
    77c8:	81 14       	cp	r8, r1
    77ca:	91 04       	cpc	r9, r1
    77cc:	79 f7       	brne	.-34     	; 0x77ac <vfprintf+0x1c4>
    77ce:	e1 c0       	rjmp	.+450    	; 0x7992 <vfprintf+0x3aa>
    77d0:	84 36       	cpi	r24, 0x64	; 100
    77d2:	11 f0       	breq	.+4      	; 0x77d8 <vfprintf+0x1f0>
    77d4:	89 36       	cpi	r24, 0x69	; 105
    77d6:	39 f5       	brne	.+78     	; 0x7826 <vfprintf+0x23e>
    77d8:	f8 01       	movw	r30, r16
    77da:	37 fe       	sbrs	r3, 7
    77dc:	07 c0       	rjmp	.+14     	; 0x77ec <vfprintf+0x204>
    77de:	60 81       	ld	r22, Z
    77e0:	71 81       	ldd	r23, Z+1	; 0x01
    77e2:	82 81       	ldd	r24, Z+2	; 0x02
    77e4:	93 81       	ldd	r25, Z+3	; 0x03
    77e6:	0c 5f       	subi	r16, 0xFC	; 252
    77e8:	1f 4f       	sbci	r17, 0xFF	; 255
    77ea:	08 c0       	rjmp	.+16     	; 0x77fc <vfprintf+0x214>
    77ec:	60 81       	ld	r22, Z
    77ee:	71 81       	ldd	r23, Z+1	; 0x01
    77f0:	07 2e       	mov	r0, r23
    77f2:	00 0c       	add	r0, r0
    77f4:	88 0b       	sbc	r24, r24
    77f6:	99 0b       	sbc	r25, r25
    77f8:	0e 5f       	subi	r16, 0xFE	; 254
    77fa:	1f 4f       	sbci	r17, 0xFF	; 255
    77fc:	f3 2d       	mov	r31, r3
    77fe:	ff 76       	andi	r31, 0x6F	; 111
    7800:	3f 2e       	mov	r3, r31
    7802:	97 ff       	sbrs	r25, 7
    7804:	09 c0       	rjmp	.+18     	; 0x7818 <vfprintf+0x230>
    7806:	90 95       	com	r25
    7808:	80 95       	com	r24
    780a:	70 95       	com	r23
    780c:	61 95       	neg	r22
    780e:	7f 4f       	sbci	r23, 0xFF	; 255
    7810:	8f 4f       	sbci	r24, 0xFF	; 255
    7812:	9f 4f       	sbci	r25, 0xFF	; 255
    7814:	f0 68       	ori	r31, 0x80	; 128
    7816:	3f 2e       	mov	r3, r31
    7818:	2a e0       	ldi	r18, 0x0A	; 10
    781a:	30 e0       	ldi	r19, 0x00	; 0
    781c:	a3 01       	movw	r20, r6
    781e:	33 d1       	rcall	.+614    	; 0x7a86 <__ultoa_invert>
    7820:	88 2e       	mov	r8, r24
    7822:	86 18       	sub	r8, r6
    7824:	44 c0       	rjmp	.+136    	; 0x78ae <vfprintf+0x2c6>
    7826:	85 37       	cpi	r24, 0x75	; 117
    7828:	31 f4       	brne	.+12     	; 0x7836 <vfprintf+0x24e>
    782a:	23 2d       	mov	r18, r3
    782c:	2f 7e       	andi	r18, 0xEF	; 239
    782e:	b2 2e       	mov	r11, r18
    7830:	2a e0       	ldi	r18, 0x0A	; 10
    7832:	30 e0       	ldi	r19, 0x00	; 0
    7834:	25 c0       	rjmp	.+74     	; 0x7880 <vfprintf+0x298>
    7836:	93 2d       	mov	r25, r3
    7838:	99 7f       	andi	r25, 0xF9	; 249
    783a:	b9 2e       	mov	r11, r25
    783c:	8f 36       	cpi	r24, 0x6F	; 111
    783e:	c1 f0       	breq	.+48     	; 0x7870 <vfprintf+0x288>
    7840:	18 f4       	brcc	.+6      	; 0x7848 <vfprintf+0x260>
    7842:	88 35       	cpi	r24, 0x58	; 88
    7844:	79 f0       	breq	.+30     	; 0x7864 <vfprintf+0x27c>
    7846:	ae c0       	rjmp	.+348    	; 0x79a4 <vfprintf+0x3bc>
    7848:	80 37       	cpi	r24, 0x70	; 112
    784a:	19 f0       	breq	.+6      	; 0x7852 <vfprintf+0x26a>
    784c:	88 37       	cpi	r24, 0x78	; 120
    784e:	21 f0       	breq	.+8      	; 0x7858 <vfprintf+0x270>
    7850:	a9 c0       	rjmp	.+338    	; 0x79a4 <vfprintf+0x3bc>
    7852:	e9 2f       	mov	r30, r25
    7854:	e0 61       	ori	r30, 0x10	; 16
    7856:	be 2e       	mov	r11, r30
    7858:	b4 fe       	sbrs	r11, 4
    785a:	0d c0       	rjmp	.+26     	; 0x7876 <vfprintf+0x28e>
    785c:	fb 2d       	mov	r31, r11
    785e:	f4 60       	ori	r31, 0x04	; 4
    7860:	bf 2e       	mov	r11, r31
    7862:	09 c0       	rjmp	.+18     	; 0x7876 <vfprintf+0x28e>
    7864:	34 fe       	sbrs	r3, 4
    7866:	0a c0       	rjmp	.+20     	; 0x787c <vfprintf+0x294>
    7868:	29 2f       	mov	r18, r25
    786a:	26 60       	ori	r18, 0x06	; 6
    786c:	b2 2e       	mov	r11, r18
    786e:	06 c0       	rjmp	.+12     	; 0x787c <vfprintf+0x294>
    7870:	28 e0       	ldi	r18, 0x08	; 8
    7872:	30 e0       	ldi	r19, 0x00	; 0
    7874:	05 c0       	rjmp	.+10     	; 0x7880 <vfprintf+0x298>
    7876:	20 e1       	ldi	r18, 0x10	; 16
    7878:	30 e0       	ldi	r19, 0x00	; 0
    787a:	02 c0       	rjmp	.+4      	; 0x7880 <vfprintf+0x298>
    787c:	20 e1       	ldi	r18, 0x10	; 16
    787e:	32 e0       	ldi	r19, 0x02	; 2
    7880:	f8 01       	movw	r30, r16
    7882:	b7 fe       	sbrs	r11, 7
    7884:	07 c0       	rjmp	.+14     	; 0x7894 <vfprintf+0x2ac>
    7886:	60 81       	ld	r22, Z
    7888:	71 81       	ldd	r23, Z+1	; 0x01
    788a:	82 81       	ldd	r24, Z+2	; 0x02
    788c:	93 81       	ldd	r25, Z+3	; 0x03
    788e:	0c 5f       	subi	r16, 0xFC	; 252
    7890:	1f 4f       	sbci	r17, 0xFF	; 255
    7892:	06 c0       	rjmp	.+12     	; 0x78a0 <vfprintf+0x2b8>
    7894:	60 81       	ld	r22, Z
    7896:	71 81       	ldd	r23, Z+1	; 0x01
    7898:	80 e0       	ldi	r24, 0x00	; 0
    789a:	90 e0       	ldi	r25, 0x00	; 0
    789c:	0e 5f       	subi	r16, 0xFE	; 254
    789e:	1f 4f       	sbci	r17, 0xFF	; 255
    78a0:	a3 01       	movw	r20, r6
    78a2:	f1 d0       	rcall	.+482    	; 0x7a86 <__ultoa_invert>
    78a4:	88 2e       	mov	r8, r24
    78a6:	86 18       	sub	r8, r6
    78a8:	fb 2d       	mov	r31, r11
    78aa:	ff 77       	andi	r31, 0x7F	; 127
    78ac:	3f 2e       	mov	r3, r31
    78ae:	36 fe       	sbrs	r3, 6
    78b0:	0d c0       	rjmp	.+26     	; 0x78cc <vfprintf+0x2e4>
    78b2:	23 2d       	mov	r18, r3
    78b4:	2e 7f       	andi	r18, 0xFE	; 254
    78b6:	a2 2e       	mov	r10, r18
    78b8:	89 14       	cp	r8, r9
    78ba:	58 f4       	brcc	.+22     	; 0x78d2 <vfprintf+0x2ea>
    78bc:	34 fe       	sbrs	r3, 4
    78be:	0b c0       	rjmp	.+22     	; 0x78d6 <vfprintf+0x2ee>
    78c0:	32 fc       	sbrc	r3, 2
    78c2:	09 c0       	rjmp	.+18     	; 0x78d6 <vfprintf+0x2ee>
    78c4:	83 2d       	mov	r24, r3
    78c6:	8e 7e       	andi	r24, 0xEE	; 238
    78c8:	a8 2e       	mov	r10, r24
    78ca:	05 c0       	rjmp	.+10     	; 0x78d6 <vfprintf+0x2ee>
    78cc:	b8 2c       	mov	r11, r8
    78ce:	a3 2c       	mov	r10, r3
    78d0:	03 c0       	rjmp	.+6      	; 0x78d8 <vfprintf+0x2f0>
    78d2:	b8 2c       	mov	r11, r8
    78d4:	01 c0       	rjmp	.+2      	; 0x78d8 <vfprintf+0x2f0>
    78d6:	b9 2c       	mov	r11, r9
    78d8:	a4 fe       	sbrs	r10, 4
    78da:	0f c0       	rjmp	.+30     	; 0x78fa <vfprintf+0x312>
    78dc:	fe 01       	movw	r30, r28
    78de:	e8 0d       	add	r30, r8
    78e0:	f1 1d       	adc	r31, r1
    78e2:	80 81       	ld	r24, Z
    78e4:	80 33       	cpi	r24, 0x30	; 48
    78e6:	21 f4       	brne	.+8      	; 0x78f0 <vfprintf+0x308>
    78e8:	9a 2d       	mov	r25, r10
    78ea:	99 7e       	andi	r25, 0xE9	; 233
    78ec:	a9 2e       	mov	r10, r25
    78ee:	09 c0       	rjmp	.+18     	; 0x7902 <vfprintf+0x31a>
    78f0:	a2 fe       	sbrs	r10, 2
    78f2:	06 c0       	rjmp	.+12     	; 0x7900 <vfprintf+0x318>
    78f4:	b3 94       	inc	r11
    78f6:	b3 94       	inc	r11
    78f8:	04 c0       	rjmp	.+8      	; 0x7902 <vfprintf+0x31a>
    78fa:	8a 2d       	mov	r24, r10
    78fc:	86 78       	andi	r24, 0x86	; 134
    78fe:	09 f0       	breq	.+2      	; 0x7902 <vfprintf+0x31a>
    7900:	b3 94       	inc	r11
    7902:	a3 fc       	sbrc	r10, 3
    7904:	10 c0       	rjmp	.+32     	; 0x7926 <vfprintf+0x33e>
    7906:	a0 fe       	sbrs	r10, 0
    7908:	06 c0       	rjmp	.+12     	; 0x7916 <vfprintf+0x32e>
    790a:	b2 14       	cp	r11, r2
    790c:	80 f4       	brcc	.+32     	; 0x792e <vfprintf+0x346>
    790e:	28 0c       	add	r2, r8
    7910:	92 2c       	mov	r9, r2
    7912:	9b 18       	sub	r9, r11
    7914:	0d c0       	rjmp	.+26     	; 0x7930 <vfprintf+0x348>
    7916:	b2 14       	cp	r11, r2
    7918:	58 f4       	brcc	.+22     	; 0x7930 <vfprintf+0x348>
    791a:	b6 01       	movw	r22, r12
    791c:	80 e2       	ldi	r24, 0x20	; 32
    791e:	90 e0       	ldi	r25, 0x00	; 0
    7920:	76 d0       	rcall	.+236    	; 0x7a0e <fputc>
    7922:	b3 94       	inc	r11
    7924:	f8 cf       	rjmp	.-16     	; 0x7916 <vfprintf+0x32e>
    7926:	b2 14       	cp	r11, r2
    7928:	18 f4       	brcc	.+6      	; 0x7930 <vfprintf+0x348>
    792a:	2b 18       	sub	r2, r11
    792c:	02 c0       	rjmp	.+4      	; 0x7932 <vfprintf+0x34a>
    792e:	98 2c       	mov	r9, r8
    7930:	21 2c       	mov	r2, r1
    7932:	a4 fe       	sbrs	r10, 4
    7934:	0f c0       	rjmp	.+30     	; 0x7954 <vfprintf+0x36c>
    7936:	b6 01       	movw	r22, r12
    7938:	80 e3       	ldi	r24, 0x30	; 48
    793a:	90 e0       	ldi	r25, 0x00	; 0
    793c:	68 d0       	rcall	.+208    	; 0x7a0e <fputc>
    793e:	a2 fe       	sbrs	r10, 2
    7940:	16 c0       	rjmp	.+44     	; 0x796e <vfprintf+0x386>
    7942:	a1 fc       	sbrc	r10, 1
    7944:	03 c0       	rjmp	.+6      	; 0x794c <vfprintf+0x364>
    7946:	88 e7       	ldi	r24, 0x78	; 120
    7948:	90 e0       	ldi	r25, 0x00	; 0
    794a:	02 c0       	rjmp	.+4      	; 0x7950 <vfprintf+0x368>
    794c:	88 e5       	ldi	r24, 0x58	; 88
    794e:	90 e0       	ldi	r25, 0x00	; 0
    7950:	b6 01       	movw	r22, r12
    7952:	0c c0       	rjmp	.+24     	; 0x796c <vfprintf+0x384>
    7954:	8a 2d       	mov	r24, r10
    7956:	86 78       	andi	r24, 0x86	; 134
    7958:	51 f0       	breq	.+20     	; 0x796e <vfprintf+0x386>
    795a:	a1 fe       	sbrs	r10, 1
    795c:	02 c0       	rjmp	.+4      	; 0x7962 <vfprintf+0x37a>
    795e:	8b e2       	ldi	r24, 0x2B	; 43
    7960:	01 c0       	rjmp	.+2      	; 0x7964 <vfprintf+0x37c>
    7962:	80 e2       	ldi	r24, 0x20	; 32
    7964:	a7 fc       	sbrc	r10, 7
    7966:	8d e2       	ldi	r24, 0x2D	; 45
    7968:	b6 01       	movw	r22, r12
    796a:	90 e0       	ldi	r25, 0x00	; 0
    796c:	50 d0       	rcall	.+160    	; 0x7a0e <fputc>
    796e:	89 14       	cp	r8, r9
    7970:	30 f4       	brcc	.+12     	; 0x797e <vfprintf+0x396>
    7972:	b6 01       	movw	r22, r12
    7974:	80 e3       	ldi	r24, 0x30	; 48
    7976:	90 e0       	ldi	r25, 0x00	; 0
    7978:	4a d0       	rcall	.+148    	; 0x7a0e <fputc>
    797a:	9a 94       	dec	r9
    797c:	f8 cf       	rjmp	.-16     	; 0x796e <vfprintf+0x386>
    797e:	8a 94       	dec	r8
    7980:	f3 01       	movw	r30, r6
    7982:	e8 0d       	add	r30, r8
    7984:	f1 1d       	adc	r31, r1
    7986:	80 81       	ld	r24, Z
    7988:	b6 01       	movw	r22, r12
    798a:	90 e0       	ldi	r25, 0x00	; 0
    798c:	40 d0       	rcall	.+128    	; 0x7a0e <fputc>
    798e:	81 10       	cpse	r8, r1
    7990:	f6 cf       	rjmp	.-20     	; 0x797e <vfprintf+0x396>
    7992:	22 20       	and	r2, r2
    7994:	09 f4       	brne	.+2      	; 0x7998 <vfprintf+0x3b0>
    7996:	4e ce       	rjmp	.-868    	; 0x7634 <vfprintf+0x4c>
    7998:	b6 01       	movw	r22, r12
    799a:	80 e2       	ldi	r24, 0x20	; 32
    799c:	90 e0       	ldi	r25, 0x00	; 0
    799e:	37 d0       	rcall	.+110    	; 0x7a0e <fputc>
    79a0:	2a 94       	dec	r2
    79a2:	f7 cf       	rjmp	.-18     	; 0x7992 <vfprintf+0x3aa>
    79a4:	f6 01       	movw	r30, r12
    79a6:	86 81       	ldd	r24, Z+6	; 0x06
    79a8:	97 81       	ldd	r25, Z+7	; 0x07
    79aa:	02 c0       	rjmp	.+4      	; 0x79b0 <vfprintf+0x3c8>
    79ac:	8f ef       	ldi	r24, 0xFF	; 255
    79ae:	9f ef       	ldi	r25, 0xFF	; 255
    79b0:	2b 96       	adiw	r28, 0x0b	; 11
    79b2:	0f b6       	in	r0, 0x3f	; 63
    79b4:	f8 94       	cli
    79b6:	de bf       	out	0x3e, r29	; 62
    79b8:	0f be       	out	0x3f, r0	; 63
    79ba:	cd bf       	out	0x3d, r28	; 61
    79bc:	df 91       	pop	r29
    79be:	cf 91       	pop	r28
    79c0:	1f 91       	pop	r17
    79c2:	0f 91       	pop	r16
    79c4:	ff 90       	pop	r15
    79c6:	ef 90       	pop	r14
    79c8:	df 90       	pop	r13
    79ca:	cf 90       	pop	r12
    79cc:	bf 90       	pop	r11
    79ce:	af 90       	pop	r10
    79d0:	9f 90       	pop	r9
    79d2:	8f 90       	pop	r8
    79d4:	7f 90       	pop	r7
    79d6:	6f 90       	pop	r6
    79d8:	5f 90       	pop	r5
    79da:	4f 90       	pop	r4
    79dc:	3f 90       	pop	r3
    79de:	2f 90       	pop	r2
    79e0:	08 95       	ret

000079e2 <strnlen_P>:
    79e2:	fc 01       	movw	r30, r24
    79e4:	05 90       	lpm	r0, Z+
    79e6:	61 50       	subi	r22, 0x01	; 1
    79e8:	70 40       	sbci	r23, 0x00	; 0
    79ea:	01 10       	cpse	r0, r1
    79ec:	d8 f7       	brcc	.-10     	; 0x79e4 <strnlen_P+0x2>
    79ee:	80 95       	com	r24
    79f0:	90 95       	com	r25
    79f2:	8e 0f       	add	r24, r30
    79f4:	9f 1f       	adc	r25, r31
    79f6:	08 95       	ret

000079f8 <strnlen>:
    79f8:	fc 01       	movw	r30, r24
    79fa:	61 50       	subi	r22, 0x01	; 1
    79fc:	70 40       	sbci	r23, 0x00	; 0
    79fe:	01 90       	ld	r0, Z+
    7a00:	01 10       	cpse	r0, r1
    7a02:	d8 f7       	brcc	.-10     	; 0x79fa <strnlen+0x2>
    7a04:	80 95       	com	r24
    7a06:	90 95       	com	r25
    7a08:	8e 0f       	add	r24, r30
    7a0a:	9f 1f       	adc	r25, r31
    7a0c:	08 95       	ret

00007a0e <fputc>:
    7a0e:	0f 93       	push	r16
    7a10:	1f 93       	push	r17
    7a12:	cf 93       	push	r28
    7a14:	df 93       	push	r29
    7a16:	fb 01       	movw	r30, r22
    7a18:	23 81       	ldd	r18, Z+3	; 0x03
    7a1a:	21 fd       	sbrc	r18, 1
    7a1c:	03 c0       	rjmp	.+6      	; 0x7a24 <fputc+0x16>
    7a1e:	8f ef       	ldi	r24, 0xFF	; 255
    7a20:	9f ef       	ldi	r25, 0xFF	; 255
    7a22:	2c c0       	rjmp	.+88     	; 0x7a7c <fputc+0x6e>
    7a24:	22 ff       	sbrs	r18, 2
    7a26:	16 c0       	rjmp	.+44     	; 0x7a54 <fputc+0x46>
    7a28:	46 81       	ldd	r20, Z+6	; 0x06
    7a2a:	57 81       	ldd	r21, Z+7	; 0x07
    7a2c:	24 81       	ldd	r18, Z+4	; 0x04
    7a2e:	35 81       	ldd	r19, Z+5	; 0x05
    7a30:	42 17       	cp	r20, r18
    7a32:	53 07       	cpc	r21, r19
    7a34:	44 f4       	brge	.+16     	; 0x7a46 <fputc+0x38>
    7a36:	a0 81       	ld	r26, Z
    7a38:	b1 81       	ldd	r27, Z+1	; 0x01
    7a3a:	9d 01       	movw	r18, r26
    7a3c:	2f 5f       	subi	r18, 0xFF	; 255
    7a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    7a40:	31 83       	std	Z+1, r19	; 0x01
    7a42:	20 83       	st	Z, r18
    7a44:	8c 93       	st	X, r24
    7a46:	26 81       	ldd	r18, Z+6	; 0x06
    7a48:	37 81       	ldd	r19, Z+7	; 0x07
    7a4a:	2f 5f       	subi	r18, 0xFF	; 255
    7a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    7a4e:	37 83       	std	Z+7, r19	; 0x07
    7a50:	26 83       	std	Z+6, r18	; 0x06
    7a52:	14 c0       	rjmp	.+40     	; 0x7a7c <fputc+0x6e>
    7a54:	8b 01       	movw	r16, r22
    7a56:	ec 01       	movw	r28, r24
    7a58:	fb 01       	movw	r30, r22
    7a5a:	00 84       	ldd	r0, Z+8	; 0x08
    7a5c:	f1 85       	ldd	r31, Z+9	; 0x09
    7a5e:	e0 2d       	mov	r30, r0
    7a60:	19 95       	eicall
    7a62:	89 2b       	or	r24, r25
    7a64:	e1 f6       	brne	.-72     	; 0x7a1e <fputc+0x10>
    7a66:	d8 01       	movw	r26, r16
    7a68:	16 96       	adiw	r26, 0x06	; 6
    7a6a:	8d 91       	ld	r24, X+
    7a6c:	9c 91       	ld	r25, X
    7a6e:	17 97       	sbiw	r26, 0x07	; 7
    7a70:	01 96       	adiw	r24, 0x01	; 1
    7a72:	17 96       	adiw	r26, 0x07	; 7
    7a74:	9c 93       	st	X, r25
    7a76:	8e 93       	st	-X, r24
    7a78:	16 97       	sbiw	r26, 0x06	; 6
    7a7a:	ce 01       	movw	r24, r28
    7a7c:	df 91       	pop	r29
    7a7e:	cf 91       	pop	r28
    7a80:	1f 91       	pop	r17
    7a82:	0f 91       	pop	r16
    7a84:	08 95       	ret

00007a86 <__ultoa_invert>:
    7a86:	fa 01       	movw	r30, r20
    7a88:	aa 27       	eor	r26, r26
    7a8a:	28 30       	cpi	r18, 0x08	; 8
    7a8c:	51 f1       	breq	.+84     	; 0x7ae2 <__ultoa_invert+0x5c>
    7a8e:	20 31       	cpi	r18, 0x10	; 16
    7a90:	81 f1       	breq	.+96     	; 0x7af2 <__ultoa_invert+0x6c>
    7a92:	e8 94       	clt
    7a94:	6f 93       	push	r22
    7a96:	6e 7f       	andi	r22, 0xFE	; 254
    7a98:	6e 5f       	subi	r22, 0xFE	; 254
    7a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    7a9c:	8f 4f       	sbci	r24, 0xFF	; 255
    7a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    7aa0:	af 4f       	sbci	r26, 0xFF	; 255
    7aa2:	b1 e0       	ldi	r27, 0x01	; 1
    7aa4:	3e d0       	rcall	.+124    	; 0x7b22 <__ultoa_invert+0x9c>
    7aa6:	b4 e0       	ldi	r27, 0x04	; 4
    7aa8:	3c d0       	rcall	.+120    	; 0x7b22 <__ultoa_invert+0x9c>
    7aaa:	67 0f       	add	r22, r23
    7aac:	78 1f       	adc	r23, r24
    7aae:	89 1f       	adc	r24, r25
    7ab0:	9a 1f       	adc	r25, r26
    7ab2:	a1 1d       	adc	r26, r1
    7ab4:	68 0f       	add	r22, r24
    7ab6:	79 1f       	adc	r23, r25
    7ab8:	8a 1f       	adc	r24, r26
    7aba:	91 1d       	adc	r25, r1
    7abc:	a1 1d       	adc	r26, r1
    7abe:	6a 0f       	add	r22, r26
    7ac0:	71 1d       	adc	r23, r1
    7ac2:	81 1d       	adc	r24, r1
    7ac4:	91 1d       	adc	r25, r1
    7ac6:	a1 1d       	adc	r26, r1
    7ac8:	20 d0       	rcall	.+64     	; 0x7b0a <__ultoa_invert+0x84>
    7aca:	09 f4       	brne	.+2      	; 0x7ace <__ultoa_invert+0x48>
    7acc:	68 94       	set
    7ace:	3f 91       	pop	r19
    7ad0:	2a e0       	ldi	r18, 0x0A	; 10
    7ad2:	26 9f       	mul	r18, r22
    7ad4:	11 24       	eor	r1, r1
    7ad6:	30 19       	sub	r19, r0
    7ad8:	30 5d       	subi	r19, 0xD0	; 208
    7ada:	31 93       	st	Z+, r19
    7adc:	de f6       	brtc	.-74     	; 0x7a94 <__ultoa_invert+0xe>
    7ade:	cf 01       	movw	r24, r30
    7ae0:	08 95       	ret
    7ae2:	46 2f       	mov	r20, r22
    7ae4:	47 70       	andi	r20, 0x07	; 7
    7ae6:	40 5d       	subi	r20, 0xD0	; 208
    7ae8:	41 93       	st	Z+, r20
    7aea:	b3 e0       	ldi	r27, 0x03	; 3
    7aec:	0f d0       	rcall	.+30     	; 0x7b0c <__ultoa_invert+0x86>
    7aee:	c9 f7       	brne	.-14     	; 0x7ae2 <__ultoa_invert+0x5c>
    7af0:	f6 cf       	rjmp	.-20     	; 0x7ade <__ultoa_invert+0x58>
    7af2:	46 2f       	mov	r20, r22
    7af4:	4f 70       	andi	r20, 0x0F	; 15
    7af6:	40 5d       	subi	r20, 0xD0	; 208
    7af8:	4a 33       	cpi	r20, 0x3A	; 58
    7afa:	18 f0       	brcs	.+6      	; 0x7b02 <__ultoa_invert+0x7c>
    7afc:	49 5d       	subi	r20, 0xD9	; 217
    7afe:	31 fd       	sbrc	r19, 1
    7b00:	40 52       	subi	r20, 0x20	; 32
    7b02:	41 93       	st	Z+, r20
    7b04:	02 d0       	rcall	.+4      	; 0x7b0a <__ultoa_invert+0x84>
    7b06:	a9 f7       	brne	.-22     	; 0x7af2 <__ultoa_invert+0x6c>
    7b08:	ea cf       	rjmp	.-44     	; 0x7ade <__ultoa_invert+0x58>
    7b0a:	b4 e0       	ldi	r27, 0x04	; 4
    7b0c:	a6 95       	lsr	r26
    7b0e:	97 95       	ror	r25
    7b10:	87 95       	ror	r24
    7b12:	77 95       	ror	r23
    7b14:	67 95       	ror	r22
    7b16:	ba 95       	dec	r27
    7b18:	c9 f7       	brne	.-14     	; 0x7b0c <__ultoa_invert+0x86>
    7b1a:	00 97       	sbiw	r24, 0x00	; 0
    7b1c:	61 05       	cpc	r22, r1
    7b1e:	71 05       	cpc	r23, r1
    7b20:	08 95       	ret
    7b22:	9b 01       	movw	r18, r22
    7b24:	ac 01       	movw	r20, r24
    7b26:	0a 2e       	mov	r0, r26
    7b28:	06 94       	lsr	r0
    7b2a:	57 95       	ror	r21
    7b2c:	47 95       	ror	r20
    7b2e:	37 95       	ror	r19
    7b30:	27 95       	ror	r18
    7b32:	ba 95       	dec	r27
    7b34:	c9 f7       	brne	.-14     	; 0x7b28 <__ultoa_invert+0xa2>
    7b36:	62 0f       	add	r22, r18
    7b38:	73 1f       	adc	r23, r19
    7b3a:	84 1f       	adc	r24, r20
    7b3c:	95 1f       	adc	r25, r21
    7b3e:	a0 1d       	adc	r26, r0
    7b40:	08 95       	ret

00007b42 <_exit>:
    7b42:	f8 94       	cli

00007b44 <__stop_program>:
    7b44:	ff cf       	rjmp	.-2      	; 0x7b44 <__stop_program>
