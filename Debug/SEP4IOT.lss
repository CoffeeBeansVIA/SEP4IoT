
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005ba  00800200  000092c6  0000935a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000092c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c94  008007ba  008007ba  00009914  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009914  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a30  00000000  00000000  000099b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a47e  00000000  00000000  0000a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cbf  00000000  00000000  0001485e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006eaf  00000000  00000000  0001751d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002784  00000000  00000000  0001e3cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003cde  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006afb  00000000  00000000  0002482e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000910  00000000  00000000  0002b329  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b1 c0       	rjmp	.+354    	; 0x164 <__ctors_end>
       2:	00 00       	nop
       4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	c0 c0       	rjmp	.+384    	; 0x1a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	be c0       	rjmp	.+380    	; 0x1a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bc c0       	rjmp	.+376    	; 0x1a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 29 0c 	jmp	0x1852	; 0x1852 <__vector_12>
      34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	a8 c0       	rjmp	.+336    	; 0x1a6 <__bad_interrupt>
      56:	00 00       	nop
      58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 2e 3f 	jmp	0x7e5c	; 0x7e5c <__vector_25>
      68:	0c 94 80 3f 	jmp	0x7f00	; 0x7f00 <__vector_26>
      6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	98 c0       	rjmp	.+304    	; 0x1a6 <__bad_interrupt>
      76:	00 00       	nop
      78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	90 c0       	rjmp	.+288    	; 0x1a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	8e c0       	rjmp	.+284    	; 0x1a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8c c0       	rjmp	.+280    	; 0x1a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c4 3f 	jmp	0x7f88	; 0x7f88 <__vector_36>
      94:	0c 94 16 40 	jmp	0x802c	; 0x802c <__vector_37>
      98:	86 c0       	rjmp	.+268    	; 0x1a6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	84 c0       	rjmp	.+264    	; 0x1a6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	82 c0       	rjmp	.+260    	; 0x1a6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	80 c0       	rjmp	.+256    	; 0x1a6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7e c0       	rjmp	.+252    	; 0x1a6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7c c0       	rjmp	.+248    	; 0x1a6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7a c0       	rjmp	.+244    	; 0x1a6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	78 c0       	rjmp	.+240    	; 0x1a6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	76 c0       	rjmp	.+236    	; 0x1a6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	74 c0       	rjmp	.+232    	; 0x1a6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	72 c0       	rjmp	.+228    	; 0x1a6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	70 c0       	rjmp	.+224    	; 0x1a6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6e c0       	rjmp	.+220    	; 0x1a6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 5a 40 	jmp	0x80b4	; 0x80b4 <__vector_51>
      d0:	0c 94 ac 40 	jmp	0x8158	; 0x8158 <__vector_52>
      d4:	68 c0       	rjmp	.+208    	; 0x1a6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 f0 40 	jmp	0x81e0	; 0x81e0 <__vector_54>
      dc:	0c 94 42 41 	jmp	0x8284	; 0x8284 <__vector_55>
      e0:	62 c0       	rjmp	.+196    	; 0x1a6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6f 31       	cpi	r22, 0x1F	; 31
      e6:	6f 31       	cpi	r22, 0x1F	; 31
      e8:	6f 31       	cpi	r22, 0x1F	; 31
      ea:	ce 31       	cpi	r28, 0x1E	; 30
      ec:	d9 31       	cpi	r29, 0x19	; 25
      ee:	10 32       	cpi	r17, 0x20	; 32
      f0:	6f 31       	cpi	r22, 0x1F	; 31
      f2:	6f 31       	cpi	r22, 0x1F	; 31
      f4:	ce 31       	cpi	r28, 0x1E	; 30
      f6:	d9 31       	cpi	r29, 0x19	; 25

000000f8 <prvIdleTask>:
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
        }
        taskEXIT_CRITICAL();

        return ulReturn;
    }
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	1f 92       	push	r1
      fe:	1f 92       	push	r1
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	0e 94 34 24 	call	0x4868	; 0x4868 <prvCheckTasksWaitingTermination>
     10c:	80 91 f4 11 	lds	r24, 0x11F4	; 0x8011f4 <pxReadyTasksLists>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	10 f0       	brcs	.+4      	; 0x118 <prvIdleTask+0x20>
     114:	0e 94 3e 0b 	call	0x167c	; 0x167c <vPortYield>
     118:	0e 94 3d 33 	call	0x667a	; 0x667a <vApplicationIdleHook>
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <prvIdleTask+0x10>

0000011e <prvTimerTask>:
    {
        Timer_t * pxTimer = xTimer;

        configASSERT( xTimer );
        return pxTimer->pcTimerName;
    }
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
     126:	27 97       	sbiw	r28, 0x07	; 7
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	0f be       	out	0x3f, r0	; 63
     130:	cd bf       	out	0x3d, r28	; 61
     132:	9f 83       	std	Y+7, r25	; 0x07
     134:	8e 83       	std	Y+6, r24	; 0x06
     136:	ce 01       	movw	r24, r28
     138:	05 96       	adiw	r24, 0x05	; 5
     13a:	0e 94 01 30 	call	0x6002	; 0x6002 <prvGetNextExpireTime>
     13e:	dc 01       	movw	r26, r24
     140:	cb 01       	movw	r24, r22
     142:	89 83       	std	Y+1, r24	; 0x01
     144:	9a 83       	std	Y+2, r25	; 0x02
     146:	ab 83       	std	Y+3, r26	; 0x03
     148:	bc 83       	std	Y+4, r27	; 0x04
     14a:	2d 81       	ldd	r18, Y+5	; 0x05
     14c:	89 81       	ldd	r24, Y+1	; 0x01
     14e:	9a 81       	ldd	r25, Y+2	; 0x02
     150:	ab 81       	ldd	r26, Y+3	; 0x03
     152:	bc 81       	ldd	r27, Y+4	; 0x04
     154:	42 2f       	mov	r20, r18
     156:	bc 01       	movw	r22, r24
     158:	cd 01       	movw	r24, r26
     15a:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <prvProcessTimerOrBlockTask>
     15e:	0e 94 28 31 	call	0x6250	; 0x6250 <prvProcessReceivedCommands>
     162:	e9 cf       	rjmp	.-46     	; 0x136 <prvTimerTask+0x18>

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d1 e2       	ldi	r29, 0x21	; 33
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61
     170:	00 e0       	ldi	r16, 0x00	; 0
     172:	0c bf       	out	0x3c, r16	; 60

00000174 <__do_copy_data>:
     174:	17 e0       	ldi	r17, 0x07	; 7
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b2 e0       	ldi	r27, 0x02	; 2
     17a:	e6 ec       	ldi	r30, 0xC6	; 198
     17c:	f2 e9       	ldi	r31, 0x92	; 146
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0b bf       	out	0x3b, r16	; 59
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x14>
     184:	07 90       	elpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	aa 3b       	cpi	r26, 0xBA	; 186
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0x10>

0000018e <__do_clear_bss>:
     18e:	24 e1       	ldi	r18, 0x14	; 20
     190:	aa eb       	ldi	r26, 0xBA	; 186
     192:	b7 e0       	ldi	r27, 0x07	; 7
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	ae 34       	cpi	r26, 0x4E	; 78
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 98 37 	call	0x6f30	; 0x6f30 <main>
     1a2:	0c 94 61 49 	jmp	0x92c2	; 0x92c2 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <CO2_handler_create>:
void co2sensorTask(void* pvParameters);
#define BIT_TASK_CO2_MEASURE (1 << 0)
#define BIT_TASK_CO2_READY (1 << 1)
 

void CO2_handler_create(){
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	0f 93       	push	r16
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     1b6:	83 e0       	ldi	r24, 0x03	; 3
     1b8:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <mh_z19_initialise>
	mh_z19_injectCallBack(mh_z19_callBack);
     1bc:	84 e2       	ldi	r24, 0x24	; 36
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	0e 94 ad 3d 	call	0x7b5a	; 0x7b5a <mh_z19_injectCallBack>
	
	xTaskCreate(
     1c4:	e1 2c       	mov	r14, r1
     1c6:	f1 2c       	mov	r15, r1
     1c8:	03 e0       	ldi	r16, 0x03	; 3
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 ec       	ldi	r20, 0xC0	; 192
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	6d e1       	ldi	r22, 0x1D	; 29
     1d4:	72 e0       	ldi	r23, 0x02	; 2
     1d6:	86 ef       	ldi	r24, 0xF6	; 246
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 30 18 	call	0x3060	; 0x3060 <xTaskCreate>
	,  "CO2 Sensor Task"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL 
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
} 
     1de:	00 00       	nop
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	0f 91       	pop	r16
     1e6:	ff 90       	pop	r15
     1e8:	ef 90       	pop	r14
     1ea:	08 95       	ret

000001ec <co2sensorTask>:

void co2sensorTask(void* pvParameters)
{
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	1f 92       	push	r1
     1fc:	1f 92       	push	r1
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	89 83       	std	Y+1, r24	; 0x01
	(void)pvParameters;
	while(1){
		xEventGroupWaitBits(
     206:	80 91 d5 12 	lds	r24, 0x12D5	; 0x8012d5 <measureEventGroup>
     20a:	90 91 d6 12 	lds	r25, 0x12D6	; 0x8012d6 <measureEventGroup+0x1>
     20e:	cc 24       	eor	r12, r12
     210:	ca 94       	dec	r12
     212:	dc 2c       	mov	r13, r12
     214:	76 01       	movw	r14, r12
     216:	01 e0       	ldi	r16, 0x01	; 1
     218:	21 e0       	ldi	r18, 0x01	; 1
     21a:	41 e0       	ldi	r20, 0x01	; 1
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	a3 d2       	rcall	.+1350   	; 0x76a <xEventGroupWaitBits>
		BIT_TASK_CO2_MEASURE,
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		
		rc = mh_z19_takeMeassuring();
     224:	0e 94 b2 3d 	call	0x7b64	; 0x7b64 <mh_z19_takeMeassuring>
     228:	80 93 27 14 	sts	0x1427, r24	; 0x801427 <rc>
		mh_z19_getCo2Ppm(&lastCO2ppm);
     22c:	88 e2       	ldi	r24, 0x28	; 40
     22e:	94 e1       	ldi	r25, 0x14	; 20
     230:	0e 94 e1 3d 	call	0x7bc2	; 0x7bc2 <mh_z19_getCo2Ppm>
		xEventGroupSetBits(readyEventGroup,BIT_TASK_CO2_READY);
     234:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <readyEventGroup>
     238:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <readyEventGroup+0x1>
     23c:	42 e0       	ldi	r20, 0x02	; 2
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	16 d4       	rcall	.+2092   	; 0xa72 <xEventGroupSetBits>
		/*if (rc != MHZ19_OK)
		{
			puts("something went wrong in co2Sensor");
			// Something went wrong
		}*/
	}
     246:	df cf       	rjmp	.-66     	; 0x206 <co2sensorTask+0x1a>

00000248 <mh_z19_callBack>:
}

void mh_z19_callBack(uint16_t ppm){
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	1f 92       	push	r1
     24e:	1f 92       	push	r1
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	9a 83       	std	Y+2, r25	; 0x02
     256:	89 83       	std	Y+1, r24	; 0x01
	lastCO2ppm = ppm;
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	9a 81       	ldd	r25, Y+2	; 0x02
     25c:	90 93 29 14 	sts	0x1429, r25	; 0x801429 <lastCO2ppm+0x1>
     260:	80 93 28 14 	sts	0x1428, r24	; 0x801428 <lastCO2ppm>
	xEventGroupSetBits(readyEventGroup,BIT_TASK_CO2_READY);
     264:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <readyEventGroup>
     268:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <readyEventGroup+0x1>
     26c:	42 e0       	ldi	r20, 0x02	; 2
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	fe d3       	rcall	.+2044   	; 0xa72 <xEventGroupSetBits>
}
     276:	00 00       	nop
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <getCO2>:

uint16_t getCO2(){
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
	
	return lastCO2ppm;
     28a:	80 91 28 14 	lds	r24, 0x1428	; 0x801428 <lastCO2ppm>
     28e:	90 91 29 14 	lds	r25, 0x1429	; 0x801429 <lastCO2ppm+0x1>
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <SensorDataPackage_create>:

typedef struct SensorDataPackage {
	uint16_t co2Data;
} SensorDataPackage_st;

SensorDataPackage_t SensorDataPackage_create(){
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	1f 92       	push	r1
     29e:	1f 92       	push	r1
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	SensorDataPackage_t packet = pvPortMalloc(sizeof(SensorDataPackage_st));
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	3f d5       	rcall	.+2686   	; 0xd28 <pvPortMalloc>
     2aa:	9a 83       	std	Y+2, r25	; 0x02
     2ac:	89 83       	std	Y+1, r24	; 0x01
	
	if (NULL == packet){
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	9a 81       	ldd	r25, Y+2	; 0x02
     2b2:	89 2b       	or	r24, r25
     2b4:	19 f4       	brne	.+6      	; 0x2bc <SensorDataPackage_create+0x24>
		return NULL;
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <SensorDataPackage_create+0x28>
	}
	
	return packet;
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
}
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	08 95       	ret

000002ca <SensorDataPackage_free>:

void SensorDataPackage_free(SensorDataPackage_t packet){
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	1f 92       	push	r1
     2d0:	1f 92       	push	r1
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	9a 83       	std	Y+2, r25	; 0x02
     2d8:	89 83       	std	Y+1, r24	; 0x01
	vPortFree( (void *) packet );
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	3a d6       	rcall	.+3188   	; 0xf54 <vPortFree>
	packet = NULL;
     2e0:	1a 82       	std	Y+2, r1	; 0x02
     2e2:	19 82       	std	Y+1, r1	; 0x01
}
     2e4:	00 00       	nop
     2e6:	0f 90       	pop	r0
     2e8:	0f 90       	pop	r0
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <SensorDataPackage_setCO2>:

void SensorDataPackage_setCO2(SensorDataPackage_t packet, uint16_t _co2Data){
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <SensorDataPackage_setCO2+0x6>
     2f6:	1f 92       	push	r1
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	9a 83       	std	Y+2, r25	; 0x02
     2fe:	89 83       	std	Y+1, r24	; 0x01
     300:	7c 83       	std	Y+4, r23	; 0x04
     302:	6b 83       	std	Y+3, r22	; 0x03
	packet->co2Data = _co2Data;
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	2b 81       	ldd	r18, Y+3	; 0x03
     30a:	3c 81       	ldd	r19, Y+4	; 0x04
     30c:	fc 01       	movw	r30, r24
     30e:	31 83       	std	Z+1, r19	; 0x01
     310:	20 83       	st	Z, r18
}
     312:	00 00       	nop
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <SensorDataPackage_getCO2>:

uint16_t SensorDataPackage_getCO2(SensorDataPackage_t packet){
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	1f 92       	push	r1
     328:	1f 92       	push	r1
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	9a 83       	std	Y+2, r25	; 0x02
     330:	89 83       	std	Y+1, r24	; 0x01
	return packet->co2Data;
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	9a 81       	ldd	r25, Y+2	; 0x02
     336:	fc 01       	movw	r30, r24
     338:	80 81       	ld	r24, Z
     33a:	91 81       	ldd	r25, Z+1	; 0x01
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <UL_handler_create>:
 static void _lora_setup(void);
 void UL_handler_receive( void *pvParameters );

/*-------------------------------------------------------*/

void UL_handler_create(MessageBufferHandle_t _uplinkMessageBuffer ){
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	1f 92       	push	r1
     352:	1f 92       	push	r1
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	9a 83       	std	Y+2, r25	; 0x02
     35a:	89 83       	std	Y+1, r24	; 0x01
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	0e 94 21 3a 	call	0x7442	; 0x7442 <lora_driver_resetRn2483>
	vTaskDelay(2);
     362:	62 e0       	ldi	r22, 0x02	; 2
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <vTaskDelay>
	lora_driver_resetRn2483(0);
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 21 3a 	call	0x7442	; 0x7442 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     374:	66 e9       	ldi	r22, 0x96	; 150
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     380:	0e 94 da 39 	call	0x73b4	; 0x73b4 <lora_driver_flushBuffers>

	_lora_setup();
     384:	9c d0       	rcall	.+312    	; 0x4be <_lora_setup>
	
	uplinkMessageBuffer = _uplinkMessageBuffer;
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	90 93 2f 14 	sts	0x142F, r25	; 0x80142f <uplinkMessageBuffer+0x1>
     38e:	80 93 2e 14 	sts	0x142E, r24	; 0x80142e <uplinkMessageBuffer>
	
	xTaskCreate(
     392:	e1 2c       	mov	r14, r1
     394:	f1 2c       	mov	r15, r1
     396:	03 e0       	ldi	r16, 0x03	; 3
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	40 ec       	ldi	r20, 0xC0	; 192
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	6d e2       	ldi	r22, 0x2D	; 45
     3a2:	72 e0       	ldi	r23, 0x02	; 2
     3a4:	8f ed       	ldi	r24, 0xDF	; 223
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	0e 94 30 18 	call	0x3060	; 0x3060 <xTaskCreate>
	,  "UpLink Handler Receive"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  3
	,  NULL );
}
     3ac:	00 00       	nop
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	08 95       	ret

000003be <UL_handler_receive>:

void UL_handler_receive( void *pvParameters )
 {
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	a2 97       	sbiw	r28, 0x22	; 34
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	9a a3       	std	Y+34, r25	; 0x22
     3d8:	89 a3       	std	Y+33, r24	; 0x21

	 for(;;){
		 
		 xSemaphoreTake( UpLinkSendMutex , portMAX_DELAY);
     3da:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <UpLinkSendMutex>
     3de:	90 91 2b 14 	lds	r25, 0x142B	; 0x80142b <UpLinkSendMutex+0x1>
     3e2:	4f ef       	ldi	r20, 0xFF	; 255
     3e4:	5f ef       	ldi	r21, 0xFF	; 255
     3e6:	ba 01       	movw	r22, r20
     3e8:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
		 
		 SensorDataPackage_t sensorDataPackage = SensorDataPackage_create();
     3ec:	55 df       	rcall	.-342    	; 0x298 <SensorDataPackage_create>
     3ee:	9a 83       	std	Y+2, r25	; 0x02
     3f0:	89 83       	std	Y+1, r24	; 0x01
		 
		 size_t xReceivedBytes;
		 const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	a0 e0       	ldi	r26, 0x00	; 0
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	8b 83       	std	Y+3, r24	; 0x03
     3fc:	9c 83       	std	Y+4, r25	; 0x04
     3fe:	ad 83       	std	Y+5, r26	; 0x05
     400:	be 83       	std	Y+6, r27	; 0x06

		 // Receive next message from the UL message buffer. Wait for a maximum of 100ms for a message to become available.
		 xReceivedBytes = xMessageBufferReceive(
     402:	e0 91 2e 14 	lds	r30, 0x142E	; 0x80142e <uplinkMessageBuffer>
     406:	f0 91 2f 14 	lds	r31, 0x142F	; 0x80142f <uplinkMessageBuffer+0x1>
     40a:	8b 81       	ldd	r24, Y+3	; 0x03
     40c:	9c 81       	ldd	r25, Y+4	; 0x04
     40e:	ad 81       	ldd	r26, Y+5	; 0x05
     410:	be 81       	ldd	r27, Y+6	; 0x06
     412:	69 81       	ldd	r22, Y+1	; 0x01
     414:	7a 81       	ldd	r23, Y+2	; 0x02
     416:	8c 01       	movw	r16, r24
     418:	9d 01       	movw	r18, r26
     41a:	42 e0       	ldi	r20, 0x02	; 2
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	cf 01       	movw	r24, r30
     420:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xStreamBufferReceive>
     424:	98 87       	std	Y+8, r25	; 0x08
     426:	8f 83       	std	Y+7, r24	; 0x07
		 ( void * ) sensorDataPackage,
		 sizeof( SensorDataPackage_t ),
		 xBlockTime
		 );
		 
		 if( xReceivedBytes > 0 ){
     428:	8f 81       	ldd	r24, Y+7	; 0x07
     42a:	98 85       	ldd	r25, Y+8	; 0x08
     42c:	89 2b       	or	r24, r25
     42e:	a9 f2       	breq	.-86     	; 0x3da <UL_handler_receive+0x1c>
			 // The sensorDataPackage contains the message to be transmitted. Serialize it here and send it using LoRaWan.
			 mutexPuts("UL_handler_receive -> OK");
     430:	84 e4       	ldi	r24, 0x44	; 68
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	0e 94 77 35 	call	0x6aee	; 0x6aee <mutexPuts>
			 mutexPuts(xReceivedBytes);
     438:	8f 81       	ldd	r24, Y+7	; 0x07
     43a:	98 85       	ldd	r25, Y+8	; 0x08
     43c:	0e 94 77 35 	call	0x6aee	; 0x6aee <mutexPuts>
			 
			 // take the data out of the packet
			 uint16_t co2_ppm = SensorDataPackage_getCO2(sensorDataPackage);
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	9a 81       	ldd	r25, Y+2	; 0x02
     444:	6e df       	rcall	.-292    	; 0x322 <SensorDataPackage_getCO2>
     446:	9a 87       	std	Y+10, r25	; 0x0a
     448:	89 87       	std	Y+9, r24	; 0x09
			 
			 // free up memory
			 SensorDataPackage_free(sensorDataPackage);
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	9a 81       	ldd	r25, Y+2	; 0x02
     44e:	3d df       	rcall	.-390    	; 0x2ca <SensorDataPackage_free>
			 
			 
			 lora_driver_payload_t _uplink_payload;
			 
			 _uplink_payload.bytes[0] = co2_ppm >> 8;
     450:	89 85       	ldd	r24, Y+9	; 0x09
     452:	9a 85       	ldd	r25, Y+10	; 0x0a
     454:	89 2f       	mov	r24, r25
     456:	99 27       	eor	r25, r25
     458:	8d 87       	std	Y+13, r24	; 0x0d
			 _uplink_payload.bytes[1] = co2_ppm & 0xFF;
     45a:	89 85       	ldd	r24, Y+9	; 0x09
     45c:	8e 87       	std	Y+14, r24	; 0x0e
			 _uplink_payload.len = 2;
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	8c 87       	std	Y+12, r24	; 0x0c

			 status_leds_shortPuls(led_ST4);  // OPTIONAL
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	0e 94 6f 43 	call	0x86de	; 0x86de <status_leds_shortPuls>
			 printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     468:	ce 01       	movw	r24, r28
     46a:	0b 96       	adiw	r24, 0x0b	; 11
     46c:	bc 01       	movw	r22, r24
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 bf 3a 	call	0x757e	; 0x757e <lora_driver_sendUploadMessage>
     474:	0e 94 ac 3c 	call	0x7958	; 0x7958 <lora_driver_mapReturnCodeToText>
     478:	29 2f       	mov	r18, r25
     47a:	2f 93       	push	r18
     47c:	8f 93       	push	r24
     47e:	8d e5       	ldi	r24, 0x5D	; 93
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	89 2f       	mov	r24, r25
     484:	8f 93       	push	r24
     486:	8d e5       	ldi	r24, 0x5D	; 93
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	8f 93       	push	r24
     48c:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
			 vTaskDelay(300000);
     498:	60 ee       	ldi	r22, 0xE0	; 224
     49a:	73 e9       	ldi	r23, 0x93	; 147
     49c:	84 e0       	ldi	r24, 0x04	; 4
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <vTaskDelay>
			 xSemaphoreGive(UpLinkReceiveMutex);
     4a4:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <UpLinkReceiveMutex>
     4a8:	90 91 2d 14 	lds	r25, 0x142D	; 0x80142d <UpLinkReceiveMutex+0x1>
     4ac:	00 e0       	ldi	r16, 0x00	; 0
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	a9 01       	movw	r20, r18
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
			 }else{
			 // Wait 2.5 minutes to retry
			// vTaskDelay(pdMS_TO_TICKS(150000));
		 }
	 }
     4bc:	8e cf       	rjmp	.-228    	; 0x3da <UL_handler_receive+0x1c>

000004be <_lora_setup>:

 }
 
 static void _lora_setup(void)
 {
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	1f 92       	push	r1
     4c4:	1f 92       	push	r1
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
	 lora_driver_returnCode_t rc;
	 status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	0e 94 f9 42 	call	0x85f2	; 0x85f2 <status_leds_slowBlink>

	 // Factory reset the transceiver
	 printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     4d0:	0e 94 2f 3a 	call	0x745e	; 0x745e <lora_driver_rn2483FactoryReset>
     4d4:	0e 94 ac 3c 	call	0x7958	; 0x7958 <lora_driver_mapReturnCodeToText>
     4d8:	29 2f       	mov	r18, r25
     4da:	2f 93       	push	r18
     4dc:	8f 93       	push	r24
     4de:	82 e7       	ldi	r24, 0x72	; 114
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	89 2f       	mov	r24, r25
     4e4:	8f 93       	push	r24
     4e6:	82 e7       	ldi	r24, 0x72	; 114
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	8f 93       	push	r24
     4ec:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
	 
	 // Configure to EU868 LoRaWAN standards
	 printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     4f8:	0e 94 ad 3b 	call	0x775a	; 0x775a <lora_driver_configureToEu868>
     4fc:	0e 94 ac 3c 	call	0x7958	; 0x7958 <lora_driver_mapReturnCodeToText>
     500:	29 2f       	mov	r18, r25
     502:	2f 93       	push	r18
     504:	8f 93       	push	r24
     506:	85 e8       	ldi	r24, 0x85	; 133
     508:	92 e0       	ldi	r25, 0x02	; 2
     50a:	89 2f       	mov	r24, r25
     50c:	8f 93       	push	r24
     50e:	85 e8       	ldi	r24, 0x85	; 133
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	8f 93       	push	r24
     514:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0

	 // Get the transceivers HW EUI
	 rc = lora_driver_getRn2483Hweui(_out_buf);
     520:	8a eb       	ldi	r24, 0xBA	; 186
     522:	97 e0       	ldi	r25, 0x07	; 7
     524:	0e 94 41 3a 	call	0x7482	; 0x7482 <lora_driver_getRn2483Hweui>
     528:	8a 83       	std	Y+2, r24	; 0x02
	 printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     52a:	8a 81       	ldd	r24, Y+2	; 0x02
     52c:	0e 94 ac 3c 	call	0x7958	; 0x7958 <lora_driver_mapReturnCodeToText>
     530:	9c 01       	movw	r18, r24
     532:	8a eb       	ldi	r24, 0xBA	; 186
     534:	97 e0       	ldi	r25, 0x07	; 7
     536:	89 2f       	mov	r24, r25
     538:	8f 93       	push	r24
     53a:	8a eb       	ldi	r24, 0xBA	; 186
     53c:	97 e0       	ldi	r25, 0x07	; 7
     53e:	8f 93       	push	r24
     540:	83 2f       	mov	r24, r19
     542:	8f 93       	push	r24
     544:	82 2f       	mov	r24, r18
     546:	8f 93       	push	r24
     548:	8e e9       	ldi	r24, 0x9E	; 158
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	89 2f       	mov	r24, r25
     54e:	8f 93       	push	r24
     550:	8e e9       	ldi	r24, 0x9E	; 158
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	8f 93       	push	r24
     556:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0

	 // Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	 printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     566:	8a eb       	ldi	r24, 0xBA	; 186
     568:	97 e0       	ldi	r25, 0x07	; 7
     56a:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <lora_driver_setDeviceIdentifier>
     56e:	0e 94 ac 3c 	call	0x7958	; 0x7958 <lora_driver_mapReturnCodeToText>
     572:	29 2f       	mov	r18, r25
     574:	2f 93       	push	r18
     576:	8f 93       	push	r24
     578:	8a eb       	ldi	r24, 0xBA	; 186
     57a:	97 e0       	ldi	r25, 0x07	; 7
     57c:	89 2f       	mov	r24, r25
     57e:	8f 93       	push	r24
     580:	8a eb       	ldi	r24, 0xBA	; 186
     582:	97 e0       	ldi	r25, 0x07	; 7
     584:	8f 93       	push	r24
     586:	82 eb       	ldi	r24, 0xB2	; 178
     588:	92 e0       	ldi	r25, 0x02	; 2
     58a:	89 2f       	mov	r24, r25
     58c:	8f 93       	push	r24
     58e:	82 eb       	ldi	r24, 0xB2	; 178
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	8f 93       	push	r24
     594:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	0f 90       	pop	r0

	 // Set Over The Air Activation parameters to be ready to join the LoRaWAN
	 printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     5a4:	4a eb       	ldi	r20, 0xBA	; 186
     5a6:	57 e0       	ldi	r21, 0x07	; 7
     5a8:	67 ec       	ldi	r22, 0xC7	; 199
     5aa:	72 e0       	ldi	r23, 0x02	; 2
     5ac:	88 ee       	ldi	r24, 0xE8	; 232
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e 94 8b 3c 	call	0x7916	; 0x7916 <lora_driver_setOtaaIdentity>
     5b4:	0e 94 ac 3c 	call	0x7958	; 0x7958 <lora_driver_mapReturnCodeToText>
     5b8:	29 2f       	mov	r18, r25
     5ba:	2f 93       	push	r18
     5bc:	8f 93       	push	r24
     5be:	8a eb       	ldi	r24, 0xBA	; 186
     5c0:	97 e0       	ldi	r25, 0x07	; 7
     5c2:	89 2f       	mov	r24, r25
     5c4:	8f 93       	push	r24
     5c6:	8a eb       	ldi	r24, 0xBA	; 186
     5c8:	97 e0       	ldi	r25, 0x07	; 7
     5ca:	8f 93       	push	r24
     5cc:	87 ec       	ldi	r24, 0xC7	; 199
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	89 2f       	mov	r24, r25
     5d2:	8f 93       	push	r24
     5d4:	87 ec       	ldi	r24, 0xC7	; 199
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	8f 93       	push	r24
     5da:	88 ee       	ldi	r24, 0xE8	; 232
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	89 2f       	mov	r24, r25
     5e0:	8f 93       	push	r24
     5e2:	88 ee       	ldi	r24, 0xE8	; 232
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	8f 93       	push	r24
     5e8:	89 ef       	ldi	r24, 0xF9	; 249
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	89 2f       	mov	r24, r25
     5ee:	8f 93       	push	r24
     5f0:	89 ef       	ldi	r24, 0xF9	; 249
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	8f 93       	push	r24
     5f6:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
     5fa:	8d b7       	in	r24, 0x3d	; 61
     5fc:	9e b7       	in	r25, 0x3e	; 62
     5fe:	0a 96       	adiw	r24, 0x0a	; 10
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	de bf       	out	0x3e, r29	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	cd bf       	out	0x3d, r28	; 61

	 // Save all the MAC settings in the transceiver
	 printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     60a:	0e 94 90 3a 	call	0x7520	; 0x7520 <lora_driver_saveMac>
     60e:	0e 94 ac 3c 	call	0x7958	; 0x7958 <lora_driver_mapReturnCodeToText>
     612:	29 2f       	mov	r18, r25
     614:	2f 93       	push	r18
     616:	8f 93       	push	r24
     618:	8f e2       	ldi	r24, 0x2F	; 47
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	89 2f       	mov	r24, r25
     61e:	8f 93       	push	r24
     620:	8f e2       	ldi	r24, 0x2F	; 47
     622:	93 e0       	ldi	r25, 0x03	; 3
     624:	8f 93       	push	r24
     626:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0

	 // Enable Adaptive Data Rate
	 printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	0e 94 8a 3b 	call	0x7714	; 0x7714 <lora_driver_setAdaptiveDataRate>
     638:	0e 94 ac 3c 	call	0x7958	; 0x7958 <lora_driver_mapReturnCodeToText>
     63c:	29 2f       	mov	r18, r25
     63e:	2f 93       	push	r18
     640:	8f 93       	push	r24
     642:	8e e3       	ldi	r24, 0x3E	; 62
     644:	93 e0       	ldi	r25, 0x03	; 3
     646:	89 2f       	mov	r24, r25
     648:	8f 93       	push	r24
     64a:	8e e3       	ldi	r24, 0x3E	; 62
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	8f 93       	push	r24
     650:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0

	 // Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	 printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     65c:	84 ef       	ldi	r24, 0xF4	; 244
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 95 3b 	call	0x772a	; 0x772a <lora_driver_setReceiveDelay>
     664:	0e 94 ac 3c 	call	0x7958	; 0x7958 <lora_driver_mapReturnCodeToText>
     668:	29 2f       	mov	r18, r25
     66a:	2f 93       	push	r18
     66c:	8f 93       	push	r24
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	8f 93       	push	r24
     672:	84 ef       	ldi	r24, 0xF4	; 244
     674:	8f 93       	push	r24
     676:	8f e5       	ldi	r24, 0x5F	; 95
     678:	93 e0       	ldi	r25, 0x03	; 3
     67a:	89 2f       	mov	r24, r25
     67c:	8f 93       	push	r24
     67e:	8f e5       	ldi	r24, 0x5F	; 95
     680:	93 e0       	ldi	r25, 0x03	; 3
     682:	8f 93       	push	r24
     684:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0

	 // Join the LoRaWAN
	 uint8_t maxJoinTriesLeft = 10;
     694:	8a e0       	ldi	r24, 0x0A	; 10
     696:	89 83       	std	Y+1, r24	; 0x01
	 
	 do {
		 rc = lora_driver_join(LORA_OTAA);
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	0e 94 96 3a 	call	0x752c	; 0x752c <lora_driver_join>
     69e:	8a 83       	std	Y+2, r24	; 0x02
		 printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
     6a2:	0e 94 ac 3c 	call	0x7958	; 0x7958 <lora_driver_mapReturnCodeToText>
     6a6:	9c 01       	movw	r18, r24
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	88 2f       	mov	r24, r24
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	43 2f       	mov	r20, r19
     6b0:	4f 93       	push	r20
     6b2:	2f 93       	push	r18
     6b4:	29 2f       	mov	r18, r25
     6b6:	2f 93       	push	r18
     6b8:	8f 93       	push	r24
     6ba:	8f e7       	ldi	r24, 0x7F	; 127
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	89 2f       	mov	r24, r25
     6c0:	8f 93       	push	r24
     6c2:	8f e7       	ldi	r24, 0x7F	; 127
     6c4:	93 e0       	ldi	r25, 0x03	; 3
     6c6:	8f 93       	push	r24
     6c8:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0

		 //if ( rc != LORA_ACCEPTED)
		 if ( rc != LORA_OK){
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	88 23       	and	r24, r24
     6dc:	81 f0       	breq	.+32     	; 0x6fe <_lora_setup+0x240>
			 // Make the red led pulse to tell something went wrong
			 status_leds_longPuls(led_ST1); // OPTIONAL
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	0e 94 5d 43 	call	0x86ba	; 0x86ba <status_leds_longPuls>
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
     6e4:	66 e3       	ldi	r22, 0x36	; 54
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <vTaskDelay>
		 }
		 else
		 {
			 break;
		 }
	 } while (--maxJoinTriesLeft);
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	81 50       	subi	r24, 0x01	; 1
     6f4:	89 83       	std	Y+1, r24	; 0x01
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	88 23       	and	r24, r24
     6fa:	71 f6       	brne	.-100    	; 0x698 <_lora_setup+0x1da>
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <_lora_setup+0x242>
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
		 }
		 else
		 {
			 break;
     6fe:	00 00       	nop
		 }
	 } while (--maxJoinTriesLeft);

	 //if (rc == LORA_ACCEPTED)
	 if ( rc == LORA_OK)
     700:	8a 81       	ldd	r24, Y+2	; 0x02
     702:	88 23       	and	r24, r24
     704:	21 f4       	brne	.+8      	; 0x70e <_lora_setup+0x250>
	 {
		 // Connected to LoRaWAN :-)
		 // Make the green led steady
		 status_leds_ledOn(led_ST2); // OPTIONAL
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	0e 94 3f 43 	call	0x867e	; 0x867e <status_leds_ledOn>
		 while (1)
		 {
			 taskYIELD();
		 }
	 }
     70c:	08 c0       	rjmp	.+16     	; 0x71e <_lora_setup+0x260>
	 }
	 else
	 {
		 // Something went wrong
		 // Turn off the green led
		 status_leds_ledOff(led_ST2); // OPTIONAL
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 4e 43 	call	0x869c	; 0x869c <status_leds_ledOff>
		 // Make the red led blink fast to tell something went wrong
		 status_leds_fastBlink(led_ST1); // OPTIONAL
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	0e 94 1c 43 	call	0x8638	; 0x8638 <status_leds_fastBlink>

		 // Lets stay here
		 while (1)
		 {
			 taskYIELD();
     71a:	b0 d7       	rcall	.+3936   	; 0x167c <vPortYield>
		 }
     71c:	fe cf       	rjmp	.-4      	; 0x71a <_lora_setup+0x25c>
	 }
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <xEventGroupCreate>:
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	1f 92       	push	r1
     72e:	1f 92       	push	r1
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	8f e0       	ldi	r24, 0x0F	; 15
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	f7 d2       	rcall	.+1518   	; 0xd28 <pvPortMalloc>
     73a:	9a 83       	std	Y+2, r25	; 0x02
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	89 2b       	or	r24, r25
     744:	59 f0       	breq	.+22     	; 0x75c <xEventGroupCreate+0x34>
     746:	89 81       	ldd	r24, Y+1	; 0x01
     748:	9a 81       	ldd	r25, Y+2	; 0x02
     74a:	fc 01       	movw	r30, r24
     74c:	10 82       	st	Z, r1
     74e:	11 82       	std	Z+1, r1	; 0x01
     750:	12 82       	std	Z+2, r1	; 0x02
     752:	13 82       	std	Z+3, r1	; 0x03
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	04 96       	adiw	r24, 0x04	; 4
     75a:	9f d5       	rcall	.+2878   	; 0x129a <vListInitialise>
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <xEventGroupWaitBits>:
     76a:	cf 92       	push	r12
     76c:	df 92       	push	r13
     76e:	ef 92       	push	r14
     770:	ff 92       	push	r15
     772:	0f 93       	push	r16
     774:	1f 93       	push	r17
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	6d 97       	sbiw	r28, 0x1d	; 29
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	9b 8b       	std	Y+19, r25	; 0x13
     78c:	8a 8b       	std	Y+18, r24	; 0x12
     78e:	4c 8b       	std	Y+20, r20	; 0x14
     790:	5d 8b       	std	Y+21, r21	; 0x15
     792:	6e 8b       	std	Y+22, r22	; 0x16
     794:	7f 8b       	std	Y+23, r23	; 0x17
     796:	28 8f       	std	Y+24, r18	; 0x18
     798:	09 8f       	std	Y+25, r16	; 0x19
     79a:	ca 8e       	std	Y+26, r12	; 0x1a
     79c:	db 8e       	std	Y+27, r13	; 0x1b
     79e:	ec 8e       	std	Y+28, r14	; 0x1c
     7a0:	fd 8e       	std	Y+29, r15	; 0x1d
     7a2:	8a 89       	ldd	r24, Y+18	; 0x12
     7a4:	9b 89       	ldd	r25, Y+19	; 0x13
     7a6:	9a 87       	std	Y+10, r25	; 0x0a
     7a8:	89 87       	std	Y+9, r24	; 0x09
     7aa:	1d 82       	std	Y+5, r1	; 0x05
     7ac:	1e 82       	std	Y+6, r1	; 0x06
     7ae:	1f 82       	std	Y+7, r1	; 0x07
     7b0:	18 86       	std	Y+8, r1	; 0x08
     7b2:	1b 86       	std	Y+11, r1	; 0x0b
     7b4:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <vTaskSuspendAll>
     7b8:	89 85       	ldd	r24, Y+9	; 0x09
     7ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     7bc:	fc 01       	movw	r30, r24
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	a2 81       	ldd	r26, Z+2	; 0x02
     7c4:	b3 81       	ldd	r27, Z+3	; 0x03
     7c6:	8c 87       	std	Y+12, r24	; 0x0c
     7c8:	9d 87       	std	Y+13, r25	; 0x0d
     7ca:	ae 87       	std	Y+14, r26	; 0x0e
     7cc:	bf 87       	std	Y+15, r27	; 0x0f
     7ce:	2c 89       	ldd	r18, Y+20	; 0x14
     7d0:	3d 89       	ldd	r19, Y+21	; 0x15
     7d2:	4e 89       	ldd	r20, Y+22	; 0x16
     7d4:	5f 89       	ldd	r21, Y+23	; 0x17
     7d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d8:	9d 85       	ldd	r25, Y+13	; 0x0d
     7da:	ae 85       	ldd	r26, Y+14	; 0x0e
     7dc:	bf 85       	ldd	r27, Y+15	; 0x0f
     7de:	09 8d       	ldd	r16, Y+25	; 0x19
     7e0:	bc 01       	movw	r22, r24
     7e2:	cd 01       	movw	r24, r26
     7e4:	54 d2       	rcall	.+1192   	; 0xc8e <prvTestWaitCondition>
     7e6:	88 8b       	std	Y+16, r24	; 0x10
     7e8:	88 89       	ldd	r24, Y+16	; 0x10
     7ea:	88 23       	and	r24, r24
     7ec:	59 f1       	breq	.+86     	; 0x844 <xEventGroupWaitBits+0xda>
     7ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     7f2:	ae 85       	ldd	r26, Y+14	; 0x0e
     7f4:	bf 85       	ldd	r27, Y+15	; 0x0f
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	9a 83       	std	Y+2, r25	; 0x02
     7fa:	ab 83       	std	Y+3, r26	; 0x03
     7fc:	bc 83       	std	Y+4, r27	; 0x04
     7fe:	1a 8e       	std	Y+26, r1	; 0x1a
     800:	1b 8e       	std	Y+27, r1	; 0x1b
     802:	1c 8e       	std	Y+28, r1	; 0x1c
     804:	1d 8e       	std	Y+29, r1	; 0x1d
     806:	88 8d       	ldd	r24, Y+24	; 0x18
     808:	88 23       	and	r24, r24
     80a:	09 f4       	brne	.+2      	; 0x80e <xEventGroupWaitBits+0xa4>
     80c:	65 c0       	rjmp	.+202    	; 0x8d8 <xEventGroupWaitBits+0x16e>
     80e:	89 85       	ldd	r24, Y+9	; 0x09
     810:	9a 85       	ldd	r25, Y+10	; 0x0a
     812:	fc 01       	movw	r30, r24
     814:	20 81       	ld	r18, Z
     816:	31 81       	ldd	r19, Z+1	; 0x01
     818:	42 81       	ldd	r20, Z+2	; 0x02
     81a:	53 81       	ldd	r21, Z+3	; 0x03
     81c:	8c 89       	ldd	r24, Y+20	; 0x14
     81e:	9d 89       	ldd	r25, Y+21	; 0x15
     820:	ae 89       	ldd	r26, Y+22	; 0x16
     822:	bf 89       	ldd	r27, Y+23	; 0x17
     824:	80 95       	com	r24
     826:	90 95       	com	r25
     828:	a0 95       	com	r26
     82a:	b0 95       	com	r27
     82c:	82 23       	and	r24, r18
     82e:	93 23       	and	r25, r19
     830:	a4 23       	and	r26, r20
     832:	b5 23       	and	r27, r21
     834:	29 85       	ldd	r18, Y+9	; 0x09
     836:	3a 85       	ldd	r19, Y+10	; 0x0a
     838:	f9 01       	movw	r30, r18
     83a:	80 83       	st	Z, r24
     83c:	91 83       	std	Z+1, r25	; 0x01
     83e:	a2 83       	std	Z+2, r26	; 0x02
     840:	b3 83       	std	Z+3, r27	; 0x03
     842:	4a c0       	rjmp	.+148    	; 0x8d8 <xEventGroupWaitBits+0x16e>
     844:	8a 8d       	ldd	r24, Y+26	; 0x1a
     846:	9b 8d       	ldd	r25, Y+27	; 0x1b
     848:	ac 8d       	ldd	r26, Y+28	; 0x1c
     84a:	bd 8d       	ldd	r27, Y+29	; 0x1d
     84c:	89 2b       	or	r24, r25
     84e:	8a 2b       	or	r24, r26
     850:	8b 2b       	or	r24, r27
     852:	59 f4       	brne	.+22     	; 0x86a <xEventGroupWaitBits+0x100>
     854:	8c 85       	ldd	r24, Y+12	; 0x0c
     856:	9d 85       	ldd	r25, Y+13	; 0x0d
     858:	ae 85       	ldd	r26, Y+14	; 0x0e
     85a:	bf 85       	ldd	r27, Y+15	; 0x0f
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	9a 83       	std	Y+2, r25	; 0x02
     860:	ab 83       	std	Y+3, r26	; 0x03
     862:	bc 83       	std	Y+4, r27	; 0x04
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	8b 87       	std	Y+11, r24	; 0x0b
     868:	37 c0       	rjmp	.+110    	; 0x8d8 <xEventGroupWaitBits+0x16e>
     86a:	88 8d       	ldd	r24, Y+24	; 0x18
     86c:	88 23       	and	r24, r24
     86e:	49 f0       	breq	.+18     	; 0x882 <xEventGroupWaitBits+0x118>
     870:	8d 81       	ldd	r24, Y+5	; 0x05
     872:	9e 81       	ldd	r25, Y+6	; 0x06
     874:	af 81       	ldd	r26, Y+7	; 0x07
     876:	b8 85       	ldd	r27, Y+8	; 0x08
     878:	b1 60       	ori	r27, 0x01	; 1
     87a:	8d 83       	std	Y+5, r24	; 0x05
     87c:	9e 83       	std	Y+6, r25	; 0x06
     87e:	af 83       	std	Y+7, r26	; 0x07
     880:	b8 87       	std	Y+8, r27	; 0x08
     882:	89 8d       	ldd	r24, Y+25	; 0x19
     884:	88 23       	and	r24, r24
     886:	49 f0       	breq	.+18     	; 0x89a <xEventGroupWaitBits+0x130>
     888:	8d 81       	ldd	r24, Y+5	; 0x05
     88a:	9e 81       	ldd	r25, Y+6	; 0x06
     88c:	af 81       	ldd	r26, Y+7	; 0x07
     88e:	b8 85       	ldd	r27, Y+8	; 0x08
     890:	b4 60       	ori	r27, 0x04	; 4
     892:	8d 83       	std	Y+5, r24	; 0x05
     894:	9e 83       	std	Y+6, r25	; 0x06
     896:	af 83       	std	Y+7, r26	; 0x07
     898:	b8 87       	std	Y+8, r27	; 0x08
     89a:	2c 89       	ldd	r18, Y+20	; 0x14
     89c:	3d 89       	ldd	r19, Y+21	; 0x15
     89e:	4e 89       	ldd	r20, Y+22	; 0x16
     8a0:	5f 89       	ldd	r21, Y+23	; 0x17
     8a2:	8d 81       	ldd	r24, Y+5	; 0x05
     8a4:	9e 81       	ldd	r25, Y+6	; 0x06
     8a6:	af 81       	ldd	r26, Y+7	; 0x07
     8a8:	b8 85       	ldd	r27, Y+8	; 0x08
     8aa:	82 2b       	or	r24, r18
     8ac:	93 2b       	or	r25, r19
     8ae:	a4 2b       	or	r26, r20
     8b0:	b5 2b       	or	r27, r21
     8b2:	29 85       	ldd	r18, Y+9	; 0x09
     8b4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b6:	f9 01       	movw	r30, r18
     8b8:	34 96       	adiw	r30, 0x04	; 4
     8ba:	2a 8d       	ldd	r18, Y+26	; 0x1a
     8bc:	3b 8d       	ldd	r19, Y+27	; 0x1b
     8be:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8c0:	5d 8d       	ldd	r21, Y+29	; 0x1d
     8c2:	89 01       	movw	r16, r18
     8c4:	9a 01       	movw	r18, r20
     8c6:	ac 01       	movw	r20, r24
     8c8:	bd 01       	movw	r22, r26
     8ca:	cf 01       	movw	r24, r30
     8cc:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <vTaskPlaceOnUnorderedEventList>
     8d0:	19 82       	std	Y+1, r1	; 0x01
     8d2:	1a 82       	std	Y+2, r1	; 0x02
     8d4:	1b 82       	std	Y+3, r1	; 0x03
     8d6:	1c 82       	std	Y+4, r1	; 0x04
     8d8:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
     8dc:	89 8b       	std	Y+17, r24	; 0x11
     8de:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8e2:	ac 8d       	ldd	r26, Y+28	; 0x1c
     8e4:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8e6:	89 2b       	or	r24, r25
     8e8:	8a 2b       	or	r24, r26
     8ea:	8b 2b       	or	r24, r27
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <xEventGroupWaitBits+0x186>
     8ee:	5f c0       	rjmp	.+190    	; 0x9ae <xEventGroupWaitBits+0x244>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	88 23       	and	r24, r24
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <xEventGroupWaitBits+0x18e>
     8f6:	c2 d6       	rcall	.+3460   	; 0x167c <vPortYield>
     8f8:	0e 94 dd 27 	call	0x4fba	; 0x4fba <uxTaskResetEventItemValue>
     8fc:	dc 01       	movw	r26, r24
     8fe:	cb 01       	movw	r24, r22
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	9a 83       	std	Y+2, r25	; 0x02
     904:	ab 83       	std	Y+3, r26	; 0x03
     906:	bc 83       	std	Y+4, r27	; 0x04
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	ab 81       	ldd	r26, Y+3	; 0x03
     90e:	bc 81       	ldd	r27, Y+4	; 0x04
     910:	88 27       	eor	r24, r24
     912:	99 27       	eor	r25, r25
     914:	aa 27       	eor	r26, r26
     916:	b2 70       	andi	r27, 0x02	; 2
     918:	89 2b       	or	r24, r25
     91a:	8a 2b       	or	r24, r26
     91c:	8b 2b       	or	r24, r27
     91e:	09 f0       	breq	.+2      	; 0x922 <xEventGroupWaitBits+0x1b8>
     920:	3d c0       	rjmp	.+122    	; 0x99c <xEventGroupWaitBits+0x232>
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	0f 92       	push	r0
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	9a 85       	ldd	r25, Y+10	; 0x0a
     92c:	fc 01       	movw	r30, r24
     92e:	80 81       	ld	r24, Z
     930:	91 81       	ldd	r25, Z+1	; 0x01
     932:	a2 81       	ldd	r26, Z+2	; 0x02
     934:	b3 81       	ldd	r27, Z+3	; 0x03
     936:	89 83       	std	Y+1, r24	; 0x01
     938:	9a 83       	std	Y+2, r25	; 0x02
     93a:	ab 83       	std	Y+3, r26	; 0x03
     93c:	bc 83       	std	Y+4, r27	; 0x04
     93e:	2c 89       	ldd	r18, Y+20	; 0x14
     940:	3d 89       	ldd	r19, Y+21	; 0x15
     942:	4e 89       	ldd	r20, Y+22	; 0x16
     944:	5f 89       	ldd	r21, Y+23	; 0x17
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	9a 81       	ldd	r25, Y+2	; 0x02
     94a:	ab 81       	ldd	r26, Y+3	; 0x03
     94c:	bc 81       	ldd	r27, Y+4	; 0x04
     94e:	09 8d       	ldd	r16, Y+25	; 0x19
     950:	bc 01       	movw	r22, r24
     952:	cd 01       	movw	r24, r26
     954:	9c d1       	rcall	.+824    	; 0xc8e <prvTestWaitCondition>
     956:	88 23       	and	r24, r24
     958:	e9 f0       	breq	.+58     	; 0x994 <xEventGroupWaitBits+0x22a>
     95a:	88 8d       	ldd	r24, Y+24	; 0x18
     95c:	88 23       	and	r24, r24
     95e:	d1 f0       	breq	.+52     	; 0x994 <xEventGroupWaitBits+0x22a>
     960:	89 85       	ldd	r24, Y+9	; 0x09
     962:	9a 85       	ldd	r25, Y+10	; 0x0a
     964:	fc 01       	movw	r30, r24
     966:	20 81       	ld	r18, Z
     968:	31 81       	ldd	r19, Z+1	; 0x01
     96a:	42 81       	ldd	r20, Z+2	; 0x02
     96c:	53 81       	ldd	r21, Z+3	; 0x03
     96e:	8c 89       	ldd	r24, Y+20	; 0x14
     970:	9d 89       	ldd	r25, Y+21	; 0x15
     972:	ae 89       	ldd	r26, Y+22	; 0x16
     974:	bf 89       	ldd	r27, Y+23	; 0x17
     976:	80 95       	com	r24
     978:	90 95       	com	r25
     97a:	a0 95       	com	r26
     97c:	b0 95       	com	r27
     97e:	82 23       	and	r24, r18
     980:	93 23       	and	r25, r19
     982:	a4 23       	and	r26, r20
     984:	b5 23       	and	r27, r21
     986:	29 85       	ldd	r18, Y+9	; 0x09
     988:	3a 85       	ldd	r19, Y+10	; 0x0a
     98a:	f9 01       	movw	r30, r18
     98c:	80 83       	st	Z, r24
     98e:	91 83       	std	Z+1, r25	; 0x01
     990:	a2 83       	std	Z+2, r26	; 0x02
     992:	b3 83       	std	Z+3, r27	; 0x03
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	8b 87       	std	Y+11, r24	; 0x0b
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	9a 81       	ldd	r25, Y+2	; 0x02
     9a0:	ab 81       	ldd	r26, Y+3	; 0x03
     9a2:	bc 81       	ldd	r27, Y+4	; 0x04
     9a4:	bb 27       	eor	r27, r27
     9a6:	89 83       	std	Y+1, r24	; 0x01
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	ab 83       	std	Y+3, r26	; 0x03
     9ac:	bc 83       	std	Y+4, r27	; 0x04
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	9a 81       	ldd	r25, Y+2	; 0x02
     9b2:	ab 81       	ldd	r26, Y+3	; 0x03
     9b4:	bc 81       	ldd	r27, Y+4	; 0x04
     9b6:	bc 01       	movw	r22, r24
     9b8:	cd 01       	movw	r24, r26
     9ba:	6d 96       	adiw	r28, 0x1d	; 29
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	08 95       	ret

000009d8 <xEventGroupClearBits>:
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	2c 97       	sbiw	r28, 0x0c	; 12
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	98 87       	std	Y+8, r25	; 0x08
     9ee:	8f 83       	std	Y+7, r24	; 0x07
     9f0:	49 87       	std	Y+9, r20	; 0x09
     9f2:	5a 87       	std	Y+10, r21	; 0x0a
     9f4:	6b 87       	std	Y+11, r22	; 0x0b
     9f6:	7c 87       	std	Y+12, r23	; 0x0c
     9f8:	8f 81       	ldd	r24, Y+7	; 0x07
     9fa:	98 85       	ldd	r25, Y+8	; 0x08
     9fc:	9a 83       	std	Y+2, r25	; 0x02
     9fe:	89 83       	std	Y+1, r24	; 0x01
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	0f 92       	push	r0
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	9a 81       	ldd	r25, Y+2	; 0x02
     a0a:	fc 01       	movw	r30, r24
     a0c:	80 81       	ld	r24, Z
     a0e:	91 81       	ldd	r25, Z+1	; 0x01
     a10:	a2 81       	ldd	r26, Z+2	; 0x02
     a12:	b3 81       	ldd	r27, Z+3	; 0x03
     a14:	8b 83       	std	Y+3, r24	; 0x03
     a16:	9c 83       	std	Y+4, r25	; 0x04
     a18:	ad 83       	std	Y+5, r26	; 0x05
     a1a:	be 83       	std	Y+6, r27	; 0x06
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	9a 81       	ldd	r25, Y+2	; 0x02
     a20:	fc 01       	movw	r30, r24
     a22:	20 81       	ld	r18, Z
     a24:	31 81       	ldd	r19, Z+1	; 0x01
     a26:	42 81       	ldd	r20, Z+2	; 0x02
     a28:	53 81       	ldd	r21, Z+3	; 0x03
     a2a:	89 85       	ldd	r24, Y+9	; 0x09
     a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a2e:	ab 85       	ldd	r26, Y+11	; 0x0b
     a30:	bc 85       	ldd	r27, Y+12	; 0x0c
     a32:	80 95       	com	r24
     a34:	90 95       	com	r25
     a36:	a0 95       	com	r26
     a38:	b0 95       	com	r27
     a3a:	82 23       	and	r24, r18
     a3c:	93 23       	and	r25, r19
     a3e:	a4 23       	and	r26, r20
     a40:	b5 23       	and	r27, r21
     a42:	29 81       	ldd	r18, Y+1	; 0x01
     a44:	3a 81       	ldd	r19, Y+2	; 0x02
     a46:	f9 01       	movw	r30, r18
     a48:	80 83       	st	Z, r24
     a4a:	91 83       	std	Z+1, r25	; 0x01
     a4c:	a2 83       	std	Z+2, r26	; 0x02
     a4e:	b3 83       	std	Z+3, r27	; 0x03
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	9c 81       	ldd	r25, Y+4	; 0x04
     a58:	ad 81       	ldd	r26, Y+5	; 0x05
     a5a:	be 81       	ldd	r27, Y+6	; 0x06
     a5c:	bc 01       	movw	r22, r24
     a5e:	cd 01       	movw	r24, r26
     a60:	2c 96       	adiw	r28, 0x0c	; 12
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <xEventGroupSetBits>:
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	6d 97       	sbiw	r28, 0x1d	; 29
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	99 8f       	std	Y+25, r25	; 0x19
     a88:	88 8f       	std	Y+24, r24	; 0x18
     a8a:	4a 8f       	std	Y+26, r20	; 0x1a
     a8c:	5b 8f       	std	Y+27, r21	; 0x1b
     a8e:	6c 8f       	std	Y+28, r22	; 0x1c
     a90:	7d 8f       	std	Y+29, r23	; 0x1d
     a92:	1b 82       	std	Y+3, r1	; 0x03
     a94:	1c 82       	std	Y+4, r1	; 0x04
     a96:	1d 82       	std	Y+5, r1	; 0x05
     a98:	1e 82       	std	Y+6, r1	; 0x06
     a9a:	88 8d       	ldd	r24, Y+24	; 0x18
     a9c:	99 8d       	ldd	r25, Y+25	; 0x19
     a9e:	99 87       	std	Y+9, r25	; 0x09
     aa0:	88 87       	std	Y+8, r24	; 0x08
     aa2:	1f 82       	std	Y+7, r1	; 0x07
     aa4:	88 85       	ldd	r24, Y+8	; 0x08
     aa6:	99 85       	ldd	r25, Y+9	; 0x09
     aa8:	04 96       	adiw	r24, 0x04	; 4
     aaa:	9b 87       	std	Y+11, r25	; 0x0b
     aac:	8a 87       	std	Y+10, r24	; 0x0a
     aae:	8a 85       	ldd	r24, Y+10	; 0x0a
     ab0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ab2:	03 96       	adiw	r24, 0x03	; 3
     ab4:	9d 87       	std	Y+13, r25	; 0x0d
     ab6:	8c 87       	std	Y+12, r24	; 0x0c
     ab8:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <vTaskSuspendAll>
     abc:	8a 85       	ldd	r24, Y+10	; 0x0a
     abe:	9b 85       	ldd	r25, Y+11	; 0x0b
     ac0:	fc 01       	movw	r30, r24
     ac2:	87 81       	ldd	r24, Z+7	; 0x07
     ac4:	90 85       	ldd	r25, Z+8	; 0x08
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	88 85       	ldd	r24, Y+8	; 0x08
     acc:	99 85       	ldd	r25, Y+9	; 0x09
     ace:	fc 01       	movw	r30, r24
     ad0:	20 81       	ld	r18, Z
     ad2:	31 81       	ldd	r19, Z+1	; 0x01
     ad4:	42 81       	ldd	r20, Z+2	; 0x02
     ad6:	53 81       	ldd	r21, Z+3	; 0x03
     ad8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ada:	9b 8d       	ldd	r25, Y+27	; 0x1b
     adc:	ac 8d       	ldd	r26, Y+28	; 0x1c
     ade:	bd 8d       	ldd	r27, Y+29	; 0x1d
     ae0:	82 2b       	or	r24, r18
     ae2:	93 2b       	or	r25, r19
     ae4:	a4 2b       	or	r26, r20
     ae6:	b5 2b       	or	r27, r21
     ae8:	28 85       	ldd	r18, Y+8	; 0x08
     aea:	39 85       	ldd	r19, Y+9	; 0x09
     aec:	f9 01       	movw	r30, r18
     aee:	80 83       	st	Z, r24
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	a2 83       	std	Z+2, r26	; 0x02
     af4:	b3 83       	std	Z+3, r27	; 0x03
     af6:	95 c0       	rjmp	.+298    	; 0xc22 <xEventGroupSetBits+0x1b0>
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	fc 01       	movw	r30, r24
     afe:	84 81       	ldd	r24, Z+4	; 0x04
     b00:	95 81       	ldd	r25, Z+5	; 0x05
     b02:	9f 87       	std	Y+15, r25	; 0x0f
     b04:	8e 87       	std	Y+14, r24	; 0x0e
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
     b0a:	fc 01       	movw	r30, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	a2 81       	ldd	r26, Z+2	; 0x02
     b12:	b3 81       	ldd	r27, Z+3	; 0x03
     b14:	88 8b       	std	Y+16, r24	; 0x10
     b16:	99 8b       	std	Y+17, r25	; 0x11
     b18:	aa 8b       	std	Y+18, r26	; 0x12
     b1a:	bb 8b       	std	Y+19, r27	; 0x13
     b1c:	1f 82       	std	Y+7, r1	; 0x07
     b1e:	88 89       	ldd	r24, Y+16	; 0x10
     b20:	99 89       	ldd	r25, Y+17	; 0x11
     b22:	aa 89       	ldd	r26, Y+18	; 0x12
     b24:	bb 89       	ldd	r27, Y+19	; 0x13
     b26:	88 27       	eor	r24, r24
     b28:	99 27       	eor	r25, r25
     b2a:	aa 27       	eor	r26, r26
     b2c:	8c 8b       	std	Y+20, r24	; 0x14
     b2e:	9d 8b       	std	Y+21, r25	; 0x15
     b30:	ae 8b       	std	Y+22, r26	; 0x16
     b32:	bf 8b       	std	Y+23, r27	; 0x17
     b34:	88 89       	ldd	r24, Y+16	; 0x10
     b36:	99 89       	ldd	r25, Y+17	; 0x11
     b38:	aa 89       	ldd	r26, Y+18	; 0x12
     b3a:	bb 89       	ldd	r27, Y+19	; 0x13
     b3c:	bb 27       	eor	r27, r27
     b3e:	88 8b       	std	Y+16, r24	; 0x10
     b40:	99 8b       	std	Y+17, r25	; 0x11
     b42:	aa 8b       	std	Y+18, r26	; 0x12
     b44:	bb 8b       	std	Y+19, r27	; 0x13
     b46:	8c 89       	ldd	r24, Y+20	; 0x14
     b48:	9d 89       	ldd	r25, Y+21	; 0x15
     b4a:	ae 89       	ldd	r26, Y+22	; 0x16
     b4c:	bf 89       	ldd	r27, Y+23	; 0x17
     b4e:	88 27       	eor	r24, r24
     b50:	99 27       	eor	r25, r25
     b52:	aa 27       	eor	r26, r26
     b54:	b4 70       	andi	r27, 0x04	; 4
     b56:	89 2b       	or	r24, r25
     b58:	8a 2b       	or	r24, r26
     b5a:	8b 2b       	or	r24, r27
     b5c:	b1 f4       	brne	.+44     	; 0xb8a <xEventGroupSetBits+0x118>
     b5e:	88 85       	ldd	r24, Y+8	; 0x08
     b60:	99 85       	ldd	r25, Y+9	; 0x09
     b62:	fc 01       	movw	r30, r24
     b64:	20 81       	ld	r18, Z
     b66:	31 81       	ldd	r19, Z+1	; 0x01
     b68:	42 81       	ldd	r20, Z+2	; 0x02
     b6a:	53 81       	ldd	r21, Z+3	; 0x03
     b6c:	88 89       	ldd	r24, Y+16	; 0x10
     b6e:	99 89       	ldd	r25, Y+17	; 0x11
     b70:	aa 89       	ldd	r26, Y+18	; 0x12
     b72:	bb 89       	ldd	r27, Y+19	; 0x13
     b74:	82 23       	and	r24, r18
     b76:	93 23       	and	r25, r19
     b78:	a4 23       	and	r26, r20
     b7a:	b5 23       	and	r27, r21
     b7c:	89 2b       	or	r24, r25
     b7e:	8a 2b       	or	r24, r26
     b80:	8b 2b       	or	r24, r27
     b82:	e9 f0       	breq	.+58     	; 0xbbe <xEventGroupSetBits+0x14c>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	8f 83       	std	Y+7, r24	; 0x07
     b88:	1a c0       	rjmp	.+52     	; 0xbbe <xEventGroupSetBits+0x14c>
     b8a:	88 85       	ldd	r24, Y+8	; 0x08
     b8c:	99 85       	ldd	r25, Y+9	; 0x09
     b8e:	fc 01       	movw	r30, r24
     b90:	20 81       	ld	r18, Z
     b92:	31 81       	ldd	r19, Z+1	; 0x01
     b94:	42 81       	ldd	r20, Z+2	; 0x02
     b96:	53 81       	ldd	r21, Z+3	; 0x03
     b98:	88 89       	ldd	r24, Y+16	; 0x10
     b9a:	99 89       	ldd	r25, Y+17	; 0x11
     b9c:	aa 89       	ldd	r26, Y+18	; 0x12
     b9e:	bb 89       	ldd	r27, Y+19	; 0x13
     ba0:	28 23       	and	r18, r24
     ba2:	39 23       	and	r19, r25
     ba4:	4a 23       	and	r20, r26
     ba6:	5b 23       	and	r21, r27
     ba8:	88 89       	ldd	r24, Y+16	; 0x10
     baa:	99 89       	ldd	r25, Y+17	; 0x11
     bac:	aa 89       	ldd	r26, Y+18	; 0x12
     bae:	bb 89       	ldd	r27, Y+19	; 0x13
     bb0:	28 17       	cp	r18, r24
     bb2:	39 07       	cpc	r19, r25
     bb4:	4a 07       	cpc	r20, r26
     bb6:	5b 07       	cpc	r21, r27
     bb8:	11 f4       	brne	.+4      	; 0xbbe <xEventGroupSetBits+0x14c>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	8f 83       	std	Y+7, r24	; 0x07
     bbe:	8f 81       	ldd	r24, Y+7	; 0x07
     bc0:	88 23       	and	r24, r24
     bc2:	59 f1       	breq	.+86     	; 0xc1a <xEventGroupSetBits+0x1a8>
     bc4:	8c 89       	ldd	r24, Y+20	; 0x14
     bc6:	9d 89       	ldd	r25, Y+21	; 0x15
     bc8:	ae 89       	ldd	r26, Y+22	; 0x16
     bca:	bf 89       	ldd	r27, Y+23	; 0x17
     bcc:	88 27       	eor	r24, r24
     bce:	99 27       	eor	r25, r25
     bd0:	aa 27       	eor	r26, r26
     bd2:	b1 70       	andi	r27, 0x01	; 1
     bd4:	89 2b       	or	r24, r25
     bd6:	8a 2b       	or	r24, r26
     bd8:	8b 2b       	or	r24, r27
     bda:	81 f0       	breq	.+32     	; 0xbfc <xEventGroupSetBits+0x18a>
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	4d 81       	ldd	r20, Y+5	; 0x05
     be2:	5e 81       	ldd	r21, Y+6	; 0x06
     be4:	88 89       	ldd	r24, Y+16	; 0x10
     be6:	99 89       	ldd	r25, Y+17	; 0x11
     be8:	aa 89       	ldd	r26, Y+18	; 0x12
     bea:	bb 89       	ldd	r27, Y+19	; 0x13
     bec:	82 2b       	or	r24, r18
     bee:	93 2b       	or	r25, r19
     bf0:	a4 2b       	or	r26, r20
     bf2:	b5 2b       	or	r27, r21
     bf4:	8b 83       	std	Y+3, r24	; 0x03
     bf6:	9c 83       	std	Y+4, r25	; 0x04
     bf8:	ad 83       	std	Y+5, r26	; 0x05
     bfa:	be 83       	std	Y+6, r27	; 0x06
     bfc:	88 85       	ldd	r24, Y+8	; 0x08
     bfe:	99 85       	ldd	r25, Y+9	; 0x09
     c00:	fc 01       	movw	r30, r24
     c02:	80 81       	ld	r24, Z
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	a2 81       	ldd	r26, Z+2	; 0x02
     c08:	b3 81       	ldd	r27, Z+3	; 0x03
     c0a:	b2 60       	ori	r27, 0x02	; 2
     c0c:	29 81       	ldd	r18, Y+1	; 0x01
     c0e:	3a 81       	ldd	r19, Y+2	; 0x02
     c10:	ac 01       	movw	r20, r24
     c12:	bd 01       	movw	r22, r26
     c14:	c9 01       	movw	r24, r18
     c16:	0e 94 b1 21 	call	0x4362	; 0x4362 <vTaskRemoveFromUnorderedEventList>
     c1a:	8e 85       	ldd	r24, Y+14	; 0x0e
     c1c:	9f 85       	ldd	r25, Y+15	; 0x0f
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01
     c22:	29 81       	ldd	r18, Y+1	; 0x01
     c24:	3a 81       	ldd	r19, Y+2	; 0x02
     c26:	8c 85       	ldd	r24, Y+12	; 0x0c
     c28:	9d 85       	ldd	r25, Y+13	; 0x0d
     c2a:	28 17       	cp	r18, r24
     c2c:	39 07       	cpc	r19, r25
     c2e:	09 f0       	breq	.+2      	; 0xc32 <xEventGroupSetBits+0x1c0>
     c30:	63 cf       	rjmp	.-314    	; 0xaf8 <xEventGroupSetBits+0x86>
     c32:	88 85       	ldd	r24, Y+8	; 0x08
     c34:	99 85       	ldd	r25, Y+9	; 0x09
     c36:	fc 01       	movw	r30, r24
     c38:	20 81       	ld	r18, Z
     c3a:	31 81       	ldd	r19, Z+1	; 0x01
     c3c:	42 81       	ldd	r20, Z+2	; 0x02
     c3e:	53 81       	ldd	r21, Z+3	; 0x03
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	ad 81       	ldd	r26, Y+5	; 0x05
     c46:	be 81       	ldd	r27, Y+6	; 0x06
     c48:	80 95       	com	r24
     c4a:	90 95       	com	r25
     c4c:	a0 95       	com	r26
     c4e:	b0 95       	com	r27
     c50:	82 23       	and	r24, r18
     c52:	93 23       	and	r25, r19
     c54:	a4 23       	and	r26, r20
     c56:	b5 23       	and	r27, r21
     c58:	28 85       	ldd	r18, Y+8	; 0x08
     c5a:	39 85       	ldd	r19, Y+9	; 0x09
     c5c:	f9 01       	movw	r30, r18
     c5e:	80 83       	st	Z, r24
     c60:	91 83       	std	Z+1, r25	; 0x01
     c62:	a2 83       	std	Z+2, r26	; 0x02
     c64:	b3 83       	std	Z+3, r27	; 0x03
     c66:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
     c6a:	88 85       	ldd	r24, Y+8	; 0x08
     c6c:	99 85       	ldd	r25, Y+9	; 0x09
     c6e:	fc 01       	movw	r30, r24
     c70:	80 81       	ld	r24, Z
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	a2 81       	ldd	r26, Z+2	; 0x02
     c76:	b3 81       	ldd	r27, Z+3	; 0x03
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	6d 96       	adiw	r28, 0x1d	; 29
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
     c8e:	0f 93       	push	r16
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
     c98:	2a 97       	sbiw	r28, 0x0a	; 10
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	7b 83       	std	Y+3, r23	; 0x03
     ca8:	8c 83       	std	Y+4, r24	; 0x04
     caa:	9d 83       	std	Y+5, r25	; 0x05
     cac:	2e 83       	std	Y+6, r18	; 0x06
     cae:	3f 83       	std	Y+7, r19	; 0x07
     cb0:	48 87       	std	Y+8, r20	; 0x08
     cb2:	59 87       	std	Y+9, r21	; 0x09
     cb4:	0a 87       	std	Y+10, r16	; 0x0a
    BaseType_t xWaitConditionMet = pdFALSE;
     cb6:	19 82       	std	Y+1, r1	; 0x01

    if( xWaitForAllBits == pdFALSE )
     cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
     cba:	88 23       	and	r24, r24
     cbc:	99 f4       	brne	.+38     	; 0xce4 <prvTestWaitCondition+0x56>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     cbe:	2a 81       	ldd	r18, Y+2	; 0x02
     cc0:	3b 81       	ldd	r19, Y+3	; 0x03
     cc2:	4c 81       	ldd	r20, Y+4	; 0x04
     cc4:	5d 81       	ldd	r21, Y+5	; 0x05
     cc6:	8e 81       	ldd	r24, Y+6	; 0x06
     cc8:	9f 81       	ldd	r25, Y+7	; 0x07
     cca:	a8 85       	ldd	r26, Y+8	; 0x08
     ccc:	b9 85       	ldd	r27, Y+9	; 0x09
     cce:	82 23       	and	r24, r18
     cd0:	93 23       	and	r25, r19
     cd2:	a4 23       	and	r26, r20
     cd4:	b5 23       	and	r27, r21
     cd6:	89 2b       	or	r24, r25
     cd8:	8a 2b       	or	r24, r26
     cda:	8b 2b       	or	r24, r27
     cdc:	d1 f0       	breq	.+52     	; 0xd12 <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	89 83       	std	Y+1, r24	; 0x01
     ce2:	17 c0       	rjmp	.+46     	; 0xd12 <prvTestWaitCondition+0x84>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     ce4:	2a 81       	ldd	r18, Y+2	; 0x02
     ce6:	3b 81       	ldd	r19, Y+3	; 0x03
     ce8:	4c 81       	ldd	r20, Y+4	; 0x04
     cea:	5d 81       	ldd	r21, Y+5	; 0x05
     cec:	8e 81       	ldd	r24, Y+6	; 0x06
     cee:	9f 81       	ldd	r25, Y+7	; 0x07
     cf0:	a8 85       	ldd	r26, Y+8	; 0x08
     cf2:	b9 85       	ldd	r27, Y+9	; 0x09
     cf4:	28 23       	and	r18, r24
     cf6:	39 23       	and	r19, r25
     cf8:	4a 23       	and	r20, r26
     cfa:	5b 23       	and	r21, r27
     cfc:	8e 81       	ldd	r24, Y+6	; 0x06
     cfe:	9f 81       	ldd	r25, Y+7	; 0x07
     d00:	a8 85       	ldd	r26, Y+8	; 0x08
     d02:	b9 85       	ldd	r27, Y+9	; 0x09
     d04:	28 17       	cp	r18, r24
     d06:	39 07       	cpc	r19, r25
     d08:	4a 07       	cpc	r20, r26
     d0a:	5b 07       	cpc	r21, r27
     d0c:	11 f4       	brne	.+4      	; 0xd12 <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	89 83       	std	Y+1, r24	; 0x01
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
     d12:	89 81       	ldd	r24, Y+1	; 0x01
}
     d14:	2a 96       	adiw	r28, 0x0a	; 10
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	0f 91       	pop	r16
     d26:	08 95       	ret

00000d28 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* This just exists to keep the linker quiet. */
}
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	2a 97       	sbiw	r28, 0x0a	; 10
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	9a 87       	std	Y+10, r25	; 0x0a
     d3e:	89 87       	std	Y+9, r24	; 0x09
     d40:	1e 82       	std	Y+6, r1	; 0x06
     d42:	1d 82       	std	Y+5, r1	; 0x05
     d44:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <vTaskSuspendAll>
     d48:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <pxEnd>
     d4c:	90 91 e7 11 	lds	r25, 0x11E7	; 0x8011e7 <pxEnd+0x1>
     d50:	89 2b       	or	r24, r25
     d52:	09 f4       	brne	.+2      	; 0xd56 <pvPortMalloc+0x2e>
     d54:	6e d1       	rcall	.+732    	; 0x1032 <prvHeapInit>
     d56:	20 91 f0 11 	lds	r18, 0x11F0	; 0x8011f0 <xBlockAllocatedBit>
     d5a:	30 91 f1 11 	lds	r19, 0x11F1	; 0x8011f1 <xBlockAllocatedBit+0x1>
     d5e:	89 85       	ldd	r24, Y+9	; 0x09
     d60:	9a 85       	ldd	r25, Y+10	; 0x0a
     d62:	82 23       	and	r24, r18
     d64:	93 23       	and	r25, r19
     d66:	89 2b       	or	r24, r25
     d68:	09 f0       	breq	.+2      	; 0xd6c <pvPortMalloc+0x44>
     d6a:	e1 c0       	rjmp	.+450    	; 0xf2e <pvPortMalloc+0x206>
     d6c:	89 85       	ldd	r24, Y+9	; 0x09
     d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d70:	89 2b       	or	r24, r25
     d72:	a1 f0       	breq	.+40     	; 0xd9c <pvPortMalloc+0x74>
     d74:	24 e0       	ldi	r18, 0x04	; 4
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7c:	28 0f       	add	r18, r24
     d7e:	39 1f       	adc	r19, r25
     d80:	89 85       	ldd	r24, Y+9	; 0x09
     d82:	9a 85       	ldd	r25, Y+10	; 0x0a
     d84:	82 17       	cp	r24, r18
     d86:	93 07       	cpc	r25, r19
     d88:	48 f4       	brcc	.+18     	; 0xd9c <pvPortMalloc+0x74>
     d8a:	84 e0       	ldi	r24, 0x04	; 4
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	29 85       	ldd	r18, Y+9	; 0x09
     d90:	3a 85       	ldd	r19, Y+10	; 0x0a
     d92:	82 0f       	add	r24, r18
     d94:	93 1f       	adc	r25, r19
     d96:	9a 87       	std	Y+10, r25	; 0x0a
     d98:	89 87       	std	Y+9, r24	; 0x09
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <pvPortMalloc+0x78>
     d9c:	1a 86       	std	Y+10, r1	; 0x0a
     d9e:	19 86       	std	Y+9, r1	; 0x09
     da0:	89 85       	ldd	r24, Y+9	; 0x09
     da2:	9a 85       	ldd	r25, Y+10	; 0x0a
     da4:	89 2b       	or	r24, r25
     da6:	09 f4       	brne	.+2      	; 0xdaa <pvPortMalloc+0x82>
     da8:	c2 c0       	rjmp	.+388    	; 0xf2e <pvPortMalloc+0x206>
     daa:	80 91 e8 11 	lds	r24, 0x11E8	; 0x8011e8 <xFreeBytesRemaining>
     dae:	90 91 e9 11 	lds	r25, 0x11E9	; 0x8011e9 <xFreeBytesRemaining+0x1>
     db2:	29 85       	ldd	r18, Y+9	; 0x09
     db4:	3a 85       	ldd	r19, Y+10	; 0x0a
     db6:	82 17       	cp	r24, r18
     db8:	93 07       	cpc	r25, r19
     dba:	08 f4       	brcc	.+2      	; 0xdbe <pvPortMalloc+0x96>
     dbc:	b8 c0       	rjmp	.+368    	; 0xf2e <pvPortMalloc+0x206>
     dbe:	82 ee       	ldi	r24, 0xE2	; 226
     dc0:	91 e1       	ldi	r25, 0x11	; 17
     dc2:	9c 83       	std	Y+4, r25	; 0x04
     dc4:	8b 83       	std	Y+3, r24	; 0x03
     dc6:	80 91 e2 11 	lds	r24, 0x11E2	; 0x8011e2 <xStart>
     dca:	90 91 e3 11 	lds	r25, 0x11E3	; 0x8011e3 <xStart+0x1>
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
     dd2:	0b c0       	rjmp	.+22     	; 0xdea <pvPortMalloc+0xc2>
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	9c 83       	std	Y+4, r25	; 0x04
     dda:	8b 83       	std	Y+3, r24	; 0x03
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	fc 01       	movw	r30, r24
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	9a 83       	std	Y+2, r25	; 0x02
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	fc 01       	movw	r30, r24
     df0:	22 81       	ldd	r18, Z+2	; 0x02
     df2:	33 81       	ldd	r19, Z+3	; 0x03
     df4:	89 85       	ldd	r24, Y+9	; 0x09
     df6:	9a 85       	ldd	r25, Y+10	; 0x0a
     df8:	28 17       	cp	r18, r24
     dfa:	39 07       	cpc	r19, r25
     dfc:	38 f4       	brcc	.+14     	; 0xe0c <pvPortMalloc+0xe4>
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	fc 01       	movw	r30, r24
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	89 2b       	or	r24, r25
     e0a:	21 f7       	brne	.-56     	; 0xdd4 <pvPortMalloc+0xac>
     e0c:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <pxEnd>
     e10:	90 91 e7 11 	lds	r25, 0x11E7	; 0x8011e7 <pxEnd+0x1>
     e14:	29 81       	ldd	r18, Y+1	; 0x01
     e16:	3a 81       	ldd	r19, Y+2	; 0x02
     e18:	28 17       	cp	r18, r24
     e1a:	39 07       	cpc	r19, r25
     e1c:	09 f4       	brne	.+2      	; 0xe20 <pvPortMalloc+0xf8>
     e1e:	87 c0       	rjmp	.+270    	; 0xf2e <pvPortMalloc+0x206>
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	fc 01       	movw	r30, r24
     e26:	20 81       	ld	r18, Z
     e28:	31 81       	ldd	r19, Z+1	; 0x01
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	82 0f       	add	r24, r18
     e30:	93 1f       	adc	r25, r19
     e32:	9e 83       	std	Y+6, r25	; 0x06
     e34:	8d 83       	std	Y+5, r24	; 0x05
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 81       	ld	r18, Z
     e3e:	31 81       	ldd	r19, Z+1	; 0x01
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	fc 01       	movw	r30, r24
     e46:	31 83       	std	Z+1, r19	; 0x01
     e48:	20 83       	st	Z, r18
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	fc 01       	movw	r30, r24
     e50:	22 81       	ldd	r18, Z+2	; 0x02
     e52:	33 81       	ldd	r19, Z+3	; 0x03
     e54:	89 85       	ldd	r24, Y+9	; 0x09
     e56:	9a 85       	ldd	r25, Y+10	; 0x0a
     e58:	28 1b       	sub	r18, r24
     e5a:	39 0b       	sbc	r19, r25
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	82 17       	cp	r24, r18
     e66:	93 07       	cpc	r25, r19
     e68:	00 f5       	brcc	.+64     	; 0xeaa <pvPortMalloc+0x182>
     e6a:	29 81       	ldd	r18, Y+1	; 0x01
     e6c:	3a 81       	ldd	r19, Y+2	; 0x02
     e6e:	89 85       	ldd	r24, Y+9	; 0x09
     e70:	9a 85       	ldd	r25, Y+10	; 0x0a
     e72:	82 0f       	add	r24, r18
     e74:	93 1f       	adc	r25, r19
     e76:	98 87       	std	Y+8, r25	; 0x08
     e78:	8f 83       	std	Y+7, r24	; 0x07
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	fc 01       	movw	r30, r24
     e80:	22 81       	ldd	r18, Z+2	; 0x02
     e82:	33 81       	ldd	r19, Z+3	; 0x03
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	28 1b       	sub	r18, r24
     e8a:	39 0b       	sbc	r19, r25
     e8c:	8f 81       	ldd	r24, Y+7	; 0x07
     e8e:	98 85       	ldd	r25, Y+8	; 0x08
     e90:	fc 01       	movw	r30, r24
     e92:	33 83       	std	Z+3, r19	; 0x03
     e94:	22 83       	std	Z+2, r18	; 0x02
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	29 85       	ldd	r18, Y+9	; 0x09
     e9c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e9e:	fc 01       	movw	r30, r24
     ea0:	33 83       	std	Z+3, r19	; 0x03
     ea2:	22 83       	std	Z+2, r18	; 0x02
     ea4:	8f 81       	ldd	r24, Y+7	; 0x07
     ea6:	98 85       	ldd	r25, Y+8	; 0x08
     ea8:	44 d1       	rcall	.+648    	; 0x1132 <prvInsertBlockIntoFreeList>
     eaa:	20 91 e8 11 	lds	r18, 0x11E8	; 0x8011e8 <xFreeBytesRemaining>
     eae:	30 91 e9 11 	lds	r19, 0x11E9	; 0x8011e9 <xFreeBytesRemaining+0x1>
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	fc 01       	movw	r30, r24
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	a9 01       	movw	r20, r18
     ebe:	48 1b       	sub	r20, r24
     ec0:	59 0b       	sbc	r21, r25
     ec2:	ca 01       	movw	r24, r20
     ec4:	90 93 e9 11 	sts	0x11E9, r25	; 0x8011e9 <xFreeBytesRemaining+0x1>
     ec8:	80 93 e8 11 	sts	0x11E8, r24	; 0x8011e8 <xFreeBytesRemaining>
     ecc:	20 91 e8 11 	lds	r18, 0x11E8	; 0x8011e8 <xFreeBytesRemaining>
     ed0:	30 91 e9 11 	lds	r19, 0x11E9	; 0x8011e9 <xFreeBytesRemaining+0x1>
     ed4:	80 91 ea 11 	lds	r24, 0x11EA	; 0x8011ea <xMinimumEverFreeBytesRemaining>
     ed8:	90 91 eb 11 	lds	r25, 0x11EB	; 0x8011eb <xMinimumEverFreeBytesRemaining+0x1>
     edc:	28 17       	cp	r18, r24
     ede:	39 07       	cpc	r19, r25
     ee0:	40 f4       	brcc	.+16     	; 0xef2 <pvPortMalloc+0x1ca>
     ee2:	80 91 e8 11 	lds	r24, 0x11E8	; 0x8011e8 <xFreeBytesRemaining>
     ee6:	90 91 e9 11 	lds	r25, 0x11E9	; 0x8011e9 <xFreeBytesRemaining+0x1>
     eea:	90 93 eb 11 	sts	0x11EB, r25	; 0x8011eb <xMinimumEverFreeBytesRemaining+0x1>
     eee:	80 93 ea 11 	sts	0x11EA, r24	; 0x8011ea <xMinimumEverFreeBytesRemaining>
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	fc 01       	movw	r30, r24
     ef8:	22 81       	ldd	r18, Z+2	; 0x02
     efa:	33 81       	ldd	r19, Z+3	; 0x03
     efc:	80 91 f0 11 	lds	r24, 0x11F0	; 0x8011f0 <xBlockAllocatedBit>
     f00:	90 91 f1 11 	lds	r25, 0x11F1	; 0x8011f1 <xBlockAllocatedBit+0x1>
     f04:	28 2b       	or	r18, r24
     f06:	39 2b       	or	r19, r25
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	fc 01       	movw	r30, r24
     f0e:	33 83       	std	Z+3, r19	; 0x03
     f10:	22 83       	std	Z+2, r18	; 0x02
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	fc 01       	movw	r30, r24
     f18:	11 82       	std	Z+1, r1	; 0x01
     f1a:	10 82       	st	Z, r1
     f1c:	80 91 ec 11 	lds	r24, 0x11EC	; 0x8011ec <xNumberOfSuccessfulAllocations>
     f20:	90 91 ed 11 	lds	r25, 0x11ED	; 0x8011ed <xNumberOfSuccessfulAllocations+0x1>
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	90 93 ed 11 	sts	0x11ED, r25	; 0x8011ed <xNumberOfSuccessfulAllocations+0x1>
     f2a:	80 93 ec 11 	sts	0x11EC, r24	; 0x8011ec <xNumberOfSuccessfulAllocations>
     f2e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	89 2b       	or	r24, r25
     f38:	11 f4       	brne	.+4      	; 0xf3e <pvPortMalloc+0x216>
     f3a:	0e 94 70 33 	call	0x66e0	; 0x66e0 <vApplicationMallocFailedHook>
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	2a 96       	adiw	r28, 0x0a	; 10
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	08 95       	ret

00000f54 <vPortFree>:
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	00 d0       	rcall	.+0      	; 0xf5a <vPortFree+0x6>
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <vPortFree+0x8>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	9e 81       	ldd	r25, Y+6	; 0x06
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	9e 81       	ldd	r25, Y+6	; 0x06
     f70:	89 2b       	or	r24, r25
     f72:	09 f4       	brne	.+2      	; 0xf76 <vPortFree+0x22>
     f74:	54 c0       	rjmp	.+168    	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
     f76:	84 e0       	ldi	r24, 0x04	; 4
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	91 95       	neg	r25
     f7c:	81 95       	neg	r24
     f7e:	91 09       	sbc	r25, r1
     f80:	29 81       	ldd	r18, Y+1	; 0x01
     f82:	3a 81       	ldd	r19, Y+2	; 0x02
     f84:	82 0f       	add	r24, r18
     f86:	93 1f       	adc	r25, r19
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	9c 83       	std	Y+4, r25	; 0x04
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	fc 01       	movw	r30, r24
     f9a:	22 81       	ldd	r18, Z+2	; 0x02
     f9c:	33 81       	ldd	r19, Z+3	; 0x03
     f9e:	80 91 f0 11 	lds	r24, 0x11F0	; 0x8011f0 <xBlockAllocatedBit>
     fa2:	90 91 f1 11 	lds	r25, 0x11F1	; 0x8011f1 <xBlockAllocatedBit+0x1>
     fa6:	82 23       	and	r24, r18
     fa8:	93 23       	and	r25, r19
     faa:	89 2b       	or	r24, r25
     fac:	c1 f1       	breq	.+112    	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	fc 01       	movw	r30, r24
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	89 2b       	or	r24, r25
     fba:	89 f5       	brne	.+98     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	fc 01       	movw	r30, r24
     fc2:	22 81       	ldd	r18, Z+2	; 0x02
     fc4:	33 81       	ldd	r19, Z+3	; 0x03
     fc6:	80 91 f0 11 	lds	r24, 0x11F0	; 0x8011f0 <xBlockAllocatedBit>
     fca:	90 91 f1 11 	lds	r25, 0x11F1	; 0x8011f1 <xBlockAllocatedBit+0x1>
     fce:	80 95       	com	r24
     fd0:	90 95       	com	r25
     fd2:	28 23       	and	r18, r24
     fd4:	39 23       	and	r19, r25
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	fc 01       	movw	r30, r24
     fdc:	33 83       	std	Z+3, r19	; 0x03
     fde:	22 83       	std	Z+2, r18	; 0x02
     fe0:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <vTaskSuspendAll>
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	fc 01       	movw	r30, r24
     fea:	22 81       	ldd	r18, Z+2	; 0x02
     fec:	33 81       	ldd	r19, Z+3	; 0x03
     fee:	80 91 e8 11 	lds	r24, 0x11E8	; 0x8011e8 <xFreeBytesRemaining>
     ff2:	90 91 e9 11 	lds	r25, 0x11E9	; 0x8011e9 <xFreeBytesRemaining+0x1>
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	90 93 e9 11 	sts	0x11E9, r25	; 0x8011e9 <xFreeBytesRemaining+0x1>
     ffe:	80 93 e8 11 	sts	0x11E8, r24	; 0x8011e8 <xFreeBytesRemaining>
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	95 d0       	rcall	.+298    	; 0x1132 <prvInsertBlockIntoFreeList>
    1008:	80 91 ee 11 	lds	r24, 0x11EE	; 0x8011ee <xNumberOfSuccessfulFrees>
    100c:	90 91 ef 11 	lds	r25, 0x11EF	; 0x8011ef <xNumberOfSuccessfulFrees+0x1>
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	90 93 ef 11 	sts	0x11EF, r25	; 0x8011ef <xNumberOfSuccessfulFrees+0x1>
    1016:	80 93 ee 11 	sts	0x11EE, r24	; 0x8011ee <xNumberOfSuccessfulFrees>
    101a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    101e:	00 00       	nop
    1020:	26 96       	adiw	r28, 0x06	; 6
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	28 97       	sbiw	r28, 0x08	; 8
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    1046:	84 ec       	ldi	r24, 0xC4	; 196
    1048:	99 e0       	ldi	r25, 0x09	; 9
    104a:	9a 83       	std	Y+2, r25	; 0x02
    104c:	89 83       	std	Y+1, r24	; 0x01

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
    104e:	8e e1       	ldi	r24, 0x1E	; 30
    1050:	98 e0       	ldi	r25, 0x08	; 8
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	90 93 e3 11 	sts	0x11E3, r25	; 0x8011e3 <xStart+0x1>
    1066:	80 93 e2 11 	sts	0x11E2, r24	; 0x8011e2 <xStart>
    xStart.xBlockSize = ( size_t ) 0;
    106a:	10 92 e5 11 	sts	0x11E5, r1	; 0x8011e5 <xStart+0x3>
    106e:	10 92 e4 11 	sts	0x11E4, r1	; 0x8011e4 <xStart+0x2>

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    1072:	2d 81       	ldd	r18, Y+5	; 0x05
    1074:	3e 81       	ldd	r19, Y+6	; 0x06
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	82 0f       	add	r24, r18
    107c:	93 1f       	adc	r25, r19
    107e:	9c 83       	std	Y+4, r25	; 0x04
    1080:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress -= xHeapStructSize;
    1082:	84 e0       	ldi	r24, 0x04	; 4
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	2b 81       	ldd	r18, Y+3	; 0x03
    1088:	3c 81       	ldd	r19, Y+4	; 0x04
    108a:	a9 01       	movw	r20, r18
    108c:	48 1b       	sub	r20, r24
    108e:	59 0b       	sbc	r21, r25
    1090:	ca 01       	movw	r24, r20
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	90 93 e7 11 	sts	0x11E7, r25	; 0x8011e7 <pxEnd+0x1>
    109e:	80 93 e6 11 	sts	0x11E6, r24	; 0x8011e6 <pxEnd>
    pxEnd->xBlockSize = 0;
    10a2:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <pxEnd>
    10a6:	90 91 e7 11 	lds	r25, 0x11E7	; 0x8011e7 <pxEnd+0x1>
    10aa:	fc 01       	movw	r30, r24
    10ac:	13 82       	std	Z+3, r1	; 0x03
    10ae:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    10b0:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <pxEnd>
    10b4:	90 91 e7 11 	lds	r25, 0x11E7	; 0x8011e7 <pxEnd+0x1>
    10b8:	fc 01       	movw	r30, r24
    10ba:	11 82       	std	Z+1, r1	; 0x01
    10bc:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    10be:	8d 81       	ldd	r24, Y+5	; 0x05
    10c0:	9e 81       	ldd	r25, Y+6	; 0x06
    10c2:	98 87       	std	Y+8, r25	; 0x08
    10c4:	8f 83       	std	Y+7, r24	; 0x07
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	98 85       	ldd	r25, Y+8	; 0x08
    10ca:	2b 81       	ldd	r18, Y+3	; 0x03
    10cc:	3c 81       	ldd	r19, Y+4	; 0x04
    10ce:	28 1b       	sub	r18, r24
    10d0:	39 0b       	sbc	r19, r25
    10d2:	8f 81       	ldd	r24, Y+7	; 0x07
    10d4:	98 85       	ldd	r25, Y+8	; 0x08
    10d6:	fc 01       	movw	r30, r24
    10d8:	33 83       	std	Z+3, r19	; 0x03
    10da:	22 83       	std	Z+2, r18	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    10dc:	20 91 e6 11 	lds	r18, 0x11E6	; 0x8011e6 <pxEnd>
    10e0:	30 91 e7 11 	lds	r19, 0x11E7	; 0x8011e7 <pxEnd+0x1>
    10e4:	8f 81       	ldd	r24, Y+7	; 0x07
    10e6:	98 85       	ldd	r25, Y+8	; 0x08
    10e8:	fc 01       	movw	r30, r24
    10ea:	31 83       	std	Z+1, r19	; 0x01
    10ec:	20 83       	st	Z, r18

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    10ee:	8f 81       	ldd	r24, Y+7	; 0x07
    10f0:	98 85       	ldd	r25, Y+8	; 0x08
    10f2:	fc 01       	movw	r30, r24
    10f4:	82 81       	ldd	r24, Z+2	; 0x02
    10f6:	93 81       	ldd	r25, Z+3	; 0x03
    10f8:	90 93 eb 11 	sts	0x11EB, r25	; 0x8011eb <xMinimumEverFreeBytesRemaining+0x1>
    10fc:	80 93 ea 11 	sts	0x11EA, r24	; 0x8011ea <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1100:	8f 81       	ldd	r24, Y+7	; 0x07
    1102:	98 85       	ldd	r25, Y+8	; 0x08
    1104:	fc 01       	movw	r30, r24
    1106:	82 81       	ldd	r24, Z+2	; 0x02
    1108:	93 81       	ldd	r25, Z+3	; 0x03
    110a:	90 93 e9 11 	sts	0x11E9, r25	; 0x8011e9 <xFreeBytesRemaining+0x1>
    110e:	80 93 e8 11 	sts	0x11E8, r24	; 0x8011e8 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e8       	ldi	r25, 0x80	; 128
    1116:	90 93 f1 11 	sts	0x11F1, r25	; 0x8011f1 <xBlockAllocatedBit+0x1>
    111a:	80 93 f0 11 	sts	0x11F0, r24	; 0x8011f0 <xBlockAllocatedBit>
}
    111e:	00 00       	nop
    1120:	28 96       	adiw	r28, 0x08	; 8
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	08 95       	ret

00001132 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	00 d0       	rcall	.+0      	; 0x1138 <prvInsertBlockIntoFreeList+0x6>
    1138:	00 d0       	rcall	.+0      	; 0x113a <prvInsertBlockIntoFreeList+0x8>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1142:	82 ee       	ldi	r24, 0xE2	; 226
    1144:	91 e1       	ldi	r25, 0x11	; 17
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	07 c0       	rjmp	.+14     	; 0x115a <prvInsertBlockIntoFreeList+0x28>
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	fc 01       	movw	r30, r24
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
    1156:	9a 83       	std	Y+2, r25	; 0x02
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	fc 01       	movw	r30, r24
    1160:	20 81       	ld	r18, Z
    1162:	31 81       	ldd	r19, Z+1	; 0x01
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	28 17       	cp	r18, r24
    116a:	39 07       	cpc	r19, r25
    116c:	78 f3       	brcs	.-34     	; 0x114c <prvInsertBlockIntoFreeList+0x1a>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	9c 83       	std	Y+4, r25	; 0x04
    1174:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	fc 01       	movw	r30, r24
    117c:	82 81       	ldd	r24, Z+2	; 0x02
    117e:	93 81       	ldd	r25, Z+3	; 0x03
    1180:	2b 81       	ldd	r18, Y+3	; 0x03
    1182:	3c 81       	ldd	r19, Y+4	; 0x04
    1184:	28 0f       	add	r18, r24
    1186:	39 1f       	adc	r19, r25
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	28 17       	cp	r18, r24
    118e:	39 07       	cpc	r19, r25
    1190:	a9 f4       	brne	.+42     	; 0x11bc <prvInsertBlockIntoFreeList+0x8a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	fc 01       	movw	r30, r24
    1198:	22 81       	ldd	r18, Z+2	; 0x02
    119a:	33 81       	ldd	r19, Z+3	; 0x03
    119c:	8d 81       	ldd	r24, Y+5	; 0x05
    119e:	9e 81       	ldd	r25, Y+6	; 0x06
    11a0:	fc 01       	movw	r30, r24
    11a2:	82 81       	ldd	r24, Z+2	; 0x02
    11a4:	93 81       	ldd	r25, Z+3	; 0x03
    11a6:	28 0f       	add	r18, r24
    11a8:	39 1f       	adc	r19, r25
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	fc 01       	movw	r30, r24
    11b0:	33 83       	std	Z+3, r19	; 0x03
    11b2:	22 83       	std	Z+2, r18	; 0x02
        pxBlockToInsert = pxIterator;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	9a 81       	ldd	r25, Y+2	; 0x02
    11b8:	9e 83       	std	Y+6, r25	; 0x06
    11ba:	8d 83       	std	Y+5, r24	; 0x05
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
    11bc:	8d 81       	ldd	r24, Y+5	; 0x05
    11be:	9e 81       	ldd	r25, Y+6	; 0x06
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	fc 01       	movw	r30, r24
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	93 81       	ldd	r25, Z+3	; 0x03
    11ce:	2b 81       	ldd	r18, Y+3	; 0x03
    11d0:	3c 81       	ldd	r19, Y+4	; 0x04
    11d2:	28 0f       	add	r18, r24
    11d4:	39 1f       	adc	r19, r25
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	9a 81       	ldd	r25, Y+2	; 0x02
    11da:	fc 01       	movw	r30, r24
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	28 17       	cp	r18, r24
    11e2:	39 07       	cpc	r19, r25
    11e4:	c1 f5       	brne	.+112    	; 0x1256 <prvInsertBlockIntoFreeList+0x124>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	fc 01       	movw	r30, r24
    11ec:	20 81       	ld	r18, Z
    11ee:	31 81       	ldd	r19, Z+1	; 0x01
    11f0:	80 91 e6 11 	lds	r24, 0x11E6	; 0x8011e6 <pxEnd>
    11f4:	90 91 e7 11 	lds	r25, 0x11E7	; 0x8011e7 <pxEnd+0x1>
    11f8:	28 17       	cp	r18, r24
    11fa:	39 07       	cpc	r19, r25
    11fc:	11 f1       	breq	.+68     	; 0x1242 <prvInsertBlockIntoFreeList+0x110>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	9e 81       	ldd	r25, Y+6	; 0x06
    1202:	fc 01       	movw	r30, r24
    1204:	22 81       	ldd	r18, Z+2	; 0x02
    1206:	33 81       	ldd	r19, Z+3	; 0x03
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	fc 01       	movw	r30, r24
    120e:	80 81       	ld	r24, Z
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	fc 01       	movw	r30, r24
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	28 0f       	add	r18, r24
    121a:	39 1f       	adc	r19, r25
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	9e 81       	ldd	r25, Y+6	; 0x06
    1220:	fc 01       	movw	r30, r24
    1222:	33 83       	std	Z+3, r19	; 0x03
    1224:	22 83       	std	Z+2, r18	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	fc 01       	movw	r30, r24
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	fc 01       	movw	r30, r24
    1232:	20 81       	ld	r18, Z
    1234:	31 81       	ldd	r19, Z+1	; 0x01
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	fc 01       	movw	r30, r24
    123c:	31 83       	std	Z+1, r19	; 0x01
    123e:	20 83       	st	Z, r18
    1240:	14 c0       	rjmp	.+40     	; 0x126a <prvInsertBlockIntoFreeList+0x138>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1242:	20 91 e6 11 	lds	r18, 0x11E6	; 0x8011e6 <pxEnd>
    1246:	30 91 e7 11 	lds	r19, 0x11E7	; 0x8011e7 <pxEnd+0x1>
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	fc 01       	movw	r30, r24
    1250:	31 83       	std	Z+1, r19	; 0x01
    1252:	20 83       	st	Z, r18
    1254:	0a c0       	rjmp	.+20     	; 0x126a <prvInsertBlockIntoFreeList+0x138>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	9a 81       	ldd	r25, Y+2	; 0x02
    125a:	fc 01       	movw	r30, r24
    125c:	20 81       	ld	r18, Z
    125e:	31 81       	ldd	r19, Z+1	; 0x01
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	fc 01       	movw	r30, r24
    1266:	31 83       	std	Z+1, r19	; 0x01
    1268:	20 83       	st	Z, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    126a:	29 81       	ldd	r18, Y+1	; 0x01
    126c:	3a 81       	ldd	r19, Y+2	; 0x02
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	39 f0       	breq	.+14     	; 0x1286 <prvInsertBlockIntoFreeList+0x154>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	2d 81       	ldd	r18, Y+5	; 0x05
    127e:	3e 81       	ldd	r19, Y+6	; 0x06
    1280:	fc 01       	movw	r30, r24
    1282:	31 83       	std	Z+1, r19	; 0x01
    1284:	20 83       	st	Z, r18
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    1286:	00 00       	nop
    1288:	26 96       	adiw	r28, 0x06	; 6
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	1f 92       	push	r1
    12a0:	1f 92       	push	r1
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	9c 01       	movw	r18, r24
    12b0:	2d 5f       	subi	r18, 0xFD	; 253
    12b2:	3f 4f       	sbci	r19, 0xFF	; 255
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	fc 01       	movw	r30, r24
    12ba:	32 83       	std	Z+2, r19	; 0x02
    12bc:	21 83       	std	Z+1, r18	; 0x01
    12be:	29 81       	ldd	r18, Y+1	; 0x01
    12c0:	3a 81       	ldd	r19, Y+2	; 0x02
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	9f ef       	ldi	r25, 0xFF	; 255
    12c6:	dc 01       	movw	r26, r24
    12c8:	f9 01       	movw	r30, r18
    12ca:	83 83       	std	Z+3, r24	; 0x03
    12cc:	94 83       	std	Z+4, r25	; 0x04
    12ce:	a5 83       	std	Z+5, r26	; 0x05
    12d0:	b6 83       	std	Z+6, r27	; 0x06
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	9c 01       	movw	r18, r24
    12d8:	2d 5f       	subi	r18, 0xFD	; 253
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	fc 01       	movw	r30, r24
    12e2:	30 87       	std	Z+8, r19	; 0x08
    12e4:	27 83       	std	Z+7, r18	; 0x07
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	9c 01       	movw	r18, r24
    12ec:	2d 5f       	subi	r18, 0xFD	; 253
    12ee:	3f 4f       	sbci	r19, 0xFF	; 255
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	fc 01       	movw	r30, r24
    12f6:	32 87       	std	Z+10, r19	; 0x0a
    12f8:	21 87       	std	Z+9, r18	; 0x09
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	fc 01       	movw	r30, r24
    1300:	10 82       	st	Z, r1
    1302:	00 00       	nop
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <vListInitialiseItem>:
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	1f 92       	push	r1
    1314:	1f 92       	push	r1
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    131a:	9a 83       	std	Y+2, r25	; 0x02
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	fc 01       	movw	r30, r24
    1324:	13 86       	std	Z+11, r1	; 0x0b
    1326:	12 86       	std	Z+10, r1	; 0x0a
    1328:	00 00       	nop
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	2a 97       	sbiw	r28, 0x0a	; 10
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	98 87       	std	Y+8, r25	; 0x08
    134a:	8f 83       	std	Y+7, r24	; 0x07
    134c:	7a 87       	std	Y+10, r23	; 0x0a
    134e:	69 87       	std	Y+9, r22	; 0x09
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1350:	89 85       	ldd	r24, Y+9	; 0x09
    1352:	9a 85       	ldd	r25, Y+10	; 0x0a
    1354:	fc 01       	movw	r30, r24
    1356:	80 81       	ld	r24, Z
    1358:	91 81       	ldd	r25, Z+1	; 0x01
    135a:	a2 81       	ldd	r26, Z+2	; 0x02
    135c:	b3 81       	ldd	r27, Z+3	; 0x03
    135e:	8b 83       	std	Y+3, r24	; 0x03
    1360:	9c 83       	std	Y+4, r25	; 0x04
    1362:	ad 83       	std	Y+5, r26	; 0x05
    1364:	be 83       	std	Y+6, r27	; 0x06
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	ad 81       	ldd	r26, Y+5	; 0x05
    136c:	be 81       	ldd	r27, Y+6	; 0x06
    136e:	8f 3f       	cpi	r24, 0xFF	; 255
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	af 4f       	sbci	r26, 0xFF	; 255
    1374:	bf 4f       	sbci	r27, 0xFF	; 255
    1376:	41 f4       	brne	.+16     	; 0x1388 <vListInsert+0x54>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1378:	8f 81       	ldd	r24, Y+7	; 0x07
    137a:	98 85       	ldd	r25, Y+8	; 0x08
    137c:	fc 01       	movw	r30, r24
    137e:	81 85       	ldd	r24, Z+9	; 0x09
    1380:	92 85       	ldd	r25, Z+10	; 0x0a
    1382:	9a 83       	std	Y+2, r25	; 0x02
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	20 c0       	rjmp	.+64     	; 0x13c8 <vListInsert+0x94>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1388:	8f 81       	ldd	r24, Y+7	; 0x07
    138a:	98 85       	ldd	r25, Y+8	; 0x08
    138c:	03 96       	adiw	r24, 0x03	; 3
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	07 c0       	rjmp	.+14     	; 0x13a2 <vListInsert+0x6e>
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	fc 01       	movw	r30, r24
    139a:	84 81       	ldd	r24, Z+4	; 0x04
    139c:	95 81       	ldd	r25, Z+5	; 0x05
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	fc 01       	movw	r30, r24
    13a8:	84 81       	ldd	r24, Z+4	; 0x04
    13aa:	95 81       	ldd	r25, Z+5	; 0x05
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 81       	ld	r18, Z
    13b0:	31 81       	ldd	r19, Z+1	; 0x01
    13b2:	42 81       	ldd	r20, Z+2	; 0x02
    13b4:	53 81       	ldd	r21, Z+3	; 0x03
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	ad 81       	ldd	r26, Y+5	; 0x05
    13bc:	be 81       	ldd	r27, Y+6	; 0x06
    13be:	82 17       	cp	r24, r18
    13c0:	93 07       	cpc	r25, r19
    13c2:	a4 07       	cpc	r26, r20
    13c4:	b5 07       	cpc	r27, r21
    13c6:	30 f7       	brcc	.-52     	; 0x1394 <vListInsert+0x60>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	9a 81       	ldd	r25, Y+2	; 0x02
    13cc:	fc 01       	movw	r30, r24
    13ce:	24 81       	ldd	r18, Z+4	; 0x04
    13d0:	35 81       	ldd	r19, Z+5	; 0x05
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	fc 01       	movw	r30, r24
    13d8:	35 83       	std	Z+5, r19	; 0x05
    13da:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	fc 01       	movw	r30, r24
    13e2:	84 81       	ldd	r24, Z+4	; 0x04
    13e4:	95 81       	ldd	r25, Z+5	; 0x05
    13e6:	29 85       	ldd	r18, Y+9	; 0x09
    13e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ea:	fc 01       	movw	r30, r24
    13ec:	37 83       	std	Z+7, r19	; 0x07
    13ee:	26 83       	std	Z+6, r18	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	29 81       	ldd	r18, Y+1	; 0x01
    13f6:	3a 81       	ldd	r19, Y+2	; 0x02
    13f8:	fc 01       	movw	r30, r24
    13fa:	37 83       	std	Z+7, r19	; 0x07
    13fc:	26 83       	std	Z+6, r18	; 0x06
    pxIterator->pxNext = pxNewListItem;
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	29 85       	ldd	r18, Y+9	; 0x09
    1404:	3a 85       	ldd	r19, Y+10	; 0x0a
    1406:	fc 01       	movw	r30, r24
    1408:	35 83       	std	Z+5, r19	; 0x05
    140a:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	2f 81       	ldd	r18, Y+7	; 0x07
    1412:	38 85       	ldd	r19, Y+8	; 0x08
    1414:	fc 01       	movw	r30, r24
    1416:	33 87       	std	Z+11, r19	; 0x0b
    1418:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    141a:	8f 81       	ldd	r24, Y+7	; 0x07
    141c:	98 85       	ldd	r25, Y+8	; 0x08
    141e:	fc 01       	movw	r30, r24
    1420:	80 81       	ld	r24, Z
    1422:	21 e0       	ldi	r18, 0x01	; 1
    1424:	28 0f       	add	r18, r24
    1426:	8f 81       	ldd	r24, Y+7	; 0x07
    1428:	98 85       	ldd	r25, Y+8	; 0x08
    142a:	fc 01       	movw	r30, r24
    142c:	20 83       	st	Z, r18
}
    142e:	00 00       	nop
    1430:	2a 96       	adiw	r28, 0x0a	; 10
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	08 95       	ret

00001442 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	00 d0       	rcall	.+0      	; 0x1448 <uxListRemove+0x6>
    1448:	1f 92       	push	r1
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	fc 01       	movw	r30, r24
    1458:	82 85       	ldd	r24, Z+10	; 0x0a
    145a:	93 85       	ldd	r25, Z+11	; 0x0b
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	fc 01       	movw	r30, r24
    1466:	84 81       	ldd	r24, Z+4	; 0x04
    1468:	95 81       	ldd	r25, Z+5	; 0x05
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	f9 01       	movw	r30, r18
    1470:	26 81       	ldd	r18, Z+6	; 0x06
    1472:	37 81       	ldd	r19, Z+7	; 0x07
    1474:	fc 01       	movw	r30, r24
    1476:	37 83       	std	Z+7, r19	; 0x07
    1478:	26 83       	std	Z+6, r18	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	fc 01       	movw	r30, r24
    1480:	86 81       	ldd	r24, Z+6	; 0x06
    1482:	97 81       	ldd	r25, Z+7	; 0x07
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	3c 81       	ldd	r19, Y+4	; 0x04
    1488:	f9 01       	movw	r30, r18
    148a:	24 81       	ldd	r18, Z+4	; 0x04
    148c:	35 81       	ldd	r19, Z+5	; 0x05
    148e:	fc 01       	movw	r30, r24
    1490:	35 83       	std	Z+5, r19	; 0x05
    1492:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	fc 01       	movw	r30, r24
    149a:	21 81       	ldd	r18, Z+1	; 0x01
    149c:	32 81       	ldd	r19, Z+2	; 0x02
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	28 17       	cp	r18, r24
    14a4:	39 07       	cpc	r19, r25
    14a6:	51 f4       	brne	.+20     	; 0x14bc <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	fc 01       	movw	r30, r24
    14ae:	26 81       	ldd	r18, Z+6	; 0x06
    14b0:	37 81       	ldd	r19, Z+7	; 0x07
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	fc 01       	movw	r30, r24
    14b8:	32 83       	std	Z+2, r19	; 0x02
    14ba:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	fc 01       	movw	r30, r24
    14c2:	13 86       	std	Z+11, r1	; 0x0b
    14c4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	fc 01       	movw	r30, r24
    14cc:	80 81       	ld	r24, Z
    14ce:	2f ef       	ldi	r18, 0xFF	; 255
    14d0:	28 0f       	add	r18, r24
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	fc 01       	movw	r30, r24
    14d8:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	fc 01       	movw	r30, r24
    14e0:	80 81       	ld	r24, Z
}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <pxPortInitialiseStack>:
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
}
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	28 97       	sbiw	r28, 0x08	; 8
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	9c 83       	std	Y+4, r25	; 0x04
    1506:	8b 83       	std	Y+3, r24	; 0x03
    1508:	7e 83       	std	Y+6, r23	; 0x06
    150a:	6d 83       	std	Y+5, r22	; 0x05
    150c:	58 87       	std	Y+8, r21	; 0x08
    150e:	4f 83       	std	Y+7, r20	; 0x07
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	29 81       	ldd	r18, Y+1	; 0x01
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	fc 01       	movw	r30, r24
    1520:	20 83       	st	Z, r18
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	9c 83       	std	Y+4, r25	; 0x04
    152a:	8b 83       	std	Y+3, r24	; 0x03
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	89 2f       	mov	r24, r25
    1532:	99 27       	eor	r25, r25
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	29 81       	ldd	r18, Y+1	; 0x01
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	fc 01       	movw	r30, r24
    1540:	20 83       	st	Z, r18
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	fc 01       	movw	r30, r24
    1552:	10 82       	st	Z, r1
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	fc 01       	movw	r30, r24
    1564:	10 82       	st	Z, r1
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	20 e8       	ldi	r18, 0x80	; 128
    1576:	fc 01       	movw	r30, r24
    1578:	20 83       	st	Z, r18
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	fc 01       	movw	r30, r24
    158a:	10 82       	st	Z, r1
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	9c 83       	std	Y+4, r25	; 0x04
    1594:	8b 83       	std	Y+3, r24	; 0x03
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	fc 01       	movw	r30, r24
    159c:	10 82       	st	Z, r1
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	9c 83       	std	Y+4, r25	; 0x04
    15a6:	8b 83       	std	Y+3, r24	; 0x03
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	fc 01       	movw	r30, r24
    15ae:	10 82       	st	Z, r1
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	47 97       	sbiw	r24, 0x17	; 23
    15b6:	9c 83       	std	Y+4, r25	; 0x04
    15b8:	8b 83       	std	Y+3, r24	; 0x03
    15ba:	8f 81       	ldd	r24, Y+7	; 0x07
    15bc:	98 85       	ldd	r25, Y+8	; 0x08
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	29 81       	ldd	r18, Y+1	; 0x01
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	fc 01       	movw	r30, r24
    15ca:	20 83       	st	Z, r18
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	9c 83       	std	Y+4, r25	; 0x04
    15d4:	8b 83       	std	Y+3, r24	; 0x03
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	89 2f       	mov	r24, r25
    15dc:	99 27       	eor	r25, r25
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	29 81       	ldd	r18, Y+1	; 0x01
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 83       	st	Z, r18
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	07 97       	sbiw	r24, 0x07	; 7
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	28 96       	adiw	r28, 0x08	; 8
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <xPortStartScheduler>:
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	ff d0       	rcall	.+510    	; 0x1814 <prvSetupTimerInterrupt>
    1616:	a0 91 f2 11 	lds	r26, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    161a:	b0 91 f3 11 	lds	r27, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    161e:	cd 91       	ld	r28, X+
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	dd 91       	ld	r29, X+
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	ff 91       	pop	r31
    1628:	ef 91       	pop	r30
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	bf 91       	pop	r27
    1630:	af 91       	pop	r26
    1632:	9f 91       	pop	r25
    1634:	8f 91       	pop	r24
    1636:	7f 91       	pop	r23
    1638:	6f 91       	pop	r22
    163a:	5f 91       	pop	r21
    163c:	4f 91       	pop	r20
    163e:	3f 91       	pop	r19
    1640:	2f 91       	pop	r18
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	df 90       	pop	r13
    164c:	cf 90       	pop	r12
    164e:	bf 90       	pop	r11
    1650:	af 90       	pop	r10
    1652:	9f 90       	pop	r9
    1654:	8f 90       	pop	r8
    1656:	7f 90       	pop	r7
    1658:	6f 90       	pop	r6
    165a:	5f 90       	pop	r5
    165c:	4f 90       	pop	r4
    165e:	3f 90       	pop	r3
    1660:	2f 90       	pop	r2
    1662:	1f 90       	pop	r1
    1664:	0f 90       	pop	r0
    1666:	0c be       	out	0x3c, r0	; 60
    1668:	0f 90       	pop	r0
    166a:	0b be       	out	0x3b, r0	; 59
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	0f 90       	pop	r0
    1672:	08 95       	ret
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <vPortYield>:
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	0f 92       	push	r0
    1684:	0b b6       	in	r0, 0x3b	; 59
    1686:	0f 92       	push	r0
    1688:	0c b6       	in	r0, 0x3c	; 60
    168a:	0f 92       	push	r0
    168c:	1f 92       	push	r1
    168e:	11 24       	eor	r1, r1
    1690:	2f 92       	push	r2
    1692:	3f 92       	push	r3
    1694:	4f 92       	push	r4
    1696:	5f 92       	push	r5
    1698:	6f 92       	push	r6
    169a:	7f 92       	push	r7
    169c:	8f 92       	push	r8
    169e:	9f 92       	push	r9
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	2f 93       	push	r18
    16b2:	3f 93       	push	r19
    16b4:	4f 93       	push	r20
    16b6:	5f 93       	push	r21
    16b8:	6f 93       	push	r22
    16ba:	7f 93       	push	r23
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	af 93       	push	r26
    16c2:	bf 93       	push	r27
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ef 93       	push	r30
    16ca:	ff 93       	push	r31
    16cc:	a0 91 f2 11 	lds	r26, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    16d0:	b0 91 f3 11 	lds	r27, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    16d4:	0d b6       	in	r0, 0x3d	; 61
    16d6:	0d 92       	st	X+, r0
    16d8:	0e b6       	in	r0, 0x3e	; 62
    16da:	0d 92       	st	X+, r0
    16dc:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <vTaskSwitchContext>
    16e0:	a0 91 f2 11 	lds	r26, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    16e4:	b0 91 f3 11 	lds	r27, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    16e8:	cd 91       	ld	r28, X+
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	dd 91       	ld	r29, X+
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	ff 91       	pop	r31
    16f2:	ef 91       	pop	r30
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	bf 91       	pop	r27
    16fa:	af 91       	pop	r26
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	7f 91       	pop	r23
    1702:	6f 91       	pop	r22
    1704:	5f 91       	pop	r21
    1706:	4f 91       	pop	r20
    1708:	3f 91       	pop	r19
    170a:	2f 91       	pop	r18
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	9f 90       	pop	r9
    171e:	8f 90       	pop	r8
    1720:	7f 90       	pop	r7
    1722:	6f 90       	pop	r6
    1724:	5f 90       	pop	r5
    1726:	4f 90       	pop	r4
    1728:	3f 90       	pop	r3
    172a:	2f 90       	pop	r2
    172c:	1f 90       	pop	r1
    172e:	0f 90       	pop	r0
    1730:	0c be       	out	0x3c, r0	; 60
    1732:	0f 90       	pop	r0
    1734:	0b be       	out	0x3b, r0	; 59
    1736:	0f 90       	pop	r0
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	0f 90       	pop	r0
    173c:	08 95       	ret
	...

00001740 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	0f 92       	push	r0
    1748:	0b b6       	in	r0, 0x3b	; 59
    174a:	0f 92       	push	r0
    174c:	0c b6       	in	r0, 0x3c	; 60
    174e:	0f 92       	push	r0
    1750:	1f 92       	push	r1
    1752:	11 24       	eor	r1, r1
    1754:	2f 92       	push	r2
    1756:	3f 92       	push	r3
    1758:	4f 92       	push	r4
    175a:	5f 92       	push	r5
    175c:	6f 92       	push	r6
    175e:	7f 92       	push	r7
    1760:	8f 92       	push	r8
    1762:	9f 92       	push	r9
    1764:	af 92       	push	r10
    1766:	bf 92       	push	r11
    1768:	cf 92       	push	r12
    176a:	df 92       	push	r13
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	2f 93       	push	r18
    1776:	3f 93       	push	r19
    1778:	4f 93       	push	r20
    177a:	5f 93       	push	r21
    177c:	6f 93       	push	r22
    177e:	7f 93       	push	r23
    1780:	8f 93       	push	r24
    1782:	9f 93       	push	r25
    1784:	af 93       	push	r26
    1786:	bf 93       	push	r27
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	a0 91 f2 11 	lds	r26, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    1794:	b0 91 f3 11 	lds	r27, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    1798:	0d b6       	in	r0, 0x3d	; 61
    179a:	0d 92       	st	X+, r0
    179c:	0e b6       	in	r0, 0x3e	; 62
    179e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    17a0:	83 e5       	ldi	r24, 0x53	; 83
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	fc 01       	movw	r30, r24
    17a6:	10 82       	st	Z, r1
    if( xTaskIncrementTick() != pdFALSE )
    17a8:	0e 94 93 1c 	call	0x3926	; 0x3926 <xTaskIncrementTick>
    17ac:	88 23       	and	r24, r24
    17ae:	11 f0       	breq	.+4      	; 0x17b4 <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
    17b0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    17b4:	a0 91 f2 11 	lds	r26, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    17b8:	b0 91 f3 11 	lds	r27, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    17bc:	cd 91       	ld	r28, X+
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	dd 91       	ld	r29, X+
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	ff 91       	pop	r31
    17c6:	ef 91       	pop	r30
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	bf 91       	pop	r27
    17ce:	af 91       	pop	r26
    17d0:	9f 91       	pop	r25
    17d2:	8f 91       	pop	r24
    17d4:	7f 91       	pop	r23
    17d6:	6f 91       	pop	r22
    17d8:	5f 91       	pop	r21
    17da:	4f 91       	pop	r20
    17dc:	3f 91       	pop	r19
    17de:	2f 91       	pop	r18
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	bf 90       	pop	r11
    17ee:	af 90       	pop	r10
    17f0:	9f 90       	pop	r9
    17f2:	8f 90       	pop	r8
    17f4:	7f 90       	pop	r7
    17f6:	6f 90       	pop	r6
    17f8:	5f 90       	pop	r5
    17fa:	4f 90       	pop	r4
    17fc:	3f 90       	pop	r3
    17fe:	2f 90       	pop	r2
    1800:	1f 90       	pop	r1
    1802:	0f 90       	pop	r0
    1804:	0c be       	out	0x3c, r0	; 60
    1806:	0f 90       	pop	r0
    1808:	0b be       	out	0x3b, r0	; 59
    180a:	0f 90       	pop	r0
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1810:	08 95       	ret
	...

00001814 <prvSetupTimerInterrupt>:

/*
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    /* reset watchdog */
    wdt_reset();
    181c:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	88 70       	andi	r24, 0x08	; 8
    1824:	99 27       	eor	r25, r25
    1826:	89 2b       	or	r24, r25
    1828:	11 f0       	breq	.+4      	; 0x182e <prvSetupTimerInterrupt+0x1a>
    182a:	80 ee       	ldi	r24, 0xE0	; 224
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <prvSetupTimerInterrupt+0x1c>
    182e:	80 ec       	ldi	r24, 0xC0	; 192
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	97 70       	andi	r25, 0x07	; 7
    1834:	89 2b       	or	r24, r25
    1836:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    1838:	88 e1       	ldi	r24, 0x18	; 24
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	a8 95       	wdr
    1840:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    /* reset watchdog */
    wdt_reset();

    /* set up WDT Interrupt (rather than the WDT Reset). */
    wdt_interrupt_enable( portUSE_WDTO );
}
    184a:	00 00       	nop
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1852:	76 df       	rcall	.-276    	; 0x1740 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1854:	18 95       	reti
	...

00001858 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	00 d0       	rcall	.+0      	; 0x185e <xQueueGenericReset+0x6>
    185e:	1f 92       	push	r1
    1860:	1f 92       	push	r1
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	8b 83       	std	Y+3, r24	; 0x03
    186a:	6d 83       	std	Y+5, r22	; 0x05
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	0f 92       	push	r0
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	9a 81       	ldd	r25, Y+2	; 0x02
    187e:	fc 01       	movw	r30, r24
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	29 81       	ldd	r18, Y+1	; 0x01
    1886:	3a 81       	ldd	r19, Y+2	; 0x02
    1888:	f9 01       	movw	r30, r18
    188a:	27 8d       	ldd	r18, Z+31	; 0x1f
    188c:	42 2f       	mov	r20, r18
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	29 81       	ldd	r18, Y+1	; 0x01
    1892:	3a 81       	ldd	r19, Y+2	; 0x02
    1894:	f9 01       	movw	r30, r18
    1896:	20 a1       	ldd	r18, Z+32	; 0x20
    1898:	22 2f       	mov	r18, r18
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	42 9f       	mul	r20, r18
    189e:	b0 01       	movw	r22, r0
    18a0:	43 9f       	mul	r20, r19
    18a2:	70 0d       	add	r23, r0
    18a4:	52 9f       	mul	r21, r18
    18a6:	70 0d       	add	r23, r0
    18a8:	11 24       	eor	r1, r1
    18aa:	9b 01       	movw	r18, r22
    18ac:	28 0f       	add	r18, r24
    18ae:	39 1f       	adc	r19, r25
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	fc 01       	movw	r30, r24
    18b6:	35 83       	std	Z+5, r19	; 0x05
    18b8:	24 83       	std	Z+4, r18	; 0x04
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	9a 81       	ldd	r25, Y+2	; 0x02
    18be:	fc 01       	movw	r30, r24
    18c0:	16 8e       	std	Z+30, r1	; 0x1e
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	fc 01       	movw	r30, r24
    18c8:	20 81       	ld	r18, Z
    18ca:	31 81       	ldd	r19, Z+1	; 0x01
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	fc 01       	movw	r30, r24
    18d2:	33 83       	std	Z+3, r19	; 0x03
    18d4:	22 83       	std	Z+2, r18	; 0x02
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	fc 01       	movw	r30, r24
    18dc:	20 81       	ld	r18, Z
    18de:	31 81       	ldd	r19, Z+1	; 0x01
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	9a 81       	ldd	r25, Y+2	; 0x02
    18e4:	fc 01       	movw	r30, r24
    18e6:	87 8d       	ldd	r24, Z+31	; 0x1f
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	bc 01       	movw	r22, r24
    18ee:	61 50       	subi	r22, 0x01	; 1
    18f0:	71 09       	sbc	r23, r1
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	fc 01       	movw	r30, r24
    18f8:	80 a1       	ldd	r24, Z+32	; 0x20
    18fa:	48 2f       	mov	r20, r24
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	64 9f       	mul	r22, r20
    1900:	c0 01       	movw	r24, r0
    1902:	65 9f       	mul	r22, r21
    1904:	90 0d       	add	r25, r0
    1906:	74 9f       	mul	r23, r20
    1908:	90 0d       	add	r25, r0
    190a:	11 24       	eor	r1, r1
    190c:	28 0f       	add	r18, r24
    190e:	39 1f       	adc	r19, r25
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	fc 01       	movw	r30, r24
    1916:	37 83       	std	Z+7, r19	; 0x07
    1918:	26 83       	std	Z+6, r18	; 0x06
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	9a 81       	ldd	r25, Y+2	; 0x02
    191e:	2f ef       	ldi	r18, 0xFF	; 255
    1920:	fc 01       	movw	r30, r24
    1922:	21 a3       	std	Z+33, r18	; 0x21
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	2f ef       	ldi	r18, 0xFF	; 255
    192a:	fc 01       	movw	r30, r24
    192c:	22 a3       	std	Z+34, r18	; 0x22
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	88 23       	and	r24, r24
    1932:	79 f4       	brne	.+30     	; 0x1952 <xQueueGenericReset+0xfa>
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	fc 01       	movw	r30, r24
    193a:	80 85       	ldd	r24, Z+8	; 0x08
    193c:	88 23       	and	r24, r24
    193e:	89 f0       	breq	.+34     	; 0x1962 <xQueueGenericReset+0x10a>
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	08 96       	adiw	r24, 0x08	; 8
    1946:	0e 94 3c 20 	call	0x4078	; 0x4078 <xTaskRemoveFromEventList>
    194a:	88 23       	and	r24, r24
    194c:	51 f0       	breq	.+20     	; 0x1962 <xQueueGenericReset+0x10a>
    194e:	96 de       	rcall	.-724    	; 0x167c <vPortYield>
    1950:	08 c0       	rjmp	.+16     	; 0x1962 <xQueueGenericReset+0x10a>
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	9a 81       	ldd	r25, Y+2	; 0x02
    1956:	08 96       	adiw	r24, 0x08	; 8
    1958:	a0 dc       	rcall	.-1728   	; 0x129a <vListInitialise>
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	43 96       	adiw	r24, 0x13	; 19
    1960:	9c dc       	rcall	.-1736   	; 0x129a <vListInitialise>
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <xQueueGenericCreate>:
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	29 97       	sbiw	r28, 0x09	; 9
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	8f 83       	std	Y+7, r24	; 0x07
    1992:	68 87       	std	Y+8, r22	; 0x08
    1994:	49 87       	std	Y+9, r20	; 0x09
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	48 2f       	mov	r20, r24
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	88 85       	ldd	r24, Y+8	; 0x08
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	42 9f       	mul	r20, r18
    19a4:	c0 01       	movw	r24, r0
    19a6:	43 9f       	mul	r20, r19
    19a8:	90 0d       	add	r25, r0
    19aa:	52 9f       	mul	r21, r18
    19ac:	90 0d       	add	r25, r0
    19ae:	11 24       	eor	r1, r1
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	83 96       	adiw	r24, 0x23	; 35
    19ba:	b6 d9       	rcall	.-3220   	; 0xd28 <pvPortMalloc>
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	8b 83       	std	Y+3, r24	; 0x03
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	9c 81       	ldd	r25, Y+4	; 0x04
    19c4:	89 2b       	or	r24, r25
    19c6:	99 f0       	breq	.+38     	; 0x19ee <xQueueGenericCreate+0x76>
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	8d 81       	ldd	r24, Y+5	; 0x05
    19d2:	9e 81       	ldd	r25, Y+6	; 0x06
    19d4:	83 96       	adiw	r24, 0x23	; 35
    19d6:	9e 83       	std	Y+6, r25	; 0x06
    19d8:	8d 83       	std	Y+5, r24	; 0x05
    19da:	2b 81       	ldd	r18, Y+3	; 0x03
    19dc:	3c 81       	ldd	r19, Y+4	; 0x04
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	89 01       	movw	r16, r18
    19e4:	29 85       	ldd	r18, Y+9	; 0x09
    19e6:	ac 01       	movw	r20, r24
    19e8:	68 85       	ldd	r22, Y+8	; 0x08
    19ea:	8f 81       	ldd	r24, Y+7	; 0x07
    19ec:	0d d0       	rcall	.+26     	; 0x1a08 <prvInitialiseNewQueue>
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	29 96       	adiw	r28, 0x09	; 9
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	08 95       	ret

00001a08 <prvInitialiseNewQueue>:
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	27 97       	sbiw	r28, 0x07	; 7
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	6a 83       	std	Y+2, r22	; 0x02
    1a24:	5c 83       	std	Y+4, r21	; 0x04
    1a26:	4b 83       	std	Y+3, r20	; 0x03
    1a28:	2d 83       	std	Y+5, r18	; 0x05
    1a2a:	1f 83       	std	Y+7, r17	; 0x07
    1a2c:	0e 83       	std	Y+6, r16	; 0x06
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	88 23       	and	r24, r24
    1a32:	41 f4       	brne	.+16     	; 0x1a44 <prvInitialiseNewQueue+0x3c>
    1a34:	8e 81       	ldd	r24, Y+6	; 0x06
    1a36:	9f 81       	ldd	r25, Y+7	; 0x07
    1a38:	2e 81       	ldd	r18, Y+6	; 0x06
    1a3a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	31 83       	std	Z+1, r19	; 0x01
    1a40:	20 83       	st	Z, r18
    1a42:	07 c0       	rjmp	.+14     	; 0x1a52 <prvInitialiseNewQueue+0x4a>
    1a44:	8e 81       	ldd	r24, Y+6	; 0x06
    1a46:	9f 81       	ldd	r25, Y+7	; 0x07
    1a48:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	31 83       	std	Z+1, r19	; 0x01
    1a50:	20 83       	st	Z, r18
    1a52:	8e 81       	ldd	r24, Y+6	; 0x06
    1a54:	9f 81       	ldd	r25, Y+7	; 0x07
    1a56:	29 81       	ldd	r18, Y+1	; 0x01
    1a58:	fc 01       	movw	r30, r24
    1a5a:	27 8f       	std	Z+31, r18	; 0x1f
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	2a 81       	ldd	r18, Y+2	; 0x02
    1a62:	fc 01       	movw	r30, r24
    1a64:	20 a3       	std	Z+32, r18	; 0x20
    1a66:	8e 81       	ldd	r24, Y+6	; 0x06
    1a68:	9f 81       	ldd	r25, Y+7	; 0x07
    1a6a:	61 e0       	ldi	r22, 0x01	; 1
    1a6c:	f5 de       	rcall	.-534    	; 0x1858 <xQueueGenericReset>
    1a6e:	00 00       	nop
    1a70:	27 96       	adiw	r28, 0x07	; 7
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	08 95       	ret

00001a86 <prvInitialiseMutex>:
    1a86:	0f 93       	push	r16
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	1f 92       	push	r1
    1a8e:	1f 92       	push	r1
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	89 2b       	or	r24, r25
    1a9e:	b9 f0       	breq	.+46     	; 0x1ace <prvInitialiseMutex+0x48>
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	15 82       	std	Z+5, r1	; 0x05
    1aa8:	14 82       	std	Z+4, r1	; 0x04
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	fc 01       	movw	r30, r24
    1ab0:	11 82       	std	Z+1, r1	; 0x01
    1ab2:	10 82       	st	Z, r1
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	fc 01       	movw	r30, r24
    1aba:	16 82       	std	Z+6, r1	; 0x06
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	00 e0       	ldi	r16, 0x00	; 0
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	a9 01       	movw	r20, r18
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	25 d0       	rcall	.+74     	; 0x1b18 <xQueueGenericSend>
    1ace:	00 00       	nop
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	0f 91       	pop	r16
    1ada:	08 95       	ret

00001adc <xQueueCreateMutex>:
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <xQueueCreateMutex+0x6>
    1ae2:	1f 92       	push	r1
    1ae4:	1f 92       	push	r1
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	1a 82       	std	Y+2, r1	; 0x02
    1af2:	4d 81       	ldd	r20, Y+5	; 0x05
    1af4:	6a 81       	ldd	r22, Y+2	; 0x02
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	3f df       	rcall	.-386    	; 0x1978 <xQueueGenericCreate>
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	8b 83       	std	Y+3, r24	; 0x03
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	c1 df       	rcall	.-126    	; 0x1a86 <prvInitialiseMutex>
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	9c 81       	ldd	r25, Y+4	; 0x04
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret

00001b18 <xQueueGenericSend>:
    1b18:	0f 93       	push	r16
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	62 97       	sbiw	r28, 0x12	; 18
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	9b 87       	std	Y+11, r25	; 0x0b
    1b30:	8a 87       	std	Y+10, r24	; 0x0a
    1b32:	7d 87       	std	Y+13, r23	; 0x0d
    1b34:	6c 87       	std	Y+12, r22	; 0x0c
    1b36:	2e 87       	std	Y+14, r18	; 0x0e
    1b38:	3f 87       	std	Y+15, r19	; 0x0f
    1b3a:	48 8b       	std	Y+16, r20	; 0x10
    1b3c:	59 8b       	std	Y+17, r21	; 0x11
    1b3e:	0a 8b       	std	Y+18, r16	; 0x12
    1b40:	19 82       	std	Y+1, r1	; 0x01
    1b42:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b44:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b46:	9b 83       	std	Y+3, r25	; 0x03
    1b48:	8a 83       	std	Y+2, r24	; 0x02
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	0f 92       	push	r0
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	9b 81       	ldd	r25, Y+3	; 0x03
    1b54:	fc 01       	movw	r30, r24
    1b56:	26 8d       	ldd	r18, Z+30	; 0x1e
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1b60:	28 17       	cp	r18, r24
    1b62:	18 f0       	brcs	.+6      	; 0x1b6a <xQueueGenericSend+0x52>
    1b64:	8a 89       	ldd	r24, Y+18	; 0x12
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	f9 f4       	brne	.+62     	; 0x1ba8 <xQueueGenericSend+0x90>
    1b6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b6c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	4a 89       	ldd	r20, Y+18	; 0x12
    1b74:	b9 01       	movw	r22, r18
    1b76:	a6 d2       	rcall	.+1356   	; 0x20c4 <prvCopyDataToQueue>
    1b78:	8c 83       	std	Y+4, r24	; 0x04
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7e:	fc 01       	movw	r30, r24
    1b80:	83 89       	ldd	r24, Z+19	; 0x13
    1b82:	88 23       	and	r24, r24
    1b84:	49 f0       	breq	.+18     	; 0x1b98 <xQueueGenericSend+0x80>
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	43 96       	adiw	r24, 0x13	; 19
    1b8c:	0e 94 3c 20 	call	0x4078	; 0x4078 <xTaskRemoveFromEventList>
    1b90:	88 23       	and	r24, r24
    1b92:	31 f0       	breq	.+12     	; 0x1ba0 <xQueueGenericSend+0x88>
    1b94:	73 dd       	rcall	.-1306   	; 0x167c <vPortYield>
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <xQueueGenericSend+0x88>
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	88 23       	and	r24, r24
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <xQueueGenericSend+0x88>
    1b9e:	6e dd       	rcall	.-1316   	; 0x167c <vPortYield>
    1ba0:	0f 90       	pop	r0
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	64 c0       	rjmp	.+200    	; 0x1c70 <xQueueGenericSend+0x158>
    1ba8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1baa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bac:	a8 89       	ldd	r26, Y+16	; 0x10
    1bae:	b9 89       	ldd	r27, Y+17	; 0x11
    1bb0:	89 2b       	or	r24, r25
    1bb2:	8a 2b       	or	r24, r26
    1bb4:	8b 2b       	or	r24, r27
    1bb6:	21 f4       	brne	.+8      	; 0x1bc0 <xQueueGenericSend+0xa8>
    1bb8:	0f 90       	pop	r0
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	58 c0       	rjmp	.+176    	; 0x1c70 <xQueueGenericSend+0x158>
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	88 23       	and	r24, r24
    1bc4:	31 f4       	brne	.+12     	; 0x1bd2 <xQueueGenericSend+0xba>
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	05 96       	adiw	r24, 0x05	; 5
    1bca:	0e 94 17 23 	call	0x462e	; 0x462e <vTaskInternalSetTimeOutState>
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <vTaskSuspendAll>
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	0f 92       	push	r0
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	9b 81       	ldd	r25, Y+3	; 0x03
    1be4:	fc 01       	movw	r30, r24
    1be6:	81 a1       	ldd	r24, Z+33	; 0x21
    1be8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bea:	21 f4       	brne	.+8      	; 0x1bf4 <xQueueGenericSend+0xdc>
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	11 a2       	std	Z+33, r1	; 0x21
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	82 a1       	ldd	r24, Z+34	; 0x22
    1bfc:	8f 3f       	cpi	r24, 0xFF	; 255
    1bfe:	21 f4       	brne	.+8      	; 0x1c08 <xQueueGenericSend+0xf0>
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	9b 81       	ldd	r25, Y+3	; 0x03
    1c04:	fc 01       	movw	r30, r24
    1c06:	12 a2       	std	Z+34, r1	; 0x22
    1c08:	0f 90       	pop	r0
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	9e 01       	movw	r18, r28
    1c0e:	22 5f       	subi	r18, 0xF2	; 242
    1c10:	3f 4f       	sbci	r19, 0xFF	; 255
    1c12:	ce 01       	movw	r24, r28
    1c14:	05 96       	adiw	r24, 0x05	; 5
    1c16:	b9 01       	movw	r22, r18
    1c18:	0e 94 3a 23 	call	0x4674	; 0x4674 <xTaskCheckForTimeOut>
    1c1c:	88 23       	and	r24, r24
    1c1e:	11 f5       	brne	.+68     	; 0x1c64 <xQueueGenericSend+0x14c>
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	9b 81       	ldd	r25, Y+3	; 0x03
    1c24:	eb d3       	rcall	.+2006   	; 0x23fc <prvIsQueueFull>
    1c26:	88 23       	and	r24, r24
    1c28:	b9 f0       	breq	.+46     	; 0x1c58 <xQueueGenericSend+0x140>
    1c2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c2c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c2e:	a8 89       	ldd	r26, Y+16	; 0x10
    1c30:	b9 89       	ldd	r27, Y+17	; 0x11
    1c32:	2a 81       	ldd	r18, Y+2	; 0x02
    1c34:	3b 81       	ldd	r19, Y+3	; 0x03
    1c36:	28 5f       	subi	r18, 0xF8	; 248
    1c38:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3a:	ac 01       	movw	r20, r24
    1c3c:	bd 01       	movw	r22, r26
    1c3e:	c9 01       	movw	r24, r18
    1c40:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <vTaskPlaceOnEventList>
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	5e d3       	rcall	.+1724   	; 0x2306 <prvUnlockQueue>
    1c4a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    1c4e:	88 23       	and	r24, r24
    1c50:	09 f0       	breq	.+2      	; 0x1c54 <xQueueGenericSend+0x13c>
    1c52:	7b cf       	rjmp	.-266    	; 0x1b4a <xQueueGenericSend+0x32>
    1c54:	13 dd       	rcall	.-1498   	; 0x167c <vPortYield>
    1c56:	79 cf       	rjmp	.-270    	; 0x1b4a <xQueueGenericSend+0x32>
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5c:	54 d3       	rcall	.+1704   	; 0x2306 <prvUnlockQueue>
    1c5e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    1c62:	73 cf       	rjmp	.-282    	; 0x1b4a <xQueueGenericSend+0x32>
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	9b 81       	ldd	r25, Y+3	; 0x03
    1c68:	4e d3       	rcall	.+1692   	; 0x2306 <prvUnlockQueue>
    1c6a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	62 96       	adiw	r28, 0x12	; 18
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	0f 91       	pop	r16
    1c82:	08 95       	ret

00001c84 <xQueueGenericSendFromISR>:
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	2d 97       	sbiw	r28, 0x0d	; 13
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	98 87       	std	Y+8, r25	; 0x08
    1c9a:	8f 83       	std	Y+7, r24	; 0x07
    1c9c:	7a 87       	std	Y+10, r23	; 0x0a
    1c9e:	69 87       	std	Y+9, r22	; 0x09
    1ca0:	5c 87       	std	Y+12, r21	; 0x0c
    1ca2:	4b 87       	std	Y+11, r20	; 0x0b
    1ca4:	2d 87       	std	Y+13, r18	; 0x0d
    1ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca8:	98 85       	ldd	r25, Y+8	; 0x08
    1caa:	9b 83       	std	Y+3, r25	; 0x03
    1cac:	8a 83       	std	Y+2, r24	; 0x02
    1cae:	1c 82       	std	Y+4, r1	; 0x04
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	26 8d       	ldd	r18, Z+30	; 0x1e
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	9b 81       	ldd	r25, Y+3	; 0x03
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	87 8d       	ldd	r24, Z+31	; 0x1f
    1cc0:	28 17       	cp	r18, r24
    1cc2:	18 f0       	brcs	.+6      	; 0x1cca <xQueueGenericSendFromISR+0x46>
    1cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc6:	82 30       	cpi	r24, 0x02	; 2
    1cc8:	a9 f5       	brne	.+106    	; 0x1d34 <xQueueGenericSendFromISR+0xb0>
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cce:	fc 01       	movw	r30, r24
    1cd0:	82 a1       	ldd	r24, Z+34	; 0x22
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd8:	fc 01       	movw	r30, r24
    1cda:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cdc:	8e 83       	std	Y+6, r24	; 0x06
    1cde:	29 85       	ldd	r18, Y+9	; 0x09
    1ce0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce6:	4d 85       	ldd	r20, Y+13	; 0x0d
    1ce8:	b9 01       	movw	r22, r18
    1cea:	ec d1       	rcall	.+984    	; 0x20c4 <prvCopyDataToQueue>
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf0:	b9 f4       	brne	.+46     	; 0x1d20 <xQueueGenericSendFromISR+0x9c>
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	83 89       	ldd	r24, Z+19	; 0x13
    1cfa:	88 23       	and	r24, r24
    1cfc:	c1 f0       	breq	.+48     	; 0x1d2e <xQueueGenericSendFromISR+0xaa>
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	9b 81       	ldd	r25, Y+3	; 0x03
    1d02:	43 96       	adiw	r24, 0x13	; 19
    1d04:	0e 94 3c 20 	call	0x4078	; 0x4078 <xTaskRemoveFromEventList>
    1d08:	88 23       	and	r24, r24
    1d0a:	89 f0       	breq	.+34     	; 0x1d2e <xQueueGenericSendFromISR+0xaa>
    1d0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d10:	89 2b       	or	r24, r25
    1d12:	69 f0       	breq	.+26     	; 0x1d2e <xQueueGenericSendFromISR+0xaa>
    1d14:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d16:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	20 83       	st	Z, r18
    1d1e:	07 c0       	rjmp	.+14     	; 0x1d2e <xQueueGenericSendFromISR+0xaa>
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	8f 5f       	subi	r24, 0xFF	; 255
    1d24:	28 2f       	mov	r18, r24
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	22 a3       	std	Z+34, r18	; 0x22
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <xQueueGenericSendFromISR+0xb2>
    1d34:	19 82       	std	Y+1, r1	; 0x01
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	2d 96       	adiw	r28, 0x0d	; 13
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	08 95       	ret

00001d4a <xQueueReceive>:
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	61 97       	sbiw	r28, 0x11	; 17
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	9b 87       	std	Y+11, r25	; 0x0b
    1d60:	8a 87       	std	Y+10, r24	; 0x0a
    1d62:	7d 87       	std	Y+13, r23	; 0x0d
    1d64:	6c 87       	std	Y+12, r22	; 0x0c
    1d66:	2e 87       	std	Y+14, r18	; 0x0e
    1d68:	3f 87       	std	Y+15, r19	; 0x0f
    1d6a:	48 8b       	std	Y+16, r20	; 0x10
    1d6c:	59 8b       	std	Y+17, r21	; 0x11
    1d6e:	19 82       	std	Y+1, r1	; 0x01
    1d70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d72:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d74:	9b 83       	std	Y+3, r25	; 0x03
    1d76:	8a 83       	std	Y+2, r24	; 0x02
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	0f 92       	push	r0
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	fc 01       	movw	r30, r24
    1d84:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d86:	8c 83       	std	Y+4, r24	; 0x04
    1d88:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8a:	88 23       	and	r24, r24
    1d8c:	f9 f0       	breq	.+62     	; 0x1dcc <xQueueReceive+0x82>
    1d8e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d90:	3d 85       	ldd	r19, Y+13	; 0x0d
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	9b 81       	ldd	r25, Y+3	; 0x03
    1d96:	b9 01       	movw	r22, r18
    1d98:	65 d2       	rcall	.+1226   	; 0x2264 <prvCopyDataFromQueue>
    1d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9c:	2f ef       	ldi	r18, 0xFF	; 255
    1d9e:	28 0f       	add	r18, r24
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	9b 81       	ldd	r25, Y+3	; 0x03
    1da4:	fc 01       	movw	r30, r24
    1da6:	26 8f       	std	Z+30, r18	; 0x1e
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dac:	fc 01       	movw	r30, r24
    1dae:	80 85       	ldd	r24, Z+8	; 0x08
    1db0:	88 23       	and	r24, r24
    1db2:	41 f0       	breq	.+16     	; 0x1dc4 <xQueueReceive+0x7a>
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	9b 81       	ldd	r25, Y+3	; 0x03
    1db8:	08 96       	adiw	r24, 0x08	; 8
    1dba:	0e 94 3c 20 	call	0x4078	; 0x4078 <xTaskRemoveFromEventList>
    1dbe:	88 23       	and	r24, r24
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <xQueueReceive+0x7a>
    1dc2:	5c dc       	rcall	.-1864   	; 0x167c <vPortYield>
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	6a c0       	rjmp	.+212    	; 0x1ea0 <xQueueReceive+0x156>
    1dcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dce:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd0:	a8 89       	ldd	r26, Y+16	; 0x10
    1dd2:	b9 89       	ldd	r27, Y+17	; 0x11
    1dd4:	89 2b       	or	r24, r25
    1dd6:	8a 2b       	or	r24, r26
    1dd8:	8b 2b       	or	r24, r27
    1dda:	21 f4       	brne	.+8      	; 0x1de4 <xQueueReceive+0x9a>
    1ddc:	0f 90       	pop	r0
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	5e c0       	rjmp	.+188    	; 0x1ea0 <xQueueReceive+0x156>
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	88 23       	and	r24, r24
    1de8:	31 f4       	brne	.+12     	; 0x1df6 <xQueueReceive+0xac>
    1dea:	ce 01       	movw	r24, r28
    1dec:	05 96       	adiw	r24, 0x05	; 5
    1dee:	0e 94 17 23 	call	0x462e	; 0x462e <vTaskInternalSetTimeOutState>
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	0f 90       	pop	r0
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <vTaskSuspendAll>
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	0f 92       	push	r0
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	9b 81       	ldd	r25, Y+3	; 0x03
    1e08:	fc 01       	movw	r30, r24
    1e0a:	81 a1       	ldd	r24, Z+33	; 0x21
    1e0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e0e:	21 f4       	brne	.+8      	; 0x1e18 <xQueueReceive+0xce>
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	fc 01       	movw	r30, r24
    1e16:	11 a2       	std	Z+33, r1	; 0x21
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	82 a1       	ldd	r24, Z+34	; 0x22
    1e20:	8f 3f       	cpi	r24, 0xFF	; 255
    1e22:	21 f4       	brne	.+8      	; 0x1e2c <xQueueReceive+0xe2>
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	9b 81       	ldd	r25, Y+3	; 0x03
    1e28:	fc 01       	movw	r30, r24
    1e2a:	12 a2       	std	Z+34, r1	; 0x22
    1e2c:	0f 90       	pop	r0
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	9e 01       	movw	r18, r28
    1e32:	22 5f       	subi	r18, 0xF2	; 242
    1e34:	3f 4f       	sbci	r19, 0xFF	; 255
    1e36:	ce 01       	movw	r24, r28
    1e38:	05 96       	adiw	r24, 0x05	; 5
    1e3a:	b9 01       	movw	r22, r18
    1e3c:	0e 94 3a 23 	call	0x4674	; 0x4674 <xTaskCheckForTimeOut>
    1e40:	88 23       	and	r24, r24
    1e42:	11 f5       	brne	.+68     	; 0x1e88 <xQueueReceive+0x13e>
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	9b 81       	ldd	r25, Y+3	; 0x03
    1e48:	bc d2       	rcall	.+1400   	; 0x23c2 <prvIsQueueEmpty>
    1e4a:	88 23       	and	r24, r24
    1e4c:	b9 f0       	breq	.+46     	; 0x1e7c <xQueueReceive+0x132>
    1e4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e50:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e52:	a8 89       	ldd	r26, Y+16	; 0x10
    1e54:	b9 89       	ldd	r27, Y+17	; 0x11
    1e56:	2a 81       	ldd	r18, Y+2	; 0x02
    1e58:	3b 81       	ldd	r19, Y+3	; 0x03
    1e5a:	2d 5e       	subi	r18, 0xED	; 237
    1e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5e:	ac 01       	movw	r20, r24
    1e60:	bd 01       	movw	r22, r26
    1e62:	c9 01       	movw	r24, r18
    1e64:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <vTaskPlaceOnEventList>
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6c:	4c d2       	rcall	.+1176   	; 0x2306 <prvUnlockQueue>
    1e6e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    1e72:	88 23       	and	r24, r24
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <xQueueReceive+0x12e>
    1e76:	80 cf       	rjmp	.-256    	; 0x1d78 <xQueueReceive+0x2e>
    1e78:	01 dc       	rcall	.-2046   	; 0x167c <vPortYield>
    1e7a:	7e cf       	rjmp	.-260    	; 0x1d78 <xQueueReceive+0x2e>
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e80:	42 d2       	rcall	.+1156   	; 0x2306 <prvUnlockQueue>
    1e82:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    1e86:	78 cf       	rjmp	.-272    	; 0x1d78 <xQueueReceive+0x2e>
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8c:	3c d2       	rcall	.+1144   	; 0x2306 <prvUnlockQueue>
    1e8e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	9b 81       	ldd	r25, Y+3	; 0x03
    1e96:	95 d2       	rcall	.+1322   	; 0x23c2 <prvIsQueueEmpty>
    1e98:	88 23       	and	r24, r24
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <xQueueReceive+0x154>
    1e9c:	6d cf       	rjmp	.-294    	; 0x1d78 <xQueueReceive+0x2e>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	61 96       	adiw	r28, 0x11	; 17
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	08 95       	ret

00001eb2 <xQueueSemaphoreTake>:
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	61 97       	sbiw	r28, 0x11	; 17
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	9d 87       	std	Y+13, r25	; 0x0d
    1ec8:	8c 87       	std	Y+12, r24	; 0x0c
    1eca:	4e 87       	std	Y+14, r20	; 0x0e
    1ecc:	5f 87       	std	Y+15, r21	; 0x0f
    1ece:	68 8b       	std	Y+16, r22	; 0x10
    1ed0:	79 8b       	std	Y+17, r23	; 0x11
    1ed2:	19 82       	std	Y+1, r1	; 0x01
    1ed4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ed6:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ed8:	9c 83       	std	Y+4, r25	; 0x04
    1eda:	8b 83       	std	Y+3, r24	; 0x03
    1edc:	1a 82       	std	Y+2, r1	; 0x02
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	0f 92       	push	r0
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	fc 01       	movw	r30, r24
    1eea:	86 8d       	ldd	r24, Z+30	; 0x1e
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	88 23       	and	r24, r24
    1ef2:	41 f1       	breq	.+80     	; 0x1f44 <xQueueSemaphoreTake+0x92>
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	2f ef       	ldi	r18, 0xFF	; 255
    1ef8:	28 0f       	add	r18, r24
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	fc 01       	movw	r30, r24
    1f00:	26 8f       	std	Z+30, r18	; 0x1e
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	fc 01       	movw	r30, r24
    1f08:	80 81       	ld	r24, Z
    1f0a:	91 81       	ldd	r25, Z+1	; 0x01
    1f0c:	89 2b       	or	r24, r25
    1f0e:	41 f4       	brne	.+16     	; 0x1f20 <xQueueSemaphoreTake+0x6e>
    1f10:	0e 94 24 28 	call	0x5048	; 0x5048 <pvTaskIncrementMutexHeldCount>
    1f14:	9c 01       	movw	r18, r24
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	35 83       	std	Z+5, r19	; 0x05
    1f1e:	24 83       	std	Z+4, r18	; 0x04
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	fc 01       	movw	r30, r24
    1f26:	80 85       	ldd	r24, Z+8	; 0x08
    1f28:	88 23       	and	r24, r24
    1f2a:	41 f0       	breq	.+16     	; 0x1f3c <xQueueSemaphoreTake+0x8a>
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	08 96       	adiw	r24, 0x08	; 8
    1f32:	0e 94 3c 20 	call	0x4078	; 0x4078 <xTaskRemoveFromEventList>
    1f36:	88 23       	and	r24, r24
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <xQueueSemaphoreTake+0x8a>
    1f3a:	a0 db       	rcall	.-2240   	; 0x167c <vPortYield>
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	93 c0       	rjmp	.+294    	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
    1f44:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f46:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f48:	a8 89       	ldd	r26, Y+16	; 0x10
    1f4a:	b9 89       	ldd	r27, Y+17	; 0x11
    1f4c:	89 2b       	or	r24, r25
    1f4e:	8a 2b       	or	r24, r26
    1f50:	8b 2b       	or	r24, r27
    1f52:	21 f4       	brne	.+8      	; 0x1f5c <xQueueSemaphoreTake+0xaa>
    1f54:	0f 90       	pop	r0
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	87 c0       	rjmp	.+270    	; 0x206a <__DATA_REGION_LENGTH__+0x6a>
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	88 23       	and	r24, r24
    1f60:	31 f4       	brne	.+12     	; 0x1f6e <xQueueSemaphoreTake+0xbc>
    1f62:	ce 01       	movw	r24, r28
    1f64:	07 96       	adiw	r24, 0x07	; 7
    1f66:	0e 94 17 23 	call	0x462e	; 0x462e <vTaskInternalSetTimeOutState>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	0f 90       	pop	r0
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <vTaskSuspendAll>
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	0f 92       	push	r0
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	fc 01       	movw	r30, r24
    1f82:	81 a1       	ldd	r24, Z+33	; 0x21
    1f84:	8f 3f       	cpi	r24, 0xFF	; 255
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <xQueueSemaphoreTake+0xde>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	11 a2       	std	Z+33, r1	; 0x21
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	fc 01       	movw	r30, r24
    1f96:	82 a1       	ldd	r24, Z+34	; 0x22
    1f98:	8f 3f       	cpi	r24, 0xFF	; 255
    1f9a:	21 f4       	brne	.+8      	; 0x1fa4 <xQueueSemaphoreTake+0xf2>
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	12 a2       	std	Z+34, r1	; 0x22
    1fa4:	0f 90       	pop	r0
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	9e 01       	movw	r18, r28
    1faa:	22 5f       	subi	r18, 0xF2	; 242
    1fac:	3f 4f       	sbci	r19, 0xFF	; 255
    1fae:	ce 01       	movw	r24, r28
    1fb0:	07 96       	adiw	r24, 0x07	; 7
    1fb2:	b9 01       	movw	r22, r18
    1fb4:	0e 94 3a 23 	call	0x4674	; 0x4674 <xTaskCheckForTimeOut>
    1fb8:	88 23       	and	r24, r24
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <xQueueSemaphoreTake+0x10c>
    1fbc:	36 c0       	rjmp	.+108    	; 0x202a <__DATA_REGION_LENGTH__+0x2a>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	ff d1       	rcall	.+1022   	; 0x23c2 <prvIsQueueEmpty>
    1fc4:	88 23       	and	r24, r24
    1fc6:	59 f1       	breq	.+86     	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	fc 01       	movw	r30, r24
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	89 2b       	or	r24, r25
    1fd4:	69 f4       	brne	.+26     	; 0x1ff0 <xQueueSemaphoreTake+0x13e>
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	0f 92       	push	r0
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	84 81       	ldd	r24, Z+4	; 0x04
    1fe4:	95 81       	ldd	r25, Z+5	; 0x05
    1fe6:	0e 94 da 24 	call	0x49b4	; 0x49b4 <xTaskPriorityInherit>
    1fea:	8a 83       	std	Y+2, r24	; 0x02
    1fec:	0f 90       	pop	r0
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ff2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ff4:	a8 89       	ldd	r26, Y+16	; 0x10
    1ff6:	b9 89       	ldd	r27, Y+17	; 0x11
    1ff8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffa:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffc:	2d 5e       	subi	r18, 0xED	; 237
    1ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    2000:	ac 01       	movw	r20, r24
    2002:	bd 01       	movw	r22, r26
    2004:	c9 01       	movw	r24, r18
    2006:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <vTaskPlaceOnEventList>
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	9c 81       	ldd	r25, Y+4	; 0x04
    200e:	7b d1       	rcall	.+758    	; 0x2306 <prvUnlockQueue>
    2010:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    2014:	88 23       	and	r24, r24
    2016:	09 f0       	breq	.+2      	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2018:	62 cf       	rjmp	.-316    	; 0x1ede <xQueueSemaphoreTake+0x2c>
    201a:	30 db       	rcall	.-2464   	; 0x167c <vPortYield>
    201c:	60 cf       	rjmp	.-320    	; 0x1ede <xQueueSemaphoreTake+0x2c>
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	71 d1       	rcall	.+738    	; 0x2306 <prvUnlockQueue>
    2024:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    2028:	5a cf       	rjmp	.-332    	; 0x1ede <xQueueSemaphoreTake+0x2c>
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	6b d1       	rcall	.+726    	; 0x2306 <prvUnlockQueue>
    2030:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	c4 d1       	rcall	.+904    	; 0x23c2 <prvIsQueueEmpty>
    203a:	88 23       	and	r24, r24
    203c:	09 f4       	brne	.+2      	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    203e:	4f cf       	rjmp	.-354    	; 0x1ede <xQueueSemaphoreTake+0x2c>
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	88 23       	and	r24, r24
    2044:	89 f0       	breq	.+34     	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	0f 92       	push	r0
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	15 d0       	rcall	.+42     	; 0x207c <prvGetDisinheritPriorityAfterTimeout>
    2052:	8e 83       	std	Y+6, r24	; 0x06
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	fc 01       	movw	r30, r24
    205a:	84 81       	ldd	r24, Z+4	; 0x04
    205c:	95 81       	ldd	r25, Z+5	; 0x05
    205e:	6e 81       	ldd	r22, Y+6	; 0x06
    2060:	0e 94 d7 26 	call	0x4dae	; 0x4dae <vTaskPriorityDisinheritAfterTimeout>
    2064:	0f 90       	pop	r0
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	61 96       	adiw	r28, 0x11	; 17
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	df 91       	pop	r29
    2078:	cf 91       	pop	r28
    207a:	08 95       	ret

0000207c <prvGetDisinheritPriorityAfterTimeout>:
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	00 d0       	rcall	.+0      	; 0x2082 <prvGetDisinheritPriorityAfterTimeout+0x6>
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	9b 83       	std	Y+3, r25	; 0x03
    2088:	8a 83       	std	Y+2, r24	; 0x02
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	9b 81       	ldd	r25, Y+3	; 0x03
    208e:	fc 01       	movw	r30, r24
    2090:	83 89       	ldd	r24, Z+19	; 0x13
    2092:	88 23       	and	r24, r24
    2094:	79 f0       	breq	.+30     	; 0x20b4 <prvGetDisinheritPriorityAfterTimeout+0x38>
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	9b 81       	ldd	r25, Y+3	; 0x03
    209a:	fc 01       	movw	r30, r24
    209c:	82 8d       	ldd	r24, Z+26	; 0x1a
    209e:	93 8d       	ldd	r25, Z+27	; 0x1b
    20a0:	fc 01       	movw	r30, r24
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	a2 81       	ldd	r26, Z+2	; 0x02
    20a8:	b3 81       	ldd	r27, Z+3	; 0x03
    20aa:	98 2f       	mov	r25, r24
    20ac:	8a e0       	ldi	r24, 0x0A	; 10
    20ae:	89 1b       	sub	r24, r25
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	01 c0       	rjmp	.+2      	; 0x20b6 <prvGetDisinheritPriorityAfterTimeout+0x3a>
    20b4:	19 82       	std	Y+1, r1	; 0x01
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	08 95       	ret

000020c4 <prvCopyDataToQueue>:
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	27 97       	sbiw	r28, 0x07	; 7
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
    20dc:	7e 83       	std	Y+6, r23	; 0x06
    20de:	6d 83       	std	Y+5, r22	; 0x05
    20e0:	4f 83       	std	Y+7, r20	; 0x07
    20e2:	19 82       	std	Y+1, r1	; 0x01
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	fc 01       	movw	r30, r24
    20ea:	86 8d       	ldd	r24, Z+30	; 0x1e
    20ec:	8a 83       	std	Y+2, r24	; 0x02
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	fc 01       	movw	r30, r24
    20f4:	80 a1       	ldd	r24, Z+32	; 0x20
    20f6:	88 23       	and	r24, r24
    20f8:	b1 f4       	brne	.+44     	; 0x2126 <prvCopyDataToQueue+0x62>
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	fc 01       	movw	r30, r24
    2100:	80 81       	ld	r24, Z
    2102:	91 81       	ldd	r25, Z+1	; 0x01
    2104:	89 2b       	or	r24, r25
    2106:	09 f0       	breq	.+2      	; 0x210a <prvCopyDataToQueue+0x46>
    2108:	9c c0       	rjmp	.+312    	; 0x2242 <__stack+0x43>
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	fc 01       	movw	r30, r24
    2110:	84 81       	ldd	r24, Z+4	; 0x04
    2112:	95 81       	ldd	r25, Z+5	; 0x05
    2114:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <xTaskPriorityDisinherit>
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	fc 01       	movw	r30, r24
    2120:	15 82       	std	Z+5, r1	; 0x05
    2122:	14 82       	std	Z+4, r1	; 0x04
    2124:	8e c0       	rjmp	.+284    	; 0x2242 <__stack+0x43>
    2126:	8f 81       	ldd	r24, Y+7	; 0x07
    2128:	88 23       	and	r24, r24
    212a:	d9 f5       	brne	.+118    	; 0x21a2 <prvCopyDataToQueue+0xde>
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	fc 01       	movw	r30, r24
    2132:	80 a1       	ldd	r24, Z+32	; 0x20
    2134:	48 2f       	mov	r20, r24
    2136:	50 e0       	ldi	r21, 0x00	; 0
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	fc 01       	movw	r30, r24
    213e:	82 81       	ldd	r24, Z+2	; 0x02
    2140:	93 81       	ldd	r25, Z+3	; 0x03
    2142:	2d 81       	ldd	r18, Y+5	; 0x05
    2144:	3e 81       	ldd	r19, Y+6	; 0x06
    2146:	b9 01       	movw	r22, r18
    2148:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <memcpy>
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	fc 01       	movw	r30, r24
    2152:	22 81       	ldd	r18, Z+2	; 0x02
    2154:	33 81       	ldd	r19, Z+3	; 0x03
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	fc 01       	movw	r30, r24
    215c:	80 a1       	ldd	r24, Z+32	; 0x20
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	28 0f       	add	r18, r24
    2164:	39 1f       	adc	r19, r25
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	fc 01       	movw	r30, r24
    216c:	33 83       	std	Z+3, r19	; 0x03
    216e:	22 83       	std	Z+2, r18	; 0x02
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	fc 01       	movw	r30, r24
    2176:	22 81       	ldd	r18, Z+2	; 0x02
    2178:	33 81       	ldd	r19, Z+3	; 0x03
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	9c 81       	ldd	r25, Y+4	; 0x04
    217e:	fc 01       	movw	r30, r24
    2180:	84 81       	ldd	r24, Z+4	; 0x04
    2182:	95 81       	ldd	r25, Z+5	; 0x05
    2184:	28 17       	cp	r18, r24
    2186:	39 07       	cpc	r19, r25
    2188:	08 f4       	brcc	.+2      	; 0x218c <prvCopyDataToQueue+0xc8>
    218a:	5b c0       	rjmp	.+182    	; 0x2242 <__stack+0x43>
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	fc 01       	movw	r30, r24
    2192:	20 81       	ld	r18, Z
    2194:	31 81       	ldd	r19, Z+1	; 0x01
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	9c 81       	ldd	r25, Y+4	; 0x04
    219a:	fc 01       	movw	r30, r24
    219c:	33 83       	std	Z+3, r19	; 0x03
    219e:	22 83       	std	Z+2, r18	; 0x02
    21a0:	50 c0       	rjmp	.+160    	; 0x2242 <__stack+0x43>
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	fc 01       	movw	r30, r24
    21a8:	80 a1       	ldd	r24, Z+32	; 0x20
    21aa:	48 2f       	mov	r20, r24
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	fc 01       	movw	r30, r24
    21b4:	86 81       	ldd	r24, Z+6	; 0x06
    21b6:	97 81       	ldd	r25, Z+7	; 0x07
    21b8:	2d 81       	ldd	r18, Y+5	; 0x05
    21ba:	3e 81       	ldd	r19, Y+6	; 0x06
    21bc:	b9 01       	movw	r22, r18
    21be:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <memcpy>
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	fc 01       	movw	r30, r24
    21c8:	26 81       	ldd	r18, Z+6	; 0x06
    21ca:	37 81       	ldd	r19, Z+7	; 0x07
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	fc 01       	movw	r30, r24
    21d2:	80 a1       	ldd	r24, Z+32	; 0x20
    21d4:	88 2f       	mov	r24, r24
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	91 95       	neg	r25
    21da:	81 95       	neg	r24
    21dc:	91 09       	sbc	r25, r1
    21de:	28 0f       	add	r18, r24
    21e0:	39 1f       	adc	r19, r25
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	fc 01       	movw	r30, r24
    21e8:	37 83       	std	Z+7, r19	; 0x07
    21ea:	26 83       	std	Z+6, r18	; 0x06
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	fc 01       	movw	r30, r24
    21f2:	26 81       	ldd	r18, Z+6	; 0x06
    21f4:	37 81       	ldd	r19, Z+7	; 0x07
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	fc 01       	movw	r30, r24
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	28 17       	cp	r18, r24
    2202:	39 07       	cpc	r19, r25
    2204:	a8 f4       	brcc	.+42     	; 0x2230 <__stack+0x31>
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	fc 01       	movw	r30, r24
    220c:	24 81       	ldd	r18, Z+4	; 0x04
    220e:	35 81       	ldd	r19, Z+5	; 0x05
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	fc 01       	movw	r30, r24
    2216:	80 a1       	ldd	r24, Z+32	; 0x20
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	91 95       	neg	r25
    221e:	81 95       	neg	r24
    2220:	91 09       	sbc	r25, r1
    2222:	28 0f       	add	r18, r24
    2224:	39 1f       	adc	r19, r25
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	fc 01       	movw	r30, r24
    222c:	37 83       	std	Z+7, r19	; 0x07
    222e:	26 83       	std	Z+6, r18	; 0x06
    2230:	8f 81       	ldd	r24, Y+7	; 0x07
    2232:	82 30       	cpi	r24, 0x02	; 2
    2234:	31 f4       	brne	.+12     	; 0x2242 <__stack+0x43>
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	88 23       	and	r24, r24
    223a:	19 f0       	breq	.+6      	; 0x2242 <__stack+0x43>
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	81 50       	subi	r24, 0x01	; 1
    2240:	8a 83       	std	Y+2, r24	; 0x02
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	21 e0       	ldi	r18, 0x01	; 1
    2246:	28 0f       	add	r18, r24
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	fc 01       	movw	r30, r24
    224e:	26 8f       	std	Z+30, r18	; 0x1e
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	27 96       	adiw	r28, 0x07	; 7
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	08 95       	ret

00002264 <prvCopyDataFromQueue>:
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	00 d0       	rcall	.+0      	; 0x226a <prvCopyDataFromQueue+0x6>
    226a:	1f 92       	push	r1
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	7c 83       	std	Y+4, r23	; 0x04
    2276:	6b 83       	std	Y+3, r22	; 0x03
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	9a 81       	ldd	r25, Y+2	; 0x02
    227c:	fc 01       	movw	r30, r24
    227e:	80 a1       	ldd	r24, Z+32	; 0x20
    2280:	88 23       	and	r24, r24
    2282:	c9 f1       	breq	.+114    	; 0x22f6 <prvCopyDataFromQueue+0x92>
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	fc 01       	movw	r30, r24
    228a:	26 81       	ldd	r18, Z+6	; 0x06
    228c:	37 81       	ldd	r19, Z+7	; 0x07
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	fc 01       	movw	r30, r24
    2294:	80 a1       	ldd	r24, Z+32	; 0x20
    2296:	88 2f       	mov	r24, r24
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	28 0f       	add	r18, r24
    229c:	39 1f       	adc	r19, r25
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	fc 01       	movw	r30, r24
    22a4:	37 83       	std	Z+7, r19	; 0x07
    22a6:	26 83       	std	Z+6, r18	; 0x06
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	9a 81       	ldd	r25, Y+2	; 0x02
    22ac:	fc 01       	movw	r30, r24
    22ae:	26 81       	ldd	r18, Z+6	; 0x06
    22b0:	37 81       	ldd	r19, Z+7	; 0x07
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	fc 01       	movw	r30, r24
    22b8:	84 81       	ldd	r24, Z+4	; 0x04
    22ba:	95 81       	ldd	r25, Z+5	; 0x05
    22bc:	28 17       	cp	r18, r24
    22be:	39 07       	cpc	r19, r25
    22c0:	50 f0       	brcs	.+20     	; 0x22d6 <prvCopyDataFromQueue+0x72>
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	9a 81       	ldd	r25, Y+2	; 0x02
    22c6:	fc 01       	movw	r30, r24
    22c8:	20 81       	ld	r18, Z
    22ca:	31 81       	ldd	r19, Z+1	; 0x01
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	9a 81       	ldd	r25, Y+2	; 0x02
    22d0:	fc 01       	movw	r30, r24
    22d2:	37 83       	std	Z+7, r19	; 0x07
    22d4:	26 83       	std	Z+6, r18	; 0x06
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	fc 01       	movw	r30, r24
    22dc:	80 a1       	ldd	r24, Z+32	; 0x20
    22de:	48 2f       	mov	r20, r24
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	9a 81       	ldd	r25, Y+2	; 0x02
    22e6:	fc 01       	movw	r30, r24
    22e8:	26 81       	ldd	r18, Z+6	; 0x06
    22ea:	37 81       	ldd	r19, Z+7	; 0x07
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	b9 01       	movw	r22, r18
    22f2:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <memcpy>
    22f6:	00 00       	nop
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	08 95       	ret

00002306 <prvUnlockQueue>:
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	00 d0       	rcall	.+0      	; 0x230c <prvUnlockQueue+0x6>
    230c:	1f 92       	push	r1
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	9c 83       	std	Y+4, r25	; 0x04
    2314:	8b 83       	std	Y+3, r24	; 0x03
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	0f 92       	push	r0
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	fc 01       	movw	r30, r24
    2322:	82 a1       	ldd	r24, Z+34	; 0x22
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	12 c0       	rjmp	.+36     	; 0x234c <prvUnlockQueue+0x46>
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	fc 01       	movw	r30, r24
    232e:	83 89       	ldd	r24, Z+19	; 0x13
    2330:	88 23       	and	r24, r24
    2332:	81 f0       	breq	.+32     	; 0x2354 <prvUnlockQueue+0x4e>
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	43 96       	adiw	r24, 0x13	; 19
    233a:	0e 94 3c 20 	call	0x4078	; 0x4078 <xTaskRemoveFromEventList>
    233e:	88 23       	and	r24, r24
    2340:	11 f0       	breq	.+4      	; 0x2346 <prvUnlockQueue+0x40>
    2342:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <vTaskMissedYield>
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	81 50       	subi	r24, 0x01	; 1
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	18 16       	cp	r1, r24
    2350:	5c f3       	brlt	.-42     	; 0x2328 <prvUnlockQueue+0x22>
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <prvUnlockQueue+0x50>
    2354:	00 00       	nop
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	2f ef       	ldi	r18, 0xFF	; 255
    235c:	fc 01       	movw	r30, r24
    235e:	22 a3       	std	Z+34, r18	; 0x22
    2360:	0f 90       	pop	r0
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	0f 92       	push	r0
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	fc 01       	movw	r30, r24
    2370:	81 a1       	ldd	r24, Z+33	; 0x21
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	12 c0       	rjmp	.+36     	; 0x239a <prvUnlockQueue+0x94>
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	9c 81       	ldd	r25, Y+4	; 0x04
    237a:	fc 01       	movw	r30, r24
    237c:	80 85       	ldd	r24, Z+8	; 0x08
    237e:	88 23       	and	r24, r24
    2380:	81 f0       	breq	.+32     	; 0x23a2 <prvUnlockQueue+0x9c>
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	08 96       	adiw	r24, 0x08	; 8
    2388:	0e 94 3c 20 	call	0x4078	; 0x4078 <xTaskRemoveFromEventList>
    238c:	88 23       	and	r24, r24
    238e:	11 f0       	breq	.+4      	; 0x2394 <prvUnlockQueue+0x8e>
    2390:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <vTaskMissedYield>
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	81 50       	subi	r24, 0x01	; 1
    2398:	8a 83       	std	Y+2, r24	; 0x02
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	18 16       	cp	r1, r24
    239e:	5c f3       	brlt	.-42     	; 0x2376 <prvUnlockQueue+0x70>
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <prvUnlockQueue+0x9e>
    23a2:	00 00       	nop
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	2f ef       	ldi	r18, 0xFF	; 255
    23aa:	fc 01       	movw	r30, r24
    23ac:	21 a3       	std	Z+33, r18	; 0x21
    23ae:	0f 90       	pop	r0
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	00 00       	nop
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	08 95       	ret

000023c2 <prvIsQueueEmpty>:
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	00 d0       	rcall	.+0      	; 0x23c8 <prvIsQueueEmpty+0x6>
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	9b 83       	std	Y+3, r25	; 0x03
    23ce:	8a 83       	std	Y+2, r24	; 0x02
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	0f 92       	push	r0
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	9b 81       	ldd	r25, Y+3	; 0x03
    23da:	fc 01       	movw	r30, r24
    23dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    23de:	88 23       	and	r24, r24
    23e0:	19 f4       	brne	.+6      	; 0x23e8 <prvIsQueueEmpty+0x26>
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	01 c0       	rjmp	.+2      	; 0x23ea <prvIsQueueEmpty+0x28>
    23e8:	19 82       	std	Y+1, r1	; 0x01
    23ea:	0f 90       	pop	r0
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	08 95       	ret

000023fc <prvIsQueueFull>:
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	00 d0       	rcall	.+0      	; 0x2402 <prvIsQueueFull+0x6>
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	9b 83       	std	Y+3, r25	; 0x03
    2408:	8a 83       	std	Y+2, r24	; 0x02
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	0f 92       	push	r0
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	9b 81       	ldd	r25, Y+3	; 0x03
    2414:	fc 01       	movw	r30, r24
    2416:	26 8d       	ldd	r18, Z+30	; 0x1e
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	9b 81       	ldd	r25, Y+3	; 0x03
    241c:	fc 01       	movw	r30, r24
    241e:	87 8d       	ldd	r24, Z+31	; 0x1f
    2420:	28 17       	cp	r18, r24
    2422:	19 f4       	brne	.+6      	; 0x242a <prvIsQueueFull+0x2e>
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	01 c0       	rjmp	.+2      	; 0x242c <prvIsQueueFull+0x30>
    242a:	19 82       	std	Y+1, r1	; 0x01
    242c:	0f 90       	pop	r0
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	08 95       	ret

0000243e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    243e:	cf 93       	push	r28
    2440:	df 93       	push	r29
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	29 97       	sbiw	r28, 0x09	; 9
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	8b 83       	std	Y+3, r24	; 0x03
    2456:	4d 83       	std	Y+5, r20	; 0x05
    2458:	5e 83       	std	Y+6, r21	; 0x06
    245a:	6f 83       	std	Y+7, r22	; 0x07
    245c:	78 87       	std	Y+8, r23	; 0x08
    245e:	29 87       	std	Y+9, r18	; 0x09
        Queue_t * const pxQueue = xQueue;
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	9a 83       	std	Y+2, r25	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	0f 92       	push	r0
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	fc 01       	movw	r30, r24
    2474:	81 a1       	ldd	r24, Z+33	; 0x21
    2476:	8f 3f       	cpi	r24, 0xFF	; 255
    2478:	21 f4       	brne	.+8      	; 0x2482 <vQueueWaitForMessageRestricted+0x44>
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	9a 81       	ldd	r25, Y+2	; 0x02
    247e:	fc 01       	movw	r30, r24
    2480:	11 a2       	std	Z+33, r1	; 0x21
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	9a 81       	ldd	r25, Y+2	; 0x02
    2486:	fc 01       	movw	r30, r24
    2488:	82 a1       	ldd	r24, Z+34	; 0x22
    248a:	8f 3f       	cpi	r24, 0xFF	; 255
    248c:	21 f4       	brne	.+8      	; 0x2496 <vQueueWaitForMessageRestricted+0x58>
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	9a 81       	ldd	r25, Y+2	; 0x02
    2492:	fc 01       	movw	r30, r24
    2494:	12 a2       	std	Z+34, r1	; 0x22
    2496:	0f 90       	pop	r0
    2498:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	fc 01       	movw	r30, r24
    24a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    24a2:	88 23       	and	r24, r24
    24a4:	71 f4       	brne	.+28     	; 0x24c2 <vQueueWaitForMessageRestricted+0x84>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	fc 01       	movw	r30, r24
    24ac:	73 96       	adiw	r30, 0x13	; 19
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	af 81       	ldd	r26, Y+7	; 0x07
    24b4:	b8 85       	ldd	r27, Y+8	; 0x08
    24b6:	29 85       	ldd	r18, Y+9	; 0x09
    24b8:	ac 01       	movw	r20, r24
    24ba:	bd 01       	movw	r22, r26
    24bc:	cf 01       	movw	r24, r30
    24be:	0e 94 c5 1f 	call	0x3f8a	; 0x3f8a <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	1f df       	rcall	.-450    	; 0x2306 <prvUnlockQueue>
    }
    24c8:	00 00       	nop
    24ca:	29 96       	adiw	r28, 0x09	; 9
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	df 91       	pop	r29
    24d8:	cf 91       	pop	r28
    24da:	08 95       	ret

000024dc <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    24dc:	0f 93       	push	r16
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	28 97       	sbiw	r28, 0x08	; 8
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
    24f2:	9d 83       	std	Y+5, r25	; 0x05
    24f4:	8c 83       	std	Y+4, r24	; 0x04
    24f6:	7f 83       	std	Y+7, r23	; 0x07
    24f8:	6e 83       	std	Y+6, r22	; 0x06
    24fa:	48 87       	std	Y+8, r20	; 0x08
    24fc:	88 85       	ldd	r24, Y+8	; 0x08
    24fe:	81 30       	cpi	r24, 0x01	; 1
    2500:	19 f4       	brne	.+6      	; 0x2508 <xStreamBufferGenericCreate+0x2c>
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	8b 83       	std	Y+3, r24	; 0x03
    2506:	01 c0       	rjmp	.+2      	; 0x250a <xStreamBufferGenericCreate+0x2e>
    2508:	1b 82       	std	Y+3, r1	; 0x03
    250a:	8e 81       	ldd	r24, Y+6	; 0x06
    250c:	9f 81       	ldd	r25, Y+7	; 0x07
    250e:	89 2b       	or	r24, r25
    2510:	21 f4       	brne	.+8      	; 0x251a <xStreamBufferGenericCreate+0x3e>
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	9f 83       	std	Y+7, r25	; 0x07
    2518:	8e 83       	std	Y+6, r24	; 0x06
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	9d 81       	ldd	r25, Y+5	; 0x05
    251e:	9c 01       	movw	r18, r24
    2520:	20 5f       	subi	r18, 0xF0	; 240
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	8c 81       	ldd	r24, Y+4	; 0x04
    2526:	9d 81       	ldd	r25, Y+5	; 0x05
    2528:	82 17       	cp	r24, r18
    252a:	93 07       	cpc	r25, r19
    252c:	68 f4       	brcc	.+26     	; 0x2548 <xStreamBufferGenericCreate+0x6c>
    252e:	8c 81       	ldd	r24, Y+4	; 0x04
    2530:	9d 81       	ldd	r25, Y+5	; 0x05
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	9d 83       	std	Y+5, r25	; 0x05
    2536:	8c 83       	std	Y+4, r24	; 0x04
    2538:	8c 81       	ldd	r24, Y+4	; 0x04
    253a:	9d 81       	ldd	r25, Y+5	; 0x05
    253c:	0f 96       	adiw	r24, 0x0f	; 15
    253e:	0e 94 94 06 	call	0xd28	; 0xd28 <pvPortMalloc>
    2542:	9a 83       	std	Y+2, r25	; 0x02
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	02 c0       	rjmp	.+4      	; 0x254c <xStreamBufferGenericCreate+0x70>
    2548:	1a 82       	std	Y+2, r1	; 0x02
    254a:	19 82       	std	Y+1, r1	; 0x01
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	89 2b       	or	r24, r25
    2552:	69 f0       	breq	.+26     	; 0x256e <xStreamBufferGenericCreate+0x92>
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	bc 01       	movw	r22, r24
    255a:	61 5f       	subi	r22, 0xF1	; 241
    255c:	7f 4f       	sbci	r23, 0xFF	; 255
    255e:	2e 81       	ldd	r18, Y+6	; 0x06
    2560:	3f 81       	ldd	r19, Y+7	; 0x07
    2562:	4c 81       	ldd	r20, Y+4	; 0x04
    2564:	5d 81       	ldd	r21, Y+5	; 0x05
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	0b 81       	ldd	r16, Y+3	; 0x03
    256c:	38 d5       	rcall	.+2672   	; 0x2fde <prvInitialiseNewStreamBuffer>
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	9a 81       	ldd	r25, Y+2	; 0x02
    2572:	28 96       	adiw	r28, 0x08	; 8
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	0f 91       	pop	r16
    2584:	08 95       	ret

00002586 <xStreamBufferReset>:
    2586:	0f 93       	push	r16
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	00 d0       	rcall	.+0      	; 0x258e <xStreamBufferReset+0x8>
    258e:	1f 92       	push	r1
    2590:	1f 92       	push	r1
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	9d 83       	std	Y+5, r25	; 0x05
    2598:	8c 83       	std	Y+4, r24	; 0x04
    259a:	8c 81       	ldd	r24, Y+4	; 0x04
    259c:	9d 81       	ldd	r25, Y+5	; 0x05
    259e:	9b 83       	std	Y+3, r25	; 0x03
    25a0:	8a 83       	std	Y+2, r24	; 0x02
    25a2:	19 82       	std	Y+1, r1	; 0x01
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	0f 92       	push	r0
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	9b 81       	ldd	r25, Y+3	; 0x03
    25ae:	dc 01       	movw	r26, r24
    25b0:	18 96       	adiw	r26, 0x08	; 8
    25b2:	8d 91       	ld	r24, X+
    25b4:	9c 91       	ld	r25, X
    25b6:	19 97       	sbiw	r26, 0x09	; 9
    25b8:	89 2b       	or	r24, r25
    25ba:	39 f5       	brne	.+78     	; 0x260a <xStreamBufferReset+0x84>
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	fc 01       	movw	r30, r24
    25c2:	82 85       	ldd	r24, Z+10	; 0x0a
    25c4:	93 85       	ldd	r25, Z+11	; 0x0b
    25c6:	89 2b       	or	r24, r25
    25c8:	01 f5       	brne	.+64     	; 0x260a <xStreamBufferReset+0x84>
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	dc 01       	movw	r26, r24
    25d0:	1e 96       	adiw	r26, 0x0e	; 14
    25d2:	ec 91       	ld	r30, X
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	9b 81       	ldd	r25, Y+3	; 0x03
    25d8:	dc 01       	movw	r26, r24
    25da:	16 96       	adiw	r26, 0x06	; 6
    25dc:	2d 91       	ld	r18, X+
    25de:	3c 91       	ld	r19, X
    25e0:	17 97       	sbiw	r26, 0x07	; 7
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	9b 81       	ldd	r25, Y+3	; 0x03
    25e6:	dc 01       	movw	r26, r24
    25e8:	14 96       	adiw	r26, 0x04	; 4
    25ea:	4d 91       	ld	r20, X+
    25ec:	5c 91       	ld	r21, X
    25ee:	15 97       	sbiw	r26, 0x05	; 5
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	9b 81       	ldd	r25, Y+3	; 0x03
    25f4:	dc 01       	movw	r26, r24
    25f6:	1c 96       	adiw	r26, 0x0c	; 12
    25f8:	6d 91       	ld	r22, X+
    25fa:	7c 91       	ld	r23, X
    25fc:	1d 97       	sbiw	r26, 0x0d	; 13
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	9b 81       	ldd	r25, Y+3	; 0x03
    2602:	0e 2f       	mov	r16, r30
    2604:	ec d4       	rcall	.+2520   	; 0x2fde <prvInitialiseNewStreamBuffer>
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	0f 90       	pop	r0
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	0f 91       	pop	r16
    2620:	08 95       	ret

00002622 <xStreamBufferSpacesAvailable>:
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	00 d0       	rcall	.+0      	; 0x2628 <xStreamBufferSpacesAvailable+0x6>
    2628:	00 d0       	rcall	.+0      	; 0x262a <xStreamBufferSpacesAvailable+0x8>
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	9e 81       	ldd	r25, Y+6	; 0x06
    2636:	9c 83       	std	Y+4, r25	; 0x04
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	fc 01       	movw	r30, r24
    2640:	24 81       	ldd	r18, Z+4	; 0x04
    2642:	35 81       	ldd	r19, Z+5	; 0x05
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	fc 01       	movw	r30, r24
    264a:	80 81       	ld	r24, Z
    264c:	91 81       	ldd	r25, Z+1	; 0x01
    264e:	82 0f       	add	r24, r18
    2650:	93 1f       	adc	r25, r19
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	fc 01       	movw	r30, r24
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	29 81       	ldd	r18, Y+1	; 0x01
    2662:	3a 81       	ldd	r19, Y+2	; 0x02
    2664:	a9 01       	movw	r20, r18
    2666:	48 1b       	sub	r20, r24
    2668:	59 0b       	sbc	r21, r25
    266a:	ca 01       	movw	r24, r20
    266c:	9a 83       	std	Y+2, r25	; 0x02
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9a 83       	std	Y+2, r25	; 0x02
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	fc 01       	movw	r30, r24
    2680:	24 81       	ldd	r18, Z+4	; 0x04
    2682:	35 81       	ldd	r19, Z+5	; 0x05
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	9a 81       	ldd	r25, Y+2	; 0x02
    2688:	82 17       	cp	r24, r18
    268a:	93 07       	cpc	r25, r19
    268c:	68 f0       	brcs	.+26     	; 0x26a8 <xStreamBufferSpacesAvailable+0x86>
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	fc 01       	movw	r30, r24
    2694:	84 81       	ldd	r24, Z+4	; 0x04
    2696:	95 81       	ldd	r25, Z+5	; 0x05
    2698:	29 81       	ldd	r18, Y+1	; 0x01
    269a:	3a 81       	ldd	r19, Y+2	; 0x02
    269c:	a9 01       	movw	r20, r18
    269e:	48 1b       	sub	r20, r24
    26a0:	59 0b       	sbc	r21, r25
    26a2:	ca 01       	movw	r24, r20
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	26 96       	adiw	r28, 0x06	; 6
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	08 95       	ret

000026be <xStreamBufferSend>:
    26be:	af 92       	push	r10
    26c0:	bf 92       	push	r11
    26c2:	cf 92       	push	r12
    26c4:	df 92       	push	r13
    26c6:	ef 92       	push	r14
    26c8:	ff 92       	push	r15
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	69 97       	sbiw	r28, 0x19	; 25
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	99 8b       	std	Y+17, r25	; 0x11
    26e4:	88 8b       	std	Y+16, r24	; 0x10
    26e6:	7b 8b       	std	Y+19, r23	; 0x13
    26e8:	6a 8b       	std	Y+18, r22	; 0x12
    26ea:	5d 8b       	std	Y+21, r21	; 0x15
    26ec:	4c 8b       	std	Y+20, r20	; 0x14
    26ee:	0e 8b       	std	Y+22, r16	; 0x16
    26f0:	1f 8b       	std	Y+23, r17	; 0x17
    26f2:	28 8f       	std	Y+24, r18	; 0x18
    26f4:	39 8f       	std	Y+25, r19	; 0x19
    26f6:	88 89       	ldd	r24, Y+16	; 0x10
    26f8:	99 89       	ldd	r25, Y+17	; 0x11
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	1a 82       	std	Y+2, r1	; 0x02
    2700:	19 82       	std	Y+1, r1	; 0x01
    2702:	8c 89       	ldd	r24, Y+20	; 0x14
    2704:	9d 89       	ldd	r25, Y+21	; 0x15
    2706:	9c 83       	std	Y+4, r25	; 0x04
    2708:	8b 83       	std	Y+3, r24	; 0x03
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	9e 81       	ldd	r25, Y+6	; 0x06
    270e:	fc 01       	movw	r30, r24
    2710:	84 81       	ldd	r24, Z+4	; 0x04
    2712:	95 81       	ldd	r25, Z+5	; 0x05
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	98 87       	std	Y+8, r25	; 0x08
    2718:	8f 83       	std	Y+7, r24	; 0x07
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	9e 81       	ldd	r25, Y+6	; 0x06
    271e:	fc 01       	movw	r30, r24
    2720:	86 85       	ldd	r24, Z+14	; 0x0e
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	81 70       	andi	r24, 0x01	; 1
    2728:	99 27       	eor	r25, r25
    272a:	89 2b       	or	r24, r25
    272c:	89 f0       	breq	.+34     	; 0x2750 <xStreamBufferSend+0x92>
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	02 96       	adiw	r24, 0x02	; 2
    2734:	9c 83       	std	Y+4, r25	; 0x04
    2736:	8b 83       	std	Y+3, r24	; 0x03
    2738:	2b 81       	ldd	r18, Y+3	; 0x03
    273a:	3c 81       	ldd	r19, Y+4	; 0x04
    273c:	8f 81       	ldd	r24, Y+7	; 0x07
    273e:	98 85       	ldd	r25, Y+8	; 0x08
    2740:	82 17       	cp	r24, r18
    2742:	93 07       	cpc	r25, r19
    2744:	80 f4       	brcc	.+32     	; 0x2766 <xStreamBufferSend+0xa8>
    2746:	1e 8a       	std	Y+22, r1	; 0x16
    2748:	1f 8a       	std	Y+23, r1	; 0x17
    274a:	18 8e       	std	Y+24, r1	; 0x18
    274c:	19 8e       	std	Y+25, r1	; 0x19
    274e:	0b c0       	rjmp	.+22     	; 0x2766 <xStreamBufferSend+0xa8>
    2750:	2b 81       	ldd	r18, Y+3	; 0x03
    2752:	3c 81       	ldd	r19, Y+4	; 0x04
    2754:	8f 81       	ldd	r24, Y+7	; 0x07
    2756:	98 85       	ldd	r25, Y+8	; 0x08
    2758:	82 17       	cp	r24, r18
    275a:	93 07       	cpc	r25, r19
    275c:	20 f4       	brcc	.+8      	; 0x2766 <xStreamBufferSend+0xa8>
    275e:	8f 81       	ldd	r24, Y+7	; 0x07
    2760:	98 85       	ldd	r25, Y+8	; 0x08
    2762:	9c 83       	std	Y+4, r25	; 0x04
    2764:	8b 83       	std	Y+3, r24	; 0x03
    2766:	8e 89       	ldd	r24, Y+22	; 0x16
    2768:	9f 89       	ldd	r25, Y+23	; 0x17
    276a:	a8 8d       	ldd	r26, Y+24	; 0x18
    276c:	b9 8d       	ldd	r27, Y+25	; 0x19
    276e:	89 2b       	or	r24, r25
    2770:	8a 2b       	or	r24, r26
    2772:	8b 2b       	or	r24, r27
    2774:	09 f4       	brne	.+2      	; 0x2778 <xStreamBufferSend+0xba>
    2776:	47 c0       	rjmp	.+142    	; 0x2806 <xStreamBufferSend+0x148>
    2778:	ce 01       	movw	r24, r28
    277a:	0b 96       	adiw	r24, 0x0b	; 11
    277c:	0e 94 ef 22 	call	0x45de	; 0x45de <vTaskSetTimeOutState>
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	0f 92       	push	r0
    2786:	8d 81       	ldd	r24, Y+5	; 0x05
    2788:	9e 81       	ldd	r25, Y+6	; 0x06
    278a:	4b df       	rcall	.-362    	; 0x2622 <xStreamBufferSpacesAvailable>
    278c:	9a 83       	std	Y+2, r25	; 0x02
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	29 81       	ldd	r18, Y+1	; 0x01
    2792:	3a 81       	ldd	r19, Y+2	; 0x02
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	9c 81       	ldd	r25, Y+4	; 0x04
    2798:	28 17       	cp	r18, r24
    279a:	39 07       	cpc	r19, r25
    279c:	70 f4       	brcc	.+28     	; 0x27ba <xStreamBufferSend+0xfc>
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <xTaskGenericNotifyStateClear>
    27a8:	0e 94 ae 24 	call	0x495c	; 0x495c <xTaskGetCurrentTaskHandle>
    27ac:	9c 01       	movw	r18, r24
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	fc 01       	movw	r30, r24
    27b4:	33 87       	std	Z+11, r19	; 0x0b
    27b6:	22 87       	std	Z+10, r18	; 0x0a
    27b8:	03 c0       	rjmp	.+6      	; 0x27c0 <xStreamBufferSend+0x102>
    27ba:	0f 90       	pop	r0
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	23 c0       	rjmp	.+70     	; 0x2806 <xStreamBufferSend+0x148>
    27c0:	0f 90       	pop	r0
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	8e 89       	ldd	r24, Y+22	; 0x16
    27c6:	9f 89       	ldd	r25, Y+23	; 0x17
    27c8:	a8 8d       	ldd	r26, Y+24	; 0x18
    27ca:	b9 8d       	ldd	r27, Y+25	; 0x19
    27cc:	5c 01       	movw	r10, r24
    27ce:	6d 01       	movw	r12, r26
    27d0:	e1 2c       	mov	r14, r1
    27d2:	f1 2c       	mov	r15, r1
    27d4:	00 e0       	ldi	r16, 0x00	; 0
    27d6:	10 e0       	ldi	r17, 0x00	; 0
    27d8:	98 01       	movw	r18, r16
    27da:	40 e0       	ldi	r20, 0x00	; 0
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	ba 01       	movw	r22, r20
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	0e 94 3e 28 	call	0x507c	; 0x507c <xTaskGenericNotifyWait>
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	fc 01       	movw	r30, r24
    27ec:	13 86       	std	Z+11, r1	; 0x0b
    27ee:	12 86       	std	Z+10, r1	; 0x0a
    27f0:	9e 01       	movw	r18, r28
    27f2:	2a 5e       	subi	r18, 0xEA	; 234
    27f4:	3f 4f       	sbci	r19, 0xFF	; 255
    27f6:	ce 01       	movw	r24, r28
    27f8:	0b 96       	adiw	r24, 0x0b	; 11
    27fa:	b9 01       	movw	r22, r18
    27fc:	0e 94 3a 23 	call	0x4674	; 0x4674 <xTaskCheckForTimeOut>
    2800:	88 23       	and	r24, r24
    2802:	09 f4       	brne	.+2      	; 0x2806 <xStreamBufferSend+0x148>
    2804:	bd cf       	rjmp	.-134    	; 0x2780 <xStreamBufferSend+0xc2>
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	9a 81       	ldd	r25, Y+2	; 0x02
    280a:	89 2b       	or	r24, r25
    280c:	29 f4       	brne	.+10     	; 0x2818 <xStreamBufferSend+0x15a>
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	9e 81       	ldd	r25, Y+6	; 0x06
    2812:	07 df       	rcall	.-498    	; 0x2622 <xStreamBufferSpacesAvailable>
    2814:	9a 83       	std	Y+2, r25	; 0x02
    2816:	89 83       	std	Y+1, r24	; 0x01
    2818:	eb 81       	ldd	r30, Y+3	; 0x03
    281a:	fc 81       	ldd	r31, Y+4	; 0x04
    281c:	29 81       	ldd	r18, Y+1	; 0x01
    281e:	3a 81       	ldd	r19, Y+2	; 0x02
    2820:	4c 89       	ldd	r20, Y+20	; 0x14
    2822:	5d 89       	ldd	r21, Y+21	; 0x15
    2824:	6a 89       	ldd	r22, Y+18	; 0x12
    2826:	7b 89       	ldd	r23, Y+19	; 0x13
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	8f 01       	movw	r16, r30
    282e:	c2 d0       	rcall	.+388    	; 0x29b4 <prvWriteMessageToBuffer>
    2830:	9a 87       	std	Y+10, r25	; 0x0a
    2832:	89 87       	std	Y+9, r24	; 0x09
    2834:	89 85       	ldd	r24, Y+9	; 0x09
    2836:	9a 85       	ldd	r25, Y+10	; 0x0a
    2838:	89 2b       	or	r24, r25
    283a:	41 f1       	breq	.+80     	; 0x288c <xStreamBufferSend+0x1ce>
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	8b d3       	rcall	.+1814   	; 0x2f58 <prvBytesInBuffer>
    2842:	9c 01       	movw	r18, r24
    2844:	8d 81       	ldd	r24, Y+5	; 0x05
    2846:	9e 81       	ldd	r25, Y+6	; 0x06
    2848:	fc 01       	movw	r30, r24
    284a:	86 81       	ldd	r24, Z+6	; 0x06
    284c:	97 81       	ldd	r25, Z+7	; 0x07
    284e:	28 17       	cp	r18, r24
    2850:	39 07       	cpc	r19, r25
    2852:	e0 f0       	brcs	.+56     	; 0x288c <xStreamBufferSend+0x1ce>
    2854:	a8 d6       	rcall	.+3408   	; 0x35a6 <vTaskSuspendAll>
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	9e 81       	ldd	r25, Y+6	; 0x06
    285a:	fc 01       	movw	r30, r24
    285c:	80 85       	ldd	r24, Z+8	; 0x08
    285e:	91 85       	ldd	r25, Z+9	; 0x09
    2860:	89 2b       	or	r24, r25
    2862:	99 f0       	breq	.+38     	; 0x288a <xStreamBufferSend+0x1cc>
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	fc 01       	movw	r30, r24
    286a:	80 85       	ldd	r24, Z+8	; 0x08
    286c:	91 85       	ldd	r25, Z+9	; 0x09
    286e:	e1 2c       	mov	r14, r1
    2870:	f1 2c       	mov	r15, r1
    2872:	00 e0       	ldi	r16, 0x00	; 0
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	a9 01       	movw	r20, r18
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	0e 94 45 29 	call	0x528a	; 0x528a <xTaskGenericNotify>
    2880:	8d 81       	ldd	r24, Y+5	; 0x05
    2882:	9e 81       	ldd	r25, Y+6	; 0x06
    2884:	fc 01       	movw	r30, r24
    2886:	11 86       	std	Z+9, r1	; 0x09
    2888:	10 86       	std	Z+8, r1	; 0x08
    288a:	9a d6       	rcall	.+3380   	; 0x35c0 <xTaskResumeAll>
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	69 96       	adiw	r28, 0x19	; 25
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	ff 90       	pop	r15
    28a6:	ef 90       	pop	r14
    28a8:	df 90       	pop	r13
    28aa:	cf 90       	pop	r12
    28ac:	bf 90       	pop	r11
    28ae:	af 90       	pop	r10
    28b0:	08 95       	ret

000028b2 <xStreamBufferSendFromISR>:
    28b2:	cf 92       	push	r12
    28b4:	df 92       	push	r13
    28b6:	ef 92       	push	r14
    28b8:	ff 92       	push	r15
    28ba:	0f 93       	push	r16
    28bc:	1f 93       	push	r17
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	61 97       	sbiw	r28, 0x11	; 17
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	9b 87       	std	Y+11, r25	; 0x0b
    28d4:	8a 87       	std	Y+10, r24	; 0x0a
    28d6:	7d 87       	std	Y+13, r23	; 0x0d
    28d8:	6c 87       	std	Y+12, r22	; 0x0c
    28da:	5f 87       	std	Y+15, r21	; 0x0f
    28dc:	4e 87       	std	Y+14, r20	; 0x0e
    28de:	39 8b       	std	Y+17, r19	; 0x11
    28e0:	28 8b       	std	Y+16, r18	; 0x10
    28e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28e6:	9c 83       	std	Y+4, r25	; 0x04
    28e8:	8b 83       	std	Y+3, r24	; 0x03
    28ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    28ee:	9a 83       	std	Y+2, r25	; 0x02
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
    28f6:	fc 01       	movw	r30, r24
    28f8:	86 85       	ldd	r24, Z+14	; 0x0e
    28fa:	88 2f       	mov	r24, r24
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	81 70       	andi	r24, 0x01	; 1
    2900:	99 27       	eor	r25, r25
    2902:	89 2b       	or	r24, r25
    2904:	29 f0       	breq	.+10     	; 0x2910 <xStreamBufferSendFromISR+0x5e>
    2906:	89 81       	ldd	r24, Y+1	; 0x01
    2908:	9a 81       	ldd	r25, Y+2	; 0x02
    290a:	02 96       	adiw	r24, 0x02	; 2
    290c:	9a 83       	std	Y+2, r25	; 0x02
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	8b 81       	ldd	r24, Y+3	; 0x03
    2912:	9c 81       	ldd	r25, Y+4	; 0x04
    2914:	86 de       	rcall	.-756    	; 0x2622 <xStreamBufferSpacesAvailable>
    2916:	9e 83       	std	Y+6, r25	; 0x06
    2918:	8d 83       	std	Y+5, r24	; 0x05
    291a:	e9 81       	ldd	r30, Y+1	; 0x01
    291c:	fa 81       	ldd	r31, Y+2	; 0x02
    291e:	2d 81       	ldd	r18, Y+5	; 0x05
    2920:	3e 81       	ldd	r19, Y+6	; 0x06
    2922:	4e 85       	ldd	r20, Y+14	; 0x0e
    2924:	5f 85       	ldd	r21, Y+15	; 0x0f
    2926:	6c 85       	ldd	r22, Y+12	; 0x0c
    2928:	7d 85       	ldd	r23, Y+13	; 0x0d
    292a:	8b 81       	ldd	r24, Y+3	; 0x03
    292c:	9c 81       	ldd	r25, Y+4	; 0x04
    292e:	8f 01       	movw	r16, r30
    2930:	41 d0       	rcall	.+130    	; 0x29b4 <prvWriteMessageToBuffer>
    2932:	98 87       	std	Y+8, r25	; 0x08
    2934:	8f 83       	std	Y+7, r24	; 0x07
    2936:	8f 81       	ldd	r24, Y+7	; 0x07
    2938:	98 85       	ldd	r25, Y+8	; 0x08
    293a:	89 2b       	or	r24, r25
    293c:	51 f1       	breq	.+84     	; 0x2992 <xStreamBufferSendFromISR+0xe0>
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	0a d3       	rcall	.+1556   	; 0x2f58 <prvBytesInBuffer>
    2944:	9c 01       	movw	r18, r24
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	fc 01       	movw	r30, r24
    294c:	86 81       	ldd	r24, Z+6	; 0x06
    294e:	97 81       	ldd	r25, Z+7	; 0x07
    2950:	28 17       	cp	r18, r24
    2952:	39 07       	cpc	r19, r25
    2954:	f0 f0       	brcs	.+60     	; 0x2992 <xStreamBufferSendFromISR+0xe0>
    2956:	19 86       	std	Y+9, r1	; 0x09
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	fc 01       	movw	r30, r24
    295e:	80 85       	ldd	r24, Z+8	; 0x08
    2960:	91 85       	ldd	r25, Z+9	; 0x09
    2962:	89 2b       	or	r24, r25
    2964:	b1 f0       	breq	.+44     	; 0x2992 <xStreamBufferSendFromISR+0xe0>
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	9c 81       	ldd	r25, Y+4	; 0x04
    296a:	fc 01       	movw	r30, r24
    296c:	80 85       	ldd	r24, Z+8	; 0x08
    296e:	91 85       	ldd	r25, Z+9	; 0x09
    2970:	28 89       	ldd	r18, Y+16	; 0x10
    2972:	39 89       	ldd	r19, Y+17	; 0x11
    2974:	69 01       	movw	r12, r18
    2976:	e1 2c       	mov	r14, r1
    2978:	f1 2c       	mov	r15, r1
    297a:	00 e0       	ldi	r16, 0x00	; 0
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	a9 01       	movw	r20, r18
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	0e 94 16 2b 	call	0x562c	; 0x562c <xTaskGenericNotifyFromISR>
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	9c 81       	ldd	r25, Y+4	; 0x04
    298c:	fc 01       	movw	r30, r24
    298e:	11 86       	std	Z+9, r1	; 0x09
    2990:	10 86       	std	Z+8, r1	; 0x08
    2992:	8f 81       	ldd	r24, Y+7	; 0x07
    2994:	98 85       	ldd	r25, Y+8	; 0x08
    2996:	61 96       	adiw	r28, 0x11	; 17
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	ff 90       	pop	r15
    29ac:	ef 90       	pop	r14
    29ae:	df 90       	pop	r13
    29b0:	cf 90       	pop	r12
    29b2:	08 95       	ret

000029b4 <prvWriteMessageToBuffer>:
    29b4:	0f 93       	push	r16
    29b6:	1f 93       	push	r17
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    29c0:	61 97       	sbiw	r28, 0x11	; 17
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	99 87       	std	Y+9, r25	; 0x09
    29ce:	88 87       	std	Y+8, r24	; 0x08
    29d0:	7b 87       	std	Y+11, r23	; 0x0b
    29d2:	6a 87       	std	Y+10, r22	; 0x0a
    29d4:	5d 87       	std	Y+13, r21	; 0x0d
    29d6:	4c 87       	std	Y+12, r20	; 0x0c
    29d8:	3f 87       	std	Y+15, r19	; 0x0f
    29da:	2e 87       	std	Y+14, r18	; 0x0e
    29dc:	19 8b       	std	Y+17, r17	; 0x11
    29de:	08 8b       	std	Y+16, r16	; 0x10
    29e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    29e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    29e4:	89 2b       	or	r24, r25
    29e6:	11 f4       	brne	.+4      	; 0x29ec <prvWriteMessageToBuffer+0x38>
    29e8:	19 82       	std	Y+1, r1	; 0x01
    29ea:	33 c0       	rjmp	.+102    	; 0x2a52 <prvWriteMessageToBuffer+0x9e>
    29ec:	88 85       	ldd	r24, Y+8	; 0x08
    29ee:	99 85       	ldd	r25, Y+9	; 0x09
    29f0:	fc 01       	movw	r30, r24
    29f2:	86 85       	ldd	r24, Z+14	; 0x0e
    29f4:	88 2f       	mov	r24, r24
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	81 70       	andi	r24, 0x01	; 1
    29fa:	99 27       	eor	r25, r25
    29fc:	89 2b       	or	r24, r25
    29fe:	a9 f4       	brne	.+42     	; 0x2a2a <prvWriteMessageToBuffer+0x76>
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a06:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a08:	9d 83       	std	Y+5, r25	; 0x05
    2a0a:	8c 83       	std	Y+4, r24	; 0x04
    2a0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a10:	9f 83       	std	Y+7, r25	; 0x07
    2a12:	8e 83       	std	Y+6, r24	; 0x06
    2a14:	2c 81       	ldd	r18, Y+4	; 0x04
    2a16:	3d 81       	ldd	r19, Y+5	; 0x05
    2a18:	8e 81       	ldd	r24, Y+6	; 0x06
    2a1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a1c:	28 17       	cp	r18, r24
    2a1e:	39 07       	cpc	r19, r25
    2a20:	08 f4       	brcc	.+2      	; 0x2a24 <prvWriteMessageToBuffer+0x70>
    2a22:	c9 01       	movw	r24, r18
    2a24:	9d 87       	std	Y+13, r25	; 0x0d
    2a26:	8c 87       	std	Y+12, r24	; 0x0c
    2a28:	14 c0       	rjmp	.+40     	; 0x2a52 <prvWriteMessageToBuffer+0x9e>
    2a2a:	2e 85       	ldd	r18, Y+14	; 0x0e
    2a2c:	3f 85       	ldd	r19, Y+15	; 0x0f
    2a2e:	88 89       	ldd	r24, Y+16	; 0x10
    2a30:	99 89       	ldd	r25, Y+17	; 0x11
    2a32:	28 17       	cp	r18, r24
    2a34:	39 07       	cpc	r19, r25
    2a36:	60 f0       	brcs	.+24     	; 0x2a50 <prvWriteMessageToBuffer+0x9c>
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	9e 01       	movw	r18, r28
    2a3e:	24 5f       	subi	r18, 0xF4	; 244
    2a40:	3f 4f       	sbci	r19, 0xFF	; 255
    2a42:	88 85       	ldd	r24, Y+8	; 0x08
    2a44:	99 85       	ldd	r25, Y+9	; 0x09
    2a46:	42 e0       	ldi	r20, 0x02	; 2
    2a48:	50 e0       	ldi	r21, 0x00	; 0
    2a4a:	b9 01       	movw	r22, r18
    2a4c:	4f d1       	rcall	.+670    	; 0x2cec <prvWriteBytesToBuffer>
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <prvWriteMessageToBuffer+0x9e>
    2a50:	19 82       	std	Y+1, r1	; 0x01
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	88 23       	and	r24, r24
    2a56:	59 f0       	breq	.+22     	; 0x2a6e <prvWriteMessageToBuffer+0xba>
    2a58:	4c 85       	ldd	r20, Y+12	; 0x0c
    2a5a:	5d 85       	ldd	r21, Y+13	; 0x0d
    2a5c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a5e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a60:	88 85       	ldd	r24, Y+8	; 0x08
    2a62:	99 85       	ldd	r25, Y+9	; 0x09
    2a64:	b9 01       	movw	r22, r18
    2a66:	42 d1       	rcall	.+644    	; 0x2cec <prvWriteBytesToBuffer>
    2a68:	9b 83       	std	Y+3, r25	; 0x03
    2a6a:	8a 83       	std	Y+2, r24	; 0x02
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <prvWriteMessageToBuffer+0xbe>
    2a6e:	1b 82       	std	Y+3, r1	; 0x03
    2a70:	1a 82       	std	Y+2, r1	; 0x02
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	61 96       	adiw	r28, 0x11	; 17
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	1f 91       	pop	r17
    2a88:	0f 91       	pop	r16
    2a8a:	08 95       	ret

00002a8c <xStreamBufferReceive>:
    2a8c:	af 92       	push	r10
    2a8e:	bf 92       	push	r11
    2a90:	cf 92       	push	r12
    2a92:	df 92       	push	r13
    2a94:	ef 92       	push	r14
    2a96:	ff 92       	push	r15
    2a98:	0f 93       	push	r16
    2a9a:	1f 93       	push	r17
    2a9c:	cf 93       	push	r28
    2a9e:	df 93       	push	r29
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	62 97       	sbiw	r28, 0x12	; 18
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	9a 87       	std	Y+10, r25	; 0x0a
    2ab2:	89 87       	std	Y+9, r24	; 0x09
    2ab4:	7c 87       	std	Y+12, r23	; 0x0c
    2ab6:	6b 87       	std	Y+11, r22	; 0x0b
    2ab8:	5e 87       	std	Y+14, r21	; 0x0e
    2aba:	4d 87       	std	Y+13, r20	; 0x0d
    2abc:	0f 87       	std	Y+15, r16	; 0x0f
    2abe:	18 8b       	std	Y+16, r17	; 0x10
    2ac0:	29 8b       	std	Y+17, r18	; 0x11
    2ac2:	3a 8b       	std	Y+18, r19	; 0x12
    2ac4:	89 85       	ldd	r24, Y+9	; 0x09
    2ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac8:	98 87       	std	Y+8, r25	; 0x08
    2aca:	8f 83       	std	Y+7, r24	; 0x07
    2acc:	1a 82       	std	Y+2, r1	; 0x02
    2ace:	19 82       	std	Y+1, r1	; 0x01
    2ad0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ad2:	98 85       	ldd	r25, Y+8	; 0x08
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	86 85       	ldd	r24, Z+14	; 0x0e
    2ad8:	88 2f       	mov	r24, r24
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	81 70       	andi	r24, 0x01	; 1
    2ade:	99 27       	eor	r25, r25
    2ae0:	89 2b       	or	r24, r25
    2ae2:	29 f0       	breq	.+10     	; 0x2aee <xStreamBufferReceive+0x62>
    2ae4:	82 e0       	ldi	r24, 0x02	; 2
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	9e 83       	std	Y+6, r25	; 0x06
    2aea:	8d 83       	std	Y+5, r24	; 0x05
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <xStreamBufferReceive+0x66>
    2aee:	1e 82       	std	Y+6, r1	; 0x06
    2af0:	1d 82       	std	Y+5, r1	; 0x05
    2af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af4:	98 89       	ldd	r25, Y+16	; 0x10
    2af6:	a9 89       	ldd	r26, Y+17	; 0x11
    2af8:	ba 89       	ldd	r27, Y+18	; 0x12
    2afa:	89 2b       	or	r24, r25
    2afc:	8a 2b       	or	r24, r26
    2afe:	8b 2b       	or	r24, r27
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <xStreamBufferReceive+0x78>
    2b02:	41 c0       	rjmp	.+130    	; 0x2b86 <xStreamBufferReceive+0xfa>
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	0f 92       	push	r0
    2b0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b0c:	98 85       	ldd	r25, Y+8	; 0x08
    2b0e:	24 d2       	rcall	.+1096   	; 0x2f58 <prvBytesInBuffer>
    2b10:	9c 83       	std	Y+4, r25	; 0x04
    2b12:	8b 83       	std	Y+3, r24	; 0x03
    2b14:	2b 81       	ldd	r18, Y+3	; 0x03
    2b16:	3c 81       	ldd	r19, Y+4	; 0x04
    2b18:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1c:	82 17       	cp	r24, r18
    2b1e:	93 07       	cpc	r25, r19
    2b20:	68 f0       	brcs	.+26     	; 0x2b3c <xStreamBufferReceive+0xb0>
    2b22:	60 e0       	ldi	r22, 0x00	; 0
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <xTaskGenericNotifyStateClear>
    2b2c:	0e 94 ae 24 	call	0x495c	; 0x495c <xTaskGetCurrentTaskHandle>
    2b30:	9c 01       	movw	r18, r24
    2b32:	8f 81       	ldd	r24, Y+7	; 0x07
    2b34:	98 85       	ldd	r25, Y+8	; 0x08
    2b36:	fc 01       	movw	r30, r24
    2b38:	31 87       	std	Z+9, r19	; 0x09
    2b3a:	20 87       	std	Z+8, r18	; 0x08
    2b3c:	0f 90       	pop	r0
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	2b 81       	ldd	r18, Y+3	; 0x03
    2b42:	3c 81       	ldd	r19, Y+4	; 0x04
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	82 17       	cp	r24, r18
    2b4a:	93 07       	cpc	r25, r19
    2b4c:	08 f1       	brcs	.+66     	; 0x2b90 <xStreamBufferReceive+0x104>
    2b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b50:	98 89       	ldd	r25, Y+16	; 0x10
    2b52:	a9 89       	ldd	r26, Y+17	; 0x11
    2b54:	ba 89       	ldd	r27, Y+18	; 0x12
    2b56:	5c 01       	movw	r10, r24
    2b58:	6d 01       	movw	r12, r26
    2b5a:	e1 2c       	mov	r14, r1
    2b5c:	f1 2c       	mov	r15, r1
    2b5e:	00 e0       	ldi	r16, 0x00	; 0
    2b60:	10 e0       	ldi	r17, 0x00	; 0
    2b62:	98 01       	movw	r18, r16
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	ba 01       	movw	r22, r20
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	0e 94 3e 28 	call	0x507c	; 0x507c <xTaskGenericNotifyWait>
    2b70:	8f 81       	ldd	r24, Y+7	; 0x07
    2b72:	98 85       	ldd	r25, Y+8	; 0x08
    2b74:	fc 01       	movw	r30, r24
    2b76:	11 86       	std	Z+9, r1	; 0x09
    2b78:	10 86       	std	Z+8, r1	; 0x08
    2b7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b7c:	98 85       	ldd	r25, Y+8	; 0x08
    2b7e:	ec d1       	rcall	.+984    	; 0x2f58 <prvBytesInBuffer>
    2b80:	9c 83       	std	Y+4, r25	; 0x04
    2b82:	8b 83       	std	Y+3, r24	; 0x03
    2b84:	05 c0       	rjmp	.+10     	; 0x2b90 <xStreamBufferReceive+0x104>
    2b86:	8f 81       	ldd	r24, Y+7	; 0x07
    2b88:	98 85       	ldd	r25, Y+8	; 0x08
    2b8a:	e6 d1       	rcall	.+972    	; 0x2f58 <prvBytesInBuffer>
    2b8c:	9c 83       	std	Y+4, r25	; 0x04
    2b8e:	8b 83       	std	Y+3, r24	; 0x03
    2b90:	2b 81       	ldd	r18, Y+3	; 0x03
    2b92:	3c 81       	ldd	r19, Y+4	; 0x04
    2b94:	8d 81       	ldd	r24, Y+5	; 0x05
    2b96:	9e 81       	ldd	r25, Y+6	; 0x06
    2b98:	82 17       	cp	r24, r18
    2b9a:	93 07       	cpc	r25, r19
    2b9c:	70 f5       	brcc	.+92     	; 0x2bfa <xStreamBufferReceive+0x16e>
    2b9e:	ed 81       	ldd	r30, Y+5	; 0x05
    2ba0:	fe 81       	ldd	r31, Y+6	; 0x06
    2ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba6:	4d 85       	ldd	r20, Y+13	; 0x0d
    2ba8:	5e 85       	ldd	r21, Y+14	; 0x0e
    2baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bae:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb0:	98 85       	ldd	r25, Y+8	; 0x08
    2bb2:	8f 01       	movw	r16, r30
    2bb4:	35 d0       	rcall	.+106    	; 0x2c20 <prvReadMessageFromBuffer>
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	89 2b       	or	r24, r25
    2bc0:	e1 f0       	breq	.+56     	; 0x2bfa <xStreamBufferReceive+0x16e>
    2bc2:	f1 d4       	rcall	.+2530   	; 0x35a6 <vTaskSuspendAll>
    2bc4:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc6:	98 85       	ldd	r25, Y+8	; 0x08
    2bc8:	fc 01       	movw	r30, r24
    2bca:	82 85       	ldd	r24, Z+10	; 0x0a
    2bcc:	93 85       	ldd	r25, Z+11	; 0x0b
    2bce:	89 2b       	or	r24, r25
    2bd0:	99 f0       	breq	.+38     	; 0x2bf8 <xStreamBufferReceive+0x16c>
    2bd2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bd4:	98 85       	ldd	r25, Y+8	; 0x08
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	82 85       	ldd	r24, Z+10	; 0x0a
    2bda:	93 85       	ldd	r25, Z+11	; 0x0b
    2bdc:	e1 2c       	mov	r14, r1
    2bde:	f1 2c       	mov	r15, r1
    2be0:	00 e0       	ldi	r16, 0x00	; 0
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	a9 01       	movw	r20, r18
    2be8:	60 e0       	ldi	r22, 0x00	; 0
    2bea:	0e 94 45 29 	call	0x528a	; 0x528a <xTaskGenericNotify>
    2bee:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf0:	98 85       	ldd	r25, Y+8	; 0x08
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	13 86       	std	Z+11, r1	; 0x0b
    2bf6:	12 86       	std	Z+10, r1	; 0x0a
    2bf8:	e3 d4       	rcall	.+2502   	; 0x35c0 <xTaskResumeAll>
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
    2bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfe:	62 96       	adiw	r28, 0x12	; 18
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	ff 90       	pop	r15
    2c14:	ef 90       	pop	r14
    2c16:	df 90       	pop	r13
    2c18:	cf 90       	pop	r12
    2c1a:	bf 90       	pop	r11
    2c1c:	af 90       	pop	r10
    2c1e:	08 95       	ret

00002c20 <prvReadMessageFromBuffer>:
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	62 97       	sbiw	r28, 0x12	; 18
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	9a 87       	std	Y+10, r25	; 0x0a
    2c3a:	89 87       	std	Y+9, r24	; 0x09
    2c3c:	7c 87       	std	Y+12, r23	; 0x0c
    2c3e:	6b 87       	std	Y+11, r22	; 0x0b
    2c40:	5e 87       	std	Y+14, r21	; 0x0e
    2c42:	4d 87       	std	Y+13, r20	; 0x0d
    2c44:	38 8b       	std	Y+16, r19	; 0x10
    2c46:	2f 87       	std	Y+15, r18	; 0x0f
    2c48:	1a 8b       	std	Y+18, r17	; 0x12
    2c4a:	09 8b       	std	Y+17, r16	; 0x11
    2c4c:	89 89       	ldd	r24, Y+17	; 0x11
    2c4e:	9a 89       	ldd	r25, Y+18	; 0x12
    2c50:	89 2b       	or	r24, r25
    2c52:	81 f1       	breq	.+96     	; 0x2cb4 <prvReadMessageFromBuffer+0x94>
    2c54:	89 85       	ldd	r24, Y+9	; 0x09
    2c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c58:	fc 01       	movw	r30, r24
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
    2c62:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c64:	38 89       	ldd	r19, Y+16	; 0x10
    2c66:	49 89       	ldd	r20, Y+17	; 0x11
    2c68:	5a 89       	ldd	r21, Y+18	; 0x12
    2c6a:	be 01       	movw	r22, r28
    2c6c:	69 5f       	subi	r22, 0xF9	; 249
    2c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c70:	89 85       	ldd	r24, Y+9	; 0x09
    2c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c74:	ca d0       	rcall	.+404    	; 0x2e0a <prvReadBytesFromBuffer>
    2c76:	8f 81       	ldd	r24, Y+7	; 0x07
    2c78:	98 85       	ldd	r25, Y+8	; 0x08
    2c7a:	9a 83       	std	Y+2, r25	; 0x02
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c80:	38 89       	ldd	r19, Y+16	; 0x10
    2c82:	89 89       	ldd	r24, Y+17	; 0x11
    2c84:	9a 89       	ldd	r25, Y+18	; 0x12
    2c86:	a9 01       	movw	r20, r18
    2c88:	48 1b       	sub	r20, r24
    2c8a:	59 0b       	sbc	r21, r25
    2c8c:	ca 01       	movw	r24, r20
    2c8e:	98 8b       	std	Y+16, r25	; 0x10
    2c90:	8f 87       	std	Y+15, r24	; 0x0f
    2c92:	29 81       	ldd	r18, Y+1	; 0x01
    2c94:	3a 81       	ldd	r19, Y+2	; 0x02
    2c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9a:	82 17       	cp	r24, r18
    2c9c:	93 07       	cpc	r25, r19
    2c9e:	70 f4       	brcc	.+28     	; 0x2cbc <prvReadMessageFromBuffer+0x9c>
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ca6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ca8:	fc 01       	movw	r30, r24
    2caa:	31 83       	std	Z+1, r19	; 0x01
    2cac:	20 83       	st	Z, r18
    2cae:	1a 82       	std	Y+2, r1	; 0x02
    2cb0:	19 82       	std	Y+1, r1	; 0x01
    2cb2:	04 c0       	rjmp	.+8      	; 0x2cbc <prvReadMessageFromBuffer+0x9c>
    2cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb8:	9a 83       	std	Y+2, r25	; 0x02
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	2f 85       	ldd	r18, Y+15	; 0x0f
    2cbe:	38 89       	ldd	r19, Y+16	; 0x10
    2cc0:	49 81       	ldd	r20, Y+1	; 0x01
    2cc2:	5a 81       	ldd	r21, Y+2	; 0x02
    2cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc8:	89 85       	ldd	r24, Y+9	; 0x09
    2cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ccc:	9e d0       	rcall	.+316    	; 0x2e0a <prvReadBytesFromBuffer>
    2cce:	9e 83       	std	Y+6, r25	; 0x06
    2cd0:	8d 83       	std	Y+5, r24	; 0x05
    2cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd6:	62 96       	adiw	r28, 0x12	; 18
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	df 91       	pop	r29
    2ce4:	cf 91       	pop	r28
    2ce6:	1f 91       	pop	r17
    2ce8:	0f 91       	pop	r16
    2cea:	08 95       	ret

00002cec <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	2e 97       	sbiw	r28, 0x0e	; 14
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	9a 87       	std	Y+10, r25	; 0x0a
    2d02:	89 87       	std	Y+9, r24	; 0x09
    2d04:	7c 87       	std	Y+12, r23	; 0x0c
    2d06:	6b 87       	std	Y+11, r22	; 0x0b
    2d08:	5e 87       	std	Y+14, r21	; 0x0e
    2d0a:	4d 87       	std	Y+13, r20	; 0x0d
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	fc 01       	movw	r30, r24
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    2d1a:	89 85       	ldd	r24, Y+9	; 0x09
    2d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1e:	fc 01       	movw	r30, r24
    2d20:	24 81       	ldd	r18, Z+4	; 0x04
    2d22:	35 81       	ldd	r19, Z+5	; 0x05
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	a9 01       	movw	r20, r18
    2d2a:	48 1b       	sub	r20, r24
    2d2c:	59 0b       	sbc	r21, r25
    2d2e:	ca 01       	movw	r24, r20
    2d30:	9c 83       	std	Y+4, r25	; 0x04
    2d32:	8b 83       	std	Y+3, r24	; 0x03
    2d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d38:	9e 83       	std	Y+6, r25	; 0x06
    2d3a:	8d 83       	std	Y+5, r24	; 0x05
    2d3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d40:	8d 81       	ldd	r24, Y+5	; 0x05
    2d42:	9e 81       	ldd	r25, Y+6	; 0x06
    2d44:	28 17       	cp	r18, r24
    2d46:	39 07       	cpc	r19, r25
    2d48:	08 f4       	brcc	.+2      	; 0x2d4c <prvWriteBytesToBuffer+0x60>
    2d4a:	c9 01       	movw	r24, r18
    2d4c:	98 87       	std	Y+8, r25	; 0x08
    2d4e:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2d50:	89 85       	ldd	r24, Y+9	; 0x09
    2d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d54:	fc 01       	movw	r30, r24
    2d56:	24 85       	ldd	r18, Z+12	; 0x0c
    2d58:	35 85       	ldd	r19, Z+13	; 0x0d
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	82 0f       	add	r24, r18
    2d60:	93 1f       	adc	r25, r19
    2d62:	4f 81       	ldd	r20, Y+7	; 0x07
    2d64:	58 85       	ldd	r21, Y+8	; 0x08
    2d66:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d68:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d6a:	b9 01       	movw	r22, r18
    2d6c:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    2d70:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d72:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d74:	8f 81       	ldd	r24, Y+7	; 0x07
    2d76:	98 85       	ldd	r25, Y+8	; 0x08
    2d78:	82 17       	cp	r24, r18
    2d7a:	93 07       	cpc	r25, r19
    2d7c:	a8 f4       	brcc	.+42     	; 0x2da8 <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2d7e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d80:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d82:	8f 81       	ldd	r24, Y+7	; 0x07
    2d84:	98 85       	ldd	r25, Y+8	; 0x08
    2d86:	a9 01       	movw	r20, r18
    2d88:	48 1b       	sub	r20, r24
    2d8a:	59 0b       	sbc	r21, r25
    2d8c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d8e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d90:	8f 81       	ldd	r24, Y+7	; 0x07
    2d92:	98 85       	ldd	r25, Y+8	; 0x08
    2d94:	28 0f       	add	r18, r24
    2d96:	39 1f       	adc	r19, r25
    2d98:	89 85       	ldd	r24, Y+9	; 0x09
    2d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	84 85       	ldd	r24, Z+12	; 0x0c
    2da0:	95 85       	ldd	r25, Z+13	; 0x0d
    2da2:	b9 01       	movw	r22, r18
    2da4:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    2da8:	29 81       	ldd	r18, Y+1	; 0x01
    2daa:	3a 81       	ldd	r19, Y+2	; 0x02
    2dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db0:	82 0f       	add	r24, r18
    2db2:	93 1f       	adc	r25, r19
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01

    if( xNextHead >= pxStreamBuffer->xLength )
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	24 81       	ldd	r18, Z+4	; 0x04
    2dc0:	35 81       	ldd	r19, Z+5	; 0x05
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc6:	82 17       	cp	r24, r18
    2dc8:	93 07       	cpc	r25, r19
    2dca:	68 f0       	brcs	.+26     	; 0x2de6 <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	84 81       	ldd	r24, Z+4	; 0x04
    2dd4:	95 81       	ldd	r25, Z+5	; 0x05
    2dd6:	29 81       	ldd	r18, Y+1	; 0x01
    2dd8:	3a 81       	ldd	r19, Y+2	; 0x02
    2dda:	a9 01       	movw	r20, r18
    2ddc:	48 1b       	sub	r20, r24
    2dde:	59 0b       	sbc	r21, r25
    2de0:	ca 01       	movw	r24, r20
    2de2:	9a 83       	std	Y+2, r25	; 0x02
    2de4:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    2de6:	89 85       	ldd	r24, Y+9	; 0x09
    2de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dea:	29 81       	ldd	r18, Y+1	; 0x01
    2dec:	3a 81       	ldd	r19, Y+2	; 0x02
    2dee:	fc 01       	movw	r30, r24
    2df0:	33 83       	std	Z+3, r19	; 0x03
    2df2:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    2df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df6:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    2df8:	2e 96       	adiw	r28, 0x0e	; 14
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	08 95       	ret

00002e0a <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	66 97       	sbiw	r28, 0x16	; 22
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	98 8b       	std	Y+16, r25	; 0x10
    2e20:	8f 87       	std	Y+15, r24	; 0x0f
    2e22:	7a 8b       	std	Y+18, r23	; 0x12
    2e24:	69 8b       	std	Y+17, r22	; 0x11
    2e26:	5c 8b       	std	Y+20, r21	; 0x14
    2e28:	4b 8b       	std	Y+19, r20	; 0x13
    2e2a:	3e 8b       	std	Y+22, r19	; 0x16
    2e2c:	2d 8b       	std	Y+21, r18	; 0x15
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    2e2e:	8d 89       	ldd	r24, Y+21	; 0x15
    2e30:	9e 89       	ldd	r25, Y+22	; 0x16
    2e32:	9c 83       	std	Y+4, r25	; 0x04
    2e34:	8b 83       	std	Y+3, r24	; 0x03
    2e36:	8b 89       	ldd	r24, Y+19	; 0x13
    2e38:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3a:	9e 83       	std	Y+6, r25	; 0x06
    2e3c:	8d 83       	std	Y+5, r24	; 0x05
    2e3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e40:	3c 81       	ldd	r19, Y+4	; 0x04
    2e42:	8d 81       	ldd	r24, Y+5	; 0x05
    2e44:	9e 81       	ldd	r25, Y+6	; 0x06
    2e46:	28 17       	cp	r18, r24
    2e48:	39 07       	cpc	r19, r25
    2e4a:	08 f4       	brcc	.+2      	; 0x2e4e <prvReadBytesFromBuffer+0x44>
    2e4c:	c9 01       	movw	r24, r18
    2e4e:	98 87       	std	Y+8, r25	; 0x08
    2e50:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    2e52:	8f 81       	ldd	r24, Y+7	; 0x07
    2e54:	98 85       	ldd	r25, Y+8	; 0x08
    2e56:	89 2b       	or	r24, r25
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <prvReadBytesFromBuffer+0x52>
    2e5a:	73 c0       	rjmp	.+230    	; 0x2f42 <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    2e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e5e:	98 89       	ldd	r25, Y+16	; 0x10
    2e60:	fc 01       	movw	r30, r24
    2e62:	80 81       	ld	r24, Z
    2e64:	91 81       	ldd	r25, Z+1	; 0x01
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    2e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e6c:	98 89       	ldd	r25, Y+16	; 0x10
    2e6e:	fc 01       	movw	r30, r24
    2e70:	24 81       	ldd	r18, Z+4	; 0x04
    2e72:	35 81       	ldd	r19, Z+5	; 0x05
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	9a 81       	ldd	r25, Y+2	; 0x02
    2e78:	a9 01       	movw	r20, r18
    2e7a:	48 1b       	sub	r20, r24
    2e7c:	59 0b       	sbc	r21, r25
    2e7e:	ca 01       	movw	r24, r20
    2e80:	9a 87       	std	Y+10, r25	; 0x0a
    2e82:	89 87       	std	Y+9, r24	; 0x09
    2e84:	8f 81       	ldd	r24, Y+7	; 0x07
    2e86:	98 85       	ldd	r25, Y+8	; 0x08
    2e88:	9c 87       	std	Y+12, r25	; 0x0c
    2e8a:	8b 87       	std	Y+11, r24	; 0x0b
    2e8c:	29 85       	ldd	r18, Y+9	; 0x09
    2e8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e90:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e92:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e94:	28 17       	cp	r18, r24
    2e96:	39 07       	cpc	r19, r25
    2e98:	08 f4       	brcc	.+2      	; 0x2e9c <prvReadBytesFromBuffer+0x92>
    2e9a:	c9 01       	movw	r24, r18
    2e9c:	9e 87       	std	Y+14, r25	; 0x0e
    2e9e:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea2:	98 89       	ldd	r25, Y+16	; 0x10
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	24 85       	ldd	r18, Z+12	; 0x0c
    2ea8:	35 85       	ldd	r19, Z+13	; 0x0d
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	9a 81       	ldd	r25, Y+2	; 0x02
    2eae:	28 0f       	add	r18, r24
    2eb0:	39 1f       	adc	r19, r25
    2eb2:	4d 85       	ldd	r20, Y+13	; 0x0d
    2eb4:	5e 85       	ldd	r21, Y+14	; 0x0e
    2eb6:	89 89       	ldd	r24, Y+17	; 0x11
    2eb8:	9a 89       	ldd	r25, Y+18	; 0x12
    2eba:	b9 01       	movw	r22, r18
    2ebc:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
    2ec0:	2f 81       	ldd	r18, Y+7	; 0x07
    2ec2:	38 85       	ldd	r19, Y+8	; 0x08
    2ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec8:	82 17       	cp	r24, r18
    2eca:	93 07       	cpc	r25, r19
    2ecc:	a0 f4       	brcc	.+40     	; 0x2ef6 <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2ece:	2f 81       	ldd	r18, Y+7	; 0x07
    2ed0:	38 85       	ldd	r19, Y+8	; 0x08
    2ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed6:	a9 01       	movw	r20, r18
    2ed8:	48 1b       	sub	r20, r24
    2eda:	59 0b       	sbc	r21, r25
    2edc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ede:	98 89       	ldd	r25, Y+16	; 0x10
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	64 85       	ldd	r22, Z+12	; 0x0c
    2ee4:	75 85       	ldd	r23, Z+13	; 0x0d
    2ee6:	29 89       	ldd	r18, Y+17	; 0x11
    2ee8:	3a 89       	ldd	r19, Y+18	; 0x12
    2eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eee:	82 0f       	add	r24, r18
    2ef0:	93 1f       	adc	r25, r19
    2ef2:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
    2ef6:	29 81       	ldd	r18, Y+1	; 0x01
    2ef8:	3a 81       	ldd	r19, Y+2	; 0x02
    2efa:	8f 81       	ldd	r24, Y+7	; 0x07
    2efc:	98 85       	ldd	r25, Y+8	; 0x08
    2efe:	82 0f       	add	r24, r18
    2f00:	93 1f       	adc	r25, r19
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    2f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f08:	98 89       	ldd	r25, Y+16	; 0x10
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	24 81       	ldd	r18, Z+4	; 0x04
    2f0e:	35 81       	ldd	r19, Z+5	; 0x05
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	9a 81       	ldd	r25, Y+2	; 0x02
    2f14:	82 17       	cp	r24, r18
    2f16:	93 07       	cpc	r25, r19
    2f18:	68 f0       	brcs	.+26     	; 0x2f34 <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    2f1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f1c:	98 89       	ldd	r25, Y+16	; 0x10
    2f1e:	fc 01       	movw	r30, r24
    2f20:	84 81       	ldd	r24, Z+4	; 0x04
    2f22:	95 81       	ldd	r25, Z+5	; 0x05
    2f24:	29 81       	ldd	r18, Y+1	; 0x01
    2f26:	3a 81       	ldd	r19, Y+2	; 0x02
    2f28:	a9 01       	movw	r20, r18
    2f2a:	48 1b       	sub	r20, r24
    2f2c:	59 0b       	sbc	r21, r25
    2f2e:	ca 01       	movw	r24, r20
    2f30:	9a 83       	std	Y+2, r25	; 0x02
    2f32:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    2f34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f36:	98 89       	ldd	r25, Y+16	; 0x10
    2f38:	29 81       	ldd	r18, Y+1	; 0x01
    2f3a:	3a 81       	ldd	r19, Y+2	; 0x02
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	31 83       	std	Z+1, r19	; 0x01
    2f40:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2f42:	8f 81       	ldd	r24, Y+7	; 0x07
    2f44:	98 85       	ldd	r25, Y+8	; 0x08
}
    2f46:	66 96       	adiw	r28, 0x16	; 22
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	df 91       	pop	r29
    2f54:	cf 91       	pop	r28
    2f56:	08 95       	ret

00002f58 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	00 d0       	rcall	.+0      	; 0x2f5e <prvBytesInBuffer+0x6>
    2f5e:	1f 92       	push	r1
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	9c 83       	std	Y+4, r25	; 0x04
    2f66:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	24 81       	ldd	r18, Z+4	; 0x04
    2f70:	35 81       	ldd	r19, Z+5	; 0x05
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	9c 81       	ldd	r25, Y+4	; 0x04
    2f76:	fc 01       	movw	r30, r24
    2f78:	82 81       	ldd	r24, Z+2	; 0x02
    2f7a:	93 81       	ldd	r25, Z+3	; 0x03
    2f7c:	82 0f       	add	r24, r18
    2f7e:	93 1f       	adc	r25, r19
    2f80:	9a 83       	std	Y+2, r25	; 0x02
    2f82:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	9c 81       	ldd	r25, Y+4	; 0x04
    2f88:	fc 01       	movw	r30, r24
    2f8a:	80 81       	ld	r24, Z
    2f8c:	91 81       	ldd	r25, Z+1	; 0x01
    2f8e:	29 81       	ldd	r18, Y+1	; 0x01
    2f90:	3a 81       	ldd	r19, Y+2	; 0x02
    2f92:	a9 01       	movw	r20, r18
    2f94:	48 1b       	sub	r20, r24
    2f96:	59 0b       	sbc	r21, r25
    2f98:	ca 01       	movw	r24, r20
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01

    if( xCount >= pxStreamBuffer->xLength )
    2f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	24 81       	ldd	r18, Z+4	; 0x04
    2fa6:	35 81       	ldd	r19, Z+5	; 0x05
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	9a 81       	ldd	r25, Y+2	; 0x02
    2fac:	82 17       	cp	r24, r18
    2fae:	93 07       	cpc	r25, r19
    2fb0:	68 f0       	brcs	.+26     	; 0x2fcc <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	84 81       	ldd	r24, Z+4	; 0x04
    2fba:	95 81       	ldd	r25, Z+5	; 0x05
    2fbc:	29 81       	ldd	r18, Y+1	; 0x01
    2fbe:	3a 81       	ldd	r19, Y+2	; 0x02
    2fc0:	a9 01       	movw	r20, r18
    2fc2:	48 1b       	sub	r20, r24
    2fc4:	59 0b       	sbc	r21, r25
    2fc6:	ca 01       	movw	r24, r20
    2fc8:	9a 83       	std	Y+2, r25	; 0x02
    2fca:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	08 95       	ret

00002fde <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    2fde:	0f 93       	push	r16
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	29 97       	sbiw	r28, 0x09	; 9
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	9a 83       	std	Y+2, r25	; 0x02
    2ff6:	89 83       	std	Y+1, r24	; 0x01
    2ff8:	7c 83       	std	Y+4, r23	; 0x04
    2ffa:	6b 83       	std	Y+3, r22	; 0x03
    2ffc:	5e 83       	std	Y+6, r21	; 0x06
    2ffe:	4d 83       	std	Y+5, r20	; 0x05
    3000:	38 87       	std	Y+8, r19	; 0x08
    3002:	2f 83       	std	Y+7, r18	; 0x07
    3004:	09 87       	std	Y+9, r16	; 0x09
            const BaseType_t xWriteValue = 0x55;
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	9a 81       	ldd	r25, Y+2	; 0x02
    300a:	4f e0       	ldi	r20, 0x0F	; 15
    300c:	50 e0       	ldi	r21, 0x00	; 0
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	0e 94 ed 45 	call	0x8bda	; 0x8bda <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	9a 81       	ldd	r25, Y+2	; 0x02
    301a:	2b 81       	ldd	r18, Y+3	; 0x03
    301c:	3c 81       	ldd	r19, Y+4	; 0x04
    301e:	fc 01       	movw	r30, r24
    3020:	35 87       	std	Z+13, r19	; 0x0d
    3022:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	2d 81       	ldd	r18, Y+5	; 0x05
    302a:	3e 81       	ldd	r19, Y+6	; 0x06
    302c:	fc 01       	movw	r30, r24
    302e:	35 83       	std	Z+5, r19	; 0x05
    3030:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	2f 81       	ldd	r18, Y+7	; 0x07
    3038:	38 85       	ldd	r19, Y+8	; 0x08
    303a:	fc 01       	movw	r30, r24
    303c:	37 83       	std	Z+7, r19	; 0x07
    303e:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9a 81       	ldd	r25, Y+2	; 0x02
    3044:	29 85       	ldd	r18, Y+9	; 0x09
    3046:	fc 01       	movw	r30, r24
    3048:	26 87       	std	Z+14, r18	; 0x0e
}
    304a:	00 00       	nop
    304c:	29 96       	adiw	r28, 0x09	; 9
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	df 91       	pop	r29
    305a:	cf 91       	pop	r28
    305c:	0f 91       	pop	r16
    305e:	08 95       	ret

00003060 <xTaskCreate>:
    3060:	af 92       	push	r10
    3062:	bf 92       	push	r11
    3064:	cf 92       	push	r12
    3066:	df 92       	push	r13
    3068:	ef 92       	push	r14
    306a:	ff 92       	push	r15
    306c:	0f 93       	push	r16
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	60 97       	sbiw	r28, 0x10	; 16
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	9f 83       	std	Y+7, r25	; 0x07
    3084:	8e 83       	std	Y+6, r24	; 0x06
    3086:	79 87       	std	Y+9, r23	; 0x09
    3088:	68 87       	std	Y+8, r22	; 0x08
    308a:	5b 87       	std	Y+11, r21	; 0x0b
    308c:	4a 87       	std	Y+10, r20	; 0x0a
    308e:	3d 87       	std	Y+13, r19	; 0x0d
    3090:	2c 87       	std	Y+12, r18	; 0x0c
    3092:	0e 87       	std	Y+14, r16	; 0x0e
    3094:	f8 8a       	std	Y+16, r15	; 0x10
    3096:	ef 86       	std	Y+15, r14	; 0x0f
    3098:	8a 85       	ldd	r24, Y+10	; 0x0a
    309a:	9b 85       	ldd	r25, Y+11	; 0x0b
    309c:	0e 94 94 06 	call	0xd28	; 0xd28 <pvPortMalloc>
    30a0:	9d 83       	std	Y+5, r25	; 0x05
    30a2:	8c 83       	std	Y+4, r24	; 0x04
    30a4:	8c 81       	ldd	r24, Y+4	; 0x04
    30a6:	9d 81       	ldd	r25, Y+5	; 0x05
    30a8:	89 2b       	or	r24, r25
    30aa:	b9 f0       	breq	.+46     	; 0x30da <xTaskCreate+0x7a>
    30ac:	84 e3       	ldi	r24, 0x34	; 52
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	0e 94 94 06 	call	0xd28	; 0xd28 <pvPortMalloc>
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	9a 81       	ldd	r25, Y+2	; 0x02
    30bc:	89 2b       	or	r24, r25
    30be:	41 f0       	breq	.+16     	; 0x30d0 <xTaskCreate+0x70>
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	9a 81       	ldd	r25, Y+2	; 0x02
    30c4:	2c 81       	ldd	r18, Y+4	; 0x04
    30c6:	3d 81       	ldd	r19, Y+5	; 0x05
    30c8:	fc 01       	movw	r30, r24
    30ca:	34 8f       	std	Z+28, r19	; 0x1c
    30cc:	23 8f       	std	Z+27, r18	; 0x1b
    30ce:	07 c0       	rjmp	.+14     	; 0x30de <xTaskCreate+0x7e>
    30d0:	8c 81       	ldd	r24, Y+4	; 0x04
    30d2:	9d 81       	ldd	r25, Y+5	; 0x05
    30d4:	0e 94 aa 07 	call	0xf54	; 0xf54 <vPortFree>
    30d8:	02 c0       	rjmp	.+4      	; 0x30de <xTaskCreate+0x7e>
    30da:	1a 82       	std	Y+2, r1	; 0x02
    30dc:	19 82       	std	Y+1, r1	; 0x01
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	9a 81       	ldd	r25, Y+2	; 0x02
    30e2:	89 2b       	or	r24, r25
    30e4:	c1 f0       	breq	.+48     	; 0x3116 <xTaskCreate+0xb6>
    30e6:	a9 81       	ldd	r26, Y+1	; 0x01
    30e8:	ba 81       	ldd	r27, Y+2	; 0x02
    30ea:	ef 85       	ldd	r30, Y+15	; 0x0f
    30ec:	f8 89       	ldd	r31, Y+16	; 0x10
    30ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    30f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    30f2:	4a 85       	ldd	r20, Y+10	; 0x0a
    30f4:	5b 85       	ldd	r21, Y+11	; 0x0b
    30f6:	68 85       	ldd	r22, Y+8	; 0x08
    30f8:	79 85       	ldd	r23, Y+9	; 0x09
    30fa:	8e 81       	ldd	r24, Y+6	; 0x06
    30fc:	9f 81       	ldd	r25, Y+7	; 0x07
    30fe:	a1 2c       	mov	r10, r1
    3100:	b1 2c       	mov	r11, r1
    3102:	6d 01       	movw	r12, r26
    3104:	7f 01       	movw	r14, r30
    3106:	0e 85       	ldd	r16, Y+14	; 0x0e
    3108:	19 d0       	rcall	.+50     	; 0x313c <prvInitialiseNewTask>
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	9a 81       	ldd	r25, Y+2	; 0x02
    310e:	05 d1       	rcall	.+522    	; 0x331a <prvAddNewTaskToReadyList>
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	8b 83       	std	Y+3, r24	; 0x03
    3114:	02 c0       	rjmp	.+4      	; 0x311a <xTaskCreate+0xba>
    3116:	8f ef       	ldi	r24, 0xFF	; 255
    3118:	8b 83       	std	Y+3, r24	; 0x03
    311a:	8b 81       	ldd	r24, Y+3	; 0x03
    311c:	60 96       	adiw	r28, 0x10	; 16
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	0f 91       	pop	r16
    312e:	ff 90       	pop	r15
    3130:	ef 90       	pop	r14
    3132:	df 90       	pop	r13
    3134:	cf 90       	pop	r12
    3136:	bf 90       	pop	r11
    3138:	af 90       	pop	r10
    313a:	08 95       	ret

0000313c <prvInitialiseNewTask>:
    313c:	af 92       	push	r10
    313e:	bf 92       	push	r11
    3140:	cf 92       	push	r12
    3142:	df 92       	push	r13
    3144:	ef 92       	push	r14
    3146:	ff 92       	push	r15
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	62 97       	sbiw	r28, 0x12	; 18
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	9d 83       	std	Y+5, r25	; 0x05
    3162:	8c 83       	std	Y+4, r24	; 0x04
    3164:	7f 83       	std	Y+7, r23	; 0x07
    3166:	6e 83       	std	Y+6, r22	; 0x06
    3168:	59 87       	std	Y+9, r21	; 0x09
    316a:	48 87       	std	Y+8, r20	; 0x08
    316c:	3b 87       	std	Y+11, r19	; 0x0b
    316e:	2a 87       	std	Y+10, r18	; 0x0a
    3170:	0c 87       	std	Y+12, r16	; 0x0c
    3172:	fe 86       	std	Y+14, r15	; 0x0e
    3174:	ed 86       	std	Y+13, r14	; 0x0d
    3176:	d8 8a       	std	Y+16, r13	; 0x10
    3178:	cf 86       	std	Y+15, r12	; 0x0f
    317a:	ba 8a       	std	Y+18, r11	; 0x12
    317c:	a9 8a       	std	Y+17, r10	; 0x11
    317e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3180:	98 89       	ldd	r25, Y+16	; 0x10
    3182:	fc 01       	movw	r30, r24
    3184:	83 8d       	ldd	r24, Z+27	; 0x1b
    3186:	94 8d       	ldd	r25, Z+28	; 0x1c
    3188:	28 85       	ldd	r18, Y+8	; 0x08
    318a:	39 85       	ldd	r19, Y+9	; 0x09
    318c:	a9 01       	movw	r20, r18
    318e:	65 ea       	ldi	r22, 0xA5	; 165
    3190:	70 e0       	ldi	r23, 0x00	; 0
    3192:	0e 94 ed 45 	call	0x8bda	; 0x8bda <memset>
    3196:	8f 85       	ldd	r24, Y+15	; 0x0f
    3198:	98 89       	ldd	r25, Y+16	; 0x10
    319a:	fc 01       	movw	r30, r24
    319c:	23 8d       	ldd	r18, Z+27	; 0x1b
    319e:	34 8d       	ldd	r19, Z+28	; 0x1c
    31a0:	88 85       	ldd	r24, Y+8	; 0x08
    31a2:	99 85       	ldd	r25, Y+9	; 0x09
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	82 0f       	add	r24, r18
    31a8:	93 1f       	adc	r25, r19
    31aa:	9b 83       	std	Y+3, r25	; 0x03
    31ac:	8a 83       	std	Y+2, r24	; 0x02
    31ae:	8e 81       	ldd	r24, Y+6	; 0x06
    31b0:	9f 81       	ldd	r25, Y+7	; 0x07
    31b2:	89 2b       	or	r24, r25
    31b4:	69 f1       	breq	.+90     	; 0x3210 <prvInitialiseNewTask+0xd4>
    31b6:	19 82       	std	Y+1, r1	; 0x01
    31b8:	21 c0       	rjmp	.+66     	; 0x31fc <prvInitialiseNewTask+0xc0>
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	29 81       	ldd	r18, Y+1	; 0x01
    31c2:	22 2f       	mov	r18, r18
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	4e 81       	ldd	r20, Y+6	; 0x06
    31c8:	5f 81       	ldd	r21, Y+7	; 0x07
    31ca:	24 0f       	add	r18, r20
    31cc:	35 1f       	adc	r19, r21
    31ce:	f9 01       	movw	r30, r18
    31d0:	40 81       	ld	r20, Z
    31d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    31d4:	38 89       	ldd	r19, Y+16	; 0x10
    31d6:	82 0f       	add	r24, r18
    31d8:	93 1f       	adc	r25, r19
    31da:	4d 96       	adiw	r24, 0x1d	; 29
    31dc:	fc 01       	movw	r30, r24
    31de:	40 83       	st	Z, r20
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	88 2f       	mov	r24, r24
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	2e 81       	ldd	r18, Y+6	; 0x06
    31e8:	3f 81       	ldd	r19, Y+7	; 0x07
    31ea:	82 0f       	add	r24, r18
    31ec:	93 1f       	adc	r25, r19
    31ee:	fc 01       	movw	r30, r24
    31f0:	80 81       	ld	r24, Z
    31f2:	88 23       	and	r24, r24
    31f4:	39 f0       	breq	.+14     	; 0x3204 <prvInitialiseNewTask+0xc8>
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	8f 5f       	subi	r24, 0xFF	; 255
    31fa:	89 83       	std	Y+1, r24	; 0x01
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	80 31       	cpi	r24, 0x10	; 16
    3200:	e0 f2       	brcs	.-72     	; 0x31ba <prvInitialiseNewTask+0x7e>
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <prvInitialiseNewTask+0xca>
    3204:	00 00       	nop
    3206:	8f 85       	ldd	r24, Y+15	; 0x0f
    3208:	98 89       	ldd	r25, Y+16	; 0x10
    320a:	fc 01       	movw	r30, r24
    320c:	14 a6       	std	Z+44, r1	; 0x2c
    320e:	04 c0       	rjmp	.+8      	; 0x3218 <prvInitialiseNewTask+0xdc>
    3210:	8f 85       	ldd	r24, Y+15	; 0x0f
    3212:	98 89       	ldd	r25, Y+16	; 0x10
    3214:	fc 01       	movw	r30, r24
    3216:	15 8e       	std	Z+29, r1	; 0x1d
    3218:	8c 85       	ldd	r24, Y+12	; 0x0c
    321a:	8a 30       	cpi	r24, 0x0A	; 10
    321c:	10 f0       	brcs	.+4      	; 0x3222 <prvInitialiseNewTask+0xe6>
    321e:	89 e0       	ldi	r24, 0x09	; 9
    3220:	8c 87       	std	Y+12, r24	; 0x0c
    3222:	8f 85       	ldd	r24, Y+15	; 0x0f
    3224:	98 89       	ldd	r25, Y+16	; 0x10
    3226:	2c 85       	ldd	r18, Y+12	; 0x0c
    3228:	fc 01       	movw	r30, r24
    322a:	22 8f       	std	Z+26, r18	; 0x1a
    322c:	8f 85       	ldd	r24, Y+15	; 0x0f
    322e:	98 89       	ldd	r25, Y+16	; 0x10
    3230:	2c 85       	ldd	r18, Y+12	; 0x0c
    3232:	fc 01       	movw	r30, r24
    3234:	25 a7       	std	Z+45, r18	; 0x2d
    3236:	8f 85       	ldd	r24, Y+15	; 0x0f
    3238:	98 89       	ldd	r25, Y+16	; 0x10
    323a:	fc 01       	movw	r30, r24
    323c:	16 a6       	std	Z+46, r1	; 0x2e
    323e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3240:	98 89       	ldd	r25, Y+16	; 0x10
    3242:	02 96       	adiw	r24, 0x02	; 2
    3244:	0e 94 87 09 	call	0x130e	; 0x130e <vListInitialiseItem>
    3248:	8f 85       	ldd	r24, Y+15	; 0x0f
    324a:	98 89       	ldd	r25, Y+16	; 0x10
    324c:	0e 96       	adiw	r24, 0x0e	; 14
    324e:	0e 94 87 09 	call	0x130e	; 0x130e <vListInitialiseItem>
    3252:	8f 85       	ldd	r24, Y+15	; 0x0f
    3254:	98 89       	ldd	r25, Y+16	; 0x10
    3256:	2f 85       	ldd	r18, Y+15	; 0x0f
    3258:	38 89       	ldd	r19, Y+16	; 0x10
    325a:	fc 01       	movw	r30, r24
    325c:	33 87       	std	Z+11, r19	; 0x0b
    325e:	22 87       	std	Z+10, r18	; 0x0a
    3260:	8c 85       	ldd	r24, Y+12	; 0x0c
    3262:	88 2f       	mov	r24, r24
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	a0 e0       	ldi	r26, 0x00	; 0
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	2a e0       	ldi	r18, 0x0A	; 10
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e0       	ldi	r20, 0x00	; 0
    3270:	50 e0       	ldi	r21, 0x00	; 0
    3272:	79 01       	movw	r14, r18
    3274:	8a 01       	movw	r16, r20
    3276:	e8 1a       	sub	r14, r24
    3278:	f9 0a       	sbc	r15, r25
    327a:	0a 0b       	sbc	r16, r26
    327c:	1b 0b       	sbc	r17, r27
    327e:	d8 01       	movw	r26, r16
    3280:	c7 01       	movw	r24, r14
    3282:	2f 85       	ldd	r18, Y+15	; 0x0f
    3284:	38 89       	ldd	r19, Y+16	; 0x10
    3286:	f9 01       	movw	r30, r18
    3288:	86 87       	std	Z+14, r24	; 0x0e
    328a:	97 87       	std	Z+15, r25	; 0x0f
    328c:	a0 8b       	std	Z+16, r26	; 0x10
    328e:	b1 8b       	std	Z+17, r27	; 0x11
    3290:	8f 85       	ldd	r24, Y+15	; 0x0f
    3292:	98 89       	ldd	r25, Y+16	; 0x10
    3294:	2f 85       	ldd	r18, Y+15	; 0x0f
    3296:	38 89       	ldd	r19, Y+16	; 0x10
    3298:	fc 01       	movw	r30, r24
    329a:	37 8b       	std	Z+23, r19	; 0x17
    329c:	26 8b       	std	Z+22, r18	; 0x16
    329e:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a0:	98 89       	ldd	r25, Y+16	; 0x10
    32a2:	8f 96       	adiw	r24, 0x2f	; 47
    32a4:	44 e0       	ldi	r20, 0x04	; 4
    32a6:	50 e0       	ldi	r21, 0x00	; 0
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	70 e0       	ldi	r23, 0x00	; 0
    32ac:	0e 94 ed 45 	call	0x8bda	; 0x8bda <memset>
    32b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32b2:	98 89       	ldd	r25, Y+16	; 0x10
    32b4:	c3 96       	adiw	r24, 0x33	; 51
    32b6:	41 e0       	ldi	r20, 0x01	; 1
    32b8:	50 e0       	ldi	r21, 0x00	; 0
    32ba:	60 e0       	ldi	r22, 0x00	; 0
    32bc:	70 e0       	ldi	r23, 0x00	; 0
    32be:	0e 94 ed 45 	call	0x8bda	; 0x8bda <memset>
    32c2:	4a 85       	ldd	r20, Y+10	; 0x0a
    32c4:	5b 85       	ldd	r21, Y+11	; 0x0b
    32c6:	2c 81       	ldd	r18, Y+4	; 0x04
    32c8:	3d 81       	ldd	r19, Y+5	; 0x05
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	9b 81       	ldd	r25, Y+3	; 0x03
    32ce:	b9 01       	movw	r22, r18
    32d0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <pxPortInitialiseStack>
    32d4:	9c 01       	movw	r18, r24
    32d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d8:	98 89       	ldd	r25, Y+16	; 0x10
    32da:	fc 01       	movw	r30, r24
    32dc:	31 83       	std	Z+1, r19	; 0x01
    32de:	20 83       	st	Z, r18
    32e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e4:	89 2b       	or	r24, r25
    32e6:	39 f0       	breq	.+14     	; 0x32f6 <prvInitialiseNewTask+0x1ba>
    32e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ec:	2f 85       	ldd	r18, Y+15	; 0x0f
    32ee:	38 89       	ldd	r19, Y+16	; 0x10
    32f0:	fc 01       	movw	r30, r24
    32f2:	31 83       	std	Z+1, r19	; 0x01
    32f4:	20 83       	st	Z, r18
    32f6:	00 00       	nop
    32f8:	62 96       	adiw	r28, 0x12	; 18
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	1f 91       	pop	r17
    330a:	0f 91       	pop	r16
    330c:	ff 90       	pop	r15
    330e:	ef 90       	pop	r14
    3310:	df 90       	pop	r13
    3312:	cf 90       	pop	r12
    3314:	bf 90       	pop	r11
    3316:	af 90       	pop	r10
    3318:	08 95       	ret

0000331a <prvAddNewTaskToReadyList>:
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
    331e:	00 d0       	rcall	.+0      	; 0x3320 <prvAddNewTaskToReadyList+0x6>
    3320:	1f 92       	push	r1
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	9c 83       	std	Y+4, r25	; 0x04
    3328:	8b 83       	std	Y+3, r24	; 0x03
    332a:	0f b6       	in	r0, 0x3f	; 63
    332c:	f8 94       	cli
    332e:	0f 92       	push	r0
    3330:	80 91 9e 12 	lds	r24, 0x129E	; 0x80129e <uxCurrentNumberOfTasks>
    3334:	8f 5f       	subi	r24, 0xFF	; 255
    3336:	80 93 9e 12 	sts	0x129E, r24	; 0x80129e <uxCurrentNumberOfTasks>
    333a:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    333e:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3342:	89 2b       	or	r24, r25
    3344:	69 f4       	brne	.+26     	; 0x3360 <prvAddNewTaskToReadyList+0x46>
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	9c 81       	ldd	r25, Y+4	; 0x04
    334a:	90 93 f3 11 	sts	0x11F3, r25	; 0x8011f3 <pxCurrentTCB+0x1>
    334e:	80 93 f2 11 	sts	0x11F2, r24	; 0x8011f2 <pxCurrentTCB>
    3352:	80 91 9e 12 	lds	r24, 0x129E	; 0x80129e <uxCurrentNumberOfTasks>
    3356:	81 30       	cpi	r24, 0x01	; 1
    3358:	c9 f4       	brne	.+50     	; 0x338c <prvAddNewTaskToReadyList+0x72>
    335a:	0e 94 f5 23 	call	0x47ea	; 0x47ea <prvInitialiseTaskLists>
    335e:	16 c0       	rjmp	.+44     	; 0x338c <prvAddNewTaskToReadyList+0x72>
    3360:	80 91 a4 12 	lds	r24, 0x12A4	; 0x8012a4 <xSchedulerRunning>
    3364:	88 23       	and	r24, r24
    3366:	91 f4       	brne	.+36     	; 0x338c <prvAddNewTaskToReadyList+0x72>
    3368:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    336c:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3370:	fc 01       	movw	r30, r24
    3372:	22 8d       	ldd	r18, Z+26	; 0x1a
    3374:	8b 81       	ldd	r24, Y+3	; 0x03
    3376:	9c 81       	ldd	r25, Y+4	; 0x04
    3378:	fc 01       	movw	r30, r24
    337a:	82 8d       	ldd	r24, Z+26	; 0x1a
    337c:	82 17       	cp	r24, r18
    337e:	30 f0       	brcs	.+12     	; 0x338c <prvAddNewTaskToReadyList+0x72>
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	9c 81       	ldd	r25, Y+4	; 0x04
    3384:	90 93 f3 11 	sts	0x11F3, r25	; 0x8011f3 <pxCurrentTCB+0x1>
    3388:	80 93 f2 11 	sts	0x11F2, r24	; 0x8011f2 <pxCurrentTCB>
    338c:	80 91 ab 12 	lds	r24, 0x12AB	; 0x8012ab <uxTaskNumber>
    3390:	8f 5f       	subi	r24, 0xFF	; 255
    3392:	80 93 ab 12 	sts	0x12AB, r24	; 0x8012ab <uxTaskNumber>
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	9c 81       	ldd	r25, Y+4	; 0x04
    339a:	fc 01       	movw	r30, r24
    339c:	92 8d       	ldd	r25, Z+26	; 0x1a
    339e:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    33a2:	89 17       	cp	r24, r25
    33a4:	30 f4       	brcc	.+12     	; 0x33b2 <prvAddNewTaskToReadyList+0x98>
    33a6:	8b 81       	ldd	r24, Y+3	; 0x03
    33a8:	9c 81       	ldd	r25, Y+4	; 0x04
    33aa:	fc 01       	movw	r30, r24
    33ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    33ae:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    33b2:	8b 81       	ldd	r24, Y+3	; 0x03
    33b4:	9c 81       	ldd	r25, Y+4	; 0x04
    33b6:	fc 01       	movw	r30, r24
    33b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    33ba:	28 2f       	mov	r18, r24
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4b e0       	ldi	r20, 0x0B	; 11
    33c0:	42 9f       	mul	r20, r18
    33c2:	c0 01       	movw	r24, r0
    33c4:	43 9f       	mul	r20, r19
    33c6:	90 0d       	add	r25, r0
    33c8:	11 24       	eor	r1, r1
    33ca:	8b 50       	subi	r24, 0x0B	; 11
    33cc:	9e 4e       	sbci	r25, 0xEE	; 238
    33ce:	fc 01       	movw	r30, r24
    33d0:	80 81       	ld	r24, Z
    33d2:	91 81       	ldd	r25, Z+1	; 0x01
    33d4:	9a 83       	std	Y+2, r25	; 0x02
    33d6:	89 83       	std	Y+1, r24	; 0x01
    33d8:	8b 81       	ldd	r24, Y+3	; 0x03
    33da:	9c 81       	ldd	r25, Y+4	; 0x04
    33dc:	29 81       	ldd	r18, Y+1	; 0x01
    33de:	3a 81       	ldd	r19, Y+2	; 0x02
    33e0:	fc 01       	movw	r30, r24
    33e2:	37 83       	std	Z+7, r19	; 0x07
    33e4:	26 83       	std	Z+6, r18	; 0x06
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ea:	fc 01       	movw	r30, r24
    33ec:	26 81       	ldd	r18, Z+6	; 0x06
    33ee:	37 81       	ldd	r19, Z+7	; 0x07
    33f0:	8b 81       	ldd	r24, Y+3	; 0x03
    33f2:	9c 81       	ldd	r25, Y+4	; 0x04
    33f4:	fc 01       	movw	r30, r24
    33f6:	31 87       	std	Z+9, r19	; 0x09
    33f8:	20 87       	std	Z+8, r18	; 0x08
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	9a 81       	ldd	r25, Y+2	; 0x02
    33fe:	fc 01       	movw	r30, r24
    3400:	86 81       	ldd	r24, Z+6	; 0x06
    3402:	97 81       	ldd	r25, Z+7	; 0x07
    3404:	2b 81       	ldd	r18, Y+3	; 0x03
    3406:	3c 81       	ldd	r19, Y+4	; 0x04
    3408:	2e 5f       	subi	r18, 0xFE	; 254
    340a:	3f 4f       	sbci	r19, 0xFF	; 255
    340c:	fc 01       	movw	r30, r24
    340e:	35 83       	std	Z+5, r19	; 0x05
    3410:	24 83       	std	Z+4, r18	; 0x04
    3412:	8b 81       	ldd	r24, Y+3	; 0x03
    3414:	9c 81       	ldd	r25, Y+4	; 0x04
    3416:	9c 01       	movw	r18, r24
    3418:	2e 5f       	subi	r18, 0xFE	; 254
    341a:	3f 4f       	sbci	r19, 0xFF	; 255
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	9a 81       	ldd	r25, Y+2	; 0x02
    3420:	fc 01       	movw	r30, r24
    3422:	37 83       	std	Z+7, r19	; 0x07
    3424:	26 83       	std	Z+6, r18	; 0x06
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	9c 81       	ldd	r25, Y+4	; 0x04
    342a:	fc 01       	movw	r30, r24
    342c:	82 8d       	ldd	r24, Z+26	; 0x1a
    342e:	28 2f       	mov	r18, r24
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	4b e0       	ldi	r20, 0x0B	; 11
    3434:	42 9f       	mul	r20, r18
    3436:	c0 01       	movw	r24, r0
    3438:	43 9f       	mul	r20, r19
    343a:	90 0d       	add	r25, r0
    343c:	11 24       	eor	r1, r1
    343e:	9c 01       	movw	r18, r24
    3440:	2c 50       	subi	r18, 0x0C	; 12
    3442:	3e 4e       	sbci	r19, 0xEE	; 238
    3444:	8b 81       	ldd	r24, Y+3	; 0x03
    3446:	9c 81       	ldd	r25, Y+4	; 0x04
    3448:	fc 01       	movw	r30, r24
    344a:	35 87       	std	Z+13, r19	; 0x0d
    344c:	24 87       	std	Z+12, r18	; 0x0c
    344e:	8b 81       	ldd	r24, Y+3	; 0x03
    3450:	9c 81       	ldd	r25, Y+4	; 0x04
    3452:	fc 01       	movw	r30, r24
    3454:	82 8d       	ldd	r24, Z+26	; 0x1a
    3456:	88 2f       	mov	r24, r24
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	4b e0       	ldi	r20, 0x0B	; 11
    345c:	48 9f       	mul	r20, r24
    345e:	90 01       	movw	r18, r0
    3460:	49 9f       	mul	r20, r25
    3462:	30 0d       	add	r19, r0
    3464:	11 24       	eor	r1, r1
    3466:	2c 50       	subi	r18, 0x0C	; 12
    3468:	3e 4e       	sbci	r19, 0xEE	; 238
    346a:	f9 01       	movw	r30, r18
    346c:	20 81       	ld	r18, Z
    346e:	41 e0       	ldi	r20, 0x01	; 1
    3470:	42 0f       	add	r20, r18
    3472:	5b e0       	ldi	r21, 0x0B	; 11
    3474:	58 9f       	mul	r21, r24
    3476:	90 01       	movw	r18, r0
    3478:	59 9f       	mul	r21, r25
    347a:	30 0d       	add	r19, r0
    347c:	11 24       	eor	r1, r1
    347e:	c9 01       	movw	r24, r18
    3480:	8c 50       	subi	r24, 0x0C	; 12
    3482:	9e 4e       	sbci	r25, 0xEE	; 238
    3484:	fc 01       	movw	r30, r24
    3486:	40 83       	st	Z, r20
    3488:	0f 90       	pop	r0
    348a:	0f be       	out	0x3f, r0	; 63
    348c:	80 91 a4 12 	lds	r24, 0x12A4	; 0x8012a4 <xSchedulerRunning>
    3490:	88 23       	and	r24, r24
    3492:	71 f0       	breq	.+28     	; 0x34b0 <prvAddNewTaskToReadyList+0x196>
    3494:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3498:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    349c:	fc 01       	movw	r30, r24
    349e:	22 8d       	ldd	r18, Z+26	; 0x1a
    34a0:	8b 81       	ldd	r24, Y+3	; 0x03
    34a2:	9c 81       	ldd	r25, Y+4	; 0x04
    34a4:	fc 01       	movw	r30, r24
    34a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    34a8:	28 17       	cp	r18, r24
    34aa:	10 f4       	brcc	.+4      	; 0x34b0 <prvAddNewTaskToReadyList+0x196>
    34ac:	0e 94 3e 0b 	call	0x167c	; 0x167c <vPortYield>
    34b0:	00 00       	nop
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	08 95       	ret

000034c0 <vTaskDelay>:
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <vTaskDelay+0x6>
    34c6:	1f 92       	push	r1
    34c8:	1f 92       	push	r1
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	6a 83       	std	Y+2, r22	; 0x02
    34d0:	7b 83       	std	Y+3, r23	; 0x03
    34d2:	8c 83       	std	Y+4, r24	; 0x04
    34d4:	9d 83       	std	Y+5, r25	; 0x05
    34d6:	19 82       	std	Y+1, r1	; 0x01
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	9b 81       	ldd	r25, Y+3	; 0x03
    34dc:	ac 81       	ldd	r26, Y+4	; 0x04
    34de:	bd 81       	ldd	r27, Y+5	; 0x05
    34e0:	89 2b       	or	r24, r25
    34e2:	8a 2b       	or	r24, r26
    34e4:	8b 2b       	or	r24, r27
    34e6:	61 f0       	breq	.+24     	; 0x3500 <vTaskDelay+0x40>
    34e8:	5e d0       	rcall	.+188    	; 0x35a6 <vTaskSuspendAll>
    34ea:	8a 81       	ldd	r24, Y+2	; 0x02
    34ec:	9b 81       	ldd	r25, Y+3	; 0x03
    34ee:	ac 81       	ldd	r26, Y+4	; 0x04
    34f0:	bd 81       	ldd	r27, Y+5	; 0x05
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	bc 01       	movw	r22, r24
    34f6:	cd 01       	movw	r24, r26
    34f8:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <prvAddCurrentTaskToDelayedList>
    34fc:	61 d0       	rcall	.+194    	; 0x35c0 <xTaskResumeAll>
    34fe:	89 83       	std	Y+1, r24	; 0x01
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	88 23       	and	r24, r24
    3504:	11 f4       	brne	.+4      	; 0x350a <vTaskDelay+0x4a>
    3506:	0e 94 3e 0b 	call	0x167c	; 0x167c <vPortYield>
    350a:	00 00       	nop
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	df 91       	pop	r29
    3518:	cf 91       	pop	r28
    351a:	08 95       	ret

0000351c <vTaskStartScheduler>:
    351c:	ef 92       	push	r14
    351e:	ff 92       	push	r15
    3520:	0f 93       	push	r16
    3522:	cf 93       	push	r28
    3524:	df 93       	push	r29
    3526:	1f 92       	push	r1
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	0f 2e       	mov	r0, r31
    352e:	f0 eb       	ldi	r31, 0xB0	; 176
    3530:	ef 2e       	mov	r14, r31
    3532:	f2 e1       	ldi	r31, 0x12	; 18
    3534:	ff 2e       	mov	r15, r31
    3536:	f0 2d       	mov	r31, r0
    3538:	00 e0       	ldi	r16, 0x00	; 0
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 ec       	ldi	r20, 0xC0	; 192
    3540:	50 e0       	ldi	r21, 0x00	; 0
    3542:	6f e9       	ldi	r22, 0x9F	; 159
    3544:	73 e0       	ldi	r23, 0x03	; 3
    3546:	8c e7       	ldi	r24, 0x7C	; 124
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	8a dd       	rcall	.-1260   	; 0x3060 <xTaskCreate>
    354c:	89 83       	std	Y+1, r24	; 0x01
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	81 30       	cpi	r24, 0x01	; 1
    3552:	19 f4       	brne	.+6      	; 0x355a <vTaskStartScheduler+0x3e>
    3554:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <xTimerCreateTimerTask>
    3558:	89 83       	std	Y+1, r24	; 0x01
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	81 30       	cpi	r24, 0x01	; 1
    355e:	c9 f4       	brne	.+50     	; 0x3592 <vTaskStartScheduler+0x76>
    3560:	f8 94       	cli
    3562:	8f ef       	ldi	r24, 0xFF	; 255
    3564:	9f ef       	ldi	r25, 0xFF	; 255
    3566:	dc 01       	movw	r26, r24
    3568:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <xNextTaskUnblockTime>
    356c:	90 93 ad 12 	sts	0x12AD, r25	; 0x8012ad <xNextTaskUnblockTime+0x1>
    3570:	a0 93 ae 12 	sts	0x12AE, r26	; 0x8012ae <xNextTaskUnblockTime+0x2>
    3574:	b0 93 af 12 	sts	0x12AF, r27	; 0x8012af <xNextTaskUnblockTime+0x3>
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	80 93 a4 12 	sts	0x12A4, r24	; 0x8012a4 <xSchedulerRunning>
    357e:	10 92 9f 12 	sts	0x129F, r1	; 0x80129f <xTickCount>
    3582:	10 92 a0 12 	sts	0x12A0, r1	; 0x8012a0 <xTickCount+0x1>
    3586:	10 92 a1 12 	sts	0x12A1, r1	; 0x8012a1 <xTickCount+0x2>
    358a:	10 92 a2 12 	sts	0x12A2, r1	; 0x8012a2 <xTickCount+0x3>
    358e:	0e 94 06 0b 	call	0x160c	; 0x160c <xPortStartScheduler>
    3592:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    3596:	00 00       	nop
    3598:	0f 90       	pop	r0
    359a:	df 91       	pop	r29
    359c:	cf 91       	pop	r28
    359e:	0f 91       	pop	r16
    35a0:	ff 90       	pop	r15
    35a2:	ef 90       	pop	r14
    35a4:	08 95       	ret

000035a6 <vTaskSuspendAll>:
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxSchedulerSuspended>
    35b2:	8f 5f       	subi	r24, 0xFF	; 255
    35b4:	80 93 b2 12 	sts	0x12B2, r24	; 0x8012b2 <uxSchedulerSuspended>
    35b8:	00 00       	nop
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	08 95       	ret

000035c0 <xTaskResumeAll>:
    35c0:	cf 93       	push	r28
    35c2:	df 93       	push	r29
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62
    35c8:	2d 97       	sbiw	r28, 0x0d	; 13
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	de bf       	out	0x3e, r29	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	cd bf       	out	0x3d, r28	; 61
    35d4:	1a 82       	std	Y+2, r1	; 0x02
    35d6:	19 82       	std	Y+1, r1	; 0x01
    35d8:	1b 82       	std	Y+3, r1	; 0x03
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	0f 92       	push	r0
    35e0:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxSchedulerSuspended>
    35e4:	81 50       	subi	r24, 0x01	; 1
    35e6:	80 93 b2 12 	sts	0x12B2, r24	; 0x8012b2 <uxSchedulerSuspended>
    35ea:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxSchedulerSuspended>
    35ee:	88 23       	and	r24, r24
    35f0:	09 f0       	breq	.+2      	; 0x35f4 <xTaskResumeAll+0x34>
    35f2:	69 c1       	rjmp	.+722    	; 0x38c6 <xTaskResumeAll+0x306>
    35f4:	80 91 9e 12 	lds	r24, 0x129E	; 0x80129e <uxCurrentNumberOfTasks>
    35f8:	88 23       	and	r24, r24
    35fa:	09 f4       	brne	.+2      	; 0x35fe <xTaskResumeAll+0x3e>
    35fc:	64 c1       	rjmp	.+712    	; 0x38c6 <xTaskResumeAll+0x306>
    35fe:	1b c1       	rjmp	.+566    	; 0x3836 <xTaskResumeAll+0x276>
    3600:	80 91 83 12 	lds	r24, 0x1283	; 0x801283 <xPendingReadyList+0x7>
    3604:	90 91 84 12 	lds	r25, 0x1284	; 0x801284 <xPendingReadyList+0x8>
    3608:	fc 01       	movw	r30, r24
    360a:	80 85       	ldd	r24, Z+8	; 0x08
    360c:	91 85       	ldd	r25, Z+9	; 0x09
    360e:	9a 83       	std	Y+2, r25	; 0x02
    3610:	89 83       	std	Y+1, r24	; 0x01
    3612:	89 81       	ldd	r24, Y+1	; 0x01
    3614:	9a 81       	ldd	r25, Y+2	; 0x02
    3616:	fc 01       	movw	r30, r24
    3618:	80 8d       	ldd	r24, Z+24	; 0x18
    361a:	91 8d       	ldd	r25, Z+25	; 0x19
    361c:	99 87       	std	Y+9, r25	; 0x09
    361e:	88 87       	std	Y+8, r24	; 0x08
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	9a 81       	ldd	r25, Y+2	; 0x02
    3624:	fc 01       	movw	r30, r24
    3626:	82 89       	ldd	r24, Z+18	; 0x12
    3628:	93 89       	ldd	r25, Z+19	; 0x13
    362a:	29 81       	ldd	r18, Y+1	; 0x01
    362c:	3a 81       	ldd	r19, Y+2	; 0x02
    362e:	f9 01       	movw	r30, r18
    3630:	24 89       	ldd	r18, Z+20	; 0x14
    3632:	35 89       	ldd	r19, Z+21	; 0x15
    3634:	fc 01       	movw	r30, r24
    3636:	37 83       	std	Z+7, r19	; 0x07
    3638:	26 83       	std	Z+6, r18	; 0x06
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
    363e:	fc 01       	movw	r30, r24
    3640:	84 89       	ldd	r24, Z+20	; 0x14
    3642:	95 89       	ldd	r25, Z+21	; 0x15
    3644:	29 81       	ldd	r18, Y+1	; 0x01
    3646:	3a 81       	ldd	r19, Y+2	; 0x02
    3648:	f9 01       	movw	r30, r18
    364a:	22 89       	ldd	r18, Z+18	; 0x12
    364c:	33 89       	ldd	r19, Z+19	; 0x13
    364e:	fc 01       	movw	r30, r24
    3650:	35 83       	std	Z+5, r19	; 0x05
    3652:	24 83       	std	Z+4, r18	; 0x04
    3654:	88 85       	ldd	r24, Y+8	; 0x08
    3656:	99 85       	ldd	r25, Y+9	; 0x09
    3658:	fc 01       	movw	r30, r24
    365a:	21 81       	ldd	r18, Z+1	; 0x01
    365c:	32 81       	ldd	r19, Z+2	; 0x02
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	0e 96       	adiw	r24, 0x0e	; 14
    3664:	28 17       	cp	r18, r24
    3666:	39 07       	cpc	r19, r25
    3668:	51 f4       	brne	.+20     	; 0x367e <xTaskResumeAll+0xbe>
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	9a 81       	ldd	r25, Y+2	; 0x02
    366e:	fc 01       	movw	r30, r24
    3670:	24 89       	ldd	r18, Z+20	; 0x14
    3672:	35 89       	ldd	r19, Z+21	; 0x15
    3674:	88 85       	ldd	r24, Y+8	; 0x08
    3676:	99 85       	ldd	r25, Y+9	; 0x09
    3678:	fc 01       	movw	r30, r24
    367a:	32 83       	std	Z+2, r19	; 0x02
    367c:	21 83       	std	Z+1, r18	; 0x01
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	9a 81       	ldd	r25, Y+2	; 0x02
    3682:	fc 01       	movw	r30, r24
    3684:	11 8e       	std	Z+25, r1	; 0x19
    3686:	10 8e       	std	Z+24, r1	; 0x18
    3688:	88 85       	ldd	r24, Y+8	; 0x08
    368a:	99 85       	ldd	r25, Y+9	; 0x09
    368c:	fc 01       	movw	r30, r24
    368e:	80 81       	ld	r24, Z
    3690:	2f ef       	ldi	r18, 0xFF	; 255
    3692:	28 0f       	add	r18, r24
    3694:	88 85       	ldd	r24, Y+8	; 0x08
    3696:	99 85       	ldd	r25, Y+9	; 0x09
    3698:	fc 01       	movw	r30, r24
    369a:	20 83       	st	Z, r18
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
    36a0:	fc 01       	movw	r30, r24
    36a2:	84 85       	ldd	r24, Z+12	; 0x0c
    36a4:	95 85       	ldd	r25, Z+13	; 0x0d
    36a6:	9b 87       	std	Y+11, r25	; 0x0b
    36a8:	8a 87       	std	Y+10, r24	; 0x0a
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	fc 01       	movw	r30, r24
    36b0:	86 81       	ldd	r24, Z+6	; 0x06
    36b2:	97 81       	ldd	r25, Z+7	; 0x07
    36b4:	29 81       	ldd	r18, Y+1	; 0x01
    36b6:	3a 81       	ldd	r19, Y+2	; 0x02
    36b8:	f9 01       	movw	r30, r18
    36ba:	20 85       	ldd	r18, Z+8	; 0x08
    36bc:	31 85       	ldd	r19, Z+9	; 0x09
    36be:	fc 01       	movw	r30, r24
    36c0:	37 83       	std	Z+7, r19	; 0x07
    36c2:	26 83       	std	Z+6, r18	; 0x06
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	9a 81       	ldd	r25, Y+2	; 0x02
    36c8:	fc 01       	movw	r30, r24
    36ca:	80 85       	ldd	r24, Z+8	; 0x08
    36cc:	91 85       	ldd	r25, Z+9	; 0x09
    36ce:	29 81       	ldd	r18, Y+1	; 0x01
    36d0:	3a 81       	ldd	r19, Y+2	; 0x02
    36d2:	f9 01       	movw	r30, r18
    36d4:	26 81       	ldd	r18, Z+6	; 0x06
    36d6:	37 81       	ldd	r19, Z+7	; 0x07
    36d8:	fc 01       	movw	r30, r24
    36da:	35 83       	std	Z+5, r19	; 0x05
    36dc:	24 83       	std	Z+4, r18	; 0x04
    36de:	8a 85       	ldd	r24, Y+10	; 0x0a
    36e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    36e2:	fc 01       	movw	r30, r24
    36e4:	21 81       	ldd	r18, Z+1	; 0x01
    36e6:	32 81       	ldd	r19, Z+2	; 0x02
    36e8:	89 81       	ldd	r24, Y+1	; 0x01
    36ea:	9a 81       	ldd	r25, Y+2	; 0x02
    36ec:	02 96       	adiw	r24, 0x02	; 2
    36ee:	28 17       	cp	r18, r24
    36f0:	39 07       	cpc	r19, r25
    36f2:	51 f4       	brne	.+20     	; 0x3708 <xTaskResumeAll+0x148>
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	9a 81       	ldd	r25, Y+2	; 0x02
    36f8:	fc 01       	movw	r30, r24
    36fa:	20 85       	ldd	r18, Z+8	; 0x08
    36fc:	31 85       	ldd	r19, Z+9	; 0x09
    36fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3700:	9b 85       	ldd	r25, Y+11	; 0x0b
    3702:	fc 01       	movw	r30, r24
    3704:	32 83       	std	Z+2, r19	; 0x02
    3706:	21 83       	std	Z+1, r18	; 0x01
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	9a 81       	ldd	r25, Y+2	; 0x02
    370c:	fc 01       	movw	r30, r24
    370e:	15 86       	std	Z+13, r1	; 0x0d
    3710:	14 86       	std	Z+12, r1	; 0x0c
    3712:	8a 85       	ldd	r24, Y+10	; 0x0a
    3714:	9b 85       	ldd	r25, Y+11	; 0x0b
    3716:	fc 01       	movw	r30, r24
    3718:	80 81       	ld	r24, Z
    371a:	2f ef       	ldi	r18, 0xFF	; 255
    371c:	28 0f       	add	r18, r24
    371e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3720:	9b 85       	ldd	r25, Y+11	; 0x0b
    3722:	fc 01       	movw	r30, r24
    3724:	20 83       	st	Z, r18
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	fc 01       	movw	r30, r24
    372c:	92 8d       	ldd	r25, Z+26	; 0x1a
    372e:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    3732:	89 17       	cp	r24, r25
    3734:	30 f4       	brcc	.+12     	; 0x3742 <xTaskResumeAll+0x182>
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	9a 81       	ldd	r25, Y+2	; 0x02
    373a:	fc 01       	movw	r30, r24
    373c:	82 8d       	ldd	r24, Z+26	; 0x1a
    373e:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	9a 81       	ldd	r25, Y+2	; 0x02
    3746:	fc 01       	movw	r30, r24
    3748:	82 8d       	ldd	r24, Z+26	; 0x1a
    374a:	28 2f       	mov	r18, r24
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	4b e0       	ldi	r20, 0x0B	; 11
    3750:	42 9f       	mul	r20, r18
    3752:	c0 01       	movw	r24, r0
    3754:	43 9f       	mul	r20, r19
    3756:	90 0d       	add	r25, r0
    3758:	11 24       	eor	r1, r1
    375a:	8b 50       	subi	r24, 0x0B	; 11
    375c:	9e 4e       	sbci	r25, 0xEE	; 238
    375e:	fc 01       	movw	r30, r24
    3760:	80 81       	ld	r24, Z
    3762:	91 81       	ldd	r25, Z+1	; 0x01
    3764:	9d 87       	std	Y+13, r25	; 0x0d
    3766:	8c 87       	std	Y+12, r24	; 0x0c
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	9a 81       	ldd	r25, Y+2	; 0x02
    376c:	2c 85       	ldd	r18, Y+12	; 0x0c
    376e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3770:	fc 01       	movw	r30, r24
    3772:	37 83       	std	Z+7, r19	; 0x07
    3774:	26 83       	std	Z+6, r18	; 0x06
    3776:	8c 85       	ldd	r24, Y+12	; 0x0c
    3778:	9d 85       	ldd	r25, Y+13	; 0x0d
    377a:	fc 01       	movw	r30, r24
    377c:	26 81       	ldd	r18, Z+6	; 0x06
    377e:	37 81       	ldd	r19, Z+7	; 0x07
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
    3784:	fc 01       	movw	r30, r24
    3786:	31 87       	std	Z+9, r19	; 0x09
    3788:	20 87       	std	Z+8, r18	; 0x08
    378a:	8c 85       	ldd	r24, Y+12	; 0x0c
    378c:	9d 85       	ldd	r25, Y+13	; 0x0d
    378e:	fc 01       	movw	r30, r24
    3790:	86 81       	ldd	r24, Z+6	; 0x06
    3792:	97 81       	ldd	r25, Z+7	; 0x07
    3794:	29 81       	ldd	r18, Y+1	; 0x01
    3796:	3a 81       	ldd	r19, Y+2	; 0x02
    3798:	2e 5f       	subi	r18, 0xFE	; 254
    379a:	3f 4f       	sbci	r19, 0xFF	; 255
    379c:	fc 01       	movw	r30, r24
    379e:	35 83       	std	Z+5, r19	; 0x05
    37a0:	24 83       	std	Z+4, r18	; 0x04
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	9a 81       	ldd	r25, Y+2	; 0x02
    37a6:	9c 01       	movw	r18, r24
    37a8:	2e 5f       	subi	r18, 0xFE	; 254
    37aa:	3f 4f       	sbci	r19, 0xFF	; 255
    37ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    37ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    37b0:	fc 01       	movw	r30, r24
    37b2:	37 83       	std	Z+7, r19	; 0x07
    37b4:	26 83       	std	Z+6, r18	; 0x06
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	9a 81       	ldd	r25, Y+2	; 0x02
    37ba:	fc 01       	movw	r30, r24
    37bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    37be:	28 2f       	mov	r18, r24
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	4b e0       	ldi	r20, 0x0B	; 11
    37c4:	42 9f       	mul	r20, r18
    37c6:	c0 01       	movw	r24, r0
    37c8:	43 9f       	mul	r20, r19
    37ca:	90 0d       	add	r25, r0
    37cc:	11 24       	eor	r1, r1
    37ce:	9c 01       	movw	r18, r24
    37d0:	2c 50       	subi	r18, 0x0C	; 12
    37d2:	3e 4e       	sbci	r19, 0xEE	; 238
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	9a 81       	ldd	r25, Y+2	; 0x02
    37d8:	fc 01       	movw	r30, r24
    37da:	35 87       	std	Z+13, r19	; 0x0d
    37dc:	24 87       	std	Z+12, r18	; 0x0c
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	9a 81       	ldd	r25, Y+2	; 0x02
    37e2:	fc 01       	movw	r30, r24
    37e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    37e6:	88 2f       	mov	r24, r24
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	4b e0       	ldi	r20, 0x0B	; 11
    37ec:	48 9f       	mul	r20, r24
    37ee:	90 01       	movw	r18, r0
    37f0:	49 9f       	mul	r20, r25
    37f2:	30 0d       	add	r19, r0
    37f4:	11 24       	eor	r1, r1
    37f6:	2c 50       	subi	r18, 0x0C	; 12
    37f8:	3e 4e       	sbci	r19, 0xEE	; 238
    37fa:	f9 01       	movw	r30, r18
    37fc:	20 81       	ld	r18, Z
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	42 0f       	add	r20, r18
    3802:	5b e0       	ldi	r21, 0x0B	; 11
    3804:	58 9f       	mul	r21, r24
    3806:	90 01       	movw	r18, r0
    3808:	59 9f       	mul	r21, r25
    380a:	30 0d       	add	r19, r0
    380c:	11 24       	eor	r1, r1
    380e:	c9 01       	movw	r24, r18
    3810:	8c 50       	subi	r24, 0x0C	; 12
    3812:	9e 4e       	sbci	r25, 0xEE	; 238
    3814:	fc 01       	movw	r30, r24
    3816:	40 83       	st	Z, r20
    3818:	89 81       	ldd	r24, Y+1	; 0x01
    381a:	9a 81       	ldd	r25, Y+2	; 0x02
    381c:	fc 01       	movw	r30, r24
    381e:	22 8d       	ldd	r18, Z+26	; 0x1a
    3820:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3824:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3828:	fc 01       	movw	r30, r24
    382a:	82 8d       	ldd	r24, Z+26	; 0x1a
    382c:	28 17       	cp	r18, r24
    382e:	18 f0       	brcs	.+6      	; 0x3836 <xTaskResumeAll+0x276>
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	80 93 a9 12 	sts	0x12A9, r24	; 0x8012a9 <xYieldPending>
    3836:	80 91 7c 12 	lds	r24, 0x127C	; 0x80127c <xPendingReadyList>
    383a:	88 23       	and	r24, r24
    383c:	09 f0       	breq	.+2      	; 0x3840 <xTaskResumeAll+0x280>
    383e:	e0 ce       	rjmp	.-576    	; 0x3600 <xTaskResumeAll+0x40>
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	9a 81       	ldd	r25, Y+2	; 0x02
    3844:	89 2b       	or	r24, r25
    3846:	11 f0       	breq	.+4      	; 0x384c <xTaskResumeAll+0x28c>
    3848:	0e 94 7e 24 	call	0x48fc	; 0x48fc <prvResetNextTaskUnblockTime>
    384c:	80 91 a5 12 	lds	r24, 0x12A5	; 0x8012a5 <xPendedTicks>
    3850:	90 91 a6 12 	lds	r25, 0x12A6	; 0x8012a6 <xPendedTicks+0x1>
    3854:	a0 91 a7 12 	lds	r26, 0x12A7	; 0x8012a7 <xPendedTicks+0x2>
    3858:	b0 91 a8 12 	lds	r27, 0x12A8	; 0x8012a8 <xPendedTicks+0x3>
    385c:	8c 83       	std	Y+4, r24	; 0x04
    385e:	9d 83       	std	Y+5, r25	; 0x05
    3860:	ae 83       	std	Y+6, r26	; 0x06
    3862:	bf 83       	std	Y+7, r27	; 0x07
    3864:	8c 81       	ldd	r24, Y+4	; 0x04
    3866:	9d 81       	ldd	r25, Y+5	; 0x05
    3868:	ae 81       	ldd	r26, Y+6	; 0x06
    386a:	bf 81       	ldd	r27, Y+7	; 0x07
    386c:	89 2b       	or	r24, r25
    386e:	8a 2b       	or	r24, r26
    3870:	8b 2b       	or	r24, r27
    3872:	09 f1       	breq	.+66     	; 0x38b6 <xTaskResumeAll+0x2f6>
    3874:	58 d0       	rcall	.+176    	; 0x3926 <xTaskIncrementTick>
    3876:	88 23       	and	r24, r24
    3878:	19 f0       	breq	.+6      	; 0x3880 <xTaskResumeAll+0x2c0>
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	80 93 a9 12 	sts	0x12A9, r24	; 0x8012a9 <xYieldPending>
    3880:	8c 81       	ldd	r24, Y+4	; 0x04
    3882:	9d 81       	ldd	r25, Y+5	; 0x05
    3884:	ae 81       	ldd	r26, Y+6	; 0x06
    3886:	bf 81       	ldd	r27, Y+7	; 0x07
    3888:	01 97       	sbiw	r24, 0x01	; 1
    388a:	a1 09       	sbc	r26, r1
    388c:	b1 09       	sbc	r27, r1
    388e:	8c 83       	std	Y+4, r24	; 0x04
    3890:	9d 83       	std	Y+5, r25	; 0x05
    3892:	ae 83       	std	Y+6, r26	; 0x06
    3894:	bf 83       	std	Y+7, r27	; 0x07
    3896:	8c 81       	ldd	r24, Y+4	; 0x04
    3898:	9d 81       	ldd	r25, Y+5	; 0x05
    389a:	ae 81       	ldd	r26, Y+6	; 0x06
    389c:	bf 81       	ldd	r27, Y+7	; 0x07
    389e:	89 2b       	or	r24, r25
    38a0:	8a 2b       	or	r24, r26
    38a2:	8b 2b       	or	r24, r27
    38a4:	39 f7       	brne	.-50     	; 0x3874 <xTaskResumeAll+0x2b4>
    38a6:	10 92 a5 12 	sts	0x12A5, r1	; 0x8012a5 <xPendedTicks>
    38aa:	10 92 a6 12 	sts	0x12A6, r1	; 0x8012a6 <xPendedTicks+0x1>
    38ae:	10 92 a7 12 	sts	0x12A7, r1	; 0x8012a7 <xPendedTicks+0x2>
    38b2:	10 92 a8 12 	sts	0x12A8, r1	; 0x8012a8 <xPendedTicks+0x3>
    38b6:	80 91 a9 12 	lds	r24, 0x12A9	; 0x8012a9 <xYieldPending>
    38ba:	88 23       	and	r24, r24
    38bc:	21 f0       	breq	.+8      	; 0x38c6 <xTaskResumeAll+0x306>
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	8b 83       	std	Y+3, r24	; 0x03
    38c2:	0e 94 3e 0b 	call	0x167c	; 0x167c <vPortYield>
    38c6:	0f 90       	pop	r0
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	8b 81       	ldd	r24, Y+3	; 0x03
    38cc:	2d 96       	adiw	r28, 0x0d	; 13
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
    38d8:	df 91       	pop	r29
    38da:	cf 91       	pop	r28
    38dc:	08 95       	ret

000038de <xTaskGetTickCount>:
    38de:	cf 93       	push	r28
    38e0:	df 93       	push	r29
    38e2:	00 d0       	rcall	.+0      	; 0x38e4 <xTaskGetTickCount+0x6>
    38e4:	1f 92       	push	r1
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	0f 92       	push	r0
    38f0:	80 91 9f 12 	lds	r24, 0x129F	; 0x80129f <xTickCount>
    38f4:	90 91 a0 12 	lds	r25, 0x12A0	; 0x8012a0 <xTickCount+0x1>
    38f8:	a0 91 a1 12 	lds	r26, 0x12A1	; 0x8012a1 <xTickCount+0x2>
    38fc:	b0 91 a2 12 	lds	r27, 0x12A2	; 0x8012a2 <xTickCount+0x3>
    3900:	89 83       	std	Y+1, r24	; 0x01
    3902:	9a 83       	std	Y+2, r25	; 0x02
    3904:	ab 83       	std	Y+3, r26	; 0x03
    3906:	bc 83       	std	Y+4, r27	; 0x04
    3908:	0f 90       	pop	r0
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	9a 81       	ldd	r25, Y+2	; 0x02
    3910:	ab 81       	ldd	r26, Y+3	; 0x03
    3912:	bc 81       	ldd	r27, Y+4	; 0x04
    3914:	bc 01       	movw	r22, r24
    3916:	cd 01       	movw	r24, r26
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	df 91       	pop	r29
    3922:	cf 91       	pop	r28
    3924:	08 95       	ret

00003926 <xTaskIncrementTick>:
    3926:	cf 93       	push	r28
    3928:	df 93       	push	r29
    392a:	cd b7       	in	r28, 0x3d	; 61
    392c:	de b7       	in	r29, 0x3e	; 62
    392e:	63 97       	sbiw	r28, 0x13	; 19
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	19 82       	std	Y+1, r1	; 0x01
    393c:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxSchedulerSuspended>
    3940:	88 23       	and	r24, r24
    3942:	09 f0       	breq	.+2      	; 0x3946 <xTaskIncrementTick+0x20>
    3944:	cc c1       	rjmp	.+920    	; 0x3cde <xTaskIncrementTick+0x3b8>
    3946:	80 91 9f 12 	lds	r24, 0x129F	; 0x80129f <xTickCount>
    394a:	90 91 a0 12 	lds	r25, 0x12A0	; 0x8012a0 <xTickCount+0x1>
    394e:	a0 91 a1 12 	lds	r26, 0x12A1	; 0x8012a1 <xTickCount+0x2>
    3952:	b0 91 a2 12 	lds	r27, 0x12A2	; 0x8012a2 <xTickCount+0x3>
    3956:	01 96       	adiw	r24, 0x01	; 1
    3958:	a1 1d       	adc	r26, r1
    395a:	b1 1d       	adc	r27, r1
    395c:	8a 83       	std	Y+2, r24	; 0x02
    395e:	9b 83       	std	Y+3, r25	; 0x03
    3960:	ac 83       	std	Y+4, r26	; 0x04
    3962:	bd 83       	std	Y+5, r27	; 0x05
    3964:	8a 81       	ldd	r24, Y+2	; 0x02
    3966:	9b 81       	ldd	r25, Y+3	; 0x03
    3968:	ac 81       	ldd	r26, Y+4	; 0x04
    396a:	bd 81       	ldd	r27, Y+5	; 0x05
    396c:	80 93 9f 12 	sts	0x129F, r24	; 0x80129f <xTickCount>
    3970:	90 93 a0 12 	sts	0x12A0, r25	; 0x8012a0 <xTickCount+0x1>
    3974:	a0 93 a1 12 	sts	0x12A1, r26	; 0x8012a1 <xTickCount+0x2>
    3978:	b0 93 a2 12 	sts	0x12A2, r27	; 0x8012a2 <xTickCount+0x3>
    397c:	8a 81       	ldd	r24, Y+2	; 0x02
    397e:	9b 81       	ldd	r25, Y+3	; 0x03
    3980:	ac 81       	ldd	r26, Y+4	; 0x04
    3982:	bd 81       	ldd	r27, Y+5	; 0x05
    3984:	89 2b       	or	r24, r25
    3986:	8a 2b       	or	r24, r26
    3988:	8b 2b       	or	r24, r27
    398a:	d1 f4       	brne	.+52     	; 0x39c0 <xTaskIncrementTick+0x9a>
    398c:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <pxDelayedTaskList>
    3990:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <pxDelayedTaskList+0x1>
    3994:	9f 83       	std	Y+7, r25	; 0x07
    3996:	8e 83       	std	Y+6, r24	; 0x06
    3998:	80 91 7a 12 	lds	r24, 0x127A	; 0x80127a <pxOverflowDelayedTaskList>
    399c:	90 91 7b 12 	lds	r25, 0x127B	; 0x80127b <pxOverflowDelayedTaskList+0x1>
    39a0:	90 93 79 12 	sts	0x1279, r25	; 0x801279 <pxDelayedTaskList+0x1>
    39a4:	80 93 78 12 	sts	0x1278, r24	; 0x801278 <pxDelayedTaskList>
    39a8:	8e 81       	ldd	r24, Y+6	; 0x06
    39aa:	9f 81       	ldd	r25, Y+7	; 0x07
    39ac:	90 93 7b 12 	sts	0x127B, r25	; 0x80127b <pxOverflowDelayedTaskList+0x1>
    39b0:	80 93 7a 12 	sts	0x127A, r24	; 0x80127a <pxOverflowDelayedTaskList>
    39b4:	80 91 aa 12 	lds	r24, 0x12AA	; 0x8012aa <xNumOfOverflows>
    39b8:	8f 5f       	subi	r24, 0xFF	; 255
    39ba:	80 93 aa 12 	sts	0x12AA, r24	; 0x8012aa <xNumOfOverflows>
    39be:	9e d7       	rcall	.+3900   	; 0x48fc <prvResetNextTaskUnblockTime>
    39c0:	80 91 ac 12 	lds	r24, 0x12AC	; 0x8012ac <xNextTaskUnblockTime>
    39c4:	90 91 ad 12 	lds	r25, 0x12AD	; 0x8012ad <xNextTaskUnblockTime+0x1>
    39c8:	a0 91 ae 12 	lds	r26, 0x12AE	; 0x8012ae <xNextTaskUnblockTime+0x2>
    39cc:	b0 91 af 12 	lds	r27, 0x12AF	; 0x8012af <xNextTaskUnblockTime+0x3>
    39d0:	2a 81       	ldd	r18, Y+2	; 0x02
    39d2:	3b 81       	ldd	r19, Y+3	; 0x03
    39d4:	4c 81       	ldd	r20, Y+4	; 0x04
    39d6:	5d 81       	ldd	r21, Y+5	; 0x05
    39d8:	28 17       	cp	r18, r24
    39da:	39 07       	cpc	r19, r25
    39dc:	4a 07       	cpc	r20, r26
    39de:	5b 07       	cpc	r21, r27
    39e0:	08 f4       	brcc	.+2      	; 0x39e4 <xTaskIncrementTick+0xbe>
    39e2:	60 c1       	rjmp	.+704    	; 0x3ca4 <xTaskIncrementTick+0x37e>
    39e4:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <pxDelayedTaskList>
    39e8:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <pxDelayedTaskList+0x1>
    39ec:	fc 01       	movw	r30, r24
    39ee:	80 81       	ld	r24, Z
    39f0:	88 23       	and	r24, r24
    39f2:	61 f4       	brne	.+24     	; 0x3a0c <xTaskIncrementTick+0xe6>
    39f4:	8f ef       	ldi	r24, 0xFF	; 255
    39f6:	9f ef       	ldi	r25, 0xFF	; 255
    39f8:	dc 01       	movw	r26, r24
    39fa:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <xNextTaskUnblockTime>
    39fe:	90 93 ad 12 	sts	0x12AD, r25	; 0x8012ad <xNextTaskUnblockTime+0x1>
    3a02:	a0 93 ae 12 	sts	0x12AE, r26	; 0x8012ae <xNextTaskUnblockTime+0x2>
    3a06:	b0 93 af 12 	sts	0x12AF, r27	; 0x8012af <xNextTaskUnblockTime+0x3>
    3a0a:	4c c1       	rjmp	.+664    	; 0x3ca4 <xTaskIncrementTick+0x37e>
    3a0c:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <pxDelayedTaskList>
    3a10:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <pxDelayedTaskList+0x1>
    3a14:	fc 01       	movw	r30, r24
    3a16:	87 81       	ldd	r24, Z+7	; 0x07
    3a18:	90 85       	ldd	r25, Z+8	; 0x08
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	80 85       	ldd	r24, Z+8	; 0x08
    3a1e:	91 85       	ldd	r25, Z+9	; 0x09
    3a20:	99 87       	std	Y+9, r25	; 0x09
    3a22:	88 87       	std	Y+8, r24	; 0x08
    3a24:	88 85       	ldd	r24, Y+8	; 0x08
    3a26:	99 85       	ldd	r25, Y+9	; 0x09
    3a28:	fc 01       	movw	r30, r24
    3a2a:	82 81       	ldd	r24, Z+2	; 0x02
    3a2c:	93 81       	ldd	r25, Z+3	; 0x03
    3a2e:	a4 81       	ldd	r26, Z+4	; 0x04
    3a30:	b5 81       	ldd	r27, Z+5	; 0x05
    3a32:	8a 87       	std	Y+10, r24	; 0x0a
    3a34:	9b 87       	std	Y+11, r25	; 0x0b
    3a36:	ac 87       	std	Y+12, r26	; 0x0c
    3a38:	bd 87       	std	Y+13, r27	; 0x0d
    3a3a:	2a 81       	ldd	r18, Y+2	; 0x02
    3a3c:	3b 81       	ldd	r19, Y+3	; 0x03
    3a3e:	4c 81       	ldd	r20, Y+4	; 0x04
    3a40:	5d 81       	ldd	r21, Y+5	; 0x05
    3a42:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a44:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a46:	ac 85       	ldd	r26, Y+12	; 0x0c
    3a48:	bd 85       	ldd	r27, Y+13	; 0x0d
    3a4a:	28 17       	cp	r18, r24
    3a4c:	39 07       	cpc	r19, r25
    3a4e:	4a 07       	cpc	r20, r26
    3a50:	5b 07       	cpc	r21, r27
    3a52:	68 f4       	brcc	.+26     	; 0x3a6e <xTaskIncrementTick+0x148>
    3a54:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a56:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a58:	ac 85       	ldd	r26, Y+12	; 0x0c
    3a5a:	bd 85       	ldd	r27, Y+13	; 0x0d
    3a5c:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <xNextTaskUnblockTime>
    3a60:	90 93 ad 12 	sts	0x12AD, r25	; 0x8012ad <xNextTaskUnblockTime+0x1>
    3a64:	a0 93 ae 12 	sts	0x12AE, r26	; 0x8012ae <xNextTaskUnblockTime+0x2>
    3a68:	b0 93 af 12 	sts	0x12AF, r27	; 0x8012af <xNextTaskUnblockTime+0x3>
    3a6c:	1b c1       	rjmp	.+566    	; 0x3ca4 <xTaskIncrementTick+0x37e>
    3a6e:	88 85       	ldd	r24, Y+8	; 0x08
    3a70:	99 85       	ldd	r25, Y+9	; 0x09
    3a72:	fc 01       	movw	r30, r24
    3a74:	84 85       	ldd	r24, Z+12	; 0x0c
    3a76:	95 85       	ldd	r25, Z+13	; 0x0d
    3a78:	9f 87       	std	Y+15, r25	; 0x0f
    3a7a:	8e 87       	std	Y+14, r24	; 0x0e
    3a7c:	88 85       	ldd	r24, Y+8	; 0x08
    3a7e:	99 85       	ldd	r25, Y+9	; 0x09
    3a80:	fc 01       	movw	r30, r24
    3a82:	86 81       	ldd	r24, Z+6	; 0x06
    3a84:	97 81       	ldd	r25, Z+7	; 0x07
    3a86:	28 85       	ldd	r18, Y+8	; 0x08
    3a88:	39 85       	ldd	r19, Y+9	; 0x09
    3a8a:	f9 01       	movw	r30, r18
    3a8c:	20 85       	ldd	r18, Z+8	; 0x08
    3a8e:	31 85       	ldd	r19, Z+9	; 0x09
    3a90:	fc 01       	movw	r30, r24
    3a92:	37 83       	std	Z+7, r19	; 0x07
    3a94:	26 83       	std	Z+6, r18	; 0x06
    3a96:	88 85       	ldd	r24, Y+8	; 0x08
    3a98:	99 85       	ldd	r25, Y+9	; 0x09
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	80 85       	ldd	r24, Z+8	; 0x08
    3a9e:	91 85       	ldd	r25, Z+9	; 0x09
    3aa0:	28 85       	ldd	r18, Y+8	; 0x08
    3aa2:	39 85       	ldd	r19, Y+9	; 0x09
    3aa4:	f9 01       	movw	r30, r18
    3aa6:	26 81       	ldd	r18, Z+6	; 0x06
    3aa8:	37 81       	ldd	r19, Z+7	; 0x07
    3aaa:	fc 01       	movw	r30, r24
    3aac:	35 83       	std	Z+5, r19	; 0x05
    3aae:	24 83       	std	Z+4, r18	; 0x04
    3ab0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ab2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ab4:	fc 01       	movw	r30, r24
    3ab6:	21 81       	ldd	r18, Z+1	; 0x01
    3ab8:	32 81       	ldd	r19, Z+2	; 0x02
    3aba:	88 85       	ldd	r24, Y+8	; 0x08
    3abc:	99 85       	ldd	r25, Y+9	; 0x09
    3abe:	02 96       	adiw	r24, 0x02	; 2
    3ac0:	28 17       	cp	r18, r24
    3ac2:	39 07       	cpc	r19, r25
    3ac4:	51 f4       	brne	.+20     	; 0x3ada <xTaskIncrementTick+0x1b4>
    3ac6:	88 85       	ldd	r24, Y+8	; 0x08
    3ac8:	99 85       	ldd	r25, Y+9	; 0x09
    3aca:	fc 01       	movw	r30, r24
    3acc:	20 85       	ldd	r18, Z+8	; 0x08
    3ace:	31 85       	ldd	r19, Z+9	; 0x09
    3ad0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ad2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	32 83       	std	Z+2, r19	; 0x02
    3ad8:	21 83       	std	Z+1, r18	; 0x01
    3ada:	88 85       	ldd	r24, Y+8	; 0x08
    3adc:	99 85       	ldd	r25, Y+9	; 0x09
    3ade:	fc 01       	movw	r30, r24
    3ae0:	15 86       	std	Z+13, r1	; 0x0d
    3ae2:	14 86       	std	Z+12, r1	; 0x0c
    3ae4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ae6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ae8:	fc 01       	movw	r30, r24
    3aea:	80 81       	ld	r24, Z
    3aec:	2f ef       	ldi	r18, 0xFF	; 255
    3aee:	28 0f       	add	r18, r24
    3af0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3af2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3af4:	fc 01       	movw	r30, r24
    3af6:	20 83       	st	Z, r18
    3af8:	88 85       	ldd	r24, Y+8	; 0x08
    3afa:	99 85       	ldd	r25, Y+9	; 0x09
    3afc:	fc 01       	movw	r30, r24
    3afe:	80 8d       	ldd	r24, Z+24	; 0x18
    3b00:	91 8d       	ldd	r25, Z+25	; 0x19
    3b02:	89 2b       	or	r24, r25
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <xTaskIncrementTick+0x1e2>
    3b06:	45 c0       	rjmp	.+138    	; 0x3b92 <xTaskIncrementTick+0x26c>
    3b08:	88 85       	ldd	r24, Y+8	; 0x08
    3b0a:	99 85       	ldd	r25, Y+9	; 0x09
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	80 8d       	ldd	r24, Z+24	; 0x18
    3b10:	91 8d       	ldd	r25, Z+25	; 0x19
    3b12:	99 8b       	std	Y+17, r25	; 0x11
    3b14:	88 8b       	std	Y+16, r24	; 0x10
    3b16:	88 85       	ldd	r24, Y+8	; 0x08
    3b18:	99 85       	ldd	r25, Y+9	; 0x09
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	82 89       	ldd	r24, Z+18	; 0x12
    3b1e:	93 89       	ldd	r25, Z+19	; 0x13
    3b20:	28 85       	ldd	r18, Y+8	; 0x08
    3b22:	39 85       	ldd	r19, Y+9	; 0x09
    3b24:	f9 01       	movw	r30, r18
    3b26:	24 89       	ldd	r18, Z+20	; 0x14
    3b28:	35 89       	ldd	r19, Z+21	; 0x15
    3b2a:	fc 01       	movw	r30, r24
    3b2c:	37 83       	std	Z+7, r19	; 0x07
    3b2e:	26 83       	std	Z+6, r18	; 0x06
    3b30:	88 85       	ldd	r24, Y+8	; 0x08
    3b32:	99 85       	ldd	r25, Y+9	; 0x09
    3b34:	fc 01       	movw	r30, r24
    3b36:	84 89       	ldd	r24, Z+20	; 0x14
    3b38:	95 89       	ldd	r25, Z+21	; 0x15
    3b3a:	28 85       	ldd	r18, Y+8	; 0x08
    3b3c:	39 85       	ldd	r19, Y+9	; 0x09
    3b3e:	f9 01       	movw	r30, r18
    3b40:	22 89       	ldd	r18, Z+18	; 0x12
    3b42:	33 89       	ldd	r19, Z+19	; 0x13
    3b44:	fc 01       	movw	r30, r24
    3b46:	35 83       	std	Z+5, r19	; 0x05
    3b48:	24 83       	std	Z+4, r18	; 0x04
    3b4a:	88 89       	ldd	r24, Y+16	; 0x10
    3b4c:	99 89       	ldd	r25, Y+17	; 0x11
    3b4e:	fc 01       	movw	r30, r24
    3b50:	21 81       	ldd	r18, Z+1	; 0x01
    3b52:	32 81       	ldd	r19, Z+2	; 0x02
    3b54:	88 85       	ldd	r24, Y+8	; 0x08
    3b56:	99 85       	ldd	r25, Y+9	; 0x09
    3b58:	0e 96       	adiw	r24, 0x0e	; 14
    3b5a:	28 17       	cp	r18, r24
    3b5c:	39 07       	cpc	r19, r25
    3b5e:	51 f4       	brne	.+20     	; 0x3b74 <xTaskIncrementTick+0x24e>
    3b60:	88 85       	ldd	r24, Y+8	; 0x08
    3b62:	99 85       	ldd	r25, Y+9	; 0x09
    3b64:	fc 01       	movw	r30, r24
    3b66:	24 89       	ldd	r18, Z+20	; 0x14
    3b68:	35 89       	ldd	r19, Z+21	; 0x15
    3b6a:	88 89       	ldd	r24, Y+16	; 0x10
    3b6c:	99 89       	ldd	r25, Y+17	; 0x11
    3b6e:	fc 01       	movw	r30, r24
    3b70:	32 83       	std	Z+2, r19	; 0x02
    3b72:	21 83       	std	Z+1, r18	; 0x01
    3b74:	88 85       	ldd	r24, Y+8	; 0x08
    3b76:	99 85       	ldd	r25, Y+9	; 0x09
    3b78:	fc 01       	movw	r30, r24
    3b7a:	11 8e       	std	Z+25, r1	; 0x19
    3b7c:	10 8e       	std	Z+24, r1	; 0x18
    3b7e:	88 89       	ldd	r24, Y+16	; 0x10
    3b80:	99 89       	ldd	r25, Y+17	; 0x11
    3b82:	fc 01       	movw	r30, r24
    3b84:	80 81       	ld	r24, Z
    3b86:	2f ef       	ldi	r18, 0xFF	; 255
    3b88:	28 0f       	add	r18, r24
    3b8a:	88 89       	ldd	r24, Y+16	; 0x10
    3b8c:	99 89       	ldd	r25, Y+17	; 0x11
    3b8e:	fc 01       	movw	r30, r24
    3b90:	20 83       	st	Z, r18
    3b92:	88 85       	ldd	r24, Y+8	; 0x08
    3b94:	99 85       	ldd	r25, Y+9	; 0x09
    3b96:	fc 01       	movw	r30, r24
    3b98:	92 8d       	ldd	r25, Z+26	; 0x1a
    3b9a:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    3b9e:	89 17       	cp	r24, r25
    3ba0:	30 f4       	brcc	.+12     	; 0x3bae <xTaskIncrementTick+0x288>
    3ba2:	88 85       	ldd	r24, Y+8	; 0x08
    3ba4:	99 85       	ldd	r25, Y+9	; 0x09
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	82 8d       	ldd	r24, Z+26	; 0x1a
    3baa:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    3bae:	88 85       	ldd	r24, Y+8	; 0x08
    3bb0:	99 85       	ldd	r25, Y+9	; 0x09
    3bb2:	fc 01       	movw	r30, r24
    3bb4:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bb6:	28 2f       	mov	r18, r24
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	4b e0       	ldi	r20, 0x0B	; 11
    3bbc:	42 9f       	mul	r20, r18
    3bbe:	c0 01       	movw	r24, r0
    3bc0:	43 9f       	mul	r20, r19
    3bc2:	90 0d       	add	r25, r0
    3bc4:	11 24       	eor	r1, r1
    3bc6:	8b 50       	subi	r24, 0x0B	; 11
    3bc8:	9e 4e       	sbci	r25, 0xEE	; 238
    3bca:	fc 01       	movw	r30, r24
    3bcc:	80 81       	ld	r24, Z
    3bce:	91 81       	ldd	r25, Z+1	; 0x01
    3bd0:	9b 8b       	std	Y+19, r25	; 0x13
    3bd2:	8a 8b       	std	Y+18, r24	; 0x12
    3bd4:	88 85       	ldd	r24, Y+8	; 0x08
    3bd6:	99 85       	ldd	r25, Y+9	; 0x09
    3bd8:	2a 89       	ldd	r18, Y+18	; 0x12
    3bda:	3b 89       	ldd	r19, Y+19	; 0x13
    3bdc:	fc 01       	movw	r30, r24
    3bde:	37 83       	std	Z+7, r19	; 0x07
    3be0:	26 83       	std	Z+6, r18	; 0x06
    3be2:	8a 89       	ldd	r24, Y+18	; 0x12
    3be4:	9b 89       	ldd	r25, Y+19	; 0x13
    3be6:	fc 01       	movw	r30, r24
    3be8:	26 81       	ldd	r18, Z+6	; 0x06
    3bea:	37 81       	ldd	r19, Z+7	; 0x07
    3bec:	88 85       	ldd	r24, Y+8	; 0x08
    3bee:	99 85       	ldd	r25, Y+9	; 0x09
    3bf0:	fc 01       	movw	r30, r24
    3bf2:	31 87       	std	Z+9, r19	; 0x09
    3bf4:	20 87       	std	Z+8, r18	; 0x08
    3bf6:	8a 89       	ldd	r24, Y+18	; 0x12
    3bf8:	9b 89       	ldd	r25, Y+19	; 0x13
    3bfa:	fc 01       	movw	r30, r24
    3bfc:	86 81       	ldd	r24, Z+6	; 0x06
    3bfe:	97 81       	ldd	r25, Z+7	; 0x07
    3c00:	28 85       	ldd	r18, Y+8	; 0x08
    3c02:	39 85       	ldd	r19, Y+9	; 0x09
    3c04:	2e 5f       	subi	r18, 0xFE	; 254
    3c06:	3f 4f       	sbci	r19, 0xFF	; 255
    3c08:	fc 01       	movw	r30, r24
    3c0a:	35 83       	std	Z+5, r19	; 0x05
    3c0c:	24 83       	std	Z+4, r18	; 0x04
    3c0e:	88 85       	ldd	r24, Y+8	; 0x08
    3c10:	99 85       	ldd	r25, Y+9	; 0x09
    3c12:	9c 01       	movw	r18, r24
    3c14:	2e 5f       	subi	r18, 0xFE	; 254
    3c16:	3f 4f       	sbci	r19, 0xFF	; 255
    3c18:	8a 89       	ldd	r24, Y+18	; 0x12
    3c1a:	9b 89       	ldd	r25, Y+19	; 0x13
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	37 83       	std	Z+7, r19	; 0x07
    3c20:	26 83       	std	Z+6, r18	; 0x06
    3c22:	88 85       	ldd	r24, Y+8	; 0x08
    3c24:	99 85       	ldd	r25, Y+9	; 0x09
    3c26:	fc 01       	movw	r30, r24
    3c28:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c2a:	28 2f       	mov	r18, r24
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	4b e0       	ldi	r20, 0x0B	; 11
    3c30:	42 9f       	mul	r20, r18
    3c32:	c0 01       	movw	r24, r0
    3c34:	43 9f       	mul	r20, r19
    3c36:	90 0d       	add	r25, r0
    3c38:	11 24       	eor	r1, r1
    3c3a:	9c 01       	movw	r18, r24
    3c3c:	2c 50       	subi	r18, 0x0C	; 12
    3c3e:	3e 4e       	sbci	r19, 0xEE	; 238
    3c40:	88 85       	ldd	r24, Y+8	; 0x08
    3c42:	99 85       	ldd	r25, Y+9	; 0x09
    3c44:	fc 01       	movw	r30, r24
    3c46:	35 87       	std	Z+13, r19	; 0x0d
    3c48:	24 87       	std	Z+12, r18	; 0x0c
    3c4a:	88 85       	ldd	r24, Y+8	; 0x08
    3c4c:	99 85       	ldd	r25, Y+9	; 0x09
    3c4e:	fc 01       	movw	r30, r24
    3c50:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c52:	88 2f       	mov	r24, r24
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	4b e0       	ldi	r20, 0x0B	; 11
    3c58:	48 9f       	mul	r20, r24
    3c5a:	90 01       	movw	r18, r0
    3c5c:	49 9f       	mul	r20, r25
    3c5e:	30 0d       	add	r19, r0
    3c60:	11 24       	eor	r1, r1
    3c62:	2c 50       	subi	r18, 0x0C	; 12
    3c64:	3e 4e       	sbci	r19, 0xEE	; 238
    3c66:	f9 01       	movw	r30, r18
    3c68:	20 81       	ld	r18, Z
    3c6a:	41 e0       	ldi	r20, 0x01	; 1
    3c6c:	42 0f       	add	r20, r18
    3c6e:	5b e0       	ldi	r21, 0x0B	; 11
    3c70:	58 9f       	mul	r21, r24
    3c72:	90 01       	movw	r18, r0
    3c74:	59 9f       	mul	r21, r25
    3c76:	30 0d       	add	r19, r0
    3c78:	11 24       	eor	r1, r1
    3c7a:	c9 01       	movw	r24, r18
    3c7c:	8c 50       	subi	r24, 0x0C	; 12
    3c7e:	9e 4e       	sbci	r25, 0xEE	; 238
    3c80:	fc 01       	movw	r30, r24
    3c82:	40 83       	st	Z, r20
    3c84:	88 85       	ldd	r24, Y+8	; 0x08
    3c86:	99 85       	ldd	r25, Y+9	; 0x09
    3c88:	fc 01       	movw	r30, r24
    3c8a:	22 8d       	ldd	r18, Z+26	; 0x1a
    3c8c:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3c90:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3c94:	fc 01       	movw	r30, r24
    3c96:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c98:	28 17       	cp	r18, r24
    3c9a:	08 f4       	brcc	.+2      	; 0x3c9e <xTaskIncrementTick+0x378>
    3c9c:	a3 ce       	rjmp	.-698    	; 0x39e4 <xTaskIncrementTick+0xbe>
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	89 83       	std	Y+1, r24	; 0x01
    3ca2:	a0 ce       	rjmp	.-704    	; 0x39e4 <xTaskIncrementTick+0xbe>
    3ca4:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3ca8:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3cac:	fc 01       	movw	r30, r24
    3cae:	82 8d       	ldd	r24, Z+26	; 0x1a
    3cb0:	28 2f       	mov	r18, r24
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	4b e0       	ldi	r20, 0x0B	; 11
    3cb6:	42 9f       	mul	r20, r18
    3cb8:	c0 01       	movw	r24, r0
    3cba:	43 9f       	mul	r20, r19
    3cbc:	90 0d       	add	r25, r0
    3cbe:	11 24       	eor	r1, r1
    3cc0:	8c 50       	subi	r24, 0x0C	; 12
    3cc2:	9e 4e       	sbci	r25, 0xEE	; 238
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	80 81       	ld	r24, Z
    3cc8:	82 30       	cpi	r24, 0x02	; 2
    3cca:	10 f0       	brcs	.+4      	; 0x3cd0 <xTaskIncrementTick+0x3aa>
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	80 91 a9 12 	lds	r24, 0x12A9	; 0x8012a9 <xYieldPending>
    3cd4:	88 23       	and	r24, r24
    3cd6:	b1 f0       	breq	.+44     	; 0x3d04 <xTaskIncrementTick+0x3de>
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	13 c0       	rjmp	.+38     	; 0x3d04 <xTaskIncrementTick+0x3de>
    3cde:	80 91 a5 12 	lds	r24, 0x12A5	; 0x8012a5 <xPendedTicks>
    3ce2:	90 91 a6 12 	lds	r25, 0x12A6	; 0x8012a6 <xPendedTicks+0x1>
    3ce6:	a0 91 a7 12 	lds	r26, 0x12A7	; 0x8012a7 <xPendedTicks+0x2>
    3cea:	b0 91 a8 12 	lds	r27, 0x12A8	; 0x8012a8 <xPendedTicks+0x3>
    3cee:	01 96       	adiw	r24, 0x01	; 1
    3cf0:	a1 1d       	adc	r26, r1
    3cf2:	b1 1d       	adc	r27, r1
    3cf4:	80 93 a5 12 	sts	0x12A5, r24	; 0x8012a5 <xPendedTicks>
    3cf8:	90 93 a6 12 	sts	0x12A6, r25	; 0x8012a6 <xPendedTicks+0x1>
    3cfc:	a0 93 a7 12 	sts	0x12A7, r26	; 0x8012a7 <xPendedTicks+0x2>
    3d00:	b0 93 a8 12 	sts	0x12A8, r27	; 0x8012a8 <xPendedTicks+0x3>
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	63 96       	adiw	r28, 0x13	; 19
    3d08:	0f b6       	in	r0, 0x3f	; 63
    3d0a:	f8 94       	cli
    3d0c:	de bf       	out	0x3e, r29	; 62
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	cd bf       	out	0x3d, r28	; 61
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	08 95       	ret

00003d18 <vTaskSwitchContext>:
    3d18:	cf 93       	push	r28
    3d1a:	df 93       	push	r29
    3d1c:	00 d0       	rcall	.+0      	; 0x3d1e <vTaskSwitchContext+0x6>
    3d1e:	cd b7       	in	r28, 0x3d	; 61
    3d20:	de b7       	in	r29, 0x3e	; 62
    3d22:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxSchedulerSuspended>
    3d26:	88 23       	and	r24, r24
    3d28:	21 f0       	breq	.+8      	; 0x3d32 <vTaskSwitchContext+0x1a>
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	80 93 a9 12 	sts	0x12A9, r24	; 0x8012a9 <xYieldPending>
    3d30:	78 c0       	rjmp	.+240    	; 0x3e22 <vTaskSwitchContext+0x10a>
    3d32:	10 92 a9 12 	sts	0x12A9, r1	; 0x8012a9 <xYieldPending>
    3d36:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3d3a:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3d3e:	fc 01       	movw	r30, r24
    3d40:	20 81       	ld	r18, Z
    3d42:	31 81       	ldd	r19, Z+1	; 0x01
    3d44:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3d48:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3d50:	94 8d       	ldd	r25, Z+28	; 0x1c
    3d52:	82 17       	cp	r24, r18
    3d54:	93 07       	cpc	r25, r19
    3d56:	70 f0       	brcs	.+28     	; 0x3d74 <vTaskSwitchContext+0x5c>
    3d58:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3d5c:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3d60:	9c 01       	movw	r18, r24
    3d62:	23 5e       	subi	r18, 0xE3	; 227
    3d64:	3f 4f       	sbci	r19, 0xFF	; 255
    3d66:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3d6a:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3d6e:	b9 01       	movw	r22, r18
    3d70:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <vApplicationStackOverflowHook>
    3d74:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    3d78:	89 83       	std	Y+1, r24	; 0x01
    3d7a:	03 c0       	rjmp	.+6      	; 0x3d82 <vTaskSwitchContext+0x6a>
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	81 50       	subi	r24, 0x01	; 1
    3d80:	89 83       	std	Y+1, r24	; 0x01
    3d82:	89 81       	ldd	r24, Y+1	; 0x01
    3d84:	28 2f       	mov	r18, r24
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	4b e0       	ldi	r20, 0x0B	; 11
    3d8a:	42 9f       	mul	r20, r18
    3d8c:	c0 01       	movw	r24, r0
    3d8e:	43 9f       	mul	r20, r19
    3d90:	90 0d       	add	r25, r0
    3d92:	11 24       	eor	r1, r1
    3d94:	8c 50       	subi	r24, 0x0C	; 12
    3d96:	9e 4e       	sbci	r25, 0xEE	; 238
    3d98:	fc 01       	movw	r30, r24
    3d9a:	80 81       	ld	r24, Z
    3d9c:	88 23       	and	r24, r24
    3d9e:	71 f3       	breq	.-36     	; 0x3d7c <vTaskSwitchContext+0x64>
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	28 2f       	mov	r18, r24
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	4b e0       	ldi	r20, 0x0B	; 11
    3da8:	42 9f       	mul	r20, r18
    3daa:	c0 01       	movw	r24, r0
    3dac:	43 9f       	mul	r20, r19
    3dae:	90 0d       	add	r25, r0
    3db0:	11 24       	eor	r1, r1
    3db2:	8c 50       	subi	r24, 0x0C	; 12
    3db4:	9e 4e       	sbci	r25, 0xEE	; 238
    3db6:	9b 83       	std	Y+3, r25	; 0x03
    3db8:	8a 83       	std	Y+2, r24	; 0x02
    3dba:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	81 81       	ldd	r24, Z+1	; 0x01
    3dc2:	92 81       	ldd	r25, Z+2	; 0x02
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	24 81       	ldd	r18, Z+4	; 0x04
    3dc8:	35 81       	ldd	r19, Z+5	; 0x05
    3dca:	8a 81       	ldd	r24, Y+2	; 0x02
    3dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dce:	fc 01       	movw	r30, r24
    3dd0:	32 83       	std	Z+2, r19	; 0x02
    3dd2:	21 83       	std	Z+1, r18	; 0x01
    3dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd8:	fc 01       	movw	r30, r24
    3dda:	21 81       	ldd	r18, Z+1	; 0x01
    3ddc:	32 81       	ldd	r19, Z+2	; 0x02
    3dde:	8a 81       	ldd	r24, Y+2	; 0x02
    3de0:	9b 81       	ldd	r25, Y+3	; 0x03
    3de2:	03 96       	adiw	r24, 0x03	; 3
    3de4:	28 17       	cp	r18, r24
    3de6:	39 07       	cpc	r19, r25
    3de8:	69 f4       	brne	.+26     	; 0x3e04 <vTaskSwitchContext+0xec>
    3dea:	8a 81       	ldd	r24, Y+2	; 0x02
    3dec:	9b 81       	ldd	r25, Y+3	; 0x03
    3dee:	fc 01       	movw	r30, r24
    3df0:	81 81       	ldd	r24, Z+1	; 0x01
    3df2:	92 81       	ldd	r25, Z+2	; 0x02
    3df4:	fc 01       	movw	r30, r24
    3df6:	24 81       	ldd	r18, Z+4	; 0x04
    3df8:	35 81       	ldd	r19, Z+5	; 0x05
    3dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dfe:	fc 01       	movw	r30, r24
    3e00:	32 83       	std	Z+2, r19	; 0x02
    3e02:	21 83       	std	Z+1, r18	; 0x01
    3e04:	8a 81       	ldd	r24, Y+2	; 0x02
    3e06:	9b 81       	ldd	r25, Y+3	; 0x03
    3e08:	fc 01       	movw	r30, r24
    3e0a:	81 81       	ldd	r24, Z+1	; 0x01
    3e0c:	92 81       	ldd	r25, Z+2	; 0x02
    3e0e:	fc 01       	movw	r30, r24
    3e10:	80 85       	ldd	r24, Z+8	; 0x08
    3e12:	91 85       	ldd	r25, Z+9	; 0x09
    3e14:	90 93 f3 11 	sts	0x11F3, r25	; 0x8011f3 <pxCurrentTCB+0x1>
    3e18:	80 93 f2 11 	sts	0x11F2, r24	; 0x8011f2 <pxCurrentTCB>
    3e1c:	89 81       	ldd	r24, Y+1	; 0x01
    3e1e:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    3e22:	00 00       	nop
    3e24:	0f 90       	pop	r0
    3e26:	0f 90       	pop	r0
    3e28:	0f 90       	pop	r0
    3e2a:	df 91       	pop	r29
    3e2c:	cf 91       	pop	r28
    3e2e:	08 95       	ret

00003e30 <vTaskPlaceOnEventList>:
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	00 d0       	rcall	.+0      	; 0x3e36 <vTaskPlaceOnEventList+0x6>
    3e36:	00 d0       	rcall	.+0      	; 0x3e38 <vTaskPlaceOnEventList+0x8>
    3e38:	cd b7       	in	r28, 0x3d	; 61
    3e3a:	de b7       	in	r29, 0x3e	; 62
    3e3c:	9a 83       	std	Y+2, r25	; 0x02
    3e3e:	89 83       	std	Y+1, r24	; 0x01
    3e40:	4b 83       	std	Y+3, r20	; 0x03
    3e42:	5c 83       	std	Y+4, r21	; 0x04
    3e44:	6d 83       	std	Y+5, r22	; 0x05
    3e46:	7e 83       	std	Y+6, r23	; 0x06
    3e48:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3e4c:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3e50:	9c 01       	movw	r18, r24
    3e52:	22 5f       	subi	r18, 0xF2	; 242
    3e54:	3f 4f       	sbci	r19, 0xFF	; 255
    3e56:	89 81       	ldd	r24, Y+1	; 0x01
    3e58:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5a:	b9 01       	movw	r22, r18
    3e5c:	0e 94 9a 09 	call	0x1334	; 0x1334 <vListInsert>
    3e60:	8b 81       	ldd	r24, Y+3	; 0x03
    3e62:	9c 81       	ldd	r25, Y+4	; 0x04
    3e64:	ad 81       	ldd	r26, Y+5	; 0x05
    3e66:	be 81       	ldd	r27, Y+6	; 0x06
    3e68:	41 e0       	ldi	r20, 0x01	; 1
    3e6a:	bc 01       	movw	r22, r24
    3e6c:	cd 01       	movw	r24, r26
    3e6e:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <prvAddCurrentTaskToDelayedList>
    3e72:	00 00       	nop
    3e74:	26 96       	adiw	r28, 0x06	; 6
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	df 91       	pop	r29
    3e82:	cf 91       	pop	r28
    3e84:	08 95       	ret

00003e86 <vTaskPlaceOnUnorderedEventList>:
    3e86:	0f 93       	push	r16
    3e88:	1f 93       	push	r17
    3e8a:	cf 93       	push	r28
    3e8c:	df 93       	push	r29
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62
    3e92:	2c 97       	sbiw	r28, 0x0c	; 12
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	f8 94       	cli
    3e98:	de bf       	out	0x3e, r29	; 62
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	cd bf       	out	0x3d, r28	; 61
    3e9e:	9c 83       	std	Y+4, r25	; 0x04
    3ea0:	8b 83       	std	Y+3, r24	; 0x03
    3ea2:	4d 83       	std	Y+5, r20	; 0x05
    3ea4:	5e 83       	std	Y+6, r21	; 0x06
    3ea6:	6f 83       	std	Y+7, r22	; 0x07
    3ea8:	78 87       	std	Y+8, r23	; 0x08
    3eaa:	09 87       	std	Y+9, r16	; 0x09
    3eac:	1a 87       	std	Y+10, r17	; 0x0a
    3eae:	2b 87       	std	Y+11, r18	; 0x0b
    3eb0:	3c 87       	std	Y+12, r19	; 0x0c
    3eb2:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3eb6:	30 91 f3 11 	lds	r19, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3eba:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebe:	af 81       	ldd	r26, Y+7	; 0x07
    3ec0:	b8 85       	ldd	r27, Y+8	; 0x08
    3ec2:	b0 68       	ori	r27, 0x80	; 128
    3ec4:	f9 01       	movw	r30, r18
    3ec6:	86 87       	std	Z+14, r24	; 0x0e
    3ec8:	97 87       	std	Z+15, r25	; 0x0f
    3eca:	a0 8b       	std	Z+16, r26	; 0x10
    3ecc:	b1 8b       	std	Z+17, r27	; 0x11
    3ece:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	81 81       	ldd	r24, Z+1	; 0x01
    3ed6:	92 81       	ldd	r25, Z+2	; 0x02
    3ed8:	9a 83       	std	Y+2, r25	; 0x02
    3eda:	89 83       	std	Y+1, r24	; 0x01
    3edc:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3ee0:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3ee4:	29 81       	ldd	r18, Y+1	; 0x01
    3ee6:	3a 81       	ldd	r19, Y+2	; 0x02
    3ee8:	fc 01       	movw	r30, r24
    3eea:	33 8b       	std	Z+19, r19	; 0x13
    3eec:	22 8b       	std	Z+18, r18	; 0x12
    3eee:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3ef2:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3ef6:	29 81       	ldd	r18, Y+1	; 0x01
    3ef8:	3a 81       	ldd	r19, Y+2	; 0x02
    3efa:	f9 01       	movw	r30, r18
    3efc:	26 81       	ldd	r18, Z+6	; 0x06
    3efe:	37 81       	ldd	r19, Z+7	; 0x07
    3f00:	fc 01       	movw	r30, r24
    3f02:	35 8b       	std	Z+21, r19	; 0x15
    3f04:	24 8b       	std	Z+20, r18	; 0x14
    3f06:	89 81       	ldd	r24, Y+1	; 0x01
    3f08:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0a:	fc 01       	movw	r30, r24
    3f0c:	86 81       	ldd	r24, Z+6	; 0x06
    3f0e:	97 81       	ldd	r25, Z+7	; 0x07
    3f10:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3f14:	30 91 f3 11 	lds	r19, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3f18:	22 5f       	subi	r18, 0xF2	; 242
    3f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	35 83       	std	Z+5, r19	; 0x05
    3f20:	24 83       	std	Z+4, r18	; 0x04
    3f22:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3f26:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3f2a:	9c 01       	movw	r18, r24
    3f2c:	22 5f       	subi	r18, 0xF2	; 242
    3f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f30:	89 81       	ldd	r24, Y+1	; 0x01
    3f32:	9a 81       	ldd	r25, Y+2	; 0x02
    3f34:	fc 01       	movw	r30, r24
    3f36:	37 83       	std	Z+7, r19	; 0x07
    3f38:	26 83       	std	Z+6, r18	; 0x06
    3f3a:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3f3e:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3f42:	2b 81       	ldd	r18, Y+3	; 0x03
    3f44:	3c 81       	ldd	r19, Y+4	; 0x04
    3f46:	fc 01       	movw	r30, r24
    3f48:	31 8f       	std	Z+25, r19	; 0x19
    3f4a:	20 8f       	std	Z+24, r18	; 0x18
    3f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f50:	fc 01       	movw	r30, r24
    3f52:	80 81       	ld	r24, Z
    3f54:	21 e0       	ldi	r18, 0x01	; 1
    3f56:	28 0f       	add	r18, r24
    3f58:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f5c:	fc 01       	movw	r30, r24
    3f5e:	20 83       	st	Z, r18
    3f60:	89 85       	ldd	r24, Y+9	; 0x09
    3f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f64:	ab 85       	ldd	r26, Y+11	; 0x0b
    3f66:	bc 85       	ldd	r27, Y+12	; 0x0c
    3f68:	41 e0       	ldi	r20, 0x01	; 1
    3f6a:	bc 01       	movw	r22, r24
    3f6c:	cd 01       	movw	r24, r26
    3f6e:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <prvAddCurrentTaskToDelayedList>
    3f72:	00 00       	nop
    3f74:	2c 96       	adiw	r28, 0x0c	; 12
    3f76:	0f b6       	in	r0, 0x3f	; 63
    3f78:	f8 94       	cli
    3f7a:	de bf       	out	0x3e, r29	; 62
    3f7c:	0f be       	out	0x3f, r0	; 63
    3f7e:	cd bf       	out	0x3d, r28	; 61
    3f80:	df 91       	pop	r29
    3f82:	cf 91       	pop	r28
    3f84:	1f 91       	pop	r17
    3f86:	0f 91       	pop	r16
    3f88:	08 95       	ret

00003f8a <vTaskPlaceOnEventListRestricted>:
    3f8a:	cf 93       	push	r28
    3f8c:	df 93       	push	r29
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	29 97       	sbiw	r28, 0x09	; 9
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	9c 83       	std	Y+4, r25	; 0x04
    3fa0:	8b 83       	std	Y+3, r24	; 0x03
    3fa2:	4d 83       	std	Y+5, r20	; 0x05
    3fa4:	5e 83       	std	Y+6, r21	; 0x06
    3fa6:	6f 83       	std	Y+7, r22	; 0x07
    3fa8:	78 87       	std	Y+8, r23	; 0x08
    3faa:	29 87       	std	Y+9, r18	; 0x09
    3fac:	8b 81       	ldd	r24, Y+3	; 0x03
    3fae:	9c 81       	ldd	r25, Y+4	; 0x04
    3fb0:	fc 01       	movw	r30, r24
    3fb2:	81 81       	ldd	r24, Z+1	; 0x01
    3fb4:	92 81       	ldd	r25, Z+2	; 0x02
    3fb6:	9a 83       	std	Y+2, r25	; 0x02
    3fb8:	89 83       	std	Y+1, r24	; 0x01
    3fba:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3fbe:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3fc2:	29 81       	ldd	r18, Y+1	; 0x01
    3fc4:	3a 81       	ldd	r19, Y+2	; 0x02
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	33 8b       	std	Z+19, r19	; 0x13
    3fca:	22 8b       	std	Z+18, r18	; 0x12
    3fcc:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3fd0:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3fd4:	29 81       	ldd	r18, Y+1	; 0x01
    3fd6:	3a 81       	ldd	r19, Y+2	; 0x02
    3fd8:	f9 01       	movw	r30, r18
    3fda:	26 81       	ldd	r18, Z+6	; 0x06
    3fdc:	37 81       	ldd	r19, Z+7	; 0x07
    3fde:	fc 01       	movw	r30, r24
    3fe0:	35 8b       	std	Z+21, r19	; 0x15
    3fe2:	24 8b       	std	Z+20, r18	; 0x14
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe8:	fc 01       	movw	r30, r24
    3fea:	86 81       	ldd	r24, Z+6	; 0x06
    3fec:	97 81       	ldd	r25, Z+7	; 0x07
    3fee:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    3ff2:	30 91 f3 11 	lds	r19, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    3ff6:	22 5f       	subi	r18, 0xF2	; 242
    3ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	35 83       	std	Z+5, r19	; 0x05
    3ffe:	24 83       	std	Z+4, r18	; 0x04
    4000:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    4004:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4008:	9c 01       	movw	r18, r24
    400a:	22 5f       	subi	r18, 0xF2	; 242
    400c:	3f 4f       	sbci	r19, 0xFF	; 255
    400e:	89 81       	ldd	r24, Y+1	; 0x01
    4010:	9a 81       	ldd	r25, Y+2	; 0x02
    4012:	fc 01       	movw	r30, r24
    4014:	37 83       	std	Z+7, r19	; 0x07
    4016:	26 83       	std	Z+6, r18	; 0x06
    4018:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    401c:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4020:	2b 81       	ldd	r18, Y+3	; 0x03
    4022:	3c 81       	ldd	r19, Y+4	; 0x04
    4024:	fc 01       	movw	r30, r24
    4026:	31 8f       	std	Z+25, r19	; 0x19
    4028:	20 8f       	std	Z+24, r18	; 0x18
    402a:	8b 81       	ldd	r24, Y+3	; 0x03
    402c:	9c 81       	ldd	r25, Y+4	; 0x04
    402e:	fc 01       	movw	r30, r24
    4030:	80 81       	ld	r24, Z
    4032:	21 e0       	ldi	r18, 0x01	; 1
    4034:	28 0f       	add	r18, r24
    4036:	8b 81       	ldd	r24, Y+3	; 0x03
    4038:	9c 81       	ldd	r25, Y+4	; 0x04
    403a:	fc 01       	movw	r30, r24
    403c:	20 83       	st	Z, r18
    403e:	89 85       	ldd	r24, Y+9	; 0x09
    4040:	88 23       	and	r24, r24
    4042:	39 f0       	breq	.+14     	; 0x4052 <vTaskPlaceOnEventListRestricted+0xc8>
    4044:	8f ef       	ldi	r24, 0xFF	; 255
    4046:	9f ef       	ldi	r25, 0xFF	; 255
    4048:	dc 01       	movw	r26, r24
    404a:	8d 83       	std	Y+5, r24	; 0x05
    404c:	9e 83       	std	Y+6, r25	; 0x06
    404e:	af 83       	std	Y+7, r26	; 0x07
    4050:	b8 87       	std	Y+8, r27	; 0x08
    4052:	8d 81       	ldd	r24, Y+5	; 0x05
    4054:	9e 81       	ldd	r25, Y+6	; 0x06
    4056:	af 81       	ldd	r26, Y+7	; 0x07
    4058:	b8 85       	ldd	r27, Y+8	; 0x08
    405a:	49 85       	ldd	r20, Y+9	; 0x09
    405c:	bc 01       	movw	r22, r24
    405e:	cd 01       	movw	r24, r26
    4060:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <prvAddCurrentTaskToDelayedList>
    4064:	00 00       	nop
    4066:	29 96       	adiw	r28, 0x09	; 9
    4068:	0f b6       	in	r0, 0x3f	; 63
    406a:	f8 94       	cli
    406c:	de bf       	out	0x3e, r29	; 62
    406e:	0f be       	out	0x3f, r0	; 63
    4070:	cd bf       	out	0x3d, r28	; 61
    4072:	df 91       	pop	r29
    4074:	cf 91       	pop	r28
    4076:	08 95       	ret

00004078 <xTaskRemoveFromEventList>:
    4078:	cf 93       	push	r28
    407a:	df 93       	push	r29
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
    4080:	2d 97       	sbiw	r28, 0x0d	; 13
    4082:	0f b6       	in	r0, 0x3f	; 63
    4084:	f8 94       	cli
    4086:	de bf       	out	0x3e, r29	; 62
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	cd bf       	out	0x3d, r28	; 61
    408c:	9d 87       	std	Y+13, r25	; 0x0d
    408e:	8c 87       	std	Y+12, r24	; 0x0c
    4090:	8c 85       	ldd	r24, Y+12	; 0x0c
    4092:	9d 85       	ldd	r25, Y+13	; 0x0d
    4094:	fc 01       	movw	r30, r24
    4096:	87 81       	ldd	r24, Z+7	; 0x07
    4098:	90 85       	ldd	r25, Z+8	; 0x08
    409a:	fc 01       	movw	r30, r24
    409c:	80 85       	ldd	r24, Z+8	; 0x08
    409e:	91 85       	ldd	r25, Z+9	; 0x09
    40a0:	9b 83       	std	Y+3, r25	; 0x03
    40a2:	8a 83       	std	Y+2, r24	; 0x02
    40a4:	8a 81       	ldd	r24, Y+2	; 0x02
    40a6:	9b 81       	ldd	r25, Y+3	; 0x03
    40a8:	fc 01       	movw	r30, r24
    40aa:	80 8d       	ldd	r24, Z+24	; 0x18
    40ac:	91 8d       	ldd	r25, Z+25	; 0x19
    40ae:	9d 83       	std	Y+5, r25	; 0x05
    40b0:	8c 83       	std	Y+4, r24	; 0x04
    40b2:	8a 81       	ldd	r24, Y+2	; 0x02
    40b4:	9b 81       	ldd	r25, Y+3	; 0x03
    40b6:	fc 01       	movw	r30, r24
    40b8:	82 89       	ldd	r24, Z+18	; 0x12
    40ba:	93 89       	ldd	r25, Z+19	; 0x13
    40bc:	2a 81       	ldd	r18, Y+2	; 0x02
    40be:	3b 81       	ldd	r19, Y+3	; 0x03
    40c0:	f9 01       	movw	r30, r18
    40c2:	24 89       	ldd	r18, Z+20	; 0x14
    40c4:	35 89       	ldd	r19, Z+21	; 0x15
    40c6:	fc 01       	movw	r30, r24
    40c8:	37 83       	std	Z+7, r19	; 0x07
    40ca:	26 83       	std	Z+6, r18	; 0x06
    40cc:	8a 81       	ldd	r24, Y+2	; 0x02
    40ce:	9b 81       	ldd	r25, Y+3	; 0x03
    40d0:	fc 01       	movw	r30, r24
    40d2:	84 89       	ldd	r24, Z+20	; 0x14
    40d4:	95 89       	ldd	r25, Z+21	; 0x15
    40d6:	2a 81       	ldd	r18, Y+2	; 0x02
    40d8:	3b 81       	ldd	r19, Y+3	; 0x03
    40da:	f9 01       	movw	r30, r18
    40dc:	22 89       	ldd	r18, Z+18	; 0x12
    40de:	33 89       	ldd	r19, Z+19	; 0x13
    40e0:	fc 01       	movw	r30, r24
    40e2:	35 83       	std	Z+5, r19	; 0x05
    40e4:	24 83       	std	Z+4, r18	; 0x04
    40e6:	8c 81       	ldd	r24, Y+4	; 0x04
    40e8:	9d 81       	ldd	r25, Y+5	; 0x05
    40ea:	fc 01       	movw	r30, r24
    40ec:	21 81       	ldd	r18, Z+1	; 0x01
    40ee:	32 81       	ldd	r19, Z+2	; 0x02
    40f0:	8a 81       	ldd	r24, Y+2	; 0x02
    40f2:	9b 81       	ldd	r25, Y+3	; 0x03
    40f4:	0e 96       	adiw	r24, 0x0e	; 14
    40f6:	28 17       	cp	r18, r24
    40f8:	39 07       	cpc	r19, r25
    40fa:	51 f4       	brne	.+20     	; 0x4110 <xTaskRemoveFromEventList+0x98>
    40fc:	8a 81       	ldd	r24, Y+2	; 0x02
    40fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4100:	fc 01       	movw	r30, r24
    4102:	24 89       	ldd	r18, Z+20	; 0x14
    4104:	35 89       	ldd	r19, Z+21	; 0x15
    4106:	8c 81       	ldd	r24, Y+4	; 0x04
    4108:	9d 81       	ldd	r25, Y+5	; 0x05
    410a:	fc 01       	movw	r30, r24
    410c:	32 83       	std	Z+2, r19	; 0x02
    410e:	21 83       	std	Z+1, r18	; 0x01
    4110:	8a 81       	ldd	r24, Y+2	; 0x02
    4112:	9b 81       	ldd	r25, Y+3	; 0x03
    4114:	fc 01       	movw	r30, r24
    4116:	11 8e       	std	Z+25, r1	; 0x19
    4118:	10 8e       	std	Z+24, r1	; 0x18
    411a:	8c 81       	ldd	r24, Y+4	; 0x04
    411c:	9d 81       	ldd	r25, Y+5	; 0x05
    411e:	fc 01       	movw	r30, r24
    4120:	80 81       	ld	r24, Z
    4122:	2f ef       	ldi	r18, 0xFF	; 255
    4124:	28 0f       	add	r18, r24
    4126:	8c 81       	ldd	r24, Y+4	; 0x04
    4128:	9d 81       	ldd	r25, Y+5	; 0x05
    412a:	fc 01       	movw	r30, r24
    412c:	20 83       	st	Z, r18
    412e:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxSchedulerSuspended>
    4132:	88 23       	and	r24, r24
    4134:	09 f0       	breq	.+2      	; 0x4138 <xTaskRemoveFromEventList+0xc0>
    4136:	bf c0       	rjmp	.+382    	; 0x42b6 <xTaskRemoveFromEventList+0x23e>
    4138:	8a 81       	ldd	r24, Y+2	; 0x02
    413a:	9b 81       	ldd	r25, Y+3	; 0x03
    413c:	fc 01       	movw	r30, r24
    413e:	84 85       	ldd	r24, Z+12	; 0x0c
    4140:	95 85       	ldd	r25, Z+13	; 0x0d
    4142:	9f 83       	std	Y+7, r25	; 0x07
    4144:	8e 83       	std	Y+6, r24	; 0x06
    4146:	8a 81       	ldd	r24, Y+2	; 0x02
    4148:	9b 81       	ldd	r25, Y+3	; 0x03
    414a:	fc 01       	movw	r30, r24
    414c:	86 81       	ldd	r24, Z+6	; 0x06
    414e:	97 81       	ldd	r25, Z+7	; 0x07
    4150:	2a 81       	ldd	r18, Y+2	; 0x02
    4152:	3b 81       	ldd	r19, Y+3	; 0x03
    4154:	f9 01       	movw	r30, r18
    4156:	20 85       	ldd	r18, Z+8	; 0x08
    4158:	31 85       	ldd	r19, Z+9	; 0x09
    415a:	fc 01       	movw	r30, r24
    415c:	37 83       	std	Z+7, r19	; 0x07
    415e:	26 83       	std	Z+6, r18	; 0x06
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	9b 81       	ldd	r25, Y+3	; 0x03
    4164:	fc 01       	movw	r30, r24
    4166:	80 85       	ldd	r24, Z+8	; 0x08
    4168:	91 85       	ldd	r25, Z+9	; 0x09
    416a:	2a 81       	ldd	r18, Y+2	; 0x02
    416c:	3b 81       	ldd	r19, Y+3	; 0x03
    416e:	f9 01       	movw	r30, r18
    4170:	26 81       	ldd	r18, Z+6	; 0x06
    4172:	37 81       	ldd	r19, Z+7	; 0x07
    4174:	fc 01       	movw	r30, r24
    4176:	35 83       	std	Z+5, r19	; 0x05
    4178:	24 83       	std	Z+4, r18	; 0x04
    417a:	8e 81       	ldd	r24, Y+6	; 0x06
    417c:	9f 81       	ldd	r25, Y+7	; 0x07
    417e:	fc 01       	movw	r30, r24
    4180:	21 81       	ldd	r18, Z+1	; 0x01
    4182:	32 81       	ldd	r19, Z+2	; 0x02
    4184:	8a 81       	ldd	r24, Y+2	; 0x02
    4186:	9b 81       	ldd	r25, Y+3	; 0x03
    4188:	02 96       	adiw	r24, 0x02	; 2
    418a:	28 17       	cp	r18, r24
    418c:	39 07       	cpc	r19, r25
    418e:	51 f4       	brne	.+20     	; 0x41a4 <xTaskRemoveFromEventList+0x12c>
    4190:	8a 81       	ldd	r24, Y+2	; 0x02
    4192:	9b 81       	ldd	r25, Y+3	; 0x03
    4194:	fc 01       	movw	r30, r24
    4196:	20 85       	ldd	r18, Z+8	; 0x08
    4198:	31 85       	ldd	r19, Z+9	; 0x09
    419a:	8e 81       	ldd	r24, Y+6	; 0x06
    419c:	9f 81       	ldd	r25, Y+7	; 0x07
    419e:	fc 01       	movw	r30, r24
    41a0:	32 83       	std	Z+2, r19	; 0x02
    41a2:	21 83       	std	Z+1, r18	; 0x01
    41a4:	8a 81       	ldd	r24, Y+2	; 0x02
    41a6:	9b 81       	ldd	r25, Y+3	; 0x03
    41a8:	fc 01       	movw	r30, r24
    41aa:	15 86       	std	Z+13, r1	; 0x0d
    41ac:	14 86       	std	Z+12, r1	; 0x0c
    41ae:	8e 81       	ldd	r24, Y+6	; 0x06
    41b0:	9f 81       	ldd	r25, Y+7	; 0x07
    41b2:	fc 01       	movw	r30, r24
    41b4:	80 81       	ld	r24, Z
    41b6:	2f ef       	ldi	r18, 0xFF	; 255
    41b8:	28 0f       	add	r18, r24
    41ba:	8e 81       	ldd	r24, Y+6	; 0x06
    41bc:	9f 81       	ldd	r25, Y+7	; 0x07
    41be:	fc 01       	movw	r30, r24
    41c0:	20 83       	st	Z, r18
    41c2:	8a 81       	ldd	r24, Y+2	; 0x02
    41c4:	9b 81       	ldd	r25, Y+3	; 0x03
    41c6:	fc 01       	movw	r30, r24
    41c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    41ca:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    41ce:	89 17       	cp	r24, r25
    41d0:	30 f4       	brcc	.+12     	; 0x41de <xTaskRemoveFromEventList+0x166>
    41d2:	8a 81       	ldd	r24, Y+2	; 0x02
    41d4:	9b 81       	ldd	r25, Y+3	; 0x03
    41d6:	fc 01       	movw	r30, r24
    41d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    41da:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    41de:	8a 81       	ldd	r24, Y+2	; 0x02
    41e0:	9b 81       	ldd	r25, Y+3	; 0x03
    41e2:	fc 01       	movw	r30, r24
    41e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    41e6:	28 2f       	mov	r18, r24
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	4b e0       	ldi	r20, 0x0B	; 11
    41ec:	42 9f       	mul	r20, r18
    41ee:	c0 01       	movw	r24, r0
    41f0:	43 9f       	mul	r20, r19
    41f2:	90 0d       	add	r25, r0
    41f4:	11 24       	eor	r1, r1
    41f6:	8b 50       	subi	r24, 0x0B	; 11
    41f8:	9e 4e       	sbci	r25, 0xEE	; 238
    41fa:	fc 01       	movw	r30, r24
    41fc:	80 81       	ld	r24, Z
    41fe:	91 81       	ldd	r25, Z+1	; 0x01
    4200:	99 87       	std	Y+9, r25	; 0x09
    4202:	88 87       	std	Y+8, r24	; 0x08
    4204:	8a 81       	ldd	r24, Y+2	; 0x02
    4206:	9b 81       	ldd	r25, Y+3	; 0x03
    4208:	28 85       	ldd	r18, Y+8	; 0x08
    420a:	39 85       	ldd	r19, Y+9	; 0x09
    420c:	fc 01       	movw	r30, r24
    420e:	37 83       	std	Z+7, r19	; 0x07
    4210:	26 83       	std	Z+6, r18	; 0x06
    4212:	88 85       	ldd	r24, Y+8	; 0x08
    4214:	99 85       	ldd	r25, Y+9	; 0x09
    4216:	fc 01       	movw	r30, r24
    4218:	26 81       	ldd	r18, Z+6	; 0x06
    421a:	37 81       	ldd	r19, Z+7	; 0x07
    421c:	8a 81       	ldd	r24, Y+2	; 0x02
    421e:	9b 81       	ldd	r25, Y+3	; 0x03
    4220:	fc 01       	movw	r30, r24
    4222:	31 87       	std	Z+9, r19	; 0x09
    4224:	20 87       	std	Z+8, r18	; 0x08
    4226:	88 85       	ldd	r24, Y+8	; 0x08
    4228:	99 85       	ldd	r25, Y+9	; 0x09
    422a:	fc 01       	movw	r30, r24
    422c:	86 81       	ldd	r24, Z+6	; 0x06
    422e:	97 81       	ldd	r25, Z+7	; 0x07
    4230:	2a 81       	ldd	r18, Y+2	; 0x02
    4232:	3b 81       	ldd	r19, Y+3	; 0x03
    4234:	2e 5f       	subi	r18, 0xFE	; 254
    4236:	3f 4f       	sbci	r19, 0xFF	; 255
    4238:	fc 01       	movw	r30, r24
    423a:	35 83       	std	Z+5, r19	; 0x05
    423c:	24 83       	std	Z+4, r18	; 0x04
    423e:	8a 81       	ldd	r24, Y+2	; 0x02
    4240:	9b 81       	ldd	r25, Y+3	; 0x03
    4242:	9c 01       	movw	r18, r24
    4244:	2e 5f       	subi	r18, 0xFE	; 254
    4246:	3f 4f       	sbci	r19, 0xFF	; 255
    4248:	88 85       	ldd	r24, Y+8	; 0x08
    424a:	99 85       	ldd	r25, Y+9	; 0x09
    424c:	fc 01       	movw	r30, r24
    424e:	37 83       	std	Z+7, r19	; 0x07
    4250:	26 83       	std	Z+6, r18	; 0x06
    4252:	8a 81       	ldd	r24, Y+2	; 0x02
    4254:	9b 81       	ldd	r25, Y+3	; 0x03
    4256:	fc 01       	movw	r30, r24
    4258:	82 8d       	ldd	r24, Z+26	; 0x1a
    425a:	28 2f       	mov	r18, r24
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	4b e0       	ldi	r20, 0x0B	; 11
    4260:	42 9f       	mul	r20, r18
    4262:	c0 01       	movw	r24, r0
    4264:	43 9f       	mul	r20, r19
    4266:	90 0d       	add	r25, r0
    4268:	11 24       	eor	r1, r1
    426a:	9c 01       	movw	r18, r24
    426c:	2c 50       	subi	r18, 0x0C	; 12
    426e:	3e 4e       	sbci	r19, 0xEE	; 238
    4270:	8a 81       	ldd	r24, Y+2	; 0x02
    4272:	9b 81       	ldd	r25, Y+3	; 0x03
    4274:	fc 01       	movw	r30, r24
    4276:	35 87       	std	Z+13, r19	; 0x0d
    4278:	24 87       	std	Z+12, r18	; 0x0c
    427a:	8a 81       	ldd	r24, Y+2	; 0x02
    427c:	9b 81       	ldd	r25, Y+3	; 0x03
    427e:	fc 01       	movw	r30, r24
    4280:	82 8d       	ldd	r24, Z+26	; 0x1a
    4282:	88 2f       	mov	r24, r24
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	4b e0       	ldi	r20, 0x0B	; 11
    4288:	48 9f       	mul	r20, r24
    428a:	90 01       	movw	r18, r0
    428c:	49 9f       	mul	r20, r25
    428e:	30 0d       	add	r19, r0
    4290:	11 24       	eor	r1, r1
    4292:	2c 50       	subi	r18, 0x0C	; 12
    4294:	3e 4e       	sbci	r19, 0xEE	; 238
    4296:	f9 01       	movw	r30, r18
    4298:	20 81       	ld	r18, Z
    429a:	41 e0       	ldi	r20, 0x01	; 1
    429c:	42 0f       	add	r20, r18
    429e:	5b e0       	ldi	r21, 0x0B	; 11
    42a0:	58 9f       	mul	r21, r24
    42a2:	90 01       	movw	r18, r0
    42a4:	59 9f       	mul	r21, r25
    42a6:	30 0d       	add	r19, r0
    42a8:	11 24       	eor	r1, r1
    42aa:	c9 01       	movw	r24, r18
    42ac:	8c 50       	subi	r24, 0x0C	; 12
    42ae:	9e 4e       	sbci	r25, 0xEE	; 238
    42b0:	fc 01       	movw	r30, r24
    42b2:	40 83       	st	Z, r20
    42b4:	39 c0       	rjmp	.+114    	; 0x4328 <xTaskRemoveFromEventList+0x2b0>
    42b6:	80 91 7d 12 	lds	r24, 0x127D	; 0x80127d <xPendingReadyList+0x1>
    42ba:	90 91 7e 12 	lds	r25, 0x127E	; 0x80127e <xPendingReadyList+0x2>
    42be:	9b 87       	std	Y+11, r25	; 0x0b
    42c0:	8a 87       	std	Y+10, r24	; 0x0a
    42c2:	8a 81       	ldd	r24, Y+2	; 0x02
    42c4:	9b 81       	ldd	r25, Y+3	; 0x03
    42c6:	2a 85       	ldd	r18, Y+10	; 0x0a
    42c8:	3b 85       	ldd	r19, Y+11	; 0x0b
    42ca:	fc 01       	movw	r30, r24
    42cc:	33 8b       	std	Z+19, r19	; 0x13
    42ce:	22 8b       	std	Z+18, r18	; 0x12
    42d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    42d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    42d4:	fc 01       	movw	r30, r24
    42d6:	26 81       	ldd	r18, Z+6	; 0x06
    42d8:	37 81       	ldd	r19, Z+7	; 0x07
    42da:	8a 81       	ldd	r24, Y+2	; 0x02
    42dc:	9b 81       	ldd	r25, Y+3	; 0x03
    42de:	fc 01       	movw	r30, r24
    42e0:	35 8b       	std	Z+21, r19	; 0x15
    42e2:	24 8b       	std	Z+20, r18	; 0x14
    42e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    42e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    42e8:	fc 01       	movw	r30, r24
    42ea:	86 81       	ldd	r24, Z+6	; 0x06
    42ec:	97 81       	ldd	r25, Z+7	; 0x07
    42ee:	2a 81       	ldd	r18, Y+2	; 0x02
    42f0:	3b 81       	ldd	r19, Y+3	; 0x03
    42f2:	22 5f       	subi	r18, 0xF2	; 242
    42f4:	3f 4f       	sbci	r19, 0xFF	; 255
    42f6:	fc 01       	movw	r30, r24
    42f8:	35 83       	std	Z+5, r19	; 0x05
    42fa:	24 83       	std	Z+4, r18	; 0x04
    42fc:	8a 81       	ldd	r24, Y+2	; 0x02
    42fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4300:	9c 01       	movw	r18, r24
    4302:	22 5f       	subi	r18, 0xF2	; 242
    4304:	3f 4f       	sbci	r19, 0xFF	; 255
    4306:	8a 85       	ldd	r24, Y+10	; 0x0a
    4308:	9b 85       	ldd	r25, Y+11	; 0x0b
    430a:	fc 01       	movw	r30, r24
    430c:	37 83       	std	Z+7, r19	; 0x07
    430e:	26 83       	std	Z+6, r18	; 0x06
    4310:	8a 81       	ldd	r24, Y+2	; 0x02
    4312:	9b 81       	ldd	r25, Y+3	; 0x03
    4314:	2c e7       	ldi	r18, 0x7C	; 124
    4316:	32 e1       	ldi	r19, 0x12	; 18
    4318:	fc 01       	movw	r30, r24
    431a:	31 8f       	std	Z+25, r19	; 0x19
    431c:	20 8f       	std	Z+24, r18	; 0x18
    431e:	80 91 7c 12 	lds	r24, 0x127C	; 0x80127c <xPendingReadyList>
    4322:	8f 5f       	subi	r24, 0xFF	; 255
    4324:	80 93 7c 12 	sts	0x127C, r24	; 0x80127c <xPendingReadyList>
    4328:	8a 81       	ldd	r24, Y+2	; 0x02
    432a:	9b 81       	ldd	r25, Y+3	; 0x03
    432c:	fc 01       	movw	r30, r24
    432e:	22 8d       	ldd	r18, Z+26	; 0x1a
    4330:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    4334:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4338:	fc 01       	movw	r30, r24
    433a:	82 8d       	ldd	r24, Z+26	; 0x1a
    433c:	82 17       	cp	r24, r18
    433e:	30 f4       	brcc	.+12     	; 0x434c <xTaskRemoveFromEventList+0x2d4>
    4340:	81 e0       	ldi	r24, 0x01	; 1
    4342:	89 83       	std	Y+1, r24	; 0x01
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	80 93 a9 12 	sts	0x12A9, r24	; 0x8012a9 <xYieldPending>
    434a:	01 c0       	rjmp	.+2      	; 0x434e <xTaskRemoveFromEventList+0x2d6>
    434c:	19 82       	std	Y+1, r1	; 0x01
    434e:	89 81       	ldd	r24, Y+1	; 0x01
    4350:	2d 96       	adiw	r28, 0x0d	; 13
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	f8 94       	cli
    4356:	de bf       	out	0x3e, r29	; 62
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	cd bf       	out	0x3d, r28	; 61
    435c:	df 91       	pop	r29
    435e:	cf 91       	pop	r28
    4360:	08 95       	ret

00004362 <vTaskRemoveFromUnorderedEventList>:
    4362:	cf 93       	push	r28
    4364:	df 93       	push	r29
    4366:	cd b7       	in	r28, 0x3d	; 61
    4368:	de b7       	in	r29, 0x3e	; 62
    436a:	2e 97       	sbiw	r28, 0x0e	; 14
    436c:	0f b6       	in	r0, 0x3f	; 63
    436e:	f8 94       	cli
    4370:	de bf       	out	0x3e, r29	; 62
    4372:	0f be       	out	0x3f, r0	; 63
    4374:	cd bf       	out	0x3d, r28	; 61
    4376:	9a 87       	std	Y+10, r25	; 0x0a
    4378:	89 87       	std	Y+9, r24	; 0x09
    437a:	4b 87       	std	Y+11, r20	; 0x0b
    437c:	5c 87       	std	Y+12, r21	; 0x0c
    437e:	6d 87       	std	Y+13, r22	; 0x0d
    4380:	7e 87       	std	Y+14, r23	; 0x0e
    4382:	8b 85       	ldd	r24, Y+11	; 0x0b
    4384:	9c 85       	ldd	r25, Y+12	; 0x0c
    4386:	ad 85       	ldd	r26, Y+13	; 0x0d
    4388:	be 85       	ldd	r27, Y+14	; 0x0e
    438a:	b0 68       	ori	r27, 0x80	; 128
    438c:	29 85       	ldd	r18, Y+9	; 0x09
    438e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4390:	f9 01       	movw	r30, r18
    4392:	80 83       	st	Z, r24
    4394:	91 83       	std	Z+1, r25	; 0x01
    4396:	a2 83       	std	Z+2, r26	; 0x02
    4398:	b3 83       	std	Z+3, r27	; 0x03
    439a:	89 85       	ldd	r24, Y+9	; 0x09
    439c:	9a 85       	ldd	r25, Y+10	; 0x0a
    439e:	fc 01       	movw	r30, r24
    43a0:	80 85       	ldd	r24, Z+8	; 0x08
    43a2:	91 85       	ldd	r25, Z+9	; 0x09
    43a4:	9a 83       	std	Y+2, r25	; 0x02
    43a6:	89 83       	std	Y+1, r24	; 0x01
    43a8:	89 85       	ldd	r24, Y+9	; 0x09
    43aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ac:	fc 01       	movw	r30, r24
    43ae:	82 85       	ldd	r24, Z+10	; 0x0a
    43b0:	93 85       	ldd	r25, Z+11	; 0x0b
    43b2:	9c 83       	std	Y+4, r25	; 0x04
    43b4:	8b 83       	std	Y+3, r24	; 0x03
    43b6:	89 85       	ldd	r24, Y+9	; 0x09
    43b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ba:	fc 01       	movw	r30, r24
    43bc:	84 81       	ldd	r24, Z+4	; 0x04
    43be:	95 81       	ldd	r25, Z+5	; 0x05
    43c0:	29 85       	ldd	r18, Y+9	; 0x09
    43c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    43c4:	f9 01       	movw	r30, r18
    43c6:	26 81       	ldd	r18, Z+6	; 0x06
    43c8:	37 81       	ldd	r19, Z+7	; 0x07
    43ca:	fc 01       	movw	r30, r24
    43cc:	37 83       	std	Z+7, r19	; 0x07
    43ce:	26 83       	std	Z+6, r18	; 0x06
    43d0:	89 85       	ldd	r24, Y+9	; 0x09
    43d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d4:	fc 01       	movw	r30, r24
    43d6:	86 81       	ldd	r24, Z+6	; 0x06
    43d8:	97 81       	ldd	r25, Z+7	; 0x07
    43da:	29 85       	ldd	r18, Y+9	; 0x09
    43dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    43de:	f9 01       	movw	r30, r18
    43e0:	24 81       	ldd	r18, Z+4	; 0x04
    43e2:	35 81       	ldd	r19, Z+5	; 0x05
    43e4:	fc 01       	movw	r30, r24
    43e6:	35 83       	std	Z+5, r19	; 0x05
    43e8:	24 83       	std	Z+4, r18	; 0x04
    43ea:	8b 81       	ldd	r24, Y+3	; 0x03
    43ec:	9c 81       	ldd	r25, Y+4	; 0x04
    43ee:	fc 01       	movw	r30, r24
    43f0:	21 81       	ldd	r18, Z+1	; 0x01
    43f2:	32 81       	ldd	r19, Z+2	; 0x02
    43f4:	89 85       	ldd	r24, Y+9	; 0x09
    43f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43f8:	28 17       	cp	r18, r24
    43fa:	39 07       	cpc	r19, r25
    43fc:	51 f4       	brne	.+20     	; 0x4412 <vTaskRemoveFromUnorderedEventList+0xb0>
    43fe:	89 85       	ldd	r24, Y+9	; 0x09
    4400:	9a 85       	ldd	r25, Y+10	; 0x0a
    4402:	fc 01       	movw	r30, r24
    4404:	26 81       	ldd	r18, Z+6	; 0x06
    4406:	37 81       	ldd	r19, Z+7	; 0x07
    4408:	8b 81       	ldd	r24, Y+3	; 0x03
    440a:	9c 81       	ldd	r25, Y+4	; 0x04
    440c:	fc 01       	movw	r30, r24
    440e:	32 83       	std	Z+2, r19	; 0x02
    4410:	21 83       	std	Z+1, r18	; 0x01
    4412:	89 85       	ldd	r24, Y+9	; 0x09
    4414:	9a 85       	ldd	r25, Y+10	; 0x0a
    4416:	fc 01       	movw	r30, r24
    4418:	13 86       	std	Z+11, r1	; 0x0b
    441a:	12 86       	std	Z+10, r1	; 0x0a
    441c:	8b 81       	ldd	r24, Y+3	; 0x03
    441e:	9c 81       	ldd	r25, Y+4	; 0x04
    4420:	fc 01       	movw	r30, r24
    4422:	80 81       	ld	r24, Z
    4424:	2f ef       	ldi	r18, 0xFF	; 255
    4426:	28 0f       	add	r18, r24
    4428:	8b 81       	ldd	r24, Y+3	; 0x03
    442a:	9c 81       	ldd	r25, Y+4	; 0x04
    442c:	fc 01       	movw	r30, r24
    442e:	20 83       	st	Z, r18
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	9a 81       	ldd	r25, Y+2	; 0x02
    4434:	fc 01       	movw	r30, r24
    4436:	84 85       	ldd	r24, Z+12	; 0x0c
    4438:	95 85       	ldd	r25, Z+13	; 0x0d
    443a:	9e 83       	std	Y+6, r25	; 0x06
    443c:	8d 83       	std	Y+5, r24	; 0x05
    443e:	89 81       	ldd	r24, Y+1	; 0x01
    4440:	9a 81       	ldd	r25, Y+2	; 0x02
    4442:	fc 01       	movw	r30, r24
    4444:	86 81       	ldd	r24, Z+6	; 0x06
    4446:	97 81       	ldd	r25, Z+7	; 0x07
    4448:	29 81       	ldd	r18, Y+1	; 0x01
    444a:	3a 81       	ldd	r19, Y+2	; 0x02
    444c:	f9 01       	movw	r30, r18
    444e:	20 85       	ldd	r18, Z+8	; 0x08
    4450:	31 85       	ldd	r19, Z+9	; 0x09
    4452:	fc 01       	movw	r30, r24
    4454:	37 83       	std	Z+7, r19	; 0x07
    4456:	26 83       	std	Z+6, r18	; 0x06
    4458:	89 81       	ldd	r24, Y+1	; 0x01
    445a:	9a 81       	ldd	r25, Y+2	; 0x02
    445c:	fc 01       	movw	r30, r24
    445e:	80 85       	ldd	r24, Z+8	; 0x08
    4460:	91 85       	ldd	r25, Z+9	; 0x09
    4462:	29 81       	ldd	r18, Y+1	; 0x01
    4464:	3a 81       	ldd	r19, Y+2	; 0x02
    4466:	f9 01       	movw	r30, r18
    4468:	26 81       	ldd	r18, Z+6	; 0x06
    446a:	37 81       	ldd	r19, Z+7	; 0x07
    446c:	fc 01       	movw	r30, r24
    446e:	35 83       	std	Z+5, r19	; 0x05
    4470:	24 83       	std	Z+4, r18	; 0x04
    4472:	8d 81       	ldd	r24, Y+5	; 0x05
    4474:	9e 81       	ldd	r25, Y+6	; 0x06
    4476:	fc 01       	movw	r30, r24
    4478:	21 81       	ldd	r18, Z+1	; 0x01
    447a:	32 81       	ldd	r19, Z+2	; 0x02
    447c:	89 81       	ldd	r24, Y+1	; 0x01
    447e:	9a 81       	ldd	r25, Y+2	; 0x02
    4480:	02 96       	adiw	r24, 0x02	; 2
    4482:	28 17       	cp	r18, r24
    4484:	39 07       	cpc	r19, r25
    4486:	51 f4       	brne	.+20     	; 0x449c <vTaskRemoveFromUnorderedEventList+0x13a>
    4488:	89 81       	ldd	r24, Y+1	; 0x01
    448a:	9a 81       	ldd	r25, Y+2	; 0x02
    448c:	fc 01       	movw	r30, r24
    448e:	20 85       	ldd	r18, Z+8	; 0x08
    4490:	31 85       	ldd	r19, Z+9	; 0x09
    4492:	8d 81       	ldd	r24, Y+5	; 0x05
    4494:	9e 81       	ldd	r25, Y+6	; 0x06
    4496:	fc 01       	movw	r30, r24
    4498:	32 83       	std	Z+2, r19	; 0x02
    449a:	21 83       	std	Z+1, r18	; 0x01
    449c:	89 81       	ldd	r24, Y+1	; 0x01
    449e:	9a 81       	ldd	r25, Y+2	; 0x02
    44a0:	fc 01       	movw	r30, r24
    44a2:	15 86       	std	Z+13, r1	; 0x0d
    44a4:	14 86       	std	Z+12, r1	; 0x0c
    44a6:	8d 81       	ldd	r24, Y+5	; 0x05
    44a8:	9e 81       	ldd	r25, Y+6	; 0x06
    44aa:	fc 01       	movw	r30, r24
    44ac:	80 81       	ld	r24, Z
    44ae:	2f ef       	ldi	r18, 0xFF	; 255
    44b0:	28 0f       	add	r18, r24
    44b2:	8d 81       	ldd	r24, Y+5	; 0x05
    44b4:	9e 81       	ldd	r25, Y+6	; 0x06
    44b6:	fc 01       	movw	r30, r24
    44b8:	20 83       	st	Z, r18
    44ba:	89 81       	ldd	r24, Y+1	; 0x01
    44bc:	9a 81       	ldd	r25, Y+2	; 0x02
    44be:	fc 01       	movw	r30, r24
    44c0:	92 8d       	ldd	r25, Z+26	; 0x1a
    44c2:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    44c6:	89 17       	cp	r24, r25
    44c8:	30 f4       	brcc	.+12     	; 0x44d6 <vTaskRemoveFromUnorderedEventList+0x174>
    44ca:	89 81       	ldd	r24, Y+1	; 0x01
    44cc:	9a 81       	ldd	r25, Y+2	; 0x02
    44ce:	fc 01       	movw	r30, r24
    44d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    44d2:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    44d6:	89 81       	ldd	r24, Y+1	; 0x01
    44d8:	9a 81       	ldd	r25, Y+2	; 0x02
    44da:	fc 01       	movw	r30, r24
    44dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    44de:	28 2f       	mov	r18, r24
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	4b e0       	ldi	r20, 0x0B	; 11
    44e4:	42 9f       	mul	r20, r18
    44e6:	c0 01       	movw	r24, r0
    44e8:	43 9f       	mul	r20, r19
    44ea:	90 0d       	add	r25, r0
    44ec:	11 24       	eor	r1, r1
    44ee:	8b 50       	subi	r24, 0x0B	; 11
    44f0:	9e 4e       	sbci	r25, 0xEE	; 238
    44f2:	fc 01       	movw	r30, r24
    44f4:	80 81       	ld	r24, Z
    44f6:	91 81       	ldd	r25, Z+1	; 0x01
    44f8:	98 87       	std	Y+8, r25	; 0x08
    44fa:	8f 83       	std	Y+7, r24	; 0x07
    44fc:	89 81       	ldd	r24, Y+1	; 0x01
    44fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4500:	2f 81       	ldd	r18, Y+7	; 0x07
    4502:	38 85       	ldd	r19, Y+8	; 0x08
    4504:	fc 01       	movw	r30, r24
    4506:	37 83       	std	Z+7, r19	; 0x07
    4508:	26 83       	std	Z+6, r18	; 0x06
    450a:	8f 81       	ldd	r24, Y+7	; 0x07
    450c:	98 85       	ldd	r25, Y+8	; 0x08
    450e:	fc 01       	movw	r30, r24
    4510:	26 81       	ldd	r18, Z+6	; 0x06
    4512:	37 81       	ldd	r19, Z+7	; 0x07
    4514:	89 81       	ldd	r24, Y+1	; 0x01
    4516:	9a 81       	ldd	r25, Y+2	; 0x02
    4518:	fc 01       	movw	r30, r24
    451a:	31 87       	std	Z+9, r19	; 0x09
    451c:	20 87       	std	Z+8, r18	; 0x08
    451e:	8f 81       	ldd	r24, Y+7	; 0x07
    4520:	98 85       	ldd	r25, Y+8	; 0x08
    4522:	fc 01       	movw	r30, r24
    4524:	86 81       	ldd	r24, Z+6	; 0x06
    4526:	97 81       	ldd	r25, Z+7	; 0x07
    4528:	29 81       	ldd	r18, Y+1	; 0x01
    452a:	3a 81       	ldd	r19, Y+2	; 0x02
    452c:	2e 5f       	subi	r18, 0xFE	; 254
    452e:	3f 4f       	sbci	r19, 0xFF	; 255
    4530:	fc 01       	movw	r30, r24
    4532:	35 83       	std	Z+5, r19	; 0x05
    4534:	24 83       	std	Z+4, r18	; 0x04
    4536:	89 81       	ldd	r24, Y+1	; 0x01
    4538:	9a 81       	ldd	r25, Y+2	; 0x02
    453a:	9c 01       	movw	r18, r24
    453c:	2e 5f       	subi	r18, 0xFE	; 254
    453e:	3f 4f       	sbci	r19, 0xFF	; 255
    4540:	8f 81       	ldd	r24, Y+7	; 0x07
    4542:	98 85       	ldd	r25, Y+8	; 0x08
    4544:	fc 01       	movw	r30, r24
    4546:	37 83       	std	Z+7, r19	; 0x07
    4548:	26 83       	std	Z+6, r18	; 0x06
    454a:	89 81       	ldd	r24, Y+1	; 0x01
    454c:	9a 81       	ldd	r25, Y+2	; 0x02
    454e:	fc 01       	movw	r30, r24
    4550:	82 8d       	ldd	r24, Z+26	; 0x1a
    4552:	28 2f       	mov	r18, r24
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	4b e0       	ldi	r20, 0x0B	; 11
    4558:	42 9f       	mul	r20, r18
    455a:	c0 01       	movw	r24, r0
    455c:	43 9f       	mul	r20, r19
    455e:	90 0d       	add	r25, r0
    4560:	11 24       	eor	r1, r1
    4562:	9c 01       	movw	r18, r24
    4564:	2c 50       	subi	r18, 0x0C	; 12
    4566:	3e 4e       	sbci	r19, 0xEE	; 238
    4568:	89 81       	ldd	r24, Y+1	; 0x01
    456a:	9a 81       	ldd	r25, Y+2	; 0x02
    456c:	fc 01       	movw	r30, r24
    456e:	35 87       	std	Z+13, r19	; 0x0d
    4570:	24 87       	std	Z+12, r18	; 0x0c
    4572:	89 81       	ldd	r24, Y+1	; 0x01
    4574:	9a 81       	ldd	r25, Y+2	; 0x02
    4576:	fc 01       	movw	r30, r24
    4578:	82 8d       	ldd	r24, Z+26	; 0x1a
    457a:	88 2f       	mov	r24, r24
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	4b e0       	ldi	r20, 0x0B	; 11
    4580:	48 9f       	mul	r20, r24
    4582:	90 01       	movw	r18, r0
    4584:	49 9f       	mul	r20, r25
    4586:	30 0d       	add	r19, r0
    4588:	11 24       	eor	r1, r1
    458a:	2c 50       	subi	r18, 0x0C	; 12
    458c:	3e 4e       	sbci	r19, 0xEE	; 238
    458e:	f9 01       	movw	r30, r18
    4590:	20 81       	ld	r18, Z
    4592:	41 e0       	ldi	r20, 0x01	; 1
    4594:	42 0f       	add	r20, r18
    4596:	5b e0       	ldi	r21, 0x0B	; 11
    4598:	58 9f       	mul	r21, r24
    459a:	90 01       	movw	r18, r0
    459c:	59 9f       	mul	r21, r25
    459e:	30 0d       	add	r19, r0
    45a0:	11 24       	eor	r1, r1
    45a2:	c9 01       	movw	r24, r18
    45a4:	8c 50       	subi	r24, 0x0C	; 12
    45a6:	9e 4e       	sbci	r25, 0xEE	; 238
    45a8:	fc 01       	movw	r30, r24
    45aa:	40 83       	st	Z, r20
    45ac:	89 81       	ldd	r24, Y+1	; 0x01
    45ae:	9a 81       	ldd	r25, Y+2	; 0x02
    45b0:	fc 01       	movw	r30, r24
    45b2:	22 8d       	ldd	r18, Z+26	; 0x1a
    45b4:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    45b8:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    45bc:	fc 01       	movw	r30, r24
    45be:	82 8d       	ldd	r24, Z+26	; 0x1a
    45c0:	82 17       	cp	r24, r18
    45c2:	18 f4       	brcc	.+6      	; 0x45ca <vTaskRemoveFromUnorderedEventList+0x268>
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	80 93 a9 12 	sts	0x12A9, r24	; 0x8012a9 <xYieldPending>
    45ca:	00 00       	nop
    45cc:	2e 96       	adiw	r28, 0x0e	; 14
    45ce:	0f b6       	in	r0, 0x3f	; 63
    45d0:	f8 94       	cli
    45d2:	de bf       	out	0x3e, r29	; 62
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	cd bf       	out	0x3d, r28	; 61
    45d8:	df 91       	pop	r29
    45da:	cf 91       	pop	r28
    45dc:	08 95       	ret

000045de <vTaskSetTimeOutState>:
    45de:	cf 93       	push	r28
    45e0:	df 93       	push	r29
    45e2:	1f 92       	push	r1
    45e4:	1f 92       	push	r1
    45e6:	cd b7       	in	r28, 0x3d	; 61
    45e8:	de b7       	in	r29, 0x3e	; 62
    45ea:	9a 83       	std	Y+2, r25	; 0x02
    45ec:	89 83       	std	Y+1, r24	; 0x01
    45ee:	0f b6       	in	r0, 0x3f	; 63
    45f0:	f8 94       	cli
    45f2:	0f 92       	push	r0
    45f4:	20 91 aa 12 	lds	r18, 0x12AA	; 0x8012aa <xNumOfOverflows>
    45f8:	89 81       	ldd	r24, Y+1	; 0x01
    45fa:	9a 81       	ldd	r25, Y+2	; 0x02
    45fc:	fc 01       	movw	r30, r24
    45fe:	20 83       	st	Z, r18
    4600:	80 91 9f 12 	lds	r24, 0x129F	; 0x80129f <xTickCount>
    4604:	90 91 a0 12 	lds	r25, 0x12A0	; 0x8012a0 <xTickCount+0x1>
    4608:	a0 91 a1 12 	lds	r26, 0x12A1	; 0x8012a1 <xTickCount+0x2>
    460c:	b0 91 a2 12 	lds	r27, 0x12A2	; 0x8012a2 <xTickCount+0x3>
    4610:	29 81       	ldd	r18, Y+1	; 0x01
    4612:	3a 81       	ldd	r19, Y+2	; 0x02
    4614:	f9 01       	movw	r30, r18
    4616:	81 83       	std	Z+1, r24	; 0x01
    4618:	92 83       	std	Z+2, r25	; 0x02
    461a:	a3 83       	std	Z+3, r26	; 0x03
    461c:	b4 83       	std	Z+4, r27	; 0x04
    461e:	0f 90       	pop	r0
    4620:	0f be       	out	0x3f, r0	; 63
    4622:	00 00       	nop
    4624:	0f 90       	pop	r0
    4626:	0f 90       	pop	r0
    4628:	df 91       	pop	r29
    462a:	cf 91       	pop	r28
    462c:	08 95       	ret

0000462e <vTaskInternalSetTimeOutState>:
    462e:	cf 93       	push	r28
    4630:	df 93       	push	r29
    4632:	1f 92       	push	r1
    4634:	1f 92       	push	r1
    4636:	cd b7       	in	r28, 0x3d	; 61
    4638:	de b7       	in	r29, 0x3e	; 62
    463a:	9a 83       	std	Y+2, r25	; 0x02
    463c:	89 83       	std	Y+1, r24	; 0x01
    463e:	20 91 aa 12 	lds	r18, 0x12AA	; 0x8012aa <xNumOfOverflows>
    4642:	89 81       	ldd	r24, Y+1	; 0x01
    4644:	9a 81       	ldd	r25, Y+2	; 0x02
    4646:	fc 01       	movw	r30, r24
    4648:	20 83       	st	Z, r18
    464a:	80 91 9f 12 	lds	r24, 0x129F	; 0x80129f <xTickCount>
    464e:	90 91 a0 12 	lds	r25, 0x12A0	; 0x8012a0 <xTickCount+0x1>
    4652:	a0 91 a1 12 	lds	r26, 0x12A1	; 0x8012a1 <xTickCount+0x2>
    4656:	b0 91 a2 12 	lds	r27, 0x12A2	; 0x8012a2 <xTickCount+0x3>
    465a:	29 81       	ldd	r18, Y+1	; 0x01
    465c:	3a 81       	ldd	r19, Y+2	; 0x02
    465e:	f9 01       	movw	r30, r18
    4660:	81 83       	std	Z+1, r24	; 0x01
    4662:	92 83       	std	Z+2, r25	; 0x02
    4664:	a3 83       	std	Z+3, r26	; 0x03
    4666:	b4 83       	std	Z+4, r27	; 0x04
    4668:	00 00       	nop
    466a:	0f 90       	pop	r0
    466c:	0f 90       	pop	r0
    466e:	df 91       	pop	r29
    4670:	cf 91       	pop	r28
    4672:	08 95       	ret

00004674 <xTaskCheckForTimeOut>:
    4674:	ef 92       	push	r14
    4676:	ff 92       	push	r15
    4678:	0f 93       	push	r16
    467a:	1f 93       	push	r17
    467c:	cf 93       	push	r28
    467e:	df 93       	push	r29
    4680:	cd b7       	in	r28, 0x3d	; 61
    4682:	de b7       	in	r29, 0x3e	; 62
    4684:	2d 97       	sbiw	r28, 0x0d	; 13
    4686:	0f b6       	in	r0, 0x3f	; 63
    4688:	f8 94       	cli
    468a:	de bf       	out	0x3e, r29	; 62
    468c:	0f be       	out	0x3f, r0	; 63
    468e:	cd bf       	out	0x3d, r28	; 61
    4690:	9b 87       	std	Y+11, r25	; 0x0b
    4692:	8a 87       	std	Y+10, r24	; 0x0a
    4694:	7d 87       	std	Y+13, r23	; 0x0d
    4696:	6c 87       	std	Y+12, r22	; 0x0c
    4698:	0f b6       	in	r0, 0x3f	; 63
    469a:	f8 94       	cli
    469c:	0f 92       	push	r0
    469e:	80 91 9f 12 	lds	r24, 0x129F	; 0x80129f <xTickCount>
    46a2:	90 91 a0 12 	lds	r25, 0x12A0	; 0x8012a0 <xTickCount+0x1>
    46a6:	a0 91 a1 12 	lds	r26, 0x12A1	; 0x8012a1 <xTickCount+0x2>
    46aa:	b0 91 a2 12 	lds	r27, 0x12A2	; 0x8012a2 <xTickCount+0x3>
    46ae:	8a 83       	std	Y+2, r24	; 0x02
    46b0:	9b 83       	std	Y+3, r25	; 0x03
    46b2:	ac 83       	std	Y+4, r26	; 0x04
    46b4:	bd 83       	std	Y+5, r27	; 0x05
    46b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    46b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    46ba:	fc 01       	movw	r30, r24
    46bc:	81 81       	ldd	r24, Z+1	; 0x01
    46be:	92 81       	ldd	r25, Z+2	; 0x02
    46c0:	a3 81       	ldd	r26, Z+3	; 0x03
    46c2:	b4 81       	ldd	r27, Z+4	; 0x04
    46c4:	2a 81       	ldd	r18, Y+2	; 0x02
    46c6:	3b 81       	ldd	r19, Y+3	; 0x03
    46c8:	4c 81       	ldd	r20, Y+4	; 0x04
    46ca:	5d 81       	ldd	r21, Y+5	; 0x05
    46cc:	79 01       	movw	r14, r18
    46ce:	8a 01       	movw	r16, r20
    46d0:	e8 1a       	sub	r14, r24
    46d2:	f9 0a       	sbc	r15, r25
    46d4:	0a 0b       	sbc	r16, r26
    46d6:	1b 0b       	sbc	r17, r27
    46d8:	d8 01       	movw	r26, r16
    46da:	c7 01       	movw	r24, r14
    46dc:	8e 83       	std	Y+6, r24	; 0x06
    46de:	9f 83       	std	Y+7, r25	; 0x07
    46e0:	a8 87       	std	Y+8, r26	; 0x08
    46e2:	b9 87       	std	Y+9, r27	; 0x09
    46e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    46e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    46e8:	fc 01       	movw	r30, r24
    46ea:	80 81       	ld	r24, Z
    46ec:	91 81       	ldd	r25, Z+1	; 0x01
    46ee:	a2 81       	ldd	r26, Z+2	; 0x02
    46f0:	b3 81       	ldd	r27, Z+3	; 0x03
    46f2:	8f 3f       	cpi	r24, 0xFF	; 255
    46f4:	9f 4f       	sbci	r25, 0xFF	; 255
    46f6:	af 4f       	sbci	r26, 0xFF	; 255
    46f8:	bf 4f       	sbci	r27, 0xFF	; 255
    46fa:	11 f4       	brne	.+4      	; 0x4700 <xTaskCheckForTimeOut+0x8c>
    46fc:	19 82       	std	Y+1, r1	; 0x01
    46fe:	5a c0       	rjmp	.+180    	; 0x47b4 <xTaskCheckForTimeOut+0x140>
    4700:	8a 85       	ldd	r24, Y+10	; 0x0a
    4702:	9b 85       	ldd	r25, Y+11	; 0x0b
    4704:	fc 01       	movw	r30, r24
    4706:	90 81       	ld	r25, Z
    4708:	80 91 aa 12 	lds	r24, 0x12AA	; 0x8012aa <xNumOfOverflows>
    470c:	98 17       	cp	r25, r24
    470e:	d1 f0       	breq	.+52     	; 0x4744 <xTaskCheckForTimeOut+0xd0>
    4710:	8a 85       	ldd	r24, Y+10	; 0x0a
    4712:	9b 85       	ldd	r25, Y+11	; 0x0b
    4714:	fc 01       	movw	r30, r24
    4716:	21 81       	ldd	r18, Z+1	; 0x01
    4718:	32 81       	ldd	r19, Z+2	; 0x02
    471a:	43 81       	ldd	r20, Z+3	; 0x03
    471c:	54 81       	ldd	r21, Z+4	; 0x04
    471e:	8a 81       	ldd	r24, Y+2	; 0x02
    4720:	9b 81       	ldd	r25, Y+3	; 0x03
    4722:	ac 81       	ldd	r26, Y+4	; 0x04
    4724:	bd 81       	ldd	r27, Y+5	; 0x05
    4726:	82 17       	cp	r24, r18
    4728:	93 07       	cpc	r25, r19
    472a:	a4 07       	cpc	r26, r20
    472c:	b5 07       	cpc	r27, r21
    472e:	50 f0       	brcs	.+20     	; 0x4744 <xTaskCheckForTimeOut+0xd0>
    4730:	81 e0       	ldi	r24, 0x01	; 1
    4732:	89 83       	std	Y+1, r24	; 0x01
    4734:	8c 85       	ldd	r24, Y+12	; 0x0c
    4736:	9d 85       	ldd	r25, Y+13	; 0x0d
    4738:	fc 01       	movw	r30, r24
    473a:	10 82       	st	Z, r1
    473c:	11 82       	std	Z+1, r1	; 0x01
    473e:	12 82       	std	Z+2, r1	; 0x02
    4740:	13 82       	std	Z+3, r1	; 0x03
    4742:	38 c0       	rjmp	.+112    	; 0x47b4 <xTaskCheckForTimeOut+0x140>
    4744:	8c 85       	ldd	r24, Y+12	; 0x0c
    4746:	9d 85       	ldd	r25, Y+13	; 0x0d
    4748:	fc 01       	movw	r30, r24
    474a:	20 81       	ld	r18, Z
    474c:	31 81       	ldd	r19, Z+1	; 0x01
    474e:	42 81       	ldd	r20, Z+2	; 0x02
    4750:	53 81       	ldd	r21, Z+3	; 0x03
    4752:	8e 81       	ldd	r24, Y+6	; 0x06
    4754:	9f 81       	ldd	r25, Y+7	; 0x07
    4756:	a8 85       	ldd	r26, Y+8	; 0x08
    4758:	b9 85       	ldd	r27, Y+9	; 0x09
    475a:	82 17       	cp	r24, r18
    475c:	93 07       	cpc	r25, r19
    475e:	a4 07       	cpc	r26, r20
    4760:	b5 07       	cpc	r27, r21
    4762:	f8 f4       	brcc	.+62     	; 0x47a2 <xTaskCheckForTimeOut+0x12e>
    4764:	8c 85       	ldd	r24, Y+12	; 0x0c
    4766:	9d 85       	ldd	r25, Y+13	; 0x0d
    4768:	fc 01       	movw	r30, r24
    476a:	20 81       	ld	r18, Z
    476c:	31 81       	ldd	r19, Z+1	; 0x01
    476e:	42 81       	ldd	r20, Z+2	; 0x02
    4770:	53 81       	ldd	r21, Z+3	; 0x03
    4772:	8e 81       	ldd	r24, Y+6	; 0x06
    4774:	9f 81       	ldd	r25, Y+7	; 0x07
    4776:	a8 85       	ldd	r26, Y+8	; 0x08
    4778:	b9 85       	ldd	r27, Y+9	; 0x09
    477a:	79 01       	movw	r14, r18
    477c:	8a 01       	movw	r16, r20
    477e:	e8 1a       	sub	r14, r24
    4780:	f9 0a       	sbc	r15, r25
    4782:	0a 0b       	sbc	r16, r26
    4784:	1b 0b       	sbc	r17, r27
    4786:	d8 01       	movw	r26, r16
    4788:	c7 01       	movw	r24, r14
    478a:	2c 85       	ldd	r18, Y+12	; 0x0c
    478c:	3d 85       	ldd	r19, Y+13	; 0x0d
    478e:	f9 01       	movw	r30, r18
    4790:	80 83       	st	Z, r24
    4792:	91 83       	std	Z+1, r25	; 0x01
    4794:	a2 83       	std	Z+2, r26	; 0x02
    4796:	b3 83       	std	Z+3, r27	; 0x03
    4798:	8a 85       	ldd	r24, Y+10	; 0x0a
    479a:	9b 85       	ldd	r25, Y+11	; 0x0b
    479c:	48 df       	rcall	.-368    	; 0x462e <vTaskInternalSetTimeOutState>
    479e:	19 82       	std	Y+1, r1	; 0x01
    47a0:	09 c0       	rjmp	.+18     	; 0x47b4 <xTaskCheckForTimeOut+0x140>
    47a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    47a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    47a6:	fc 01       	movw	r30, r24
    47a8:	10 82       	st	Z, r1
    47aa:	11 82       	std	Z+1, r1	; 0x01
    47ac:	12 82       	std	Z+2, r1	; 0x02
    47ae:	13 82       	std	Z+3, r1	; 0x03
    47b0:	81 e0       	ldi	r24, 0x01	; 1
    47b2:	89 83       	std	Y+1, r24	; 0x01
    47b4:	0f 90       	pop	r0
    47b6:	0f be       	out	0x3f, r0	; 63
    47b8:	89 81       	ldd	r24, Y+1	; 0x01
    47ba:	2d 96       	adiw	r28, 0x0d	; 13
    47bc:	0f b6       	in	r0, 0x3f	; 63
    47be:	f8 94       	cli
    47c0:	de bf       	out	0x3e, r29	; 62
    47c2:	0f be       	out	0x3f, r0	; 63
    47c4:	cd bf       	out	0x3d, r28	; 61
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	1f 91       	pop	r17
    47cc:	0f 91       	pop	r16
    47ce:	ff 90       	pop	r15
    47d0:	ef 90       	pop	r14
    47d2:	08 95       	ret

000047d4 <vTaskMissedYield>:
    47d4:	cf 93       	push	r28
    47d6:	df 93       	push	r29
    47d8:	cd b7       	in	r28, 0x3d	; 61
    47da:	de b7       	in	r29, 0x3e	; 62
    47dc:	81 e0       	ldi	r24, 0x01	; 1
    47de:	80 93 a9 12 	sts	0x12A9, r24	; 0x8012a9 <xYieldPending>
    47e2:	00 00       	nop
    47e4:	df 91       	pop	r29
    47e6:	cf 91       	pop	r28
    47e8:	08 95       	ret

000047ea <prvInitialiseTaskLists>:
    47ea:	cf 93       	push	r28
    47ec:	df 93       	push	r29
    47ee:	1f 92       	push	r1
    47f0:	cd b7       	in	r28, 0x3d	; 61
    47f2:	de b7       	in	r29, 0x3e	; 62
    47f4:	19 82       	std	Y+1, r1	; 0x01
    47f6:	10 c0       	rjmp	.+32     	; 0x4818 <prvInitialiseTaskLists+0x2e>
    47f8:	89 81       	ldd	r24, Y+1	; 0x01
    47fa:	28 2f       	mov	r18, r24
    47fc:	30 e0       	ldi	r19, 0x00	; 0
    47fe:	4b e0       	ldi	r20, 0x0B	; 11
    4800:	42 9f       	mul	r20, r18
    4802:	c0 01       	movw	r24, r0
    4804:	43 9f       	mul	r20, r19
    4806:	90 0d       	add	r25, r0
    4808:	11 24       	eor	r1, r1
    480a:	8c 50       	subi	r24, 0x0C	; 12
    480c:	9e 4e       	sbci	r25, 0xEE	; 238
    480e:	0e 94 4d 09 	call	0x129a	; 0x129a <vListInitialise>
    4812:	89 81       	ldd	r24, Y+1	; 0x01
    4814:	8f 5f       	subi	r24, 0xFF	; 255
    4816:	89 83       	std	Y+1, r24	; 0x01
    4818:	89 81       	ldd	r24, Y+1	; 0x01
    481a:	8a 30       	cpi	r24, 0x0A	; 10
    481c:	68 f3       	brcs	.-38     	; 0x47f8 <prvInitialiseTaskLists+0xe>
    481e:	82 e6       	ldi	r24, 0x62	; 98
    4820:	92 e1       	ldi	r25, 0x12	; 18
    4822:	0e 94 4d 09 	call	0x129a	; 0x129a <vListInitialise>
    4826:	8d e6       	ldi	r24, 0x6D	; 109
    4828:	92 e1       	ldi	r25, 0x12	; 18
    482a:	0e 94 4d 09 	call	0x129a	; 0x129a <vListInitialise>
    482e:	8c e7       	ldi	r24, 0x7C	; 124
    4830:	92 e1       	ldi	r25, 0x12	; 18
    4832:	0e 94 4d 09 	call	0x129a	; 0x129a <vListInitialise>
    4836:	87 e8       	ldi	r24, 0x87	; 135
    4838:	92 e1       	ldi	r25, 0x12	; 18
    483a:	0e 94 4d 09 	call	0x129a	; 0x129a <vListInitialise>
    483e:	83 e9       	ldi	r24, 0x93	; 147
    4840:	92 e1       	ldi	r25, 0x12	; 18
    4842:	0e 94 4d 09 	call	0x129a	; 0x129a <vListInitialise>
    4846:	82 e6       	ldi	r24, 0x62	; 98
    4848:	92 e1       	ldi	r25, 0x12	; 18
    484a:	90 93 79 12 	sts	0x1279, r25	; 0x801279 <pxDelayedTaskList+0x1>
    484e:	80 93 78 12 	sts	0x1278, r24	; 0x801278 <pxDelayedTaskList>
    4852:	8d e6       	ldi	r24, 0x6D	; 109
    4854:	92 e1       	ldi	r25, 0x12	; 18
    4856:	90 93 7b 12 	sts	0x127B, r25	; 0x80127b <pxOverflowDelayedTaskList+0x1>
    485a:	80 93 7a 12 	sts	0x127A, r24	; 0x80127a <pxOverflowDelayedTaskList>
    485e:	00 00       	nop
    4860:	0f 90       	pop	r0
    4862:	df 91       	pop	r29
    4864:	cf 91       	pop	r28
    4866:	08 95       	ret

00004868 <prvCheckTasksWaitingTermination>:
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
    486c:	1f 92       	push	r1
    486e:	1f 92       	push	r1
    4870:	cd b7       	in	r28, 0x3d	; 61
    4872:	de b7       	in	r29, 0x3e	; 62
    4874:	20 c0       	rjmp	.+64     	; 0x48b6 <prvCheckTasksWaitingTermination+0x4e>
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	0f 92       	push	r0
    487c:	80 91 8e 12 	lds	r24, 0x128E	; 0x80128e <xTasksWaitingTermination+0x7>
    4880:	90 91 8f 12 	lds	r25, 0x128F	; 0x80128f <xTasksWaitingTermination+0x8>
    4884:	fc 01       	movw	r30, r24
    4886:	80 85       	ldd	r24, Z+8	; 0x08
    4888:	91 85       	ldd	r25, Z+9	; 0x09
    488a:	9a 83       	std	Y+2, r25	; 0x02
    488c:	89 83       	std	Y+1, r24	; 0x01
    488e:	89 81       	ldd	r24, Y+1	; 0x01
    4890:	9a 81       	ldd	r25, Y+2	; 0x02
    4892:	02 96       	adiw	r24, 0x02	; 2
    4894:	0e 94 21 0a 	call	0x1442	; 0x1442 <uxListRemove>
    4898:	80 91 9e 12 	lds	r24, 0x129E	; 0x80129e <uxCurrentNumberOfTasks>
    489c:	81 50       	subi	r24, 0x01	; 1
    489e:	80 93 9e 12 	sts	0x129E, r24	; 0x80129e <uxCurrentNumberOfTasks>
    48a2:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxDeletedTasksWaitingCleanUp>
    48a6:	81 50       	subi	r24, 0x01	; 1
    48a8:	80 93 92 12 	sts	0x1292, r24	; 0x801292 <uxDeletedTasksWaitingCleanUp>
    48ac:	0f 90       	pop	r0
    48ae:	0f be       	out	0x3f, r0	; 63
    48b0:	89 81       	ldd	r24, Y+1	; 0x01
    48b2:	9a 81       	ldd	r25, Y+2	; 0x02
    48b4:	0a d0       	rcall	.+20     	; 0x48ca <prvDeleteTCB>
    48b6:	80 91 92 12 	lds	r24, 0x1292	; 0x801292 <uxDeletedTasksWaitingCleanUp>
    48ba:	88 23       	and	r24, r24
    48bc:	e1 f6       	brne	.-72     	; 0x4876 <prvCheckTasksWaitingTermination+0xe>
    48be:	00 00       	nop
    48c0:	0f 90       	pop	r0
    48c2:	0f 90       	pop	r0
    48c4:	df 91       	pop	r29
    48c6:	cf 91       	pop	r28
    48c8:	08 95       	ret

000048ca <prvDeleteTCB>:
    48ca:	cf 93       	push	r28
    48cc:	df 93       	push	r29
    48ce:	1f 92       	push	r1
    48d0:	1f 92       	push	r1
    48d2:	cd b7       	in	r28, 0x3d	; 61
    48d4:	de b7       	in	r29, 0x3e	; 62
    48d6:	9a 83       	std	Y+2, r25	; 0x02
    48d8:	89 83       	std	Y+1, r24	; 0x01
    48da:	89 81       	ldd	r24, Y+1	; 0x01
    48dc:	9a 81       	ldd	r25, Y+2	; 0x02
    48de:	fc 01       	movw	r30, r24
    48e0:	83 8d       	ldd	r24, Z+27	; 0x1b
    48e2:	94 8d       	ldd	r25, Z+28	; 0x1c
    48e4:	0e 94 aa 07 	call	0xf54	; 0xf54 <vPortFree>
    48e8:	89 81       	ldd	r24, Y+1	; 0x01
    48ea:	9a 81       	ldd	r25, Y+2	; 0x02
    48ec:	0e 94 aa 07 	call	0xf54	; 0xf54 <vPortFree>
    48f0:	00 00       	nop
    48f2:	0f 90       	pop	r0
    48f4:	0f 90       	pop	r0
    48f6:	df 91       	pop	r29
    48f8:	cf 91       	pop	r28
    48fa:	08 95       	ret

000048fc <prvResetNextTaskUnblockTime>:
    48fc:	cf 93       	push	r28
    48fe:	df 93       	push	r29
    4900:	cd b7       	in	r28, 0x3d	; 61
    4902:	de b7       	in	r29, 0x3e	; 62
    4904:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <pxDelayedTaskList>
    4908:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <pxDelayedTaskList+0x1>
    490c:	fc 01       	movw	r30, r24
    490e:	80 81       	ld	r24, Z
    4910:	88 23       	and	r24, r24
    4912:	61 f4       	brne	.+24     	; 0x492c <prvResetNextTaskUnblockTime+0x30>
    4914:	8f ef       	ldi	r24, 0xFF	; 255
    4916:	9f ef       	ldi	r25, 0xFF	; 255
    4918:	dc 01       	movw	r26, r24
    491a:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <xNextTaskUnblockTime>
    491e:	90 93 ad 12 	sts	0x12AD, r25	; 0x8012ad <xNextTaskUnblockTime+0x1>
    4922:	a0 93 ae 12 	sts	0x12AE, r26	; 0x8012ae <xNextTaskUnblockTime+0x2>
    4926:	b0 93 af 12 	sts	0x12AF, r27	; 0x8012af <xNextTaskUnblockTime+0x3>
    492a:	14 c0       	rjmp	.+40     	; 0x4954 <prvResetNextTaskUnblockTime+0x58>
    492c:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <pxDelayedTaskList>
    4930:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <pxDelayedTaskList+0x1>
    4934:	fc 01       	movw	r30, r24
    4936:	87 81       	ldd	r24, Z+7	; 0x07
    4938:	90 85       	ldd	r25, Z+8	; 0x08
    493a:	fc 01       	movw	r30, r24
    493c:	80 81       	ld	r24, Z
    493e:	91 81       	ldd	r25, Z+1	; 0x01
    4940:	a2 81       	ldd	r26, Z+2	; 0x02
    4942:	b3 81       	ldd	r27, Z+3	; 0x03
    4944:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <xNextTaskUnblockTime>
    4948:	90 93 ad 12 	sts	0x12AD, r25	; 0x8012ad <xNextTaskUnblockTime+0x1>
    494c:	a0 93 ae 12 	sts	0x12AE, r26	; 0x8012ae <xNextTaskUnblockTime+0x2>
    4950:	b0 93 af 12 	sts	0x12AF, r27	; 0x8012af <xNextTaskUnblockTime+0x3>
    4954:	00 00       	nop
    4956:	df 91       	pop	r29
    4958:	cf 91       	pop	r28
    495a:	08 95       	ret

0000495c <xTaskGetCurrentTaskHandle>:
    495c:	cf 93       	push	r28
    495e:	df 93       	push	r29
    4960:	1f 92       	push	r1
    4962:	1f 92       	push	r1
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
    4968:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    496c:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4970:	9a 83       	std	Y+2, r25	; 0x02
    4972:	89 83       	std	Y+1, r24	; 0x01
    4974:	89 81       	ldd	r24, Y+1	; 0x01
    4976:	9a 81       	ldd	r25, Y+2	; 0x02
    4978:	0f 90       	pop	r0
    497a:	0f 90       	pop	r0
    497c:	df 91       	pop	r29
    497e:	cf 91       	pop	r28
    4980:	08 95       	ret

00004982 <xTaskGetSchedulerState>:
    4982:	cf 93       	push	r28
    4984:	df 93       	push	r29
    4986:	1f 92       	push	r1
    4988:	cd b7       	in	r28, 0x3d	; 61
    498a:	de b7       	in	r29, 0x3e	; 62
    498c:	80 91 a4 12 	lds	r24, 0x12A4	; 0x8012a4 <xSchedulerRunning>
    4990:	88 23       	and	r24, r24
    4992:	19 f4       	brne	.+6      	; 0x499a <xTaskGetSchedulerState+0x18>
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	89 83       	std	Y+1, r24	; 0x01
    4998:	08 c0       	rjmp	.+16     	; 0x49aa <xTaskGetSchedulerState+0x28>
    499a:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxSchedulerSuspended>
    499e:	88 23       	and	r24, r24
    49a0:	19 f4       	brne	.+6      	; 0x49a8 <xTaskGetSchedulerState+0x26>
    49a2:	82 e0       	ldi	r24, 0x02	; 2
    49a4:	89 83       	std	Y+1, r24	; 0x01
    49a6:	01 c0       	rjmp	.+2      	; 0x49aa <xTaskGetSchedulerState+0x28>
    49a8:	19 82       	std	Y+1, r1	; 0x01
    49aa:	89 81       	ldd	r24, Y+1	; 0x01
    49ac:	0f 90       	pop	r0
    49ae:	df 91       	pop	r29
    49b0:	cf 91       	pop	r28
    49b2:	08 95       	ret

000049b4 <xTaskPriorityInherit>:
    49b4:	ef 92       	push	r14
    49b6:	ff 92       	push	r15
    49b8:	0f 93       	push	r16
    49ba:	1f 93       	push	r17
    49bc:	cf 93       	push	r28
    49be:	df 93       	push	r29
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
    49c4:	27 97       	sbiw	r28, 0x07	; 7
    49c6:	0f b6       	in	r0, 0x3f	; 63
    49c8:	f8 94       	cli
    49ca:	de bf       	out	0x3e, r29	; 62
    49cc:	0f be       	out	0x3f, r0	; 63
    49ce:	cd bf       	out	0x3d, r28	; 61
    49d0:	9f 83       	std	Y+7, r25	; 0x07
    49d2:	8e 83       	std	Y+6, r24	; 0x06
    49d4:	8e 81       	ldd	r24, Y+6	; 0x06
    49d6:	9f 81       	ldd	r25, Y+7	; 0x07
    49d8:	9b 83       	std	Y+3, r25	; 0x03
    49da:	8a 83       	std	Y+2, r24	; 0x02
    49dc:	19 82       	std	Y+1, r1	; 0x01
    49de:	8e 81       	ldd	r24, Y+6	; 0x06
    49e0:	9f 81       	ldd	r25, Y+7	; 0x07
    49e2:	89 2b       	or	r24, r25
    49e4:	09 f4       	brne	.+2      	; 0x49e8 <xTaskPriorityInherit+0x34>
    49e6:	ee c0       	rjmp	.+476    	; 0x4bc4 <xTaskPriorityInherit+0x210>
    49e8:	8a 81       	ldd	r24, Y+2	; 0x02
    49ea:	9b 81       	ldd	r25, Y+3	; 0x03
    49ec:	fc 01       	movw	r30, r24
    49ee:	22 8d       	ldd	r18, Z+26	; 0x1a
    49f0:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    49f4:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    49f8:	fc 01       	movw	r30, r24
    49fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    49fc:	28 17       	cp	r18, r24
    49fe:	08 f0       	brcs	.+2      	; 0x4a02 <xTaskPriorityInherit+0x4e>
    4a00:	d3 c0       	rjmp	.+422    	; 0x4ba8 <xTaskPriorityInherit+0x1f4>
    4a02:	8a 81       	ldd	r24, Y+2	; 0x02
    4a04:	9b 81       	ldd	r25, Y+3	; 0x03
    4a06:	fc 01       	movw	r30, r24
    4a08:	86 85       	ldd	r24, Z+14	; 0x0e
    4a0a:	97 85       	ldd	r25, Z+15	; 0x0f
    4a0c:	a0 89       	ldd	r26, Z+16	; 0x10
    4a0e:	b1 89       	ldd	r27, Z+17	; 0x11
    4a10:	bb 23       	and	r27, r27
    4a12:	ec f0       	brlt	.+58     	; 0x4a4e <xTaskPriorityInherit+0x9a>
    4a14:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    4a18:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4a1c:	fc 01       	movw	r30, r24
    4a1e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a20:	88 2f       	mov	r24, r24
    4a22:	90 e0       	ldi	r25, 0x00	; 0
    4a24:	a0 e0       	ldi	r26, 0x00	; 0
    4a26:	b0 e0       	ldi	r27, 0x00	; 0
    4a28:	2a e0       	ldi	r18, 0x0A	; 10
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	40 e0       	ldi	r20, 0x00	; 0
    4a2e:	50 e0       	ldi	r21, 0x00	; 0
    4a30:	79 01       	movw	r14, r18
    4a32:	8a 01       	movw	r16, r20
    4a34:	e8 1a       	sub	r14, r24
    4a36:	f9 0a       	sbc	r15, r25
    4a38:	0a 0b       	sbc	r16, r26
    4a3a:	1b 0b       	sbc	r17, r27
    4a3c:	d8 01       	movw	r26, r16
    4a3e:	c7 01       	movw	r24, r14
    4a40:	2a 81       	ldd	r18, Y+2	; 0x02
    4a42:	3b 81       	ldd	r19, Y+3	; 0x03
    4a44:	f9 01       	movw	r30, r18
    4a46:	86 87       	std	Z+14, r24	; 0x0e
    4a48:	97 87       	std	Z+15, r25	; 0x0f
    4a4a:	a0 8b       	std	Z+16, r26	; 0x10
    4a4c:	b1 8b       	std	Z+17, r27	; 0x11
    4a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a50:	9b 81       	ldd	r25, Y+3	; 0x03
    4a52:	fc 01       	movw	r30, r24
    4a54:	24 85       	ldd	r18, Z+12	; 0x0c
    4a56:	35 85       	ldd	r19, Z+13	; 0x0d
    4a58:	8a 81       	ldd	r24, Y+2	; 0x02
    4a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a5c:	fc 01       	movw	r30, r24
    4a5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a60:	48 2f       	mov	r20, r24
    4a62:	50 e0       	ldi	r21, 0x00	; 0
    4a64:	6b e0       	ldi	r22, 0x0B	; 11
    4a66:	64 9f       	mul	r22, r20
    4a68:	c0 01       	movw	r24, r0
    4a6a:	65 9f       	mul	r22, r21
    4a6c:	90 0d       	add	r25, r0
    4a6e:	11 24       	eor	r1, r1
    4a70:	8c 50       	subi	r24, 0x0C	; 12
    4a72:	9e 4e       	sbci	r25, 0xEE	; 238
    4a74:	28 17       	cp	r18, r24
    4a76:	39 07       	cpc	r19, r25
    4a78:	09 f0       	breq	.+2      	; 0x4a7c <xTaskPriorityInherit+0xc8>
    4a7a:	89 c0       	rjmp	.+274    	; 0x4b8e <xTaskPriorityInherit+0x1da>
    4a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a80:	02 96       	adiw	r24, 0x02	; 2
    4a82:	0e 94 21 0a 	call	0x1442	; 0x1442 <uxListRemove>
    4a86:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    4a8a:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4a8e:	fc 01       	movw	r30, r24
    4a90:	22 8d       	ldd	r18, Z+26	; 0x1a
    4a92:	8a 81       	ldd	r24, Y+2	; 0x02
    4a94:	9b 81       	ldd	r25, Y+3	; 0x03
    4a96:	fc 01       	movw	r30, r24
    4a98:	22 8f       	std	Z+26, r18	; 0x1a
    4a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	92 8d       	ldd	r25, Z+26	; 0x1a
    4aa2:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    4aa6:	89 17       	cp	r24, r25
    4aa8:	30 f4       	brcc	.+12     	; 0x4ab6 <xTaskPriorityInherit+0x102>
    4aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    4aac:	9b 81       	ldd	r25, Y+3	; 0x03
    4aae:	fc 01       	movw	r30, r24
    4ab0:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ab2:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    4ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    4aba:	fc 01       	movw	r30, r24
    4abc:	82 8d       	ldd	r24, Z+26	; 0x1a
    4abe:	28 2f       	mov	r18, r24
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	4b e0       	ldi	r20, 0x0B	; 11
    4ac4:	42 9f       	mul	r20, r18
    4ac6:	c0 01       	movw	r24, r0
    4ac8:	43 9f       	mul	r20, r19
    4aca:	90 0d       	add	r25, r0
    4acc:	11 24       	eor	r1, r1
    4ace:	8b 50       	subi	r24, 0x0B	; 11
    4ad0:	9e 4e       	sbci	r25, 0xEE	; 238
    4ad2:	fc 01       	movw	r30, r24
    4ad4:	80 81       	ld	r24, Z
    4ad6:	91 81       	ldd	r25, Z+1	; 0x01
    4ad8:	9d 83       	std	Y+5, r25	; 0x05
    4ada:	8c 83       	std	Y+4, r24	; 0x04
    4adc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ade:	9b 81       	ldd	r25, Y+3	; 0x03
    4ae0:	2c 81       	ldd	r18, Y+4	; 0x04
    4ae2:	3d 81       	ldd	r19, Y+5	; 0x05
    4ae4:	fc 01       	movw	r30, r24
    4ae6:	37 83       	std	Z+7, r19	; 0x07
    4ae8:	26 83       	std	Z+6, r18	; 0x06
    4aea:	8c 81       	ldd	r24, Y+4	; 0x04
    4aec:	9d 81       	ldd	r25, Y+5	; 0x05
    4aee:	fc 01       	movw	r30, r24
    4af0:	26 81       	ldd	r18, Z+6	; 0x06
    4af2:	37 81       	ldd	r19, Z+7	; 0x07
    4af4:	8a 81       	ldd	r24, Y+2	; 0x02
    4af6:	9b 81       	ldd	r25, Y+3	; 0x03
    4af8:	fc 01       	movw	r30, r24
    4afa:	31 87       	std	Z+9, r19	; 0x09
    4afc:	20 87       	std	Z+8, r18	; 0x08
    4afe:	8c 81       	ldd	r24, Y+4	; 0x04
    4b00:	9d 81       	ldd	r25, Y+5	; 0x05
    4b02:	fc 01       	movw	r30, r24
    4b04:	86 81       	ldd	r24, Z+6	; 0x06
    4b06:	97 81       	ldd	r25, Z+7	; 0x07
    4b08:	2a 81       	ldd	r18, Y+2	; 0x02
    4b0a:	3b 81       	ldd	r19, Y+3	; 0x03
    4b0c:	2e 5f       	subi	r18, 0xFE	; 254
    4b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b10:	fc 01       	movw	r30, r24
    4b12:	35 83       	std	Z+5, r19	; 0x05
    4b14:	24 83       	std	Z+4, r18	; 0x04
    4b16:	8a 81       	ldd	r24, Y+2	; 0x02
    4b18:	9b 81       	ldd	r25, Y+3	; 0x03
    4b1a:	9c 01       	movw	r18, r24
    4b1c:	2e 5f       	subi	r18, 0xFE	; 254
    4b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b20:	8c 81       	ldd	r24, Y+4	; 0x04
    4b22:	9d 81       	ldd	r25, Y+5	; 0x05
    4b24:	fc 01       	movw	r30, r24
    4b26:	37 83       	std	Z+7, r19	; 0x07
    4b28:	26 83       	std	Z+6, r18	; 0x06
    4b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b2e:	fc 01       	movw	r30, r24
    4b30:	82 8d       	ldd	r24, Z+26	; 0x1a
    4b32:	28 2f       	mov	r18, r24
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	4b e0       	ldi	r20, 0x0B	; 11
    4b38:	42 9f       	mul	r20, r18
    4b3a:	c0 01       	movw	r24, r0
    4b3c:	43 9f       	mul	r20, r19
    4b3e:	90 0d       	add	r25, r0
    4b40:	11 24       	eor	r1, r1
    4b42:	9c 01       	movw	r18, r24
    4b44:	2c 50       	subi	r18, 0x0C	; 12
    4b46:	3e 4e       	sbci	r19, 0xEE	; 238
    4b48:	8a 81       	ldd	r24, Y+2	; 0x02
    4b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b4c:	fc 01       	movw	r30, r24
    4b4e:	35 87       	std	Z+13, r19	; 0x0d
    4b50:	24 87       	std	Z+12, r18	; 0x0c
    4b52:	8a 81       	ldd	r24, Y+2	; 0x02
    4b54:	9b 81       	ldd	r25, Y+3	; 0x03
    4b56:	fc 01       	movw	r30, r24
    4b58:	82 8d       	ldd	r24, Z+26	; 0x1a
    4b5a:	88 2f       	mov	r24, r24
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	4b e0       	ldi	r20, 0x0B	; 11
    4b60:	48 9f       	mul	r20, r24
    4b62:	90 01       	movw	r18, r0
    4b64:	49 9f       	mul	r20, r25
    4b66:	30 0d       	add	r19, r0
    4b68:	11 24       	eor	r1, r1
    4b6a:	2c 50       	subi	r18, 0x0C	; 12
    4b6c:	3e 4e       	sbci	r19, 0xEE	; 238
    4b6e:	f9 01       	movw	r30, r18
    4b70:	20 81       	ld	r18, Z
    4b72:	41 e0       	ldi	r20, 0x01	; 1
    4b74:	42 0f       	add	r20, r18
    4b76:	5b e0       	ldi	r21, 0x0B	; 11
    4b78:	58 9f       	mul	r21, r24
    4b7a:	90 01       	movw	r18, r0
    4b7c:	59 9f       	mul	r21, r25
    4b7e:	30 0d       	add	r19, r0
    4b80:	11 24       	eor	r1, r1
    4b82:	c9 01       	movw	r24, r18
    4b84:	8c 50       	subi	r24, 0x0C	; 12
    4b86:	9e 4e       	sbci	r25, 0xEE	; 238
    4b88:	fc 01       	movw	r30, r24
    4b8a:	40 83       	st	Z, r20
    4b8c:	0a c0       	rjmp	.+20     	; 0x4ba2 <xTaskPriorityInherit+0x1ee>
    4b8e:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    4b92:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4b96:	fc 01       	movw	r30, r24
    4b98:	22 8d       	ldd	r18, Z+26	; 0x1a
    4b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b9e:	fc 01       	movw	r30, r24
    4ba0:	22 8f       	std	Z+26, r18	; 0x1a
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	89 83       	std	Y+1, r24	; 0x01
    4ba6:	0e c0       	rjmp	.+28     	; 0x4bc4 <xTaskPriorityInherit+0x210>
    4ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    4baa:	9b 81       	ldd	r25, Y+3	; 0x03
    4bac:	fc 01       	movw	r30, r24
    4bae:	25 a5       	ldd	r18, Z+45	; 0x2d
    4bb0:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    4bb4:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4bb8:	fc 01       	movw	r30, r24
    4bba:	82 8d       	ldd	r24, Z+26	; 0x1a
    4bbc:	28 17       	cp	r18, r24
    4bbe:	10 f4       	brcc	.+4      	; 0x4bc4 <xTaskPriorityInherit+0x210>
    4bc0:	81 e0       	ldi	r24, 0x01	; 1
    4bc2:	89 83       	std	Y+1, r24	; 0x01
    4bc4:	89 81       	ldd	r24, Y+1	; 0x01
    4bc6:	27 96       	adiw	r28, 0x07	; 7
    4bc8:	0f b6       	in	r0, 0x3f	; 63
    4bca:	f8 94       	cli
    4bcc:	de bf       	out	0x3e, r29	; 62
    4bce:	0f be       	out	0x3f, r0	; 63
    4bd0:	cd bf       	out	0x3d, r28	; 61
    4bd2:	df 91       	pop	r29
    4bd4:	cf 91       	pop	r28
    4bd6:	1f 91       	pop	r17
    4bd8:	0f 91       	pop	r16
    4bda:	ff 90       	pop	r15
    4bdc:	ef 90       	pop	r14
    4bde:	08 95       	ret

00004be0 <xTaskPriorityDisinherit>:
    4be0:	ef 92       	push	r14
    4be2:	ff 92       	push	r15
    4be4:	0f 93       	push	r16
    4be6:	1f 93       	push	r17
    4be8:	cf 93       	push	r28
    4bea:	df 93       	push	r29
    4bec:	cd b7       	in	r28, 0x3d	; 61
    4bee:	de b7       	in	r29, 0x3e	; 62
    4bf0:	27 97       	sbiw	r28, 0x07	; 7
    4bf2:	0f b6       	in	r0, 0x3f	; 63
    4bf4:	f8 94       	cli
    4bf6:	de bf       	out	0x3e, r29	; 62
    4bf8:	0f be       	out	0x3f, r0	; 63
    4bfa:	cd bf       	out	0x3d, r28	; 61
    4bfc:	9f 83       	std	Y+7, r25	; 0x07
    4bfe:	8e 83       	std	Y+6, r24	; 0x06
    4c00:	8e 81       	ldd	r24, Y+6	; 0x06
    4c02:	9f 81       	ldd	r25, Y+7	; 0x07
    4c04:	9b 83       	std	Y+3, r25	; 0x03
    4c06:	8a 83       	std	Y+2, r24	; 0x02
    4c08:	19 82       	std	Y+1, r1	; 0x01
    4c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c0c:	9f 81       	ldd	r25, Y+7	; 0x07
    4c0e:	89 2b       	or	r24, r25
    4c10:	09 f4       	brne	.+2      	; 0x4c14 <xTaskPriorityDisinherit+0x34>
    4c12:	bf c0       	rjmp	.+382    	; 0x4d92 <xTaskPriorityDisinherit+0x1b2>
    4c14:	8a 81       	ldd	r24, Y+2	; 0x02
    4c16:	9b 81       	ldd	r25, Y+3	; 0x03
    4c18:	fc 01       	movw	r30, r24
    4c1a:	86 a5       	ldd	r24, Z+46	; 0x2e
    4c1c:	2f ef       	ldi	r18, 0xFF	; 255
    4c1e:	28 0f       	add	r18, r24
    4c20:	8a 81       	ldd	r24, Y+2	; 0x02
    4c22:	9b 81       	ldd	r25, Y+3	; 0x03
    4c24:	fc 01       	movw	r30, r24
    4c26:	26 a7       	std	Z+46, r18	; 0x2e
    4c28:	8a 81       	ldd	r24, Y+2	; 0x02
    4c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4c2c:	fc 01       	movw	r30, r24
    4c2e:	22 8d       	ldd	r18, Z+26	; 0x1a
    4c30:	8a 81       	ldd	r24, Y+2	; 0x02
    4c32:	9b 81       	ldd	r25, Y+3	; 0x03
    4c34:	fc 01       	movw	r30, r24
    4c36:	85 a5       	ldd	r24, Z+45	; 0x2d
    4c38:	28 17       	cp	r18, r24
    4c3a:	09 f4       	brne	.+2      	; 0x4c3e <xTaskPriorityDisinherit+0x5e>
    4c3c:	aa c0       	rjmp	.+340    	; 0x4d92 <xTaskPriorityDisinherit+0x1b2>
    4c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c40:	9b 81       	ldd	r25, Y+3	; 0x03
    4c42:	fc 01       	movw	r30, r24
    4c44:	86 a5       	ldd	r24, Z+46	; 0x2e
    4c46:	88 23       	and	r24, r24
    4c48:	09 f0       	breq	.+2      	; 0x4c4c <xTaskPriorityDisinherit+0x6c>
    4c4a:	a3 c0       	rjmp	.+326    	; 0x4d92 <xTaskPriorityDisinherit+0x1b2>
    4c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    4c50:	02 96       	adiw	r24, 0x02	; 2
    4c52:	0e 94 21 0a 	call	0x1442	; 0x1442 <uxListRemove>
    4c56:	8a 81       	ldd	r24, Y+2	; 0x02
    4c58:	9b 81       	ldd	r25, Y+3	; 0x03
    4c5a:	fc 01       	movw	r30, r24
    4c5c:	25 a5       	ldd	r18, Z+45	; 0x2d
    4c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c60:	9b 81       	ldd	r25, Y+3	; 0x03
    4c62:	fc 01       	movw	r30, r24
    4c64:	22 8f       	std	Z+26, r18	; 0x1a
    4c66:	8a 81       	ldd	r24, Y+2	; 0x02
    4c68:	9b 81       	ldd	r25, Y+3	; 0x03
    4c6a:	fc 01       	movw	r30, r24
    4c6c:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c6e:	88 2f       	mov	r24, r24
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	a0 e0       	ldi	r26, 0x00	; 0
    4c74:	b0 e0       	ldi	r27, 0x00	; 0
    4c76:	2a e0       	ldi	r18, 0x0A	; 10
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e0       	ldi	r20, 0x00	; 0
    4c7c:	50 e0       	ldi	r21, 0x00	; 0
    4c7e:	79 01       	movw	r14, r18
    4c80:	8a 01       	movw	r16, r20
    4c82:	e8 1a       	sub	r14, r24
    4c84:	f9 0a       	sbc	r15, r25
    4c86:	0a 0b       	sbc	r16, r26
    4c88:	1b 0b       	sbc	r17, r27
    4c8a:	d8 01       	movw	r26, r16
    4c8c:	c7 01       	movw	r24, r14
    4c8e:	2a 81       	ldd	r18, Y+2	; 0x02
    4c90:	3b 81       	ldd	r19, Y+3	; 0x03
    4c92:	f9 01       	movw	r30, r18
    4c94:	86 87       	std	Z+14, r24	; 0x0e
    4c96:	97 87       	std	Z+15, r25	; 0x0f
    4c98:	a0 8b       	std	Z+16, r26	; 0x10
    4c9a:	b1 8b       	std	Z+17, r27	; 0x11
    4c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    4ca0:	fc 01       	movw	r30, r24
    4ca2:	92 8d       	ldd	r25, Z+26	; 0x1a
    4ca4:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    4ca8:	89 17       	cp	r24, r25
    4caa:	30 f4       	brcc	.+12     	; 0x4cb8 <xTaskPriorityDisinherit+0xd8>
    4cac:	8a 81       	ldd	r24, Y+2	; 0x02
    4cae:	9b 81       	ldd	r25, Y+3	; 0x03
    4cb0:	fc 01       	movw	r30, r24
    4cb2:	82 8d       	ldd	r24, Z+26	; 0x1a
    4cb4:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    4cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cba:	9b 81       	ldd	r25, Y+3	; 0x03
    4cbc:	fc 01       	movw	r30, r24
    4cbe:	82 8d       	ldd	r24, Z+26	; 0x1a
    4cc0:	28 2f       	mov	r18, r24
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	4b e0       	ldi	r20, 0x0B	; 11
    4cc6:	42 9f       	mul	r20, r18
    4cc8:	c0 01       	movw	r24, r0
    4cca:	43 9f       	mul	r20, r19
    4ccc:	90 0d       	add	r25, r0
    4cce:	11 24       	eor	r1, r1
    4cd0:	8b 50       	subi	r24, 0x0B	; 11
    4cd2:	9e 4e       	sbci	r25, 0xEE	; 238
    4cd4:	fc 01       	movw	r30, r24
    4cd6:	80 81       	ld	r24, Z
    4cd8:	91 81       	ldd	r25, Z+1	; 0x01
    4cda:	9d 83       	std	Y+5, r25	; 0x05
    4cdc:	8c 83       	std	Y+4, r24	; 0x04
    4cde:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ce2:	2c 81       	ldd	r18, Y+4	; 0x04
    4ce4:	3d 81       	ldd	r19, Y+5	; 0x05
    4ce6:	fc 01       	movw	r30, r24
    4ce8:	37 83       	std	Z+7, r19	; 0x07
    4cea:	26 83       	std	Z+6, r18	; 0x06
    4cec:	8c 81       	ldd	r24, Y+4	; 0x04
    4cee:	9d 81       	ldd	r25, Y+5	; 0x05
    4cf0:	fc 01       	movw	r30, r24
    4cf2:	26 81       	ldd	r18, Z+6	; 0x06
    4cf4:	37 81       	ldd	r19, Z+7	; 0x07
    4cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    4cfa:	fc 01       	movw	r30, r24
    4cfc:	31 87       	std	Z+9, r19	; 0x09
    4cfe:	20 87       	std	Z+8, r18	; 0x08
    4d00:	8c 81       	ldd	r24, Y+4	; 0x04
    4d02:	9d 81       	ldd	r25, Y+5	; 0x05
    4d04:	fc 01       	movw	r30, r24
    4d06:	86 81       	ldd	r24, Z+6	; 0x06
    4d08:	97 81       	ldd	r25, Z+7	; 0x07
    4d0a:	2a 81       	ldd	r18, Y+2	; 0x02
    4d0c:	3b 81       	ldd	r19, Y+3	; 0x03
    4d0e:	2e 5f       	subi	r18, 0xFE	; 254
    4d10:	3f 4f       	sbci	r19, 0xFF	; 255
    4d12:	fc 01       	movw	r30, r24
    4d14:	35 83       	std	Z+5, r19	; 0x05
    4d16:	24 83       	std	Z+4, r18	; 0x04
    4d18:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d1c:	9c 01       	movw	r18, r24
    4d1e:	2e 5f       	subi	r18, 0xFE	; 254
    4d20:	3f 4f       	sbci	r19, 0xFF	; 255
    4d22:	8c 81       	ldd	r24, Y+4	; 0x04
    4d24:	9d 81       	ldd	r25, Y+5	; 0x05
    4d26:	fc 01       	movw	r30, r24
    4d28:	37 83       	std	Z+7, r19	; 0x07
    4d2a:	26 83       	std	Z+6, r18	; 0x06
    4d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d30:	fc 01       	movw	r30, r24
    4d32:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d34:	28 2f       	mov	r18, r24
    4d36:	30 e0       	ldi	r19, 0x00	; 0
    4d38:	4b e0       	ldi	r20, 0x0B	; 11
    4d3a:	42 9f       	mul	r20, r18
    4d3c:	c0 01       	movw	r24, r0
    4d3e:	43 9f       	mul	r20, r19
    4d40:	90 0d       	add	r25, r0
    4d42:	11 24       	eor	r1, r1
    4d44:	9c 01       	movw	r18, r24
    4d46:	2c 50       	subi	r18, 0x0C	; 12
    4d48:	3e 4e       	sbci	r19, 0xEE	; 238
    4d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d4e:	fc 01       	movw	r30, r24
    4d50:	35 87       	std	Z+13, r19	; 0x0d
    4d52:	24 87       	std	Z+12, r18	; 0x0c
    4d54:	8a 81       	ldd	r24, Y+2	; 0x02
    4d56:	9b 81       	ldd	r25, Y+3	; 0x03
    4d58:	fc 01       	movw	r30, r24
    4d5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d5c:	88 2f       	mov	r24, r24
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	4b e0       	ldi	r20, 0x0B	; 11
    4d62:	48 9f       	mul	r20, r24
    4d64:	90 01       	movw	r18, r0
    4d66:	49 9f       	mul	r20, r25
    4d68:	30 0d       	add	r19, r0
    4d6a:	11 24       	eor	r1, r1
    4d6c:	2c 50       	subi	r18, 0x0C	; 12
    4d6e:	3e 4e       	sbci	r19, 0xEE	; 238
    4d70:	f9 01       	movw	r30, r18
    4d72:	20 81       	ld	r18, Z
    4d74:	41 e0       	ldi	r20, 0x01	; 1
    4d76:	42 0f       	add	r20, r18
    4d78:	5b e0       	ldi	r21, 0x0B	; 11
    4d7a:	58 9f       	mul	r21, r24
    4d7c:	90 01       	movw	r18, r0
    4d7e:	59 9f       	mul	r21, r25
    4d80:	30 0d       	add	r19, r0
    4d82:	11 24       	eor	r1, r1
    4d84:	c9 01       	movw	r24, r18
    4d86:	8c 50       	subi	r24, 0x0C	; 12
    4d88:	9e 4e       	sbci	r25, 0xEE	; 238
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	40 83       	st	Z, r20
    4d8e:	81 e0       	ldi	r24, 0x01	; 1
    4d90:	89 83       	std	Y+1, r24	; 0x01
    4d92:	89 81       	ldd	r24, Y+1	; 0x01
    4d94:	27 96       	adiw	r28, 0x07	; 7
    4d96:	0f b6       	in	r0, 0x3f	; 63
    4d98:	f8 94       	cli
    4d9a:	de bf       	out	0x3e, r29	; 62
    4d9c:	0f be       	out	0x3f, r0	; 63
    4d9e:	cd bf       	out	0x3d, r28	; 61
    4da0:	df 91       	pop	r29
    4da2:	cf 91       	pop	r28
    4da4:	1f 91       	pop	r17
    4da6:	0f 91       	pop	r16
    4da8:	ff 90       	pop	r15
    4daa:	ef 90       	pop	r14
    4dac:	08 95       	ret

00004dae <vTaskPriorityDisinheritAfterTimeout>:
    4dae:	ef 92       	push	r14
    4db0:	ff 92       	push	r15
    4db2:	0f 93       	push	r16
    4db4:	1f 93       	push	r17
    4db6:	cf 93       	push	r28
    4db8:	df 93       	push	r29
    4dba:	cd b7       	in	r28, 0x3d	; 61
    4dbc:	de b7       	in	r29, 0x3e	; 62
    4dbe:	2a 97       	sbiw	r28, 0x0a	; 10
    4dc0:	0f b6       	in	r0, 0x3f	; 63
    4dc2:	f8 94       	cli
    4dc4:	de bf       	out	0x3e, r29	; 62
    4dc6:	0f be       	out	0x3f, r0	; 63
    4dc8:	cd bf       	out	0x3d, r28	; 61
    4dca:	99 87       	std	Y+9, r25	; 0x09
    4dcc:	88 87       	std	Y+8, r24	; 0x08
    4dce:	6a 87       	std	Y+10, r22	; 0x0a
    4dd0:	88 85       	ldd	r24, Y+8	; 0x08
    4dd2:	99 85       	ldd	r25, Y+9	; 0x09
    4dd4:	9b 83       	std	Y+3, r25	; 0x03
    4dd6:	8a 83       	std	Y+2, r24	; 0x02
    4dd8:	81 e0       	ldi	r24, 0x01	; 1
    4dda:	8c 83       	std	Y+4, r24	; 0x04
    4ddc:	88 85       	ldd	r24, Y+8	; 0x08
    4dde:	99 85       	ldd	r25, Y+9	; 0x09
    4de0:	89 2b       	or	r24, r25
    4de2:	09 f4       	brne	.+2      	; 0x4de6 <vTaskPriorityDisinheritAfterTimeout+0x38>
    4de4:	dc c0       	rjmp	.+440    	; 0x4f9e <vTaskPriorityDisinheritAfterTimeout+0x1f0>
    4de6:	8a 81       	ldd	r24, Y+2	; 0x02
    4de8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dea:	fc 01       	movw	r30, r24
    4dec:	95 a5       	ldd	r25, Z+45	; 0x2d
    4dee:	8a 85       	ldd	r24, Y+10	; 0x0a
    4df0:	98 17       	cp	r25, r24
    4df2:	18 f4       	brcc	.+6      	; 0x4dfa <vTaskPriorityDisinheritAfterTimeout+0x4c>
    4df4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4df6:	89 83       	std	Y+1, r24	; 0x01
    4df8:	05 c0       	rjmp	.+10     	; 0x4e04 <vTaskPriorityDisinheritAfterTimeout+0x56>
    4dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    4dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    4dfe:	fc 01       	movw	r30, r24
    4e00:	85 a5       	ldd	r24, Z+45	; 0x2d
    4e02:	89 83       	std	Y+1, r24	; 0x01
    4e04:	8a 81       	ldd	r24, Y+2	; 0x02
    4e06:	9b 81       	ldd	r25, Y+3	; 0x03
    4e08:	fc 01       	movw	r30, r24
    4e0a:	92 8d       	ldd	r25, Z+26	; 0x1a
    4e0c:	89 81       	ldd	r24, Y+1	; 0x01
    4e0e:	98 17       	cp	r25, r24
    4e10:	09 f4       	brne	.+2      	; 0x4e14 <vTaskPriorityDisinheritAfterTimeout+0x66>
    4e12:	c5 c0       	rjmp	.+394    	; 0x4f9e <vTaskPriorityDisinheritAfterTimeout+0x1f0>
    4e14:	8a 81       	ldd	r24, Y+2	; 0x02
    4e16:	9b 81       	ldd	r25, Y+3	; 0x03
    4e18:	fc 01       	movw	r30, r24
    4e1a:	96 a5       	ldd	r25, Z+46	; 0x2e
    4e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e1e:	98 17       	cp	r25, r24
    4e20:	09 f0       	breq	.+2      	; 0x4e24 <vTaskPriorityDisinheritAfterTimeout+0x76>
    4e22:	bd c0       	rjmp	.+378    	; 0x4f9e <vTaskPriorityDisinheritAfterTimeout+0x1f0>
    4e24:	8a 81       	ldd	r24, Y+2	; 0x02
    4e26:	9b 81       	ldd	r25, Y+3	; 0x03
    4e28:	fc 01       	movw	r30, r24
    4e2a:	82 8d       	ldd	r24, Z+26	; 0x1a
    4e2c:	8d 83       	std	Y+5, r24	; 0x05
    4e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e30:	9b 81       	ldd	r25, Y+3	; 0x03
    4e32:	29 81       	ldd	r18, Y+1	; 0x01
    4e34:	fc 01       	movw	r30, r24
    4e36:	22 8f       	std	Z+26, r18	; 0x1a
    4e38:	8a 81       	ldd	r24, Y+2	; 0x02
    4e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4e3c:	fc 01       	movw	r30, r24
    4e3e:	86 85       	ldd	r24, Z+14	; 0x0e
    4e40:	97 85       	ldd	r25, Z+15	; 0x0f
    4e42:	a0 89       	ldd	r26, Z+16	; 0x10
    4e44:	b1 89       	ldd	r27, Z+17	; 0x11
    4e46:	bb 23       	and	r27, r27
    4e48:	c4 f0       	brlt	.+48     	; 0x4e7a <vTaskPriorityDisinheritAfterTimeout+0xcc>
    4e4a:	89 81       	ldd	r24, Y+1	; 0x01
    4e4c:	88 2f       	mov	r24, r24
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	a0 e0       	ldi	r26, 0x00	; 0
    4e52:	b0 e0       	ldi	r27, 0x00	; 0
    4e54:	2a e0       	ldi	r18, 0x0A	; 10
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	40 e0       	ldi	r20, 0x00	; 0
    4e5a:	50 e0       	ldi	r21, 0x00	; 0
    4e5c:	79 01       	movw	r14, r18
    4e5e:	8a 01       	movw	r16, r20
    4e60:	e8 1a       	sub	r14, r24
    4e62:	f9 0a       	sbc	r15, r25
    4e64:	0a 0b       	sbc	r16, r26
    4e66:	1b 0b       	sbc	r17, r27
    4e68:	d8 01       	movw	r26, r16
    4e6a:	c7 01       	movw	r24, r14
    4e6c:	2a 81       	ldd	r18, Y+2	; 0x02
    4e6e:	3b 81       	ldd	r19, Y+3	; 0x03
    4e70:	f9 01       	movw	r30, r18
    4e72:	86 87       	std	Z+14, r24	; 0x0e
    4e74:	97 87       	std	Z+15, r25	; 0x0f
    4e76:	a0 8b       	std	Z+16, r26	; 0x10
    4e78:	b1 8b       	std	Z+17, r27	; 0x11
    4e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e7e:	fc 01       	movw	r30, r24
    4e80:	24 85       	ldd	r18, Z+12	; 0x0c
    4e82:	35 85       	ldd	r19, Z+13	; 0x0d
    4e84:	8d 81       	ldd	r24, Y+5	; 0x05
    4e86:	48 2f       	mov	r20, r24
    4e88:	50 e0       	ldi	r21, 0x00	; 0
    4e8a:	6b e0       	ldi	r22, 0x0B	; 11
    4e8c:	64 9f       	mul	r22, r20
    4e8e:	c0 01       	movw	r24, r0
    4e90:	65 9f       	mul	r22, r21
    4e92:	90 0d       	add	r25, r0
    4e94:	11 24       	eor	r1, r1
    4e96:	8c 50       	subi	r24, 0x0C	; 12
    4e98:	9e 4e       	sbci	r25, 0xEE	; 238
    4e9a:	28 17       	cp	r18, r24
    4e9c:	39 07       	cpc	r19, r25
    4e9e:	09 f0       	breq	.+2      	; 0x4ea2 <vTaskPriorityDisinheritAfterTimeout+0xf4>
    4ea0:	7e c0       	rjmp	.+252    	; 0x4f9e <vTaskPriorityDisinheritAfterTimeout+0x1f0>
    4ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ea6:	02 96       	adiw	r24, 0x02	; 2
    4ea8:	0e 94 21 0a 	call	0x1442	; 0x1442 <uxListRemove>
    4eac:	8a 81       	ldd	r24, Y+2	; 0x02
    4eae:	9b 81       	ldd	r25, Y+3	; 0x03
    4eb0:	fc 01       	movw	r30, r24
    4eb2:	92 8d       	ldd	r25, Z+26	; 0x1a
    4eb4:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    4eb8:	89 17       	cp	r24, r25
    4eba:	30 f4       	brcc	.+12     	; 0x4ec8 <vTaskPriorityDisinheritAfterTimeout+0x11a>
    4ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    4ec0:	fc 01       	movw	r30, r24
    4ec2:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ec4:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    4ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eca:	9b 81       	ldd	r25, Y+3	; 0x03
    4ecc:	fc 01       	movw	r30, r24
    4ece:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ed0:	28 2f       	mov	r18, r24
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	4b e0       	ldi	r20, 0x0B	; 11
    4ed6:	42 9f       	mul	r20, r18
    4ed8:	c0 01       	movw	r24, r0
    4eda:	43 9f       	mul	r20, r19
    4edc:	90 0d       	add	r25, r0
    4ede:	11 24       	eor	r1, r1
    4ee0:	8b 50       	subi	r24, 0x0B	; 11
    4ee2:	9e 4e       	sbci	r25, 0xEE	; 238
    4ee4:	fc 01       	movw	r30, r24
    4ee6:	80 81       	ld	r24, Z
    4ee8:	91 81       	ldd	r25, Z+1	; 0x01
    4eea:	9f 83       	std	Y+7, r25	; 0x07
    4eec:	8e 83       	std	Y+6, r24	; 0x06
    4eee:	8a 81       	ldd	r24, Y+2	; 0x02
    4ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ef2:	2e 81       	ldd	r18, Y+6	; 0x06
    4ef4:	3f 81       	ldd	r19, Y+7	; 0x07
    4ef6:	fc 01       	movw	r30, r24
    4ef8:	37 83       	std	Z+7, r19	; 0x07
    4efa:	26 83       	std	Z+6, r18	; 0x06
    4efc:	8e 81       	ldd	r24, Y+6	; 0x06
    4efe:	9f 81       	ldd	r25, Y+7	; 0x07
    4f00:	fc 01       	movw	r30, r24
    4f02:	26 81       	ldd	r18, Z+6	; 0x06
    4f04:	37 81       	ldd	r19, Z+7	; 0x07
    4f06:	8a 81       	ldd	r24, Y+2	; 0x02
    4f08:	9b 81       	ldd	r25, Y+3	; 0x03
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	31 87       	std	Z+9, r19	; 0x09
    4f0e:	20 87       	std	Z+8, r18	; 0x08
    4f10:	8e 81       	ldd	r24, Y+6	; 0x06
    4f12:	9f 81       	ldd	r25, Y+7	; 0x07
    4f14:	fc 01       	movw	r30, r24
    4f16:	86 81       	ldd	r24, Z+6	; 0x06
    4f18:	97 81       	ldd	r25, Z+7	; 0x07
    4f1a:	2a 81       	ldd	r18, Y+2	; 0x02
    4f1c:	3b 81       	ldd	r19, Y+3	; 0x03
    4f1e:	2e 5f       	subi	r18, 0xFE	; 254
    4f20:	3f 4f       	sbci	r19, 0xFF	; 255
    4f22:	fc 01       	movw	r30, r24
    4f24:	35 83       	std	Z+5, r19	; 0x05
    4f26:	24 83       	std	Z+4, r18	; 0x04
    4f28:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f2c:	9c 01       	movw	r18, r24
    4f2e:	2e 5f       	subi	r18, 0xFE	; 254
    4f30:	3f 4f       	sbci	r19, 0xFF	; 255
    4f32:	8e 81       	ldd	r24, Y+6	; 0x06
    4f34:	9f 81       	ldd	r25, Y+7	; 0x07
    4f36:	fc 01       	movw	r30, r24
    4f38:	37 83       	std	Z+7, r19	; 0x07
    4f3a:	26 83       	std	Z+6, r18	; 0x06
    4f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    4f40:	fc 01       	movw	r30, r24
    4f42:	82 8d       	ldd	r24, Z+26	; 0x1a
    4f44:	28 2f       	mov	r18, r24
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	4b e0       	ldi	r20, 0x0B	; 11
    4f4a:	42 9f       	mul	r20, r18
    4f4c:	c0 01       	movw	r24, r0
    4f4e:	43 9f       	mul	r20, r19
    4f50:	90 0d       	add	r25, r0
    4f52:	11 24       	eor	r1, r1
    4f54:	9c 01       	movw	r18, r24
    4f56:	2c 50       	subi	r18, 0x0C	; 12
    4f58:	3e 4e       	sbci	r19, 0xEE	; 238
    4f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f5e:	fc 01       	movw	r30, r24
    4f60:	35 87       	std	Z+13, r19	; 0x0d
    4f62:	24 87       	std	Z+12, r18	; 0x0c
    4f64:	8a 81       	ldd	r24, Y+2	; 0x02
    4f66:	9b 81       	ldd	r25, Y+3	; 0x03
    4f68:	fc 01       	movw	r30, r24
    4f6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    4f6c:	88 2f       	mov	r24, r24
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	4b e0       	ldi	r20, 0x0B	; 11
    4f72:	48 9f       	mul	r20, r24
    4f74:	90 01       	movw	r18, r0
    4f76:	49 9f       	mul	r20, r25
    4f78:	30 0d       	add	r19, r0
    4f7a:	11 24       	eor	r1, r1
    4f7c:	2c 50       	subi	r18, 0x0C	; 12
    4f7e:	3e 4e       	sbci	r19, 0xEE	; 238
    4f80:	f9 01       	movw	r30, r18
    4f82:	20 81       	ld	r18, Z
    4f84:	41 e0       	ldi	r20, 0x01	; 1
    4f86:	42 0f       	add	r20, r18
    4f88:	5b e0       	ldi	r21, 0x0B	; 11
    4f8a:	58 9f       	mul	r21, r24
    4f8c:	90 01       	movw	r18, r0
    4f8e:	59 9f       	mul	r21, r25
    4f90:	30 0d       	add	r19, r0
    4f92:	11 24       	eor	r1, r1
    4f94:	c9 01       	movw	r24, r18
    4f96:	8c 50       	subi	r24, 0x0C	; 12
    4f98:	9e 4e       	sbci	r25, 0xEE	; 238
    4f9a:	fc 01       	movw	r30, r24
    4f9c:	40 83       	st	Z, r20
    4f9e:	00 00       	nop
    4fa0:	2a 96       	adiw	r28, 0x0a	; 10
    4fa2:	0f b6       	in	r0, 0x3f	; 63
    4fa4:	f8 94       	cli
    4fa6:	de bf       	out	0x3e, r29	; 62
    4fa8:	0f be       	out	0x3f, r0	; 63
    4faa:	cd bf       	out	0x3d, r28	; 61
    4fac:	df 91       	pop	r29
    4fae:	cf 91       	pop	r28
    4fb0:	1f 91       	pop	r17
    4fb2:	0f 91       	pop	r16
    4fb4:	ff 90       	pop	r15
    4fb6:	ef 90       	pop	r14
    4fb8:	08 95       	ret

00004fba <uxTaskResetEventItemValue>:
    4fba:	ef 92       	push	r14
    4fbc:	ff 92       	push	r15
    4fbe:	0f 93       	push	r16
    4fc0:	1f 93       	push	r17
    4fc2:	cf 93       	push	r28
    4fc4:	df 93       	push	r29
    4fc6:	00 d0       	rcall	.+0      	; 0x4fc8 <uxTaskResetEventItemValue+0xe>
    4fc8:	1f 92       	push	r1
    4fca:	cd b7       	in	r28, 0x3d	; 61
    4fcc:	de b7       	in	r29, 0x3e	; 62
    4fce:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    4fd2:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4fd6:	fc 01       	movw	r30, r24
    4fd8:	86 85       	ldd	r24, Z+14	; 0x0e
    4fda:	97 85       	ldd	r25, Z+15	; 0x0f
    4fdc:	a0 89       	ldd	r26, Z+16	; 0x10
    4fde:	b1 89       	ldd	r27, Z+17	; 0x11
    4fe0:	89 83       	std	Y+1, r24	; 0x01
    4fe2:	9a 83       	std	Y+2, r25	; 0x02
    4fe4:	ab 83       	std	Y+3, r26	; 0x03
    4fe6:	bc 83       	std	Y+4, r27	; 0x04
    4fe8:	60 91 f2 11 	lds	r22, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    4fec:	70 91 f3 11 	lds	r23, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4ff0:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    4ff4:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ffc:	88 2f       	mov	r24, r24
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	a0 e0       	ldi	r26, 0x00	; 0
    5002:	b0 e0       	ldi	r27, 0x00	; 0
    5004:	2a e0       	ldi	r18, 0x0A	; 10
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	40 e0       	ldi	r20, 0x00	; 0
    500a:	50 e0       	ldi	r21, 0x00	; 0
    500c:	79 01       	movw	r14, r18
    500e:	8a 01       	movw	r16, r20
    5010:	e8 1a       	sub	r14, r24
    5012:	f9 0a       	sbc	r15, r25
    5014:	0a 0b       	sbc	r16, r26
    5016:	1b 0b       	sbc	r17, r27
    5018:	d8 01       	movw	r26, r16
    501a:	c7 01       	movw	r24, r14
    501c:	fb 01       	movw	r30, r22
    501e:	86 87       	std	Z+14, r24	; 0x0e
    5020:	97 87       	std	Z+15, r25	; 0x0f
    5022:	a0 8b       	std	Z+16, r26	; 0x10
    5024:	b1 8b       	std	Z+17, r27	; 0x11
    5026:	89 81       	ldd	r24, Y+1	; 0x01
    5028:	9a 81       	ldd	r25, Y+2	; 0x02
    502a:	ab 81       	ldd	r26, Y+3	; 0x03
    502c:	bc 81       	ldd	r27, Y+4	; 0x04
    502e:	bc 01       	movw	r22, r24
    5030:	cd 01       	movw	r24, r26
    5032:	0f 90       	pop	r0
    5034:	0f 90       	pop	r0
    5036:	0f 90       	pop	r0
    5038:	0f 90       	pop	r0
    503a:	df 91       	pop	r29
    503c:	cf 91       	pop	r28
    503e:	1f 91       	pop	r17
    5040:	0f 91       	pop	r16
    5042:	ff 90       	pop	r15
    5044:	ef 90       	pop	r14
    5046:	08 95       	ret

00005048 <pvTaskIncrementMutexHeldCount>:
    5048:	cf 93       	push	r28
    504a:	df 93       	push	r29
    504c:	cd b7       	in	r28, 0x3d	; 61
    504e:	de b7       	in	r29, 0x3e	; 62
    5050:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5054:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5058:	89 2b       	or	r24, r25
    505a:	49 f0       	breq	.+18     	; 0x506e <pvTaskIncrementMutexHeldCount+0x26>
    505c:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5060:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5064:	fc 01       	movw	r30, r24
    5066:	26 a5       	ldd	r18, Z+46	; 0x2e
    5068:	2f 5f       	subi	r18, 0xFF	; 255
    506a:	fc 01       	movw	r30, r24
    506c:	26 a7       	std	Z+46, r18	; 0x2e
    506e:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5072:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5076:	df 91       	pop	r29
    5078:	cf 91       	pop	r28
    507a:	08 95       	ret

0000507c <xTaskGenericNotifyWait>:
    507c:	af 92       	push	r10
    507e:	bf 92       	push	r11
    5080:	cf 92       	push	r12
    5082:	df 92       	push	r13
    5084:	ef 92       	push	r14
    5086:	ff 92       	push	r15
    5088:	0f 93       	push	r16
    508a:	1f 93       	push	r17
    508c:	cf 93       	push	r28
    508e:	df 93       	push	r29
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
    5094:	60 97       	sbiw	r28, 0x10	; 16
    5096:	0f b6       	in	r0, 0x3f	; 63
    5098:	f8 94       	cli
    509a:	de bf       	out	0x3e, r29	; 62
    509c:	0f be       	out	0x3f, r0	; 63
    509e:	cd bf       	out	0x3d, r28	; 61
    50a0:	8a 83       	std	Y+2, r24	; 0x02
    50a2:	4b 83       	std	Y+3, r20	; 0x03
    50a4:	5c 83       	std	Y+4, r21	; 0x04
    50a6:	6d 83       	std	Y+5, r22	; 0x05
    50a8:	7e 83       	std	Y+6, r23	; 0x06
    50aa:	0f 83       	std	Y+7, r16	; 0x07
    50ac:	18 87       	std	Y+8, r17	; 0x08
    50ae:	29 87       	std	Y+9, r18	; 0x09
    50b0:	3a 87       	std	Y+10, r19	; 0x0a
    50b2:	fc 86       	std	Y+12, r15	; 0x0c
    50b4:	eb 86       	std	Y+11, r14	; 0x0b
    50b6:	ad 86       	std	Y+13, r10	; 0x0d
    50b8:	be 86       	std	Y+14, r11	; 0x0e
    50ba:	cf 86       	std	Y+15, r12	; 0x0f
    50bc:	d8 8a       	std	Y+16, r13	; 0x10
    50be:	0f b6       	in	r0, 0x3f	; 63
    50c0:	f8 94       	cli
    50c2:	0f 92       	push	r0
    50c4:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    50c8:	30 91 f3 11 	lds	r19, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    50cc:	8a 81       	ldd	r24, Y+2	; 0x02
    50ce:	88 2f       	mov	r24, r24
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	82 0f       	add	r24, r18
    50d4:	93 1f       	adc	r25, r19
    50d6:	c3 96       	adiw	r24, 0x33	; 51
    50d8:	dc 01       	movw	r26, r24
    50da:	8c 91       	ld	r24, X
    50dc:	82 30       	cpi	r24, 0x02	; 2
    50de:	09 f4       	brne	.+2      	; 0x50e2 <xTaskGenericNotifyWait+0x66>
    50e0:	4f c0       	rjmp	.+158    	; 0x5180 <xTaskGenericNotifyWait+0x104>
    50e2:	60 91 f2 11 	lds	r22, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    50e6:	70 91 f3 11 	lds	r23, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    50ea:	8a 81       	ldd	r24, Y+2	; 0x02
    50ec:	e8 2f       	mov	r30, r24
    50ee:	f0 e0       	ldi	r31, 0x00	; 0
    50f0:	8a 81       	ldd	r24, Y+2	; 0x02
    50f2:	88 2f       	mov	r24, r24
    50f4:	90 e0       	ldi	r25, 0x00	; 0
    50f6:	88 0f       	add	r24, r24
    50f8:	99 1f       	adc	r25, r25
    50fa:	88 0f       	add	r24, r24
    50fc:	99 1f       	adc	r25, r25
    50fe:	86 0f       	add	r24, r22
    5100:	97 1f       	adc	r25, r23
    5102:	8f 96       	adiw	r24, 0x2f	; 47
    5104:	dc 01       	movw	r26, r24
    5106:	2d 91       	ld	r18, X+
    5108:	3d 91       	ld	r19, X+
    510a:	4d 91       	ld	r20, X+
    510c:	5c 91       	ld	r21, X
    510e:	8b 81       	ldd	r24, Y+3	; 0x03
    5110:	9c 81       	ldd	r25, Y+4	; 0x04
    5112:	ad 81       	ldd	r26, Y+5	; 0x05
    5114:	be 81       	ldd	r27, Y+6	; 0x06
    5116:	80 95       	com	r24
    5118:	90 95       	com	r25
    511a:	a0 95       	com	r26
    511c:	b0 95       	com	r27
    511e:	82 23       	and	r24, r18
    5120:	93 23       	and	r25, r19
    5122:	a4 23       	and	r26, r20
    5124:	b5 23       	and	r27, r21
    5126:	9f 01       	movw	r18, r30
    5128:	22 0f       	add	r18, r18
    512a:	33 1f       	adc	r19, r19
    512c:	22 0f       	add	r18, r18
    512e:	33 1f       	adc	r19, r19
    5130:	26 0f       	add	r18, r22
    5132:	37 1f       	adc	r19, r23
    5134:	21 5d       	subi	r18, 0xD1	; 209
    5136:	3f 4f       	sbci	r19, 0xFF	; 255
    5138:	f9 01       	movw	r30, r18
    513a:	80 83       	st	Z, r24
    513c:	91 83       	std	Z+1, r25	; 0x01
    513e:	a2 83       	std	Z+2, r26	; 0x02
    5140:	b3 83       	std	Z+3, r27	; 0x03
    5142:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5146:	30 91 f3 11 	lds	r19, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    514a:	8a 81       	ldd	r24, Y+2	; 0x02
    514c:	88 2f       	mov	r24, r24
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	82 0f       	add	r24, r18
    5152:	93 1f       	adc	r25, r19
    5154:	c3 96       	adiw	r24, 0x33	; 51
    5156:	21 e0       	ldi	r18, 0x01	; 1
    5158:	dc 01       	movw	r26, r24
    515a:	2c 93       	st	X, r18
    515c:	8d 85       	ldd	r24, Y+13	; 0x0d
    515e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5160:	af 85       	ldd	r26, Y+15	; 0x0f
    5162:	b8 89       	ldd	r27, Y+16	; 0x10
    5164:	89 2b       	or	r24, r25
    5166:	8a 2b       	or	r24, r26
    5168:	8b 2b       	or	r24, r27
    516a:	51 f0       	breq	.+20     	; 0x5180 <xTaskGenericNotifyWait+0x104>
    516c:	8d 85       	ldd	r24, Y+13	; 0x0d
    516e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5170:	af 85       	ldd	r26, Y+15	; 0x0f
    5172:	b8 89       	ldd	r27, Y+16	; 0x10
    5174:	41 e0       	ldi	r20, 0x01	; 1
    5176:	bc 01       	movw	r22, r24
    5178:	cd 01       	movw	r24, r26
    517a:	b3 d4       	rcall	.+2406   	; 0x5ae2 <prvAddCurrentTaskToDelayedList>
    517c:	0e 94 3e 0b 	call	0x167c	; 0x167c <vPortYield>
    5180:	0f 90       	pop	r0
    5182:	0f be       	out	0x3f, r0	; 63
    5184:	0f b6       	in	r0, 0x3f	; 63
    5186:	f8 94       	cli
    5188:	0f 92       	push	r0
    518a:	8b 85       	ldd	r24, Y+11	; 0x0b
    518c:	9c 85       	ldd	r25, Y+12	; 0x0c
    518e:	89 2b       	or	r24, r25
    5190:	d1 f0       	breq	.+52     	; 0x51c6 <xTaskGenericNotifyWait+0x14a>
    5192:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5196:	30 91 f3 11 	lds	r19, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    519a:	8a 81       	ldd	r24, Y+2	; 0x02
    519c:	88 2f       	mov	r24, r24
    519e:	90 e0       	ldi	r25, 0x00	; 0
    51a0:	88 0f       	add	r24, r24
    51a2:	99 1f       	adc	r25, r25
    51a4:	88 0f       	add	r24, r24
    51a6:	99 1f       	adc	r25, r25
    51a8:	82 0f       	add	r24, r18
    51aa:	93 1f       	adc	r25, r19
    51ac:	8f 96       	adiw	r24, 0x2f	; 47
    51ae:	fc 01       	movw	r30, r24
    51b0:	80 81       	ld	r24, Z
    51b2:	91 81       	ldd	r25, Z+1	; 0x01
    51b4:	a2 81       	ldd	r26, Z+2	; 0x02
    51b6:	b3 81       	ldd	r27, Z+3	; 0x03
    51b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    51ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    51bc:	f9 01       	movw	r30, r18
    51be:	80 83       	st	Z, r24
    51c0:	91 83       	std	Z+1, r25	; 0x01
    51c2:	a2 83       	std	Z+2, r26	; 0x02
    51c4:	b3 83       	std	Z+3, r27	; 0x03
    51c6:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    51ca:	30 91 f3 11 	lds	r19, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    51ce:	8a 81       	ldd	r24, Y+2	; 0x02
    51d0:	88 2f       	mov	r24, r24
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	82 0f       	add	r24, r18
    51d6:	93 1f       	adc	r25, r19
    51d8:	c3 96       	adiw	r24, 0x33	; 51
    51da:	dc 01       	movw	r26, r24
    51dc:	8c 91       	ld	r24, X
    51de:	82 30       	cpi	r24, 0x02	; 2
    51e0:	11 f0       	breq	.+4      	; 0x51e6 <xTaskGenericNotifyWait+0x16a>
    51e2:	19 82       	std	Y+1, r1	; 0x01
    51e4:	32 c0       	rjmp	.+100    	; 0x524a <xTaskGenericNotifyWait+0x1ce>
    51e6:	60 91 f2 11 	lds	r22, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    51ea:	70 91 f3 11 	lds	r23, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    51ee:	8a 81       	ldd	r24, Y+2	; 0x02
    51f0:	e8 2f       	mov	r30, r24
    51f2:	f0 e0       	ldi	r31, 0x00	; 0
    51f4:	8a 81       	ldd	r24, Y+2	; 0x02
    51f6:	88 2f       	mov	r24, r24
    51f8:	90 e0       	ldi	r25, 0x00	; 0
    51fa:	88 0f       	add	r24, r24
    51fc:	99 1f       	adc	r25, r25
    51fe:	88 0f       	add	r24, r24
    5200:	99 1f       	adc	r25, r25
    5202:	86 0f       	add	r24, r22
    5204:	97 1f       	adc	r25, r23
    5206:	8f 96       	adiw	r24, 0x2f	; 47
    5208:	dc 01       	movw	r26, r24
    520a:	2d 91       	ld	r18, X+
    520c:	3d 91       	ld	r19, X+
    520e:	4d 91       	ld	r20, X+
    5210:	5c 91       	ld	r21, X
    5212:	8f 81       	ldd	r24, Y+7	; 0x07
    5214:	98 85       	ldd	r25, Y+8	; 0x08
    5216:	a9 85       	ldd	r26, Y+9	; 0x09
    5218:	ba 85       	ldd	r27, Y+10	; 0x0a
    521a:	80 95       	com	r24
    521c:	90 95       	com	r25
    521e:	a0 95       	com	r26
    5220:	b0 95       	com	r27
    5222:	82 23       	and	r24, r18
    5224:	93 23       	and	r25, r19
    5226:	a4 23       	and	r26, r20
    5228:	b5 23       	and	r27, r21
    522a:	9f 01       	movw	r18, r30
    522c:	22 0f       	add	r18, r18
    522e:	33 1f       	adc	r19, r19
    5230:	22 0f       	add	r18, r18
    5232:	33 1f       	adc	r19, r19
    5234:	26 0f       	add	r18, r22
    5236:	37 1f       	adc	r19, r23
    5238:	21 5d       	subi	r18, 0xD1	; 209
    523a:	3f 4f       	sbci	r19, 0xFF	; 255
    523c:	f9 01       	movw	r30, r18
    523e:	80 83       	st	Z, r24
    5240:	91 83       	std	Z+1, r25	; 0x01
    5242:	a2 83       	std	Z+2, r26	; 0x02
    5244:	b3 83       	std	Z+3, r27	; 0x03
    5246:	81 e0       	ldi	r24, 0x01	; 1
    5248:	89 83       	std	Y+1, r24	; 0x01
    524a:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    524e:	30 91 f3 11 	lds	r19, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5252:	8a 81       	ldd	r24, Y+2	; 0x02
    5254:	88 2f       	mov	r24, r24
    5256:	90 e0       	ldi	r25, 0x00	; 0
    5258:	82 0f       	add	r24, r18
    525a:	93 1f       	adc	r25, r19
    525c:	c3 96       	adiw	r24, 0x33	; 51
    525e:	dc 01       	movw	r26, r24
    5260:	1c 92       	st	X, r1
    5262:	0f 90       	pop	r0
    5264:	0f be       	out	0x3f, r0	; 63
    5266:	89 81       	ldd	r24, Y+1	; 0x01
    5268:	60 96       	adiw	r28, 0x10	; 16
    526a:	0f b6       	in	r0, 0x3f	; 63
    526c:	f8 94       	cli
    526e:	de bf       	out	0x3e, r29	; 62
    5270:	0f be       	out	0x3f, r0	; 63
    5272:	cd bf       	out	0x3d, r28	; 61
    5274:	df 91       	pop	r29
    5276:	cf 91       	pop	r28
    5278:	1f 91       	pop	r17
    527a:	0f 91       	pop	r16
    527c:	ff 90       	pop	r15
    527e:	ef 90       	pop	r14
    5280:	df 90       	pop	r13
    5282:	cf 90       	pop	r12
    5284:	bf 90       	pop	r11
    5286:	af 90       	pop	r10
    5288:	08 95       	ret

0000528a <xTaskGenericNotify>:
    528a:	ef 92       	push	r14
    528c:	ff 92       	push	r15
    528e:	0f 93       	push	r16
    5290:	cf 93       	push	r28
    5292:	df 93       	push	r29
    5294:	cd b7       	in	r28, 0x3d	; 61
    5296:	de b7       	in	r29, 0x3e	; 62
    5298:	62 97       	sbiw	r28, 0x12	; 18
    529a:	0f b6       	in	r0, 0x3f	; 63
    529c:	f8 94       	cli
    529e:	de bf       	out	0x3e, r29	; 62
    52a0:	0f be       	out	0x3f, r0	; 63
    52a2:	cd bf       	out	0x3d, r28	; 61
    52a4:	9a 87       	std	Y+10, r25	; 0x0a
    52a6:	89 87       	std	Y+9, r24	; 0x09
    52a8:	6b 87       	std	Y+11, r22	; 0x0b
    52aa:	2c 87       	std	Y+12, r18	; 0x0c
    52ac:	3d 87       	std	Y+13, r19	; 0x0d
    52ae:	4e 87       	std	Y+14, r20	; 0x0e
    52b0:	5f 87       	std	Y+15, r21	; 0x0f
    52b2:	08 8b       	std	Y+16, r16	; 0x10
    52b4:	fa 8a       	std	Y+18, r15	; 0x12
    52b6:	e9 8a       	std	Y+17, r14	; 0x11
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	89 83       	std	Y+1, r24	; 0x01
    52bc:	89 85       	ldd	r24, Y+9	; 0x09
    52be:	9a 85       	ldd	r25, Y+10	; 0x0a
    52c0:	9b 83       	std	Y+3, r25	; 0x03
    52c2:	8a 83       	std	Y+2, r24	; 0x02
    52c4:	0f b6       	in	r0, 0x3f	; 63
    52c6:	f8 94       	cli
    52c8:	0f 92       	push	r0
    52ca:	89 89       	ldd	r24, Y+17	; 0x11
    52cc:	9a 89       	ldd	r25, Y+18	; 0x12
    52ce:	89 2b       	or	r24, r25
    52d0:	c1 f0       	breq	.+48     	; 0x5302 <xTaskGenericNotify+0x78>
    52d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    52d4:	88 2f       	mov	r24, r24
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	2a 81       	ldd	r18, Y+2	; 0x02
    52da:	3b 81       	ldd	r19, Y+3	; 0x03
    52dc:	88 0f       	add	r24, r24
    52de:	99 1f       	adc	r25, r25
    52e0:	88 0f       	add	r24, r24
    52e2:	99 1f       	adc	r25, r25
    52e4:	82 0f       	add	r24, r18
    52e6:	93 1f       	adc	r25, r19
    52e8:	8f 96       	adiw	r24, 0x2f	; 47
    52ea:	fc 01       	movw	r30, r24
    52ec:	80 81       	ld	r24, Z
    52ee:	91 81       	ldd	r25, Z+1	; 0x01
    52f0:	a2 81       	ldd	r26, Z+2	; 0x02
    52f2:	b3 81       	ldd	r27, Z+3	; 0x03
    52f4:	29 89       	ldd	r18, Y+17	; 0x11
    52f6:	3a 89       	ldd	r19, Y+18	; 0x12
    52f8:	f9 01       	movw	r30, r18
    52fa:	80 83       	st	Z, r24
    52fc:	91 83       	std	Z+1, r25	; 0x01
    52fe:	a2 83       	std	Z+2, r26	; 0x02
    5300:	b3 83       	std	Z+3, r27	; 0x03
    5302:	8b 85       	ldd	r24, Y+11	; 0x0b
    5304:	88 2f       	mov	r24, r24
    5306:	90 e0       	ldi	r25, 0x00	; 0
    5308:	2a 81       	ldd	r18, Y+2	; 0x02
    530a:	3b 81       	ldd	r19, Y+3	; 0x03
    530c:	82 0f       	add	r24, r18
    530e:	93 1f       	adc	r25, r19
    5310:	c3 96       	adiw	r24, 0x33	; 51
    5312:	fc 01       	movw	r30, r24
    5314:	80 81       	ld	r24, Z
    5316:	8c 83       	std	Y+4, r24	; 0x04
    5318:	8b 85       	ldd	r24, Y+11	; 0x0b
    531a:	88 2f       	mov	r24, r24
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	2a 81       	ldd	r18, Y+2	; 0x02
    5320:	3b 81       	ldd	r19, Y+3	; 0x03
    5322:	82 0f       	add	r24, r18
    5324:	93 1f       	adc	r25, r19
    5326:	c3 96       	adiw	r24, 0x33	; 51
    5328:	22 e0       	ldi	r18, 0x02	; 2
    532a:	fc 01       	movw	r30, r24
    532c:	20 83       	st	Z, r18
    532e:	88 89       	ldd	r24, Y+16	; 0x10
    5330:	88 2f       	mov	r24, r24
    5332:	90 e0       	ldi	r25, 0x00	; 0
    5334:	82 30       	cpi	r24, 0x02	; 2
    5336:	91 05       	cpc	r25, r1
    5338:	09 f4       	brne	.+2      	; 0x533c <xTaskGenericNotify+0xb2>
    533a:	3e c0       	rjmp	.+124    	; 0x53b8 <xTaskGenericNotify+0x12e>
    533c:	83 30       	cpi	r24, 0x03	; 3
    533e:	91 05       	cpc	r25, r1
    5340:	34 f4       	brge	.+12     	; 0x534e <xTaskGenericNotify+0xc4>
    5342:	00 97       	sbiw	r24, 0x00	; 0
    5344:	09 f4       	brne	.+2      	; 0x5348 <xTaskGenericNotify+0xbe>
    5346:	92 c0       	rjmp	.+292    	; 0x546c <xTaskGenericNotify+0x1e2>
    5348:	01 97       	sbiw	r24, 0x01	; 1
    534a:	49 f0       	breq	.+18     	; 0x535e <xTaskGenericNotify+0xd4>
    534c:	90 c0       	rjmp	.+288    	; 0x546e <xTaskGenericNotify+0x1e4>
    534e:	83 30       	cpi	r24, 0x03	; 3
    5350:	91 05       	cpc	r25, r1
    5352:	09 f4       	brne	.+2      	; 0x5356 <xTaskGenericNotify+0xcc>
    5354:	56 c0       	rjmp	.+172    	; 0x5402 <xTaskGenericNotify+0x178>
    5356:	04 97       	sbiw	r24, 0x04	; 4
    5358:	09 f4       	brne	.+2      	; 0x535c <xTaskGenericNotify+0xd2>
    535a:	6b c0       	rjmp	.+214    	; 0x5432 <xTaskGenericNotify+0x1a8>
    535c:	88 c0       	rjmp	.+272    	; 0x546e <xTaskGenericNotify+0x1e4>
    535e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5360:	68 2f       	mov	r22, r24
    5362:	70 e0       	ldi	r23, 0x00	; 0
    5364:	8b 85       	ldd	r24, Y+11	; 0x0b
    5366:	88 2f       	mov	r24, r24
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	2a 81       	ldd	r18, Y+2	; 0x02
    536c:	3b 81       	ldd	r19, Y+3	; 0x03
    536e:	88 0f       	add	r24, r24
    5370:	99 1f       	adc	r25, r25
    5372:	88 0f       	add	r24, r24
    5374:	99 1f       	adc	r25, r25
    5376:	82 0f       	add	r24, r18
    5378:	93 1f       	adc	r25, r19
    537a:	8f 96       	adiw	r24, 0x2f	; 47
    537c:	fc 01       	movw	r30, r24
    537e:	20 81       	ld	r18, Z
    5380:	31 81       	ldd	r19, Z+1	; 0x01
    5382:	42 81       	ldd	r20, Z+2	; 0x02
    5384:	53 81       	ldd	r21, Z+3	; 0x03
    5386:	8c 85       	ldd	r24, Y+12	; 0x0c
    5388:	9d 85       	ldd	r25, Y+13	; 0x0d
    538a:	ae 85       	ldd	r26, Y+14	; 0x0e
    538c:	bf 85       	ldd	r27, Y+15	; 0x0f
    538e:	82 2b       	or	r24, r18
    5390:	93 2b       	or	r25, r19
    5392:	a4 2b       	or	r26, r20
    5394:	b5 2b       	or	r27, r21
    5396:	4a 81       	ldd	r20, Y+2	; 0x02
    5398:	5b 81       	ldd	r21, Y+3	; 0x03
    539a:	9b 01       	movw	r18, r22
    539c:	22 0f       	add	r18, r18
    539e:	33 1f       	adc	r19, r19
    53a0:	22 0f       	add	r18, r18
    53a2:	33 1f       	adc	r19, r19
    53a4:	24 0f       	add	r18, r20
    53a6:	35 1f       	adc	r19, r21
    53a8:	21 5d       	subi	r18, 0xD1	; 209
    53aa:	3f 4f       	sbci	r19, 0xFF	; 255
    53ac:	f9 01       	movw	r30, r18
    53ae:	80 83       	st	Z, r24
    53b0:	91 83       	std	Z+1, r25	; 0x01
    53b2:	a2 83       	std	Z+2, r26	; 0x02
    53b4:	b3 83       	std	Z+3, r27	; 0x03
    53b6:	5b c0       	rjmp	.+182    	; 0x546e <xTaskGenericNotify+0x1e4>
    53b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    53ba:	28 2f       	mov	r18, r24
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	4a 81       	ldd	r20, Y+2	; 0x02
    53c0:	5b 81       	ldd	r21, Y+3	; 0x03
    53c2:	c9 01       	movw	r24, r18
    53c4:	88 0f       	add	r24, r24
    53c6:	99 1f       	adc	r25, r25
    53c8:	88 0f       	add	r24, r24
    53ca:	99 1f       	adc	r25, r25
    53cc:	84 0f       	add	r24, r20
    53ce:	95 1f       	adc	r25, r21
    53d0:	8f 96       	adiw	r24, 0x2f	; 47
    53d2:	fc 01       	movw	r30, r24
    53d4:	80 81       	ld	r24, Z
    53d6:	91 81       	ldd	r25, Z+1	; 0x01
    53d8:	a2 81       	ldd	r26, Z+2	; 0x02
    53da:	b3 81       	ldd	r27, Z+3	; 0x03
    53dc:	01 96       	adiw	r24, 0x01	; 1
    53de:	a1 1d       	adc	r26, r1
    53e0:	b1 1d       	adc	r27, r1
    53e2:	4a 81       	ldd	r20, Y+2	; 0x02
    53e4:	5b 81       	ldd	r21, Y+3	; 0x03
    53e6:	22 0f       	add	r18, r18
    53e8:	33 1f       	adc	r19, r19
    53ea:	22 0f       	add	r18, r18
    53ec:	33 1f       	adc	r19, r19
    53ee:	24 0f       	add	r18, r20
    53f0:	35 1f       	adc	r19, r21
    53f2:	21 5d       	subi	r18, 0xD1	; 209
    53f4:	3f 4f       	sbci	r19, 0xFF	; 255
    53f6:	f9 01       	movw	r30, r18
    53f8:	80 83       	st	Z, r24
    53fa:	91 83       	std	Z+1, r25	; 0x01
    53fc:	a2 83       	std	Z+2, r26	; 0x02
    53fe:	b3 83       	std	Z+3, r27	; 0x03
    5400:	36 c0       	rjmp	.+108    	; 0x546e <xTaskGenericNotify+0x1e4>
    5402:	8b 85       	ldd	r24, Y+11	; 0x0b
    5404:	88 2f       	mov	r24, r24
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	2a 81       	ldd	r18, Y+2	; 0x02
    540a:	3b 81       	ldd	r19, Y+3	; 0x03
    540c:	88 0f       	add	r24, r24
    540e:	99 1f       	adc	r25, r25
    5410:	88 0f       	add	r24, r24
    5412:	99 1f       	adc	r25, r25
    5414:	82 0f       	add	r24, r18
    5416:	93 1f       	adc	r25, r19
    5418:	9c 01       	movw	r18, r24
    541a:	21 5d       	subi	r18, 0xD1	; 209
    541c:	3f 4f       	sbci	r19, 0xFF	; 255
    541e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5420:	9d 85       	ldd	r25, Y+13	; 0x0d
    5422:	ae 85       	ldd	r26, Y+14	; 0x0e
    5424:	bf 85       	ldd	r27, Y+15	; 0x0f
    5426:	f9 01       	movw	r30, r18
    5428:	80 83       	st	Z, r24
    542a:	91 83       	std	Z+1, r25	; 0x01
    542c:	a2 83       	std	Z+2, r26	; 0x02
    542e:	b3 83       	std	Z+3, r27	; 0x03
    5430:	1e c0       	rjmp	.+60     	; 0x546e <xTaskGenericNotify+0x1e4>
    5432:	8c 81       	ldd	r24, Y+4	; 0x04
    5434:	82 30       	cpi	r24, 0x02	; 2
    5436:	c1 f0       	breq	.+48     	; 0x5468 <xTaskGenericNotify+0x1de>
    5438:	8b 85       	ldd	r24, Y+11	; 0x0b
    543a:	88 2f       	mov	r24, r24
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	2a 81       	ldd	r18, Y+2	; 0x02
    5440:	3b 81       	ldd	r19, Y+3	; 0x03
    5442:	88 0f       	add	r24, r24
    5444:	99 1f       	adc	r25, r25
    5446:	88 0f       	add	r24, r24
    5448:	99 1f       	adc	r25, r25
    544a:	82 0f       	add	r24, r18
    544c:	93 1f       	adc	r25, r19
    544e:	9c 01       	movw	r18, r24
    5450:	21 5d       	subi	r18, 0xD1	; 209
    5452:	3f 4f       	sbci	r19, 0xFF	; 255
    5454:	8c 85       	ldd	r24, Y+12	; 0x0c
    5456:	9d 85       	ldd	r25, Y+13	; 0x0d
    5458:	ae 85       	ldd	r26, Y+14	; 0x0e
    545a:	bf 85       	ldd	r27, Y+15	; 0x0f
    545c:	f9 01       	movw	r30, r18
    545e:	80 83       	st	Z, r24
    5460:	91 83       	std	Z+1, r25	; 0x01
    5462:	a2 83       	std	Z+2, r26	; 0x02
    5464:	b3 83       	std	Z+3, r27	; 0x03
    5466:	03 c0       	rjmp	.+6      	; 0x546e <xTaskGenericNotify+0x1e4>
    5468:	19 82       	std	Y+1, r1	; 0x01
    546a:	01 c0       	rjmp	.+2      	; 0x546e <xTaskGenericNotify+0x1e4>
    546c:	00 00       	nop
    546e:	8c 81       	ldd	r24, Y+4	; 0x04
    5470:	81 30       	cpi	r24, 0x01	; 1
    5472:	09 f0       	breq	.+2      	; 0x5476 <xTaskGenericNotify+0x1ec>
    5474:	cc c0       	rjmp	.+408    	; 0x560e <xTaskGenericNotify+0x384>
    5476:	8a 81       	ldd	r24, Y+2	; 0x02
    5478:	9b 81       	ldd	r25, Y+3	; 0x03
    547a:	fc 01       	movw	r30, r24
    547c:	84 85       	ldd	r24, Z+12	; 0x0c
    547e:	95 85       	ldd	r25, Z+13	; 0x0d
    5480:	9e 83       	std	Y+6, r25	; 0x06
    5482:	8d 83       	std	Y+5, r24	; 0x05
    5484:	8a 81       	ldd	r24, Y+2	; 0x02
    5486:	9b 81       	ldd	r25, Y+3	; 0x03
    5488:	fc 01       	movw	r30, r24
    548a:	86 81       	ldd	r24, Z+6	; 0x06
    548c:	97 81       	ldd	r25, Z+7	; 0x07
    548e:	2a 81       	ldd	r18, Y+2	; 0x02
    5490:	3b 81       	ldd	r19, Y+3	; 0x03
    5492:	f9 01       	movw	r30, r18
    5494:	20 85       	ldd	r18, Z+8	; 0x08
    5496:	31 85       	ldd	r19, Z+9	; 0x09
    5498:	fc 01       	movw	r30, r24
    549a:	37 83       	std	Z+7, r19	; 0x07
    549c:	26 83       	std	Z+6, r18	; 0x06
    549e:	8a 81       	ldd	r24, Y+2	; 0x02
    54a0:	9b 81       	ldd	r25, Y+3	; 0x03
    54a2:	fc 01       	movw	r30, r24
    54a4:	80 85       	ldd	r24, Z+8	; 0x08
    54a6:	91 85       	ldd	r25, Z+9	; 0x09
    54a8:	2a 81       	ldd	r18, Y+2	; 0x02
    54aa:	3b 81       	ldd	r19, Y+3	; 0x03
    54ac:	f9 01       	movw	r30, r18
    54ae:	26 81       	ldd	r18, Z+6	; 0x06
    54b0:	37 81       	ldd	r19, Z+7	; 0x07
    54b2:	fc 01       	movw	r30, r24
    54b4:	35 83       	std	Z+5, r19	; 0x05
    54b6:	24 83       	std	Z+4, r18	; 0x04
    54b8:	8d 81       	ldd	r24, Y+5	; 0x05
    54ba:	9e 81       	ldd	r25, Y+6	; 0x06
    54bc:	fc 01       	movw	r30, r24
    54be:	21 81       	ldd	r18, Z+1	; 0x01
    54c0:	32 81       	ldd	r19, Z+2	; 0x02
    54c2:	8a 81       	ldd	r24, Y+2	; 0x02
    54c4:	9b 81       	ldd	r25, Y+3	; 0x03
    54c6:	02 96       	adiw	r24, 0x02	; 2
    54c8:	28 17       	cp	r18, r24
    54ca:	39 07       	cpc	r19, r25
    54cc:	51 f4       	brne	.+20     	; 0x54e2 <xTaskGenericNotify+0x258>
    54ce:	8a 81       	ldd	r24, Y+2	; 0x02
    54d0:	9b 81       	ldd	r25, Y+3	; 0x03
    54d2:	fc 01       	movw	r30, r24
    54d4:	20 85       	ldd	r18, Z+8	; 0x08
    54d6:	31 85       	ldd	r19, Z+9	; 0x09
    54d8:	8d 81       	ldd	r24, Y+5	; 0x05
    54da:	9e 81       	ldd	r25, Y+6	; 0x06
    54dc:	fc 01       	movw	r30, r24
    54de:	32 83       	std	Z+2, r19	; 0x02
    54e0:	21 83       	std	Z+1, r18	; 0x01
    54e2:	8a 81       	ldd	r24, Y+2	; 0x02
    54e4:	9b 81       	ldd	r25, Y+3	; 0x03
    54e6:	fc 01       	movw	r30, r24
    54e8:	15 86       	std	Z+13, r1	; 0x0d
    54ea:	14 86       	std	Z+12, r1	; 0x0c
    54ec:	8d 81       	ldd	r24, Y+5	; 0x05
    54ee:	9e 81       	ldd	r25, Y+6	; 0x06
    54f0:	fc 01       	movw	r30, r24
    54f2:	80 81       	ld	r24, Z
    54f4:	2f ef       	ldi	r18, 0xFF	; 255
    54f6:	28 0f       	add	r18, r24
    54f8:	8d 81       	ldd	r24, Y+5	; 0x05
    54fa:	9e 81       	ldd	r25, Y+6	; 0x06
    54fc:	fc 01       	movw	r30, r24
    54fe:	20 83       	st	Z, r18
    5500:	8a 81       	ldd	r24, Y+2	; 0x02
    5502:	9b 81       	ldd	r25, Y+3	; 0x03
    5504:	fc 01       	movw	r30, r24
    5506:	92 8d       	ldd	r25, Z+26	; 0x1a
    5508:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    550c:	89 17       	cp	r24, r25
    550e:	30 f4       	brcc	.+12     	; 0x551c <xTaskGenericNotify+0x292>
    5510:	8a 81       	ldd	r24, Y+2	; 0x02
    5512:	9b 81       	ldd	r25, Y+3	; 0x03
    5514:	fc 01       	movw	r30, r24
    5516:	82 8d       	ldd	r24, Z+26	; 0x1a
    5518:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    551c:	8a 81       	ldd	r24, Y+2	; 0x02
    551e:	9b 81       	ldd	r25, Y+3	; 0x03
    5520:	fc 01       	movw	r30, r24
    5522:	82 8d       	ldd	r24, Z+26	; 0x1a
    5524:	28 2f       	mov	r18, r24
    5526:	30 e0       	ldi	r19, 0x00	; 0
    5528:	4b e0       	ldi	r20, 0x0B	; 11
    552a:	42 9f       	mul	r20, r18
    552c:	c0 01       	movw	r24, r0
    552e:	43 9f       	mul	r20, r19
    5530:	90 0d       	add	r25, r0
    5532:	11 24       	eor	r1, r1
    5534:	8b 50       	subi	r24, 0x0B	; 11
    5536:	9e 4e       	sbci	r25, 0xEE	; 238
    5538:	fc 01       	movw	r30, r24
    553a:	80 81       	ld	r24, Z
    553c:	91 81       	ldd	r25, Z+1	; 0x01
    553e:	98 87       	std	Y+8, r25	; 0x08
    5540:	8f 83       	std	Y+7, r24	; 0x07
    5542:	8a 81       	ldd	r24, Y+2	; 0x02
    5544:	9b 81       	ldd	r25, Y+3	; 0x03
    5546:	2f 81       	ldd	r18, Y+7	; 0x07
    5548:	38 85       	ldd	r19, Y+8	; 0x08
    554a:	fc 01       	movw	r30, r24
    554c:	37 83       	std	Z+7, r19	; 0x07
    554e:	26 83       	std	Z+6, r18	; 0x06
    5550:	8f 81       	ldd	r24, Y+7	; 0x07
    5552:	98 85       	ldd	r25, Y+8	; 0x08
    5554:	fc 01       	movw	r30, r24
    5556:	26 81       	ldd	r18, Z+6	; 0x06
    5558:	37 81       	ldd	r19, Z+7	; 0x07
    555a:	8a 81       	ldd	r24, Y+2	; 0x02
    555c:	9b 81       	ldd	r25, Y+3	; 0x03
    555e:	fc 01       	movw	r30, r24
    5560:	31 87       	std	Z+9, r19	; 0x09
    5562:	20 87       	std	Z+8, r18	; 0x08
    5564:	8f 81       	ldd	r24, Y+7	; 0x07
    5566:	98 85       	ldd	r25, Y+8	; 0x08
    5568:	fc 01       	movw	r30, r24
    556a:	86 81       	ldd	r24, Z+6	; 0x06
    556c:	97 81       	ldd	r25, Z+7	; 0x07
    556e:	2a 81       	ldd	r18, Y+2	; 0x02
    5570:	3b 81       	ldd	r19, Y+3	; 0x03
    5572:	2e 5f       	subi	r18, 0xFE	; 254
    5574:	3f 4f       	sbci	r19, 0xFF	; 255
    5576:	fc 01       	movw	r30, r24
    5578:	35 83       	std	Z+5, r19	; 0x05
    557a:	24 83       	std	Z+4, r18	; 0x04
    557c:	8a 81       	ldd	r24, Y+2	; 0x02
    557e:	9b 81       	ldd	r25, Y+3	; 0x03
    5580:	9c 01       	movw	r18, r24
    5582:	2e 5f       	subi	r18, 0xFE	; 254
    5584:	3f 4f       	sbci	r19, 0xFF	; 255
    5586:	8f 81       	ldd	r24, Y+7	; 0x07
    5588:	98 85       	ldd	r25, Y+8	; 0x08
    558a:	fc 01       	movw	r30, r24
    558c:	37 83       	std	Z+7, r19	; 0x07
    558e:	26 83       	std	Z+6, r18	; 0x06
    5590:	8a 81       	ldd	r24, Y+2	; 0x02
    5592:	9b 81       	ldd	r25, Y+3	; 0x03
    5594:	fc 01       	movw	r30, r24
    5596:	82 8d       	ldd	r24, Z+26	; 0x1a
    5598:	28 2f       	mov	r18, r24
    559a:	30 e0       	ldi	r19, 0x00	; 0
    559c:	4b e0       	ldi	r20, 0x0B	; 11
    559e:	42 9f       	mul	r20, r18
    55a0:	c0 01       	movw	r24, r0
    55a2:	43 9f       	mul	r20, r19
    55a4:	90 0d       	add	r25, r0
    55a6:	11 24       	eor	r1, r1
    55a8:	9c 01       	movw	r18, r24
    55aa:	2c 50       	subi	r18, 0x0C	; 12
    55ac:	3e 4e       	sbci	r19, 0xEE	; 238
    55ae:	8a 81       	ldd	r24, Y+2	; 0x02
    55b0:	9b 81       	ldd	r25, Y+3	; 0x03
    55b2:	fc 01       	movw	r30, r24
    55b4:	35 87       	std	Z+13, r19	; 0x0d
    55b6:	24 87       	std	Z+12, r18	; 0x0c
    55b8:	8a 81       	ldd	r24, Y+2	; 0x02
    55ba:	9b 81       	ldd	r25, Y+3	; 0x03
    55bc:	fc 01       	movw	r30, r24
    55be:	82 8d       	ldd	r24, Z+26	; 0x1a
    55c0:	88 2f       	mov	r24, r24
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	4b e0       	ldi	r20, 0x0B	; 11
    55c6:	48 9f       	mul	r20, r24
    55c8:	90 01       	movw	r18, r0
    55ca:	49 9f       	mul	r20, r25
    55cc:	30 0d       	add	r19, r0
    55ce:	11 24       	eor	r1, r1
    55d0:	2c 50       	subi	r18, 0x0C	; 12
    55d2:	3e 4e       	sbci	r19, 0xEE	; 238
    55d4:	f9 01       	movw	r30, r18
    55d6:	20 81       	ld	r18, Z
    55d8:	41 e0       	ldi	r20, 0x01	; 1
    55da:	42 0f       	add	r20, r18
    55dc:	5b e0       	ldi	r21, 0x0B	; 11
    55de:	58 9f       	mul	r21, r24
    55e0:	90 01       	movw	r18, r0
    55e2:	59 9f       	mul	r21, r25
    55e4:	30 0d       	add	r19, r0
    55e6:	11 24       	eor	r1, r1
    55e8:	c9 01       	movw	r24, r18
    55ea:	8c 50       	subi	r24, 0x0C	; 12
    55ec:	9e 4e       	sbci	r25, 0xEE	; 238
    55ee:	fc 01       	movw	r30, r24
    55f0:	40 83       	st	Z, r20
    55f2:	8a 81       	ldd	r24, Y+2	; 0x02
    55f4:	9b 81       	ldd	r25, Y+3	; 0x03
    55f6:	fc 01       	movw	r30, r24
    55f8:	22 8d       	ldd	r18, Z+26	; 0x1a
    55fa:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    55fe:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5602:	fc 01       	movw	r30, r24
    5604:	82 8d       	ldd	r24, Z+26	; 0x1a
    5606:	82 17       	cp	r24, r18
    5608:	10 f4       	brcc	.+4      	; 0x560e <xTaskGenericNotify+0x384>
    560a:	0e 94 3e 0b 	call	0x167c	; 0x167c <vPortYield>
    560e:	0f 90       	pop	r0
    5610:	0f be       	out	0x3f, r0	; 63
    5612:	89 81       	ldd	r24, Y+1	; 0x01
    5614:	62 96       	adiw	r28, 0x12	; 18
    5616:	0f b6       	in	r0, 0x3f	; 63
    5618:	f8 94       	cli
    561a:	de bf       	out	0x3e, r29	; 62
    561c:	0f be       	out	0x3f, r0	; 63
    561e:	cd bf       	out	0x3d, r28	; 61
    5620:	df 91       	pop	r29
    5622:	cf 91       	pop	r28
    5624:	0f 91       	pop	r16
    5626:	ff 90       	pop	r15
    5628:	ef 90       	pop	r14
    562a:	08 95       	ret

0000562c <xTaskGenericNotifyFromISR>:
    562c:	cf 92       	push	r12
    562e:	df 92       	push	r13
    5630:	ef 92       	push	r14
    5632:	ff 92       	push	r15
    5634:	0f 93       	push	r16
    5636:	cf 93       	push	r28
    5638:	df 93       	push	r29
    563a:	cd b7       	in	r28, 0x3d	; 61
    563c:	de b7       	in	r29, 0x3e	; 62
    563e:	67 97       	sbiw	r28, 0x17	; 23
    5640:	0f b6       	in	r0, 0x3f	; 63
    5642:	f8 94       	cli
    5644:	de bf       	out	0x3e, r29	; 62
    5646:	0f be       	out	0x3f, r0	; 63
    5648:	cd bf       	out	0x3d, r28	; 61
    564a:	9d 87       	std	Y+13, r25	; 0x0d
    564c:	8c 87       	std	Y+12, r24	; 0x0c
    564e:	6e 87       	std	Y+14, r22	; 0x0e
    5650:	2f 87       	std	Y+15, r18	; 0x0f
    5652:	38 8b       	std	Y+16, r19	; 0x10
    5654:	49 8b       	std	Y+17, r20	; 0x11
    5656:	5a 8b       	std	Y+18, r21	; 0x12
    5658:	0b 8b       	std	Y+19, r16	; 0x13
    565a:	fd 8a       	std	Y+21, r15	; 0x15
    565c:	ec 8a       	std	Y+20, r14	; 0x14
    565e:	df 8a       	std	Y+23, r13	; 0x17
    5660:	ce 8a       	std	Y+22, r12	; 0x16
    5662:	81 e0       	ldi	r24, 0x01	; 1
    5664:	89 83       	std	Y+1, r24	; 0x01
    5666:	8c 85       	ldd	r24, Y+12	; 0x0c
    5668:	9d 85       	ldd	r25, Y+13	; 0x0d
    566a:	9b 83       	std	Y+3, r25	; 0x03
    566c:	8a 83       	std	Y+2, r24	; 0x02
    566e:	1c 82       	std	Y+4, r1	; 0x04
    5670:	8c 89       	ldd	r24, Y+20	; 0x14
    5672:	9d 89       	ldd	r25, Y+21	; 0x15
    5674:	89 2b       	or	r24, r25
    5676:	c1 f0       	breq	.+48     	; 0x56a8 <xTaskGenericNotifyFromISR+0x7c>
    5678:	8e 85       	ldd	r24, Y+14	; 0x0e
    567a:	88 2f       	mov	r24, r24
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	2a 81       	ldd	r18, Y+2	; 0x02
    5680:	3b 81       	ldd	r19, Y+3	; 0x03
    5682:	88 0f       	add	r24, r24
    5684:	99 1f       	adc	r25, r25
    5686:	88 0f       	add	r24, r24
    5688:	99 1f       	adc	r25, r25
    568a:	82 0f       	add	r24, r18
    568c:	93 1f       	adc	r25, r19
    568e:	8f 96       	adiw	r24, 0x2f	; 47
    5690:	fc 01       	movw	r30, r24
    5692:	80 81       	ld	r24, Z
    5694:	91 81       	ldd	r25, Z+1	; 0x01
    5696:	a2 81       	ldd	r26, Z+2	; 0x02
    5698:	b3 81       	ldd	r27, Z+3	; 0x03
    569a:	2c 89       	ldd	r18, Y+20	; 0x14
    569c:	3d 89       	ldd	r19, Y+21	; 0x15
    569e:	f9 01       	movw	r30, r18
    56a0:	80 83       	st	Z, r24
    56a2:	91 83       	std	Z+1, r25	; 0x01
    56a4:	a2 83       	std	Z+2, r26	; 0x02
    56a6:	b3 83       	std	Z+3, r27	; 0x03
    56a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    56aa:	88 2f       	mov	r24, r24
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	2a 81       	ldd	r18, Y+2	; 0x02
    56b0:	3b 81       	ldd	r19, Y+3	; 0x03
    56b2:	82 0f       	add	r24, r18
    56b4:	93 1f       	adc	r25, r19
    56b6:	c3 96       	adiw	r24, 0x33	; 51
    56b8:	fc 01       	movw	r30, r24
    56ba:	80 81       	ld	r24, Z
    56bc:	8d 83       	std	Y+5, r24	; 0x05
    56be:	8e 85       	ldd	r24, Y+14	; 0x0e
    56c0:	88 2f       	mov	r24, r24
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	2a 81       	ldd	r18, Y+2	; 0x02
    56c6:	3b 81       	ldd	r19, Y+3	; 0x03
    56c8:	82 0f       	add	r24, r18
    56ca:	93 1f       	adc	r25, r19
    56cc:	c3 96       	adiw	r24, 0x33	; 51
    56ce:	22 e0       	ldi	r18, 0x02	; 2
    56d0:	fc 01       	movw	r30, r24
    56d2:	20 83       	st	Z, r18
    56d4:	8b 89       	ldd	r24, Y+19	; 0x13
    56d6:	88 2f       	mov	r24, r24
    56d8:	90 e0       	ldi	r25, 0x00	; 0
    56da:	82 30       	cpi	r24, 0x02	; 2
    56dc:	91 05       	cpc	r25, r1
    56de:	09 f4       	brne	.+2      	; 0x56e2 <xTaskGenericNotifyFromISR+0xb6>
    56e0:	3e c0       	rjmp	.+124    	; 0x575e <xTaskGenericNotifyFromISR+0x132>
    56e2:	83 30       	cpi	r24, 0x03	; 3
    56e4:	91 05       	cpc	r25, r1
    56e6:	34 f4       	brge	.+12     	; 0x56f4 <xTaskGenericNotifyFromISR+0xc8>
    56e8:	00 97       	sbiw	r24, 0x00	; 0
    56ea:	09 f4       	brne	.+2      	; 0x56ee <xTaskGenericNotifyFromISR+0xc2>
    56ec:	92 c0       	rjmp	.+292    	; 0x5812 <xTaskGenericNotifyFromISR+0x1e6>
    56ee:	01 97       	sbiw	r24, 0x01	; 1
    56f0:	49 f0       	breq	.+18     	; 0x5704 <xTaskGenericNotifyFromISR+0xd8>
    56f2:	90 c0       	rjmp	.+288    	; 0x5814 <xTaskGenericNotifyFromISR+0x1e8>
    56f4:	83 30       	cpi	r24, 0x03	; 3
    56f6:	91 05       	cpc	r25, r1
    56f8:	09 f4       	brne	.+2      	; 0x56fc <xTaskGenericNotifyFromISR+0xd0>
    56fa:	56 c0       	rjmp	.+172    	; 0x57a8 <xTaskGenericNotifyFromISR+0x17c>
    56fc:	04 97       	sbiw	r24, 0x04	; 4
    56fe:	09 f4       	brne	.+2      	; 0x5702 <xTaskGenericNotifyFromISR+0xd6>
    5700:	6b c0       	rjmp	.+214    	; 0x57d8 <xTaskGenericNotifyFromISR+0x1ac>
    5702:	88 c0       	rjmp	.+272    	; 0x5814 <xTaskGenericNotifyFromISR+0x1e8>
    5704:	8e 85       	ldd	r24, Y+14	; 0x0e
    5706:	68 2f       	mov	r22, r24
    5708:	70 e0       	ldi	r23, 0x00	; 0
    570a:	8e 85       	ldd	r24, Y+14	; 0x0e
    570c:	88 2f       	mov	r24, r24
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	2a 81       	ldd	r18, Y+2	; 0x02
    5712:	3b 81       	ldd	r19, Y+3	; 0x03
    5714:	88 0f       	add	r24, r24
    5716:	99 1f       	adc	r25, r25
    5718:	88 0f       	add	r24, r24
    571a:	99 1f       	adc	r25, r25
    571c:	82 0f       	add	r24, r18
    571e:	93 1f       	adc	r25, r19
    5720:	8f 96       	adiw	r24, 0x2f	; 47
    5722:	fc 01       	movw	r30, r24
    5724:	20 81       	ld	r18, Z
    5726:	31 81       	ldd	r19, Z+1	; 0x01
    5728:	42 81       	ldd	r20, Z+2	; 0x02
    572a:	53 81       	ldd	r21, Z+3	; 0x03
    572c:	8f 85       	ldd	r24, Y+15	; 0x0f
    572e:	98 89       	ldd	r25, Y+16	; 0x10
    5730:	a9 89       	ldd	r26, Y+17	; 0x11
    5732:	ba 89       	ldd	r27, Y+18	; 0x12
    5734:	82 2b       	or	r24, r18
    5736:	93 2b       	or	r25, r19
    5738:	a4 2b       	or	r26, r20
    573a:	b5 2b       	or	r27, r21
    573c:	4a 81       	ldd	r20, Y+2	; 0x02
    573e:	5b 81       	ldd	r21, Y+3	; 0x03
    5740:	9b 01       	movw	r18, r22
    5742:	22 0f       	add	r18, r18
    5744:	33 1f       	adc	r19, r19
    5746:	22 0f       	add	r18, r18
    5748:	33 1f       	adc	r19, r19
    574a:	24 0f       	add	r18, r20
    574c:	35 1f       	adc	r19, r21
    574e:	21 5d       	subi	r18, 0xD1	; 209
    5750:	3f 4f       	sbci	r19, 0xFF	; 255
    5752:	f9 01       	movw	r30, r18
    5754:	80 83       	st	Z, r24
    5756:	91 83       	std	Z+1, r25	; 0x01
    5758:	a2 83       	std	Z+2, r26	; 0x02
    575a:	b3 83       	std	Z+3, r27	; 0x03
    575c:	5b c0       	rjmp	.+182    	; 0x5814 <xTaskGenericNotifyFromISR+0x1e8>
    575e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5760:	28 2f       	mov	r18, r24
    5762:	30 e0       	ldi	r19, 0x00	; 0
    5764:	4a 81       	ldd	r20, Y+2	; 0x02
    5766:	5b 81       	ldd	r21, Y+3	; 0x03
    5768:	c9 01       	movw	r24, r18
    576a:	88 0f       	add	r24, r24
    576c:	99 1f       	adc	r25, r25
    576e:	88 0f       	add	r24, r24
    5770:	99 1f       	adc	r25, r25
    5772:	84 0f       	add	r24, r20
    5774:	95 1f       	adc	r25, r21
    5776:	8f 96       	adiw	r24, 0x2f	; 47
    5778:	fc 01       	movw	r30, r24
    577a:	80 81       	ld	r24, Z
    577c:	91 81       	ldd	r25, Z+1	; 0x01
    577e:	a2 81       	ldd	r26, Z+2	; 0x02
    5780:	b3 81       	ldd	r27, Z+3	; 0x03
    5782:	01 96       	adiw	r24, 0x01	; 1
    5784:	a1 1d       	adc	r26, r1
    5786:	b1 1d       	adc	r27, r1
    5788:	4a 81       	ldd	r20, Y+2	; 0x02
    578a:	5b 81       	ldd	r21, Y+3	; 0x03
    578c:	22 0f       	add	r18, r18
    578e:	33 1f       	adc	r19, r19
    5790:	22 0f       	add	r18, r18
    5792:	33 1f       	adc	r19, r19
    5794:	24 0f       	add	r18, r20
    5796:	35 1f       	adc	r19, r21
    5798:	21 5d       	subi	r18, 0xD1	; 209
    579a:	3f 4f       	sbci	r19, 0xFF	; 255
    579c:	f9 01       	movw	r30, r18
    579e:	80 83       	st	Z, r24
    57a0:	91 83       	std	Z+1, r25	; 0x01
    57a2:	a2 83       	std	Z+2, r26	; 0x02
    57a4:	b3 83       	std	Z+3, r27	; 0x03
    57a6:	36 c0       	rjmp	.+108    	; 0x5814 <xTaskGenericNotifyFromISR+0x1e8>
    57a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    57aa:	88 2f       	mov	r24, r24
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	2a 81       	ldd	r18, Y+2	; 0x02
    57b0:	3b 81       	ldd	r19, Y+3	; 0x03
    57b2:	88 0f       	add	r24, r24
    57b4:	99 1f       	adc	r25, r25
    57b6:	88 0f       	add	r24, r24
    57b8:	99 1f       	adc	r25, r25
    57ba:	82 0f       	add	r24, r18
    57bc:	93 1f       	adc	r25, r19
    57be:	9c 01       	movw	r18, r24
    57c0:	21 5d       	subi	r18, 0xD1	; 209
    57c2:	3f 4f       	sbci	r19, 0xFF	; 255
    57c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    57c6:	98 89       	ldd	r25, Y+16	; 0x10
    57c8:	a9 89       	ldd	r26, Y+17	; 0x11
    57ca:	ba 89       	ldd	r27, Y+18	; 0x12
    57cc:	f9 01       	movw	r30, r18
    57ce:	80 83       	st	Z, r24
    57d0:	91 83       	std	Z+1, r25	; 0x01
    57d2:	a2 83       	std	Z+2, r26	; 0x02
    57d4:	b3 83       	std	Z+3, r27	; 0x03
    57d6:	1e c0       	rjmp	.+60     	; 0x5814 <xTaskGenericNotifyFromISR+0x1e8>
    57d8:	8d 81       	ldd	r24, Y+5	; 0x05
    57da:	82 30       	cpi	r24, 0x02	; 2
    57dc:	c1 f0       	breq	.+48     	; 0x580e <xTaskGenericNotifyFromISR+0x1e2>
    57de:	8e 85       	ldd	r24, Y+14	; 0x0e
    57e0:	88 2f       	mov	r24, r24
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	2a 81       	ldd	r18, Y+2	; 0x02
    57e6:	3b 81       	ldd	r19, Y+3	; 0x03
    57e8:	88 0f       	add	r24, r24
    57ea:	99 1f       	adc	r25, r25
    57ec:	88 0f       	add	r24, r24
    57ee:	99 1f       	adc	r25, r25
    57f0:	82 0f       	add	r24, r18
    57f2:	93 1f       	adc	r25, r19
    57f4:	9c 01       	movw	r18, r24
    57f6:	21 5d       	subi	r18, 0xD1	; 209
    57f8:	3f 4f       	sbci	r19, 0xFF	; 255
    57fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    57fc:	98 89       	ldd	r25, Y+16	; 0x10
    57fe:	a9 89       	ldd	r26, Y+17	; 0x11
    5800:	ba 89       	ldd	r27, Y+18	; 0x12
    5802:	f9 01       	movw	r30, r18
    5804:	80 83       	st	Z, r24
    5806:	91 83       	std	Z+1, r25	; 0x01
    5808:	a2 83       	std	Z+2, r26	; 0x02
    580a:	b3 83       	std	Z+3, r27	; 0x03
    580c:	03 c0       	rjmp	.+6      	; 0x5814 <xTaskGenericNotifyFromISR+0x1e8>
    580e:	19 82       	std	Y+1, r1	; 0x01
    5810:	01 c0       	rjmp	.+2      	; 0x5814 <xTaskGenericNotifyFromISR+0x1e8>
    5812:	00 00       	nop
    5814:	8d 81       	ldd	r24, Y+5	; 0x05
    5816:	81 30       	cpi	r24, 0x01	; 1
    5818:	09 f0       	breq	.+2      	; 0x581c <xTaskGenericNotifyFromISR+0x1f0>
    581a:	15 c1       	rjmp	.+554    	; 0x5a46 <xTaskGenericNotifyFromISR+0x41a>
    581c:	80 91 b2 12 	lds	r24, 0x12B2	; 0x8012b2 <uxSchedulerSuspended>
    5820:	88 23       	and	r24, r24
    5822:	09 f0       	breq	.+2      	; 0x5826 <xTaskGenericNotifyFromISR+0x1fa>
    5824:	bf c0       	rjmp	.+382    	; 0x59a4 <xTaskGenericNotifyFromISR+0x378>
    5826:	8a 81       	ldd	r24, Y+2	; 0x02
    5828:	9b 81       	ldd	r25, Y+3	; 0x03
    582a:	fc 01       	movw	r30, r24
    582c:	84 85       	ldd	r24, Z+12	; 0x0c
    582e:	95 85       	ldd	r25, Z+13	; 0x0d
    5830:	9f 83       	std	Y+7, r25	; 0x07
    5832:	8e 83       	std	Y+6, r24	; 0x06
    5834:	8a 81       	ldd	r24, Y+2	; 0x02
    5836:	9b 81       	ldd	r25, Y+3	; 0x03
    5838:	fc 01       	movw	r30, r24
    583a:	86 81       	ldd	r24, Z+6	; 0x06
    583c:	97 81       	ldd	r25, Z+7	; 0x07
    583e:	2a 81       	ldd	r18, Y+2	; 0x02
    5840:	3b 81       	ldd	r19, Y+3	; 0x03
    5842:	f9 01       	movw	r30, r18
    5844:	20 85       	ldd	r18, Z+8	; 0x08
    5846:	31 85       	ldd	r19, Z+9	; 0x09
    5848:	fc 01       	movw	r30, r24
    584a:	37 83       	std	Z+7, r19	; 0x07
    584c:	26 83       	std	Z+6, r18	; 0x06
    584e:	8a 81       	ldd	r24, Y+2	; 0x02
    5850:	9b 81       	ldd	r25, Y+3	; 0x03
    5852:	fc 01       	movw	r30, r24
    5854:	80 85       	ldd	r24, Z+8	; 0x08
    5856:	91 85       	ldd	r25, Z+9	; 0x09
    5858:	2a 81       	ldd	r18, Y+2	; 0x02
    585a:	3b 81       	ldd	r19, Y+3	; 0x03
    585c:	f9 01       	movw	r30, r18
    585e:	26 81       	ldd	r18, Z+6	; 0x06
    5860:	37 81       	ldd	r19, Z+7	; 0x07
    5862:	fc 01       	movw	r30, r24
    5864:	35 83       	std	Z+5, r19	; 0x05
    5866:	24 83       	std	Z+4, r18	; 0x04
    5868:	8e 81       	ldd	r24, Y+6	; 0x06
    586a:	9f 81       	ldd	r25, Y+7	; 0x07
    586c:	fc 01       	movw	r30, r24
    586e:	21 81       	ldd	r18, Z+1	; 0x01
    5870:	32 81       	ldd	r19, Z+2	; 0x02
    5872:	8a 81       	ldd	r24, Y+2	; 0x02
    5874:	9b 81       	ldd	r25, Y+3	; 0x03
    5876:	02 96       	adiw	r24, 0x02	; 2
    5878:	28 17       	cp	r18, r24
    587a:	39 07       	cpc	r19, r25
    587c:	51 f4       	brne	.+20     	; 0x5892 <xTaskGenericNotifyFromISR+0x266>
    587e:	8a 81       	ldd	r24, Y+2	; 0x02
    5880:	9b 81       	ldd	r25, Y+3	; 0x03
    5882:	fc 01       	movw	r30, r24
    5884:	20 85       	ldd	r18, Z+8	; 0x08
    5886:	31 85       	ldd	r19, Z+9	; 0x09
    5888:	8e 81       	ldd	r24, Y+6	; 0x06
    588a:	9f 81       	ldd	r25, Y+7	; 0x07
    588c:	fc 01       	movw	r30, r24
    588e:	32 83       	std	Z+2, r19	; 0x02
    5890:	21 83       	std	Z+1, r18	; 0x01
    5892:	8a 81       	ldd	r24, Y+2	; 0x02
    5894:	9b 81       	ldd	r25, Y+3	; 0x03
    5896:	fc 01       	movw	r30, r24
    5898:	15 86       	std	Z+13, r1	; 0x0d
    589a:	14 86       	std	Z+12, r1	; 0x0c
    589c:	8e 81       	ldd	r24, Y+6	; 0x06
    589e:	9f 81       	ldd	r25, Y+7	; 0x07
    58a0:	fc 01       	movw	r30, r24
    58a2:	80 81       	ld	r24, Z
    58a4:	2f ef       	ldi	r18, 0xFF	; 255
    58a6:	28 0f       	add	r18, r24
    58a8:	8e 81       	ldd	r24, Y+6	; 0x06
    58aa:	9f 81       	ldd	r25, Y+7	; 0x07
    58ac:	fc 01       	movw	r30, r24
    58ae:	20 83       	st	Z, r18
    58b0:	8a 81       	ldd	r24, Y+2	; 0x02
    58b2:	9b 81       	ldd	r25, Y+3	; 0x03
    58b4:	fc 01       	movw	r30, r24
    58b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    58b8:	80 91 a3 12 	lds	r24, 0x12A3	; 0x8012a3 <uxTopReadyPriority>
    58bc:	89 17       	cp	r24, r25
    58be:	30 f4       	brcc	.+12     	; 0x58cc <xTaskGenericNotifyFromISR+0x2a0>
    58c0:	8a 81       	ldd	r24, Y+2	; 0x02
    58c2:	9b 81       	ldd	r25, Y+3	; 0x03
    58c4:	fc 01       	movw	r30, r24
    58c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    58c8:	80 93 a3 12 	sts	0x12A3, r24	; 0x8012a3 <uxTopReadyPriority>
    58cc:	8a 81       	ldd	r24, Y+2	; 0x02
    58ce:	9b 81       	ldd	r25, Y+3	; 0x03
    58d0:	fc 01       	movw	r30, r24
    58d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    58d4:	28 2f       	mov	r18, r24
    58d6:	30 e0       	ldi	r19, 0x00	; 0
    58d8:	4b e0       	ldi	r20, 0x0B	; 11
    58da:	42 9f       	mul	r20, r18
    58dc:	c0 01       	movw	r24, r0
    58de:	43 9f       	mul	r20, r19
    58e0:	90 0d       	add	r25, r0
    58e2:	11 24       	eor	r1, r1
    58e4:	8b 50       	subi	r24, 0x0B	; 11
    58e6:	9e 4e       	sbci	r25, 0xEE	; 238
    58e8:	fc 01       	movw	r30, r24
    58ea:	80 81       	ld	r24, Z
    58ec:	91 81       	ldd	r25, Z+1	; 0x01
    58ee:	99 87       	std	Y+9, r25	; 0x09
    58f0:	88 87       	std	Y+8, r24	; 0x08
    58f2:	8a 81       	ldd	r24, Y+2	; 0x02
    58f4:	9b 81       	ldd	r25, Y+3	; 0x03
    58f6:	28 85       	ldd	r18, Y+8	; 0x08
    58f8:	39 85       	ldd	r19, Y+9	; 0x09
    58fa:	fc 01       	movw	r30, r24
    58fc:	37 83       	std	Z+7, r19	; 0x07
    58fe:	26 83       	std	Z+6, r18	; 0x06
    5900:	88 85       	ldd	r24, Y+8	; 0x08
    5902:	99 85       	ldd	r25, Y+9	; 0x09
    5904:	fc 01       	movw	r30, r24
    5906:	26 81       	ldd	r18, Z+6	; 0x06
    5908:	37 81       	ldd	r19, Z+7	; 0x07
    590a:	8a 81       	ldd	r24, Y+2	; 0x02
    590c:	9b 81       	ldd	r25, Y+3	; 0x03
    590e:	fc 01       	movw	r30, r24
    5910:	31 87       	std	Z+9, r19	; 0x09
    5912:	20 87       	std	Z+8, r18	; 0x08
    5914:	88 85       	ldd	r24, Y+8	; 0x08
    5916:	99 85       	ldd	r25, Y+9	; 0x09
    5918:	fc 01       	movw	r30, r24
    591a:	86 81       	ldd	r24, Z+6	; 0x06
    591c:	97 81       	ldd	r25, Z+7	; 0x07
    591e:	2a 81       	ldd	r18, Y+2	; 0x02
    5920:	3b 81       	ldd	r19, Y+3	; 0x03
    5922:	2e 5f       	subi	r18, 0xFE	; 254
    5924:	3f 4f       	sbci	r19, 0xFF	; 255
    5926:	fc 01       	movw	r30, r24
    5928:	35 83       	std	Z+5, r19	; 0x05
    592a:	24 83       	std	Z+4, r18	; 0x04
    592c:	8a 81       	ldd	r24, Y+2	; 0x02
    592e:	9b 81       	ldd	r25, Y+3	; 0x03
    5930:	9c 01       	movw	r18, r24
    5932:	2e 5f       	subi	r18, 0xFE	; 254
    5934:	3f 4f       	sbci	r19, 0xFF	; 255
    5936:	88 85       	ldd	r24, Y+8	; 0x08
    5938:	99 85       	ldd	r25, Y+9	; 0x09
    593a:	fc 01       	movw	r30, r24
    593c:	37 83       	std	Z+7, r19	; 0x07
    593e:	26 83       	std	Z+6, r18	; 0x06
    5940:	8a 81       	ldd	r24, Y+2	; 0x02
    5942:	9b 81       	ldd	r25, Y+3	; 0x03
    5944:	fc 01       	movw	r30, r24
    5946:	82 8d       	ldd	r24, Z+26	; 0x1a
    5948:	28 2f       	mov	r18, r24
    594a:	30 e0       	ldi	r19, 0x00	; 0
    594c:	4b e0       	ldi	r20, 0x0B	; 11
    594e:	42 9f       	mul	r20, r18
    5950:	c0 01       	movw	r24, r0
    5952:	43 9f       	mul	r20, r19
    5954:	90 0d       	add	r25, r0
    5956:	11 24       	eor	r1, r1
    5958:	9c 01       	movw	r18, r24
    595a:	2c 50       	subi	r18, 0x0C	; 12
    595c:	3e 4e       	sbci	r19, 0xEE	; 238
    595e:	8a 81       	ldd	r24, Y+2	; 0x02
    5960:	9b 81       	ldd	r25, Y+3	; 0x03
    5962:	fc 01       	movw	r30, r24
    5964:	35 87       	std	Z+13, r19	; 0x0d
    5966:	24 87       	std	Z+12, r18	; 0x0c
    5968:	8a 81       	ldd	r24, Y+2	; 0x02
    596a:	9b 81       	ldd	r25, Y+3	; 0x03
    596c:	fc 01       	movw	r30, r24
    596e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5970:	88 2f       	mov	r24, r24
    5972:	90 e0       	ldi	r25, 0x00	; 0
    5974:	4b e0       	ldi	r20, 0x0B	; 11
    5976:	48 9f       	mul	r20, r24
    5978:	90 01       	movw	r18, r0
    597a:	49 9f       	mul	r20, r25
    597c:	30 0d       	add	r19, r0
    597e:	11 24       	eor	r1, r1
    5980:	2c 50       	subi	r18, 0x0C	; 12
    5982:	3e 4e       	sbci	r19, 0xEE	; 238
    5984:	f9 01       	movw	r30, r18
    5986:	20 81       	ld	r18, Z
    5988:	41 e0       	ldi	r20, 0x01	; 1
    598a:	42 0f       	add	r20, r18
    598c:	5b e0       	ldi	r21, 0x0B	; 11
    598e:	58 9f       	mul	r21, r24
    5990:	90 01       	movw	r18, r0
    5992:	59 9f       	mul	r21, r25
    5994:	30 0d       	add	r19, r0
    5996:	11 24       	eor	r1, r1
    5998:	c9 01       	movw	r24, r18
    599a:	8c 50       	subi	r24, 0x0C	; 12
    599c:	9e 4e       	sbci	r25, 0xEE	; 238
    599e:	fc 01       	movw	r30, r24
    59a0:	40 83       	st	Z, r20
    59a2:	39 c0       	rjmp	.+114    	; 0x5a16 <xTaskGenericNotifyFromISR+0x3ea>
    59a4:	80 91 7d 12 	lds	r24, 0x127D	; 0x80127d <xPendingReadyList+0x1>
    59a8:	90 91 7e 12 	lds	r25, 0x127E	; 0x80127e <xPendingReadyList+0x2>
    59ac:	9b 87       	std	Y+11, r25	; 0x0b
    59ae:	8a 87       	std	Y+10, r24	; 0x0a
    59b0:	8a 81       	ldd	r24, Y+2	; 0x02
    59b2:	9b 81       	ldd	r25, Y+3	; 0x03
    59b4:	2a 85       	ldd	r18, Y+10	; 0x0a
    59b6:	3b 85       	ldd	r19, Y+11	; 0x0b
    59b8:	fc 01       	movw	r30, r24
    59ba:	33 8b       	std	Z+19, r19	; 0x13
    59bc:	22 8b       	std	Z+18, r18	; 0x12
    59be:	8a 85       	ldd	r24, Y+10	; 0x0a
    59c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    59c2:	fc 01       	movw	r30, r24
    59c4:	26 81       	ldd	r18, Z+6	; 0x06
    59c6:	37 81       	ldd	r19, Z+7	; 0x07
    59c8:	8a 81       	ldd	r24, Y+2	; 0x02
    59ca:	9b 81       	ldd	r25, Y+3	; 0x03
    59cc:	fc 01       	movw	r30, r24
    59ce:	35 8b       	std	Z+21, r19	; 0x15
    59d0:	24 8b       	std	Z+20, r18	; 0x14
    59d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    59d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    59d6:	fc 01       	movw	r30, r24
    59d8:	86 81       	ldd	r24, Z+6	; 0x06
    59da:	97 81       	ldd	r25, Z+7	; 0x07
    59dc:	2a 81       	ldd	r18, Y+2	; 0x02
    59de:	3b 81       	ldd	r19, Y+3	; 0x03
    59e0:	22 5f       	subi	r18, 0xF2	; 242
    59e2:	3f 4f       	sbci	r19, 0xFF	; 255
    59e4:	fc 01       	movw	r30, r24
    59e6:	35 83       	std	Z+5, r19	; 0x05
    59e8:	24 83       	std	Z+4, r18	; 0x04
    59ea:	8a 81       	ldd	r24, Y+2	; 0x02
    59ec:	9b 81       	ldd	r25, Y+3	; 0x03
    59ee:	9c 01       	movw	r18, r24
    59f0:	22 5f       	subi	r18, 0xF2	; 242
    59f2:	3f 4f       	sbci	r19, 0xFF	; 255
    59f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    59f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    59f8:	fc 01       	movw	r30, r24
    59fa:	37 83       	std	Z+7, r19	; 0x07
    59fc:	26 83       	std	Z+6, r18	; 0x06
    59fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5a00:	9b 81       	ldd	r25, Y+3	; 0x03
    5a02:	2c e7       	ldi	r18, 0x7C	; 124
    5a04:	32 e1       	ldi	r19, 0x12	; 18
    5a06:	fc 01       	movw	r30, r24
    5a08:	31 8f       	std	Z+25, r19	; 0x19
    5a0a:	20 8f       	std	Z+24, r18	; 0x18
    5a0c:	80 91 7c 12 	lds	r24, 0x127C	; 0x80127c <xPendingReadyList>
    5a10:	8f 5f       	subi	r24, 0xFF	; 255
    5a12:	80 93 7c 12 	sts	0x127C, r24	; 0x80127c <xPendingReadyList>
    5a16:	8a 81       	ldd	r24, Y+2	; 0x02
    5a18:	9b 81       	ldd	r25, Y+3	; 0x03
    5a1a:	fc 01       	movw	r30, r24
    5a1c:	22 8d       	ldd	r18, Z+26	; 0x1a
    5a1e:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5a22:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5a26:	fc 01       	movw	r30, r24
    5a28:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a2a:	82 17       	cp	r24, r18
    5a2c:	60 f4       	brcc	.+24     	; 0x5a46 <xTaskGenericNotifyFromISR+0x41a>
    5a2e:	8e 89       	ldd	r24, Y+22	; 0x16
    5a30:	9f 89       	ldd	r25, Y+23	; 0x17
    5a32:	89 2b       	or	r24, r25
    5a34:	29 f0       	breq	.+10     	; 0x5a40 <xTaskGenericNotifyFromISR+0x414>
    5a36:	8e 89       	ldd	r24, Y+22	; 0x16
    5a38:	9f 89       	ldd	r25, Y+23	; 0x17
    5a3a:	21 e0       	ldi	r18, 0x01	; 1
    5a3c:	fc 01       	movw	r30, r24
    5a3e:	20 83       	st	Z, r18
    5a40:	81 e0       	ldi	r24, 0x01	; 1
    5a42:	80 93 a9 12 	sts	0x12A9, r24	; 0x8012a9 <xYieldPending>
    5a46:	89 81       	ldd	r24, Y+1	; 0x01
    5a48:	67 96       	adiw	r28, 0x17	; 23
    5a4a:	0f b6       	in	r0, 0x3f	; 63
    5a4c:	f8 94       	cli
    5a4e:	de bf       	out	0x3e, r29	; 62
    5a50:	0f be       	out	0x3f, r0	; 63
    5a52:	cd bf       	out	0x3d, r28	; 61
    5a54:	df 91       	pop	r29
    5a56:	cf 91       	pop	r28
    5a58:	0f 91       	pop	r16
    5a5a:	ff 90       	pop	r15
    5a5c:	ef 90       	pop	r14
    5a5e:	df 90       	pop	r13
    5a60:	cf 90       	pop	r12
    5a62:	08 95       	ret

00005a64 <xTaskGenericNotifyStateClear>:
    5a64:	cf 93       	push	r28
    5a66:	df 93       	push	r29
    5a68:	00 d0       	rcall	.+0      	; 0x5a6a <xTaskGenericNotifyStateClear+0x6>
    5a6a:	00 d0       	rcall	.+0      	; 0x5a6c <xTaskGenericNotifyStateClear+0x8>
    5a6c:	cd b7       	in	r28, 0x3d	; 61
    5a6e:	de b7       	in	r29, 0x3e	; 62
    5a70:	9d 83       	std	Y+5, r25	; 0x05
    5a72:	8c 83       	std	Y+4, r24	; 0x04
    5a74:	6e 83       	std	Y+6, r22	; 0x06
    5a76:	8c 81       	ldd	r24, Y+4	; 0x04
    5a78:	9d 81       	ldd	r25, Y+5	; 0x05
    5a7a:	89 2b       	or	r24, r25
    5a7c:	29 f4       	brne	.+10     	; 0x5a88 <xTaskGenericNotifyStateClear+0x24>
    5a7e:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5a82:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5a86:	02 c0       	rjmp	.+4      	; 0x5a8c <xTaskGenericNotifyStateClear+0x28>
    5a88:	8c 81       	ldd	r24, Y+4	; 0x04
    5a8a:	9d 81       	ldd	r25, Y+5	; 0x05
    5a8c:	9b 83       	std	Y+3, r25	; 0x03
    5a8e:	8a 83       	std	Y+2, r24	; 0x02
    5a90:	0f b6       	in	r0, 0x3f	; 63
    5a92:	f8 94       	cli
    5a94:	0f 92       	push	r0
    5a96:	8e 81       	ldd	r24, Y+6	; 0x06
    5a98:	88 2f       	mov	r24, r24
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	2a 81       	ldd	r18, Y+2	; 0x02
    5a9e:	3b 81       	ldd	r19, Y+3	; 0x03
    5aa0:	82 0f       	add	r24, r18
    5aa2:	93 1f       	adc	r25, r19
    5aa4:	c3 96       	adiw	r24, 0x33	; 51
    5aa6:	fc 01       	movw	r30, r24
    5aa8:	80 81       	ld	r24, Z
    5aaa:	82 30       	cpi	r24, 0x02	; 2
    5aac:	69 f4       	brne	.+26     	; 0x5ac8 <xTaskGenericNotifyStateClear+0x64>
    5aae:	8e 81       	ldd	r24, Y+6	; 0x06
    5ab0:	88 2f       	mov	r24, r24
    5ab2:	90 e0       	ldi	r25, 0x00	; 0
    5ab4:	2a 81       	ldd	r18, Y+2	; 0x02
    5ab6:	3b 81       	ldd	r19, Y+3	; 0x03
    5ab8:	82 0f       	add	r24, r18
    5aba:	93 1f       	adc	r25, r19
    5abc:	c3 96       	adiw	r24, 0x33	; 51
    5abe:	fc 01       	movw	r30, r24
    5ac0:	10 82       	st	Z, r1
    5ac2:	81 e0       	ldi	r24, 0x01	; 1
    5ac4:	89 83       	std	Y+1, r24	; 0x01
    5ac6:	01 c0       	rjmp	.+2      	; 0x5aca <xTaskGenericNotifyStateClear+0x66>
    5ac8:	19 82       	std	Y+1, r1	; 0x01
    5aca:	0f 90       	pop	r0
    5acc:	0f be       	out	0x3f, r0	; 63
    5ace:	89 81       	ldd	r24, Y+1	; 0x01
    5ad0:	26 96       	adiw	r28, 0x06	; 6
    5ad2:	0f b6       	in	r0, 0x3f	; 63
    5ad4:	f8 94       	cli
    5ad6:	de bf       	out	0x3e, r29	; 62
    5ad8:	0f be       	out	0x3f, r0	; 63
    5ada:	cd bf       	out	0x3d, r28	; 61
    5adc:	df 91       	pop	r29
    5ade:	cf 91       	pop	r28
    5ae0:	08 95       	ret

00005ae2 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    5ae2:	cf 93       	push	r28
    5ae4:	df 93       	push	r29
    5ae6:	cd b7       	in	r28, 0x3d	; 61
    5ae8:	de b7       	in	r29, 0x3e	; 62
    5aea:	2f 97       	sbiw	r28, 0x0f	; 15
    5aec:	0f b6       	in	r0, 0x3f	; 63
    5aee:	f8 94       	cli
    5af0:	de bf       	out	0x3e, r29	; 62
    5af2:	0f be       	out	0x3f, r0	; 63
    5af4:	cd bf       	out	0x3d, r28	; 61
    5af6:	6b 87       	std	Y+11, r22	; 0x0b
    5af8:	7c 87       	std	Y+12, r23	; 0x0c
    5afa:	8d 87       	std	Y+13, r24	; 0x0d
    5afc:	9e 87       	std	Y+14, r25	; 0x0e
    5afe:	4f 87       	std	Y+15, r20	; 0x0f
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    5b00:	80 91 9f 12 	lds	r24, 0x129F	; 0x80129f <xTickCount>
    5b04:	90 91 a0 12 	lds	r25, 0x12A0	; 0x8012a0 <xTickCount+0x1>
    5b08:	a0 91 a1 12 	lds	r26, 0x12A1	; 0x8012a1 <xTickCount+0x2>
    5b0c:	b0 91 a2 12 	lds	r27, 0x12A2	; 0x8012a2 <xTickCount+0x3>
    5b10:	89 83       	std	Y+1, r24	; 0x01
    5b12:	9a 83       	std	Y+2, r25	; 0x02
    5b14:	ab 83       	std	Y+3, r26	; 0x03
    5b16:	bc 83       	std	Y+4, r27	; 0x04
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    5b18:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5b1c:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5b20:	02 96       	adiw	r24, 0x02	; 2
    5b22:	0e 94 21 0a 	call	0x1442	; 0x1442 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    5b26:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b28:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b2a:	ad 85       	ldd	r26, Y+13	; 0x0d
    5b2c:	be 85       	ldd	r27, Y+14	; 0x0e
    5b2e:	8f 3f       	cpi	r24, 0xFF	; 255
    5b30:	9f 4f       	sbci	r25, 0xFF	; 255
    5b32:	af 4f       	sbci	r26, 0xFF	; 255
    5b34:	bf 4f       	sbci	r27, 0xFF	; 255
    5b36:	09 f0       	breq	.+2      	; 0x5b3a <prvAddCurrentTaskToDelayedList+0x58>
    5b38:	49 c0       	rjmp	.+146    	; 0x5bcc <prvAddCurrentTaskToDelayedList+0xea>
    5b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b3c:	88 23       	and	r24, r24
    5b3e:	09 f4       	brne	.+2      	; 0x5b42 <prvAddCurrentTaskToDelayedList+0x60>
    5b40:	45 c0       	rjmp	.+138    	; 0x5bcc <prvAddCurrentTaskToDelayedList+0xea>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5b42:	80 91 94 12 	lds	r24, 0x1294	; 0x801294 <xSuspendedTaskList+0x1>
    5b46:	90 91 95 12 	lds	r25, 0x1295	; 0x801295 <xSuspendedTaskList+0x2>
    5b4a:	9e 83       	std	Y+6, r25	; 0x06
    5b4c:	8d 83       	std	Y+5, r24	; 0x05
    5b4e:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5b52:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5b56:	2d 81       	ldd	r18, Y+5	; 0x05
    5b58:	3e 81       	ldd	r19, Y+6	; 0x06
    5b5a:	fc 01       	movw	r30, r24
    5b5c:	37 83       	std	Z+7, r19	; 0x07
    5b5e:	26 83       	std	Z+6, r18	; 0x06
    5b60:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5b64:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5b68:	2d 81       	ldd	r18, Y+5	; 0x05
    5b6a:	3e 81       	ldd	r19, Y+6	; 0x06
    5b6c:	f9 01       	movw	r30, r18
    5b6e:	26 81       	ldd	r18, Z+6	; 0x06
    5b70:	37 81       	ldd	r19, Z+7	; 0x07
    5b72:	fc 01       	movw	r30, r24
    5b74:	31 87       	std	Z+9, r19	; 0x09
    5b76:	20 87       	std	Z+8, r18	; 0x08
    5b78:	8d 81       	ldd	r24, Y+5	; 0x05
    5b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    5b7c:	fc 01       	movw	r30, r24
    5b7e:	86 81       	ldd	r24, Z+6	; 0x06
    5b80:	97 81       	ldd	r25, Z+7	; 0x07
    5b82:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5b86:	30 91 f3 11 	lds	r19, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5b8a:	2e 5f       	subi	r18, 0xFE	; 254
    5b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    5b8e:	fc 01       	movw	r30, r24
    5b90:	35 83       	std	Z+5, r19	; 0x05
    5b92:	24 83       	std	Z+4, r18	; 0x04
    5b94:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5b98:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5b9c:	9c 01       	movw	r18, r24
    5b9e:	2e 5f       	subi	r18, 0xFE	; 254
    5ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ba6:	fc 01       	movw	r30, r24
    5ba8:	37 83       	std	Z+7, r19	; 0x07
    5baa:	26 83       	std	Z+6, r18	; 0x06
    5bac:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5bb0:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5bb4:	23 e9       	ldi	r18, 0x93	; 147
    5bb6:	32 e1       	ldi	r19, 0x12	; 18
    5bb8:	fc 01       	movw	r30, r24
    5bba:	35 87       	std	Z+13, r19	; 0x0d
    5bbc:	24 87       	std	Z+12, r18	; 0x0c
    5bbe:	80 91 93 12 	lds	r24, 0x1293	; 0x801293 <xSuspendedTaskList>
    5bc2:	8f 5f       	subi	r24, 0xFF	; 255
    5bc4:	80 93 93 12 	sts	0x1293, r24	; 0x801293 <xSuspendedTaskList>
    5bc8:	00 00       	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    5bca:	64 c0       	rjmp	.+200    	; 0x5c94 <prvAddCurrentTaskToDelayedList+0x1b2>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
    5bcc:	29 81       	ldd	r18, Y+1	; 0x01
    5bce:	3a 81       	ldd	r19, Y+2	; 0x02
    5bd0:	4b 81       	ldd	r20, Y+3	; 0x03
    5bd2:	5c 81       	ldd	r21, Y+4	; 0x04
    5bd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    5bd8:	ad 85       	ldd	r26, Y+13	; 0x0d
    5bda:	be 85       	ldd	r27, Y+14	; 0x0e
    5bdc:	82 0f       	add	r24, r18
    5bde:	93 1f       	adc	r25, r19
    5be0:	a4 1f       	adc	r26, r20
    5be2:	b5 1f       	adc	r27, r21
    5be4:	8f 83       	std	Y+7, r24	; 0x07
    5be6:	98 87       	std	Y+8, r25	; 0x08
    5be8:	a9 87       	std	Y+9, r26	; 0x09
    5bea:	ba 87       	std	Y+10, r27	; 0x0a

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    5bec:	20 91 f2 11 	lds	r18, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5bf0:	30 91 f3 11 	lds	r19, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5bf4:	8f 81       	ldd	r24, Y+7	; 0x07
    5bf6:	98 85       	ldd	r25, Y+8	; 0x08
    5bf8:	a9 85       	ldd	r26, Y+9	; 0x09
    5bfa:	ba 85       	ldd	r27, Y+10	; 0x0a
    5bfc:	f9 01       	movw	r30, r18
    5bfe:	82 83       	std	Z+2, r24	; 0x02
    5c00:	93 83       	std	Z+3, r25	; 0x03
    5c02:	a4 83       	std	Z+4, r26	; 0x04
    5c04:	b5 83       	std	Z+5, r27	; 0x05

                if( xTimeToWake < xConstTickCount )
    5c06:	2f 81       	ldd	r18, Y+7	; 0x07
    5c08:	38 85       	ldd	r19, Y+8	; 0x08
    5c0a:	49 85       	ldd	r20, Y+9	; 0x09
    5c0c:	5a 85       	ldd	r21, Y+10	; 0x0a
    5c0e:	89 81       	ldd	r24, Y+1	; 0x01
    5c10:	9a 81       	ldd	r25, Y+2	; 0x02
    5c12:	ab 81       	ldd	r26, Y+3	; 0x03
    5c14:	bc 81       	ldd	r27, Y+4	; 0x04
    5c16:	28 17       	cp	r18, r24
    5c18:	39 07       	cpc	r19, r25
    5c1a:	4a 07       	cpc	r20, r26
    5c1c:	5b 07       	cpc	r21, r27
    5c1e:	78 f4       	brcc	.+30     	; 0x5c3e <prvAddCurrentTaskToDelayedList+0x15c>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5c20:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5c24:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5c28:	9c 01       	movw	r18, r24
    5c2a:	2e 5f       	subi	r18, 0xFE	; 254
    5c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c2e:	80 91 7a 12 	lds	r24, 0x127A	; 0x80127a <pxOverflowDelayedTaskList>
    5c32:	90 91 7b 12 	lds	r25, 0x127B	; 0x80127b <pxOverflowDelayedTaskList+0x1>
    5c36:	b9 01       	movw	r22, r18
    5c38:	0e 94 9a 09 	call	0x1334	; 0x1334 <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    5c3c:	2b c0       	rjmp	.+86     	; 0x5c94 <prvAddCurrentTaskToDelayedList+0x1b2>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5c3e:	80 91 f2 11 	lds	r24, 0x11F2	; 0x8011f2 <pxCurrentTCB>
    5c42:	90 91 f3 11 	lds	r25, 0x11F3	; 0x8011f3 <pxCurrentTCB+0x1>
    5c46:	9c 01       	movw	r18, r24
    5c48:	2e 5f       	subi	r18, 0xFE	; 254
    5c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c4c:	80 91 78 12 	lds	r24, 0x1278	; 0x801278 <pxDelayedTaskList>
    5c50:	90 91 79 12 	lds	r25, 0x1279	; 0x801279 <pxDelayedTaskList+0x1>
    5c54:	b9 01       	movw	r22, r18
    5c56:	0e 94 9a 09 	call	0x1334	; 0x1334 <vListInsert>

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
    5c5a:	80 91 ac 12 	lds	r24, 0x12AC	; 0x8012ac <xNextTaskUnblockTime>
    5c5e:	90 91 ad 12 	lds	r25, 0x12AD	; 0x8012ad <xNextTaskUnblockTime+0x1>
    5c62:	a0 91 ae 12 	lds	r26, 0x12AE	; 0x8012ae <xNextTaskUnblockTime+0x2>
    5c66:	b0 91 af 12 	lds	r27, 0x12AF	; 0x8012af <xNextTaskUnblockTime+0x3>
    5c6a:	2f 81       	ldd	r18, Y+7	; 0x07
    5c6c:	38 85       	ldd	r19, Y+8	; 0x08
    5c6e:	49 85       	ldd	r20, Y+9	; 0x09
    5c70:	5a 85       	ldd	r21, Y+10	; 0x0a
    5c72:	28 17       	cp	r18, r24
    5c74:	39 07       	cpc	r19, r25
    5c76:	4a 07       	cpc	r20, r26
    5c78:	5b 07       	cpc	r21, r27
    5c7a:	60 f4       	brcc	.+24     	; 0x5c94 <prvAddCurrentTaskToDelayedList+0x1b2>
                    {
                        xNextTaskUnblockTime = xTimeToWake;
    5c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    5c7e:	98 85       	ldd	r25, Y+8	; 0x08
    5c80:	a9 85       	ldd	r26, Y+9	; 0x09
    5c82:	ba 85       	ldd	r27, Y+10	; 0x0a
    5c84:	80 93 ac 12 	sts	0x12AC, r24	; 0x8012ac <xNextTaskUnblockTime>
    5c88:	90 93 ad 12 	sts	0x12AD, r25	; 0x8012ad <xNextTaskUnblockTime+0x1>
    5c8c:	a0 93 ae 12 	sts	0x12AE, r26	; 0x8012ae <xNextTaskUnblockTime+0x2>
    5c90:	b0 93 af 12 	sts	0x12AF, r27	; 0x8012af <xNextTaskUnblockTime+0x3>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    5c94:	00 00       	nop
    5c96:	2f 96       	adiw	r28, 0x0f	; 15
    5c98:	0f b6       	in	r0, 0x3f	; 63
    5c9a:	f8 94       	cli
    5c9c:	de bf       	out	0x3e, r29	; 62
    5c9e:	0f be       	out	0x3f, r0	; 63
    5ca0:	cd bf       	out	0x3d, r28	; 61
    5ca2:	df 91       	pop	r29
    5ca4:	cf 91       	pop	r28
    5ca6:	08 95       	ret

00005ca8 <xTimerCreateTimerTask>:
    5ca8:	ef 92       	push	r14
    5caa:	ff 92       	push	r15
    5cac:	0f 93       	push	r16
    5cae:	cf 93       	push	r28
    5cb0:	df 93       	push	r29
    5cb2:	1f 92       	push	r1
    5cb4:	cd b7       	in	r28, 0x3d	; 61
    5cb6:	de b7       	in	r29, 0x3e	; 62
    5cb8:	19 82       	std	Y+1, r1	; 0x01
    5cba:	af d4       	rcall	.+2398   	; 0x661a <prvCheckForValidListAndQueue>
    5cbc:	80 91 cd 12 	lds	r24, 0x12CD	; 0x8012cd <xTimerQueue>
    5cc0:	90 91 ce 12 	lds	r25, 0x12CE	; 0x8012ce <xTimerQueue+0x1>
    5cc4:	89 2b       	or	r24, r25
    5cc6:	91 f0       	breq	.+36     	; 0x5cec <xTimerCreateTimerTask+0x44>
    5cc8:	0f 2e       	mov	r0, r31
    5cca:	ff ec       	ldi	r31, 0xCF	; 207
    5ccc:	ef 2e       	mov	r14, r31
    5cce:	f2 e1       	ldi	r31, 0x12	; 18
    5cd0:	ff 2e       	mov	r15, r31
    5cd2:	f0 2d       	mov	r31, r0
    5cd4:	03 e0       	ldi	r16, 0x03	; 3
    5cd6:	20 e0       	ldi	r18, 0x00	; 0
    5cd8:	30 e0       	ldi	r19, 0x00	; 0
    5cda:	40 ec       	ldi	r20, 0xC0	; 192
    5cdc:	50 e0       	ldi	r21, 0x00	; 0
    5cde:	64 ea       	ldi	r22, 0xA4	; 164
    5ce0:	73 e0       	ldi	r23, 0x03	; 3
    5ce2:	8f e8       	ldi	r24, 0x8F	; 143
    5ce4:	90 e0       	ldi	r25, 0x00	; 0
    5ce6:	0e 94 30 18 	call	0x3060	; 0x3060 <xTaskCreate>
    5cea:	89 83       	std	Y+1, r24	; 0x01
    5cec:	89 81       	ldd	r24, Y+1	; 0x01
    5cee:	0f 90       	pop	r0
    5cf0:	df 91       	pop	r29
    5cf2:	cf 91       	pop	r28
    5cf4:	0f 91       	pop	r16
    5cf6:	ff 90       	pop	r15
    5cf8:	ef 90       	pop	r14
    5cfa:	08 95       	ret

00005cfc <xTimerGenericCommand>:
    5cfc:	cf 92       	push	r12
    5cfe:	df 92       	push	r13
    5d00:	ef 92       	push	r14
    5d02:	ff 92       	push	r15
    5d04:	0f 93       	push	r16
    5d06:	1f 93       	push	r17
    5d08:	cf 93       	push	r28
    5d0a:	df 93       	push	r29
    5d0c:	cd b7       	in	r28, 0x3d	; 61
    5d0e:	de b7       	in	r29, 0x3e	; 62
    5d10:	65 97       	sbiw	r28, 0x15	; 21
    5d12:	0f b6       	in	r0, 0x3f	; 63
    5d14:	f8 94       	cli
    5d16:	de bf       	out	0x3e, r29	; 62
    5d18:	0f be       	out	0x3f, r0	; 63
    5d1a:	cd bf       	out	0x3d, r28	; 61
    5d1c:	9a 87       	std	Y+10, r25	; 0x0a
    5d1e:	89 87       	std	Y+9, r24	; 0x09
    5d20:	6b 87       	std	Y+11, r22	; 0x0b
    5d22:	2c 87       	std	Y+12, r18	; 0x0c
    5d24:	3d 87       	std	Y+13, r19	; 0x0d
    5d26:	4e 87       	std	Y+14, r20	; 0x0e
    5d28:	5f 87       	std	Y+15, r21	; 0x0f
    5d2a:	19 8b       	std	Y+17, r17	; 0x11
    5d2c:	08 8b       	std	Y+16, r16	; 0x10
    5d2e:	ca 8a       	std	Y+18, r12	; 0x12
    5d30:	db 8a       	std	Y+19, r13	; 0x13
    5d32:	ec 8a       	std	Y+20, r14	; 0x14
    5d34:	fd 8a       	std	Y+21, r15	; 0x15
    5d36:	19 82       	std	Y+1, r1	; 0x01
    5d38:	80 91 cd 12 	lds	r24, 0x12CD	; 0x8012cd <xTimerQueue>
    5d3c:	90 91 ce 12 	lds	r25, 0x12CE	; 0x8012ce <xTimerQueue+0x1>
    5d40:	89 2b       	or	r24, r25
    5d42:	09 f4       	brne	.+2      	; 0x5d46 <xTimerGenericCommand+0x4a>
    5d44:	44 c0       	rjmp	.+136    	; 0x5dce <xTimerGenericCommand+0xd2>
    5d46:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d48:	8a 83       	std	Y+2, r24	; 0x02
    5d4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    5d4c:	9d 85       	ldd	r25, Y+13	; 0x0d
    5d4e:	ae 85       	ldd	r26, Y+14	; 0x0e
    5d50:	bf 85       	ldd	r27, Y+15	; 0x0f
    5d52:	8b 83       	std	Y+3, r24	; 0x03
    5d54:	9c 83       	std	Y+4, r25	; 0x04
    5d56:	ad 83       	std	Y+5, r26	; 0x05
    5d58:	be 83       	std	Y+6, r27	; 0x06
    5d5a:	89 85       	ldd	r24, Y+9	; 0x09
    5d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d5e:	98 87       	std	Y+8, r25	; 0x08
    5d60:	8f 83       	std	Y+7, r24	; 0x07
    5d62:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d64:	86 30       	cpi	r24, 0x06	; 6
    5d66:	34 f5       	brge	.+76     	; 0x5db4 <xTimerGenericCommand+0xb8>
    5d68:	0e 94 c1 24 	call	0x4982	; 0x4982 <xTaskGetSchedulerState>
    5d6c:	82 30       	cpi	r24, 0x02	; 2
    5d6e:	99 f4       	brne	.+38     	; 0x5d96 <xTimerGenericCommand+0x9a>
    5d70:	e0 91 cd 12 	lds	r30, 0x12CD	; 0x8012cd <xTimerQueue>
    5d74:	f0 91 ce 12 	lds	r31, 0x12CE	; 0x8012ce <xTimerQueue+0x1>
    5d78:	8a 89       	ldd	r24, Y+18	; 0x12
    5d7a:	9b 89       	ldd	r25, Y+19	; 0x13
    5d7c:	ac 89       	ldd	r26, Y+20	; 0x14
    5d7e:	bd 89       	ldd	r27, Y+21	; 0x15
    5d80:	be 01       	movw	r22, r28
    5d82:	6e 5f       	subi	r22, 0xFE	; 254
    5d84:	7f 4f       	sbci	r23, 0xFF	; 255
    5d86:	00 e0       	ldi	r16, 0x00	; 0
    5d88:	9c 01       	movw	r18, r24
    5d8a:	ad 01       	movw	r20, r26
    5d8c:	cf 01       	movw	r24, r30
    5d8e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
    5d92:	89 83       	std	Y+1, r24	; 0x01
    5d94:	1c c0       	rjmp	.+56     	; 0x5dce <xTimerGenericCommand+0xd2>
    5d96:	80 91 cd 12 	lds	r24, 0x12CD	; 0x8012cd <xTimerQueue>
    5d9a:	90 91 ce 12 	lds	r25, 0x12CE	; 0x8012ce <xTimerQueue+0x1>
    5d9e:	be 01       	movw	r22, r28
    5da0:	6e 5f       	subi	r22, 0xFE	; 254
    5da2:	7f 4f       	sbci	r23, 0xFF	; 255
    5da4:	00 e0       	ldi	r16, 0x00	; 0
    5da6:	20 e0       	ldi	r18, 0x00	; 0
    5da8:	30 e0       	ldi	r19, 0x00	; 0
    5daa:	a9 01       	movw	r20, r18
    5dac:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
    5db0:	89 83       	std	Y+1, r24	; 0x01
    5db2:	0d c0       	rjmp	.+26     	; 0x5dce <xTimerGenericCommand+0xd2>
    5db4:	80 91 cd 12 	lds	r24, 0x12CD	; 0x8012cd <xTimerQueue>
    5db8:	90 91 ce 12 	lds	r25, 0x12CE	; 0x8012ce <xTimerQueue+0x1>
    5dbc:	48 89       	ldd	r20, Y+16	; 0x10
    5dbe:	59 89       	ldd	r21, Y+17	; 0x11
    5dc0:	be 01       	movw	r22, r28
    5dc2:	6e 5f       	subi	r22, 0xFE	; 254
    5dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc6:	20 e0       	ldi	r18, 0x00	; 0
    5dc8:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <xQueueGenericSendFromISR>
    5dcc:	89 83       	std	Y+1, r24	; 0x01
    5dce:	89 81       	ldd	r24, Y+1	; 0x01
    5dd0:	65 96       	adiw	r28, 0x15	; 21
    5dd2:	0f b6       	in	r0, 0x3f	; 63
    5dd4:	f8 94       	cli
    5dd6:	de bf       	out	0x3e, r29	; 62
    5dd8:	0f be       	out	0x3f, r0	; 63
    5dda:	cd bf       	out	0x3d, r28	; 61
    5ddc:	df 91       	pop	r29
    5dde:	cf 91       	pop	r28
    5de0:	1f 91       	pop	r17
    5de2:	0f 91       	pop	r16
    5de4:	ff 90       	pop	r15
    5de6:	ef 90       	pop	r14
    5de8:	df 90       	pop	r13
    5dea:	cf 90       	pop	r12
    5dec:	08 95       	ret

00005dee <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    5dee:	cf 92       	push	r12
    5df0:	df 92       	push	r13
    5df2:	ef 92       	push	r14
    5df4:	ff 92       	push	r15
    5df6:	0f 93       	push	r16
    5df8:	1f 93       	push	r17
    5dfa:	cf 93       	push	r28
    5dfc:	df 93       	push	r29
    5dfe:	cd b7       	in	r28, 0x3d	; 61
    5e00:	de b7       	in	r29, 0x3e	; 62
    5e02:	2b 97       	sbiw	r28, 0x0b	; 11
    5e04:	0f b6       	in	r0, 0x3f	; 63
    5e06:	f8 94       	cli
    5e08:	de bf       	out	0x3e, r29	; 62
    5e0a:	0f be       	out	0x3f, r0	; 63
    5e0c:	cd bf       	out	0x3d, r28	; 61
    5e0e:	6c 83       	std	Y+4, r22	; 0x04
    5e10:	7d 83       	std	Y+5, r23	; 0x05
    5e12:	8e 83       	std	Y+6, r24	; 0x06
    5e14:	9f 83       	std	Y+7, r25	; 0x07
    5e16:	28 87       	std	Y+8, r18	; 0x08
    5e18:	39 87       	std	Y+9, r19	; 0x09
    5e1a:	4a 87       	std	Y+10, r20	; 0x0a
    5e1c:	5b 87       	std	Y+11, r21	; 0x0b
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5e1e:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxCurrentTimerList>
    5e22:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxCurrentTimerList+0x1>
    5e26:	fc 01       	movw	r30, r24
    5e28:	87 81       	ldd	r24, Z+7	; 0x07
    5e2a:	90 85       	ldd	r25, Z+8	; 0x08
    5e2c:	fc 01       	movw	r30, r24
    5e2e:	80 85       	ldd	r24, Z+8	; 0x08
    5e30:	91 85       	ldd	r25, Z+9	; 0x09
    5e32:	9a 83       	std	Y+2, r25	; 0x02
    5e34:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5e36:	89 81       	ldd	r24, Y+1	; 0x01
    5e38:	9a 81       	ldd	r25, Y+2	; 0x02
    5e3a:	02 96       	adiw	r24, 0x02	; 2
    5e3c:	0e 94 21 0a 	call	0x1442	; 0x1442 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    5e40:	89 81       	ldd	r24, Y+1	; 0x01
    5e42:	9a 81       	ldd	r25, Y+2	; 0x02
    5e44:	fc 01       	movw	r30, r24
    5e46:	86 89       	ldd	r24, Z+22	; 0x16
    5e48:	88 2f       	mov	r24, r24
    5e4a:	90 e0       	ldi	r25, 0x00	; 0
    5e4c:	84 70       	andi	r24, 0x04	; 4
    5e4e:	99 27       	eor	r25, r25
    5e50:	89 2b       	or	r24, r25
    5e52:	a9 f1       	breq	.+106    	; 0x5ebe <prvProcessExpiredTimer+0xd0>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    5e54:	89 81       	ldd	r24, Y+1	; 0x01
    5e56:	9a 81       	ldd	r25, Y+2	; 0x02
    5e58:	fc 01       	movw	r30, r24
    5e5a:	26 85       	ldd	r18, Z+14	; 0x0e
    5e5c:	37 85       	ldd	r19, Z+15	; 0x0f
    5e5e:	40 89       	ldd	r20, Z+16	; 0x10
    5e60:	51 89       	ldd	r21, Z+17	; 0x11
    5e62:	8c 81       	ldd	r24, Y+4	; 0x04
    5e64:	9d 81       	ldd	r25, Y+5	; 0x05
    5e66:	ae 81       	ldd	r26, Y+6	; 0x06
    5e68:	bf 81       	ldd	r27, Y+7	; 0x07
    5e6a:	82 0f       	add	r24, r18
    5e6c:	93 1f       	adc	r25, r19
    5e6e:	a4 1f       	adc	r26, r20
    5e70:	b5 1f       	adc	r27, r21
    5e72:	ec 80       	ldd	r14, Y+4	; 0x04
    5e74:	fd 80       	ldd	r15, Y+5	; 0x05
    5e76:	0e 81       	ldd	r16, Y+6	; 0x06
    5e78:	1f 81       	ldd	r17, Y+7	; 0x07
    5e7a:	28 85       	ldd	r18, Y+8	; 0x08
    5e7c:	39 85       	ldd	r19, Y+9	; 0x09
    5e7e:	4a 85       	ldd	r20, Y+10	; 0x0a
    5e80:	5b 85       	ldd	r21, Y+11	; 0x0b
    5e82:	e9 81       	ldd	r30, Y+1	; 0x01
    5e84:	fa 81       	ldd	r31, Y+2	; 0x02
    5e86:	67 01       	movw	r12, r14
    5e88:	78 01       	movw	r14, r16
    5e8a:	89 01       	movw	r16, r18
    5e8c:	9a 01       	movw	r18, r20
    5e8e:	ac 01       	movw	r20, r24
    5e90:	bd 01       	movw	r22, r26
    5e92:	cf 01       	movw	r24, r30
    5e94:	3e d1       	rcall	.+636    	; 0x6112 <prvInsertTimerInActiveList>
    5e96:	88 23       	and	r24, r24
    5e98:	e1 f0       	breq	.+56     	; 0x5ed2 <prvProcessExpiredTimer+0xe4>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    5e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    5e9e:	ae 81       	ldd	r26, Y+6	; 0x06
    5ea0:	bf 81       	ldd	r27, Y+7	; 0x07
    5ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    5ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    5ea6:	c1 2c       	mov	r12, r1
    5ea8:	d1 2c       	mov	r13, r1
    5eaa:	76 01       	movw	r14, r12
    5eac:	00 e0       	ldi	r16, 0x00	; 0
    5eae:	10 e0       	ldi	r17, 0x00	; 0
    5eb0:	9c 01       	movw	r18, r24
    5eb2:	ad 01       	movw	r20, r26
    5eb4:	60 e0       	ldi	r22, 0x00	; 0
    5eb6:	cf 01       	movw	r24, r30
    5eb8:	21 df       	rcall	.-446    	; 0x5cfc <xTimerGenericCommand>
    5eba:	8b 83       	std	Y+3, r24	; 0x03
    5ebc:	0a c0       	rjmp	.+20     	; 0x5ed2 <prvProcessExpiredTimer+0xe4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    5ebe:	89 81       	ldd	r24, Y+1	; 0x01
    5ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec2:	fc 01       	movw	r30, r24
    5ec4:	86 89       	ldd	r24, Z+22	; 0x16
    5ec6:	28 2f       	mov	r18, r24
    5ec8:	2e 7f       	andi	r18, 0xFE	; 254
    5eca:	89 81       	ldd	r24, Y+1	; 0x01
    5ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    5ece:	fc 01       	movw	r30, r24
    5ed0:	26 8b       	std	Z+22, r18	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5ed2:	89 81       	ldd	r24, Y+1	; 0x01
    5ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed6:	fc 01       	movw	r30, r24
    5ed8:	24 89       	ldd	r18, Z+20	; 0x14
    5eda:	35 89       	ldd	r19, Z+21	; 0x15
    5edc:	89 81       	ldd	r24, Y+1	; 0x01
    5ede:	9a 81       	ldd	r25, Y+2	; 0x02
    5ee0:	f9 01       	movw	r30, r18
    5ee2:	19 95       	eicall
    }
    5ee4:	00 00       	nop
    5ee6:	2b 96       	adiw	r28, 0x0b	; 11
    5ee8:	0f b6       	in	r0, 0x3f	; 63
    5eea:	f8 94       	cli
    5eec:	de bf       	out	0x3e, r29	; 62
    5eee:	0f be       	out	0x3f, r0	; 63
    5ef0:	cd bf       	out	0x3d, r28	; 61
    5ef2:	df 91       	pop	r29
    5ef4:	cf 91       	pop	r28
    5ef6:	1f 91       	pop	r17
    5ef8:	0f 91       	pop	r16
    5efa:	ff 90       	pop	r15
    5efc:	ef 90       	pop	r14
    5efe:	df 90       	pop	r13
    5f00:	cf 90       	pop	r12
    5f02:	08 95       	ret

00005f04 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    5f04:	ef 92       	push	r14
    5f06:	ff 92       	push	r15
    5f08:	0f 93       	push	r16
    5f0a:	1f 93       	push	r17
    5f0c:	cf 93       	push	r28
    5f0e:	df 93       	push	r29
    5f10:	cd b7       	in	r28, 0x3d	; 61
    5f12:	de b7       	in	r29, 0x3e	; 62
    5f14:	2a 97       	sbiw	r28, 0x0a	; 10
    5f16:	0f b6       	in	r0, 0x3f	; 63
    5f18:	f8 94       	cli
    5f1a:	de bf       	out	0x3e, r29	; 62
    5f1c:	0f be       	out	0x3f, r0	; 63
    5f1e:	cd bf       	out	0x3d, r28	; 61
    5f20:	6e 83       	std	Y+6, r22	; 0x06
    5f22:	7f 83       	std	Y+7, r23	; 0x07
    5f24:	88 87       	std	Y+8, r24	; 0x08
    5f26:	99 87       	std	Y+9, r25	; 0x09
    5f28:	4a 87       	std	Y+10, r20	; 0x0a
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    5f2a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5f2e:	ce 01       	movw	r24, r28
    5f30:	05 96       	adiw	r24, 0x05	; 5
    5f32:	a8 d0       	rcall	.+336    	; 0x6084 <prvSampleTimeNow>
    5f34:	dc 01       	movw	r26, r24
    5f36:	cb 01       	movw	r24, r22
    5f38:	89 83       	std	Y+1, r24	; 0x01
    5f3a:	9a 83       	std	Y+2, r25	; 0x02
    5f3c:	ab 83       	std	Y+3, r26	; 0x03
    5f3e:	bc 83       	std	Y+4, r27	; 0x04

            if( xTimerListsWereSwitched == pdFALSE )
    5f40:	8d 81       	ldd	r24, Y+5	; 0x05
    5f42:	88 23       	and	r24, r24
    5f44:	09 f0       	breq	.+2      	; 0x5f48 <prvProcessTimerOrBlockTask+0x44>
    5f46:	4d c0       	rjmp	.+154    	; 0x5fe2 <prvProcessTimerOrBlockTask+0xde>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    5f48:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f4a:	88 23       	and	r24, r24
    5f4c:	d9 f4       	brne	.+54     	; 0x5f84 <prvProcessTimerOrBlockTask+0x80>
    5f4e:	2e 81       	ldd	r18, Y+6	; 0x06
    5f50:	3f 81       	ldd	r19, Y+7	; 0x07
    5f52:	48 85       	ldd	r20, Y+8	; 0x08
    5f54:	59 85       	ldd	r21, Y+9	; 0x09
    5f56:	89 81       	ldd	r24, Y+1	; 0x01
    5f58:	9a 81       	ldd	r25, Y+2	; 0x02
    5f5a:	ab 81       	ldd	r26, Y+3	; 0x03
    5f5c:	bc 81       	ldd	r27, Y+4	; 0x04
    5f5e:	82 17       	cp	r24, r18
    5f60:	93 07       	cpc	r25, r19
    5f62:	a4 07       	cpc	r26, r20
    5f64:	b5 07       	cpc	r27, r21
    5f66:	70 f0       	brcs	.+28     	; 0x5f84 <prvProcessTimerOrBlockTask+0x80>
                {
                    ( void ) xTaskResumeAll();
    5f68:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    5f6c:	29 81       	ldd	r18, Y+1	; 0x01
    5f6e:	3a 81       	ldd	r19, Y+2	; 0x02
    5f70:	4b 81       	ldd	r20, Y+3	; 0x03
    5f72:	5c 81       	ldd	r21, Y+4	; 0x04
    5f74:	8e 81       	ldd	r24, Y+6	; 0x06
    5f76:	9f 81       	ldd	r25, Y+7	; 0x07
    5f78:	a8 85       	ldd	r26, Y+8	; 0x08
    5f7a:	b9 85       	ldd	r27, Y+9	; 0x09
    5f7c:	bc 01       	movw	r22, r24
    5f7e:	cd 01       	movw	r24, r26
    5f80:	36 df       	rcall	.-404    	; 0x5dee <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    5f82:	31 c0       	rjmp	.+98     	; 0x5fe6 <prvProcessTimerOrBlockTask+0xe2>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    5f84:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f86:	88 23       	and	r24, r24
    5f88:	59 f0       	breq	.+22     	; 0x5fa0 <prvProcessTimerOrBlockTask+0x9c>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    5f8a:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <pxOverflowTimerList>
    5f8e:	90 91 cc 12 	lds	r25, 0x12CC	; 0x8012cc <pxOverflowTimerList+0x1>
    5f92:	fc 01       	movw	r30, r24
    5f94:	90 81       	ld	r25, Z
    5f96:	81 e0       	ldi	r24, 0x01	; 1
    5f98:	99 23       	and	r25, r25
    5f9a:	09 f0       	breq	.+2      	; 0x5f9e <prvProcessTimerOrBlockTask+0x9a>
    5f9c:	80 e0       	ldi	r24, 0x00	; 0
    5f9e:	8a 87       	std	Y+10, r24	; 0x0a
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    5fa0:	2e 81       	ldd	r18, Y+6	; 0x06
    5fa2:	3f 81       	ldd	r19, Y+7	; 0x07
    5fa4:	48 85       	ldd	r20, Y+8	; 0x08
    5fa6:	59 85       	ldd	r21, Y+9	; 0x09
    5fa8:	89 81       	ldd	r24, Y+1	; 0x01
    5faa:	9a 81       	ldd	r25, Y+2	; 0x02
    5fac:	ab 81       	ldd	r26, Y+3	; 0x03
    5fae:	bc 81       	ldd	r27, Y+4	; 0x04
    5fb0:	79 01       	movw	r14, r18
    5fb2:	8a 01       	movw	r16, r20
    5fb4:	e8 1a       	sub	r14, r24
    5fb6:	f9 0a       	sbc	r15, r25
    5fb8:	0a 0b       	sbc	r16, r26
    5fba:	1b 0b       	sbc	r17, r27
    5fbc:	d8 01       	movw	r26, r16
    5fbe:	c7 01       	movw	r24, r14
    5fc0:	e0 91 cd 12 	lds	r30, 0x12CD	; 0x8012cd <xTimerQueue>
    5fc4:	f0 91 ce 12 	lds	r31, 0x12CE	; 0x8012ce <xTimerQueue+0x1>
    5fc8:	2a 85       	ldd	r18, Y+10	; 0x0a
    5fca:	ac 01       	movw	r20, r24
    5fcc:	bd 01       	movw	r22, r26
    5fce:	cf 01       	movw	r24, r30
    5fd0:	0e 94 1f 12 	call	0x243e	; 0x243e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    5fd4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
    5fd8:	88 23       	and	r24, r24
    5fda:	29 f4       	brne	.+10     	; 0x5fe6 <prvProcessTimerOrBlockTask+0xe2>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    5fdc:	0e 94 3e 0b 	call	0x167c	; 0x167c <vPortYield>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    5fe0:	02 c0       	rjmp	.+4      	; 0x5fe6 <prvProcessTimerOrBlockTask+0xe2>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    5fe2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <xTaskResumeAll>
            }
        }
    }
    5fe6:	00 00       	nop
    5fe8:	2a 96       	adiw	r28, 0x0a	; 10
    5fea:	0f b6       	in	r0, 0x3f	; 63
    5fec:	f8 94       	cli
    5fee:	de bf       	out	0x3e, r29	; 62
    5ff0:	0f be       	out	0x3f, r0	; 63
    5ff2:	cd bf       	out	0x3d, r28	; 61
    5ff4:	df 91       	pop	r29
    5ff6:	cf 91       	pop	r28
    5ff8:	1f 91       	pop	r17
    5ffa:	0f 91       	pop	r16
    5ffc:	ff 90       	pop	r15
    5ffe:	ef 90       	pop	r14
    6000:	08 95       	ret

00006002 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    6002:	cf 93       	push	r28
    6004:	df 93       	push	r29
    6006:	00 d0       	rcall	.+0      	; 0x6008 <prvGetNextExpireTime+0x6>
    6008:	00 d0       	rcall	.+0      	; 0x600a <prvGetNextExpireTime+0x8>
    600a:	cd b7       	in	r28, 0x3d	; 61
    600c:	de b7       	in	r29, 0x3e	; 62
    600e:	9e 83       	std	Y+6, r25	; 0x06
    6010:	8d 83       	std	Y+5, r24	; 0x05
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    6012:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxCurrentTimerList>
    6016:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxCurrentTimerList+0x1>
    601a:	fc 01       	movw	r30, r24
    601c:	90 81       	ld	r25, Z
    601e:	81 e0       	ldi	r24, 0x01	; 1
    6020:	99 23       	and	r25, r25
    6022:	09 f0       	breq	.+2      	; 0x6026 <prvGetNextExpireTime+0x24>
    6024:	80 e0       	ldi	r24, 0x00	; 0
    6026:	28 2f       	mov	r18, r24
    6028:	8d 81       	ldd	r24, Y+5	; 0x05
    602a:	9e 81       	ldd	r25, Y+6	; 0x06
    602c:	fc 01       	movw	r30, r24
    602e:	20 83       	st	Z, r18

        if( *pxListWasEmpty == pdFALSE )
    6030:	8d 81       	ldd	r24, Y+5	; 0x05
    6032:	9e 81       	ldd	r25, Y+6	; 0x06
    6034:	fc 01       	movw	r30, r24
    6036:	80 81       	ld	r24, Z
    6038:	88 23       	and	r24, r24
    603a:	89 f4       	brne	.+34     	; 0x605e <prvGetNextExpireTime+0x5c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    603c:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxCurrentTimerList>
    6040:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxCurrentTimerList+0x1>
    6044:	fc 01       	movw	r30, r24
    6046:	87 81       	ldd	r24, Z+7	; 0x07
    6048:	90 85       	ldd	r25, Z+8	; 0x08
    604a:	fc 01       	movw	r30, r24
    604c:	80 81       	ld	r24, Z
    604e:	91 81       	ldd	r25, Z+1	; 0x01
    6050:	a2 81       	ldd	r26, Z+2	; 0x02
    6052:	b3 81       	ldd	r27, Z+3	; 0x03
    6054:	89 83       	std	Y+1, r24	; 0x01
    6056:	9a 83       	std	Y+2, r25	; 0x02
    6058:	ab 83       	std	Y+3, r26	; 0x03
    605a:	bc 83       	std	Y+4, r27	; 0x04
    605c:	04 c0       	rjmp	.+8      	; 0x6066 <prvGetNextExpireTime+0x64>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    605e:	19 82       	std	Y+1, r1	; 0x01
    6060:	1a 82       	std	Y+2, r1	; 0x02
    6062:	1b 82       	std	Y+3, r1	; 0x03
    6064:	1c 82       	std	Y+4, r1	; 0x04
        }

        return xNextExpireTime;
    6066:	89 81       	ldd	r24, Y+1	; 0x01
    6068:	9a 81       	ldd	r25, Y+2	; 0x02
    606a:	ab 81       	ldd	r26, Y+3	; 0x03
    606c:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    606e:	bc 01       	movw	r22, r24
    6070:	cd 01       	movw	r24, r26
    6072:	26 96       	adiw	r28, 0x06	; 6
    6074:	0f b6       	in	r0, 0x3f	; 63
    6076:	f8 94       	cli
    6078:	de bf       	out	0x3e, r29	; 62
    607a:	0f be       	out	0x3f, r0	; 63
    607c:	cd bf       	out	0x3d, r28	; 61
    607e:	df 91       	pop	r29
    6080:	cf 91       	pop	r28
    6082:	08 95       	ret

00006084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    6084:	cf 93       	push	r28
    6086:	df 93       	push	r29
    6088:	00 d0       	rcall	.+0      	; 0x608a <prvSampleTimeNow+0x6>
    608a:	00 d0       	rcall	.+0      	; 0x608c <prvSampleTimeNow+0x8>
    608c:	cd b7       	in	r28, 0x3d	; 61
    608e:	de b7       	in	r29, 0x3e	; 62
    6090:	9e 83       	std	Y+6, r25	; 0x06
    6092:	8d 83       	std	Y+5, r24	; 0x05
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    6094:	0e 94 6f 1c 	call	0x38de	; 0x38de <xTaskGetTickCount>
    6098:	dc 01       	movw	r26, r24
    609a:	cb 01       	movw	r24, r22
    609c:	89 83       	std	Y+1, r24	; 0x01
    609e:	9a 83       	std	Y+2, r25	; 0x02
    60a0:	ab 83       	std	Y+3, r26	; 0x03
    60a2:	bc 83       	std	Y+4, r27	; 0x04

        if( xTimeNow < xLastTime )
    60a4:	80 91 d1 12 	lds	r24, 0x12D1	; 0x8012d1 <xLastTime.2436>
    60a8:	90 91 d2 12 	lds	r25, 0x12D2	; 0x8012d2 <xLastTime.2436+0x1>
    60ac:	a0 91 d3 12 	lds	r26, 0x12D3	; 0x8012d3 <xLastTime.2436+0x2>
    60b0:	b0 91 d4 12 	lds	r27, 0x12D4	; 0x8012d4 <xLastTime.2436+0x3>
    60b4:	29 81       	ldd	r18, Y+1	; 0x01
    60b6:	3a 81       	ldd	r19, Y+2	; 0x02
    60b8:	4b 81       	ldd	r20, Y+3	; 0x03
    60ba:	5c 81       	ldd	r21, Y+4	; 0x04
    60bc:	28 17       	cp	r18, r24
    60be:	39 07       	cpc	r19, r25
    60c0:	4a 07       	cpc	r20, r26
    60c2:	5b 07       	cpc	r21, r27
    60c4:	38 f4       	brcc	.+14     	; 0x60d4 <prvSampleTimeNow+0x50>
        {
            prvSwitchTimerLists();
    60c6:	e6 d1       	rcall	.+972    	; 0x6494 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    60c8:	8d 81       	ldd	r24, Y+5	; 0x05
    60ca:	9e 81       	ldd	r25, Y+6	; 0x06
    60cc:	21 e0       	ldi	r18, 0x01	; 1
    60ce:	fc 01       	movw	r30, r24
    60d0:	20 83       	st	Z, r18
    60d2:	04 c0       	rjmp	.+8      	; 0x60dc <prvSampleTimeNow+0x58>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    60d4:	8d 81       	ldd	r24, Y+5	; 0x05
    60d6:	9e 81       	ldd	r25, Y+6	; 0x06
    60d8:	fc 01       	movw	r30, r24
    60da:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    60dc:	89 81       	ldd	r24, Y+1	; 0x01
    60de:	9a 81       	ldd	r25, Y+2	; 0x02
    60e0:	ab 81       	ldd	r26, Y+3	; 0x03
    60e2:	bc 81       	ldd	r27, Y+4	; 0x04
    60e4:	80 93 d1 12 	sts	0x12D1, r24	; 0x8012d1 <xLastTime.2436>
    60e8:	90 93 d2 12 	sts	0x12D2, r25	; 0x8012d2 <xLastTime.2436+0x1>
    60ec:	a0 93 d3 12 	sts	0x12D3, r26	; 0x8012d3 <xLastTime.2436+0x2>
    60f0:	b0 93 d4 12 	sts	0x12D4, r27	; 0x8012d4 <xLastTime.2436+0x3>

        return xTimeNow;
    60f4:	89 81       	ldd	r24, Y+1	; 0x01
    60f6:	9a 81       	ldd	r25, Y+2	; 0x02
    60f8:	ab 81       	ldd	r26, Y+3	; 0x03
    60fa:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    60fc:	bc 01       	movw	r22, r24
    60fe:	cd 01       	movw	r24, r26
    6100:	26 96       	adiw	r28, 0x06	; 6
    6102:	0f b6       	in	r0, 0x3f	; 63
    6104:	f8 94       	cli
    6106:	de bf       	out	0x3e, r29	; 62
    6108:	0f be       	out	0x3f, r0	; 63
    610a:	cd bf       	out	0x3d, r28	; 61
    610c:	df 91       	pop	r29
    610e:	cf 91       	pop	r28
    6110:	08 95       	ret

00006112 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    6112:	cf 92       	push	r12
    6114:	df 92       	push	r13
    6116:	ef 92       	push	r14
    6118:	ff 92       	push	r15
    611a:	0f 93       	push	r16
    611c:	1f 93       	push	r17
    611e:	cf 93       	push	r28
    6120:	df 93       	push	r29
    6122:	cd b7       	in	r28, 0x3d	; 61
    6124:	de b7       	in	r29, 0x3e	; 62
    6126:	2f 97       	sbiw	r28, 0x0f	; 15
    6128:	0f b6       	in	r0, 0x3f	; 63
    612a:	f8 94       	cli
    612c:	de bf       	out	0x3e, r29	; 62
    612e:	0f be       	out	0x3f, r0	; 63
    6130:	cd bf       	out	0x3d, r28	; 61
    6132:	9b 83       	std	Y+3, r25	; 0x03
    6134:	8a 83       	std	Y+2, r24	; 0x02
    6136:	4c 83       	std	Y+4, r20	; 0x04
    6138:	5d 83       	std	Y+5, r21	; 0x05
    613a:	6e 83       	std	Y+6, r22	; 0x06
    613c:	7f 83       	std	Y+7, r23	; 0x07
    613e:	08 87       	std	Y+8, r16	; 0x08
    6140:	19 87       	std	Y+9, r17	; 0x09
    6142:	2a 87       	std	Y+10, r18	; 0x0a
    6144:	3b 87       	std	Y+11, r19	; 0x0b
    6146:	cc 86       	std	Y+12, r12	; 0x0c
    6148:	dd 86       	std	Y+13, r13	; 0x0d
    614a:	ee 86       	std	Y+14, r14	; 0x0e
    614c:	ff 86       	std	Y+15, r15	; 0x0f
        BaseType_t xProcessTimerNow = pdFALSE;
    614e:	19 82       	std	Y+1, r1	; 0x01

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    6150:	2a 81       	ldd	r18, Y+2	; 0x02
    6152:	3b 81       	ldd	r19, Y+3	; 0x03
    6154:	8c 81       	ldd	r24, Y+4	; 0x04
    6156:	9d 81       	ldd	r25, Y+5	; 0x05
    6158:	ae 81       	ldd	r26, Y+6	; 0x06
    615a:	bf 81       	ldd	r27, Y+7	; 0x07
    615c:	f9 01       	movw	r30, r18
    615e:	82 83       	std	Z+2, r24	; 0x02
    6160:	93 83       	std	Z+3, r25	; 0x03
    6162:	a4 83       	std	Z+4, r26	; 0x04
    6164:	b5 83       	std	Z+5, r27	; 0x05
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    6166:	8a 81       	ldd	r24, Y+2	; 0x02
    6168:	9b 81       	ldd	r25, Y+3	; 0x03
    616a:	2a 81       	ldd	r18, Y+2	; 0x02
    616c:	3b 81       	ldd	r19, Y+3	; 0x03
    616e:	fc 01       	movw	r30, r24
    6170:	33 87       	std	Z+11, r19	; 0x0b
    6172:	22 87       	std	Z+10, r18	; 0x0a

        if( xNextExpiryTime <= xTimeNow )
    6174:	2c 81       	ldd	r18, Y+4	; 0x04
    6176:	3d 81       	ldd	r19, Y+5	; 0x05
    6178:	4e 81       	ldd	r20, Y+6	; 0x06
    617a:	5f 81       	ldd	r21, Y+7	; 0x07
    617c:	88 85       	ldd	r24, Y+8	; 0x08
    617e:	99 85       	ldd	r25, Y+9	; 0x09
    6180:	aa 85       	ldd	r26, Y+10	; 0x0a
    6182:	bb 85       	ldd	r27, Y+11	; 0x0b
    6184:	82 17       	cp	r24, r18
    6186:	93 07       	cpc	r25, r19
    6188:	a4 07       	cpc	r26, r20
    618a:	b5 07       	cpc	r27, r21
    618c:	40 f1       	brcs	.+80     	; 0x61de <prvInsertTimerInActiveList+0xcc>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    618e:	28 85       	ldd	r18, Y+8	; 0x08
    6190:	39 85       	ldd	r19, Y+9	; 0x09
    6192:	4a 85       	ldd	r20, Y+10	; 0x0a
    6194:	5b 85       	ldd	r21, Y+11	; 0x0b
    6196:	8c 85       	ldd	r24, Y+12	; 0x0c
    6198:	9d 85       	ldd	r25, Y+13	; 0x0d
    619a:	ae 85       	ldd	r26, Y+14	; 0x0e
    619c:	bf 85       	ldd	r27, Y+15	; 0x0f
    619e:	28 1b       	sub	r18, r24
    61a0:	39 0b       	sbc	r19, r25
    61a2:	4a 0b       	sbc	r20, r26
    61a4:	5b 0b       	sbc	r21, r27
    61a6:	8a 81       	ldd	r24, Y+2	; 0x02
    61a8:	9b 81       	ldd	r25, Y+3	; 0x03
    61aa:	fc 01       	movw	r30, r24
    61ac:	86 85       	ldd	r24, Z+14	; 0x0e
    61ae:	97 85       	ldd	r25, Z+15	; 0x0f
    61b0:	a0 89       	ldd	r26, Z+16	; 0x10
    61b2:	b1 89       	ldd	r27, Z+17	; 0x11
    61b4:	28 17       	cp	r18, r24
    61b6:	39 07       	cpc	r19, r25
    61b8:	4a 07       	cpc	r20, r26
    61ba:	5b 07       	cpc	r21, r27
    61bc:	18 f0       	brcs	.+6      	; 0x61c4 <prvInsertTimerInActiveList+0xb2>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    61be:	81 e0       	ldi	r24, 0x01	; 1
    61c0:	89 83       	std	Y+1, r24	; 0x01
    61c2:	36 c0       	rjmp	.+108    	; 0x6230 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    61c4:	8a 81       	ldd	r24, Y+2	; 0x02
    61c6:	9b 81       	ldd	r25, Y+3	; 0x03
    61c8:	9c 01       	movw	r18, r24
    61ca:	2e 5f       	subi	r18, 0xFE	; 254
    61cc:	3f 4f       	sbci	r19, 0xFF	; 255
    61ce:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <pxOverflowTimerList>
    61d2:	90 91 cc 12 	lds	r25, 0x12CC	; 0x8012cc <pxOverflowTimerList+0x1>
    61d6:	b9 01       	movw	r22, r18
    61d8:	0e 94 9a 09 	call	0x1334	; 0x1334 <vListInsert>
    61dc:	29 c0       	rjmp	.+82     	; 0x6230 <prvInsertTimerInActiveList+0x11e>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    61de:	28 85       	ldd	r18, Y+8	; 0x08
    61e0:	39 85       	ldd	r19, Y+9	; 0x09
    61e2:	4a 85       	ldd	r20, Y+10	; 0x0a
    61e4:	5b 85       	ldd	r21, Y+11	; 0x0b
    61e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    61e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    61ea:	ae 85       	ldd	r26, Y+14	; 0x0e
    61ec:	bf 85       	ldd	r27, Y+15	; 0x0f
    61ee:	28 17       	cp	r18, r24
    61f0:	39 07       	cpc	r19, r25
    61f2:	4a 07       	cpc	r20, r26
    61f4:	5b 07       	cpc	r21, r27
    61f6:	80 f4       	brcc	.+32     	; 0x6218 <prvInsertTimerInActiveList+0x106>
    61f8:	2c 81       	ldd	r18, Y+4	; 0x04
    61fa:	3d 81       	ldd	r19, Y+5	; 0x05
    61fc:	4e 81       	ldd	r20, Y+6	; 0x06
    61fe:	5f 81       	ldd	r21, Y+7	; 0x07
    6200:	8c 85       	ldd	r24, Y+12	; 0x0c
    6202:	9d 85       	ldd	r25, Y+13	; 0x0d
    6204:	ae 85       	ldd	r26, Y+14	; 0x0e
    6206:	bf 85       	ldd	r27, Y+15	; 0x0f
    6208:	28 17       	cp	r18, r24
    620a:	39 07       	cpc	r19, r25
    620c:	4a 07       	cpc	r20, r26
    620e:	5b 07       	cpc	r21, r27
    6210:	18 f0       	brcs	.+6      	; 0x6218 <prvInsertTimerInActiveList+0x106>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    6212:	81 e0       	ldi	r24, 0x01	; 1
    6214:	89 83       	std	Y+1, r24	; 0x01
    6216:	0c c0       	rjmp	.+24     	; 0x6230 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    6218:	8a 81       	ldd	r24, Y+2	; 0x02
    621a:	9b 81       	ldd	r25, Y+3	; 0x03
    621c:	9c 01       	movw	r18, r24
    621e:	2e 5f       	subi	r18, 0xFE	; 254
    6220:	3f 4f       	sbci	r19, 0xFF	; 255
    6222:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxCurrentTimerList>
    6226:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxCurrentTimerList+0x1>
    622a:	b9 01       	movw	r22, r18
    622c:	0e 94 9a 09 	call	0x1334	; 0x1334 <vListInsert>
            }
        }

        return xProcessTimerNow;
    6230:	89 81       	ldd	r24, Y+1	; 0x01
    }
    6232:	2f 96       	adiw	r28, 0x0f	; 15
    6234:	0f b6       	in	r0, 0x3f	; 63
    6236:	f8 94       	cli
    6238:	de bf       	out	0x3e, r29	; 62
    623a:	0f be       	out	0x3f, r0	; 63
    623c:	cd bf       	out	0x3d, r28	; 61
    623e:	df 91       	pop	r29
    6240:	cf 91       	pop	r28
    6242:	1f 91       	pop	r17
    6244:	0f 91       	pop	r16
    6246:	ff 90       	pop	r15
    6248:	ef 90       	pop	r14
    624a:	df 90       	pop	r13
    624c:	cf 90       	pop	r12
    624e:	08 95       	ret

00006250 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    6250:	cf 92       	push	r12
    6252:	df 92       	push	r13
    6254:	ef 92       	push	r14
    6256:	ff 92       	push	r15
    6258:	0f 93       	push	r16
    625a:	1f 93       	push	r17
    625c:	cf 93       	push	r28
    625e:	df 93       	push	r29
    6260:	cd b7       	in	r28, 0x3d	; 61
    6262:	de b7       	in	r29, 0x3e	; 62
    6264:	2f 97       	sbiw	r28, 0x0f	; 15
    6266:	0f b6       	in	r0, 0x3f	; 63
    6268:	f8 94       	cli
    626a:	de bf       	out	0x3e, r29	; 62
    626c:	0f be       	out	0x3f, r0	; 63
    626e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    6270:	f2 c0       	rjmp	.+484    	; 0x6456 <prvProcessReceivedCommands+0x206>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    6272:	88 85       	ldd	r24, Y+8	; 0x08
    6274:	88 23       	and	r24, r24
    6276:	0c f4       	brge	.+2      	; 0x627a <prvProcessReceivedCommands+0x2a>
    6278:	ee c0       	rjmp	.+476    	; 0x6456 <prvProcessReceivedCommands+0x206>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    627a:	8d 85       	ldd	r24, Y+13	; 0x0d
    627c:	9e 85       	ldd	r25, Y+14	; 0x0e
    627e:	9a 83       	std	Y+2, r25	; 0x02
    6280:	89 83       	std	Y+1, r24	; 0x01

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    6282:	89 81       	ldd	r24, Y+1	; 0x01
    6284:	9a 81       	ldd	r25, Y+2	; 0x02
    6286:	fc 01       	movw	r30, r24
    6288:	84 85       	ldd	r24, Z+12	; 0x0c
    628a:	95 85       	ldd	r25, Z+13	; 0x0d
    628c:	89 2b       	or	r24, r25
    628e:	29 f0       	breq	.+10     	; 0x629a <prvProcessReceivedCommands+0x4a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6290:	89 81       	ldd	r24, Y+1	; 0x01
    6292:	9a 81       	ldd	r25, Y+2	; 0x02
    6294:	02 96       	adiw	r24, 0x02	; 2
    6296:	0e 94 21 0a 	call	0x1442	; 0x1442 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    629a:	ce 01       	movw	r24, r28
    629c:	0f 96       	adiw	r24, 0x0f	; 15
    629e:	f2 de       	rcall	.-540    	; 0x6084 <prvSampleTimeNow>
    62a0:	dc 01       	movw	r26, r24
    62a2:	cb 01       	movw	r24, r22
    62a4:	8b 83       	std	Y+3, r24	; 0x03
    62a6:	9c 83       	std	Y+4, r25	; 0x04
    62a8:	ad 83       	std	Y+5, r26	; 0x05
    62aa:	be 83       	std	Y+6, r27	; 0x06

                switch( xMessage.xMessageID )
    62ac:	88 85       	ldd	r24, Y+8	; 0x08
    62ae:	08 2e       	mov	r0, r24
    62b0:	00 0c       	add	r0, r0
    62b2:	99 0b       	sbc	r25, r25
    62b4:	09 2e       	mov	r0, r25
    62b6:	00 0c       	add	r0, r0
    62b8:	aa 0b       	sbc	r26, r26
    62ba:	bb 0b       	sbc	r27, r27
    62bc:	40 e0       	ldi	r20, 0x00	; 0
    62be:	50 e0       	ldi	r21, 0x00	; 0
    62c0:	29 e0       	ldi	r18, 0x09	; 9
    62c2:	30 e0       	ldi	r19, 0x00	; 0
    62c4:	84 1b       	sub	r24, r20
    62c6:	95 0b       	sbc	r25, r21
    62c8:	28 17       	cp	r18, r24
    62ca:	39 07       	cpc	r19, r25
    62cc:	08 f4       	brcc	.+2      	; 0x62d0 <prvProcessReceivedCommands+0x80>
    62ce:	c2 c0       	rjmp	.+388    	; 0x6454 <prvProcessReceivedCommands+0x204>
    62d0:	fc 01       	movw	r30, r24
    62d2:	88 27       	eor	r24, r24
    62d4:	ee 58       	subi	r30, 0x8E	; 142
    62d6:	ff 4f       	sbci	r31, 0xFF	; 255
    62d8:	8f 4f       	sbci	r24, 0xFF	; 255
    62da:	0c 94 b7 44 	jmp	0x896e	; 0x896e <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    62de:	89 81       	ldd	r24, Y+1	; 0x01
    62e0:	9a 81       	ldd	r25, Y+2	; 0x02
    62e2:	fc 01       	movw	r30, r24
    62e4:	86 89       	ldd	r24, Z+22	; 0x16
    62e6:	28 2f       	mov	r18, r24
    62e8:	21 60       	ori	r18, 0x01	; 1
    62ea:	89 81       	ldd	r24, Y+1	; 0x01
    62ec:	9a 81       	ldd	r25, Y+2	; 0x02
    62ee:	fc 01       	movw	r30, r24
    62f0:	26 8b       	std	Z+22, r18	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    62f2:	e9 84       	ldd	r14, Y+9	; 0x09
    62f4:	fa 84       	ldd	r15, Y+10	; 0x0a
    62f6:	0b 85       	ldd	r16, Y+11	; 0x0b
    62f8:	1c 85       	ldd	r17, Y+12	; 0x0c
    62fa:	29 85       	ldd	r18, Y+9	; 0x09
    62fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    62fe:	4b 85       	ldd	r20, Y+11	; 0x0b
    6300:	5c 85       	ldd	r21, Y+12	; 0x0c
    6302:	89 81       	ldd	r24, Y+1	; 0x01
    6304:	9a 81       	ldd	r25, Y+2	; 0x02
    6306:	fc 01       	movw	r30, r24
    6308:	86 85       	ldd	r24, Z+14	; 0x0e
    630a:	97 85       	ldd	r25, Z+15	; 0x0f
    630c:	a0 89       	ldd	r26, Z+16	; 0x10
    630e:	b1 89       	ldd	r27, Z+17	; 0x11
    6310:	82 0f       	add	r24, r18
    6312:	93 1f       	adc	r25, r19
    6314:	a4 1f       	adc	r26, r20
    6316:	b5 1f       	adc	r27, r21
    6318:	2b 81       	ldd	r18, Y+3	; 0x03
    631a:	3c 81       	ldd	r19, Y+4	; 0x04
    631c:	4d 81       	ldd	r20, Y+5	; 0x05
    631e:	5e 81       	ldd	r21, Y+6	; 0x06
    6320:	e9 81       	ldd	r30, Y+1	; 0x01
    6322:	fa 81       	ldd	r31, Y+2	; 0x02
    6324:	67 01       	movw	r12, r14
    6326:	78 01       	movw	r14, r16
    6328:	89 01       	movw	r16, r18
    632a:	9a 01       	movw	r18, r20
    632c:	ac 01       	movw	r20, r24
    632e:	bd 01       	movw	r22, r26
    6330:	cf 01       	movw	r24, r30
    6332:	ef de       	rcall	.-546    	; 0x6112 <prvInsertTimerInActiveList>
    6334:	88 23       	and	r24, r24
    6336:	09 f4       	brne	.+2      	; 0x633a <prvProcessReceivedCommands+0xea>
    6338:	8e c0       	rjmp	.+284    	; 0x6456 <prvProcessReceivedCommands+0x206>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    633a:	89 81       	ldd	r24, Y+1	; 0x01
    633c:	9a 81       	ldd	r25, Y+2	; 0x02
    633e:	fc 01       	movw	r30, r24
    6340:	24 89       	ldd	r18, Z+20	; 0x14
    6342:	35 89       	ldd	r19, Z+21	; 0x15
    6344:	89 81       	ldd	r24, Y+1	; 0x01
    6346:	9a 81       	ldd	r25, Y+2	; 0x02
    6348:	f9 01       	movw	r30, r18
    634a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    634c:	89 81       	ldd	r24, Y+1	; 0x01
    634e:	9a 81       	ldd	r25, Y+2	; 0x02
    6350:	fc 01       	movw	r30, r24
    6352:	86 89       	ldd	r24, Z+22	; 0x16
    6354:	88 2f       	mov	r24, r24
    6356:	90 e0       	ldi	r25, 0x00	; 0
    6358:	84 70       	andi	r24, 0x04	; 4
    635a:	99 27       	eor	r25, r25
    635c:	89 2b       	or	r24, r25
    635e:	09 f4       	brne	.+2      	; 0x6362 <prvProcessReceivedCommands+0x112>
    6360:	7a c0       	rjmp	.+244    	; 0x6456 <prvProcessReceivedCommands+0x206>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    6362:	29 85       	ldd	r18, Y+9	; 0x09
    6364:	3a 85       	ldd	r19, Y+10	; 0x0a
    6366:	4b 85       	ldd	r20, Y+11	; 0x0b
    6368:	5c 85       	ldd	r21, Y+12	; 0x0c
    636a:	89 81       	ldd	r24, Y+1	; 0x01
    636c:	9a 81       	ldd	r25, Y+2	; 0x02
    636e:	fc 01       	movw	r30, r24
    6370:	86 85       	ldd	r24, Z+14	; 0x0e
    6372:	97 85       	ldd	r25, Z+15	; 0x0f
    6374:	a0 89       	ldd	r26, Z+16	; 0x10
    6376:	b1 89       	ldd	r27, Z+17	; 0x11
    6378:	82 0f       	add	r24, r18
    637a:	93 1f       	adc	r25, r19
    637c:	a4 1f       	adc	r26, r20
    637e:	b5 1f       	adc	r27, r21
    6380:	e9 81       	ldd	r30, Y+1	; 0x01
    6382:	fa 81       	ldd	r31, Y+2	; 0x02
    6384:	c1 2c       	mov	r12, r1
    6386:	d1 2c       	mov	r13, r1
    6388:	76 01       	movw	r14, r12
    638a:	00 e0       	ldi	r16, 0x00	; 0
    638c:	10 e0       	ldi	r17, 0x00	; 0
    638e:	9c 01       	movw	r18, r24
    6390:	ad 01       	movw	r20, r26
    6392:	60 e0       	ldi	r22, 0x00	; 0
    6394:	cf 01       	movw	r24, r30
    6396:	b2 dc       	rcall	.-1692   	; 0x5cfc <xTimerGenericCommand>
    6398:	8f 83       	std	Y+7, r24	; 0x07
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
    639a:	5d c0       	rjmp	.+186    	; 0x6456 <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    639c:	89 81       	ldd	r24, Y+1	; 0x01
    639e:	9a 81       	ldd	r25, Y+2	; 0x02
    63a0:	fc 01       	movw	r30, r24
    63a2:	86 89       	ldd	r24, Z+22	; 0x16
    63a4:	28 2f       	mov	r18, r24
    63a6:	2e 7f       	andi	r18, 0xFE	; 254
    63a8:	89 81       	ldd	r24, Y+1	; 0x01
    63aa:	9a 81       	ldd	r25, Y+2	; 0x02
    63ac:	fc 01       	movw	r30, r24
    63ae:	26 8b       	std	Z+22, r18	; 0x16
                        break;
    63b0:	52 c0       	rjmp	.+164    	; 0x6456 <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    63b2:	89 81       	ldd	r24, Y+1	; 0x01
    63b4:	9a 81       	ldd	r25, Y+2	; 0x02
    63b6:	fc 01       	movw	r30, r24
    63b8:	86 89       	ldd	r24, Z+22	; 0x16
    63ba:	28 2f       	mov	r18, r24
    63bc:	21 60       	ori	r18, 0x01	; 1
    63be:	89 81       	ldd	r24, Y+1	; 0x01
    63c0:	9a 81       	ldd	r25, Y+2	; 0x02
    63c2:	fc 01       	movw	r30, r24
    63c4:	26 8b       	std	Z+22, r18	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    63c6:	89 85       	ldd	r24, Y+9	; 0x09
    63c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    63ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    63cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    63ce:	29 81       	ldd	r18, Y+1	; 0x01
    63d0:	3a 81       	ldd	r19, Y+2	; 0x02
    63d2:	f9 01       	movw	r30, r18
    63d4:	86 87       	std	Z+14, r24	; 0x0e
    63d6:	97 87       	std	Z+15, r25	; 0x0f
    63d8:	a0 8b       	std	Z+16, r26	; 0x10
    63da:	b1 8b       	std	Z+17, r27	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    63dc:	89 81       	ldd	r24, Y+1	; 0x01
    63de:	9a 81       	ldd	r25, Y+2	; 0x02
    63e0:	fc 01       	movw	r30, r24
    63e2:	26 85       	ldd	r18, Z+14	; 0x0e
    63e4:	37 85       	ldd	r19, Z+15	; 0x0f
    63e6:	40 89       	ldd	r20, Z+16	; 0x10
    63e8:	51 89       	ldd	r21, Z+17	; 0x11
    63ea:	8b 81       	ldd	r24, Y+3	; 0x03
    63ec:	9c 81       	ldd	r25, Y+4	; 0x04
    63ee:	ad 81       	ldd	r26, Y+5	; 0x05
    63f0:	be 81       	ldd	r27, Y+6	; 0x06
    63f2:	82 0f       	add	r24, r18
    63f4:	93 1f       	adc	r25, r19
    63f6:	a4 1f       	adc	r26, r20
    63f8:	b5 1f       	adc	r27, r21
    63fa:	eb 80       	ldd	r14, Y+3	; 0x03
    63fc:	fc 80       	ldd	r15, Y+4	; 0x04
    63fe:	0d 81       	ldd	r16, Y+5	; 0x05
    6400:	1e 81       	ldd	r17, Y+6	; 0x06
    6402:	2b 81       	ldd	r18, Y+3	; 0x03
    6404:	3c 81       	ldd	r19, Y+4	; 0x04
    6406:	4d 81       	ldd	r20, Y+5	; 0x05
    6408:	5e 81       	ldd	r21, Y+6	; 0x06
    640a:	e9 81       	ldd	r30, Y+1	; 0x01
    640c:	fa 81       	ldd	r31, Y+2	; 0x02
    640e:	67 01       	movw	r12, r14
    6410:	78 01       	movw	r14, r16
    6412:	89 01       	movw	r16, r18
    6414:	9a 01       	movw	r18, r20
    6416:	ac 01       	movw	r20, r24
    6418:	bd 01       	movw	r22, r26
    641a:	cf 01       	movw	r24, r30
    641c:	7a de       	rcall	.-780    	; 0x6112 <prvInsertTimerInActiveList>
                        break;
    641e:	1b c0       	rjmp	.+54     	; 0x6456 <prvProcessReceivedCommands+0x206>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    6420:	89 81       	ldd	r24, Y+1	; 0x01
    6422:	9a 81       	ldd	r25, Y+2	; 0x02
    6424:	fc 01       	movw	r30, r24
    6426:	86 89       	ldd	r24, Z+22	; 0x16
    6428:	88 2f       	mov	r24, r24
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	82 70       	andi	r24, 0x02	; 2
    642e:	99 27       	eor	r25, r25
    6430:	89 2b       	or	r24, r25
    6432:	29 f4       	brne	.+10     	; 0x643e <prvProcessReceivedCommands+0x1ee>
                                {
                                    vPortFree( pxTimer );
    6434:	89 81       	ldd	r24, Y+1	; 0x01
    6436:	9a 81       	ldd	r25, Y+2	; 0x02
    6438:	0e 94 aa 07 	call	0xf54	; 0xf54 <vPortFree>
    643c:	0c c0       	rjmp	.+24     	; 0x6456 <prvProcessReceivedCommands+0x206>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    643e:	89 81       	ldd	r24, Y+1	; 0x01
    6440:	9a 81       	ldd	r25, Y+2	; 0x02
    6442:	fc 01       	movw	r30, r24
    6444:	86 89       	ldd	r24, Z+22	; 0x16
    6446:	28 2f       	mov	r18, r24
    6448:	2e 7f       	andi	r18, 0xFE	; 254
    644a:	89 81       	ldd	r24, Y+1	; 0x01
    644c:	9a 81       	ldd	r25, Y+2	; 0x02
    644e:	fc 01       	movw	r30, r24
    6450:	26 8b       	std	Z+22, r18	; 0x16
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
    6452:	01 c0       	rjmp	.+2      	; 0x6456 <prvProcessReceivedCommands+0x206>

                    default:
                        /* Don't expect to get here. */
                        break;
    6454:	00 00       	nop
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    6456:	80 91 cd 12 	lds	r24, 0x12CD	; 0x8012cd <xTimerQueue>
    645a:	90 91 ce 12 	lds	r25, 0x12CE	; 0x8012ce <xTimerQueue+0x1>
    645e:	be 01       	movw	r22, r28
    6460:	68 5f       	subi	r22, 0xF8	; 248
    6462:	7f 4f       	sbci	r23, 0xFF	; 255
    6464:	20 e0       	ldi	r18, 0x00	; 0
    6466:	30 e0       	ldi	r19, 0x00	; 0
    6468:	a9 01       	movw	r20, r18
    646a:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <xQueueReceive>
    646e:	88 23       	and	r24, r24
    6470:	09 f0       	breq	.+2      	; 0x6474 <prvProcessReceivedCommands+0x224>
    6472:	ff ce       	rjmp	.-514    	; 0x6272 <prvProcessReceivedCommands+0x22>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    6474:	00 00       	nop
    6476:	2f 96       	adiw	r28, 0x0f	; 15
    6478:	0f b6       	in	r0, 0x3f	; 63
    647a:	f8 94       	cli
    647c:	de bf       	out	0x3e, r29	; 62
    647e:	0f be       	out	0x3f, r0	; 63
    6480:	cd bf       	out	0x3d, r28	; 61
    6482:	df 91       	pop	r29
    6484:	cf 91       	pop	r28
    6486:	1f 91       	pop	r17
    6488:	0f 91       	pop	r16
    648a:	ff 90       	pop	r15
    648c:	ef 90       	pop	r14
    648e:	df 90       	pop	r13
    6490:	cf 90       	pop	r12
    6492:	08 95       	ret

00006494 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    6494:	cf 92       	push	r12
    6496:	df 92       	push	r13
    6498:	ef 92       	push	r14
    649a:	ff 92       	push	r15
    649c:	0f 93       	push	r16
    649e:	1f 93       	push	r17
    64a0:	cf 93       	push	r28
    64a2:	df 93       	push	r29
    64a4:	cd b7       	in	r28, 0x3d	; 61
    64a6:	de b7       	in	r29, 0x3e	; 62
    64a8:	2d 97       	sbiw	r28, 0x0d	; 13
    64aa:	0f b6       	in	r0, 0x3f	; 63
    64ac:	f8 94       	cli
    64ae:	de bf       	out	0x3e, r29	; 62
    64b0:	0f be       	out	0x3f, r0	; 63
    64b2:	cd bf       	out	0x3d, r28	; 61

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    64b4:	85 c0       	rjmp	.+266    	; 0x65c0 <prvSwitchTimerLists+0x12c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    64b6:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxCurrentTimerList>
    64ba:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxCurrentTimerList+0x1>
    64be:	fc 01       	movw	r30, r24
    64c0:	87 81       	ldd	r24, Z+7	; 0x07
    64c2:	90 85       	ldd	r25, Z+8	; 0x08
    64c4:	fc 01       	movw	r30, r24
    64c6:	80 81       	ld	r24, Z
    64c8:	91 81       	ldd	r25, Z+1	; 0x01
    64ca:	a2 81       	ldd	r26, Z+2	; 0x02
    64cc:	b3 81       	ldd	r27, Z+3	; 0x03
    64ce:	89 83       	std	Y+1, r24	; 0x01
    64d0:	9a 83       	std	Y+2, r25	; 0x02
    64d2:	ab 83       	std	Y+3, r26	; 0x03
    64d4:	bc 83       	std	Y+4, r27	; 0x04

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    64d6:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxCurrentTimerList>
    64da:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxCurrentTimerList+0x1>
    64de:	fc 01       	movw	r30, r24
    64e0:	87 81       	ldd	r24, Z+7	; 0x07
    64e2:	90 85       	ldd	r25, Z+8	; 0x08
    64e4:	fc 01       	movw	r30, r24
    64e6:	80 85       	ldd	r24, Z+8	; 0x08
    64e8:	91 85       	ldd	r25, Z+9	; 0x09
    64ea:	9e 83       	std	Y+6, r25	; 0x06
    64ec:	8d 83       	std	Y+5, r24	; 0x05
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    64ee:	8d 81       	ldd	r24, Y+5	; 0x05
    64f0:	9e 81       	ldd	r25, Y+6	; 0x06
    64f2:	02 96       	adiw	r24, 0x02	; 2
    64f4:	0e 94 21 0a 	call	0x1442	; 0x1442 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    64f8:	8d 81       	ldd	r24, Y+5	; 0x05
    64fa:	9e 81       	ldd	r25, Y+6	; 0x06
    64fc:	fc 01       	movw	r30, r24
    64fe:	24 89       	ldd	r18, Z+20	; 0x14
    6500:	35 89       	ldd	r19, Z+21	; 0x15
    6502:	8d 81       	ldd	r24, Y+5	; 0x05
    6504:	9e 81       	ldd	r25, Y+6	; 0x06
    6506:	f9 01       	movw	r30, r18
    6508:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    650a:	8d 81       	ldd	r24, Y+5	; 0x05
    650c:	9e 81       	ldd	r25, Y+6	; 0x06
    650e:	fc 01       	movw	r30, r24
    6510:	86 89       	ldd	r24, Z+22	; 0x16
    6512:	88 2f       	mov	r24, r24
    6514:	90 e0       	ldi	r25, 0x00	; 0
    6516:	84 70       	andi	r24, 0x04	; 4
    6518:	99 27       	eor	r25, r25
    651a:	89 2b       	or	r24, r25
    651c:	09 f4       	brne	.+2      	; 0x6520 <prvSwitchTimerLists+0x8c>
    651e:	50 c0       	rjmp	.+160    	; 0x65c0 <prvSwitchTimerLists+0x12c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    6520:	8d 81       	ldd	r24, Y+5	; 0x05
    6522:	9e 81       	ldd	r25, Y+6	; 0x06
    6524:	fc 01       	movw	r30, r24
    6526:	26 85       	ldd	r18, Z+14	; 0x0e
    6528:	37 85       	ldd	r19, Z+15	; 0x0f
    652a:	40 89       	ldd	r20, Z+16	; 0x10
    652c:	51 89       	ldd	r21, Z+17	; 0x11
    652e:	89 81       	ldd	r24, Y+1	; 0x01
    6530:	9a 81       	ldd	r25, Y+2	; 0x02
    6532:	ab 81       	ldd	r26, Y+3	; 0x03
    6534:	bc 81       	ldd	r27, Y+4	; 0x04
    6536:	82 0f       	add	r24, r18
    6538:	93 1f       	adc	r25, r19
    653a:	a4 1f       	adc	r26, r20
    653c:	b5 1f       	adc	r27, r21
    653e:	8f 83       	std	Y+7, r24	; 0x07
    6540:	98 87       	std	Y+8, r25	; 0x08
    6542:	a9 87       	std	Y+9, r26	; 0x09
    6544:	ba 87       	std	Y+10, r27	; 0x0a

                if( xReloadTime > xNextExpireTime )
    6546:	2f 81       	ldd	r18, Y+7	; 0x07
    6548:	38 85       	ldd	r19, Y+8	; 0x08
    654a:	49 85       	ldd	r20, Y+9	; 0x09
    654c:	5a 85       	ldd	r21, Y+10	; 0x0a
    654e:	89 81       	ldd	r24, Y+1	; 0x01
    6550:	9a 81       	ldd	r25, Y+2	; 0x02
    6552:	ab 81       	ldd	r26, Y+3	; 0x03
    6554:	bc 81       	ldd	r27, Y+4	; 0x04
    6556:	82 17       	cp	r24, r18
    6558:	93 07       	cpc	r25, r19
    655a:	a4 07       	cpc	r26, r20
    655c:	b5 07       	cpc	r27, r21
    655e:	f8 f4       	brcc	.+62     	; 0x659e <prvSwitchTimerLists+0x10a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    6560:	2d 81       	ldd	r18, Y+5	; 0x05
    6562:	3e 81       	ldd	r19, Y+6	; 0x06
    6564:	8f 81       	ldd	r24, Y+7	; 0x07
    6566:	98 85       	ldd	r25, Y+8	; 0x08
    6568:	a9 85       	ldd	r26, Y+9	; 0x09
    656a:	ba 85       	ldd	r27, Y+10	; 0x0a
    656c:	f9 01       	movw	r30, r18
    656e:	82 83       	std	Z+2, r24	; 0x02
    6570:	93 83       	std	Z+3, r25	; 0x03
    6572:	a4 83       	std	Z+4, r26	; 0x04
    6574:	b5 83       	std	Z+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    6576:	8d 81       	ldd	r24, Y+5	; 0x05
    6578:	9e 81       	ldd	r25, Y+6	; 0x06
    657a:	2d 81       	ldd	r18, Y+5	; 0x05
    657c:	3e 81       	ldd	r19, Y+6	; 0x06
    657e:	fc 01       	movw	r30, r24
    6580:	33 87       	std	Z+11, r19	; 0x0b
    6582:	22 87       	std	Z+10, r18	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    6584:	8d 81       	ldd	r24, Y+5	; 0x05
    6586:	9e 81       	ldd	r25, Y+6	; 0x06
    6588:	9c 01       	movw	r18, r24
    658a:	2e 5f       	subi	r18, 0xFE	; 254
    658c:	3f 4f       	sbci	r19, 0xFF	; 255
    658e:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxCurrentTimerList>
    6592:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxCurrentTimerList+0x1>
    6596:	b9 01       	movw	r22, r18
    6598:	0e 94 9a 09 	call	0x1334	; 0x1334 <vListInsert>
    659c:	11 c0       	rjmp	.+34     	; 0x65c0 <prvSwitchTimerLists+0x12c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    659e:	89 81       	ldd	r24, Y+1	; 0x01
    65a0:	9a 81       	ldd	r25, Y+2	; 0x02
    65a2:	ab 81       	ldd	r26, Y+3	; 0x03
    65a4:	bc 81       	ldd	r27, Y+4	; 0x04
    65a6:	ed 81       	ldd	r30, Y+5	; 0x05
    65a8:	fe 81       	ldd	r31, Y+6	; 0x06
    65aa:	c1 2c       	mov	r12, r1
    65ac:	d1 2c       	mov	r13, r1
    65ae:	76 01       	movw	r14, r12
    65b0:	00 e0       	ldi	r16, 0x00	; 0
    65b2:	10 e0       	ldi	r17, 0x00	; 0
    65b4:	9c 01       	movw	r18, r24
    65b6:	ad 01       	movw	r20, r26
    65b8:	60 e0       	ldi	r22, 0x00	; 0
    65ba:	cf 01       	movw	r24, r30
    65bc:	9f db       	rcall	.-2242   	; 0x5cfc <xTimerGenericCommand>
    65be:	8b 87       	std	Y+11, r24	; 0x0b

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    65c0:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxCurrentTimerList>
    65c4:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxCurrentTimerList+0x1>
    65c8:	fc 01       	movw	r30, r24
    65ca:	80 81       	ld	r24, Z
    65cc:	88 23       	and	r24, r24
    65ce:	09 f0       	breq	.+2      	; 0x65d2 <prvSwitchTimerLists+0x13e>
    65d0:	72 cf       	rjmp	.-284    	; 0x64b6 <prvSwitchTimerLists+0x22>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
    65d2:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <pxCurrentTimerList>
    65d6:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <pxCurrentTimerList+0x1>
    65da:	9d 87       	std	Y+13, r25	; 0x0d
    65dc:	8c 87       	std	Y+12, r24	; 0x0c
        pxCurrentTimerList = pxOverflowTimerList;
    65de:	80 91 cb 12 	lds	r24, 0x12CB	; 0x8012cb <pxOverflowTimerList>
    65e2:	90 91 cc 12 	lds	r25, 0x12CC	; 0x8012cc <pxOverflowTimerList+0x1>
    65e6:	90 93 ca 12 	sts	0x12CA, r25	; 0x8012ca <pxCurrentTimerList+0x1>
    65ea:	80 93 c9 12 	sts	0x12C9, r24	; 0x8012c9 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    65ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    65f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    65f2:	90 93 cc 12 	sts	0x12CC, r25	; 0x8012cc <pxOverflowTimerList+0x1>
    65f6:	80 93 cb 12 	sts	0x12CB, r24	; 0x8012cb <pxOverflowTimerList>
    }
    65fa:	00 00       	nop
    65fc:	2d 96       	adiw	r28, 0x0d	; 13
    65fe:	0f b6       	in	r0, 0x3f	; 63
    6600:	f8 94       	cli
    6602:	de bf       	out	0x3e, r29	; 62
    6604:	0f be       	out	0x3f, r0	; 63
    6606:	cd bf       	out	0x3d, r28	; 61
    6608:	df 91       	pop	r29
    660a:	cf 91       	pop	r28
    660c:	1f 91       	pop	r17
    660e:	0f 91       	pop	r16
    6610:	ff 90       	pop	r15
    6612:	ef 90       	pop	r14
    6614:	df 90       	pop	r13
    6616:	cf 90       	pop	r12
    6618:	08 95       	ret

0000661a <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    661a:	cf 93       	push	r28
    661c:	df 93       	push	r29
    661e:	cd b7       	in	r28, 0x3d	; 61
    6620:	de b7       	in	r29, 0x3e	; 62
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    6622:	0f b6       	in	r0, 0x3f	; 63
    6624:	f8 94       	cli
    6626:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    6628:	80 91 cd 12 	lds	r24, 0x12CD	; 0x8012cd <xTimerQueue>
    662c:	90 91 ce 12 	lds	r25, 0x12CE	; 0x8012ce <xTimerQueue+0x1>
    6630:	89 2b       	or	r24, r25
    6632:	e9 f4       	brne	.+58     	; 0x666e <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
    6634:	83 eb       	ldi	r24, 0xB3	; 179
    6636:	92 e1       	ldi	r25, 0x12	; 18
    6638:	0e 94 4d 09 	call	0x129a	; 0x129a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    663c:	8e eb       	ldi	r24, 0xBE	; 190
    663e:	92 e1       	ldi	r25, 0x12	; 18
    6640:	0e 94 4d 09 	call	0x129a	; 0x129a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    6644:	83 eb       	ldi	r24, 0xB3	; 179
    6646:	92 e1       	ldi	r25, 0x12	; 18
    6648:	90 93 ca 12 	sts	0x12CA, r25	; 0x8012ca <pxCurrentTimerList+0x1>
    664c:	80 93 c9 12 	sts	0x12C9, r24	; 0x8012c9 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    6650:	8e eb       	ldi	r24, 0xBE	; 190
    6652:	92 e1       	ldi	r25, 0x12	; 18
    6654:	90 93 cc 12 	sts	0x12CC, r25	; 0x8012cc <pxOverflowTimerList+0x1>
    6658:	80 93 cb 12 	sts	0x12CB, r24	; 0x8012cb <pxOverflowTimerList>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    665c:	40 e0       	ldi	r20, 0x00	; 0
    665e:	67 e0       	ldi	r22, 0x07	; 7
    6660:	8a e0       	ldi	r24, 0x0A	; 10
    6662:	0e 94 bc 0c 	call	0x1978	; 0x1978 <xQueueGenericCreate>
    6666:	90 93 ce 12 	sts	0x12CE, r25	; 0x8012ce <xTimerQueue+0x1>
    666a:	80 93 cd 12 	sts	0x12CD, r24	; 0x8012cd <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    666e:	0f 90       	pop	r0
    6670:	0f be       	out	0x3f, r0	; 63
    }
    6672:	00 00       	nop
    6674:	df 91       	pop	r29
    6676:	cf 91       	pop	r28
    6678:	08 95       	ret

0000667a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    667a:	cf 93       	push	r28
    667c:	df 93       	push	r29
    667e:	cd b7       	in	r28, 0x3d	; 61
    6680:	de b7       	in	r29, 0x3e	; 62
}
    6682:	00 00       	nop
    6684:	df 91       	pop	r29
    6686:	cf 91       	pop	r28
    6688:	08 95       	ret

0000668a <prvSetMainLedOn>:

/**
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
    668a:	cf 93       	push	r28
    668c:	df 93       	push	r29
    668e:	cd b7       	in	r28, 0x3d	; 61
    6690:	de b7       	in	r29, 0x3e	; 62
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    6692:	84 e2       	ldi	r24, 0x24	; 36
    6694:	90 e0       	ldi	r25, 0x00	; 0
    6696:	24 e2       	ldi	r18, 0x24	; 36
    6698:	30 e0       	ldi	r19, 0x00	; 0
    669a:	f9 01       	movw	r30, r18
    669c:	20 81       	ld	r18, Z
    669e:	20 68       	ori	r18, 0x80	; 128
    66a0:	fc 01       	movw	r30, r24
    66a2:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    66a4:	85 e2       	ldi	r24, 0x25	; 37
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	25 e2       	ldi	r18, 0x25	; 37
    66aa:	30 e0       	ldi	r19, 0x00	; 0
    66ac:	f9 01       	movw	r30, r18
    66ae:	20 81       	ld	r18, Z
    66b0:	20 68       	ori	r18, 0x80	; 128
    66b2:	fc 01       	movw	r30, r24
    66b4:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

}
    66b6:	00 00       	nop
    66b8:	df 91       	pop	r29
    66ba:	cf 91       	pop	r28
    66bc:	08 95       	ret

000066be <prvBlinkMainLed>:

/**
 * Private function to blink board led to use it in application hooks
 */
void prvBlinkMainLed( void ) 
{
    66be:	cf 93       	push	r28
    66c0:	df 93       	push	r29
    66c2:	cd b7       	in	r28, 0x3d	; 61
    66c4:	de b7       	in	r29, 0x3e	; 62

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    66c6:	83 e2       	ldi	r24, 0x23	; 35
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	23 e2       	ldi	r18, 0x23	; 35
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	f9 01       	movw	r30, r18
    66d0:	20 81       	ld	r18, Z
    66d2:	20 68       	ori	r18, 0x80	; 128
    66d4:	fc 01       	movw	r30, r24
    66d6:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle.

#endif

}
    66d8:	00 00       	nop
    66da:	df 91       	pop	r29
    66dc:	cf 91       	pop	r28
    66de:	08 95       	ret

000066e0 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    66e0:	cf 93       	push	r28
    66e2:	df 93       	push	r29
    66e4:	cd b7       	in	r28, 0x3d	; 61
    66e6:	de b7       	in	r29, 0x3e	; 62
    66e8:	2e 97       	sbiw	r28, 0x0e	; 14
    66ea:	0f b6       	in	r0, 0x3f	; 63
    66ec:	f8 94       	cli
    66ee:	de bf       	out	0x3e, r29	; 62
    66f0:	0f be       	out	0x3f, r0	; 63
    66f2:	cd bf       	out	0x3d, r28	; 61
    prvSetMainLedOn(); // Main LED on.
    66f4:	ca df       	rcall	.-108    	; 0x668a <prvSetMainLedOn>
    66f6:	80 e0       	ldi	r24, 0x00	; 0
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	a8 e4       	ldi	r26, 0x48	; 72
    66fc:	b2 e4       	ldi	r27, 0x42	; 66
    66fe:	89 83       	std	Y+1, r24	; 0x01
    6700:	9a 83       	std	Y+2, r25	; 0x02
    6702:	ab 83       	std	Y+3, r26	; 0x03
    6704:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6706:	20 e0       	ldi	r18, 0x00	; 0
    6708:	30 e0       	ldi	r19, 0x00	; 0
    670a:	4a e7       	ldi	r20, 0x7A	; 122
    670c:	55 e4       	ldi	r21, 0x45	; 69
    670e:	69 81       	ldd	r22, Y+1	; 0x01
    6710:	7a 81       	ldd	r23, Y+2	; 0x02
    6712:	8b 81       	ldd	r24, Y+3	; 0x03
    6714:	9c 81       	ldd	r25, Y+4	; 0x04
    6716:	ab d4       	rcall	.+2390   	; 0x706e <__mulsf3>
    6718:	dc 01       	movw	r26, r24
    671a:	cb 01       	movw	r24, r22
    671c:	8d 83       	std	Y+5, r24	; 0x05
    671e:	9e 83       	std	Y+6, r25	; 0x06
    6720:	af 83       	std	Y+7, r26	; 0x07
    6722:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6724:	20 e0       	ldi	r18, 0x00	; 0
    6726:	30 e0       	ldi	r19, 0x00	; 0
    6728:	40 e8       	ldi	r20, 0x80	; 128
    672a:	5f e3       	ldi	r21, 0x3F	; 63
    672c:	6d 81       	ldd	r22, Y+5	; 0x05
    672e:	7e 81       	ldd	r23, Y+6	; 0x06
    6730:	8f 81       	ldd	r24, Y+7	; 0x07
    6732:	98 85       	ldd	r25, Y+8	; 0x08
    6734:	1b d4       	rcall	.+2102   	; 0x6f6c <__cmpsf2>
    6736:	88 23       	and	r24, r24
    6738:	2c f4       	brge	.+10     	; 0x6744 <vApplicationMallocFailedHook+0x64>
		__ticks = 1;
    673a:	81 e0       	ldi	r24, 0x01	; 1
    673c:	90 e0       	ldi	r25, 0x00	; 0
    673e:	9a 87       	std	Y+10, r25	; 0x0a
    6740:	89 87       	std	Y+9, r24	; 0x09
    6742:	3b c0       	rjmp	.+118    	; 0x67ba <vApplicationMallocFailedHook+0xda>
	else if (__tmp > 65535)
    6744:	20 e0       	ldi	r18, 0x00	; 0
    6746:	3f ef       	ldi	r19, 0xFF	; 255
    6748:	4f e7       	ldi	r20, 0x7F	; 127
    674a:	57 e4       	ldi	r21, 0x47	; 71
    674c:	6d 81       	ldd	r22, Y+5	; 0x05
    674e:	7e 81       	ldd	r23, Y+6	; 0x06
    6750:	8f 81       	ldd	r24, Y+7	; 0x07
    6752:	98 85       	ldd	r25, Y+8	; 0x08
    6754:	88 d4       	rcall	.+2320   	; 0x7066 <__gesf2>
    6756:	18 16       	cp	r1, r24
    6758:	3c f5       	brge	.+78     	; 0x67a8 <vApplicationMallocFailedHook+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    675a:	20 e0       	ldi	r18, 0x00	; 0
    675c:	30 e0       	ldi	r19, 0x00	; 0
    675e:	40 e2       	ldi	r20, 0x20	; 32
    6760:	51 e4       	ldi	r21, 0x41	; 65
    6762:	69 81       	ldd	r22, Y+1	; 0x01
    6764:	7a 81       	ldd	r23, Y+2	; 0x02
    6766:	8b 81       	ldd	r24, Y+3	; 0x03
    6768:	9c 81       	ldd	r25, Y+4	; 0x04
    676a:	81 d4       	rcall	.+2306   	; 0x706e <__mulsf3>
    676c:	dc 01       	movw	r26, r24
    676e:	cb 01       	movw	r24, r22
    6770:	bc 01       	movw	r22, r24
    6772:	cd 01       	movw	r24, r26
    6774:	ff d3       	rcall	.+2046   	; 0x6f74 <__fixunssfsi>
    6776:	dc 01       	movw	r26, r24
    6778:	cb 01       	movw	r24, r22
    677a:	9a 87       	std	Y+10, r25	; 0x0a
    677c:	89 87       	std	Y+9, r24	; 0x09
    677e:	0f c0       	rjmp	.+30     	; 0x679e <vApplicationMallocFailedHook+0xbe>
    6780:	80 e9       	ldi	r24, 0x90	; 144
    6782:	91 e0       	ldi	r25, 0x01	; 1
    6784:	9c 87       	std	Y+12, r25	; 0x0c
    6786:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6788:	8b 85       	ldd	r24, Y+11	; 0x0b
    678a:	9c 85       	ldd	r25, Y+12	; 0x0c
    678c:	01 97       	sbiw	r24, 0x01	; 1
    678e:	f1 f7       	brne	.-4      	; 0x678c <vApplicationMallocFailedHook+0xac>
    6790:	9c 87       	std	Y+12, r25	; 0x0c
    6792:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6794:	89 85       	ldd	r24, Y+9	; 0x09
    6796:	9a 85       	ldd	r25, Y+10	; 0x0a
    6798:	01 97       	sbiw	r24, 0x01	; 1
    679a:	9a 87       	std	Y+10, r25	; 0x0a
    679c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    679e:	89 85       	ldd	r24, Y+9	; 0x09
    67a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    67a2:	89 2b       	or	r24, r25
    67a4:	69 f7       	brne	.-38     	; 0x6780 <vApplicationMallocFailedHook+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67a6:	13 c0       	rjmp	.+38     	; 0x67ce <vApplicationMallocFailedHook+0xee>
    67a8:	6d 81       	ldd	r22, Y+5	; 0x05
    67aa:	7e 81       	ldd	r23, Y+6	; 0x06
    67ac:	8f 81       	ldd	r24, Y+7	; 0x07
    67ae:	98 85       	ldd	r25, Y+8	; 0x08
    67b0:	e1 d3       	rcall	.+1986   	; 0x6f74 <__fixunssfsi>
    67b2:	dc 01       	movw	r26, r24
    67b4:	cb 01       	movw	r24, r22
    67b6:	9a 87       	std	Y+10, r25	; 0x0a
    67b8:	89 87       	std	Y+9, r24	; 0x09
    67ba:	89 85       	ldd	r24, Y+9	; 0x09
    67bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    67be:	9e 87       	std	Y+14, r25	; 0x0e
    67c0:	8d 87       	std	Y+13, r24	; 0x0d
    67c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    67c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    67c6:	01 97       	sbiw	r24, 0x01	; 1
    67c8:	f1 f7       	brne	.-4      	; 0x67c6 <vApplicationMallocFailedHook+0xe6>
    67ca:	9e 87       	std	Y+14, r25	; 0x0e
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    67cc:	8d 87       	std	Y+13, r24	; 0x0d
    67ce:	77 df       	rcall	.-274    	; 0x66be <prvBlinkMainLed>
    }
    67d0:	92 cf       	rjmp	.-220    	; 0x66f6 <vApplicationMallocFailedHook+0x16>

000067d2 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    char * pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{
    67d2:	cf 93       	push	r28
    67d4:	df 93       	push	r29
    67d6:	cd b7       	in	r28, 0x3d	; 61
    67d8:	de b7       	in	r29, 0x3e	; 62
    67da:	62 97       	sbiw	r28, 0x12	; 18
    67dc:	0f b6       	in	r0, 0x3f	; 63
    67de:	f8 94       	cli
    67e0:	de bf       	out	0x3e, r29	; 62
    67e2:	0f be       	out	0x3f, r0	; 63
    67e4:	cd bf       	out	0x3d, r28	; 61
    67e6:	98 8b       	std	Y+16, r25	; 0x10
    67e8:	8f 87       	std	Y+15, r24	; 0x0f
    67ea:	7a 8b       	std	Y+18, r23	; 0x12
    67ec:	69 8b       	std	Y+17, r22	; 0x11

    prvSetMainLedOn(); // Main LED on.
    67ee:	4d df       	rcall	.-358    	; 0x668a <prvSetMainLedOn>
    67f0:	80 e0       	ldi	r24, 0x00	; 0
    67f2:	90 e0       	ldi	r25, 0x00	; 0
    67f4:	aa ef       	ldi	r26, 0xFA	; 250
    67f6:	b4 e4       	ldi	r27, 0x44	; 68
    67f8:	89 83       	std	Y+1, r24	; 0x01
    67fa:	9a 83       	std	Y+2, r25	; 0x02
    67fc:	ab 83       	std	Y+3, r26	; 0x03
    67fe:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6800:	20 e0       	ldi	r18, 0x00	; 0
    6802:	30 e0       	ldi	r19, 0x00	; 0
    6804:	4a e7       	ldi	r20, 0x7A	; 122
    6806:	55 e4       	ldi	r21, 0x45	; 69
    6808:	69 81       	ldd	r22, Y+1	; 0x01
    680a:	7a 81       	ldd	r23, Y+2	; 0x02
    680c:	8b 81       	ldd	r24, Y+3	; 0x03
    680e:	9c 81       	ldd	r25, Y+4	; 0x04
    6810:	2e d4       	rcall	.+2140   	; 0x706e <__mulsf3>
    6812:	dc 01       	movw	r26, r24
    6814:	cb 01       	movw	r24, r22
    6816:	8d 83       	std	Y+5, r24	; 0x05
    6818:	9e 83       	std	Y+6, r25	; 0x06
    681a:	af 83       	std	Y+7, r26	; 0x07
    681c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    681e:	20 e0       	ldi	r18, 0x00	; 0
    6820:	30 e0       	ldi	r19, 0x00	; 0
    6822:	40 e8       	ldi	r20, 0x80	; 128
    6824:	5f e3       	ldi	r21, 0x3F	; 63
    6826:	6d 81       	ldd	r22, Y+5	; 0x05
    6828:	7e 81       	ldd	r23, Y+6	; 0x06
    682a:	8f 81       	ldd	r24, Y+7	; 0x07
    682c:	98 85       	ldd	r25, Y+8	; 0x08
    682e:	9e d3       	rcall	.+1852   	; 0x6f6c <__cmpsf2>
    6830:	88 23       	and	r24, r24
    6832:	2c f4       	brge	.+10     	; 0x683e <vApplicationStackOverflowHook+0x6c>
		__ticks = 1;
    6834:	81 e0       	ldi	r24, 0x01	; 1
    6836:	90 e0       	ldi	r25, 0x00	; 0
    6838:	9a 87       	std	Y+10, r25	; 0x0a
    683a:	89 87       	std	Y+9, r24	; 0x09
    683c:	3b c0       	rjmp	.+118    	; 0x68b4 <vApplicationStackOverflowHook+0xe2>
	else if (__tmp > 65535)
    683e:	20 e0       	ldi	r18, 0x00	; 0
    6840:	3f ef       	ldi	r19, 0xFF	; 255
    6842:	4f e7       	ldi	r20, 0x7F	; 127
    6844:	57 e4       	ldi	r21, 0x47	; 71
    6846:	6d 81       	ldd	r22, Y+5	; 0x05
    6848:	7e 81       	ldd	r23, Y+6	; 0x06
    684a:	8f 81       	ldd	r24, Y+7	; 0x07
    684c:	98 85       	ldd	r25, Y+8	; 0x08
    684e:	0b d4       	rcall	.+2070   	; 0x7066 <__gesf2>
    6850:	18 16       	cp	r1, r24
    6852:	3c f5       	brge	.+78     	; 0x68a2 <vApplicationStackOverflowHook+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6854:	20 e0       	ldi	r18, 0x00	; 0
    6856:	30 e0       	ldi	r19, 0x00	; 0
    6858:	40 e2       	ldi	r20, 0x20	; 32
    685a:	51 e4       	ldi	r21, 0x41	; 65
    685c:	69 81       	ldd	r22, Y+1	; 0x01
    685e:	7a 81       	ldd	r23, Y+2	; 0x02
    6860:	8b 81       	ldd	r24, Y+3	; 0x03
    6862:	9c 81       	ldd	r25, Y+4	; 0x04
    6864:	04 d4       	rcall	.+2056   	; 0x706e <__mulsf3>
    6866:	dc 01       	movw	r26, r24
    6868:	cb 01       	movw	r24, r22
    686a:	bc 01       	movw	r22, r24
    686c:	cd 01       	movw	r24, r26
    686e:	82 d3       	rcall	.+1796   	; 0x6f74 <__fixunssfsi>
    6870:	dc 01       	movw	r26, r24
    6872:	cb 01       	movw	r24, r22
    6874:	9a 87       	std	Y+10, r25	; 0x0a
    6876:	89 87       	std	Y+9, r24	; 0x09
    6878:	0f c0       	rjmp	.+30     	; 0x6898 <vApplicationStackOverflowHook+0xc6>
    687a:	80 e9       	ldi	r24, 0x90	; 144
    687c:	91 e0       	ldi	r25, 0x01	; 1
    687e:	9c 87       	std	Y+12, r25	; 0x0c
    6880:	8b 87       	std	Y+11, r24	; 0x0b
    6882:	8b 85       	ldd	r24, Y+11	; 0x0b
    6884:	9c 85       	ldd	r25, Y+12	; 0x0c
    6886:	01 97       	sbiw	r24, 0x01	; 1
    6888:	f1 f7       	brne	.-4      	; 0x6886 <vApplicationStackOverflowHook+0xb4>
    688a:	9c 87       	std	Y+12, r25	; 0x0c
    688c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    688e:	89 85       	ldd	r24, Y+9	; 0x09
    6890:	9a 85       	ldd	r25, Y+10	; 0x0a
    6892:	01 97       	sbiw	r24, 0x01	; 1
    6894:	9a 87       	std	Y+10, r25	; 0x0a
    6896:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6898:	89 85       	ldd	r24, Y+9	; 0x09
    689a:	9a 85       	ldd	r25, Y+10	; 0x0a
    689c:	89 2b       	or	r24, r25
    689e:	69 f7       	brne	.-38     	; 0x687a <vApplicationStackOverflowHook+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68a0:	13 c0       	rjmp	.+38     	; 0x68c8 <vApplicationStackOverflowHook+0xf6>
    68a2:	6d 81       	ldd	r22, Y+5	; 0x05
    68a4:	7e 81       	ldd	r23, Y+6	; 0x06
    68a6:	8f 81       	ldd	r24, Y+7	; 0x07
    68a8:	98 85       	ldd	r25, Y+8	; 0x08
    68aa:	64 d3       	rcall	.+1736   	; 0x6f74 <__fixunssfsi>
    68ac:	dc 01       	movw	r26, r24
    68ae:	cb 01       	movw	r24, r22
    68b0:	9a 87       	std	Y+10, r25	; 0x0a
    68b2:	89 87       	std	Y+9, r24	; 0x09
    68b4:	89 85       	ldd	r24, Y+9	; 0x09
    68b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    68b8:	9e 87       	std	Y+14, r25	; 0x0e
    68ba:	8d 87       	std	Y+13, r24	; 0x0d
    68bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    68be:	9e 85       	ldd	r25, Y+14	; 0x0e
    68c0:	01 97       	sbiw	r24, 0x01	; 1
    68c2:	f1 f7       	brne	.-4      	; 0x68c0 <vApplicationStackOverflowHook+0xee>
    68c4:	9e 87       	std	Y+14, r25	; 0x0e

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    68c6:	8d 87       	std	Y+13, r24	; 0x0d
    68c8:	fa de       	rcall	.-524    	; 0x66be <prvBlinkMainLed>
    }
    68ca:	92 cf       	rjmp	.-220    	; 0x67f0 <vApplicationStackOverflowHook+0x1e>

000068cc <create_semaphores>:
void DL_handler_update(void *pvParameters );
void DL_handler_receive( void *pvParameters );



  void create_semaphores(void){
    68cc:	0f 93       	push	r16
    68ce:	cf 93       	push	r28
    68d0:	df 93       	push	r29
    68d2:	cd b7       	in	r28, 0x3d	; 61
    68d4:	de b7       	in	r29, 0x3e	; 62

   // Semaphores initialization
	if(NULL == sysInitMutex){
    68d6:	80 91 42 14 	lds	r24, 0x1442	; 0x801442 <sysInitMutex>
    68da:	90 91 43 14 	lds	r25, 0x1443	; 0x801443 <sysInitMutex+0x1>
    68de:	89 2b       	or	r24, r25
    68e0:	99 f4       	brne	.+38     	; 0x6908 <create_semaphores+0x3c>
		sysInitMutex = xSemaphoreCreateMutex();
    68e2:	81 e0       	ldi	r24, 0x01	; 1
    68e4:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <xQueueCreateMutex>
    68e8:	90 93 43 14 	sts	0x1443, r25	; 0x801443 <sysInitMutex+0x1>
    68ec:	80 93 42 14 	sts	0x1442, r24	; 0x801442 <sysInitMutex>
		xSemaphoreGive(sysInitMutex);
    68f0:	80 91 42 14 	lds	r24, 0x1442	; 0x801442 <sysInitMutex>
    68f4:	90 91 43 14 	lds	r25, 0x1443	; 0x801443 <sysInitMutex+0x1>
    68f8:	00 e0       	ldi	r16, 0x00	; 0
    68fa:	20 e0       	ldi	r18, 0x00	; 0
    68fc:	30 e0       	ldi	r19, 0x00	; 0
    68fe:	a9 01       	movw	r20, r18
    6900:	60 e0       	ldi	r22, 0x00	; 0
    6902:	70 e0       	ldi	r23, 0x00	; 0
    6904:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
	}
	
	if(NULL == measureCo2Mutex){
    6908:	80 91 3c 14 	lds	r24, 0x143C	; 0x80143c <measureCo2Mutex>
    690c:	90 91 3d 14 	lds	r25, 0x143D	; 0x80143d <measureCo2Mutex+0x1>
    6910:	89 2b       	or	r24, r25
    6912:	81 f4       	brne	.+32     	; 0x6934 <create_semaphores+0x68>
		measureCo2Mutex = xSemaphoreCreateMutex();
    6914:	81 e0       	ldi	r24, 0x01	; 1
    6916:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <xQueueCreateMutex>
    691a:	90 93 3d 14 	sts	0x143D, r25	; 0x80143d <measureCo2Mutex+0x1>
    691e:	80 93 3c 14 	sts	0x143C, r24	; 0x80143c <measureCo2Mutex>
		xSemaphoreTake(measureCo2Mutex, portMAX_DELAY);
    6922:	80 91 3c 14 	lds	r24, 0x143C	; 0x80143c <measureCo2Mutex>
    6926:	90 91 3d 14 	lds	r25, 0x143D	; 0x80143d <measureCo2Mutex+0x1>
    692a:	4f ef       	ldi	r20, 0xFF	; 255
    692c:	5f ef       	ldi	r21, 0xFF	; 255
    692e:	ba 01       	movw	r22, r20
    6930:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
	}
	if ( NULL == DownLinkUpdateMutex ){ 
    6934:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <DownLinkUpdateMutex>
    6938:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <DownLinkUpdateMutex+0x1>
    693c:	89 2b       	or	r24, r25
    693e:	81 f4       	brne	.+32     	; 0x6960 <create_semaphores+0x94>
	    DownLinkUpdateMutex = xSemaphoreCreateMutex(); 
    6940:	81 e0       	ldi	r24, 0x01	; 1
    6942:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <xQueueCreateMutex>
    6946:	90 93 31 14 	sts	0x1431, r25	; 0x801431 <DownLinkUpdateMutex+0x1>
    694a:	80 93 30 14 	sts	0x1430, r24	; 0x801430 <DownLinkUpdateMutex>
        xSemaphoreTake(DownLinkUpdateMutex,portMAX_DELAY);
    694e:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <DownLinkUpdateMutex>
    6952:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <DownLinkUpdateMutex+0x1>
    6956:	4f ef       	ldi	r20, 0xFF	; 255
    6958:	5f ef       	ldi	r21, 0xFF	; 255
    695a:	ba 01       	movw	r22, r20
    695c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
    }
    if ( NULL == DownLinkReceiveMutex ){   
    6960:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <DownLinkReceiveMutex>
    6964:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <DownLinkReceiveMutex+0x1>
    6968:	89 2b       	or	r24, r25
    696a:	81 f4       	brne	.+32     	; 0x698c <create_semaphores+0xc0>
	    DownLinkReceiveMutex = xSemaphoreCreateMutex();  
    696c:	81 e0       	ldi	r24, 0x01	; 1
    696e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <xQueueCreateMutex>
    6972:	90 93 39 14 	sts	0x1439, r25	; 0x801439 <DownLinkReceiveMutex+0x1>
    6976:	80 93 38 14 	sts	0x1438, r24	; 0x801438 <DownLinkReceiveMutex>
        xSemaphoreTake(DownLinkReceiveMutex,portMAX_DELAY);
    697a:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <DownLinkReceiveMutex>
    697e:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <DownLinkReceiveMutex+0x1>
    6982:	4f ef       	ldi	r20, 0xFF	; 255
    6984:	5f ef       	ldi	r21, 0xFF	; 255
    6986:	ba 01       	movw	r22, r20
    6988:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
}
	if ( NULL == UpLinkSendMutex ){
    698c:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <UpLinkSendMutex>
    6990:	90 91 2b 14 	lds	r25, 0x142B	; 0x80142b <UpLinkSendMutex+0x1>
    6994:	89 2b       	or	r24, r25
    6996:	81 f4       	brne	.+32     	; 0x69b8 <create_semaphores+0xec>
		UpLinkSendMutex = xSemaphoreCreateMutex();
    6998:	81 e0       	ldi	r24, 0x01	; 1
    699a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <xQueueCreateMutex>
    699e:	90 93 2b 14 	sts	0x142B, r25	; 0x80142b <UpLinkSendMutex+0x1>
    69a2:	80 93 2a 14 	sts	0x142A, r24	; 0x80142a <UpLinkSendMutex>
		xSemaphoreTake(UpLinkSendMutex, portMAX_DELAY);
    69a6:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <UpLinkSendMutex>
    69aa:	90 91 2b 14 	lds	r25, 0x142B	; 0x80142b <UpLinkSendMutex+0x1>
    69ae:	4f ef       	ldi	r20, 0xFF	; 255
    69b0:	5f ef       	ldi	r21, 0xFF	; 255
    69b2:	ba 01       	movw	r22, r20
    69b4:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
	}
	
	if(NULL == UpLinkReceiveMutex){
    69b8:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <UpLinkReceiveMutex>
    69bc:	90 91 2d 14 	lds	r25, 0x142D	; 0x80142d <UpLinkReceiveMutex+0x1>
    69c0:	89 2b       	or	r24, r25
    69c2:	81 f4       	brne	.+32     	; 0x69e4 <create_semaphores+0x118>
		UpLinkReceiveMutex = xSemaphoreCreateMutex();
    69c4:	81 e0       	ldi	r24, 0x01	; 1
    69c6:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <xQueueCreateMutex>
    69ca:	90 93 2d 14 	sts	0x142D, r25	; 0x80142d <UpLinkReceiveMutex+0x1>
    69ce:	80 93 2c 14 	sts	0x142C, r24	; 0x80142c <UpLinkReceiveMutex>
		xSemaphoreTake(UpLinkReceiveMutex, portMAX_DELAY);
    69d2:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <UpLinkReceiveMutex>
    69d6:	90 91 2d 14 	lds	r25, 0x142D	; 0x80142d <UpLinkReceiveMutex+0x1>
    69da:	4f ef       	ldi	r20, 0xFF	; 255
    69dc:	5f ef       	ldi	r21, 0xFF	; 255
    69de:	ba 01       	movw	r22, r20
    69e0:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
	}
	
	if(NULL == putsMutex){
    69e4:	80 91 3e 14 	lds	r24, 0x143E	; 0x80143e <putsMutex>
    69e8:	90 91 3f 14 	lds	r25, 0x143F	; 0x80143f <putsMutex+0x1>
    69ec:	89 2b       	or	r24, r25
    69ee:	99 f4       	brne	.+38     	; 0x6a16 <create_semaphores+0x14a>
		putsMutex = xSemaphoreCreateMutex();
    69f0:	81 e0       	ldi	r24, 0x01	; 1
    69f2:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <xQueueCreateMutex>
    69f6:	90 93 3f 14 	sts	0x143F, r25	; 0x80143f <putsMutex+0x1>
    69fa:	80 93 3e 14 	sts	0x143E, r24	; 0x80143e <putsMutex>
		xSemaphoreGive( putsMutex );
    69fe:	80 91 3e 14 	lds	r24, 0x143E	; 0x80143e <putsMutex>
    6a02:	90 91 3f 14 	lds	r25, 0x143F	; 0x80143f <putsMutex+0x1>
    6a06:	00 e0       	ldi	r16, 0x00	; 0
    6a08:	20 e0       	ldi	r18, 0x00	; 0
    6a0a:	30 e0       	ldi	r19, 0x00	; 0
    6a0c:	a9 01       	movw	r20, r18
    6a0e:	60 e0       	ldi	r22, 0x00	; 0
    6a10:	70 e0       	ldi	r23, 0x00	; 0
    6a12:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
	}
}
    6a16:	00 00       	nop
    6a18:	df 91       	pop	r29
    6a1a:	cf 91       	pop	r28
    6a1c:	0f 91       	pop	r16
    6a1e:	08 95       	ret

00006a20 <create_event_groups>:
  void create_event_groups(void){
    6a20:	cf 93       	push	r28
    6a22:	df 93       	push	r29
    6a24:	cd b7       	in	r28, 0x3d	; 61
    6a26:	de b7       	in	r29, 0x3e	; 62
	measureEventGroup = xEventGroupCreate();
    6a28:	0e 94 94 03 	call	0x728	; 0x728 <xEventGroupCreate>
    6a2c:	90 93 d6 12 	sts	0x12D6, r25	; 0x8012d6 <measureEventGroup+0x1>
    6a30:	80 93 d5 12 	sts	0x12D5, r24	; 0x8012d5 <measureEventGroup>
	readyEventGroup = xEventGroupCreate();
    6a34:	0e 94 94 03 	call	0x728	; 0x728 <xEventGroupCreate>
    6a38:	90 93 d8 12 	sts	0x12D8, r25	; 0x8012d8 <readyEventGroup+0x1>
    6a3c:	80 93 d7 12 	sts	0x12D7, r24	; 0x8012d7 <readyEventGroup>
}
    6a40:	00 00       	nop
    6a42:	df 91       	pop	r29
    6a44:	cf 91       	pop	r28
    6a46:	08 95       	ret

00006a48 <create_message_buffers>:
void create_message_buffers(void){
    6a48:	cf 93       	push	r28
    6a4a:	df 93       	push	r29
    6a4c:	cd b7       	in	r28, 0x3d	; 61
    6a4e:	de b7       	in	r29, 0x3e	; 62
	UpLinkMessageBuffer = xMessageBufferCreate(UpLinkSize);
    6a50:	84 e0       	ldi	r24, 0x04	; 4
    6a52:	90 e0       	ldi	r25, 0x00	; 0
    6a54:	41 e0       	ldi	r20, 0x01	; 1
    6a56:	60 e0       	ldi	r22, 0x00	; 0
    6a58:	70 e0       	ldi	r23, 0x00	; 0
    6a5a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <xStreamBufferGenericCreate>
    6a5e:	90 93 da 12 	sts	0x12DA, r25	; 0x8012da <UpLinkMessageBuffer+0x1>
    6a62:	80 93 d9 12 	sts	0x12D9, r24	; 0x8012d9 <UpLinkMessageBuffer>
	DownLinkMessageBuffer = xMessageBufferCreate(DownLinkSize);
    6a66:	8c e2       	ldi	r24, 0x2C	; 44
    6a68:	90 e0       	ldi	r25, 0x00	; 0
    6a6a:	41 e0       	ldi	r20, 0x01	; 1
    6a6c:	60 e0       	ldi	r22, 0x00	; 0
    6a6e:	70 e0       	ldi	r23, 0x00	; 0
    6a70:	0e 94 6e 12 	call	0x24dc	; 0x24dc <xStreamBufferGenericCreate>
    6a74:	90 93 dc 12 	sts	0x12DC, r25	; 0x8012dc <DownLinkMessageBuffer+0x1>
    6a78:	80 93 db 12 	sts	0x12DB, r24	; 0x8012db <DownLinkMessageBuffer>
}
    6a7c:	00 00       	nop
    6a7e:	df 91       	pop	r29
    6a80:	cf 91       	pop	r28
    6a82:	08 95       	ret

00006a84 <create_tasks>:

   void create_tasks(void){
    6a84:	ef 92       	push	r14
    6a86:	ff 92       	push	r15
    6a88:	0f 93       	push	r16
    6a8a:	cf 93       	push	r28
    6a8c:	df 93       	push	r29
    6a8e:	cd b7       	in	r28, 0x3d	; 61
    6a90:	de b7       	in	r29, 0x3e	; 62
   xTaskCreate(
    6a92:	e1 2c       	mov	r14, r1
    6a94:	f1 2c       	mov	r15, r1
    6a96:	03 e0       	ldi	r16, 0x03	; 3
    6a98:	20 e0       	ldi	r18, 0x00	; 0
    6a9a:	30 e0       	ldi	r19, 0x00	; 0
    6a9c:	40 ec       	ldi	r20, 0xC0	; 192
    6a9e:	50 e0       	ldi	r21, 0x00	; 0
    6aa0:	6c ea       	ldi	r22, 0xAC	; 172
    6aa2:	73 e0       	ldi	r23, 0x03	; 3
    6aa4:	88 ef       	ldi	r24, 0xF8	; 248
    6aa6:	95 e3       	ldi	r25, 0x35	; 53
    6aa8:	0e 94 30 18 	call	0x3060	; 0x3060 <xTaskCreate>
	,  "Trigger CO2 Measurement Task"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  3
	,  NULL );
    xTaskCreate(
    6aac:	e1 2c       	mov	r14, r1
    6aae:	f1 2c       	mov	r15, r1
    6ab0:	03 e0       	ldi	r16, 0x03	; 3
    6ab2:	20 e0       	ldi	r18, 0x00	; 0
    6ab4:	30 e0       	ldi	r19, 0x00	; 0
    6ab6:	40 ec       	ldi	r20, 0xC0	; 192
    6ab8:	50 e0       	ldi	r21, 0x00	; 0
    6aba:	69 ec       	ldi	r22, 0xC9	; 201
    6abc:	73 e0       	ldi	r23, 0x03	; 3
    6abe:	86 e1       	ldi	r24, 0x16	; 22
    6ac0:	97 e3       	ldi	r25, 0x37	; 55
    6ac2:	0e 94 30 18 	call	0x3060	; 0x3060 <xTaskCreate>
	,  "UpLink Handler Send"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL  // Params
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
   xTaskCreate(
    6ac6:	e1 2c       	mov	r14, r1
    6ac8:	f1 2c       	mov	r15, r1
    6aca:	03 e0       	ldi	r16, 0x03	; 3
    6acc:	20 e0       	ldi	r18, 0x00	; 0
    6ace:	30 e0       	ldi	r19, 0x00	; 0
    6ad0:	40 ec       	ldi	r20, 0xC0	; 192
    6ad2:	50 e0       	ldi	r21, 0x00	; 0
    6ad4:	6d ed       	ldi	r22, 0xDD	; 221
    6ad6:	73 e0       	ldi	r23, 0x03	; 3
    6ad8:	8d e6       	ldi	r24, 0x6D	; 109
    6ada:	96 e3       	ldi	r25, 0x36	; 54
    6adc:	0e 94 30 18 	call	0x3060	; 0x3060 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

}
    6ae0:	00 00       	nop
    6ae2:	df 91       	pop	r29
    6ae4:	cf 91       	pop	r28
    6ae6:	0f 91       	pop	r16
    6ae8:	ff 90       	pop	r15
    6aea:	ef 90       	pop	r14
    6aec:	08 95       	ret

00006aee <mutexPuts>:
/*-----------------------------------------------------------*/
void mutexPuts(char* str){
    6aee:	0f 93       	push	r16
    6af0:	cf 93       	push	r28
    6af2:	df 93       	push	r29
    6af4:	1f 92       	push	r1
    6af6:	1f 92       	push	r1
    6af8:	cd b7       	in	r28, 0x3d	; 61
    6afa:	de b7       	in	r29, 0x3e	; 62
    6afc:	9a 83       	std	Y+2, r25	; 0x02
    6afe:	89 83       	std	Y+1, r24	; 0x01
	if(xSemaphoreTake(putsMutex, portMAX_DELAY) == pdTRUE){
    6b00:	80 91 3e 14 	lds	r24, 0x143E	; 0x80143e <putsMutex>
    6b04:	90 91 3f 14 	lds	r25, 0x143F	; 0x80143f <putsMutex+0x1>
    6b08:	4f ef       	ldi	r20, 0xFF	; 255
    6b0a:	5f ef       	ldi	r21, 0xFF	; 255
    6b0c:	ba 01       	movw	r22, r20
    6b0e:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
    6b12:	81 30       	cpi	r24, 0x01	; 1
    6b14:	81 f4       	brne	.+32     	; 0x6b36 <mutexPuts+0x48>
		puts(str);
    6b16:	89 81       	ldd	r24, Y+1	; 0x01
    6b18:	9a 81       	ldd	r25, Y+2	; 0x02
    6b1a:	0e 94 56 46 	call	0x8cac	; 0x8cac <puts>
		xSemaphoreGive(putsMutex);
    6b1e:	80 91 3e 14 	lds	r24, 0x143E	; 0x80143e <putsMutex>
    6b22:	90 91 3f 14 	lds	r25, 0x143F	; 0x80143f <putsMutex+0x1>
    6b26:	00 e0       	ldi	r16, 0x00	; 0
    6b28:	20 e0       	ldi	r18, 0x00	; 0
    6b2a:	30 e0       	ldi	r19, 0x00	; 0
    6b2c:	a9 01       	movw	r20, r18
    6b2e:	60 e0       	ldi	r22, 0x00	; 0
    6b30:	70 e0       	ldi	r23, 0x00	; 0
    6b32:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
		
	}
}
    6b36:	00 00       	nop
    6b38:	0f 90       	pop	r0
    6b3a:	0f 90       	pop	r0
    6b3c:	df 91       	pop	r29
    6b3e:	cf 91       	pop	r28
    6b40:	0f 91       	pop	r16
    6b42:	08 95       	ret

00006b44 <initialiseSystem>:

    
/*-----------------------------------------------------------*/
void initialiseSystem( void *pvParameters ){
    6b44:	0f 93       	push	r16
    6b46:	cf 93       	push	r28
    6b48:	df 93       	push	r29
    6b4a:	1f 92       	push	r1
    6b4c:	1f 92       	push	r1
    6b4e:	cd b7       	in	r28, 0x3d	; 61
    6b50:	de b7       	in	r29, 0x3e	; 62
    6b52:	9a 83       	std	Y+2, r25	; 0x02
    6b54:	89 83       	std	Y+1, r24	; 0x01
	create_semaphores();
    6b56:	ba de       	rcall	.-652    	; 0x68cc <create_semaphores>

	xSemaphoreTake(sysInitMutex, portMAX_DELAY);
    6b58:	80 91 42 14 	lds	r24, 0x1442	; 0x801442 <sysInitMutex>
    6b5c:	90 91 43 14 	lds	r25, 0x1443	; 0x801443 <sysInitMutex+0x1>
    6b60:	4f ef       	ldi	r20, 0xFF	; 255
    6b62:	5f ef       	ldi	r21, 0xFF	; 255
    6b64:	ba 01       	movw	r22, r20
    6b66:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
	
	// Set output ports for LEDs used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    6b6a:	81 e2       	ldi	r24, 0x21	; 33
    6b6c:	90 e0       	ldi	r25, 0x00	; 0
    6b6e:	21 e2       	ldi	r18, 0x21	; 33
    6b70:	30 e0       	ldi	r19, 0x00	; 0
    6b72:	f9 01       	movw	r30, r18
    6b74:	20 81       	ld	r18, Z
    6b76:	21 68       	ori	r18, 0x81	; 129
    6b78:	fc 01       	movw	r30, r24
    6b7a:	20 83       	st	Z, r18

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    6b7c:	80 e0       	ldi	r24, 0x00	; 0
    6b7e:	0e 94 a4 41 	call	0x8348	; 0x8348 <stdio_initialise>
	
	create_event_groups();
	
	create_message_buffers();
    6b82:	4e df       	rcall	.-356    	; 0x6a20 <create_event_groups>
    6b84:	61 df       	rcall	.-318    	; 0x6a48 <create_message_buffers>

	// LoRaWAN initialization
	// Status LEDs driver
	status_leds_initialise(5); // Priority 5 for internal task
    6b86:	85 e0       	ldi	r24, 0x05	; 5
    6b88:	0e 94 ab 42 	call	0x8556	; 0x8556 <status_leds_initialise>
	
	// Initialize the LoRaWAN driver with down-link buffer
	lora_driver_initialise(1, DownLinkMessageBuffer);
    6b8c:	80 91 db 12 	lds	r24, 0x12DB	; 0x8012db <DownLinkMessageBuffer>
    6b90:	90 91 dc 12 	lds	r25, 0x12DC	; 0x8012dc <DownLinkMessageBuffer+0x1>
    6b94:	bc 01       	movw	r22, r24
    6b96:	81 e0       	ldi	r24, 0x01	; 1
    6b98:	14 d4       	rcall	.+2088   	; 0x73c2 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	
	UL_handler_create(UpLinkMessageBuffer);
    6b9a:	80 91 d9 12 	lds	r24, 0x12D9	; 0x8012d9 <UpLinkMessageBuffer>
    6b9e:	90 91 da 12 	lds	r25, 0x12DA	; 0x8012da <UpLinkMessageBuffer+0x1>
    6ba2:	0e 94 a3 01 	call	0x346	; 0x346 <UL_handler_create>
	
	CO2_handler_create();
    6ba6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <CO2_handler_create>
	
	xSemaphoreGive(sysInitMutex);
    6baa:	80 91 42 14 	lds	r24, 0x1442	; 0x801442 <sysInitMutex>
    6bae:	90 91 43 14 	lds	r25, 0x1443	; 0x801443 <sysInitMutex+0x1>
    6bb2:	00 e0       	ldi	r16, 0x00	; 0
    6bb4:	20 e0       	ldi	r18, 0x00	; 0
    6bb6:	30 e0       	ldi	r19, 0x00	; 0
    6bb8:	a9 01       	movw	r20, r18
    6bba:	60 e0       	ldi	r22, 0x00	; 0
    6bbc:	70 e0       	ldi	r23, 0x00	; 0
    6bbe:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
	mutexPuts("Program Started!!\n");
    6bc2:	85 ef       	ldi	r24, 0xF5	; 245
    6bc4:	93 e0       	ldi	r25, 0x03	; 3
    6bc6:	93 df       	rcall	.-218    	; 0x6aee <mutexPuts>
	xSemaphoreGive(UpLinkReceiveMutex);
    6bc8:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <UpLinkReceiveMutex>
    6bcc:	90 91 2d 14 	lds	r25, 0x142D	; 0x80142d <UpLinkReceiveMutex+0x1>
    6bd0:	00 e0       	ldi	r16, 0x00	; 0
    6bd2:	20 e0       	ldi	r18, 0x00	; 0
    6bd4:	30 e0       	ldi	r19, 0x00	; 0
    6bd6:	a9 01       	movw	r20, r18
    6bd8:	60 e0       	ldi	r22, 0x00	; 0
    6bda:	70 e0       	ldi	r23, 0x00	; 0
    6bdc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
	create_tasks();
    6be0:	51 df       	rcall	.-350    	; 0x6a84 <create_tasks>
}
    6be2:	00 00       	nop
    6be4:	0f 90       	pop	r0
    6be6:	0f 90       	pop	r0
    6be8:	df 91       	pop	r29
    6bea:	cf 91       	pop	r28
    6bec:	0f 91       	pop	r16
    6bee:	08 95       	ret

00006bf0 <trigger_CO2_measurement_task>:
/*-----------------------------------------------------------*/
void trigger_CO2_measurement_task( void *pvParameters ){
    6bf0:	cf 92       	push	r12
    6bf2:	df 92       	push	r13
    6bf4:	ef 92       	push	r14
    6bf6:	ff 92       	push	r15
    6bf8:	0f 93       	push	r16
    6bfa:	cf 93       	push	r28
    6bfc:	df 93       	push	r29
    6bfe:	cd b7       	in	r28, 0x3d	; 61
    6c00:	de b7       	in	r29, 0x3e	; 62
    6c02:	c1 54       	subi	r28, 0x41	; 65
    6c04:	d1 09       	sbc	r29, r1
    6c06:	0f b6       	in	r0, 0x3f	; 63
    6c08:	f8 94       	cli
    6c0a:	de bf       	out	0x3e, r29	; 62
    6c0c:	0f be       	out	0x3f, r0	; 63
    6c0e:	cd bf       	out	0x3d, r28	; 61
    6c10:	9e 01       	movw	r18, r28
    6c12:	20 5c       	subi	r18, 0xC0	; 192
    6c14:	3f 4f       	sbci	r19, 0xFF	; 255
    6c16:	f9 01       	movw	r30, r18
    6c18:	91 83       	std	Z+1, r25	; 0x01
    6c1a:	80 83       	st	Z, r24
	
	for(;;)
	{
		xSemaphoreTake(UpLinkReceiveMutex, portMAX_DELAY);
    6c1c:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <UpLinkReceiveMutex>
    6c20:	90 91 2d 14 	lds	r25, 0x142D	; 0x80142d <UpLinkReceiveMutex+0x1>
    6c24:	4f ef       	ldi	r20, 0xFF	; 255
    6c26:	5f ef       	ldi	r21, 0xFF	; 255
    6c28:	ba 01       	movw	r22, r20
    6c2a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
		xEventGroupClearBits(readyEventGroup,BIT_TASK_CO2_READY);
    6c2e:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <readyEventGroup>
    6c32:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <readyEventGroup+0x1>
    6c36:	42 e0       	ldi	r20, 0x02	; 2
    6c38:	50 e0       	ldi	r21, 0x00	; 0
    6c3a:	60 e0       	ldi	r22, 0x00	; 0
    6c3c:	70 e0       	ldi	r23, 0x00	; 0
    6c3e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <xEventGroupClearBits>
		xEventGroupSetBits(measureEventGroup,BIT_TASK_CO2_MEASURE);
    6c42:	80 91 d5 12 	lds	r24, 0x12D5	; 0x8012d5 <measureEventGroup>
    6c46:	90 91 d6 12 	lds	r25, 0x12D6	; 0x8012d6 <measureEventGroup+0x1>
    6c4a:	41 e0       	ldi	r20, 0x01	; 1
    6c4c:	50 e0       	ldi	r21, 0x00	; 0
    6c4e:	60 e0       	ldi	r22, 0x00	; 0
    6c50:	70 e0       	ldi	r23, 0x00	; 0
    6c52:	0e 94 39 05 	call	0xa72	; 0xa72 <xEventGroupSetBits>
		
		//wait for ready bits from sensors(later when there will be more sensors it will have to handle different situations(see class diagram video))
		xEventGroupWaitBits(
    6c56:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <readyEventGroup>
    6c5a:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <readyEventGroup+0x1>
    6c5e:	cc 24       	eor	r12, r12
    6c60:	ca 94       	dec	r12
    6c62:	dc 2c       	mov	r13, r12
    6c64:	76 01       	movw	r14, r12
    6c66:	01 e0       	ldi	r16, 0x01	; 1
    6c68:	21 e0       	ldi	r18, 0x01	; 1
    6c6a:	42 e0       	ldi	r20, 0x02	; 2
    6c6c:	50 e0       	ldi	r21, 0x00	; 0
    6c6e:	60 e0       	ldi	r22, 0x00	; 0
    6c70:	70 e0       	ldi	r23, 0x00	; 0
    6c72:	0e 94 b5 03 	call	0x76a	; 0x76a <xEventGroupWaitBits>
		BIT_TASK_CO2_READY,
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		
		xEventGroupClearBits(measureEventGroup,BIT_TASK_CO2_MEASURE);
    6c76:	80 91 d5 12 	lds	r24, 0x12D5	; 0x8012d5 <measureEventGroup>
    6c7a:	90 91 d6 12 	lds	r25, 0x12D6	; 0x8012d6 <measureEventGroup+0x1>
    6c7e:	41 e0       	ldi	r20, 0x01	; 1
    6c80:	50 e0       	ldi	r21, 0x00	; 0
    6c82:	60 e0       	ldi	r22, 0x00	; 0
    6c84:	70 e0       	ldi	r23, 0x00	; 0
    6c86:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <xEventGroupClearBits>
		char buf[63];
		sprintf(buf, "CO2 Measurement: %d", getCO2());
    6c8a:	0e 94 41 01 	call	0x282	; 0x282 <getCO2>
    6c8e:	29 2f       	mov	r18, r25
    6c90:	2f 93       	push	r18
    6c92:	8f 93       	push	r24
    6c94:	88 e0       	ldi	r24, 0x08	; 8
    6c96:	94 e0       	ldi	r25, 0x04	; 4
    6c98:	89 2f       	mov	r24, r25
    6c9a:	8f 93       	push	r24
    6c9c:	88 e0       	ldi	r24, 0x08	; 8
    6c9e:	94 e0       	ldi	r25, 0x04	; 4
    6ca0:	8f 93       	push	r24
    6ca2:	ce 01       	movw	r24, r28
    6ca4:	01 96       	adiw	r24, 0x01	; 1
    6ca6:	9f 93       	push	r25
    6ca8:	8f 93       	push	r24
    6caa:	0e 94 86 46 	call	0x8d0c	; 0x8d0c <sprintf>
    6cae:	0f 90       	pop	r0
    6cb0:	0f 90       	pop	r0
    6cb2:	0f 90       	pop	r0
    6cb4:	0f 90       	pop	r0
    6cb6:	0f 90       	pop	r0
    6cb8:	0f 90       	pop	r0
		mutexPuts(buf);
    6cba:	ce 01       	movw	r24, r28
    6cbc:	01 96       	adiw	r24, 0x01	; 1
    6cbe:	17 df       	rcall	.-466    	; 0x6aee <mutexPuts>
		xSemaphoreGive(measureCo2Mutex);
    6cc0:	80 91 3c 14 	lds	r24, 0x143C	; 0x80143c <measureCo2Mutex>
    6cc4:	90 91 3d 14 	lds	r25, 0x143D	; 0x80143d <measureCo2Mutex+0x1>
    6cc8:	00 e0       	ldi	r16, 0x00	; 0
    6cca:	20 e0       	ldi	r18, 0x00	; 0
    6ccc:	30 e0       	ldi	r19, 0x00	; 0
    6cce:	a9 01       	movw	r20, r18
    6cd0:	60 e0       	ldi	r22, 0x00	; 0
    6cd2:	70 e0       	ldi	r23, 0x00	; 0
    6cd4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
	}
    6cd8:	a1 cf       	rjmp	.-190    	; 0x6c1c <trigger_CO2_measurement_task+0x2c>

00006cda <DL_handler_update>:
}
/*-----------------------------------------------------------*/


void DL_handler_update(void* pvParameters ){
    6cda:	0f 93       	push	r16
    6cdc:	1f 93       	push	r17
    6cde:	cf 93       	push	r28
    6ce0:	df 93       	push	r29
    6ce2:	cd b7       	in	r28, 0x3d	; 61
    6ce4:	de b7       	in	r29, 0x3e	; 62
    6ce6:	a2 97       	sbiw	r28, 0x22	; 34
    6ce8:	0f b6       	in	r0, 0x3f	; 63
    6cea:	f8 94       	cli
    6cec:	de bf       	out	0x3e, r29	; 62
    6cee:	0f be       	out	0x3f, r0	; 63
    6cf0:	cd bf       	out	0x3d, r28	; 61
    6cf2:	9a a3       	std	Y+34, r25	; 0x22
    6cf4:	89 a3       	std	Y+33, r24	; 0x21
printf("update");
    6cf6:	8c e1       	ldi	r24, 0x1C	; 28
    6cf8:	94 e0       	ldi	r25, 0x04	; 4
    6cfa:	89 2f       	mov	r24, r25
    6cfc:	8f 93       	push	r24
    6cfe:	8c e1       	ldi	r24, 0x1C	; 28
    6d00:	94 e0       	ldi	r25, 0x04	; 4
    6d02:	8f 93       	push	r24
    6d04:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
    6d08:	0f 90       	pop	r0
    6d0a:	0f 90       	pop	r0
xSemaphoreTake( DownLinkUpdateMutex , portMAX_DELAY);
    6d0c:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <DownLinkUpdateMutex>
    6d10:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <DownLinkUpdateMutex+0x1>
    6d14:	4f ef       	ldi	r20, 0xFF	; 255
    6d16:	5f ef       	ldi	r21, 0xFF	; 255
    6d18:	ba 01       	movw	r22, r20
    6d1a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
SensorDataPackage_t sensorDataPackage = SensorDataPackage_create();
    6d1e:	0e 94 4c 01 	call	0x298	; 0x298 <SensorDataPackage_create>
    6d22:	9a 83       	std	Y+2, r25	; 0x02
    6d24:	89 83       	std	Y+1, r24	; 0x01
lora_driver_payload_t downlinkPayload;
size_t xReceivedBytes;
const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );
    6d26:	81 e0       	ldi	r24, 0x01	; 1
    6d28:	90 e0       	ldi	r25, 0x00	; 0
    6d2a:	a0 e0       	ldi	r26, 0x00	; 0
    6d2c:	b0 e0       	ldi	r27, 0x00	; 0
    6d2e:	8b 83       	std	Y+3, r24	; 0x03
    6d30:	9c 83       	std	Y+4, r25	; 0x04
    6d32:	ad 83       	std	Y+5, r26	; 0x05
    6d34:	be 83       	std	Y+6, r27	; 0x06
	for (;;)
    
	{
		xReceivedBytes = xMessageBufferReceive(DownLinkMessageBuffer, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    6d36:	80 91 db 12 	lds	r24, 0x12DB	; 0x8012db <DownLinkMessageBuffer>
    6d3a:	90 91 dc 12 	lds	r25, 0x12DC	; 0x8012dc <DownLinkMessageBuffer+0x1>
    6d3e:	be 01       	movw	r22, r28
    6d40:	65 5f       	subi	r22, 0xF5	; 245
    6d42:	7f 4f       	sbci	r23, 0xFF	; 255
    6d44:	0f ef       	ldi	r16, 0xFF	; 255
    6d46:	1f ef       	ldi	r17, 0xFF	; 255
    6d48:	98 01       	movw	r18, r16
    6d4a:	46 e1       	ldi	r20, 0x16	; 22
    6d4c:	50 e0       	ldi	r21, 0x00	; 0
    6d4e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xStreamBufferReceive>
    6d52:	98 87       	std	Y+8, r25	; 0x08
    6d54:	8f 83       	std	Y+7, r24	; 0x07
       if(xReceivedBytes>0)
    6d56:	8f 81       	ldd	r24, Y+7	; 0x07
    6d58:	98 85       	ldd	r25, Y+8	; 0x08
    6d5a:	89 2b       	or	r24, r25
    6d5c:	61 f3       	breq	.-40     	; 0x6d36 <DL_handler_update+0x5c>
{
	printf("DOWN LINK: from port: %d with %d bytes received!", downlinkPayload.portNo, downlinkPayload.len); // Just for debug
    6d5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6d60:	28 2f       	mov	r18, r24
    6d62:	30 e0       	ldi	r19, 0x00	; 0
    6d64:	8b 85       	ldd	r24, Y+11	; 0x0b
    6d66:	88 2f       	mov	r24, r24
    6d68:	90 e0       	ldi	r25, 0x00	; 0
    6d6a:	43 2f       	mov	r20, r19
    6d6c:	4f 93       	push	r20
    6d6e:	2f 93       	push	r18
    6d70:	29 2f       	mov	r18, r25
    6d72:	2f 93       	push	r18
    6d74:	8f 93       	push	r24
    6d76:	83 e2       	ldi	r24, 0x23	; 35
    6d78:	94 e0       	ldi	r25, 0x04	; 4
    6d7a:	89 2f       	mov	r24, r25
    6d7c:	8f 93       	push	r24
    6d7e:	83 e2       	ldi	r24, 0x23	; 35
    6d80:	94 e0       	ldi	r25, 0x04	; 4
    6d82:	8f 93       	push	r24
    6d84:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
    6d88:	0f 90       	pop	r0
    6d8a:	0f 90       	pop	r0
    6d8c:	0f 90       	pop	r0
    6d8e:	0f 90       	pop	r0
    6d90:	0f 90       	pop	r0
    6d92:	0f 90       	pop	r0
     uint16_t co2_ppm = SensorDataPackage_getCO2(sensorDataPackage);
    6d94:	89 81       	ldd	r24, Y+1	; 0x01
    6d96:	9a 81       	ldd	r25, Y+2	; 0x02
    6d98:	0e 94 91 01 	call	0x322	; 0x322 <SensorDataPackage_getCO2>
    6d9c:	9a 87       	std	Y+10, r25	; 0x0a
    6d9e:	89 87       	std	Y+9, r24	; 0x09
		if (2 == downlinkPayload.len) // Check that we have got the expected 2 bytes
    6da0:	8c 85       	ldd	r24, Y+12	; 0x0c
    6da2:	82 30       	cpi	r24, 0x02	; 2
    6da4:	c1 f5       	brne	.+112    	; 0x6e16 <DL_handler_update+0x13c>
		{
           
			//decode the payload into our variables
			co2_ppm = (downlinkPayload.bytes[0] << 8) + downlinkPayload.bytes[1];
    6da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6da8:	88 2f       	mov	r24, r24
    6daa:	90 e0       	ldi	r25, 0x00	; 0
    6dac:	38 2f       	mov	r19, r24
    6dae:	22 27       	eor	r18, r18
    6db0:	8e 85       	ldd	r24, Y+14	; 0x0e
    6db2:	88 2f       	mov	r24, r24
    6db4:	90 e0       	ldi	r25, 0x00	; 0
    6db6:	82 0f       	add	r24, r18
    6db8:	93 1f       	adc	r25, r19
    6dba:	9a 87       	std	Y+10, r25	; 0x0a
    6dbc:	89 87       	std	Y+9, r24	; 0x09
			
			//set new values
			SensorDataPackage_setCO2(co2_ppm, 250);
    6dbe:	89 85       	ldd	r24, Y+9	; 0x09
    6dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dc2:	6a ef       	ldi	r22, 0xFA	; 250
    6dc4:	70 e0       	ldi	r23, 0x00	; 0
    6dc6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SensorDataPackage_setCO2>

            mutexPuts("DL_handler_update -> OK");
    6dca:	84 e5       	ldi	r24, 0x54	; 84
    6dcc:	94 e0       	ldi	r25, 0x04	; 4
    6dce:	8f de       	rcall	.-738    	; 0x6aee <mutexPuts>
            SensorDataPackage_free(sensorDataPackage);
    6dd0:	89 81       	ldd	r24, Y+1	; 0x01
    6dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    6dd4:	0e 94 65 01 	call	0x2ca	; 0x2ca <SensorDataPackage_free>
            xSemaphoreGive( DownLinkUpdateMutex );
    6dd8:	80 91 30 14 	lds	r24, 0x1430	; 0x801430 <DownLinkUpdateMutex>
    6ddc:	90 91 31 14 	lds	r25, 0x1431	; 0x801431 <DownLinkUpdateMutex+0x1>
    6de0:	00 e0       	ldi	r16, 0x00	; 0
    6de2:	20 e0       	ldi	r18, 0x00	; 0
    6de4:	30 e0       	ldi	r19, 0x00	; 0
    6de6:	a9 01       	movw	r20, r18
    6de8:	60 e0       	ldi	r22, 0x00	; 0
    6dea:	70 e0       	ldi	r23, 0x00	; 0
    6dec:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
            xSemaphoreGive( DownLinkReceiveMutex);
    6df0:	80 91 38 14 	lds	r24, 0x1438	; 0x801438 <DownLinkReceiveMutex>
    6df4:	90 91 39 14 	lds	r25, 0x1439	; 0x801439 <DownLinkReceiveMutex+0x1>
    6df8:	00 e0       	ldi	r16, 0x00	; 0
    6dfa:	20 e0       	ldi	r18, 0x00	; 0
    6dfc:	30 e0       	ldi	r19, 0x00	; 0
    6dfe:	a9 01       	movw	r20, r18
    6e00:	60 e0       	ldi	r22, 0x00	; 0
    6e02:	70 e0       	ldi	r23, 0x00	; 0
    6e04:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
            vTaskDelay(pdMS_TO_TICKS(300000));
    6e08:	68 ea       	ldi	r22, 0xA8	; 168
    6e0a:	78 e4       	ldi	r23, 0x48	; 72
    6e0c:	80 e0       	ldi	r24, 0x00	; 0
    6e0e:	90 e0       	ldi	r25, 0x00	; 0
    6e10:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <vTaskDelay>
    6e14:	90 cf       	rjmp	.-224    	; 0x6d36 <DL_handler_update+0x5c>
		}
        else{
          SensorDataPackage_free(sensorDataPackage);
    6e16:	89 81       	ldd	r24, Y+1	; 0x01
    6e18:	9a 81       	ldd	r25, Y+2	; 0x02
    6e1a:	0e 94 65 01 	call	0x2ca	; 0x2ca <SensorDataPackage_free>
          vTaskDelay(pdMS_TO_TICKS(150000));
    6e1e:	64 e5       	ldi	r22, 0x54	; 84
    6e20:	74 e2       	ldi	r23, 0x24	; 36
    6e22:	80 e0       	ldi	r24, 0x00	; 0
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <vTaskDelay>
}
}
	
	}
    6e2a:	85 cf       	rjmp	.-246    	; 0x6d36 <DL_handler_update+0x5c>

00006e2c <UL_handler_send>:
}
void UL_handler_send( void *pvParameters )
{
    6e2c:	0f 93       	push	r16
    6e2e:	1f 93       	push	r17
    6e30:	cf 93       	push	r28
    6e32:	df 93       	push	r29
    6e34:	cd b7       	in	r28, 0x3d	; 61
    6e36:	de b7       	in	r29, 0x3e	; 62
    6e38:	2a 97       	sbiw	r28, 0x0a	; 10
    6e3a:	0f b6       	in	r0, 0x3f	; 63
    6e3c:	f8 94       	cli
    6e3e:	de bf       	out	0x3e, r29	; 62
    6e40:	0f be       	out	0x3f, r0	; 63
    6e42:	cd bf       	out	0x3d, r28	; 61
    6e44:	9a 87       	std	Y+10, r25	; 0x0a
    6e46:	89 87       	std	Y+9, r24	; 0x09
printf("send");
    6e48:	8c e6       	ldi	r24, 0x6C	; 108
    6e4a:	94 e0       	ldi	r25, 0x04	; 4
    6e4c:	89 2f       	mov	r24, r25
    6e4e:	8f 93       	push	r24
    6e50:	8c e6       	ldi	r24, 0x6C	; 108
    6e52:	94 e0       	ldi	r25, 0x04	; 4
    6e54:	8f 93       	push	r24
    6e56:	0e 94 43 46 	call	0x8c86	; 0x8c86 <printf>
    6e5a:	0f 90       	pop	r0
    6e5c:	0f 90       	pop	r0
	// Will only be executed one time
	// UpLinkHandler
	UL_handler_create(UpLinkMessageBuffer);
    6e5e:	80 91 d9 12 	lds	r24, 0x12D9	; 0x8012d9 <UpLinkMessageBuffer>
    6e62:	90 91 da 12 	lds	r25, 0x12DA	; 0x8012da <UpLinkMessageBuffer+0x1>
    6e66:	0e 94 a3 01 	call	0x346	; 0x346 <UL_handler_create>
	
	for(;;){
		xSemaphoreTake( UpLinkSendMutex , portMAX_DELAY);
    6e6a:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <UpLinkSendMutex>
    6e6e:	90 91 2b 14 	lds	r25, 0x142B	; 0x80142b <UpLinkSendMutex+0x1>
    6e72:	4f ef       	ldi	r20, 0xFF	; 255
    6e74:	5f ef       	ldi	r21, 0xFF	; 255
    6e76:	ba 01       	movw	r22, r20
    6e78:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xQueueSemaphoreTake>
		size_t xBytesSent;
		// Payload
		SensorDataPackage_t sensorDataPackage = SensorDataPackage_create();
    6e7c:	0e 94 4c 01 	call	0x298	; 0x298 <SensorDataPackage_create>
    6e80:	9a 83       	std	Y+2, r25	; 0x02
    6e82:	89 83       	std	Y+1, r24	; 0x01
		
		SensorDataPackage_setCO2(sensorDataPackage,250);/*JULIA PUT YOUR DATA HERE - CO2Sensor.getCO2()*/
    6e84:	89 81       	ldd	r24, Y+1	; 0x01
    6e86:	9a 81       	ldd	r25, Y+2	; 0x02
    6e88:	6a ef       	ldi	r22, 0xFA	; 250
    6e8a:	70 e0       	ldi	r23, 0x00	; 0
    6e8c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SensorDataPackage_setCO2>
		
		const TickType_t x100ms = pdMS_TO_TICKS( 100 );
    6e90:	86 e0       	ldi	r24, 0x06	; 6
    6e92:	90 e0       	ldi	r25, 0x00	; 0
    6e94:	a0 e0       	ldi	r26, 0x00	; 0
    6e96:	b0 e0       	ldi	r27, 0x00	; 0
    6e98:	8b 83       	std	Y+3, r24	; 0x03
    6e9a:	9c 83       	std	Y+4, r25	; 0x04
    6e9c:	ad 83       	std	Y+5, r26	; 0x05
    6e9e:	be 83       	std	Y+6, r27	; 0x06
		
		// Send the payload to the message buffer, a maximum of 100ms to wait for enough space to be available in the message buffer.
		xBytesSent = xMessageBufferSend( UpLinkMessageBuffer, ( void * ) sensorDataPackage, sizeof( sensorDataPackage ), x100ms );
    6ea0:	e0 91 d9 12 	lds	r30, 0x12D9	; 0x8012d9 <UpLinkMessageBuffer>
    6ea4:	f0 91 da 12 	lds	r31, 0x12DA	; 0x8012da <UpLinkMessageBuffer+0x1>
    6ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    6eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    6eac:	ad 81       	ldd	r26, Y+5	; 0x05
    6eae:	be 81       	ldd	r27, Y+6	; 0x06
    6eb0:	69 81       	ldd	r22, Y+1	; 0x01
    6eb2:	7a 81       	ldd	r23, Y+2	; 0x02
    6eb4:	8c 01       	movw	r16, r24
    6eb6:	9d 01       	movw	r18, r26
    6eb8:	42 e0       	ldi	r20, 0x02	; 2
    6eba:	50 e0       	ldi	r21, 0x00	; 0
    6ebc:	cf 01       	movw	r24, r30
    6ebe:	0e 94 5f 13 	call	0x26be	; 0x26be <xStreamBufferSend>
    6ec2:	98 87       	std	Y+8, r25	; 0x08
    6ec4:	8f 83       	std	Y+7, r24	; 0x07
		
		if( xBytesSent != sizeof( sensorDataPackage ) )
    6ec6:	8f 81       	ldd	r24, Y+7	; 0x07
    6ec8:	98 85       	ldd	r25, Y+8	; 0x08
    6eca:	02 97       	sbiw	r24, 0x02	; 2
    6ecc:	59 f0       	breq	.+22     	; 0x6ee4 <UL_handler_send+0xb8>
		{
			// The call to xMessageBufferSend() timed out before there was enough space in the buffer for the data to be written.
			// Wait 2.5 minutes to retry
			SensorDataPackage_free(sensorDataPackage);
    6ece:	89 81       	ldd	r24, Y+1	; 0x01
    6ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ed2:	0e 94 65 01 	call	0x2ca	; 0x2ca <SensorDataPackage_free>
			vTaskDelay(pdMS_TO_TICKS(150000));
    6ed6:	64 e5       	ldi	r22, 0x54	; 84
    6ed8:	74 e2       	ldi	r23, 0x24	; 36
    6eda:	80 e0       	ldi	r24, 0x00	; 0
    6edc:	90 e0       	ldi	r25, 0x00	; 0
    6ede:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <vTaskDelay>
    6ee2:	c3 cf       	rjmp	.-122    	; 0x6e6a <UL_handler_send+0x3e>
			}else{
			// OK
			mutexPuts("UL_handler_send -> OK");
    6ee4:	81 e7       	ldi	r24, 0x71	; 113
    6ee6:	94 e0       	ldi	r25, 0x04	; 4
    6ee8:	02 de       	rcall	.-1020   	; 0x6aee <mutexPuts>
			SensorDataPackage_free(sensorDataPackage);
    6eea:	89 81       	ldd	r24, Y+1	; 0x01
    6eec:	9a 81       	ldd	r25, Y+2	; 0x02
    6eee:	0e 94 65 01 	call	0x2ca	; 0x2ca <SensorDataPackage_free>
			xSemaphoreGive( UpLinkSendMutex );
    6ef2:	80 91 2a 14 	lds	r24, 0x142A	; 0x80142a <UpLinkSendMutex>
    6ef6:	90 91 2b 14 	lds	r25, 0x142B	; 0x80142b <UpLinkSendMutex+0x1>
    6efa:	00 e0       	ldi	r16, 0x00	; 0
    6efc:	20 e0       	ldi	r18, 0x00	; 0
    6efe:	30 e0       	ldi	r19, 0x00	; 0
    6f00:	a9 01       	movw	r20, r18
    6f02:	60 e0       	ldi	r22, 0x00	; 0
    6f04:	70 e0       	ldi	r23, 0x00	; 0
    6f06:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
			xSemaphoreGive( UpLinkReceiveMutex );
    6f0a:	80 91 2c 14 	lds	r24, 0x142C	; 0x80142c <UpLinkReceiveMutex>
    6f0e:	90 91 2d 14 	lds	r25, 0x142D	; 0x80142d <UpLinkReceiveMutex+0x1>
    6f12:	00 e0       	ldi	r16, 0x00	; 0
    6f14:	20 e0       	ldi	r18, 0x00	; 0
    6f16:	30 e0       	ldi	r19, 0x00	; 0
    6f18:	a9 01       	movw	r20, r18
    6f1a:	60 e0       	ldi	r22, 0x00	; 0
    6f1c:	70 e0       	ldi	r23, 0x00	; 0
    6f1e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <xQueueGenericSend>
			vTaskDelay(pdMS_TO_TICKS(300000));
    6f22:	68 ea       	ldi	r22, 0xA8	; 168
    6f24:	78 e4       	ldi	r23, 0x48	; 72
    6f26:	80 e0       	ldi	r24, 0x00	; 0
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <vTaskDelay>
		}
	}
    6f2e:	9d cf       	rjmp	.-198    	; 0x6e6a <UL_handler_send+0x3e>

00006f30 <main>:
}
/*-----------------------------------------------------------*/

/*---------------------------MAIN----------------------------*/

int main(void){
    6f30:	ef 92       	push	r14
    6f32:	ff 92       	push	r15
    6f34:	0f 93       	push	r16
    6f36:	cf 93       	push	r28
    6f38:	df 93       	push	r29
    6f3a:	cd b7       	in	r28, 0x3d	; 61
    6f3c:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate(
    6f3e:	e1 2c       	mov	r14, r1
    6f40:	f1 2c       	mov	r15, r1
    6f42:	03 e0       	ldi	r16, 0x03	; 3
    6f44:	20 e0       	ldi	r18, 0x00	; 0
    6f46:	30 e0       	ldi	r19, 0x00	; 0
    6f48:	40 ec       	ldi	r20, 0xC0	; 192
    6f4a:	50 e0       	ldi	r21, 0x00	; 0
    6f4c:	67 e8       	ldi	r22, 0x87	; 135
    6f4e:	74 e0       	ldi	r23, 0x04	; 4
    6f50:	82 ea       	ldi	r24, 0xA2	; 162
    6f52:	95 e3       	ldi	r25, 0x35	; 53
    6f54:	0e 94 30 18 	call	0x3060	; 0x3060 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  3
	,  NULL );
	
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler.
    6f58:	0e 94 8e 1a 	call	0x351c	; 0x351c <vTaskStartScheduler>
    6f5c:	80 e0       	ldi	r24, 0x00	; 0
    6f5e:	90 e0       	ldi	r25, 0x00	; 0
	//Execution will never reach here.
    6f60:	df 91       	pop	r29
    6f62:	cf 91       	pop	r28
    6f64:	0f 91       	pop	r16
    6f66:	ff 90       	pop	r15
    6f68:	ef 90       	pop	r14
    6f6a:	08 95       	ret

00006f6c <__cmpsf2>:
    6f6c:	2f d0       	rcall	.+94     	; 0x6fcc <__fp_cmp>
    6f6e:	08 f4       	brcc	.+2      	; 0x6f72 <__cmpsf2+0x6>
    6f70:	81 e0       	ldi	r24, 0x01	; 1
    6f72:	08 95       	ret

00006f74 <__fixunssfsi>:
    6f74:	57 d0       	rcall	.+174    	; 0x7024 <__fp_splitA>
    6f76:	88 f0       	brcs	.+34     	; 0x6f9a <__fixunssfsi+0x26>
    6f78:	9f 57       	subi	r25, 0x7F	; 127
    6f7a:	90 f0       	brcs	.+36     	; 0x6fa0 <__fixunssfsi+0x2c>
    6f7c:	b9 2f       	mov	r27, r25
    6f7e:	99 27       	eor	r25, r25
    6f80:	b7 51       	subi	r27, 0x17	; 23
    6f82:	a0 f0       	brcs	.+40     	; 0x6fac <__fixunssfsi+0x38>
    6f84:	d1 f0       	breq	.+52     	; 0x6fba <__fixunssfsi+0x46>
    6f86:	66 0f       	add	r22, r22
    6f88:	77 1f       	adc	r23, r23
    6f8a:	88 1f       	adc	r24, r24
    6f8c:	99 1f       	adc	r25, r25
    6f8e:	1a f0       	brmi	.+6      	; 0x6f96 <__fixunssfsi+0x22>
    6f90:	ba 95       	dec	r27
    6f92:	c9 f7       	brne	.-14     	; 0x6f86 <__fixunssfsi+0x12>
    6f94:	12 c0       	rjmp	.+36     	; 0x6fba <__fixunssfsi+0x46>
    6f96:	b1 30       	cpi	r27, 0x01	; 1
    6f98:	81 f0       	breq	.+32     	; 0x6fba <__fixunssfsi+0x46>
    6f9a:	5e d0       	rcall	.+188    	; 0x7058 <__fp_zero>
    6f9c:	b1 e0       	ldi	r27, 0x01	; 1
    6f9e:	08 95       	ret
    6fa0:	5b c0       	rjmp	.+182    	; 0x7058 <__fp_zero>
    6fa2:	67 2f       	mov	r22, r23
    6fa4:	78 2f       	mov	r23, r24
    6fa6:	88 27       	eor	r24, r24
    6fa8:	b8 5f       	subi	r27, 0xF8	; 248
    6faa:	39 f0       	breq	.+14     	; 0x6fba <__fixunssfsi+0x46>
    6fac:	b9 3f       	cpi	r27, 0xF9	; 249
    6fae:	cc f3       	brlt	.-14     	; 0x6fa2 <__fixunssfsi+0x2e>
    6fb0:	86 95       	lsr	r24
    6fb2:	77 95       	ror	r23
    6fb4:	67 95       	ror	r22
    6fb6:	b3 95       	inc	r27
    6fb8:	d9 f7       	brne	.-10     	; 0x6fb0 <__fixunssfsi+0x3c>
    6fba:	3e f4       	brtc	.+14     	; 0x6fca <__fixunssfsi+0x56>
    6fbc:	90 95       	com	r25
    6fbe:	80 95       	com	r24
    6fc0:	70 95       	com	r23
    6fc2:	61 95       	neg	r22
    6fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    6fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    6fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    6fca:	08 95       	ret

00006fcc <__fp_cmp>:
    6fcc:	99 0f       	add	r25, r25
    6fce:	00 08       	sbc	r0, r0
    6fd0:	55 0f       	add	r21, r21
    6fd2:	aa 0b       	sbc	r26, r26
    6fd4:	e0 e8       	ldi	r30, 0x80	; 128
    6fd6:	fe ef       	ldi	r31, 0xFE	; 254
    6fd8:	16 16       	cp	r1, r22
    6fda:	17 06       	cpc	r1, r23
    6fdc:	e8 07       	cpc	r30, r24
    6fde:	f9 07       	cpc	r31, r25
    6fe0:	c0 f0       	brcs	.+48     	; 0x7012 <__fp_cmp+0x46>
    6fe2:	12 16       	cp	r1, r18
    6fe4:	13 06       	cpc	r1, r19
    6fe6:	e4 07       	cpc	r30, r20
    6fe8:	f5 07       	cpc	r31, r21
    6fea:	98 f0       	brcs	.+38     	; 0x7012 <__fp_cmp+0x46>
    6fec:	62 1b       	sub	r22, r18
    6fee:	73 0b       	sbc	r23, r19
    6ff0:	84 0b       	sbc	r24, r20
    6ff2:	95 0b       	sbc	r25, r21
    6ff4:	39 f4       	brne	.+14     	; 0x7004 <__fp_cmp+0x38>
    6ff6:	0a 26       	eor	r0, r26
    6ff8:	61 f0       	breq	.+24     	; 0x7012 <__fp_cmp+0x46>
    6ffa:	23 2b       	or	r18, r19
    6ffc:	24 2b       	or	r18, r20
    6ffe:	25 2b       	or	r18, r21
    7000:	21 f4       	brne	.+8      	; 0x700a <__fp_cmp+0x3e>
    7002:	08 95       	ret
    7004:	0a 26       	eor	r0, r26
    7006:	09 f4       	brne	.+2      	; 0x700a <__fp_cmp+0x3e>
    7008:	a1 40       	sbci	r26, 0x01	; 1
    700a:	a6 95       	lsr	r26
    700c:	8f ef       	ldi	r24, 0xFF	; 255
    700e:	81 1d       	adc	r24, r1
    7010:	81 1d       	adc	r24, r1
    7012:	08 95       	ret

00007014 <__fp_split3>:
    7014:	57 fd       	sbrc	r21, 7
    7016:	90 58       	subi	r25, 0x80	; 128
    7018:	44 0f       	add	r20, r20
    701a:	55 1f       	adc	r21, r21
    701c:	59 f0       	breq	.+22     	; 0x7034 <__fp_splitA+0x10>
    701e:	5f 3f       	cpi	r21, 0xFF	; 255
    7020:	71 f0       	breq	.+28     	; 0x703e <__fp_splitA+0x1a>
    7022:	47 95       	ror	r20

00007024 <__fp_splitA>:
    7024:	88 0f       	add	r24, r24
    7026:	97 fb       	bst	r25, 7
    7028:	99 1f       	adc	r25, r25
    702a:	61 f0       	breq	.+24     	; 0x7044 <__fp_splitA+0x20>
    702c:	9f 3f       	cpi	r25, 0xFF	; 255
    702e:	79 f0       	breq	.+30     	; 0x704e <__fp_splitA+0x2a>
    7030:	87 95       	ror	r24
    7032:	08 95       	ret
    7034:	12 16       	cp	r1, r18
    7036:	13 06       	cpc	r1, r19
    7038:	14 06       	cpc	r1, r20
    703a:	55 1f       	adc	r21, r21
    703c:	f2 cf       	rjmp	.-28     	; 0x7022 <__fp_split3+0xe>
    703e:	46 95       	lsr	r20
    7040:	f1 df       	rcall	.-30     	; 0x7024 <__fp_splitA>
    7042:	08 c0       	rjmp	.+16     	; 0x7054 <__fp_splitA+0x30>
    7044:	16 16       	cp	r1, r22
    7046:	17 06       	cpc	r1, r23
    7048:	18 06       	cpc	r1, r24
    704a:	99 1f       	adc	r25, r25
    704c:	f1 cf       	rjmp	.-30     	; 0x7030 <__fp_splitA+0xc>
    704e:	86 95       	lsr	r24
    7050:	71 05       	cpc	r23, r1
    7052:	61 05       	cpc	r22, r1
    7054:	08 94       	sec
    7056:	08 95       	ret

00007058 <__fp_zero>:
    7058:	e8 94       	clt

0000705a <__fp_szero>:
    705a:	bb 27       	eor	r27, r27
    705c:	66 27       	eor	r22, r22
    705e:	77 27       	eor	r23, r23
    7060:	cb 01       	movw	r24, r22
    7062:	97 f9       	bld	r25, 7
    7064:	08 95       	ret

00007066 <__gesf2>:
    7066:	b2 df       	rcall	.-156    	; 0x6fcc <__fp_cmp>
    7068:	08 f4       	brcc	.+2      	; 0x706c <__gesf2+0x6>
    706a:	8f ef       	ldi	r24, 0xFF	; 255
    706c:	08 95       	ret

0000706e <__mulsf3>:
    706e:	0b d0       	rcall	.+22     	; 0x7086 <__mulsf3x>
    7070:	78 c0       	rjmp	.+240    	; 0x7162 <__fp_round>
    7072:	69 d0       	rcall	.+210    	; 0x7146 <__fp_pscA>
    7074:	28 f0       	brcs	.+10     	; 0x7080 <__mulsf3+0x12>
    7076:	6e d0       	rcall	.+220    	; 0x7154 <__fp_pscB>
    7078:	18 f0       	brcs	.+6      	; 0x7080 <__mulsf3+0x12>
    707a:	95 23       	and	r25, r21
    707c:	09 f0       	breq	.+2      	; 0x7080 <__mulsf3+0x12>
    707e:	5a c0       	rjmp	.+180    	; 0x7134 <__fp_inf>
    7080:	5f c0       	rjmp	.+190    	; 0x7140 <__fp_nan>
    7082:	11 24       	eor	r1, r1
    7084:	ea cf       	rjmp	.-44     	; 0x705a <__fp_szero>

00007086 <__mulsf3x>:
    7086:	c6 df       	rcall	.-116    	; 0x7014 <__fp_split3>
    7088:	a0 f3       	brcs	.-24     	; 0x7072 <__mulsf3+0x4>

0000708a <__mulsf3_pse>:
    708a:	95 9f       	mul	r25, r21
    708c:	d1 f3       	breq	.-12     	; 0x7082 <__mulsf3+0x14>
    708e:	95 0f       	add	r25, r21
    7090:	50 e0       	ldi	r21, 0x00	; 0
    7092:	55 1f       	adc	r21, r21
    7094:	62 9f       	mul	r22, r18
    7096:	f0 01       	movw	r30, r0
    7098:	72 9f       	mul	r23, r18
    709a:	bb 27       	eor	r27, r27
    709c:	f0 0d       	add	r31, r0
    709e:	b1 1d       	adc	r27, r1
    70a0:	63 9f       	mul	r22, r19
    70a2:	aa 27       	eor	r26, r26
    70a4:	f0 0d       	add	r31, r0
    70a6:	b1 1d       	adc	r27, r1
    70a8:	aa 1f       	adc	r26, r26
    70aa:	64 9f       	mul	r22, r20
    70ac:	66 27       	eor	r22, r22
    70ae:	b0 0d       	add	r27, r0
    70b0:	a1 1d       	adc	r26, r1
    70b2:	66 1f       	adc	r22, r22
    70b4:	82 9f       	mul	r24, r18
    70b6:	22 27       	eor	r18, r18
    70b8:	b0 0d       	add	r27, r0
    70ba:	a1 1d       	adc	r26, r1
    70bc:	62 1f       	adc	r22, r18
    70be:	73 9f       	mul	r23, r19
    70c0:	b0 0d       	add	r27, r0
    70c2:	a1 1d       	adc	r26, r1
    70c4:	62 1f       	adc	r22, r18
    70c6:	83 9f       	mul	r24, r19
    70c8:	a0 0d       	add	r26, r0
    70ca:	61 1d       	adc	r22, r1
    70cc:	22 1f       	adc	r18, r18
    70ce:	74 9f       	mul	r23, r20
    70d0:	33 27       	eor	r19, r19
    70d2:	a0 0d       	add	r26, r0
    70d4:	61 1d       	adc	r22, r1
    70d6:	23 1f       	adc	r18, r19
    70d8:	84 9f       	mul	r24, r20
    70da:	60 0d       	add	r22, r0
    70dc:	21 1d       	adc	r18, r1
    70de:	82 2f       	mov	r24, r18
    70e0:	76 2f       	mov	r23, r22
    70e2:	6a 2f       	mov	r22, r26
    70e4:	11 24       	eor	r1, r1
    70e6:	9f 57       	subi	r25, 0x7F	; 127
    70e8:	50 40       	sbci	r21, 0x00	; 0
    70ea:	8a f0       	brmi	.+34     	; 0x710e <__mulsf3_pse+0x84>
    70ec:	e1 f0       	breq	.+56     	; 0x7126 <__mulsf3_pse+0x9c>
    70ee:	88 23       	and	r24, r24
    70f0:	4a f0       	brmi	.+18     	; 0x7104 <__mulsf3_pse+0x7a>
    70f2:	ee 0f       	add	r30, r30
    70f4:	ff 1f       	adc	r31, r31
    70f6:	bb 1f       	adc	r27, r27
    70f8:	66 1f       	adc	r22, r22
    70fa:	77 1f       	adc	r23, r23
    70fc:	88 1f       	adc	r24, r24
    70fe:	91 50       	subi	r25, 0x01	; 1
    7100:	50 40       	sbci	r21, 0x00	; 0
    7102:	a9 f7       	brne	.-22     	; 0x70ee <__mulsf3_pse+0x64>
    7104:	9e 3f       	cpi	r25, 0xFE	; 254
    7106:	51 05       	cpc	r21, r1
    7108:	70 f0       	brcs	.+28     	; 0x7126 <__mulsf3_pse+0x9c>
    710a:	14 c0       	rjmp	.+40     	; 0x7134 <__fp_inf>
    710c:	a6 cf       	rjmp	.-180    	; 0x705a <__fp_szero>
    710e:	5f 3f       	cpi	r21, 0xFF	; 255
    7110:	ec f3       	brlt	.-6      	; 0x710c <__mulsf3_pse+0x82>
    7112:	98 3e       	cpi	r25, 0xE8	; 232
    7114:	dc f3       	brlt	.-10     	; 0x710c <__mulsf3_pse+0x82>
    7116:	86 95       	lsr	r24
    7118:	77 95       	ror	r23
    711a:	67 95       	ror	r22
    711c:	b7 95       	ror	r27
    711e:	f7 95       	ror	r31
    7120:	e7 95       	ror	r30
    7122:	9f 5f       	subi	r25, 0xFF	; 255
    7124:	c1 f7       	brne	.-16     	; 0x7116 <__mulsf3_pse+0x8c>
    7126:	fe 2b       	or	r31, r30
    7128:	88 0f       	add	r24, r24
    712a:	91 1d       	adc	r25, r1
    712c:	96 95       	lsr	r25
    712e:	87 95       	ror	r24
    7130:	97 f9       	bld	r25, 7
    7132:	08 95       	ret

00007134 <__fp_inf>:
    7134:	97 f9       	bld	r25, 7
    7136:	9f 67       	ori	r25, 0x7F	; 127
    7138:	80 e8       	ldi	r24, 0x80	; 128
    713a:	70 e0       	ldi	r23, 0x00	; 0
    713c:	60 e0       	ldi	r22, 0x00	; 0
    713e:	08 95       	ret

00007140 <__fp_nan>:
    7140:	9f ef       	ldi	r25, 0xFF	; 255
    7142:	80 ec       	ldi	r24, 0xC0	; 192
    7144:	08 95       	ret

00007146 <__fp_pscA>:
    7146:	00 24       	eor	r0, r0
    7148:	0a 94       	dec	r0
    714a:	16 16       	cp	r1, r22
    714c:	17 06       	cpc	r1, r23
    714e:	18 06       	cpc	r1, r24
    7150:	09 06       	cpc	r0, r25
    7152:	08 95       	ret

00007154 <__fp_pscB>:
    7154:	00 24       	eor	r0, r0
    7156:	0a 94       	dec	r0
    7158:	12 16       	cp	r1, r18
    715a:	13 06       	cpc	r1, r19
    715c:	14 06       	cpc	r1, r20
    715e:	05 06       	cpc	r0, r21
    7160:	08 95       	ret

00007162 <__fp_round>:
    7162:	09 2e       	mov	r0, r25
    7164:	03 94       	inc	r0
    7166:	00 0c       	add	r0, r0
    7168:	11 f4       	brne	.+4      	; 0x716e <__fp_round+0xc>
    716a:	88 23       	and	r24, r24
    716c:	52 f0       	brmi	.+20     	; 0x7182 <__fp_round+0x20>
    716e:	bb 0f       	add	r27, r27
    7170:	40 f4       	brcc	.+16     	; 0x7182 <__fp_round+0x20>
    7172:	bf 2b       	or	r27, r31
    7174:	11 f4       	brne	.+4      	; 0x717a <__fp_round+0x18>
    7176:	60 ff       	sbrs	r22, 0
    7178:	04 c0       	rjmp	.+8      	; 0x7182 <__fp_round+0x20>
    717a:	6f 5f       	subi	r22, 0xFF	; 255
    717c:	7f 4f       	sbci	r23, 0xFF	; 255
    717e:	8f 4f       	sbci	r24, 0xFF	; 255
    7180:	9f 4f       	sbci	r25, 0xFF	; 255
    7182:	08 95       	ret

00007184 <_serialCallBack>:
    7184:	0f 93       	push	r16
    7186:	1f 93       	push	r17
    7188:	cf 93       	push	r28
    718a:	df 93       	push	r29
    718c:	1f 92       	push	r1
    718e:	1f 92       	push	r1
    7190:	cd b7       	in	r28, 0x3d	; 61
    7192:	de b7       	in	r29, 0x3e	; 62
    7194:	8c 01       	movw	r16, r24
    7196:	19 82       	std	Y+1, r1	; 0x01
    7198:	2d c0       	rjmp	.+90     	; 0x71f4 <_serialCallBack+0x70>
    719a:	e0 91 41 13 	lds	r30, 0x1341	; 0x801341 <rec_buf_inp.2878>
    719e:	ec 32       	cpi	r30, 0x2C	; 44
    71a0:	50 f4       	brcc	.+20     	; 0x71b6 <_serialCallBack+0x32>
    71a2:	81 e0       	ldi	r24, 0x01	; 1
    71a4:	8e 0f       	add	r24, r30
    71a6:	80 93 41 13 	sts	0x1341, r24	; 0x801341 <rec_buf_inp.2878>
    71aa:	f0 e0       	ldi	r31, 0x00	; 0
    71ac:	ed 58       	subi	r30, 0x8D	; 141
    71ae:	fc 4e       	sbci	r31, 0xEC	; 236
    71b0:	8a 81       	ldd	r24, Y+2	; 0x02
    71b2:	80 83       	st	Z, r24
    71b4:	02 c0       	rjmp	.+4      	; 0x71ba <_serialCallBack+0x36>
    71b6:	10 92 41 13 	sts	0x1341, r1	; 0x801341 <rec_buf_inp.2878>
    71ba:	8a 81       	ldd	r24, Y+2	; 0x02
    71bc:	8a 30       	cpi	r24, 0x0A	; 10
    71be:	d1 f4       	brne	.+52     	; 0x71f4 <_serialCallBack+0x70>
    71c0:	40 91 41 13 	lds	r20, 0x1341	; 0x801341 <rec_buf_inp.2878>
    71c4:	50 e0       	ldi	r21, 0x00	; 0
    71c6:	fa 01       	movw	r30, r20
    71c8:	ef 58       	subi	r30, 0x8F	; 143
    71ca:	fc 4e       	sbci	r31, 0xEC	; 236
    71cc:	10 82       	st	Z, r1
    71ce:	41 50       	subi	r20, 0x01	; 1
    71d0:	51 09       	sbc	r21, r1
    71d2:	9e 01       	movw	r18, r28
    71d4:	2f 5f       	subi	r18, 0xFF	; 255
    71d6:	3f 4f       	sbci	r19, 0xFF	; 255
    71d8:	63 e7       	ldi	r22, 0x73	; 115
    71da:	73 e1       	ldi	r23, 0x13	; 19
    71dc:	80 91 44 13 	lds	r24, 0x1344	; 0x801344 <_serialReplyBufferHandle>
    71e0:	90 91 45 13 	lds	r25, 0x1345	; 0x801345 <_serialReplyBufferHandle+0x1>
    71e4:	0e 94 59 14 	call	0x28b2	; 0x28b2 <xStreamBufferSendFromISR>
    71e8:	89 81       	ldd	r24, Y+1	; 0x01
    71ea:	81 11       	cpse	r24, r1
    71ec:	0e 94 3e 0b 	call	0x167c	; 0x167c <vPortYield>
    71f0:	10 92 41 13 	sts	0x1341, r1	; 0x801341 <rec_buf_inp.2878>
    71f4:	be 01       	movw	r22, r28
    71f6:	6e 5f       	subi	r22, 0xFE	; 254
    71f8:	7f 4f       	sbci	r23, 0xFF	; 255
    71fa:	c8 01       	movw	r24, r16
    71fc:	0f d6       	rcall	.+3102   	; 0x7e1c <serial_getByte>
    71fe:	88 23       	and	r24, r24
    7200:	61 f2       	breq	.-104    	; 0x719a <_serialCallBack+0x16>
    7202:	0f 90       	pop	r0
    7204:	0f 90       	pop	r0
    7206:	df 91       	pop	r29
    7208:	cf 91       	pop	r28
    720a:	1f 91       	pop	r17
    720c:	0f 91       	pop	r16
    720e:	08 95       	ret

00007210 <_uploadMessage>:
    7210:	0f 93       	push	r16
    7212:	1f 93       	push	r17
    7214:	cf 93       	push	r28
    7216:	df 93       	push	r29
    7218:	8c 01       	movw	r16, r24
    721a:	eb 01       	movw	r28, r22
    721c:	80 91 44 13 	lds	r24, 0x1344	; 0x801344 <_serialReplyBufferHandle>
    7220:	90 91 45 13 	lds	r25, 0x1345	; 0x801345 <_serialReplyBufferHandle+0x1>
    7224:	0e 94 c3 12 	call	0x2586	; 0x2586 <xStreamBufferReset>
    7228:	b8 01       	movw	r22, r16
    722a:	8d ed       	ldi	r24, 0xDD	; 221
    722c:	92 e1       	ldi	r25, 0x12	; 18
    722e:	0e 94 24 46 	call	0x8c48	; 0x8c48 <strcpy>
    7232:	20 97       	sbiw	r28, 0x00	; 0
    7234:	79 f0       	breq	.+30     	; 0x7254 <_uploadMessage+0x44>
    7236:	ed ed       	ldi	r30, 0xDD	; 221
    7238:	f2 e1       	ldi	r31, 0x12	; 18
    723a:	01 90       	ld	r0, Z+
    723c:	00 20       	and	r0, r0
    723e:	e9 f7       	brne	.-6      	; 0x723a <_uploadMessage+0x2a>
    7240:	31 97       	sbiw	r30, 0x01	; 1
    7242:	80 e2       	ldi	r24, 0x20	; 32
    7244:	90 e0       	ldi	r25, 0x00	; 0
    7246:	91 83       	std	Z+1, r25	; 0x01
    7248:	80 83       	st	Z, r24
    724a:	be 01       	movw	r22, r28
    724c:	8d ed       	ldi	r24, 0xDD	; 221
    724e:	92 e1       	ldi	r25, 0x12	; 18
    7250:	0e 94 19 46 	call	0x8c32	; 0x8c32 <strcat>
    7254:	ed ed       	ldi	r30, 0xDD	; 221
    7256:	f2 e1       	ldi	r31, 0x12	; 18
    7258:	df 01       	movw	r26, r30
    725a:	0d 90       	ld	r0, X+
    725c:	00 20       	and	r0, r0
    725e:	e9 f7       	brne	.-6      	; 0x725a <_uploadMessage+0x4a>
    7260:	11 97       	sbiw	r26, 0x01	; 1
    7262:	8d e0       	ldi	r24, 0x0D	; 13
    7264:	9a e0       	ldi	r25, 0x0A	; 10
    7266:	11 96       	adiw	r26, 0x01	; 1
    7268:	9c 93       	st	X, r25
    726a:	8e 93       	st	-X, r24
    726c:	12 96       	adiw	r26, 0x02	; 2
    726e:	1c 92       	st	X, r1
    7270:	01 90       	ld	r0, Z+
    7272:	00 20       	and	r0, r0
    7274:	e9 f7       	brne	.-6      	; 0x7270 <_uploadMessage+0x60>
    7276:	31 97       	sbiw	r30, 0x01	; 1
    7278:	ed 5d       	subi	r30, 0xDD	; 221
    727a:	f2 41       	sbci	r31, 0x12	; 18
    727c:	ae 2f       	mov	r26, r30
    727e:	8d ed       	ldi	r24, 0xDD	; 221
    7280:	92 e1       	ldi	r25, 0x12	; 18
    7282:	ac 01       	movw	r20, r24
    7284:	6a 2f       	mov	r22, r26
    7286:	80 91 46 13 	lds	r24, 0x1346	; 0x801346 <_rn2483_serial>
    728a:	90 91 47 13 	lds	r25, 0x1347	; 0x801347 <_rn2483_serial+0x1>
    728e:	71 d5       	rcall	.+2786   	; 0x7d72 <serial_sendBytes>
    7290:	81 11       	cpse	r24, r1
    7292:	11 c0       	rjmp	.+34     	; 0x72b6 <_uploadMessage+0xa6>
    7294:	08 e2       	ldi	r16, 0x28	; 40
    7296:	15 e0       	ldi	r17, 0x05	; 5
    7298:	20 e0       	ldi	r18, 0x00	; 0
    729a:	30 e0       	ldi	r19, 0x00	; 0
    729c:	4d e2       	ldi	r20, 0x2D	; 45
    729e:	50 e0       	ldi	r21, 0x00	; 0
    72a0:	6d ec       	ldi	r22, 0xCD	; 205
    72a2:	73 e1       	ldi	r23, 0x13	; 19
    72a4:	80 91 44 13 	lds	r24, 0x1344	; 0x801344 <_serialReplyBufferHandle>
    72a8:	90 91 45 13 	lds	r25, 0x1345	; 0x801345 <_serialReplyBufferHandle+0x1>
    72ac:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xStreamBufferReceive>
    72b0:	8d ec       	ldi	r24, 0xCD	; 205
    72b2:	93 e1       	ldi	r25, 0x13	; 19
    72b4:	02 c0       	rjmp	.+4      	; 0x72ba <_uploadMessage+0xaa>
    72b6:	80 e0       	ldi	r24, 0x00	; 0
    72b8:	90 e0       	ldi	r25, 0x00	; 0
    72ba:	df 91       	pop	r29
    72bc:	cf 91       	pop	r28
    72be:	1f 91       	pop	r17
    72c0:	0f 91       	pop	r16
    72c2:	08 95       	ret

000072c4 <_reply2ReturnCode>:
    72c4:	2f 92       	push	r2
    72c6:	3f 92       	push	r3
    72c8:	4f 92       	push	r4
    72ca:	5f 92       	push	r5
    72cc:	6f 92       	push	r6
    72ce:	7f 92       	push	r7
    72d0:	8f 92       	push	r8
    72d2:	9f 92       	push	r9
    72d4:	af 92       	push	r10
    72d6:	bf 92       	push	r11
    72d8:	cf 92       	push	r12
    72da:	df 92       	push	r13
    72dc:	ef 92       	push	r14
    72de:	ff 92       	push	r15
    72e0:	0f 93       	push	r16
    72e2:	1f 93       	push	r17
    72e4:	cf 93       	push	r28
    72e6:	df 93       	push	r29
    72e8:	5c 01       	movw	r10, r24
    72ea:	fc 01       	movw	r30, r24
    72ec:	01 90       	ld	r0, Z+
    72ee:	00 20       	and	r0, r0
    72f0:	e9 f7       	brne	.-6      	; 0x72ec <_reply2ReturnCode+0x28>
    72f2:	31 97       	sbiw	r30, 0x01	; 1
    72f4:	6f 01       	movw	r12, r30
    72f6:	c8 1a       	sub	r12, r24
    72f8:	d9 0a       	sbc	r13, r25
    72fa:	5c 2c       	mov	r5, r12
    72fc:	0f 2e       	mov	r0, r31
    72fe:	ff e7       	ldi	r31, 0x7F	; 127
    7300:	8f 2e       	mov	r8, r31
    7302:	f7 e0       	ldi	r31, 0x07	; 7
    7304:	9f 2e       	mov	r9, r31
    7306:	f0 2d       	mov	r31, r0
    7308:	e1 2c       	mov	r14, r1
    730a:	f1 2c       	mov	r15, r1
    730c:	4c 2c       	mov	r4, r12
    730e:	37 01       	movw	r6, r14
    7310:	f4 01       	movw	r30, r8
    7312:	01 81       	ldd	r16, Z+1	; 0x01
    7314:	12 81       	ldd	r17, Z+2	; 0x02
    7316:	e8 01       	movw	r28, r16
    7318:	09 90       	ld	r0, Y+
    731a:	00 20       	and	r0, r0
    731c:	e9 f7       	brne	.-6      	; 0x7318 <_reply2ReturnCode+0x54>
    731e:	21 97       	sbiw	r28, 0x01	; 1
    7320:	c0 1b       	sub	r28, r16
    7322:	d1 0b       	sbc	r29, r17
    7324:	3c 2e       	mov	r3, r28
    7326:	f9 e0       	ldi	r31, 0x09	; 9
    7328:	cf 16       	cp	r12, r31
    732a:	d1 04       	cpc	r13, r1
    732c:	58 f0       	brcs	.+22     	; 0x7344 <_reply2ReturnCode+0x80>
    732e:	f4 01       	movw	r30, r8
    7330:	20 80       	ld	r2, Z
    7332:	fe e0       	ldi	r31, 0x0E	; 14
    7334:	2f 12       	cpse	r2, r31
    7336:	06 c0       	rjmp	.+12     	; 0x7344 <_reply2ReturnCode+0x80>
    7338:	b8 01       	movw	r22, r16
    733a:	c5 01       	movw	r24, r10
    733c:	0e 94 f4 45 	call	0x8be8	; 0x8be8 <strcasestr>
    7340:	89 2b       	or	r24, r25
    7342:	09 f5       	brne	.+66     	; 0x7386 <_reply2ReturnCode+0xc2>
    7344:	44 2d       	mov	r20, r4
    7346:	35 14       	cp	r3, r5
    7348:	08 f4       	brcc	.+2      	; 0x734c <_reply2ReturnCode+0x88>
    734a:	4c 2f       	mov	r20, r28
    734c:	50 e0       	ldi	r21, 0x00	; 0
    734e:	b8 01       	movw	r22, r16
    7350:	c5 01       	movw	r24, r10
    7352:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <strncasecmp>
    7356:	89 2b       	or	r24, r25
    7358:	49 f4       	brne	.+18     	; 0x736c <_reply2ReturnCode+0xa8>
    735a:	f3 01       	movw	r30, r6
    735c:	ee 0f       	add	r30, r30
    735e:	ff 1f       	adc	r31, r31
    7360:	e6 0d       	add	r30, r6
    7362:	f7 1d       	adc	r31, r7
    7364:	e1 58       	subi	r30, 0x81	; 129
    7366:	f8 4f       	sbci	r31, 0xF8	; 248
    7368:	20 80       	ld	r2, Z
    736a:	0d c0       	rjmp	.+26     	; 0x7386 <_reply2ReturnCode+0xc2>
    736c:	8f ef       	ldi	r24, 0xFF	; 255
    736e:	e8 1a       	sub	r14, r24
    7370:	f8 0a       	sbc	r15, r24
    7372:	e3 e0       	ldi	r30, 0x03	; 3
    7374:	8e 0e       	add	r8, r30
    7376:	91 1c       	adc	r9, r1
    7378:	f1 e1       	ldi	r31, 0x11	; 17
    737a:	ef 16       	cp	r14, r31
    737c:	f1 04       	cpc	r15, r1
    737e:	39 f6       	brne	.-114    	; 0x730e <_reply2ReturnCode+0x4a>
    7380:	68 94       	set
    7382:	22 24       	eor	r2, r2
    7384:	24 f8       	bld	r2, 4
    7386:	82 2d       	mov	r24, r2
    7388:	df 91       	pop	r29
    738a:	cf 91       	pop	r28
    738c:	1f 91       	pop	r17
    738e:	0f 91       	pop	r16
    7390:	ff 90       	pop	r15
    7392:	ef 90       	pop	r14
    7394:	df 90       	pop	r13
    7396:	cf 90       	pop	r12
    7398:	bf 90       	pop	r11
    739a:	af 90       	pop	r10
    739c:	9f 90       	pop	r9
    739e:	8f 90       	pop	r8
    73a0:	7f 90       	pop	r7
    73a2:	6f 90       	pop	r6
    73a4:	5f 90       	pop	r5
    73a6:	4f 90       	pop	r4
    73a8:	3f 90       	pop	r3
    73aa:	2f 90       	pop	r2
    73ac:	08 95       	ret

000073ae <_uploadMessageRc>:
    73ae:	30 df       	rcall	.-416    	; 0x7210 <_uploadMessage>
    73b0:	89 cf       	rjmp	.-238    	; 0x72c4 <_reply2ReturnCode>
    73b2:	08 95       	ret

000073b4 <lora_driver_flushBuffers>:
    73b4:	80 91 44 13 	lds	r24, 0x1344	; 0x801344 <_serialReplyBufferHandle>
    73b8:	90 91 45 13 	lds	r25, 0x1345	; 0x801345 <_serialReplyBufferHandle+0x1>
    73bc:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <xStreamBufferReset>
    73c0:	08 95       	ret

000073c2 <lora_driver_initialise>:
    73c2:	8f 92       	push	r8
    73c4:	9f 92       	push	r9
    73c6:	af 92       	push	r10
    73c8:	cf 92       	push	r12
    73ca:	ef 92       	push	r14
    73cc:	0f 93       	push	r16
    73ce:	1f 93       	push	r17
    73d0:	cf 93       	push	r28
    73d2:	c8 2f       	mov	r28, r24
    73d4:	8b 01       	movw	r16, r22
    73d6:	41 e0       	ldi	r20, 0x01	; 1
    73d8:	60 e0       	ldi	r22, 0x00	; 0
    73da:	70 e0       	ldi	r23, 0x00	; 0
    73dc:	88 ec       	ldi	r24, 0xC8	; 200
    73de:	90 e0       	ldi	r25, 0x00	; 0
    73e0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <xStreamBufferGenericCreate>
    73e4:	90 93 45 13 	sts	0x1345, r25	; 0x801345 <_serialReplyBufferHandle+0x1>
    73e8:	80 93 44 13 	sts	0x1344, r24	; 0x801344 <_serialReplyBufferHandle>
    73ec:	10 93 43 13 	sts	0x1343, r17	; 0x801343 <_downlinkMessageBuffer+0x1>
    73f0:	00 93 42 13 	sts	0x1342, r16	; 0x801342 <_downlinkMessageBuffer>
    73f4:	0f 2e       	mov	r0, r31
    73f6:	f2 ec       	ldi	r31, 0xC2	; 194
    73f8:	8f 2e       	mov	r8, r31
    73fa:	f8 e3       	ldi	r31, 0x38	; 56
    73fc:	9f 2e       	mov	r9, r31
    73fe:	f0 2d       	mov	r31, r0
    7400:	68 94       	set
    7402:	aa 24       	eor	r10, r10
    7404:	a6 f8       	bld	r10, 6
    7406:	68 94       	set
    7408:	cc 24       	eor	r12, r12
    740a:	c6 f8       	bld	r12, 6
    740c:	e1 2c       	mov	r14, r1
    740e:	00 e0       	ldi	r16, 0x00	; 0
    7410:	23 e0       	ldi	r18, 0x03	; 3
    7412:	40 e0       	ldi	r20, 0x00	; 0
    7414:	51 ee       	ldi	r21, 0xE1	; 225
    7416:	60 e0       	ldi	r22, 0x00	; 0
    7418:	70 e0       	ldi	r23, 0x00	; 0
    741a:	8c 2f       	mov	r24, r28
    741c:	e3 d3       	rcall	.+1990   	; 0x7be4 <serial_create>
    741e:	90 93 47 13 	sts	0x1347, r25	; 0x801347 <_rn2483_serial+0x1>
    7422:	80 93 46 13 	sts	0x1346, r24	; 0x801346 <_rn2483_serial>
    7426:	e7 e0       	ldi	r30, 0x07	; 7
    7428:	f1 e0       	ldi	r31, 0x01	; 1
    742a:	80 81       	ld	r24, Z
    742c:	80 61       	ori	r24, 0x10	; 16
    742e:	80 83       	st	Z, r24
    7430:	cf 91       	pop	r28
    7432:	1f 91       	pop	r17
    7434:	0f 91       	pop	r16
    7436:	ef 90       	pop	r14
    7438:	cf 90       	pop	r12
    743a:	af 90       	pop	r10
    743c:	9f 90       	pop	r9
    743e:	8f 90       	pop	r8
    7440:	08 95       	ret

00007442 <lora_driver_resetRn2483>:
    7442:	88 23       	and	r24, r24
    7444:	31 f0       	breq	.+12     	; 0x7452 <lora_driver_resetRn2483+0x10>
    7446:	e8 e0       	ldi	r30, 0x08	; 8
    7448:	f1 e0       	ldi	r31, 0x01	; 1
    744a:	80 81       	ld	r24, Z
    744c:	8f 7e       	andi	r24, 0xEF	; 239
    744e:	80 83       	st	Z, r24
    7450:	08 95       	ret
    7452:	e8 e0       	ldi	r30, 0x08	; 8
    7454:	f1 e0       	ldi	r31, 0x01	; 1
    7456:	80 81       	ld	r24, Z
    7458:	80 61       	ori	r24, 0x10	; 16
    745a:	80 83       	st	Z, r24
    745c:	08 95       	ret

0000745e <lora_driver_rn2483FactoryReset>:
    745e:	60 e0       	ldi	r22, 0x00	; 0
    7460:	70 e0       	ldi	r23, 0x00	; 0
    7462:	85 e0       	ldi	r24, 0x05	; 5
    7464:	95 e0       	ldi	r25, 0x05	; 5
    7466:	d4 de       	rcall	.-600    	; 0x7210 <_uploadMessage>
    7468:	ed ec       	ldi	r30, 0xCD	; 205
    746a:	f3 e1       	ldi	r31, 0x13	; 19
    746c:	01 90       	ld	r0, Z+
    746e:	00 20       	and	r0, r0
    7470:	e9 f7       	brne	.-6      	; 0x746c <lora_driver_rn2483FactoryReset+0xe>
    7472:	31 97       	sbiw	r30, 0x01	; 1
    7474:	ed 5c       	subi	r30, 0xCD	; 205
    7476:	f3 41       	sbci	r31, 0x13	; 19
    7478:	81 e0       	ldi	r24, 0x01	; 1
    747a:	75 97       	sbiw	r30, 0x15	; 21
    747c:	08 f0       	brcs	.+2      	; 0x7480 <lora_driver_rn2483FactoryReset+0x22>
    747e:	80 e0       	ldi	r24, 0x00	; 0
    7480:	08 95       	ret

00007482 <lora_driver_getRn2483Hweui>:
    7482:	cf 93       	push	r28
    7484:	df 93       	push	r29
    7486:	ec 01       	movw	r28, r24
    7488:	60 e0       	ldi	r22, 0x00	; 0
    748a:	70 e0       	ldi	r23, 0x00	; 0
    748c:	86 e1       	ldi	r24, 0x16	; 22
    748e:	95 e0       	ldi	r25, 0x05	; 5
    7490:	bf de       	rcall	.-642    	; 0x7210 <_uploadMessage>
    7492:	ed ec       	ldi	r30, 0xCD	; 205
    7494:	f3 e1       	ldi	r31, 0x13	; 19
    7496:	01 90       	ld	r0, Z+
    7498:	00 20       	and	r0, r0
    749a:	e9 f7       	brne	.-6      	; 0x7496 <lora_driver_getRn2483Hweui+0x14>
    749c:	ee 5d       	subi	r30, 0xDE	; 222
    749e:	f3 41       	sbci	r31, 0x13	; 19
    74a0:	39 f4       	brne	.+14     	; 0x74b0 <lora_driver_getRn2483Hweui+0x2e>
    74a2:	6d ec       	ldi	r22, 0xCD	; 205
    74a4:	73 e1       	ldi	r23, 0x13	; 19
    74a6:	ce 01       	movw	r24, r28
    74a8:	0e 94 24 46 	call	0x8c48	; 0x8c48 <strcpy>
    74ac:	80 e0       	ldi	r24, 0x00	; 0
    74ae:	02 c0       	rjmp	.+4      	; 0x74b4 <lora_driver_getRn2483Hweui+0x32>
    74b0:	18 82       	st	Y, r1
    74b2:	81 e0       	ldi	r24, 0x01	; 1
    74b4:	df 91       	pop	r29
    74b6:	cf 91       	pop	r28
    74b8:	08 95       	ret

000074ba <lora_driver_setDeviceIdentifier>:
    74ba:	fc 01       	movw	r30, r24
    74bc:	01 90       	ld	r0, Z+
    74be:	00 20       	and	r0, r0
    74c0:	e9 f7       	brne	.-6      	; 0x74bc <lora_driver_setDeviceIdentifier+0x2>
    74c2:	9f 01       	movw	r18, r30
    74c4:	21 51       	subi	r18, 0x11	; 17
    74c6:	31 09       	sbc	r19, r1
    74c8:	28 17       	cp	r18, r24
    74ca:	39 07       	cpc	r19, r25
    74cc:	29 f4       	brne	.+10     	; 0x74d8 <lora_driver_setDeviceIdentifier+0x1e>
    74ce:	bc 01       	movw	r22, r24
    74d0:	84 e4       	ldi	r24, 0x44	; 68
    74d2:	95 e0       	ldi	r25, 0x05	; 5
    74d4:	6c cf       	rjmp	.-296    	; 0x73ae <_uploadMessageRc>
    74d6:	08 95       	ret
    74d8:	89 e0       	ldi	r24, 0x09	; 9
    74da:	08 95       	ret

000074dc <lora_driver_setApplicationIdentifier>:
    74dc:	fc 01       	movw	r30, r24
    74de:	01 90       	ld	r0, Z+
    74e0:	00 20       	and	r0, r0
    74e2:	e9 f7       	brne	.-6      	; 0x74de <lora_driver_setApplicationIdentifier+0x2>
    74e4:	9f 01       	movw	r18, r30
    74e6:	21 51       	subi	r18, 0x11	; 17
    74e8:	31 09       	sbc	r19, r1
    74ea:	28 17       	cp	r18, r24
    74ec:	39 07       	cpc	r19, r25
    74ee:	29 f4       	brne	.+10     	; 0x74fa <lora_driver_setApplicationIdentifier+0x1e>
    74f0:	bc 01       	movw	r22, r24
    74f2:	83 e5       	ldi	r24, 0x53	; 83
    74f4:	95 e0       	ldi	r25, 0x05	; 5
    74f6:	5b cf       	rjmp	.-330    	; 0x73ae <_uploadMessageRc>
    74f8:	08 95       	ret
    74fa:	89 e0       	ldi	r24, 0x09	; 9
    74fc:	08 95       	ret

000074fe <lora_driver_setApplicationKey>:
    74fe:	fc 01       	movw	r30, r24
    7500:	01 90       	ld	r0, Z+
    7502:	00 20       	and	r0, r0
    7504:	e9 f7       	brne	.-6      	; 0x7500 <lora_driver_setApplicationKey+0x2>
    7506:	9f 01       	movw	r18, r30
    7508:	21 52       	subi	r18, 0x21	; 33
    750a:	31 09       	sbc	r19, r1
    750c:	28 17       	cp	r18, r24
    750e:	39 07       	cpc	r19, r25
    7510:	29 f4       	brne	.+10     	; 0x751c <lora_driver_setApplicationKey+0x1e>
    7512:	bc 01       	movw	r22, r24
    7514:	82 e6       	ldi	r24, 0x62	; 98
    7516:	95 e0       	ldi	r25, 0x05	; 5
    7518:	4a cf       	rjmp	.-364    	; 0x73ae <_uploadMessageRc>
    751a:	08 95       	ret
    751c:	89 e0       	ldi	r24, 0x09	; 9
    751e:	08 95       	ret

00007520 <lora_driver_saveMac>:
    7520:	60 e0       	ldi	r22, 0x00	; 0
    7522:	70 e0       	ldi	r23, 0x00	; 0
    7524:	81 ea       	ldi	r24, 0xA1	; 161
    7526:	95 e0       	ldi	r25, 0x05	; 5
    7528:	42 cf       	rjmp	.-380    	; 0x73ae <_uploadMessageRc>
    752a:	08 95       	ret

0000752c <lora_driver_join>:
    752c:	0f 93       	push	r16
    752e:	1f 93       	push	r17
    7530:	e8 2f       	mov	r30, r24
    7532:	f0 e0       	ldi	r31, 0x00	; 0
    7534:	ee 0f       	add	r30, r30
    7536:	ff 1f       	adc	r31, r31
    7538:	e5 58       	subi	r30, 0x85	; 133
    753a:	f8 4f       	sbci	r31, 0xF8	; 248
    753c:	60 81       	ld	r22, Z
    753e:	71 81       	ldd	r23, Z+1	; 0x01
    7540:	8a ea       	ldi	r24, 0xAA	; 170
    7542:	95 e0       	ldi	r25, 0x05	; 5
    7544:	34 df       	rcall	.-408    	; 0x73ae <_uploadMessageRc>
    7546:	81 11       	cpse	r24, r1
    7548:	14 c0       	rjmp	.+40     	; 0x7572 <lora_driver_join+0x46>
    754a:	08 e2       	ldi	r16, 0x28	; 40
    754c:	15 e0       	ldi	r17, 0x05	; 5
    754e:	20 e0       	ldi	r18, 0x00	; 0
    7550:	30 e0       	ldi	r19, 0x00	; 0
    7552:	4d e2       	ldi	r20, 0x2D	; 45
    7554:	50 e0       	ldi	r21, 0x00	; 0
    7556:	6d ec       	ldi	r22, 0xCD	; 205
    7558:	73 e1       	ldi	r23, 0x13	; 19
    755a:	80 91 44 13 	lds	r24, 0x1344	; 0x801344 <_serialReplyBufferHandle>
    755e:	90 91 45 13 	lds	r25, 0x1345	; 0x801345 <_serialReplyBufferHandle+0x1>
    7562:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xStreamBufferReceive>
    7566:	88 23       	and	r24, r24
    7568:	21 f0       	breq	.+8      	; 0x7572 <lora_driver_join+0x46>
    756a:	8d ec       	ldi	r24, 0xCD	; 205
    756c:	93 e1       	ldi	r25, 0x13	; 19
    756e:	aa de       	rcall	.-684    	; 0x72c4 <_reply2ReturnCode>
    7570:	03 c0       	rjmp	.+6      	; 0x7578 <lora_driver_join+0x4c>
    7572:	8d ec       	ldi	r24, 0xCD	; 205
    7574:	93 e1       	ldi	r25, 0x13	; 19
    7576:	a6 de       	rcall	.-692    	; 0x72c4 <_reply2ReturnCode>
    7578:	1f 91       	pop	r17
    757a:	0f 91       	pop	r16
    757c:	08 95       	ret

0000757e <lora_driver_sendUploadMessage>:
    757e:	0f 93       	push	r16
    7580:	1f 93       	push	r17
    7582:	cf 93       	push	r28
    7584:	df 93       	push	r29
    7586:	1f 92       	push	r1
    7588:	cd b7       	in	r28, 0x3d	; 61
    758a:	de b7       	in	r29, 0x3e	; 62
    758c:	db 01       	movw	r26, r22
    758e:	11 96       	adiw	r26, 0x01	; 1
    7590:	9c 91       	ld	r25, X
    7592:	11 97       	sbiw	r26, 0x01	; 1
    7594:	95 31       	cpi	r25, 0x15	; 21
    7596:	08 f0       	brcs	.+2      	; 0x759a <lora_driver_sendUploadMessage+0x1c>
    7598:	b4 c0       	rjmp	.+360    	; 0x7702 <lora_driver_sendUploadMessage+0x184>
    759a:	99 23       	and	r25, r25
    759c:	81 f1       	breq	.+96     	; 0x75fe <lora_driver_sendUploadMessage+0x80>
    759e:	60 e0       	ldi	r22, 0x00	; 0
    75a0:	70 e0       	ldi	r23, 0x00	; 0
    75a2:	27 2f       	mov	r18, r23
    75a4:	30 e0       	ldi	r19, 0x00	; 0
    75a6:	46 2f       	mov	r20, r22
    75a8:	50 e0       	ldi	r21, 0x00	; 0
    75aa:	fd 01       	movw	r30, r26
    75ac:	e4 0f       	add	r30, r20
    75ae:	f5 1f       	adc	r31, r21
    75b0:	92 81       	ldd	r25, Z+2	; 0x02
    75b2:	92 95       	swap	r25
    75b4:	9f 70       	andi	r25, 0x0F	; 15
    75b6:	9a 30       	cpi	r25, 0x0A	; 10
    75b8:	10 f0       	brcs	.+4      	; 0x75be <lora_driver_sendUploadMessage+0x40>
    75ba:	99 5c       	subi	r25, 0xC9	; 201
    75bc:	01 c0       	rjmp	.+2      	; 0x75c0 <lora_driver_sendUploadMessage+0x42>
    75be:	90 5d       	subi	r25, 0xD0	; 208
    75c0:	f9 01       	movw	r30, r18
    75c2:	e2 5a       	subi	r30, 0xA2	; 162
    75c4:	fc 4e       	sbci	r31, 0xEC	; 236
    75c6:	90 83       	st	Z, r25
    75c8:	2f 5f       	subi	r18, 0xFF	; 255
    75ca:	3f 4f       	sbci	r19, 0xFF	; 255
    75cc:	fd 01       	movw	r30, r26
    75ce:	e4 0f       	add	r30, r20
    75d0:	f5 1f       	adc	r31, r21
    75d2:	92 81       	ldd	r25, Z+2	; 0x02
    75d4:	9f 70       	andi	r25, 0x0F	; 15
    75d6:	49 2f       	mov	r20, r25
    75d8:	50 e0       	ldi	r21, 0x00	; 0
    75da:	4a 30       	cpi	r20, 0x0A	; 10
    75dc:	51 05       	cpc	r21, r1
    75de:	14 f0       	brlt	.+4      	; 0x75e4 <lora_driver_sendUploadMessage+0x66>
    75e0:	99 5c       	subi	r25, 0xC9	; 201
    75e2:	01 c0       	rjmp	.+2      	; 0x75e6 <lora_driver_sendUploadMessage+0x68>
    75e4:	90 5d       	subi	r25, 0xD0	; 208
    75e6:	f9 01       	movw	r30, r18
    75e8:	e2 5a       	subi	r30, 0xA2	; 162
    75ea:	fc 4e       	sbci	r31, 0xEC	; 236
    75ec:	90 83       	st	Z, r25
    75ee:	7e 5f       	subi	r23, 0xFE	; 254
    75f0:	6f 5f       	subi	r22, 0xFF	; 255
    75f2:	11 96       	adiw	r26, 0x01	; 1
    75f4:	9c 91       	ld	r25, X
    75f6:	11 97       	sbiw	r26, 0x01	; 1
    75f8:	69 17       	cp	r22, r25
    75fa:	98 f2       	brcs	.-90     	; 0x75a2 <lora_driver_sendUploadMessage+0x24>
    75fc:	01 c0       	rjmp	.+2      	; 0x7600 <lora_driver_sendUploadMessage+0x82>
    75fe:	70 e0       	ldi	r23, 0x00	; 0
    7600:	e7 2f       	mov	r30, r23
    7602:	f0 e0       	ldi	r31, 0x00	; 0
    7604:	e2 5a       	subi	r30, 0xA2	; 162
    7606:	fc 4e       	sbci	r31, 0xEC	; 236
    7608:	10 82       	st	Z, r1
    760a:	4c 91       	ld	r20, X
    760c:	81 11       	cpse	r24, r1
    760e:	03 c0       	rjmp	.+6      	; 0x7616 <lora_driver_sendUploadMessage+0x98>
    7610:	83 eb       	ldi	r24, 0xB3	; 179
    7612:	95 e0       	ldi	r25, 0x05	; 5
    7614:	02 c0       	rjmp	.+4      	; 0x761a <lora_driver_sendUploadMessage+0x9c>
    7616:	85 eb       	ldi	r24, 0xB5	; 181
    7618:	95 e0       	ldi	r25, 0x05	; 5
    761a:	2e e5       	ldi	r18, 0x5E	; 94
    761c:	33 e1       	ldi	r19, 0x13	; 19
    761e:	3f 93       	push	r19
    7620:	2f 93       	push	r18
    7622:	1f 92       	push	r1
    7624:	4f 93       	push	r20
    7626:	9f 93       	push	r25
    7628:	8f 93       	push	r24
    762a:	89 eb       	ldi	r24, 0xB9	; 185
    762c:	95 e0       	ldi	r25, 0x05	; 5
    762e:	9f 93       	push	r25
    7630:	8f 93       	push	r24
    7632:	80 ea       	ldi	r24, 0xA0	; 160
    7634:	93 e1       	ldi	r25, 0x13	; 19
    7636:	9f 93       	push	r25
    7638:	8f 93       	push	r24
    763a:	0e 94 86 46 	call	0x8d0c	; 0x8d0c <sprintf>
    763e:	60 e0       	ldi	r22, 0x00	; 0
    7640:	70 e0       	ldi	r23, 0x00	; 0
    7642:	80 ea       	ldi	r24, 0xA0	; 160
    7644:	93 e1       	ldi	r25, 0x13	; 19
    7646:	b3 de       	rcall	.-666    	; 0x73ae <_uploadMessageRc>
    7648:	0f b6       	in	r0, 0x3f	; 63
    764a:	f8 94       	cli
    764c:	de bf       	out	0x3e, r29	; 62
    764e:	0f be       	out	0x3f, r0	; 63
    7650:	cd bf       	out	0x3d, r28	; 61
    7652:	81 11       	cpse	r24, r1
    7654:	59 c0       	rjmp	.+178    	; 0x7708 <lora_driver_sendUploadMessage+0x18a>
    7656:	08 e2       	ldi	r16, 0x28	; 40
    7658:	15 e0       	ldi	r17, 0x05	; 5
    765a:	20 e0       	ldi	r18, 0x00	; 0
    765c:	30 e0       	ldi	r19, 0x00	; 0
    765e:	4d e2       	ldi	r20, 0x2D	; 45
    7660:	50 e0       	ldi	r21, 0x00	; 0
    7662:	6d ec       	ldi	r22, 0xCD	; 205
    7664:	73 e1       	ldi	r23, 0x13	; 19
    7666:	80 91 44 13 	lds	r24, 0x1344	; 0x801344 <_serialReplyBufferHandle>
    766a:	90 91 45 13 	lds	r25, 0x1345	; 0x801345 <_serialReplyBufferHandle+0x1>
    766e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xStreamBufferReceive>
    7672:	88 23       	and	r24, r24
    7674:	09 f4       	brne	.+2      	; 0x7678 <lora_driver_sendUploadMessage+0xfa>
    7676:	47 c0       	rjmp	.+142    	; 0x7706 <lora_driver_sendUploadMessage+0x188>
    7678:	8d ec       	ldi	r24, 0xCD	; 205
    767a:	93 e1       	ldi	r25, 0x13	; 19
    767c:	23 de       	rcall	.-954    	; 0x72c4 <_reply2ReturnCode>
    767e:	8e 30       	cpi	r24, 0x0E	; 14
    7680:	09 f0       	breq	.+2      	; 0x7684 <lora_driver_sendUploadMessage+0x106>
    7682:	42 c0       	rjmp	.+132    	; 0x7708 <lora_driver_sendUploadMessage+0x18a>
    7684:	87 e0       	ldi	r24, 0x07	; 7
    7686:	89 83       	std	Y+1, r24	; 0x01
    7688:	80 91 42 13 	lds	r24, 0x1342	; 0x801342 <_downlinkMessageBuffer>
    768c:	90 91 43 13 	lds	r25, 0x1343	; 0x801343 <_downlinkMessageBuffer+0x1>
    7690:	89 2b       	or	r24, r25
    7692:	a9 f1       	breq	.+106    	; 0x76fe <lora_driver_sendUploadMessage+0x180>
    7694:	be 01       	movw	r22, r28
    7696:	6f 5f       	subi	r22, 0xFF	; 255
    7698:	7f 4f       	sbci	r23, 0xFF	; 255
    769a:	8d ec       	ldi	r24, 0xCD	; 205
    769c:	93 e1       	ldi	r25, 0x13	; 19
    769e:	68 d1       	rcall	.+720    	; 0x7970 <decode_port_no>
    76a0:	80 93 48 13 	sts	0x1348, r24	; 0x801348 <_downlinkPayload>
    76a4:	e9 81       	ldd	r30, Y+1	; 0x01
    76a6:	f0 e0       	ldi	r31, 0x00	; 0
    76a8:	e3 53       	subi	r30, 0x33	; 51
    76aa:	fc 4e       	sbci	r31, 0xEC	; 236
    76ac:	df 01       	movw	r26, r30
    76ae:	0d 90       	ld	r0, X+
    76b0:	00 20       	and	r0, r0
    76b2:	e9 f7       	brne	.-6      	; 0x76ae <lora_driver_sendUploadMessage+0x130>
    76b4:	11 97       	sbiw	r26, 0x01	; 1
    76b6:	ae 1b       	sub	r26, r30
    76b8:	bf 0b       	sbc	r27, r31
    76ba:	aa 23       	and	r26, r26
    76bc:	91 f0       	breq	.+36     	; 0x76e2 <lora_driver_sendUploadMessage+0x164>
    76be:	bb 27       	eor	r27, r27
    76c0:	cd 01       	movw	r24, r26
    76c2:	01 97       	sbiw	r24, 0x01	; 1
    76c4:	9c 01       	movw	r18, r24
    76c6:	12 f4       	brpl	.+4      	; 0x76cc <lora_driver_sendUploadMessage+0x14e>
    76c8:	2f 5f       	subi	r18, 0xFF	; 255
    76ca:	3f 4f       	sbci	r19, 0xFF	; 255
    76cc:	35 95       	asr	r19
    76ce:	27 95       	ror	r18
    76d0:	20 93 49 13 	sts	0x1349, r18	; 0x801349 <_downlinkPayload+0x1>
    76d4:	af 01       	movw	r20, r30
    76d6:	4f 5f       	subi	r20, 0xFF	; 255
    76d8:	5f 4f       	sbci	r21, 0xFF	; 255
    76da:	64 e1       	ldi	r22, 0x14	; 20
    76dc:	8a e4       	ldi	r24, 0x4A	; 74
    76de:	93 e1       	ldi	r25, 0x13	; 19
    76e0:	73 d1       	rcall	.+742    	; 0x79c8 <decode_hexadecimal_string_bytes>
    76e2:	01 e0       	ldi	r16, 0x01	; 1
    76e4:	10 e0       	ldi	r17, 0x00	; 0
    76e6:	20 e0       	ldi	r18, 0x00	; 0
    76e8:	30 e0       	ldi	r19, 0x00	; 0
    76ea:	46 e1       	ldi	r20, 0x16	; 22
    76ec:	50 e0       	ldi	r21, 0x00	; 0
    76ee:	68 e4       	ldi	r22, 0x48	; 72
    76f0:	73 e1       	ldi	r23, 0x13	; 19
    76f2:	80 91 42 13 	lds	r24, 0x1342	; 0x801342 <_downlinkMessageBuffer>
    76f6:	90 91 43 13 	lds	r25, 0x1343	; 0x801343 <_downlinkMessageBuffer+0x1>
    76fa:	0e 94 5f 13 	call	0x26be	; 0x26be <xStreamBufferSend>
    76fe:	8e e0       	ldi	r24, 0x0E	; 14
    7700:	03 c0       	rjmp	.+6      	; 0x7708 <lora_driver_sendUploadMessage+0x18a>
    7702:	84 e1       	ldi	r24, 0x14	; 20
    7704:	01 c0       	rjmp	.+2      	; 0x7708 <lora_driver_sendUploadMessage+0x18a>
    7706:	80 e0       	ldi	r24, 0x00	; 0
    7708:	0f 90       	pop	r0
    770a:	df 91       	pop	r29
    770c:	cf 91       	pop	r28
    770e:	1f 91       	pop	r17
    7710:	0f 91       	pop	r16
    7712:	08 95       	ret

00007714 <lora_driver_setAdaptiveDataRate>:
    7714:	81 30       	cpi	r24, 0x01	; 1
    7716:	19 f0       	breq	.+6      	; 0x771e <lora_driver_setAdaptiveDataRate+0xa>
    7718:	69 ec       	ldi	r22, 0xC9	; 201
    771a:	75 e0       	ldi	r23, 0x05	; 5
    771c:	02 c0       	rjmp	.+4      	; 0x7722 <lora_driver_setAdaptiveDataRate+0xe>
    771e:	62 ea       	ldi	r22, 0xA2	; 162
    7720:	76 e0       	ldi	r23, 0x06	; 6
    7722:	8d ec       	ldi	r24, 0xCD	; 205
    7724:	95 e0       	ldi	r25, 0x05	; 5
    7726:	43 ce       	rjmp	.-890    	; 0x73ae <_uploadMessageRc>
    7728:	08 95       	ret

0000772a <lora_driver_setReceiveDelay>:
    772a:	9f 93       	push	r25
    772c:	8f 93       	push	r24
    772e:	8e ef       	ldi	r24, 0xFE	; 254
    7730:	95 e0       	ldi	r25, 0x05	; 5
    7732:	9f 93       	push	r25
    7734:	8f 93       	push	r24
    7736:	80 ea       	ldi	r24, 0xA0	; 160
    7738:	93 e1       	ldi	r25, 0x13	; 19
    773a:	9f 93       	push	r25
    773c:	8f 93       	push	r24
    773e:	0e 94 86 46 	call	0x8d0c	; 0x8d0c <sprintf>
    7742:	60 e0       	ldi	r22, 0x00	; 0
    7744:	70 e0       	ldi	r23, 0x00	; 0
    7746:	80 ea       	ldi	r24, 0xA0	; 160
    7748:	93 e1       	ldi	r25, 0x13	; 19
    774a:	31 de       	rcall	.-926    	; 0x73ae <_uploadMessageRc>
    774c:	0f 90       	pop	r0
    774e:	0f 90       	pop	r0
    7750:	0f 90       	pop	r0
    7752:	0f 90       	pop	r0
    7754:	0f 90       	pop	r0
    7756:	0f 90       	pop	r0
    7758:	08 95       	ret

0000775a <lora_driver_configureToEu868>:
    775a:	2f 92       	push	r2
    775c:	3f 92       	push	r3
    775e:	4f 92       	push	r4
    7760:	5f 92       	push	r5
    7762:	6f 92       	push	r6
    7764:	7f 92       	push	r7
    7766:	8f 92       	push	r8
    7768:	9f 92       	push	r9
    776a:	af 92       	push	r10
    776c:	bf 92       	push	r11
    776e:	cf 92       	push	r12
    7770:	df 92       	push	r13
    7772:	ef 92       	push	r14
    7774:	ff 92       	push	r15
    7776:	0f 93       	push	r16
    7778:	1f 93       	push	r17
    777a:	cf 93       	push	r28
    777c:	df 93       	push	r29
    777e:	cd b7       	in	r28, 0x3d	; 61
    7780:	de b7       	in	r29, 0x3e	; 62
    7782:	a0 97       	sbiw	r28, 0x20	; 32
    7784:	0f b6       	in	r0, 0x3f	; 63
    7786:	f8 94       	cli
    7788:	de bf       	out	0x3e, r29	; 62
    778a:	0f be       	out	0x3f, r0	; 63
    778c:	cd bf       	out	0x3d, r28	; 61
    778e:	6b e2       	ldi	r22, 0x2B	; 43
    7790:	76 e0       	ldi	r23, 0x06	; 6
    7792:	87 e3       	ldi	r24, 0x37	; 55
    7794:	96 e0       	ldi	r25, 0x06	; 6
    7796:	3c dd       	rcall	.-1416   	; 0x7210 <_uploadMessage>
    7798:	95 dd       	rcall	.-1238   	; 0x72c4 <_reply2ReturnCode>
    779a:	81 11       	cpse	r24, r1
    779c:	a3 c0       	rjmp	.+326    	; 0x78e4 <lora_driver_configureToEu868+0x18a>
    779e:	80 e2       	ldi	r24, 0x20	; 32
    77a0:	e9 e9       	ldi	r30, 0x99	; 153
    77a2:	f4 e0       	ldi	r31, 0x04	; 4
    77a4:	de 01       	movw	r26, r28
    77a6:	11 96       	adiw	r26, 0x01	; 1
    77a8:	01 90       	ld	r0, Z+
    77aa:	0d 92       	st	X+, r0
    77ac:	8a 95       	dec	r24
    77ae:	e1 f7       	brne	.-8      	; 0x77a8 <lora_driver_configureToEu868+0x4e>
    77b0:	9e 01       	movw	r18, r28
    77b2:	2f 5f       	subi	r18, 0xFF	; 255
    77b4:	3f 4f       	sbci	r19, 0xFF	; 255
    77b6:	69 01       	movw	r12, r18
    77b8:	e1 2c       	mov	r14, r1
    77ba:	f1 2c       	mov	r15, r1
    77bc:	0f 2e       	mov	r0, r31
    77be:	f3 e4       	ldi	r31, 0x43	; 67
    77c0:	af 2e       	mov	r10, r31
    77c2:	f6 e0       	ldi	r31, 0x06	; 6
    77c4:	bf 2e       	mov	r11, r31
    77c6:	f0 2d       	mov	r31, r0
    77c8:	00 ea       	ldi	r16, 0xA0	; 160
    77ca:	13 e1       	ldi	r17, 0x13	; 19
    77cc:	0f 2e       	mov	r0, r31
    77ce:	fc e5       	ldi	r31, 0x5C	; 92
    77d0:	4f 2e       	mov	r4, r31
    77d2:	f6 e0       	ldi	r31, 0x06	; 6
    77d4:	5f 2e       	mov	r5, r31
    77d6:	f0 2d       	mov	r31, r0
    77d8:	0f 2e       	mov	r0, r31
    77da:	f3 e7       	ldi	r31, 0x73	; 115
    77dc:	8f 2e       	mov	r8, r31
    77de:	f6 e0       	ldi	r31, 0x06	; 6
    77e0:	9f 2e       	mov	r9, r31
    77e2:	f0 2d       	mov	r31, r0
    77e4:	0f 2e       	mov	r0, r31
    77e6:	fd e8       	ldi	r31, 0x8D	; 141
    77e8:	6f 2e       	mov	r6, r31
    77ea:	f6 e0       	ldi	r31, 0x06	; 6
    77ec:	7f 2e       	mov	r7, r31
    77ee:	f0 2d       	mov	r31, r0
    77f0:	3e 2c       	mov	r3, r14
    77f2:	2f 2c       	mov	r2, r15
    77f4:	ff 92       	push	r15
    77f6:	ef 92       	push	r14
    77f8:	bf 92       	push	r11
    77fa:	af 92       	push	r10
    77fc:	1f 93       	push	r17
    77fe:	0f 93       	push	r16
    7800:	0e 94 86 46 	call	0x8d0c	; 0x8d0c <sprintf>
    7804:	60 e0       	ldi	r22, 0x00	; 0
    7806:	70 e0       	ldi	r23, 0x00	; 0
    7808:	c8 01       	movw	r24, r16
    780a:	02 dd       	rcall	.-1532   	; 0x7210 <_uploadMessage>
    780c:	5b dd       	rcall	.-1354   	; 0x72c4 <_reply2ReturnCode>
    780e:	0f 90       	pop	r0
    7810:	0f 90       	pop	r0
    7812:	0f 90       	pop	r0
    7814:	0f 90       	pop	r0
    7816:	0f 90       	pop	r0
    7818:	0f 90       	pop	r0
    781a:	81 11       	cpse	r24, r1
    781c:	63 c0       	rjmp	.+198    	; 0x78e4 <lora_driver_configureToEu868+0x18a>
    781e:	32 e0       	ldi	r19, 0x02	; 2
    7820:	3e 15       	cp	r19, r14
    7822:	e8 f4       	brcc	.+58     	; 0x785e <lora_driver_configureToEu868+0x104>
    7824:	f6 01       	movw	r30, r12
    7826:	83 81       	ldd	r24, Z+3	; 0x03
    7828:	8f 93       	push	r24
    782a:	82 81       	ldd	r24, Z+2	; 0x02
    782c:	8f 93       	push	r24
    782e:	81 81       	ldd	r24, Z+1	; 0x01
    7830:	8f 93       	push	r24
    7832:	80 81       	ld	r24, Z
    7834:	8f 93       	push	r24
    7836:	ff 92       	push	r15
    7838:	ef 92       	push	r14
    783a:	5f 92       	push	r5
    783c:	4f 92       	push	r4
    783e:	1f 93       	push	r17
    7840:	0f 93       	push	r16
    7842:	0e 94 86 46 	call	0x8d0c	; 0x8d0c <sprintf>
    7846:	60 e0       	ldi	r22, 0x00	; 0
    7848:	70 e0       	ldi	r23, 0x00	; 0
    784a:	c8 01       	movw	r24, r16
    784c:	e1 dc       	rcall	.-1598   	; 0x7210 <_uploadMessage>
    784e:	3a dd       	rcall	.-1420   	; 0x72c4 <_reply2ReturnCode>
    7850:	0f b6       	in	r0, 0x3f	; 63
    7852:	f8 94       	cli
    7854:	de bf       	out	0x3e, r29	; 62
    7856:	0f be       	out	0x3f, r0	; 63
    7858:	cd bf       	out	0x3d, r28	; 61
    785a:	81 11       	cpse	r24, r1
    785c:	43 c0       	rjmp	.+134    	; 0x78e4 <lora_driver_configureToEu868+0x18a>
    785e:	2f 92       	push	r2
    7860:	3f 92       	push	r3
    7862:	9f 92       	push	r9
    7864:	8f 92       	push	r8
    7866:	1f 93       	push	r17
    7868:	0f 93       	push	r16
    786a:	0e 94 86 46 	call	0x8d0c	; 0x8d0c <sprintf>
    786e:	60 e0       	ldi	r22, 0x00	; 0
    7870:	70 e0       	ldi	r23, 0x00	; 0
    7872:	c8 01       	movw	r24, r16
    7874:	cd dc       	rcall	.-1638   	; 0x7210 <_uploadMessage>
    7876:	26 dd       	rcall	.-1460   	; 0x72c4 <_reply2ReturnCode>
    7878:	0f 90       	pop	r0
    787a:	0f 90       	pop	r0
    787c:	0f 90       	pop	r0
    787e:	0f 90       	pop	r0
    7880:	0f 90       	pop	r0
    7882:	0f 90       	pop	r0
    7884:	81 11       	cpse	r24, r1
    7886:	2e c0       	rjmp	.+92     	; 0x78e4 <lora_driver_configureToEu868+0x18a>
    7888:	2f 92       	push	r2
    788a:	3f 92       	push	r3
    788c:	7f 92       	push	r7
    788e:	6f 92       	push	r6
    7890:	1f 93       	push	r17
    7892:	0f 93       	push	r16
    7894:	0e 94 86 46 	call	0x8d0c	; 0x8d0c <sprintf>
    7898:	60 e0       	ldi	r22, 0x00	; 0
    789a:	70 e0       	ldi	r23, 0x00	; 0
    789c:	c8 01       	movw	r24, r16
    789e:	b8 dc       	rcall	.-1680   	; 0x7210 <_uploadMessage>
    78a0:	11 dd       	rcall	.-1502   	; 0x72c4 <_reply2ReturnCode>
    78a2:	0f 90       	pop	r0
    78a4:	0f 90       	pop	r0
    78a6:	0f 90       	pop	r0
    78a8:	0f 90       	pop	r0
    78aa:	0f 90       	pop	r0
    78ac:	0f 90       	pop	r0
    78ae:	81 11       	cpse	r24, r1
    78b0:	19 c0       	rjmp	.+50     	; 0x78e4 <lora_driver_configureToEu868+0x18a>
    78b2:	3f ef       	ldi	r19, 0xFF	; 255
    78b4:	e3 1a       	sub	r14, r19
    78b6:	f3 0a       	sbc	r15, r19
    78b8:	84 e0       	ldi	r24, 0x04	; 4
    78ba:	c8 0e       	add	r12, r24
    78bc:	d1 1c       	adc	r13, r1
    78be:	98 e0       	ldi	r25, 0x08	; 8
    78c0:	e9 16       	cp	r14, r25
    78c2:	f1 04       	cpc	r15, r1
    78c4:	09 f0       	breq	.+2      	; 0x78c8 <lora_driver_configureToEu868+0x16e>
    78c6:	94 cf       	rjmp	.-216    	; 0x77f0 <lora_driver_configureToEu868+0x96>
    78c8:	60 e0       	ldi	r22, 0x00	; 0
    78ca:	70 e0       	ldi	r23, 0x00	; 0
    78cc:	85 ea       	ldi	r24, 0xA5	; 165
    78ce:	96 e0       	ldi	r25, 0x06	; 6
    78d0:	9f dc       	rcall	.-1730   	; 0x7210 <_uploadMessage>
    78d2:	f8 dc       	rcall	.-1552   	; 0x72c4 <_reply2ReturnCode>
    78d4:	81 11       	cpse	r24, r1
    78d6:	06 c0       	rjmp	.+12     	; 0x78e4 <lora_driver_configureToEu868+0x18a>
    78d8:	60 e0       	ldi	r22, 0x00	; 0
    78da:	70 e0       	ldi	r23, 0x00	; 0
    78dc:	86 eb       	ldi	r24, 0xB6	; 182
    78de:	96 e0       	ldi	r25, 0x06	; 6
    78e0:	97 dc       	rcall	.-1746   	; 0x7210 <_uploadMessage>
    78e2:	f0 dc       	rcall	.-1568   	; 0x72c4 <_reply2ReturnCode>
    78e4:	a0 96       	adiw	r28, 0x20	; 32
    78e6:	0f b6       	in	r0, 0x3f	; 63
    78e8:	f8 94       	cli
    78ea:	de bf       	out	0x3e, r29	; 62
    78ec:	0f be       	out	0x3f, r0	; 63
    78ee:	cd bf       	out	0x3d, r28	; 61
    78f0:	df 91       	pop	r29
    78f2:	cf 91       	pop	r28
    78f4:	1f 91       	pop	r17
    78f6:	0f 91       	pop	r16
    78f8:	ff 90       	pop	r15
    78fa:	ef 90       	pop	r14
    78fc:	df 90       	pop	r13
    78fe:	cf 90       	pop	r12
    7900:	bf 90       	pop	r11
    7902:	af 90       	pop	r10
    7904:	9f 90       	pop	r9
    7906:	8f 90       	pop	r8
    7908:	7f 90       	pop	r7
    790a:	6f 90       	pop	r6
    790c:	5f 90       	pop	r5
    790e:	4f 90       	pop	r4
    7910:	3f 90       	pop	r3
    7912:	2f 90       	pop	r2
    7914:	08 95       	ret

00007916 <lora_driver_setOtaaIdentity>:
    7916:	ef 92       	push	r14
    7918:	ff 92       	push	r15
    791a:	0f 93       	push	r16
    791c:	1f 93       	push	r17
    791e:	cf 93       	push	r28
    7920:	df 93       	push	r29
    7922:	ec 01       	movw	r28, r24
    7924:	8b 01       	movw	r16, r22
    7926:	7a 01       	movw	r14, r20
    7928:	81 e0       	ldi	r24, 0x01	; 1
    792a:	f4 de       	rcall	.-536    	; 0x7714 <lora_driver_setAdaptiveDataRate>
    792c:	81 11       	cpse	r24, r1
    792e:	0d c0       	rjmp	.+26     	; 0x794a <lora_driver_setOtaaIdentity+0x34>
    7930:	ce 01       	movw	r24, r28
    7932:	d4 dd       	rcall	.-1112   	; 0x74dc <lora_driver_setApplicationIdentifier>
    7934:	81 11       	cpse	r24, r1
    7936:	09 c0       	rjmp	.+18     	; 0x794a <lora_driver_setOtaaIdentity+0x34>
    7938:	c8 01       	movw	r24, r16
    793a:	e1 dd       	rcall	.-1086   	; 0x74fe <lora_driver_setApplicationKey>
    793c:	81 11       	cpse	r24, r1
    793e:	05 c0       	rjmp	.+10     	; 0x794a <lora_driver_setOtaaIdentity+0x34>
    7940:	c7 01       	movw	r24, r14
    7942:	bb dd       	rcall	.-1162   	; 0x74ba <lora_driver_setDeviceIdentifier>
    7944:	81 11       	cpse	r24, r1
    7946:	01 c0       	rjmp	.+2      	; 0x794a <lora_driver_setOtaaIdentity+0x34>
    7948:	eb dd       	rcall	.-1066   	; 0x7520 <lora_driver_saveMac>
    794a:	df 91       	pop	r29
    794c:	cf 91       	pop	r28
    794e:	1f 91       	pop	r17
    7950:	0f 91       	pop	r16
    7952:	ff 90       	pop	r15
    7954:	ef 90       	pop	r14
    7956:	08 95       	ret

00007958 <lora_driver_mapReturnCodeToText>:
    7958:	90 e0       	ldi	r25, 0x00	; 0
    795a:	fc 01       	movw	r30, r24
    795c:	ee 0f       	add	r30, r30
    795e:	ff 1f       	adc	r31, r31
    7960:	8e 0f       	add	r24, r30
    7962:	9f 1f       	adc	r25, r31
    7964:	fc 01       	movw	r30, r24
    7966:	e1 58       	subi	r30, 0x81	; 129
    7968:	f8 4f       	sbci	r31, 0xF8	; 248
    796a:	81 81       	ldd	r24, Z+1	; 0x01
    796c:	92 81       	ldd	r25, Z+2	; 0x02
    796e:	08 95       	ret

00007970 <decode_port_no>:
    7970:	dc 01       	movw	r26, r24
    7972:	00 97       	sbiw	r24, 0x00	; 0
    7974:	29 f1       	breq	.+74     	; 0x79c0 <decode_port_no+0x50>
    7976:	fb 01       	movw	r30, r22
    7978:	20 81       	ld	r18, Z
    797a:	fc 01       	movw	r30, r24
    797c:	01 90       	ld	r0, Z+
    797e:	00 20       	and	r0, r0
    7980:	e9 f7       	brne	.-6      	; 0x797c <decode_port_no+0xc>
    7982:	31 97       	sbiw	r30, 0x01	; 1
    7984:	e8 1b       	sub	r30, r24
    7986:	f9 0b       	sbc	r31, r25
    7988:	82 2f       	mov	r24, r18
    798a:	90 e0       	ldi	r25, 0x00	; 0
    798c:	e8 17       	cp	r30, r24
    798e:	f9 07       	cpc	r31, r25
    7990:	c8 f0       	brcs	.+50     	; 0x79c4 <decode_port_no+0x54>
    7992:	80 e0       	ldi	r24, 0x00	; 0
    7994:	08 c0       	rjmp	.+16     	; 0x79a6 <decode_port_no+0x36>
    7996:	88 0f       	add	r24, r24
    7998:	38 2f       	mov	r19, r24
    799a:	33 0f       	add	r19, r19
    799c:	33 0f       	add	r19, r19
    799e:	83 0f       	add	r24, r19
    79a0:	80 53       	subi	r24, 0x30	; 48
    79a2:	89 0f       	add	r24, r25
    79a4:	2f 5f       	subi	r18, 0xFF	; 255
    79a6:	fd 01       	movw	r30, r26
    79a8:	e2 0f       	add	r30, r18
    79aa:	f1 1d       	adc	r31, r1
    79ac:	90 81       	ld	r25, Z
    79ae:	30 ed       	ldi	r19, 0xD0	; 208
    79b0:	39 0f       	add	r19, r25
    79b2:	3a 30       	cpi	r19, 0x0A	; 10
    79b4:	10 f4       	brcc	.+4      	; 0x79ba <decode_port_no+0x4a>
    79b6:	91 11       	cpse	r25, r1
    79b8:	ee cf       	rjmp	.-36     	; 0x7996 <decode_port_no+0x26>
    79ba:	fb 01       	movw	r30, r22
    79bc:	20 83       	st	Z, r18
    79be:	08 95       	ret
    79c0:	80 e0       	ldi	r24, 0x00	; 0
    79c2:	08 95       	ret
    79c4:	80 e0       	ldi	r24, 0x00	; 0
    79c6:	08 95       	ret

000079c8 <decode_hexadecimal_string_bytes>:
    79c8:	0f 93       	push	r16
    79ca:	1f 93       	push	r17
    79cc:	cf 93       	push	r28
    79ce:	df 93       	push	r29
    79d0:	dc 01       	movw	r26, r24
    79d2:	ea 01       	movw	r28, r20
    79d4:	20 97       	sbiw	r28, 0x00	; 0
    79d6:	e1 f1       	breq	.+120    	; 0x7a50 <decode_hexadecimal_string_bytes+0x88>
    79d8:	fa 01       	movw	r30, r20
    79da:	01 90       	ld	r0, Z+
    79dc:	00 20       	and	r0, r0
    79de:	e9 f7       	brne	.-6      	; 0x79da <decode_hexadecimal_string_bytes+0x12>
    79e0:	31 97       	sbiw	r30, 0x01	; 1
    79e2:	e4 1b       	sub	r30, r20
    79e4:	f5 0b       	sbc	r31, r21
    79e6:	32 97       	sbiw	r30, 0x02	; 2
    79e8:	10 f5       	brcc	.+68     	; 0x7a2e <decode_hexadecimal_string_bytes+0x66>
    79ea:	32 c0       	rjmp	.+100    	; 0x7a50 <decode_hexadecimal_string_bytes+0x88>
    79ec:	8d 01       	movw	r16, r26
    79ee:	04 0f       	add	r16, r20
    79f0:	15 1f       	adc	r17, r21
    79f2:	30 e0       	ldi	r19, 0x00	; 0
    79f4:	ae 01       	movw	r20, r28
    79f6:	42 0f       	add	r20, r18
    79f8:	53 1f       	adc	r21, r19
    79fa:	fa 01       	movw	r30, r20
    79fc:	90 81       	ld	r25, Z
    79fe:	91 34       	cpi	r25, 0x41	; 65
    7a00:	28 f0       	brcs	.+10     	; 0x7a0c <decode_hexadecimal_string_bytes+0x44>
    7a02:	97 53       	subi	r25, 0x37	; 55
    7a04:	59 2f       	mov	r21, r25
    7a06:	52 95       	swap	r21
    7a08:	50 7f       	andi	r21, 0xF0	; 240
    7a0a:	03 c0       	rjmp	.+6      	; 0x7a12 <decode_hexadecimal_string_bytes+0x4a>
    7a0c:	59 2f       	mov	r21, r25
    7a0e:	52 95       	swap	r21
    7a10:	50 7f       	andi	r21, 0xF0	; 240
    7a12:	2c 0f       	add	r18, r28
    7a14:	3d 1f       	adc	r19, r29
    7a16:	f9 01       	movw	r30, r18
    7a18:	91 81       	ldd	r25, Z+1	; 0x01
    7a1a:	91 34       	cpi	r25, 0x41	; 65
    7a1c:	10 f0       	brcs	.+4      	; 0x7a22 <decode_hexadecimal_string_bytes+0x5a>
    7a1e:	97 53       	subi	r25, 0x37	; 55
    7a20:	01 c0       	rjmp	.+2      	; 0x7a24 <decode_hexadecimal_string_bytes+0x5c>
    7a22:	90 53       	subi	r25, 0x30	; 48
    7a24:	95 0f       	add	r25, r21
    7a26:	f8 01       	movw	r30, r16
    7a28:	90 83       	st	Z, r25
    7a2a:	8f 5f       	subi	r24, 0xFF	; 255
    7a2c:	01 c0       	rjmp	.+2      	; 0x7a30 <decode_hexadecimal_string_bytes+0x68>
    7a2e:	80 e0       	ldi	r24, 0x00	; 0
    7a30:	28 2f       	mov	r18, r24
    7a32:	22 0f       	add	r18, r18
    7a34:	48 2f       	mov	r20, r24
    7a36:	50 e0       	ldi	r21, 0x00	; 0
    7a38:	fe 01       	movw	r30, r28
    7a3a:	01 90       	ld	r0, Z+
    7a3c:	00 20       	and	r0, r0
    7a3e:	e9 f7       	brne	.-6      	; 0x7a3a <decode_hexadecimal_string_bytes+0x72>
    7a40:	31 97       	sbiw	r30, 0x01	; 1
    7a42:	ec 1b       	sub	r30, r28
    7a44:	fd 0b       	sbc	r31, r29
    7a46:	4e 17       	cp	r20, r30
    7a48:	5f 07       	cpc	r21, r31
    7a4a:	10 f4       	brcc	.+4      	; 0x7a50 <decode_hexadecimal_string_bytes+0x88>
    7a4c:	86 13       	cpse	r24, r22
    7a4e:	ce cf       	rjmp	.-100    	; 0x79ec <decode_hexadecimal_string_bytes+0x24>
    7a50:	df 91       	pop	r29
    7a52:	cf 91       	pop	r28
    7a54:	1f 91       	pop	r17
    7a56:	0f 91       	pop	r16
    7a58:	08 95       	ret

00007a5a <_serialCallBack>:
    7a5a:	80 91 fd 13 	lds	r24, 0x13FD	; 0x8013fd <crc_sum.1945>
    7a5e:	86 0f       	add	r24, r22
    7a60:	80 93 fd 13 	sts	0x13FD, r24	; 0x8013fd <crc_sum.1945>
    7a64:	90 91 00 14 	lds	r25, 0x1400	; 0x801400 <_mh_state>
    7a68:	91 30       	cpi	r25, 0x01	; 1
    7a6a:	79 f0       	breq	.+30     	; 0x7a8a <_serialCallBack+0x30>
    7a6c:	28 f0       	brcs	.+10     	; 0x7a78 <_serialCallBack+0x1e>
    7a6e:	92 30       	cpi	r25, 0x02	; 2
    7a70:	a9 f0       	breq	.+42     	; 0x7a9c <_serialCallBack+0x42>
    7a72:	93 30       	cpi	r25, 0x03	; 3
    7a74:	19 f1       	breq	.+70     	; 0x7abc <_serialCallBack+0x62>
    7a76:	08 95       	ret
    7a78:	6f 3f       	cpi	r22, 0xFF	; 255
    7a7a:	09 f0       	breq	.+2      	; 0x7a7e <_serialCallBack+0x24>
    7a7c:	48 c0       	rjmp	.+144    	; 0x7b0e <_serialCallBack+0xb4>
    7a7e:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <crc_sum.1945>
    7a82:	81 e0       	ldi	r24, 0x01	; 1
    7a84:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <_mh_state>
    7a88:	08 95       	ret
    7a8a:	66 38       	cpi	r22, 0x86	; 134
    7a8c:	09 f0       	breq	.+2      	; 0x7a90 <_serialCallBack+0x36>
    7a8e:	3f c0       	rjmp	.+126    	; 0x7b0e <_serialCallBack+0xb4>
    7a90:	10 92 fc 13 	sts	0x13FC, r1	; 0x8013fc <inDex.1943>
    7a94:	82 e0       	ldi	r24, 0x02	; 2
    7a96:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <_mh_state>
    7a9a:	08 95       	ret
    7a9c:	e0 91 fc 13 	lds	r30, 0x13FC	; 0x8013fc <inDex.1943>
    7aa0:	81 e0       	ldi	r24, 0x01	; 1
    7aa2:	8e 0f       	add	r24, r30
    7aa4:	80 93 fc 13 	sts	0x13FC, r24	; 0x8013fc <inDex.1943>
    7aa8:	f0 e0       	ldi	r31, 0x00	; 0
    7aaa:	e6 50       	subi	r30, 0x06	; 6
    7aac:	fc 4e       	sbci	r31, 0xEC	; 236
    7aae:	60 83       	st	Z, r22
    7ab0:	82 30       	cpi	r24, 0x02	; 2
    7ab2:	69 f5       	brne	.+90     	; 0x7b0e <_serialCallBack+0xb4>
    7ab4:	83 e0       	ldi	r24, 0x03	; 3
    7ab6:	80 93 00 14 	sts	0x1400, r24	; 0x801400 <_mh_state>
    7aba:	08 95       	ret
    7abc:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <inDex.1943>
    7ac0:	21 e0       	ldi	r18, 0x01	; 1
    7ac2:	29 0f       	add	r18, r25
    7ac4:	20 93 fc 13 	sts	0x13FC, r18	; 0x8013fc <inDex.1943>
    7ac8:	96 30       	cpi	r25, 0x06	; 6
    7aca:	09 f5       	brne	.+66     	; 0x7b0e <_serialCallBack+0xb4>
    7acc:	81 11       	cpse	r24, r1
    7ace:	0e c0       	rjmp	.+28     	; 0x7aec <_serialCallBack+0x92>
    7ad0:	ea ef       	ldi	r30, 0xFA	; 250
    7ad2:	f3 e1       	ldi	r31, 0x13	; 19
    7ad4:	80 81       	ld	r24, Z
    7ad6:	90 e0       	ldi	r25, 0x00	; 0
    7ad8:	98 2f       	mov	r25, r24
    7ada:	88 27       	eor	r24, r24
    7adc:	21 81       	ldd	r18, Z+1	; 0x01
    7ade:	82 0f       	add	r24, r18
    7ae0:	91 1d       	adc	r25, r1
    7ae2:	90 93 02 14 	sts	0x1402, r25	; 0x801402 <_ppm+0x1>
    7ae6:	80 93 01 14 	sts	0x1401, r24	; 0x801401 <_ppm>
    7aea:	04 c0       	rjmp	.+8      	; 0x7af4 <_serialCallBack+0x9a>
    7aec:	10 92 02 14 	sts	0x1402, r1	; 0x801402 <_ppm+0x1>
    7af0:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <_ppm>
    7af4:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <_mh_state>
    7af8:	e0 91 fe 13 	lds	r30, 0x13FE	; 0x8013fe <_appCallBack>
    7afc:	f0 91 ff 13 	lds	r31, 0x13FF	; 0x8013ff <_appCallBack+0x1>
    7b00:	30 97       	sbiw	r30, 0x00	; 0
    7b02:	29 f0       	breq	.+10     	; 0x7b0e <_serialCallBack+0xb4>
    7b04:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <_ppm>
    7b08:	90 91 02 14 	lds	r25, 0x1402	; 0x801402 <_ppm+0x1>
    7b0c:	19 95       	eicall
    7b0e:	08 95       	ret

00007b10 <mh_z19_initialise>:
    7b10:	8f 92       	push	r8
    7b12:	9f 92       	push	r9
    7b14:	af 92       	push	r10
    7b16:	cf 92       	push	r12
    7b18:	ef 92       	push	r14
    7b1a:	0f 93       	push	r16
    7b1c:	0f 2e       	mov	r0, r31
    7b1e:	fd e2       	ldi	r31, 0x2D	; 45
    7b20:	8f 2e       	mov	r8, r31
    7b22:	fd e3       	ldi	r31, 0x3D	; 61
    7b24:	9f 2e       	mov	r9, r31
    7b26:	f0 2d       	mov	r31, r0
    7b28:	68 94       	set
    7b2a:	aa 24       	eor	r10, r10
    7b2c:	a4 f8       	bld	r10, 4
    7b2e:	68 94       	set
    7b30:	cc 24       	eor	r12, r12
    7b32:	c4 f8       	bld	r12, 4
    7b34:	e1 2c       	mov	r14, r1
    7b36:	00 e0       	ldi	r16, 0x00	; 0
    7b38:	23 e0       	ldi	r18, 0x03	; 3
    7b3a:	40 e8       	ldi	r20, 0x80	; 128
    7b3c:	55 e2       	ldi	r21, 0x25	; 37
    7b3e:	60 e0       	ldi	r22, 0x00	; 0
    7b40:	70 e0       	ldi	r23, 0x00	; 0
    7b42:	50 d0       	rcall	.+160    	; 0x7be4 <serial_create>
    7b44:	90 93 04 14 	sts	0x1404, r25	; 0x801404 <_serial+0x1>
    7b48:	80 93 03 14 	sts	0x1403, r24	; 0x801403 <_serial>
    7b4c:	0f 91       	pop	r16
    7b4e:	ef 90       	pop	r14
    7b50:	cf 90       	pop	r12
    7b52:	af 90       	pop	r10
    7b54:	9f 90       	pop	r9
    7b56:	8f 90       	pop	r8
    7b58:	08 95       	ret

00007b5a <mh_z19_injectCallBack>:
    7b5a:	90 93 ff 13 	sts	0x13FF, r25	; 0x8013ff <_appCallBack+0x1>
    7b5e:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <_appCallBack>
    7b62:	08 95       	ret

00007b64 <mh_z19_takeMeassuring>:
    7b64:	cf 93       	push	r28
    7b66:	df 93       	push	r29
    7b68:	cd b7       	in	r28, 0x3d	; 61
    7b6a:	de b7       	in	r29, 0x3e	; 62
    7b6c:	29 97       	sbiw	r28, 0x09	; 9
    7b6e:	0f b6       	in	r0, 0x3f	; 63
    7b70:	f8 94       	cli
    7b72:	de bf       	out	0x3e, r29	; 62
    7b74:	0f be       	out	0x3f, r0	; 63
    7b76:	cd bf       	out	0x3d, r28	; 61
    7b78:	89 e0       	ldi	r24, 0x09	; 9
    7b7a:	e9 eb       	ldi	r30, 0xB9	; 185
    7b7c:	f4 e0       	ldi	r31, 0x04	; 4
    7b7e:	9e 01       	movw	r18, r28
    7b80:	2f 5f       	subi	r18, 0xFF	; 255
    7b82:	3f 4f       	sbci	r19, 0xFF	; 255
    7b84:	d9 01       	movw	r26, r18
    7b86:	01 90       	ld	r0, Z+
    7b88:	0d 92       	st	X+, r0
    7b8a:	8a 95       	dec	r24
    7b8c:	e1 f7       	brne	.-8      	; 0x7b86 <mh_z19_takeMeassuring+0x22>
    7b8e:	10 92 02 14 	sts	0x1402, r1	; 0x801402 <_ppm+0x1>
    7b92:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <_ppm>
    7b96:	80 91 03 14 	lds	r24, 0x1403	; 0x801403 <_serial>
    7b9a:	90 91 04 14 	lds	r25, 0x1404	; 0x801404 <_serial+0x1>
    7b9e:	00 97       	sbiw	r24, 0x00	; 0
    7ba0:	31 f0       	breq	.+12     	; 0x7bae <mh_z19_takeMeassuring+0x4a>
    7ba2:	42 2f       	mov	r20, r18
    7ba4:	53 2f       	mov	r21, r19
    7ba6:	69 e0       	ldi	r22, 0x09	; 9
    7ba8:	e4 d0       	rcall	.+456    	; 0x7d72 <serial_sendBytes>
    7baa:	80 e0       	ldi	r24, 0x00	; 0
    7bac:	01 c0       	rjmp	.+2      	; 0x7bb0 <mh_z19_takeMeassuring+0x4c>
    7bae:	82 e0       	ldi	r24, 0x02	; 2
    7bb0:	29 96       	adiw	r28, 0x09	; 9
    7bb2:	0f b6       	in	r0, 0x3f	; 63
    7bb4:	f8 94       	cli
    7bb6:	de bf       	out	0x3e, r29	; 62
    7bb8:	0f be       	out	0x3f, r0	; 63
    7bba:	cd bf       	out	0x3d, r28	; 61
    7bbc:	df 91       	pop	r29
    7bbe:	cf 91       	pop	r28
    7bc0:	08 95       	ret

00007bc2 <mh_z19_getCo2Ppm>:
    7bc2:	20 91 01 14 	lds	r18, 0x1401	; 0x801401 <_ppm>
    7bc6:	30 91 02 14 	lds	r19, 0x1402	; 0x801402 <_ppm+0x1>
    7bca:	21 15       	cp	r18, r1
    7bcc:	31 05       	cpc	r19, r1
    7bce:	29 f4       	brne	.+10     	; 0x7bda <mh_z19_getCo2Ppm+0x18>
    7bd0:	fc 01       	movw	r30, r24
    7bd2:	11 82       	std	Z+1, r1	; 0x01
    7bd4:	10 82       	st	Z, r1
    7bd6:	81 e0       	ldi	r24, 0x01	; 1
    7bd8:	08 95       	ret
    7bda:	fc 01       	movw	r30, r24
    7bdc:	31 83       	std	Z+1, r19	; 0x01
    7bde:	20 83       	st	Z, r18
    7be0:	80 e0       	ldi	r24, 0x00	; 0
    7be2:	08 95       	ret

00007be4 <serial_create>:
    7be4:	2f 92       	push	r2
    7be6:	3f 92       	push	r3
    7be8:	4f 92       	push	r4
    7bea:	5f 92       	push	r5
    7bec:	6f 92       	push	r6
    7bee:	7f 92       	push	r7
    7bf0:	8f 92       	push	r8
    7bf2:	9f 92       	push	r9
    7bf4:	af 92       	push	r10
    7bf6:	cf 92       	push	r12
    7bf8:	ef 92       	push	r14
    7bfa:	ff 92       	push	r15
    7bfc:	0f 93       	push	r16
    7bfe:	1f 93       	push	r17
    7c00:	cf 93       	push	r28
    7c02:	df 93       	push	r29
    7c04:	cd b7       	in	r28, 0x3d	; 61
    7c06:	de b7       	in	r29, 0x3e	; 62
    7c08:	f8 2e       	mov	r15, r24
    7c0a:	2a 01       	movw	r4, r20
    7c0c:	3b 01       	movw	r6, r22
    7c0e:	88 e0       	ldi	r24, 0x08	; 8
    7c10:	90 e0       	ldi	r25, 0x00	; 0
    7c12:	b5 d6       	rcall	.+3434   	; 0x897e <malloc>
    7c14:	8c 01       	movw	r16, r24
    7c16:	8f 2d       	mov	r24, r15
    7c18:	90 e0       	ldi	r25, 0x00	; 0
    7c1a:	fc 01       	movw	r30, r24
    7c1c:	ee 0f       	add	r30, r30
    7c1e:	ff 1f       	adc	r31, r31
    7c20:	eb 5f       	subi	r30, 0xFB	; 251
    7c22:	fb 4e       	sbci	r31, 0xEB	; 235
    7c24:	11 83       	std	Z+1, r17	; 0x01
    7c26:	00 83       	st	Z, r16
    7c28:	01 15       	cp	r16, r1
    7c2a:	11 05       	cpc	r17, r1
    7c2c:	09 f4       	brne	.+2      	; 0x7c30 <serial_create+0x4c>
    7c2e:	64 c0       	rjmp	.+200    	; 0x7cf8 <serial_create+0x114>
    7c30:	88 0f       	add	r24, r24
    7c32:	99 1f       	adc	r25, r25
    7c34:	fc 01       	movw	r30, r24
    7c36:	e9 5f       	subi	r30, 0xF9	; 249
    7c38:	fd 4f       	sbci	r31, 0xFD	; 253
    7c3a:	80 81       	ld	r24, Z
    7c3c:	91 81       	ldd	r25, Z+1	; 0x01
    7c3e:	d8 01       	movw	r26, r16
    7c40:	8d 93       	st	X+, r24
    7c42:	9c 93       	st	X, r25
    7c44:	8c 2d       	mov	r24, r12
    7c46:	90 e0       	ldi	r25, 0x00	; 0
    7c48:	88 0f       	add	r24, r24
    7c4a:	99 1f       	adc	r25, r25
    7c4c:	88 0f       	add	r24, r24
    7c4e:	99 1f       	adc	r25, r25
    7c50:	96 d6       	rcall	.+3372   	; 0x897e <malloc>
    7c52:	1c 01       	movw	r2, r24
    7c54:	86 e0       	ldi	r24, 0x06	; 6
    7c56:	90 e0       	ldi	r25, 0x00	; 0
    7c58:	92 d6       	rcall	.+3364   	; 0x897e <malloc>
    7c5a:	7c 01       	movw	r14, r24
    7c5c:	4c 2d       	mov	r20, r12
    7c5e:	b1 01       	movw	r22, r2
    7c60:	50 d5       	rcall	.+2720   	; 0x8702 <fifo_init>
    7c62:	f8 01       	movw	r30, r16
    7c64:	f5 82       	std	Z+5, r15	; 0x05
    7c66:	e4 82       	std	Z+4, r14	; 0x04
    7c68:	8a 2d       	mov	r24, r10
    7c6a:	90 e0       	ldi	r25, 0x00	; 0
    7c6c:	88 0f       	add	r24, r24
    7c6e:	99 1f       	adc	r25, r25
    7c70:	88 0f       	add	r24, r24
    7c72:	99 1f       	adc	r25, r25
    7c74:	84 d6       	rcall	.+3336   	; 0x897e <malloc>
    7c76:	1c 01       	movw	r2, r24
    7c78:	86 e0       	ldi	r24, 0x06	; 6
    7c7a:	90 e0       	ldi	r25, 0x00	; 0
    7c7c:	80 d6       	rcall	.+3328   	; 0x897e <malloc>
    7c7e:	7c 01       	movw	r14, r24
    7c80:	4a 2d       	mov	r20, r10
    7c82:	b1 01       	movw	r22, r2
    7c84:	3e d5       	rcall	.+2684   	; 0x8702 <fifo_init>
    7c86:	d8 01       	movw	r26, r16
    7c88:	13 96       	adiw	r26, 0x03	; 3
    7c8a:	fc 92       	st	X, r15
    7c8c:	ee 92       	st	-X, r14
    7c8e:	12 97       	sbiw	r26, 0x02	; 2
    7c90:	17 96       	adiw	r26, 0x07	; 7
    7c92:	9c 92       	st	X, r9
    7c94:	8e 92       	st	-X, r8
    7c96:	16 97       	sbiw	r26, 0x06	; 6
    7c98:	ff b6       	in	r15, 0x3f	; 63
    7c9a:	f8 94       	cli
    7c9c:	ed 91       	ld	r30, X+
    7c9e:	fc 91       	ld	r31, X
    7ca0:	11 97       	sbiw	r26, 0x01	; 1
    7ca2:	36 97       	sbiw	r30, 0x06	; 6
    7ca4:	80 81       	ld	r24, Z
    7ca6:	82 60       	ori	r24, 0x02	; 2
    7ca8:	80 83       	st	Z, r24
    7caa:	8d 90       	ld	r8, X+
    7cac:	9c 90       	ld	r9, X
    7cae:	c3 01       	movw	r24, r6
    7cb0:	b2 01       	movw	r22, r4
    7cb2:	20 d6       	rcall	.+3136   	; 0x88f4 <__floatunsisf>
    7cb4:	20 e0       	ldi	r18, 0x00	; 0
    7cb6:	30 e0       	ldi	r19, 0x00	; 0
    7cb8:	40 e0       	ldi	r20, 0x00	; 0
    7cba:	51 e4       	ldi	r21, 0x41	; 65
    7cbc:	d8 d9       	rcall	.-3152   	; 0x706e <__mulsf3>
    7cbe:	9b 01       	movw	r18, r22
    7cc0:	ac 01       	movw	r20, r24
    7cc2:	60 e0       	ldi	r22, 0x00	; 0
    7cc4:	74 e2       	ldi	r23, 0x24	; 36
    7cc6:	84 e7       	ldi	r24, 0x74	; 116
    7cc8:	9b e4       	ldi	r25, 0x4B	; 75
    7cca:	a3 d5       	rcall	.+2886   	; 0x8812 <__divsf3>
    7ccc:	20 e0       	ldi	r18, 0x00	; 0
    7cce:	30 e0       	ldi	r19, 0x00	; 0
    7cd0:	40 e8       	ldi	r20, 0x80	; 128
    7cd2:	5f e3       	ldi	r21, 0x3F	; 63
    7cd4:	32 d5       	rcall	.+2660   	; 0x873a <__subsf3>
    7cd6:	4e d9       	rcall	.-3428   	; 0x6f74 <__fixunssfsi>
    7cd8:	f4 01       	movw	r30, r8
    7cda:	32 97       	sbiw	r30, 0x02	; 2
    7cdc:	60 83       	st	Z, r22
    7cde:	d8 01       	movw	r26, r16
    7ce0:	ed 91       	ld	r30, X+
    7ce2:	fc 91       	ld	r31, X
    7ce4:	11 97       	sbiw	r26, 0x01	; 1
    7ce6:	35 97       	sbiw	r30, 0x05	; 5
    7ce8:	88 e9       	ldi	r24, 0x98	; 152
    7cea:	80 83       	st	Z, r24
    7cec:	ed 91       	ld	r30, X+
    7cee:	fc 91       	ld	r31, X
    7cf0:	34 97       	sbiw	r30, 0x04	; 4
    7cf2:	86 e0       	ldi	r24, 0x06	; 6
    7cf4:	80 83       	st	Z, r24
    7cf6:	ff be       	out	0x3f, r15	; 63
    7cf8:	c8 01       	movw	r24, r16
    7cfa:	df 91       	pop	r29
    7cfc:	cf 91       	pop	r28
    7cfe:	1f 91       	pop	r17
    7d00:	0f 91       	pop	r16
    7d02:	ff 90       	pop	r15
    7d04:	ef 90       	pop	r14
    7d06:	cf 90       	pop	r12
    7d08:	af 90       	pop	r10
    7d0a:	9f 90       	pop	r9
    7d0c:	8f 90       	pop	r8
    7d0e:	7f 90       	pop	r7
    7d10:	6f 90       	pop	r6
    7d12:	5f 90       	pop	r5
    7d14:	4f 90       	pop	r4
    7d16:	3f 90       	pop	r3
    7d18:	2f 90       	pop	r2
    7d1a:	08 95       	ret

00007d1c <serial_sendByte>:
    7d1c:	cf 93       	push	r28
    7d1e:	df 93       	push	r29
    7d20:	dc 01       	movw	r26, r24
    7d22:	89 2b       	or	r24, r25
    7d24:	01 f1       	breq	.+64     	; 0x7d66 <serial_sendByte+0x4a>
    7d26:	12 96       	adiw	r26, 0x02	; 2
    7d28:	ed 91       	ld	r30, X+
    7d2a:	fc 91       	ld	r31, X
    7d2c:	13 97       	sbiw	r26, 0x03	; 3
    7d2e:	93 81       	ldd	r25, Z+3	; 0x03
    7d30:	82 81       	ldd	r24, Z+2	; 0x02
    7d32:	25 81       	ldd	r18, Z+5	; 0x05
    7d34:	98 1b       	sub	r25, r24
    7d36:	92 23       	and	r25, r18
    7d38:	84 81       	ldd	r24, Z+4	; 0x04
    7d3a:	98 17       	cp	r25, r24
    7d3c:	b1 f0       	breq	.+44     	; 0x7d6a <serial_sendByte+0x4e>
    7d3e:	83 81       	ldd	r24, Z+3	; 0x03
    7d40:	26 95       	lsr	r18
    7d42:	28 23       	and	r18, r24
    7d44:	c0 81       	ld	r28, Z
    7d46:	d1 81       	ldd	r29, Z+1	; 0x01
    7d48:	c2 0f       	add	r28, r18
    7d4a:	d1 1d       	adc	r29, r1
    7d4c:	68 83       	st	Y, r22
    7d4e:	8f 5f       	subi	r24, 0xFF	; 255
    7d50:	95 81       	ldd	r25, Z+5	; 0x05
    7d52:	89 23       	and	r24, r25
    7d54:	83 83       	std	Z+3, r24	; 0x03
    7d56:	ed 91       	ld	r30, X+
    7d58:	fc 91       	ld	r31, X
    7d5a:	35 97       	sbiw	r30, 0x05	; 5
    7d5c:	80 81       	ld	r24, Z
    7d5e:	80 62       	ori	r24, 0x20	; 32
    7d60:	80 83       	st	Z, r24
    7d62:	80 e0       	ldi	r24, 0x00	; 0
    7d64:	03 c0       	rjmp	.+6      	; 0x7d6c <serial_sendByte+0x50>
    7d66:	81 e0       	ldi	r24, 0x01	; 1
    7d68:	01 c0       	rjmp	.+2      	; 0x7d6c <serial_sendByte+0x50>
    7d6a:	82 e0       	ldi	r24, 0x02	; 2
    7d6c:	df 91       	pop	r29
    7d6e:	cf 91       	pop	r28
    7d70:	08 95       	ret

00007d72 <serial_sendBytes>:
    7d72:	ef 92       	push	r14
    7d74:	ff 92       	push	r15
    7d76:	0f 93       	push	r16
    7d78:	1f 93       	push	r17
    7d7a:	cf 93       	push	r28
    7d7c:	df 93       	push	r29
    7d7e:	7c 01       	movw	r14, r24
    7d80:	00 97       	sbiw	r24, 0x00	; 0
    7d82:	09 f4       	brne	.+2      	; 0x7d86 <serial_sendBytes+0x14>
    7d84:	41 c0       	rjmp	.+130    	; 0x7e08 <serial_sendBytes+0x96>
    7d86:	dc 01       	movw	r26, r24
    7d88:	12 96       	adiw	r26, 0x02	; 2
    7d8a:	ed 91       	ld	r30, X+
    7d8c:	fc 91       	ld	r31, X
    7d8e:	13 97       	sbiw	r26, 0x03	; 3
    7d90:	93 81       	ldd	r25, Z+3	; 0x03
    7d92:	82 81       	ldd	r24, Z+2	; 0x02
    7d94:	98 1b       	sub	r25, r24
    7d96:	85 81       	ldd	r24, Z+5	; 0x05
    7d98:	98 23       	and	r25, r24
    7d9a:	84 81       	ldd	r24, Z+4	; 0x04
    7d9c:	89 1b       	sub	r24, r25
    7d9e:	86 17       	cp	r24, r22
    7da0:	a8 f1       	brcs	.+106    	; 0x7e0c <serial_sendBytes+0x9a>
    7da2:	66 23       	and	r22, r22
    7da4:	41 f1       	breq	.+80     	; 0x7df6 <serial_sendBytes+0x84>
    7da6:	84 2f       	mov	r24, r20
    7da8:	95 2f       	mov	r25, r21
    7daa:	dc 01       	movw	r26, r24
    7dac:	61 50       	subi	r22, 0x01	; 1
    7dae:	46 2f       	mov	r20, r22
    7db0:	50 e0       	ldi	r21, 0x00	; 0
    7db2:	4f 5f       	subi	r20, 0xFF	; 255
    7db4:	5f 4f       	sbci	r21, 0xFF	; 255
    7db6:	48 0f       	add	r20, r24
    7db8:	59 1f       	adc	r21, r25
    7dba:	e7 01       	movw	r28, r14
    7dbc:	ea 81       	ldd	r30, Y+2	; 0x02
    7dbe:	fb 81       	ldd	r31, Y+3	; 0x03
    7dc0:	93 81       	ldd	r25, Z+3	; 0x03
    7dc2:	82 81       	ldd	r24, Z+2	; 0x02
    7dc4:	25 81       	ldd	r18, Z+5	; 0x05
    7dc6:	98 1b       	sub	r25, r24
    7dc8:	92 23       	and	r25, r18
    7dca:	84 81       	ldd	r24, Z+4	; 0x04
    7dcc:	98 17       	cp	r25, r24
    7dce:	79 f0       	breq	.+30     	; 0x7dee <serial_sendBytes+0x7c>
    7dd0:	8c 91       	ld	r24, X
    7dd2:	93 81       	ldd	r25, Z+3	; 0x03
    7dd4:	26 95       	lsr	r18
    7dd6:	29 23       	and	r18, r25
    7dd8:	60 81       	ld	r22, Z
    7dda:	71 81       	ldd	r23, Z+1	; 0x01
    7ddc:	8b 01       	movw	r16, r22
    7dde:	02 0f       	add	r16, r18
    7de0:	11 1d       	adc	r17, r1
    7de2:	e8 01       	movw	r28, r16
    7de4:	88 83       	st	Y, r24
    7de6:	9f 5f       	subi	r25, 0xFF	; 255
    7de8:	85 81       	ldd	r24, Z+5	; 0x05
    7dea:	98 23       	and	r25, r24
    7dec:	93 83       	std	Z+3, r25	; 0x03
    7dee:	11 96       	adiw	r26, 0x01	; 1
    7df0:	a4 17       	cp	r26, r20
    7df2:	b5 07       	cpc	r27, r21
    7df4:	11 f7       	brne	.-60     	; 0x7dba <serial_sendBytes+0x48>
    7df6:	d7 01       	movw	r26, r14
    7df8:	ed 91       	ld	r30, X+
    7dfa:	fc 91       	ld	r31, X
    7dfc:	35 97       	sbiw	r30, 0x05	; 5
    7dfe:	80 81       	ld	r24, Z
    7e00:	80 62       	ori	r24, 0x20	; 32
    7e02:	80 83       	st	Z, r24
    7e04:	80 e0       	ldi	r24, 0x00	; 0
    7e06:	03 c0       	rjmp	.+6      	; 0x7e0e <serial_sendBytes+0x9c>
    7e08:	81 e0       	ldi	r24, 0x01	; 1
    7e0a:	01 c0       	rjmp	.+2      	; 0x7e0e <serial_sendBytes+0x9c>
    7e0c:	82 e0       	ldi	r24, 0x02	; 2
    7e0e:	df 91       	pop	r29
    7e10:	cf 91       	pop	r28
    7e12:	1f 91       	pop	r17
    7e14:	0f 91       	pop	r16
    7e16:	ff 90       	pop	r15
    7e18:	ef 90       	pop	r14
    7e1a:	08 95       	ret

00007e1c <serial_getByte>:
    7e1c:	00 97       	sbiw	r24, 0x00	; 0
    7e1e:	d1 f0       	breq	.+52     	; 0x7e54 <serial_getByte+0x38>
    7e20:	dc 01       	movw	r26, r24
    7e22:	14 96       	adiw	r26, 0x04	; 4
    7e24:	ed 91       	ld	r30, X+
    7e26:	fc 91       	ld	r31, X
    7e28:	15 97       	sbiw	r26, 0x05	; 5
    7e2a:	93 81       	ldd	r25, Z+3	; 0x03
    7e2c:	82 81       	ldd	r24, Z+2	; 0x02
    7e2e:	98 17       	cp	r25, r24
    7e30:	99 f0       	breq	.+38     	; 0x7e58 <serial_getByte+0x3c>
    7e32:	92 81       	ldd	r25, Z+2	; 0x02
    7e34:	85 81       	ldd	r24, Z+5	; 0x05
    7e36:	86 95       	lsr	r24
    7e38:	89 23       	and	r24, r25
    7e3a:	a0 81       	ld	r26, Z
    7e3c:	b1 81       	ldd	r27, Z+1	; 0x01
    7e3e:	a8 0f       	add	r26, r24
    7e40:	b1 1d       	adc	r27, r1
    7e42:	8c 91       	ld	r24, X
    7e44:	db 01       	movw	r26, r22
    7e46:	8c 93       	st	X, r24
    7e48:	9f 5f       	subi	r25, 0xFF	; 255
    7e4a:	85 81       	ldd	r24, Z+5	; 0x05
    7e4c:	98 23       	and	r25, r24
    7e4e:	92 83       	std	Z+2, r25	; 0x02
    7e50:	80 e0       	ldi	r24, 0x00	; 0
    7e52:	08 95       	ret
    7e54:	81 e0       	ldi	r24, 0x01	; 1
    7e56:	08 95       	ret
    7e58:	83 e0       	ldi	r24, 0x03	; 3
    7e5a:	08 95       	ret

00007e5c <__vector_25>:
    7e5c:	1f 92       	push	r1
    7e5e:	0f 92       	push	r0
    7e60:	0f b6       	in	r0, 0x3f	; 63
    7e62:	0f 92       	push	r0
    7e64:	11 24       	eor	r1, r1
    7e66:	0b b6       	in	r0, 0x3b	; 59
    7e68:	0f 92       	push	r0
    7e6a:	2f 93       	push	r18
    7e6c:	3f 93       	push	r19
    7e6e:	4f 93       	push	r20
    7e70:	5f 93       	push	r21
    7e72:	6f 93       	push	r22
    7e74:	7f 93       	push	r23
    7e76:	8f 93       	push	r24
    7e78:	9f 93       	push	r25
    7e7a:	af 93       	push	r26
    7e7c:	bf 93       	push	r27
    7e7e:	cf 93       	push	r28
    7e80:	df 93       	push	r29
    7e82:	ef 93       	push	r30
    7e84:	ff 93       	push	r31
    7e86:	a0 91 05 14 	lds	r26, 0x1405	; 0x801405 <_ser_handle>
    7e8a:	b0 91 06 14 	lds	r27, 0x1406	; 0x801406 <_ser_handle+0x1>
    7e8e:	10 97       	sbiw	r26, 0x00	; 0
    7e90:	11 f1       	breq	.+68     	; 0x7ed6 <__vector_25+0x7a>
    7e92:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    7e96:	14 96       	adiw	r26, 0x04	; 4
    7e98:	ed 91       	ld	r30, X+
    7e9a:	fc 91       	ld	r31, X
    7e9c:	15 97       	sbiw	r26, 0x05	; 5
    7e9e:	93 81       	ldd	r25, Z+3	; 0x03
    7ea0:	82 81       	ldd	r24, Z+2	; 0x02
    7ea2:	25 81       	ldd	r18, Z+5	; 0x05
    7ea4:	98 1b       	sub	r25, r24
    7ea6:	92 23       	and	r25, r18
    7ea8:	84 81       	ldd	r24, Z+4	; 0x04
    7eaa:	98 17       	cp	r25, r24
    7eac:	61 f0       	breq	.+24     	; 0x7ec6 <__vector_25+0x6a>
    7eae:	83 81       	ldd	r24, Z+3	; 0x03
    7eb0:	26 95       	lsr	r18
    7eb2:	28 23       	and	r18, r24
    7eb4:	c0 81       	ld	r28, Z
    7eb6:	d1 81       	ldd	r29, Z+1	; 0x01
    7eb8:	c2 0f       	add	r28, r18
    7eba:	d1 1d       	adc	r29, r1
    7ebc:	68 83       	st	Y, r22
    7ebe:	8f 5f       	subi	r24, 0xFF	; 255
    7ec0:	95 81       	ldd	r25, Z+5	; 0x05
    7ec2:	89 23       	and	r24, r25
    7ec4:	83 83       	std	Z+3, r24	; 0x03
    7ec6:	16 96       	adiw	r26, 0x06	; 6
    7ec8:	ed 91       	ld	r30, X+
    7eca:	fc 91       	ld	r31, X
    7ecc:	17 97       	sbiw	r26, 0x07	; 7
    7ece:	30 97       	sbiw	r30, 0x00	; 0
    7ed0:	11 f0       	breq	.+4      	; 0x7ed6 <__vector_25+0x7a>
    7ed2:	cd 01       	movw	r24, r26
    7ed4:	19 95       	eicall
    7ed6:	ff 91       	pop	r31
    7ed8:	ef 91       	pop	r30
    7eda:	df 91       	pop	r29
    7edc:	cf 91       	pop	r28
    7ede:	bf 91       	pop	r27
    7ee0:	af 91       	pop	r26
    7ee2:	9f 91       	pop	r25
    7ee4:	8f 91       	pop	r24
    7ee6:	7f 91       	pop	r23
    7ee8:	6f 91       	pop	r22
    7eea:	5f 91       	pop	r21
    7eec:	4f 91       	pop	r20
    7eee:	3f 91       	pop	r19
    7ef0:	2f 91       	pop	r18
    7ef2:	0f 90       	pop	r0
    7ef4:	0b be       	out	0x3b, r0	; 59
    7ef6:	0f 90       	pop	r0
    7ef8:	0f be       	out	0x3f, r0	; 63
    7efa:	0f 90       	pop	r0
    7efc:	1f 90       	pop	r1
    7efe:	18 95       	reti

00007f00 <__vector_26>:
    7f00:	1f 92       	push	r1
    7f02:	0f 92       	push	r0
    7f04:	0f b6       	in	r0, 0x3f	; 63
    7f06:	0f 92       	push	r0
    7f08:	11 24       	eor	r1, r1
    7f0a:	0b b6       	in	r0, 0x3b	; 59
    7f0c:	0f 92       	push	r0
    7f0e:	2f 93       	push	r18
    7f10:	8f 93       	push	r24
    7f12:	9f 93       	push	r25
    7f14:	af 93       	push	r26
    7f16:	bf 93       	push	r27
    7f18:	ef 93       	push	r30
    7f1a:	ff 93       	push	r31
    7f1c:	e0 91 05 14 	lds	r30, 0x1405	; 0x801405 <_ser_handle>
    7f20:	f0 91 06 14 	lds	r31, 0x1406	; 0x801406 <_ser_handle+0x1>
    7f24:	30 97       	sbiw	r30, 0x00	; 0
    7f26:	b9 f0       	breq	.+46     	; 0x7f56 <__vector_26+0x56>
    7f28:	02 80       	ldd	r0, Z+2	; 0x02
    7f2a:	f3 81       	ldd	r31, Z+3	; 0x03
    7f2c:	e0 2d       	mov	r30, r0
    7f2e:	93 81       	ldd	r25, Z+3	; 0x03
    7f30:	82 81       	ldd	r24, Z+2	; 0x02
    7f32:	98 17       	cp	r25, r24
    7f34:	b1 f0       	breq	.+44     	; 0x7f62 <__vector_26+0x62>
    7f36:	92 81       	ldd	r25, Z+2	; 0x02
    7f38:	85 81       	ldd	r24, Z+5	; 0x05
    7f3a:	28 2f       	mov	r18, r24
    7f3c:	26 95       	lsr	r18
    7f3e:	29 23       	and	r18, r25
    7f40:	a0 81       	ld	r26, Z
    7f42:	b1 81       	ldd	r27, Z+1	; 0x01
    7f44:	a2 0f       	add	r26, r18
    7f46:	b1 1d       	adc	r27, r1
    7f48:	2c 91       	ld	r18, X
    7f4a:	9f 5f       	subi	r25, 0xFF	; 255
    7f4c:	89 23       	and	r24, r25
    7f4e:	82 83       	std	Z+2, r24	; 0x02
    7f50:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    7f54:	0b c0       	rjmp	.+22     	; 0x7f6c <__vector_26+0x6c>
    7f56:	e1 ec       	ldi	r30, 0xC1	; 193
    7f58:	f0 e0       	ldi	r31, 0x00	; 0
    7f5a:	80 81       	ld	r24, Z
    7f5c:	8f 7d       	andi	r24, 0xDF	; 223
    7f5e:	80 83       	st	Z, r24
    7f60:	05 c0       	rjmp	.+10     	; 0x7f6c <__vector_26+0x6c>
    7f62:	e1 ec       	ldi	r30, 0xC1	; 193
    7f64:	f0 e0       	ldi	r31, 0x00	; 0
    7f66:	80 81       	ld	r24, Z
    7f68:	8f 7d       	andi	r24, 0xDF	; 223
    7f6a:	80 83       	st	Z, r24
    7f6c:	ff 91       	pop	r31
    7f6e:	ef 91       	pop	r30
    7f70:	bf 91       	pop	r27
    7f72:	af 91       	pop	r26
    7f74:	9f 91       	pop	r25
    7f76:	8f 91       	pop	r24
    7f78:	2f 91       	pop	r18
    7f7a:	0f 90       	pop	r0
    7f7c:	0b be       	out	0x3b, r0	; 59
    7f7e:	0f 90       	pop	r0
    7f80:	0f be       	out	0x3f, r0	; 63
    7f82:	0f 90       	pop	r0
    7f84:	1f 90       	pop	r1
    7f86:	18 95       	reti

00007f88 <__vector_36>:
    7f88:	1f 92       	push	r1
    7f8a:	0f 92       	push	r0
    7f8c:	0f b6       	in	r0, 0x3f	; 63
    7f8e:	0f 92       	push	r0
    7f90:	11 24       	eor	r1, r1
    7f92:	0b b6       	in	r0, 0x3b	; 59
    7f94:	0f 92       	push	r0
    7f96:	2f 93       	push	r18
    7f98:	3f 93       	push	r19
    7f9a:	4f 93       	push	r20
    7f9c:	5f 93       	push	r21
    7f9e:	6f 93       	push	r22
    7fa0:	7f 93       	push	r23
    7fa2:	8f 93       	push	r24
    7fa4:	9f 93       	push	r25
    7fa6:	af 93       	push	r26
    7fa8:	bf 93       	push	r27
    7faa:	cf 93       	push	r28
    7fac:	df 93       	push	r29
    7fae:	ef 93       	push	r30
    7fb0:	ff 93       	push	r31
    7fb2:	a0 91 07 14 	lds	r26, 0x1407	; 0x801407 <_ser_handle+0x2>
    7fb6:	b0 91 08 14 	lds	r27, 0x1408	; 0x801408 <_ser_handle+0x3>
    7fba:	10 97       	sbiw	r26, 0x00	; 0
    7fbc:	11 f1       	breq	.+68     	; 0x8002 <__vector_36+0x7a>
    7fbe:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    7fc2:	14 96       	adiw	r26, 0x04	; 4
    7fc4:	ed 91       	ld	r30, X+
    7fc6:	fc 91       	ld	r31, X
    7fc8:	15 97       	sbiw	r26, 0x05	; 5
    7fca:	93 81       	ldd	r25, Z+3	; 0x03
    7fcc:	82 81       	ldd	r24, Z+2	; 0x02
    7fce:	25 81       	ldd	r18, Z+5	; 0x05
    7fd0:	98 1b       	sub	r25, r24
    7fd2:	92 23       	and	r25, r18
    7fd4:	84 81       	ldd	r24, Z+4	; 0x04
    7fd6:	98 17       	cp	r25, r24
    7fd8:	61 f0       	breq	.+24     	; 0x7ff2 <__vector_36+0x6a>
    7fda:	83 81       	ldd	r24, Z+3	; 0x03
    7fdc:	26 95       	lsr	r18
    7fde:	28 23       	and	r18, r24
    7fe0:	c0 81       	ld	r28, Z
    7fe2:	d1 81       	ldd	r29, Z+1	; 0x01
    7fe4:	c2 0f       	add	r28, r18
    7fe6:	d1 1d       	adc	r29, r1
    7fe8:	68 83       	st	Y, r22
    7fea:	8f 5f       	subi	r24, 0xFF	; 255
    7fec:	95 81       	ldd	r25, Z+5	; 0x05
    7fee:	89 23       	and	r24, r25
    7ff0:	83 83       	std	Z+3, r24	; 0x03
    7ff2:	16 96       	adiw	r26, 0x06	; 6
    7ff4:	ed 91       	ld	r30, X+
    7ff6:	fc 91       	ld	r31, X
    7ff8:	17 97       	sbiw	r26, 0x07	; 7
    7ffa:	30 97       	sbiw	r30, 0x00	; 0
    7ffc:	11 f0       	breq	.+4      	; 0x8002 <__vector_36+0x7a>
    7ffe:	cd 01       	movw	r24, r26
    8000:	19 95       	eicall
    8002:	ff 91       	pop	r31
    8004:	ef 91       	pop	r30
    8006:	df 91       	pop	r29
    8008:	cf 91       	pop	r28
    800a:	bf 91       	pop	r27
    800c:	af 91       	pop	r26
    800e:	9f 91       	pop	r25
    8010:	8f 91       	pop	r24
    8012:	7f 91       	pop	r23
    8014:	6f 91       	pop	r22
    8016:	5f 91       	pop	r21
    8018:	4f 91       	pop	r20
    801a:	3f 91       	pop	r19
    801c:	2f 91       	pop	r18
    801e:	0f 90       	pop	r0
    8020:	0b be       	out	0x3b, r0	; 59
    8022:	0f 90       	pop	r0
    8024:	0f be       	out	0x3f, r0	; 63
    8026:	0f 90       	pop	r0
    8028:	1f 90       	pop	r1
    802a:	18 95       	reti

0000802c <__vector_37>:
    802c:	1f 92       	push	r1
    802e:	0f 92       	push	r0
    8030:	0f b6       	in	r0, 0x3f	; 63
    8032:	0f 92       	push	r0
    8034:	11 24       	eor	r1, r1
    8036:	0b b6       	in	r0, 0x3b	; 59
    8038:	0f 92       	push	r0
    803a:	2f 93       	push	r18
    803c:	8f 93       	push	r24
    803e:	9f 93       	push	r25
    8040:	af 93       	push	r26
    8042:	bf 93       	push	r27
    8044:	ef 93       	push	r30
    8046:	ff 93       	push	r31
    8048:	e0 91 07 14 	lds	r30, 0x1407	; 0x801407 <_ser_handle+0x2>
    804c:	f0 91 08 14 	lds	r31, 0x1408	; 0x801408 <_ser_handle+0x3>
    8050:	30 97       	sbiw	r30, 0x00	; 0
    8052:	b9 f0       	breq	.+46     	; 0x8082 <__vector_37+0x56>
    8054:	02 80       	ldd	r0, Z+2	; 0x02
    8056:	f3 81       	ldd	r31, Z+3	; 0x03
    8058:	e0 2d       	mov	r30, r0
    805a:	93 81       	ldd	r25, Z+3	; 0x03
    805c:	82 81       	ldd	r24, Z+2	; 0x02
    805e:	98 17       	cp	r25, r24
    8060:	b1 f0       	breq	.+44     	; 0x808e <__vector_37+0x62>
    8062:	92 81       	ldd	r25, Z+2	; 0x02
    8064:	85 81       	ldd	r24, Z+5	; 0x05
    8066:	28 2f       	mov	r18, r24
    8068:	26 95       	lsr	r18
    806a:	29 23       	and	r18, r25
    806c:	a0 81       	ld	r26, Z
    806e:	b1 81       	ldd	r27, Z+1	; 0x01
    8070:	a2 0f       	add	r26, r18
    8072:	b1 1d       	adc	r27, r1
    8074:	2c 91       	ld	r18, X
    8076:	9f 5f       	subi	r25, 0xFF	; 255
    8078:	89 23       	and	r24, r25
    807a:	82 83       	std	Z+2, r24	; 0x02
    807c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    8080:	0b c0       	rjmp	.+22     	; 0x8098 <__vector_37+0x6c>
    8082:	e9 ec       	ldi	r30, 0xC9	; 201
    8084:	f0 e0       	ldi	r31, 0x00	; 0
    8086:	80 81       	ld	r24, Z
    8088:	8f 7d       	andi	r24, 0xDF	; 223
    808a:	80 83       	st	Z, r24
    808c:	05 c0       	rjmp	.+10     	; 0x8098 <__vector_37+0x6c>
    808e:	e9 ec       	ldi	r30, 0xC9	; 201
    8090:	f0 e0       	ldi	r31, 0x00	; 0
    8092:	80 81       	ld	r24, Z
    8094:	8f 7d       	andi	r24, 0xDF	; 223
    8096:	80 83       	st	Z, r24
    8098:	ff 91       	pop	r31
    809a:	ef 91       	pop	r30
    809c:	bf 91       	pop	r27
    809e:	af 91       	pop	r26
    80a0:	9f 91       	pop	r25
    80a2:	8f 91       	pop	r24
    80a4:	2f 91       	pop	r18
    80a6:	0f 90       	pop	r0
    80a8:	0b be       	out	0x3b, r0	; 59
    80aa:	0f 90       	pop	r0
    80ac:	0f be       	out	0x3f, r0	; 63
    80ae:	0f 90       	pop	r0
    80b0:	1f 90       	pop	r1
    80b2:	18 95       	reti

000080b4 <__vector_51>:
    80b4:	1f 92       	push	r1
    80b6:	0f 92       	push	r0
    80b8:	0f b6       	in	r0, 0x3f	; 63
    80ba:	0f 92       	push	r0
    80bc:	11 24       	eor	r1, r1
    80be:	0b b6       	in	r0, 0x3b	; 59
    80c0:	0f 92       	push	r0
    80c2:	2f 93       	push	r18
    80c4:	3f 93       	push	r19
    80c6:	4f 93       	push	r20
    80c8:	5f 93       	push	r21
    80ca:	6f 93       	push	r22
    80cc:	7f 93       	push	r23
    80ce:	8f 93       	push	r24
    80d0:	9f 93       	push	r25
    80d2:	af 93       	push	r26
    80d4:	bf 93       	push	r27
    80d6:	cf 93       	push	r28
    80d8:	df 93       	push	r29
    80da:	ef 93       	push	r30
    80dc:	ff 93       	push	r31
    80de:	a0 91 09 14 	lds	r26, 0x1409	; 0x801409 <_ser_handle+0x4>
    80e2:	b0 91 0a 14 	lds	r27, 0x140A	; 0x80140a <_ser_handle+0x5>
    80e6:	10 97       	sbiw	r26, 0x00	; 0
    80e8:	11 f1       	breq	.+68     	; 0x812e <__vector_51+0x7a>
    80ea:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    80ee:	14 96       	adiw	r26, 0x04	; 4
    80f0:	ed 91       	ld	r30, X+
    80f2:	fc 91       	ld	r31, X
    80f4:	15 97       	sbiw	r26, 0x05	; 5
    80f6:	93 81       	ldd	r25, Z+3	; 0x03
    80f8:	82 81       	ldd	r24, Z+2	; 0x02
    80fa:	25 81       	ldd	r18, Z+5	; 0x05
    80fc:	98 1b       	sub	r25, r24
    80fe:	92 23       	and	r25, r18
    8100:	84 81       	ldd	r24, Z+4	; 0x04
    8102:	98 17       	cp	r25, r24
    8104:	61 f0       	breq	.+24     	; 0x811e <__vector_51+0x6a>
    8106:	83 81       	ldd	r24, Z+3	; 0x03
    8108:	26 95       	lsr	r18
    810a:	28 23       	and	r18, r24
    810c:	c0 81       	ld	r28, Z
    810e:	d1 81       	ldd	r29, Z+1	; 0x01
    8110:	c2 0f       	add	r28, r18
    8112:	d1 1d       	adc	r29, r1
    8114:	68 83       	st	Y, r22
    8116:	8f 5f       	subi	r24, 0xFF	; 255
    8118:	95 81       	ldd	r25, Z+5	; 0x05
    811a:	89 23       	and	r24, r25
    811c:	83 83       	std	Z+3, r24	; 0x03
    811e:	16 96       	adiw	r26, 0x06	; 6
    8120:	ed 91       	ld	r30, X+
    8122:	fc 91       	ld	r31, X
    8124:	17 97       	sbiw	r26, 0x07	; 7
    8126:	30 97       	sbiw	r30, 0x00	; 0
    8128:	11 f0       	breq	.+4      	; 0x812e <__vector_51+0x7a>
    812a:	cd 01       	movw	r24, r26
    812c:	19 95       	eicall
    812e:	ff 91       	pop	r31
    8130:	ef 91       	pop	r30
    8132:	df 91       	pop	r29
    8134:	cf 91       	pop	r28
    8136:	bf 91       	pop	r27
    8138:	af 91       	pop	r26
    813a:	9f 91       	pop	r25
    813c:	8f 91       	pop	r24
    813e:	7f 91       	pop	r23
    8140:	6f 91       	pop	r22
    8142:	5f 91       	pop	r21
    8144:	4f 91       	pop	r20
    8146:	3f 91       	pop	r19
    8148:	2f 91       	pop	r18
    814a:	0f 90       	pop	r0
    814c:	0b be       	out	0x3b, r0	; 59
    814e:	0f 90       	pop	r0
    8150:	0f be       	out	0x3f, r0	; 63
    8152:	0f 90       	pop	r0
    8154:	1f 90       	pop	r1
    8156:	18 95       	reti

00008158 <__vector_52>:
    8158:	1f 92       	push	r1
    815a:	0f 92       	push	r0
    815c:	0f b6       	in	r0, 0x3f	; 63
    815e:	0f 92       	push	r0
    8160:	11 24       	eor	r1, r1
    8162:	0b b6       	in	r0, 0x3b	; 59
    8164:	0f 92       	push	r0
    8166:	2f 93       	push	r18
    8168:	8f 93       	push	r24
    816a:	9f 93       	push	r25
    816c:	af 93       	push	r26
    816e:	bf 93       	push	r27
    8170:	ef 93       	push	r30
    8172:	ff 93       	push	r31
    8174:	e0 91 09 14 	lds	r30, 0x1409	; 0x801409 <_ser_handle+0x4>
    8178:	f0 91 0a 14 	lds	r31, 0x140A	; 0x80140a <_ser_handle+0x5>
    817c:	30 97       	sbiw	r30, 0x00	; 0
    817e:	b9 f0       	breq	.+46     	; 0x81ae <__vector_52+0x56>
    8180:	02 80       	ldd	r0, Z+2	; 0x02
    8182:	f3 81       	ldd	r31, Z+3	; 0x03
    8184:	e0 2d       	mov	r30, r0
    8186:	93 81       	ldd	r25, Z+3	; 0x03
    8188:	82 81       	ldd	r24, Z+2	; 0x02
    818a:	98 17       	cp	r25, r24
    818c:	b1 f0       	breq	.+44     	; 0x81ba <__vector_52+0x62>
    818e:	92 81       	ldd	r25, Z+2	; 0x02
    8190:	85 81       	ldd	r24, Z+5	; 0x05
    8192:	28 2f       	mov	r18, r24
    8194:	26 95       	lsr	r18
    8196:	29 23       	and	r18, r25
    8198:	a0 81       	ld	r26, Z
    819a:	b1 81       	ldd	r27, Z+1	; 0x01
    819c:	a2 0f       	add	r26, r18
    819e:	b1 1d       	adc	r27, r1
    81a0:	2c 91       	ld	r18, X
    81a2:	9f 5f       	subi	r25, 0xFF	; 255
    81a4:	89 23       	and	r24, r25
    81a6:	82 83       	std	Z+2, r24	; 0x02
    81a8:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    81ac:	0b c0       	rjmp	.+22     	; 0x81c4 <__vector_52+0x6c>
    81ae:	e1 ed       	ldi	r30, 0xD1	; 209
    81b0:	f0 e0       	ldi	r31, 0x00	; 0
    81b2:	80 81       	ld	r24, Z
    81b4:	8f 7d       	andi	r24, 0xDF	; 223
    81b6:	80 83       	st	Z, r24
    81b8:	05 c0       	rjmp	.+10     	; 0x81c4 <__vector_52+0x6c>
    81ba:	e1 ed       	ldi	r30, 0xD1	; 209
    81bc:	f0 e0       	ldi	r31, 0x00	; 0
    81be:	80 81       	ld	r24, Z
    81c0:	8f 7d       	andi	r24, 0xDF	; 223
    81c2:	80 83       	st	Z, r24
    81c4:	ff 91       	pop	r31
    81c6:	ef 91       	pop	r30
    81c8:	bf 91       	pop	r27
    81ca:	af 91       	pop	r26
    81cc:	9f 91       	pop	r25
    81ce:	8f 91       	pop	r24
    81d0:	2f 91       	pop	r18
    81d2:	0f 90       	pop	r0
    81d4:	0b be       	out	0x3b, r0	; 59
    81d6:	0f 90       	pop	r0
    81d8:	0f be       	out	0x3f, r0	; 63
    81da:	0f 90       	pop	r0
    81dc:	1f 90       	pop	r1
    81de:	18 95       	reti

000081e0 <__vector_54>:
    81e0:	1f 92       	push	r1
    81e2:	0f 92       	push	r0
    81e4:	0f b6       	in	r0, 0x3f	; 63
    81e6:	0f 92       	push	r0
    81e8:	11 24       	eor	r1, r1
    81ea:	0b b6       	in	r0, 0x3b	; 59
    81ec:	0f 92       	push	r0
    81ee:	2f 93       	push	r18
    81f0:	3f 93       	push	r19
    81f2:	4f 93       	push	r20
    81f4:	5f 93       	push	r21
    81f6:	6f 93       	push	r22
    81f8:	7f 93       	push	r23
    81fa:	8f 93       	push	r24
    81fc:	9f 93       	push	r25
    81fe:	af 93       	push	r26
    8200:	bf 93       	push	r27
    8202:	cf 93       	push	r28
    8204:	df 93       	push	r29
    8206:	ef 93       	push	r30
    8208:	ff 93       	push	r31
    820a:	a0 91 0b 14 	lds	r26, 0x140B	; 0x80140b <_ser_handle+0x6>
    820e:	b0 91 0c 14 	lds	r27, 0x140C	; 0x80140c <_ser_handle+0x7>
    8212:	10 97       	sbiw	r26, 0x00	; 0
    8214:	11 f1       	breq	.+68     	; 0x825a <__vector_54+0x7a>
    8216:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    821a:	14 96       	adiw	r26, 0x04	; 4
    821c:	ed 91       	ld	r30, X+
    821e:	fc 91       	ld	r31, X
    8220:	15 97       	sbiw	r26, 0x05	; 5
    8222:	93 81       	ldd	r25, Z+3	; 0x03
    8224:	82 81       	ldd	r24, Z+2	; 0x02
    8226:	25 81       	ldd	r18, Z+5	; 0x05
    8228:	98 1b       	sub	r25, r24
    822a:	92 23       	and	r25, r18
    822c:	84 81       	ldd	r24, Z+4	; 0x04
    822e:	98 17       	cp	r25, r24
    8230:	61 f0       	breq	.+24     	; 0x824a <__vector_54+0x6a>
    8232:	83 81       	ldd	r24, Z+3	; 0x03
    8234:	26 95       	lsr	r18
    8236:	28 23       	and	r18, r24
    8238:	c0 81       	ld	r28, Z
    823a:	d1 81       	ldd	r29, Z+1	; 0x01
    823c:	c2 0f       	add	r28, r18
    823e:	d1 1d       	adc	r29, r1
    8240:	68 83       	st	Y, r22
    8242:	8f 5f       	subi	r24, 0xFF	; 255
    8244:	95 81       	ldd	r25, Z+5	; 0x05
    8246:	89 23       	and	r24, r25
    8248:	83 83       	std	Z+3, r24	; 0x03
    824a:	16 96       	adiw	r26, 0x06	; 6
    824c:	ed 91       	ld	r30, X+
    824e:	fc 91       	ld	r31, X
    8250:	17 97       	sbiw	r26, 0x07	; 7
    8252:	30 97       	sbiw	r30, 0x00	; 0
    8254:	11 f0       	breq	.+4      	; 0x825a <__vector_54+0x7a>
    8256:	cd 01       	movw	r24, r26
    8258:	19 95       	eicall
    825a:	ff 91       	pop	r31
    825c:	ef 91       	pop	r30
    825e:	df 91       	pop	r29
    8260:	cf 91       	pop	r28
    8262:	bf 91       	pop	r27
    8264:	af 91       	pop	r26
    8266:	9f 91       	pop	r25
    8268:	8f 91       	pop	r24
    826a:	7f 91       	pop	r23
    826c:	6f 91       	pop	r22
    826e:	5f 91       	pop	r21
    8270:	4f 91       	pop	r20
    8272:	3f 91       	pop	r19
    8274:	2f 91       	pop	r18
    8276:	0f 90       	pop	r0
    8278:	0b be       	out	0x3b, r0	; 59
    827a:	0f 90       	pop	r0
    827c:	0f be       	out	0x3f, r0	; 63
    827e:	0f 90       	pop	r0
    8280:	1f 90       	pop	r1
    8282:	18 95       	reti

00008284 <__vector_55>:
    8284:	1f 92       	push	r1
    8286:	0f 92       	push	r0
    8288:	0f b6       	in	r0, 0x3f	; 63
    828a:	0f 92       	push	r0
    828c:	11 24       	eor	r1, r1
    828e:	0b b6       	in	r0, 0x3b	; 59
    8290:	0f 92       	push	r0
    8292:	2f 93       	push	r18
    8294:	8f 93       	push	r24
    8296:	9f 93       	push	r25
    8298:	af 93       	push	r26
    829a:	bf 93       	push	r27
    829c:	ef 93       	push	r30
    829e:	ff 93       	push	r31
    82a0:	e0 91 0b 14 	lds	r30, 0x140B	; 0x80140b <_ser_handle+0x6>
    82a4:	f0 91 0c 14 	lds	r31, 0x140C	; 0x80140c <_ser_handle+0x7>
    82a8:	30 97       	sbiw	r30, 0x00	; 0
    82aa:	b9 f0       	breq	.+46     	; 0x82da <__vector_55+0x56>
    82ac:	02 80       	ldd	r0, Z+2	; 0x02
    82ae:	f3 81       	ldd	r31, Z+3	; 0x03
    82b0:	e0 2d       	mov	r30, r0
    82b2:	93 81       	ldd	r25, Z+3	; 0x03
    82b4:	82 81       	ldd	r24, Z+2	; 0x02
    82b6:	98 17       	cp	r25, r24
    82b8:	b1 f0       	breq	.+44     	; 0x82e6 <__vector_55+0x62>
    82ba:	92 81       	ldd	r25, Z+2	; 0x02
    82bc:	85 81       	ldd	r24, Z+5	; 0x05
    82be:	28 2f       	mov	r18, r24
    82c0:	26 95       	lsr	r18
    82c2:	29 23       	and	r18, r25
    82c4:	a0 81       	ld	r26, Z
    82c6:	b1 81       	ldd	r27, Z+1	; 0x01
    82c8:	a2 0f       	add	r26, r18
    82ca:	b1 1d       	adc	r27, r1
    82cc:	2c 91       	ld	r18, X
    82ce:	9f 5f       	subi	r25, 0xFF	; 255
    82d0:	89 23       	and	r24, r25
    82d2:	82 83       	std	Z+2, r24	; 0x02
    82d4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    82d8:	0b c0       	rjmp	.+22     	; 0x82f0 <__vector_55+0x6c>
    82da:	e1 e3       	ldi	r30, 0x31	; 49
    82dc:	f1 e0       	ldi	r31, 0x01	; 1
    82de:	80 81       	ld	r24, Z
    82e0:	8f 7d       	andi	r24, 0xDF	; 223
    82e2:	80 83       	st	Z, r24
    82e4:	05 c0       	rjmp	.+10     	; 0x82f0 <__vector_55+0x6c>
    82e6:	e1 e3       	ldi	r30, 0x31	; 49
    82e8:	f1 e0       	ldi	r31, 0x01	; 1
    82ea:	80 81       	ld	r24, Z
    82ec:	8f 7d       	andi	r24, 0xDF	; 223
    82ee:	80 83       	st	Z, r24
    82f0:	ff 91       	pop	r31
    82f2:	ef 91       	pop	r30
    82f4:	bf 91       	pop	r27
    82f6:	af 91       	pop	r26
    82f8:	9f 91       	pop	r25
    82fa:	8f 91       	pop	r24
    82fc:	2f 91       	pop	r18
    82fe:	0f 90       	pop	r0
    8300:	0b be       	out	0x3b, r0	; 59
    8302:	0f 90       	pop	r0
    8304:	0f be       	out	0x3f, r0	; 63
    8306:	0f 90       	pop	r0
    8308:	1f 90       	pop	r1
    830a:	18 95       	reti

0000830c <usart_getchar>:
    830c:	cf 93       	push	r28
    830e:	df 93       	push	r29
    8310:	1f 92       	push	r1
    8312:	cd b7       	in	r28, 0x3d	; 61
    8314:	de b7       	in	r29, 0x3e	; 62
    8316:	be 01       	movw	r22, r28
    8318:	6f 5f       	subi	r22, 0xFF	; 255
    831a:	7f 4f       	sbci	r23, 0xFF	; 255
    831c:	80 91 0d 14 	lds	r24, 0x140D	; 0x80140d <_com_serial_instance>
    8320:	90 91 0e 14 	lds	r25, 0x140E	; 0x80140e <_com_serial_instance+0x1>
    8324:	7b dd       	rcall	.-1290   	; 0x7e1c <serial_getByte>
    8326:	81 11       	cpse	r24, r1
    8328:	f6 cf       	rjmp	.-20     	; 0x8316 <usart_getchar+0xa>
    832a:	89 81       	ldd	r24, Y+1	; 0x01
    832c:	90 e0       	ldi	r25, 0x00	; 0
    832e:	0f 90       	pop	r0
    8330:	df 91       	pop	r29
    8332:	cf 91       	pop	r28
    8334:	08 95       	ret

00008336 <usart_putchar>:
    8336:	68 2f       	mov	r22, r24
    8338:	80 91 0d 14 	lds	r24, 0x140D	; 0x80140d <_com_serial_instance>
    833c:	90 91 0e 14 	lds	r25, 0x140E	; 0x80140e <_com_serial_instance+0x1>
    8340:	ed dc       	rcall	.-1574   	; 0x7d1c <serial_sendByte>
    8342:	80 e0       	ldi	r24, 0x00	; 0
    8344:	90 e0       	ldi	r25, 0x00	; 0
    8346:	08 95       	ret

00008348 <stdio_initialise>:
    8348:	8f 92       	push	r8
    834a:	9f 92       	push	r9
    834c:	af 92       	push	r10
    834e:	cf 92       	push	r12
    8350:	ef 92       	push	r14
    8352:	0f 93       	push	r16
    8354:	81 2c       	mov	r8, r1
    8356:	91 2c       	mov	r9, r1
    8358:	68 94       	set
    835a:	aa 24       	eor	r10, r10
    835c:	a7 f8       	bld	r10, 7
    835e:	68 94       	set
    8360:	cc 24       	eor	r12, r12
    8362:	c7 f8       	bld	r12, 7
    8364:	e1 2c       	mov	r14, r1
    8366:	00 e0       	ldi	r16, 0x00	; 0
    8368:	23 e0       	ldi	r18, 0x03	; 3
    836a:	40 e0       	ldi	r20, 0x00	; 0
    836c:	51 ee       	ldi	r21, 0xE1	; 225
    836e:	60 e0       	ldi	r22, 0x00	; 0
    8370:	70 e0       	ldi	r23, 0x00	; 0
    8372:	38 dc       	rcall	.-1936   	; 0x7be4 <serial_create>
    8374:	90 93 0e 14 	sts	0x140E, r25	; 0x80140e <_com_serial_instance+0x1>
    8378:	80 93 0d 14 	sts	0x140D, r24	; 0x80140d <_com_serial_instance>
    837c:	e8 e4       	ldi	r30, 0x48	; 72
    837e:	f4 e1       	ldi	r31, 0x14	; 20
    8380:	8f e0       	ldi	r24, 0x0F	; 15
    8382:	92 e0       	ldi	r25, 0x02	; 2
    8384:	91 83       	std	Z+1, r25	; 0x01
    8386:	80 83       	st	Z, r24
    8388:	93 83       	std	Z+3, r25	; 0x03
    838a:	82 83       	std	Z+2, r24	; 0x02
    838c:	0f 91       	pop	r16
    838e:	ef 90       	pop	r14
    8390:	cf 90       	pop	r12
    8392:	af 90       	pop	r10
    8394:	9f 90       	pop	r9
    8396:	8f 90       	pop	r8
    8398:	08 95       	ret

0000839a <_turn_off>:
    839a:	90 e0       	ldi	r25, 0x00	; 0
    839c:	fc 01       	movw	r30, r24
    839e:	ee 0f       	add	r30, r30
    83a0:	ff 1f       	adc	r31, r31
    83a2:	e8 0f       	add	r30, r24
    83a4:	f9 1f       	adc	r31, r25
    83a6:	ee 0f       	add	r30, r30
    83a8:	ff 1f       	adc	r31, r31
    83aa:	e1 5f       	subi	r30, 0xF1	; 241
    83ac:	fb 4e       	sbci	r31, 0xEB	; 235
    83ae:	23 81       	ldd	r18, Z+3	; 0x03
    83b0:	21 11       	cpse	r18, r1
    83b2:	1f c0       	rjmp	.+62     	; 0x83f2 <_turn_off+0x58>
    83b4:	9c 01       	movw	r18, r24
    83b6:	22 0f       	add	r18, r18
    83b8:	33 1f       	adc	r19, r19
    83ba:	f9 01       	movw	r30, r18
    83bc:	e8 0f       	add	r30, r24
    83be:	f9 1f       	adc	r31, r25
    83c0:	ee 0f       	add	r30, r30
    83c2:	ff 1f       	adc	r31, r31
    83c4:	e1 5f       	subi	r30, 0xF1	; 241
    83c6:	fb 4e       	sbci	r31, 0xEB	; 235
    83c8:	a0 81       	ld	r26, Z
    83ca:	b1 81       	ldd	r27, Z+1	; 0x01
    83cc:	4c 91       	ld	r20, X
    83ce:	f9 01       	movw	r30, r18
    83d0:	e8 0f       	add	r30, r24
    83d2:	f9 1f       	adc	r31, r25
    83d4:	ee 0f       	add	r30, r30
    83d6:	ff 1f       	adc	r31, r31
    83d8:	e1 5f       	subi	r30, 0xF1	; 241
    83da:	fb 4e       	sbci	r31, 0xEB	; 235
    83dc:	81 e0       	ldi	r24, 0x01	; 1
    83de:	90 e0       	ldi	r25, 0x00	; 0
    83e0:	02 80       	ldd	r0, Z+2	; 0x02
    83e2:	02 c0       	rjmp	.+4      	; 0x83e8 <_turn_off+0x4e>
    83e4:	88 0f       	add	r24, r24
    83e6:	99 1f       	adc	r25, r25
    83e8:	0a 94       	dec	r0
    83ea:	e2 f7       	brpl	.-8      	; 0x83e4 <_turn_off+0x4a>
    83ec:	84 2b       	or	r24, r20
    83ee:	8c 93       	st	X, r24
    83f0:	08 95       	ret
    83f2:	fc 01       	movw	r30, r24
    83f4:	ee 0f       	add	r30, r30
    83f6:	ff 1f       	adc	r31, r31
    83f8:	df 01       	movw	r26, r30
    83fa:	a8 0f       	add	r26, r24
    83fc:	b9 1f       	adc	r27, r25
    83fe:	aa 0f       	add	r26, r26
    8400:	bb 1f       	adc	r27, r27
    8402:	a1 5f       	subi	r26, 0xF1	; 241
    8404:	bb 4e       	sbci	r27, 0xEB	; 235
    8406:	0d 90       	ld	r0, X+
    8408:	bc 91       	ld	r27, X
    840a:	a0 2d       	mov	r26, r0
    840c:	2c 91       	ld	r18, X
    840e:	e8 0f       	add	r30, r24
    8410:	f9 1f       	adc	r31, r25
    8412:	ee 0f       	add	r30, r30
    8414:	ff 1f       	adc	r31, r31
    8416:	e1 5f       	subi	r30, 0xF1	; 241
    8418:	fb 4e       	sbci	r31, 0xEB	; 235
    841a:	81 e0       	ldi	r24, 0x01	; 1
    841c:	90 e0       	ldi	r25, 0x00	; 0
    841e:	02 80       	ldd	r0, Z+2	; 0x02
    8420:	02 c0       	rjmp	.+4      	; 0x8426 <_turn_off+0x8c>
    8422:	88 0f       	add	r24, r24
    8424:	99 1f       	adc	r25, r25
    8426:	0a 94       	dec	r0
    8428:	e2 f7       	brpl	.-8      	; 0x8422 <_turn_off+0x88>
    842a:	80 95       	com	r24
    842c:	82 23       	and	r24, r18
    842e:	8c 93       	st	X, r24
    8430:	08 95       	ret

00008432 <_turn_on>:
    8432:	90 e0       	ldi	r25, 0x00	; 0
    8434:	fc 01       	movw	r30, r24
    8436:	ee 0f       	add	r30, r30
    8438:	ff 1f       	adc	r31, r31
    843a:	e8 0f       	add	r30, r24
    843c:	f9 1f       	adc	r31, r25
    843e:	ee 0f       	add	r30, r30
    8440:	ff 1f       	adc	r31, r31
    8442:	e1 5f       	subi	r30, 0xF1	; 241
    8444:	fb 4e       	sbci	r31, 0xEB	; 235
    8446:	23 81       	ldd	r18, Z+3	; 0x03
    8448:	21 11       	cpse	r18, r1
    844a:	20 c0       	rjmp	.+64     	; 0x848c <_turn_on+0x5a>
    844c:	9c 01       	movw	r18, r24
    844e:	22 0f       	add	r18, r18
    8450:	33 1f       	adc	r19, r19
    8452:	f9 01       	movw	r30, r18
    8454:	e8 0f       	add	r30, r24
    8456:	f9 1f       	adc	r31, r25
    8458:	ee 0f       	add	r30, r30
    845a:	ff 1f       	adc	r31, r31
    845c:	e1 5f       	subi	r30, 0xF1	; 241
    845e:	fb 4e       	sbci	r31, 0xEB	; 235
    8460:	a0 81       	ld	r26, Z
    8462:	b1 81       	ldd	r27, Z+1	; 0x01
    8464:	4c 91       	ld	r20, X
    8466:	f9 01       	movw	r30, r18
    8468:	e8 0f       	add	r30, r24
    846a:	f9 1f       	adc	r31, r25
    846c:	ee 0f       	add	r30, r30
    846e:	ff 1f       	adc	r31, r31
    8470:	e1 5f       	subi	r30, 0xF1	; 241
    8472:	fb 4e       	sbci	r31, 0xEB	; 235
    8474:	81 e0       	ldi	r24, 0x01	; 1
    8476:	90 e0       	ldi	r25, 0x00	; 0
    8478:	02 80       	ldd	r0, Z+2	; 0x02
    847a:	02 c0       	rjmp	.+4      	; 0x8480 <_turn_on+0x4e>
    847c:	88 0f       	add	r24, r24
    847e:	99 1f       	adc	r25, r25
    8480:	0a 94       	dec	r0
    8482:	e2 f7       	brpl	.-8      	; 0x847c <_turn_on+0x4a>
    8484:	80 95       	com	r24
    8486:	84 23       	and	r24, r20
    8488:	8c 93       	st	X, r24
    848a:	08 95       	ret
    848c:	fc 01       	movw	r30, r24
    848e:	ee 0f       	add	r30, r30
    8490:	ff 1f       	adc	r31, r31
    8492:	df 01       	movw	r26, r30
    8494:	a8 0f       	add	r26, r24
    8496:	b9 1f       	adc	r27, r25
    8498:	aa 0f       	add	r26, r26
    849a:	bb 1f       	adc	r27, r27
    849c:	a1 5f       	subi	r26, 0xF1	; 241
    849e:	bb 4e       	sbci	r27, 0xEB	; 235
    84a0:	0d 90       	ld	r0, X+
    84a2:	bc 91       	ld	r27, X
    84a4:	a0 2d       	mov	r26, r0
    84a6:	2c 91       	ld	r18, X
    84a8:	e8 0f       	add	r30, r24
    84aa:	f9 1f       	adc	r31, r25
    84ac:	ee 0f       	add	r30, r30
    84ae:	ff 1f       	adc	r31, r31
    84b0:	e1 5f       	subi	r30, 0xF1	; 241
    84b2:	fb 4e       	sbci	r31, 0xEB	; 235
    84b4:	81 e0       	ldi	r24, 0x01	; 1
    84b6:	90 e0       	ldi	r25, 0x00	; 0
    84b8:	02 80       	ldd	r0, Z+2	; 0x02
    84ba:	02 c0       	rjmp	.+4      	; 0x84c0 <_turn_on+0x8e>
    84bc:	88 0f       	add	r24, r24
    84be:	99 1f       	adc	r25, r25
    84c0:	0a 94       	dec	r0
    84c2:	e2 f7       	brpl	.-8      	; 0x84bc <_turn_on+0x8a>
    84c4:	82 2b       	or	r24, r18
    84c6:	8c 93       	st	X, r24
    84c8:	08 95       	ret

000084ca <_hal_led_task>:
    84ca:	cc 24       	eor	r12, r12
    84cc:	c3 94       	inc	r12
    84ce:	d1 2c       	mov	r13, r1
    84d0:	68 94       	set
    84d2:	bb 24       	eor	r11, r11
    84d4:	b2 f8       	bld	r11, 2
    84d6:	cf e0       	ldi	r28, 0x0F	; 15
    84d8:	d4 e1       	ldi	r29, 0x14	; 20
    84da:	10 e0       	ldi	r17, 0x00	; 0
    84dc:	8c 81       	ldd	r24, Y+4	; 0x04
    84de:	81 30       	cpi	r24, 0x01	; 1
    84e0:	81 f0       	breq	.+32     	; 0x8502 <_hal_led_task+0x38>
    84e2:	18 f1       	brcs	.+70     	; 0x852a <_hal_led_task+0x60>
    84e4:	82 30       	cpi	r24, 0x02	; 2
    84e6:	61 f5       	brne	.+88     	; 0x8540 <_hal_led_task+0x76>
    84e8:	e8 81       	ld	r30, Y
    84ea:	f9 81       	ldd	r31, Y+1	; 0x01
    84ec:	20 81       	ld	r18, Z
    84ee:	c6 01       	movw	r24, r12
    84f0:	0a 80       	ldd	r0, Y+2	; 0x02
    84f2:	02 c0       	rjmp	.+4      	; 0x84f8 <_hal_led_task+0x2e>
    84f4:	88 0f       	add	r24, r24
    84f6:	99 1f       	adc	r25, r25
    84f8:	0a 94       	dec	r0
    84fa:	e2 f7       	brpl	.-8      	; 0x84f4 <_hal_led_task+0x2a>
    84fc:	82 27       	eor	r24, r18
    84fe:	80 83       	st	Z, r24
    8500:	1f c0       	rjmp	.+62     	; 0x8540 <_hal_led_task+0x76>
    8502:	8d 81       	ldd	r24, Y+5	; 0x05
    8504:	8f 5f       	subi	r24, 0xFF	; 255
    8506:	8a 30       	cpi	r24, 0x0A	; 10
    8508:	10 f4       	brcc	.+4      	; 0x850e <_hal_led_task+0x44>
    850a:	8d 83       	std	Y+5, r24	; 0x05
    850c:	19 c0       	rjmp	.+50     	; 0x8540 <_hal_led_task+0x76>
    850e:	1d 82       	std	Y+5, r1	; 0x05
    8510:	e8 81       	ld	r30, Y
    8512:	f9 81       	ldd	r31, Y+1	; 0x01
    8514:	20 81       	ld	r18, Z
    8516:	c6 01       	movw	r24, r12
    8518:	0a 80       	ldd	r0, Y+2	; 0x02
    851a:	02 c0       	rjmp	.+4      	; 0x8520 <_hal_led_task+0x56>
    851c:	88 0f       	add	r24, r24
    851e:	99 1f       	adc	r25, r25
    8520:	0a 94       	dec	r0
    8522:	e2 f7       	brpl	.-8      	; 0x851c <_hal_led_task+0x52>
    8524:	82 27       	eor	r24, r18
    8526:	80 83       	st	Z, r24
    8528:	0b c0       	rjmp	.+22     	; 0x8540 <_hal_led_task+0x76>
    852a:	0d 81       	ldd	r16, Y+5	; 0x05
    852c:	00 23       	and	r16, r16
    852e:	29 f0       	breq	.+10     	; 0x853a <_hal_led_task+0x70>
    8530:	81 2f       	mov	r24, r17
    8532:	7f df       	rcall	.-258    	; 0x8432 <_turn_on>
    8534:	01 50       	subi	r16, 0x01	; 1
    8536:	0d 83       	std	Y+5, r16	; 0x05
    8538:	03 c0       	rjmp	.+6      	; 0x8540 <_hal_led_task+0x76>
    853a:	bc 82       	std	Y+4, r11	; 0x04
    853c:	81 2f       	mov	r24, r17
    853e:	2d df       	rcall	.-422    	; 0x839a <_turn_off>
    8540:	1f 5f       	subi	r17, 0xFF	; 255
    8542:	26 96       	adiw	r28, 0x06	; 6
    8544:	14 30       	cpi	r17, 0x04	; 4
    8546:	51 f6       	brne	.-108    	; 0x84dc <_hal_led_task+0x12>
    8548:	65 e0       	ldi	r22, 0x05	; 5
    854a:	70 e0       	ldi	r23, 0x00	; 0
    854c:	80 e0       	ldi	r24, 0x00	; 0
    854e:	90 e0       	ldi	r25, 0x00	; 0
    8550:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <vTaskDelay>
    8554:	c0 cf       	rjmp	.-128    	; 0x84d6 <_hal_led_task+0xc>

00008556 <status_leds_initialise>:
    8556:	ef 92       	push	r14
    8558:	ff 92       	push	r15
    855a:	0f 93       	push	r16
    855c:	1f 93       	push	r17
    855e:	cf 93       	push	r28
    8560:	df 93       	push	r29
    8562:	08 2f       	mov	r16, r24
    8564:	80 e4       	ldi	r24, 0x40	; 64
    8566:	87 b9       	out	0x07, r24	; 7
    8568:	cf e0       	ldi	r28, 0x0F	; 15
    856a:	d4 e1       	ldi	r29, 0x14	; 20
    856c:	0f 2e       	mov	r0, r31
    856e:	f8 e2       	ldi	r31, 0x28	; 40
    8570:	ef 2e       	mov	r14, r31
    8572:	f1 2c       	mov	r15, r1
    8574:	f0 2d       	mov	r31, r0
    8576:	f9 82       	std	Y+1, r15	; 0x01
    8578:	e8 82       	st	Y, r14
    857a:	86 e0       	ldi	r24, 0x06	; 6
    857c:	8a 83       	std	Y+2, r24	; 0x02
    857e:	1b 82       	std	Y+3, r1	; 0x03
    8580:	14 e0       	ldi	r17, 0x04	; 4
    8582:	1c 83       	std	Y+4, r17	; 0x04
    8584:	80 e0       	ldi	r24, 0x00	; 0
    8586:	09 df       	rcall	.-494    	; 0x839a <_turn_off>
    8588:	80 e8       	ldi	r24, 0x80	; 128
    858a:	87 b9       	out	0x07, r24	; 7
    858c:	ff 82       	std	Y+7, r15	; 0x07
    858e:	ee 82       	std	Y+6, r14	; 0x06
    8590:	87 e0       	ldi	r24, 0x07	; 7
    8592:	88 87       	std	Y+8, r24	; 0x08
    8594:	19 86       	std	Y+9, r1	; 0x09
    8596:	1a 87       	std	Y+10, r17	; 0x0a
    8598:	81 e0       	ldi	r24, 0x01	; 1
    859a:	ff de       	rcall	.-514    	; 0x839a <_turn_off>
    859c:	80 e2       	ldi	r24, 0x20	; 32
    859e:	83 bb       	out	0x13, r24	; 19
    85a0:	84 e3       	ldi	r24, 0x34	; 52
    85a2:	90 e0       	ldi	r25, 0x00	; 0
    85a4:	9d 87       	std	Y+13, r25	; 0x0d
    85a6:	8c 87       	std	Y+12, r24	; 0x0c
    85a8:	85 e0       	ldi	r24, 0x05	; 5
    85aa:	8e 87       	std	Y+14, r24	; 0x0e
    85ac:	1f 86       	std	Y+15, r1	; 0x0f
    85ae:	18 8b       	std	Y+16, r17	; 0x10
    85b0:	82 e0       	ldi	r24, 0x02	; 2
    85b2:	f3 de       	rcall	.-538    	; 0x839a <_turn_off>
    85b4:	80 e1       	ldi	r24, 0x10	; 16
    85b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    85ba:	82 e0       	ldi	r24, 0x02	; 2
    85bc:	91 e0       	ldi	r25, 0x01	; 1
    85be:	9b 8b       	std	Y+19, r25	; 0x13
    85c0:	8a 8b       	std	Y+18, r24	; 0x12
    85c2:	1c 8b       	std	Y+20, r17	; 0x14
    85c4:	1d 8a       	std	Y+21, r1	; 0x15
    85c6:	1e 8b       	std	Y+22, r17	; 0x16
    85c8:	83 e0       	ldi	r24, 0x03	; 3
    85ca:	e7 de       	rcall	.-562    	; 0x839a <_turn_off>
    85cc:	e1 2c       	mov	r14, r1
    85ce:	f1 2c       	mov	r15, r1
    85d0:	20 e0       	ldi	r18, 0x00	; 0
    85d2:	30 e0       	ldi	r19, 0x00	; 0
    85d4:	40 ec       	ldi	r20, 0xC0	; 192
    85d6:	50 e0       	ldi	r21, 0x00	; 0
    85d8:	62 eb       	ldi	r22, 0xB2	; 178
    85da:	77 e0       	ldi	r23, 0x07	; 7
    85dc:	85 e6       	ldi	r24, 0x65	; 101
    85de:	92 e4       	ldi	r25, 0x42	; 66
    85e0:	0e 94 30 18 	call	0x3060	; 0x3060 <xTaskCreate>
    85e4:	df 91       	pop	r29
    85e6:	cf 91       	pop	r28
    85e8:	1f 91       	pop	r17
    85ea:	0f 91       	pop	r16
    85ec:	ff 90       	pop	r15
    85ee:	ef 90       	pop	r14
    85f0:	08 95       	ret

000085f2 <status_leds_slowBlink>:
    85f2:	cf 93       	push	r28
    85f4:	df 93       	push	r29
    85f6:	90 e0       	ldi	r25, 0x00	; 0
    85f8:	fc 01       	movw	r30, r24
    85fa:	ee 0f       	add	r30, r30
    85fc:	ff 1f       	adc	r31, r31
    85fe:	df 01       	movw	r26, r30
    8600:	a8 0f       	add	r26, r24
    8602:	b9 1f       	adc	r27, r25
    8604:	aa 0f       	add	r26, r26
    8606:	bb 1f       	adc	r27, r27
    8608:	a1 5f       	subi	r26, 0xF1	; 241
    860a:	bb 4e       	sbci	r27, 0xEB	; 235
    860c:	cd 91       	ld	r28, X+
    860e:	dc 91       	ld	r29, X
    8610:	11 97       	sbiw	r26, 0x01	; 1
    8612:	48 81       	ld	r20, Y
    8614:	21 e0       	ldi	r18, 0x01	; 1
    8616:	30 e0       	ldi	r19, 0x00	; 0
    8618:	12 96       	adiw	r26, 0x02	; 2
    861a:	0c 90       	ld	r0, X
    861c:	12 97       	sbiw	r26, 0x02	; 2
    861e:	02 c0       	rjmp	.+4      	; 0x8624 <status_leds_slowBlink+0x32>
    8620:	22 0f       	add	r18, r18
    8622:	33 1f       	adc	r19, r19
    8624:	0a 94       	dec	r0
    8626:	e2 f7       	brpl	.-8      	; 0x8620 <status_leds_slowBlink+0x2e>
    8628:	24 27       	eor	r18, r20
    862a:	28 83       	st	Y, r18
    862c:	fd 01       	movw	r30, r26
    862e:	81 e0       	ldi	r24, 0x01	; 1
    8630:	84 83       	std	Z+4, r24	; 0x04
    8632:	df 91       	pop	r29
    8634:	cf 91       	pop	r28
    8636:	08 95       	ret

00008638 <status_leds_fastBlink>:
    8638:	cf 93       	push	r28
    863a:	df 93       	push	r29
    863c:	90 e0       	ldi	r25, 0x00	; 0
    863e:	fc 01       	movw	r30, r24
    8640:	ee 0f       	add	r30, r30
    8642:	ff 1f       	adc	r31, r31
    8644:	df 01       	movw	r26, r30
    8646:	a8 0f       	add	r26, r24
    8648:	b9 1f       	adc	r27, r25
    864a:	aa 0f       	add	r26, r26
    864c:	bb 1f       	adc	r27, r27
    864e:	a1 5f       	subi	r26, 0xF1	; 241
    8650:	bb 4e       	sbci	r27, 0xEB	; 235
    8652:	cd 91       	ld	r28, X+
    8654:	dc 91       	ld	r29, X
    8656:	11 97       	sbiw	r26, 0x01	; 1
    8658:	48 81       	ld	r20, Y
    865a:	21 e0       	ldi	r18, 0x01	; 1
    865c:	30 e0       	ldi	r19, 0x00	; 0
    865e:	12 96       	adiw	r26, 0x02	; 2
    8660:	0c 90       	ld	r0, X
    8662:	12 97       	sbiw	r26, 0x02	; 2
    8664:	02 c0       	rjmp	.+4      	; 0x866a <status_leds_fastBlink+0x32>
    8666:	22 0f       	add	r18, r18
    8668:	33 1f       	adc	r19, r19
    866a:	0a 94       	dec	r0
    866c:	e2 f7       	brpl	.-8      	; 0x8666 <status_leds_fastBlink+0x2e>
    866e:	24 27       	eor	r18, r20
    8670:	28 83       	st	Y, r18
    8672:	fd 01       	movw	r30, r26
    8674:	82 e0       	ldi	r24, 0x02	; 2
    8676:	84 83       	std	Z+4, r24	; 0x04
    8678:	df 91       	pop	r29
    867a:	cf 91       	pop	r28
    867c:	08 95       	ret

0000867e <status_leds_ledOn>:
    867e:	28 2f       	mov	r18, r24
    8680:	30 e0       	ldi	r19, 0x00	; 0
    8682:	f9 01       	movw	r30, r18
    8684:	ee 0f       	add	r30, r30
    8686:	ff 1f       	adc	r31, r31
    8688:	e2 0f       	add	r30, r18
    868a:	f3 1f       	adc	r31, r19
    868c:	ee 0f       	add	r30, r30
    868e:	ff 1f       	adc	r31, r31
    8690:	e1 5f       	subi	r30, 0xF1	; 241
    8692:	fb 4e       	sbci	r31, 0xEB	; 235
    8694:	93 e0       	ldi	r25, 0x03	; 3
    8696:	94 83       	std	Z+4, r25	; 0x04
    8698:	cc ce       	rjmp	.-616    	; 0x8432 <_turn_on>
    869a:	08 95       	ret

0000869c <status_leds_ledOff>:
    869c:	28 2f       	mov	r18, r24
    869e:	30 e0       	ldi	r19, 0x00	; 0
    86a0:	f9 01       	movw	r30, r18
    86a2:	ee 0f       	add	r30, r30
    86a4:	ff 1f       	adc	r31, r31
    86a6:	e2 0f       	add	r30, r18
    86a8:	f3 1f       	adc	r31, r19
    86aa:	ee 0f       	add	r30, r30
    86ac:	ff 1f       	adc	r31, r31
    86ae:	e1 5f       	subi	r30, 0xF1	; 241
    86b0:	fb 4e       	sbci	r31, 0xEB	; 235
    86b2:	94 e0       	ldi	r25, 0x04	; 4
    86b4:	94 83       	std	Z+4, r25	; 0x04
    86b6:	71 ce       	rjmp	.-798    	; 0x839a <_turn_off>
    86b8:	08 95       	ret

000086ba <status_leds_longPuls>:
    86ba:	90 e0       	ldi	r25, 0x00	; 0
    86bc:	fc 01       	movw	r30, r24
    86be:	ee 0f       	add	r30, r30
    86c0:	ff 1f       	adc	r31, r31
    86c2:	df 01       	movw	r26, r30
    86c4:	a8 0f       	add	r26, r24
    86c6:	b9 1f       	adc	r27, r25
    86c8:	aa 0f       	add	r26, r26
    86ca:	bb 1f       	adc	r27, r27
    86cc:	a1 5f       	subi	r26, 0xF1	; 241
    86ce:	bb 4e       	sbci	r27, 0xEB	; 235
    86d0:	24 e0       	ldi	r18, 0x04	; 4
    86d2:	15 96       	adiw	r26, 0x05	; 5
    86d4:	2c 93       	st	X, r18
    86d6:	15 97       	sbiw	r26, 0x05	; 5
    86d8:	fd 01       	movw	r30, r26
    86da:	14 82       	std	Z+4, r1	; 0x04
    86dc:	08 95       	ret

000086de <status_leds_shortPuls>:
    86de:	90 e0       	ldi	r25, 0x00	; 0
    86e0:	fc 01       	movw	r30, r24
    86e2:	ee 0f       	add	r30, r30
    86e4:	ff 1f       	adc	r31, r31
    86e6:	df 01       	movw	r26, r30
    86e8:	a8 0f       	add	r26, r24
    86ea:	b9 1f       	adc	r27, r25
    86ec:	aa 0f       	add	r26, r26
    86ee:	bb 1f       	adc	r27, r27
    86f0:	a1 5f       	subi	r26, 0xF1	; 241
    86f2:	bb 4e       	sbci	r27, 0xEB	; 235
    86f4:	21 e0       	ldi	r18, 0x01	; 1
    86f6:	15 96       	adiw	r26, 0x05	; 5
    86f8:	2c 93       	st	X, r18
    86fa:	15 97       	sbiw	r26, 0x05	; 5
    86fc:	fd 01       	movw	r30, r26
    86fe:	14 82       	std	Z+4, r1	; 0x04
    8700:	08 95       	ret

00008702 <fifo_init>:
    8702:	fc 01       	movw	r30, r24
    8704:	41 11       	cpse	r20, r1
    8706:	01 c0       	rjmp	.+2      	; 0x870a <fifo_init+0x8>
    8708:	5b d2       	rcall	.+1206   	; 0x8bc0 <abort>
    870a:	84 2f       	mov	r24, r20
    870c:	90 e0       	ldi	r25, 0x00	; 0
    870e:	9c 01       	movw	r18, r24
    8710:	21 50       	subi	r18, 0x01	; 1
    8712:	31 09       	sbc	r19, r1
    8714:	82 23       	and	r24, r18
    8716:	93 23       	and	r25, r19
    8718:	89 2b       	or	r24, r25
    871a:	09 f0       	breq	.+2      	; 0x871e <fifo_init+0x1c>
    871c:	51 d2       	rcall	.+1186   	; 0x8bc0 <abort>
    871e:	41 38       	cpi	r20, 0x81	; 129
    8720:	08 f0       	brcs	.+2      	; 0x8724 <fifo_init+0x22>
    8722:	4e d2       	rcall	.+1180   	; 0x8bc0 <abort>
    8724:	12 82       	std	Z+2, r1	; 0x02
    8726:	13 82       	std	Z+3, r1	; 0x03
    8728:	44 83       	std	Z+4, r20	; 0x04
    872a:	44 0f       	add	r20, r20
    872c:	41 50       	subi	r20, 0x01	; 1
    872e:	45 83       	std	Z+5, r20	; 0x05
    8730:	71 83       	std	Z+1, r23	; 0x01
    8732:	60 83       	st	Z, r22
    8734:	80 e0       	ldi	r24, 0x00	; 0
    8736:	90 e0       	ldi	r25, 0x00	; 0
    8738:	08 95       	ret

0000873a <__subsf3>:
    873a:	50 58       	subi	r21, 0x80	; 128

0000873c <__addsf3>:
    873c:	bb 27       	eor	r27, r27
    873e:	aa 27       	eor	r26, r26
    8740:	13 d0       	rcall	.+38     	; 0x8768 <__addsf3x>
    8742:	0c 94 b1 38 	jmp	0x7162	; 0x7162 <__fp_round>
    8746:	0e 94 a3 38 	call	0x7146	; 0x7146 <__fp_pscA>
    874a:	38 f0       	brcs	.+14     	; 0x875a <__addsf3+0x1e>
    874c:	0e 94 aa 38 	call	0x7154	; 0x7154 <__fp_pscB>
    8750:	20 f0       	brcs	.+8      	; 0x875a <__addsf3+0x1e>
    8752:	39 f4       	brne	.+14     	; 0x8762 <__addsf3+0x26>
    8754:	9f 3f       	cpi	r25, 0xFF	; 255
    8756:	19 f4       	brne	.+6      	; 0x875e <__addsf3+0x22>
    8758:	26 f4       	brtc	.+8      	; 0x8762 <__addsf3+0x26>
    875a:	0c 94 a0 38 	jmp	0x7140	; 0x7140 <__fp_nan>
    875e:	0e f4       	brtc	.+2      	; 0x8762 <__addsf3+0x26>
    8760:	e0 95       	com	r30
    8762:	e7 fb       	bst	r30, 7
    8764:	0c 94 9a 38 	jmp	0x7134	; 0x7134 <__fp_inf>

00008768 <__addsf3x>:
    8768:	e9 2f       	mov	r30, r25
    876a:	0e 94 0a 38 	call	0x7014	; 0x7014 <__fp_split3>
    876e:	58 f3       	brcs	.-42     	; 0x8746 <__addsf3+0xa>
    8770:	ba 17       	cp	r27, r26
    8772:	62 07       	cpc	r22, r18
    8774:	73 07       	cpc	r23, r19
    8776:	84 07       	cpc	r24, r20
    8778:	95 07       	cpc	r25, r21
    877a:	20 f0       	brcs	.+8      	; 0x8784 <__addsf3x+0x1c>
    877c:	79 f4       	brne	.+30     	; 0x879c <__addsf3x+0x34>
    877e:	a6 f5       	brtc	.+104    	; 0x87e8 <__addsf3x+0x80>
    8780:	0c 94 2c 38 	jmp	0x7058	; 0x7058 <__fp_zero>
    8784:	0e f4       	brtc	.+2      	; 0x8788 <__addsf3x+0x20>
    8786:	e0 95       	com	r30
    8788:	0b 2e       	mov	r0, r27
    878a:	ba 2f       	mov	r27, r26
    878c:	a0 2d       	mov	r26, r0
    878e:	0b 01       	movw	r0, r22
    8790:	b9 01       	movw	r22, r18
    8792:	90 01       	movw	r18, r0
    8794:	0c 01       	movw	r0, r24
    8796:	ca 01       	movw	r24, r20
    8798:	a0 01       	movw	r20, r0
    879a:	11 24       	eor	r1, r1
    879c:	ff 27       	eor	r31, r31
    879e:	59 1b       	sub	r21, r25
    87a0:	99 f0       	breq	.+38     	; 0x87c8 <__addsf3x+0x60>
    87a2:	59 3f       	cpi	r21, 0xF9	; 249
    87a4:	50 f4       	brcc	.+20     	; 0x87ba <__addsf3x+0x52>
    87a6:	50 3e       	cpi	r21, 0xE0	; 224
    87a8:	68 f1       	brcs	.+90     	; 0x8804 <__addsf3x+0x9c>
    87aa:	1a 16       	cp	r1, r26
    87ac:	f0 40       	sbci	r31, 0x00	; 0
    87ae:	a2 2f       	mov	r26, r18
    87b0:	23 2f       	mov	r18, r19
    87b2:	34 2f       	mov	r19, r20
    87b4:	44 27       	eor	r20, r20
    87b6:	58 5f       	subi	r21, 0xF8	; 248
    87b8:	f3 cf       	rjmp	.-26     	; 0x87a0 <__addsf3x+0x38>
    87ba:	46 95       	lsr	r20
    87bc:	37 95       	ror	r19
    87be:	27 95       	ror	r18
    87c0:	a7 95       	ror	r26
    87c2:	f0 40       	sbci	r31, 0x00	; 0
    87c4:	53 95       	inc	r21
    87c6:	c9 f7       	brne	.-14     	; 0x87ba <__addsf3x+0x52>
    87c8:	7e f4       	brtc	.+30     	; 0x87e8 <__addsf3x+0x80>
    87ca:	1f 16       	cp	r1, r31
    87cc:	ba 0b       	sbc	r27, r26
    87ce:	62 0b       	sbc	r22, r18
    87d0:	73 0b       	sbc	r23, r19
    87d2:	84 0b       	sbc	r24, r20
    87d4:	ba f0       	brmi	.+46     	; 0x8804 <__addsf3x+0x9c>
    87d6:	91 50       	subi	r25, 0x01	; 1
    87d8:	a1 f0       	breq	.+40     	; 0x8802 <__addsf3x+0x9a>
    87da:	ff 0f       	add	r31, r31
    87dc:	bb 1f       	adc	r27, r27
    87de:	66 1f       	adc	r22, r22
    87e0:	77 1f       	adc	r23, r23
    87e2:	88 1f       	adc	r24, r24
    87e4:	c2 f7       	brpl	.-16     	; 0x87d6 <__addsf3x+0x6e>
    87e6:	0e c0       	rjmp	.+28     	; 0x8804 <__addsf3x+0x9c>
    87e8:	ba 0f       	add	r27, r26
    87ea:	62 1f       	adc	r22, r18
    87ec:	73 1f       	adc	r23, r19
    87ee:	84 1f       	adc	r24, r20
    87f0:	48 f4       	brcc	.+18     	; 0x8804 <__addsf3x+0x9c>
    87f2:	87 95       	ror	r24
    87f4:	77 95       	ror	r23
    87f6:	67 95       	ror	r22
    87f8:	b7 95       	ror	r27
    87fa:	f7 95       	ror	r31
    87fc:	9e 3f       	cpi	r25, 0xFE	; 254
    87fe:	08 f0       	brcs	.+2      	; 0x8802 <__addsf3x+0x9a>
    8800:	b0 cf       	rjmp	.-160    	; 0x8762 <__addsf3+0x26>
    8802:	93 95       	inc	r25
    8804:	88 0f       	add	r24, r24
    8806:	08 f0       	brcs	.+2      	; 0x880a <__addsf3x+0xa2>
    8808:	99 27       	eor	r25, r25
    880a:	ee 0f       	add	r30, r30
    880c:	97 95       	ror	r25
    880e:	87 95       	ror	r24
    8810:	08 95       	ret

00008812 <__divsf3>:
    8812:	12 d0       	rcall	.+36     	; 0x8838 <__divsf3x>
    8814:	0c 94 b1 38 	jmp	0x7162	; 0x7162 <__fp_round>
    8818:	0e 94 aa 38 	call	0x7154	; 0x7154 <__fp_pscB>
    881c:	58 f0       	brcs	.+22     	; 0x8834 <__divsf3+0x22>
    881e:	0e 94 a3 38 	call	0x7146	; 0x7146 <__fp_pscA>
    8822:	40 f0       	brcs	.+16     	; 0x8834 <__divsf3+0x22>
    8824:	29 f4       	brne	.+10     	; 0x8830 <__divsf3+0x1e>
    8826:	5f 3f       	cpi	r21, 0xFF	; 255
    8828:	29 f0       	breq	.+10     	; 0x8834 <__divsf3+0x22>
    882a:	0c 94 9a 38 	jmp	0x7134	; 0x7134 <__fp_inf>
    882e:	51 11       	cpse	r21, r1
    8830:	0c 94 2d 38 	jmp	0x705a	; 0x705a <__fp_szero>
    8834:	0c 94 a0 38 	jmp	0x7140	; 0x7140 <__fp_nan>

00008838 <__divsf3x>:
    8838:	0e 94 0a 38 	call	0x7014	; 0x7014 <__fp_split3>
    883c:	68 f3       	brcs	.-38     	; 0x8818 <__divsf3+0x6>

0000883e <__divsf3_pse>:
    883e:	99 23       	and	r25, r25
    8840:	b1 f3       	breq	.-20     	; 0x882e <__divsf3+0x1c>
    8842:	55 23       	and	r21, r21
    8844:	91 f3       	breq	.-28     	; 0x882a <__divsf3+0x18>
    8846:	95 1b       	sub	r25, r21
    8848:	55 0b       	sbc	r21, r21
    884a:	bb 27       	eor	r27, r27
    884c:	aa 27       	eor	r26, r26
    884e:	62 17       	cp	r22, r18
    8850:	73 07       	cpc	r23, r19
    8852:	84 07       	cpc	r24, r20
    8854:	38 f0       	brcs	.+14     	; 0x8864 <__divsf3_pse+0x26>
    8856:	9f 5f       	subi	r25, 0xFF	; 255
    8858:	5f 4f       	sbci	r21, 0xFF	; 255
    885a:	22 0f       	add	r18, r18
    885c:	33 1f       	adc	r19, r19
    885e:	44 1f       	adc	r20, r20
    8860:	aa 1f       	adc	r26, r26
    8862:	a9 f3       	breq	.-22     	; 0x884e <__divsf3_pse+0x10>
    8864:	35 d0       	rcall	.+106    	; 0x88d0 <__divsf3_pse+0x92>
    8866:	0e 2e       	mov	r0, r30
    8868:	3a f0       	brmi	.+14     	; 0x8878 <__divsf3_pse+0x3a>
    886a:	e0 e8       	ldi	r30, 0x80	; 128
    886c:	32 d0       	rcall	.+100    	; 0x88d2 <__divsf3_pse+0x94>
    886e:	91 50       	subi	r25, 0x01	; 1
    8870:	50 40       	sbci	r21, 0x00	; 0
    8872:	e6 95       	lsr	r30
    8874:	00 1c       	adc	r0, r0
    8876:	ca f7       	brpl	.-14     	; 0x886a <__divsf3_pse+0x2c>
    8878:	2b d0       	rcall	.+86     	; 0x88d0 <__divsf3_pse+0x92>
    887a:	fe 2f       	mov	r31, r30
    887c:	29 d0       	rcall	.+82     	; 0x88d0 <__divsf3_pse+0x92>
    887e:	66 0f       	add	r22, r22
    8880:	77 1f       	adc	r23, r23
    8882:	88 1f       	adc	r24, r24
    8884:	bb 1f       	adc	r27, r27
    8886:	26 17       	cp	r18, r22
    8888:	37 07       	cpc	r19, r23
    888a:	48 07       	cpc	r20, r24
    888c:	ab 07       	cpc	r26, r27
    888e:	b0 e8       	ldi	r27, 0x80	; 128
    8890:	09 f0       	breq	.+2      	; 0x8894 <__divsf3_pse+0x56>
    8892:	bb 0b       	sbc	r27, r27
    8894:	80 2d       	mov	r24, r0
    8896:	bf 01       	movw	r22, r30
    8898:	ff 27       	eor	r31, r31
    889a:	93 58       	subi	r25, 0x83	; 131
    889c:	5f 4f       	sbci	r21, 0xFF	; 255
    889e:	3a f0       	brmi	.+14     	; 0x88ae <__divsf3_pse+0x70>
    88a0:	9e 3f       	cpi	r25, 0xFE	; 254
    88a2:	51 05       	cpc	r21, r1
    88a4:	78 f0       	brcs	.+30     	; 0x88c4 <__divsf3_pse+0x86>
    88a6:	0c 94 9a 38 	jmp	0x7134	; 0x7134 <__fp_inf>
    88aa:	0c 94 2d 38 	jmp	0x705a	; 0x705a <__fp_szero>
    88ae:	5f 3f       	cpi	r21, 0xFF	; 255
    88b0:	e4 f3       	brlt	.-8      	; 0x88aa <__divsf3_pse+0x6c>
    88b2:	98 3e       	cpi	r25, 0xE8	; 232
    88b4:	d4 f3       	brlt	.-12     	; 0x88aa <__divsf3_pse+0x6c>
    88b6:	86 95       	lsr	r24
    88b8:	77 95       	ror	r23
    88ba:	67 95       	ror	r22
    88bc:	b7 95       	ror	r27
    88be:	f7 95       	ror	r31
    88c0:	9f 5f       	subi	r25, 0xFF	; 255
    88c2:	c9 f7       	brne	.-14     	; 0x88b6 <__divsf3_pse+0x78>
    88c4:	88 0f       	add	r24, r24
    88c6:	91 1d       	adc	r25, r1
    88c8:	96 95       	lsr	r25
    88ca:	87 95       	ror	r24
    88cc:	97 f9       	bld	r25, 7
    88ce:	08 95       	ret
    88d0:	e1 e0       	ldi	r30, 0x01	; 1
    88d2:	66 0f       	add	r22, r22
    88d4:	77 1f       	adc	r23, r23
    88d6:	88 1f       	adc	r24, r24
    88d8:	bb 1f       	adc	r27, r27
    88da:	62 17       	cp	r22, r18
    88dc:	73 07       	cpc	r23, r19
    88de:	84 07       	cpc	r24, r20
    88e0:	ba 07       	cpc	r27, r26
    88e2:	20 f0       	brcs	.+8      	; 0x88ec <__divsf3_pse+0xae>
    88e4:	62 1b       	sub	r22, r18
    88e6:	73 0b       	sbc	r23, r19
    88e8:	84 0b       	sbc	r24, r20
    88ea:	ba 0b       	sbc	r27, r26
    88ec:	ee 1f       	adc	r30, r30
    88ee:	88 f7       	brcc	.-30     	; 0x88d2 <__divsf3_pse+0x94>
    88f0:	e0 95       	com	r30
    88f2:	08 95       	ret

000088f4 <__floatunsisf>:
    88f4:	e8 94       	clt
    88f6:	09 c0       	rjmp	.+18     	; 0x890a <__floatsisf+0x12>

000088f8 <__floatsisf>:
    88f8:	97 fb       	bst	r25, 7
    88fa:	3e f4       	brtc	.+14     	; 0x890a <__floatsisf+0x12>
    88fc:	90 95       	com	r25
    88fe:	80 95       	com	r24
    8900:	70 95       	com	r23
    8902:	61 95       	neg	r22
    8904:	7f 4f       	sbci	r23, 0xFF	; 255
    8906:	8f 4f       	sbci	r24, 0xFF	; 255
    8908:	9f 4f       	sbci	r25, 0xFF	; 255
    890a:	99 23       	and	r25, r25
    890c:	a9 f0       	breq	.+42     	; 0x8938 <__floatsisf+0x40>
    890e:	f9 2f       	mov	r31, r25
    8910:	96 e9       	ldi	r25, 0x96	; 150
    8912:	bb 27       	eor	r27, r27
    8914:	93 95       	inc	r25
    8916:	f6 95       	lsr	r31
    8918:	87 95       	ror	r24
    891a:	77 95       	ror	r23
    891c:	67 95       	ror	r22
    891e:	b7 95       	ror	r27
    8920:	f1 11       	cpse	r31, r1
    8922:	f8 cf       	rjmp	.-16     	; 0x8914 <__floatsisf+0x1c>
    8924:	fa f4       	brpl	.+62     	; 0x8964 <__floatsisf+0x6c>
    8926:	bb 0f       	add	r27, r27
    8928:	11 f4       	brne	.+4      	; 0x892e <__floatsisf+0x36>
    892a:	60 ff       	sbrs	r22, 0
    892c:	1b c0       	rjmp	.+54     	; 0x8964 <__floatsisf+0x6c>
    892e:	6f 5f       	subi	r22, 0xFF	; 255
    8930:	7f 4f       	sbci	r23, 0xFF	; 255
    8932:	8f 4f       	sbci	r24, 0xFF	; 255
    8934:	9f 4f       	sbci	r25, 0xFF	; 255
    8936:	16 c0       	rjmp	.+44     	; 0x8964 <__floatsisf+0x6c>
    8938:	88 23       	and	r24, r24
    893a:	11 f0       	breq	.+4      	; 0x8940 <__floatsisf+0x48>
    893c:	96 e9       	ldi	r25, 0x96	; 150
    893e:	11 c0       	rjmp	.+34     	; 0x8962 <__floatsisf+0x6a>
    8940:	77 23       	and	r23, r23
    8942:	21 f0       	breq	.+8      	; 0x894c <__floatsisf+0x54>
    8944:	9e e8       	ldi	r25, 0x8E	; 142
    8946:	87 2f       	mov	r24, r23
    8948:	76 2f       	mov	r23, r22
    894a:	05 c0       	rjmp	.+10     	; 0x8956 <__floatsisf+0x5e>
    894c:	66 23       	and	r22, r22
    894e:	71 f0       	breq	.+28     	; 0x896c <__floatsisf+0x74>
    8950:	96 e8       	ldi	r25, 0x86	; 134
    8952:	86 2f       	mov	r24, r22
    8954:	70 e0       	ldi	r23, 0x00	; 0
    8956:	60 e0       	ldi	r22, 0x00	; 0
    8958:	2a f0       	brmi	.+10     	; 0x8964 <__floatsisf+0x6c>
    895a:	9a 95       	dec	r25
    895c:	66 0f       	add	r22, r22
    895e:	77 1f       	adc	r23, r23
    8960:	88 1f       	adc	r24, r24
    8962:	da f7       	brpl	.-10     	; 0x895a <__floatsisf+0x62>
    8964:	88 0f       	add	r24, r24
    8966:	96 95       	lsr	r25
    8968:	87 95       	ror	r24
    896a:	97 f9       	bld	r25, 7
    896c:	08 95       	ret

0000896e <__tablejump2__>:
    896e:	ee 0f       	add	r30, r30
    8970:	ff 1f       	adc	r31, r31
    8972:	88 1f       	adc	r24, r24
    8974:	8b bf       	out	0x3b, r24	; 59
    8976:	07 90       	elpm	r0, Z+
    8978:	f6 91       	elpm	r31, Z
    897a:	e0 2d       	mov	r30, r0
    897c:	19 94       	eijmp

0000897e <malloc>:
    897e:	0f 93       	push	r16
    8980:	1f 93       	push	r17
    8982:	cf 93       	push	r28
    8984:	df 93       	push	r29
    8986:	82 30       	cpi	r24, 0x02	; 2
    8988:	91 05       	cpc	r25, r1
    898a:	10 f4       	brcc	.+4      	; 0x8990 <malloc+0x12>
    898c:	82 e0       	ldi	r24, 0x02	; 2
    898e:	90 e0       	ldi	r25, 0x00	; 0
    8990:	e0 91 46 14 	lds	r30, 0x1446	; 0x801446 <__flp>
    8994:	f0 91 47 14 	lds	r31, 0x1447	; 0x801447 <__flp+0x1>
    8998:	20 e0       	ldi	r18, 0x00	; 0
    899a:	30 e0       	ldi	r19, 0x00	; 0
    899c:	a0 e0       	ldi	r26, 0x00	; 0
    899e:	b0 e0       	ldi	r27, 0x00	; 0
    89a0:	30 97       	sbiw	r30, 0x00	; 0
    89a2:	19 f1       	breq	.+70     	; 0x89ea <malloc+0x6c>
    89a4:	40 81       	ld	r20, Z
    89a6:	51 81       	ldd	r21, Z+1	; 0x01
    89a8:	02 81       	ldd	r16, Z+2	; 0x02
    89aa:	13 81       	ldd	r17, Z+3	; 0x03
    89ac:	48 17       	cp	r20, r24
    89ae:	59 07       	cpc	r21, r25
    89b0:	c8 f0       	brcs	.+50     	; 0x89e4 <malloc+0x66>
    89b2:	84 17       	cp	r24, r20
    89b4:	95 07       	cpc	r25, r21
    89b6:	69 f4       	brne	.+26     	; 0x89d2 <malloc+0x54>
    89b8:	10 97       	sbiw	r26, 0x00	; 0
    89ba:	31 f0       	breq	.+12     	; 0x89c8 <malloc+0x4a>
    89bc:	12 96       	adiw	r26, 0x02	; 2
    89be:	0c 93       	st	X, r16
    89c0:	12 97       	sbiw	r26, 0x02	; 2
    89c2:	13 96       	adiw	r26, 0x03	; 3
    89c4:	1c 93       	st	X, r17
    89c6:	27 c0       	rjmp	.+78     	; 0x8a16 <malloc+0x98>
    89c8:	00 93 46 14 	sts	0x1446, r16	; 0x801446 <__flp>
    89cc:	10 93 47 14 	sts	0x1447, r17	; 0x801447 <__flp+0x1>
    89d0:	22 c0       	rjmp	.+68     	; 0x8a16 <malloc+0x98>
    89d2:	21 15       	cp	r18, r1
    89d4:	31 05       	cpc	r19, r1
    89d6:	19 f0       	breq	.+6      	; 0x89de <malloc+0x60>
    89d8:	42 17       	cp	r20, r18
    89da:	53 07       	cpc	r21, r19
    89dc:	18 f4       	brcc	.+6      	; 0x89e4 <malloc+0x66>
    89de:	9a 01       	movw	r18, r20
    89e0:	bd 01       	movw	r22, r26
    89e2:	ef 01       	movw	r28, r30
    89e4:	df 01       	movw	r26, r30
    89e6:	f8 01       	movw	r30, r16
    89e8:	db cf       	rjmp	.-74     	; 0x89a0 <malloc+0x22>
    89ea:	21 15       	cp	r18, r1
    89ec:	31 05       	cpc	r19, r1
    89ee:	f9 f0       	breq	.+62     	; 0x8a2e <malloc+0xb0>
    89f0:	28 1b       	sub	r18, r24
    89f2:	39 0b       	sbc	r19, r25
    89f4:	24 30       	cpi	r18, 0x04	; 4
    89f6:	31 05       	cpc	r19, r1
    89f8:	80 f4       	brcc	.+32     	; 0x8a1a <malloc+0x9c>
    89fa:	8a 81       	ldd	r24, Y+2	; 0x02
    89fc:	9b 81       	ldd	r25, Y+3	; 0x03
    89fe:	61 15       	cp	r22, r1
    8a00:	71 05       	cpc	r23, r1
    8a02:	21 f0       	breq	.+8      	; 0x8a0c <malloc+0x8e>
    8a04:	fb 01       	movw	r30, r22
    8a06:	93 83       	std	Z+3, r25	; 0x03
    8a08:	82 83       	std	Z+2, r24	; 0x02
    8a0a:	04 c0       	rjmp	.+8      	; 0x8a14 <malloc+0x96>
    8a0c:	90 93 47 14 	sts	0x1447, r25	; 0x801447 <__flp+0x1>
    8a10:	80 93 46 14 	sts	0x1446, r24	; 0x801446 <__flp>
    8a14:	fe 01       	movw	r30, r28
    8a16:	32 96       	adiw	r30, 0x02	; 2
    8a18:	44 c0       	rjmp	.+136    	; 0x8aa2 <malloc+0x124>
    8a1a:	fe 01       	movw	r30, r28
    8a1c:	e2 0f       	add	r30, r18
    8a1e:	f3 1f       	adc	r31, r19
    8a20:	81 93       	st	Z+, r24
    8a22:	91 93       	st	Z+, r25
    8a24:	22 50       	subi	r18, 0x02	; 2
    8a26:	31 09       	sbc	r19, r1
    8a28:	39 83       	std	Y+1, r19	; 0x01
    8a2a:	28 83       	st	Y, r18
    8a2c:	3a c0       	rjmp	.+116    	; 0x8aa2 <malloc+0x124>
    8a2e:	20 91 44 14 	lds	r18, 0x1444	; 0x801444 <__brkval>
    8a32:	30 91 45 14 	lds	r19, 0x1445	; 0x801445 <__brkval+0x1>
    8a36:	23 2b       	or	r18, r19
    8a38:	41 f4       	brne	.+16     	; 0x8a4a <malloc+0xcc>
    8a3a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    8a3e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    8a42:	30 93 45 14 	sts	0x1445, r19	; 0x801445 <__brkval+0x1>
    8a46:	20 93 44 14 	sts	0x1444, r18	; 0x801444 <__brkval>
    8a4a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    8a4e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    8a52:	21 15       	cp	r18, r1
    8a54:	31 05       	cpc	r19, r1
    8a56:	41 f4       	brne	.+16     	; 0x8a68 <malloc+0xea>
    8a58:	2d b7       	in	r18, 0x3d	; 61
    8a5a:	3e b7       	in	r19, 0x3e	; 62
    8a5c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    8a60:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    8a64:	24 1b       	sub	r18, r20
    8a66:	35 0b       	sbc	r19, r21
    8a68:	e0 91 44 14 	lds	r30, 0x1444	; 0x801444 <__brkval>
    8a6c:	f0 91 45 14 	lds	r31, 0x1445	; 0x801445 <__brkval+0x1>
    8a70:	e2 17       	cp	r30, r18
    8a72:	f3 07       	cpc	r31, r19
    8a74:	a0 f4       	brcc	.+40     	; 0x8a9e <malloc+0x120>
    8a76:	2e 1b       	sub	r18, r30
    8a78:	3f 0b       	sbc	r19, r31
    8a7a:	28 17       	cp	r18, r24
    8a7c:	39 07       	cpc	r19, r25
    8a7e:	78 f0       	brcs	.+30     	; 0x8a9e <malloc+0x120>
    8a80:	ac 01       	movw	r20, r24
    8a82:	4e 5f       	subi	r20, 0xFE	; 254
    8a84:	5f 4f       	sbci	r21, 0xFF	; 255
    8a86:	24 17       	cp	r18, r20
    8a88:	35 07       	cpc	r19, r21
    8a8a:	48 f0       	brcs	.+18     	; 0x8a9e <malloc+0x120>
    8a8c:	4e 0f       	add	r20, r30
    8a8e:	5f 1f       	adc	r21, r31
    8a90:	50 93 45 14 	sts	0x1445, r21	; 0x801445 <__brkval+0x1>
    8a94:	40 93 44 14 	sts	0x1444, r20	; 0x801444 <__brkval>
    8a98:	81 93       	st	Z+, r24
    8a9a:	91 93       	st	Z+, r25
    8a9c:	02 c0       	rjmp	.+4      	; 0x8aa2 <malloc+0x124>
    8a9e:	e0 e0       	ldi	r30, 0x00	; 0
    8aa0:	f0 e0       	ldi	r31, 0x00	; 0
    8aa2:	cf 01       	movw	r24, r30
    8aa4:	df 91       	pop	r29
    8aa6:	cf 91       	pop	r28
    8aa8:	1f 91       	pop	r17
    8aaa:	0f 91       	pop	r16
    8aac:	08 95       	ret

00008aae <free>:
    8aae:	cf 93       	push	r28
    8ab0:	df 93       	push	r29
    8ab2:	00 97       	sbiw	r24, 0x00	; 0
    8ab4:	09 f4       	brne	.+2      	; 0x8ab8 <free+0xa>
    8ab6:	81 c0       	rjmp	.+258    	; 0x8bba <free+0x10c>
    8ab8:	fc 01       	movw	r30, r24
    8aba:	32 97       	sbiw	r30, 0x02	; 2
    8abc:	13 82       	std	Z+3, r1	; 0x03
    8abe:	12 82       	std	Z+2, r1	; 0x02
    8ac0:	a0 91 46 14 	lds	r26, 0x1446	; 0x801446 <__flp>
    8ac4:	b0 91 47 14 	lds	r27, 0x1447	; 0x801447 <__flp+0x1>
    8ac8:	10 97       	sbiw	r26, 0x00	; 0
    8aca:	81 f4       	brne	.+32     	; 0x8aec <free+0x3e>
    8acc:	20 81       	ld	r18, Z
    8ace:	31 81       	ldd	r19, Z+1	; 0x01
    8ad0:	82 0f       	add	r24, r18
    8ad2:	93 1f       	adc	r25, r19
    8ad4:	20 91 44 14 	lds	r18, 0x1444	; 0x801444 <__brkval>
    8ad8:	30 91 45 14 	lds	r19, 0x1445	; 0x801445 <__brkval+0x1>
    8adc:	28 17       	cp	r18, r24
    8ade:	39 07       	cpc	r19, r25
    8ae0:	51 f5       	brne	.+84     	; 0x8b36 <free+0x88>
    8ae2:	f0 93 45 14 	sts	0x1445, r31	; 0x801445 <__brkval+0x1>
    8ae6:	e0 93 44 14 	sts	0x1444, r30	; 0x801444 <__brkval>
    8aea:	67 c0       	rjmp	.+206    	; 0x8bba <free+0x10c>
    8aec:	ed 01       	movw	r28, r26
    8aee:	20 e0       	ldi	r18, 0x00	; 0
    8af0:	30 e0       	ldi	r19, 0x00	; 0
    8af2:	ce 17       	cp	r28, r30
    8af4:	df 07       	cpc	r29, r31
    8af6:	40 f4       	brcc	.+16     	; 0x8b08 <free+0x5a>
    8af8:	4a 81       	ldd	r20, Y+2	; 0x02
    8afa:	5b 81       	ldd	r21, Y+3	; 0x03
    8afc:	9e 01       	movw	r18, r28
    8afe:	41 15       	cp	r20, r1
    8b00:	51 05       	cpc	r21, r1
    8b02:	f1 f0       	breq	.+60     	; 0x8b40 <free+0x92>
    8b04:	ea 01       	movw	r28, r20
    8b06:	f5 cf       	rjmp	.-22     	; 0x8af2 <free+0x44>
    8b08:	d3 83       	std	Z+3, r29	; 0x03
    8b0a:	c2 83       	std	Z+2, r28	; 0x02
    8b0c:	40 81       	ld	r20, Z
    8b0e:	51 81       	ldd	r21, Z+1	; 0x01
    8b10:	84 0f       	add	r24, r20
    8b12:	95 1f       	adc	r25, r21
    8b14:	c8 17       	cp	r28, r24
    8b16:	d9 07       	cpc	r29, r25
    8b18:	59 f4       	brne	.+22     	; 0x8b30 <free+0x82>
    8b1a:	88 81       	ld	r24, Y
    8b1c:	99 81       	ldd	r25, Y+1	; 0x01
    8b1e:	84 0f       	add	r24, r20
    8b20:	95 1f       	adc	r25, r21
    8b22:	02 96       	adiw	r24, 0x02	; 2
    8b24:	91 83       	std	Z+1, r25	; 0x01
    8b26:	80 83       	st	Z, r24
    8b28:	8a 81       	ldd	r24, Y+2	; 0x02
    8b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    8b2c:	93 83       	std	Z+3, r25	; 0x03
    8b2e:	82 83       	std	Z+2, r24	; 0x02
    8b30:	21 15       	cp	r18, r1
    8b32:	31 05       	cpc	r19, r1
    8b34:	29 f4       	brne	.+10     	; 0x8b40 <free+0x92>
    8b36:	f0 93 47 14 	sts	0x1447, r31	; 0x801447 <__flp+0x1>
    8b3a:	e0 93 46 14 	sts	0x1446, r30	; 0x801446 <__flp>
    8b3e:	3d c0       	rjmp	.+122    	; 0x8bba <free+0x10c>
    8b40:	e9 01       	movw	r28, r18
    8b42:	fb 83       	std	Y+3, r31	; 0x03
    8b44:	ea 83       	std	Y+2, r30	; 0x02
    8b46:	49 91       	ld	r20, Y+
    8b48:	59 91       	ld	r21, Y+
    8b4a:	c4 0f       	add	r28, r20
    8b4c:	d5 1f       	adc	r29, r21
    8b4e:	ec 17       	cp	r30, r28
    8b50:	fd 07       	cpc	r31, r29
    8b52:	61 f4       	brne	.+24     	; 0x8b6c <free+0xbe>
    8b54:	80 81       	ld	r24, Z
    8b56:	91 81       	ldd	r25, Z+1	; 0x01
    8b58:	84 0f       	add	r24, r20
    8b5a:	95 1f       	adc	r25, r21
    8b5c:	02 96       	adiw	r24, 0x02	; 2
    8b5e:	e9 01       	movw	r28, r18
    8b60:	99 83       	std	Y+1, r25	; 0x01
    8b62:	88 83       	st	Y, r24
    8b64:	82 81       	ldd	r24, Z+2	; 0x02
    8b66:	93 81       	ldd	r25, Z+3	; 0x03
    8b68:	9b 83       	std	Y+3, r25	; 0x03
    8b6a:	8a 83       	std	Y+2, r24	; 0x02
    8b6c:	e0 e0       	ldi	r30, 0x00	; 0
    8b6e:	f0 e0       	ldi	r31, 0x00	; 0
    8b70:	12 96       	adiw	r26, 0x02	; 2
    8b72:	8d 91       	ld	r24, X+
    8b74:	9c 91       	ld	r25, X
    8b76:	13 97       	sbiw	r26, 0x03	; 3
    8b78:	00 97       	sbiw	r24, 0x00	; 0
    8b7a:	19 f0       	breq	.+6      	; 0x8b82 <free+0xd4>
    8b7c:	fd 01       	movw	r30, r26
    8b7e:	dc 01       	movw	r26, r24
    8b80:	f7 cf       	rjmp	.-18     	; 0x8b70 <free+0xc2>
    8b82:	8d 91       	ld	r24, X+
    8b84:	9c 91       	ld	r25, X
    8b86:	11 97       	sbiw	r26, 0x01	; 1
    8b88:	9d 01       	movw	r18, r26
    8b8a:	2e 5f       	subi	r18, 0xFE	; 254
    8b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    8b8e:	82 0f       	add	r24, r18
    8b90:	93 1f       	adc	r25, r19
    8b92:	20 91 44 14 	lds	r18, 0x1444	; 0x801444 <__brkval>
    8b96:	30 91 45 14 	lds	r19, 0x1445	; 0x801445 <__brkval+0x1>
    8b9a:	28 17       	cp	r18, r24
    8b9c:	39 07       	cpc	r19, r25
    8b9e:	69 f4       	brne	.+26     	; 0x8bba <free+0x10c>
    8ba0:	30 97       	sbiw	r30, 0x00	; 0
    8ba2:	29 f4       	brne	.+10     	; 0x8bae <free+0x100>
    8ba4:	10 92 47 14 	sts	0x1447, r1	; 0x801447 <__flp+0x1>
    8ba8:	10 92 46 14 	sts	0x1446, r1	; 0x801446 <__flp>
    8bac:	02 c0       	rjmp	.+4      	; 0x8bb2 <free+0x104>
    8bae:	13 82       	std	Z+3, r1	; 0x03
    8bb0:	12 82       	std	Z+2, r1	; 0x02
    8bb2:	b0 93 45 14 	sts	0x1445, r27	; 0x801445 <__brkval+0x1>
    8bb6:	a0 93 44 14 	sts	0x1444, r26	; 0x801444 <__brkval>
    8bba:	df 91       	pop	r29
    8bbc:	cf 91       	pop	r28
    8bbe:	08 95       	ret

00008bc0 <abort>:
    8bc0:	81 e0       	ldi	r24, 0x01	; 1
    8bc2:	90 e0       	ldi	r25, 0x00	; 0
    8bc4:	f8 94       	cli
    8bc6:	7d c3       	rjmp	.+1786   	; 0x92c2 <_exit>

00008bc8 <memcpy>:
    8bc8:	fb 01       	movw	r30, r22
    8bca:	dc 01       	movw	r26, r24
    8bcc:	02 c0       	rjmp	.+4      	; 0x8bd2 <memcpy+0xa>
    8bce:	01 90       	ld	r0, Z+
    8bd0:	0d 92       	st	X+, r0
    8bd2:	41 50       	subi	r20, 0x01	; 1
    8bd4:	50 40       	sbci	r21, 0x00	; 0
    8bd6:	d8 f7       	brcc	.-10     	; 0x8bce <memcpy+0x6>
    8bd8:	08 95       	ret

00008bda <memset>:
    8bda:	dc 01       	movw	r26, r24
    8bdc:	01 c0       	rjmp	.+2      	; 0x8be0 <memset+0x6>
    8bde:	6d 93       	st	X+, r22
    8be0:	41 50       	subi	r20, 0x01	; 1
    8be2:	50 40       	sbci	r21, 0x00	; 0
    8be4:	e0 f7       	brcc	.-8      	; 0x8bde <memset+0x4>
    8be6:	08 95       	ret

00008be8 <strcasestr>:
    8be8:	fb 01       	movw	r30, r22
    8bea:	51 91       	ld	r21, Z+
    8bec:	55 23       	and	r21, r21
    8bee:	b1 f0       	breq	.+44     	; 0x8c1c <strcasestr+0x34>
    8bf0:	bf 01       	movw	r22, r30
    8bf2:	dc 01       	movw	r26, r24
    8bf4:	05 2e       	mov	r0, r21
    8bf6:	4d 91       	ld	r20, X+
    8bf8:	44 23       	and	r20, r20
    8bfa:	69 f0       	breq	.+26     	; 0x8c16 <strcasestr+0x2e>
    8bfc:	10 d0       	rcall	.+32     	; 0x8c1e <strcasestr+0x36>
    8bfe:	d9 f7       	brne	.-10     	; 0x8bf6 <strcasestr+0xe>
    8c00:	cd 01       	movw	r24, r26
    8c02:	01 90       	ld	r0, Z+
    8c04:	00 20       	and	r0, r0
    8c06:	49 f0       	breq	.+18     	; 0x8c1a <strcasestr+0x32>
    8c08:	4d 91       	ld	r20, X+
    8c0a:	41 11       	cpse	r20, r1
    8c0c:	08 d0       	rcall	.+16     	; 0x8c1e <strcasestr+0x36>
    8c0e:	c9 f3       	breq	.-14     	; 0x8c02 <strcasestr+0x1a>
    8c10:	fb 01       	movw	r30, r22
    8c12:	41 11       	cpse	r20, r1
    8c14:	ee cf       	rjmp	.-36     	; 0x8bf2 <strcasestr+0xa>
    8c16:	81 e0       	ldi	r24, 0x01	; 1
    8c18:	90 e0       	ldi	r25, 0x00	; 0
    8c1a:	01 97       	sbiw	r24, 0x01	; 1
    8c1c:	08 95       	ret
    8c1e:	40 25       	eor	r20, r0
    8c20:	39 f0       	breq	.+14     	; 0x8c30 <strcasestr+0x48>
    8c22:	40 32       	cpi	r20, 0x20	; 32
    8c24:	29 f4       	brne	.+10     	; 0x8c30 <strcasestr+0x48>
    8c26:	40 29       	or	r20, r0
    8c28:	4b 57       	subi	r20, 0x7B	; 123
    8c2a:	46 5e       	subi	r20, 0xE6	; 230
    8c2c:	08 f0       	brcs	.+2      	; 0x8c30 <strcasestr+0x48>
    8c2e:	18 94       	sez
    8c30:	08 95       	ret

00008c32 <strcat>:
    8c32:	fb 01       	movw	r30, r22
    8c34:	dc 01       	movw	r26, r24
    8c36:	0d 90       	ld	r0, X+
    8c38:	00 20       	and	r0, r0
    8c3a:	e9 f7       	brne	.-6      	; 0x8c36 <strcat+0x4>
    8c3c:	11 97       	sbiw	r26, 0x01	; 1
    8c3e:	01 90       	ld	r0, Z+
    8c40:	0d 92       	st	X+, r0
    8c42:	00 20       	and	r0, r0
    8c44:	e1 f7       	brne	.-8      	; 0x8c3e <strcat+0xc>
    8c46:	08 95       	ret

00008c48 <strcpy>:
    8c48:	fb 01       	movw	r30, r22
    8c4a:	dc 01       	movw	r26, r24
    8c4c:	01 90       	ld	r0, Z+
    8c4e:	0d 92       	st	X+, r0
    8c50:	00 20       	and	r0, r0
    8c52:	e1 f7       	brne	.-8      	; 0x8c4c <strcpy+0x4>
    8c54:	08 95       	ret

00008c56 <strncasecmp>:
    8c56:	fb 01       	movw	r30, r22
    8c58:	dc 01       	movw	r26, r24
    8c5a:	41 50       	subi	r20, 0x01	; 1
    8c5c:	50 40       	sbci	r21, 0x00	; 0
    8c5e:	88 f0       	brcs	.+34     	; 0x8c82 <strncasecmp+0x2c>
    8c60:	8d 91       	ld	r24, X+
    8c62:	81 34       	cpi	r24, 0x41	; 65
    8c64:	1c f0       	brlt	.+6      	; 0x8c6c <strncasecmp+0x16>
    8c66:	8b 35       	cpi	r24, 0x5B	; 91
    8c68:	0c f4       	brge	.+2      	; 0x8c6c <strncasecmp+0x16>
    8c6a:	80 5e       	subi	r24, 0xE0	; 224
    8c6c:	61 91       	ld	r22, Z+
    8c6e:	61 34       	cpi	r22, 0x41	; 65
    8c70:	1c f0       	brlt	.+6      	; 0x8c78 <strncasecmp+0x22>
    8c72:	6b 35       	cpi	r22, 0x5B	; 91
    8c74:	0c f4       	brge	.+2      	; 0x8c78 <strncasecmp+0x22>
    8c76:	60 5e       	subi	r22, 0xE0	; 224
    8c78:	86 1b       	sub	r24, r22
    8c7a:	61 11       	cpse	r22, r1
    8c7c:	71 f3       	breq	.-36     	; 0x8c5a <strncasecmp+0x4>
    8c7e:	99 0b       	sbc	r25, r25
    8c80:	08 95       	ret
    8c82:	88 1b       	sub	r24, r24
    8c84:	fc cf       	rjmp	.-8      	; 0x8c7e <strncasecmp+0x28>

00008c86 <printf>:
    8c86:	cf 93       	push	r28
    8c88:	df 93       	push	r29
    8c8a:	cd b7       	in	r28, 0x3d	; 61
    8c8c:	de b7       	in	r29, 0x3e	; 62
    8c8e:	ae 01       	movw	r20, r28
    8c90:	4a 5f       	subi	r20, 0xFA	; 250
    8c92:	5f 4f       	sbci	r21, 0xFF	; 255
    8c94:	fa 01       	movw	r30, r20
    8c96:	61 91       	ld	r22, Z+
    8c98:	71 91       	ld	r23, Z+
    8c9a:	af 01       	movw	r20, r30
    8c9c:	80 91 4a 14 	lds	r24, 0x144A	; 0x80144a <__iob+0x2>
    8ca0:	90 91 4b 14 	lds	r25, 0x144B	; 0x80144b <__iob+0x3>
    8ca4:	61 d0       	rcall	.+194    	; 0x8d68 <vfprintf>
    8ca6:	df 91       	pop	r29
    8ca8:	cf 91       	pop	r28
    8caa:	08 95       	ret

00008cac <puts>:
    8cac:	0f 93       	push	r16
    8cae:	1f 93       	push	r17
    8cb0:	cf 93       	push	r28
    8cb2:	df 93       	push	r29
    8cb4:	e0 91 4a 14 	lds	r30, 0x144A	; 0x80144a <__iob+0x2>
    8cb8:	f0 91 4b 14 	lds	r31, 0x144B	; 0x80144b <__iob+0x3>
    8cbc:	23 81       	ldd	r18, Z+3	; 0x03
    8cbe:	21 ff       	sbrs	r18, 1
    8cc0:	1b c0       	rjmp	.+54     	; 0x8cf8 <puts+0x4c>
    8cc2:	8c 01       	movw	r16, r24
    8cc4:	d0 e0       	ldi	r29, 0x00	; 0
    8cc6:	c0 e0       	ldi	r28, 0x00	; 0
    8cc8:	f8 01       	movw	r30, r16
    8cca:	81 91       	ld	r24, Z+
    8ccc:	8f 01       	movw	r16, r30
    8cce:	60 91 4a 14 	lds	r22, 0x144A	; 0x80144a <__iob+0x2>
    8cd2:	70 91 4b 14 	lds	r23, 0x144B	; 0x80144b <__iob+0x3>
    8cd6:	db 01       	movw	r26, r22
    8cd8:	18 96       	adiw	r26, 0x08	; 8
    8cda:	ed 91       	ld	r30, X+
    8cdc:	fc 91       	ld	r31, X
    8cde:	19 97       	sbiw	r26, 0x09	; 9
    8ce0:	88 23       	and	r24, r24
    8ce2:	31 f0       	breq	.+12     	; 0x8cf0 <puts+0x44>
    8ce4:	19 95       	eicall
    8ce6:	89 2b       	or	r24, r25
    8ce8:	79 f3       	breq	.-34     	; 0x8cc8 <puts+0x1c>
    8cea:	df ef       	ldi	r29, 0xFF	; 255
    8cec:	cf ef       	ldi	r28, 0xFF	; 255
    8cee:	ec cf       	rjmp	.-40     	; 0x8cc8 <puts+0x1c>
    8cf0:	8a e0       	ldi	r24, 0x0A	; 10
    8cf2:	19 95       	eicall
    8cf4:	89 2b       	or	r24, r25
    8cf6:	19 f0       	breq	.+6      	; 0x8cfe <puts+0x52>
    8cf8:	8f ef       	ldi	r24, 0xFF	; 255
    8cfa:	9f ef       	ldi	r25, 0xFF	; 255
    8cfc:	02 c0       	rjmp	.+4      	; 0x8d02 <puts+0x56>
    8cfe:	8d 2f       	mov	r24, r29
    8d00:	9c 2f       	mov	r25, r28
    8d02:	df 91       	pop	r29
    8d04:	cf 91       	pop	r28
    8d06:	1f 91       	pop	r17
    8d08:	0f 91       	pop	r16
    8d0a:	08 95       	ret

00008d0c <sprintf>:
    8d0c:	0f 93       	push	r16
    8d0e:	1f 93       	push	r17
    8d10:	cf 93       	push	r28
    8d12:	df 93       	push	r29
    8d14:	cd b7       	in	r28, 0x3d	; 61
    8d16:	de b7       	in	r29, 0x3e	; 62
    8d18:	2e 97       	sbiw	r28, 0x0e	; 14
    8d1a:	0f b6       	in	r0, 0x3f	; 63
    8d1c:	f8 94       	cli
    8d1e:	de bf       	out	0x3e, r29	; 62
    8d20:	0f be       	out	0x3f, r0	; 63
    8d22:	cd bf       	out	0x3d, r28	; 61
    8d24:	0e 89       	ldd	r16, Y+22	; 0x16
    8d26:	1f 89       	ldd	r17, Y+23	; 0x17
    8d28:	86 e0       	ldi	r24, 0x06	; 6
    8d2a:	8c 83       	std	Y+4, r24	; 0x04
    8d2c:	1a 83       	std	Y+2, r17	; 0x02
    8d2e:	09 83       	std	Y+1, r16	; 0x01
    8d30:	8f ef       	ldi	r24, 0xFF	; 255
    8d32:	9f e7       	ldi	r25, 0x7F	; 127
    8d34:	9e 83       	std	Y+6, r25	; 0x06
    8d36:	8d 83       	std	Y+5, r24	; 0x05
    8d38:	ae 01       	movw	r20, r28
    8d3a:	46 5e       	subi	r20, 0xE6	; 230
    8d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    8d3e:	68 8d       	ldd	r22, Y+24	; 0x18
    8d40:	79 8d       	ldd	r23, Y+25	; 0x19
    8d42:	ce 01       	movw	r24, r28
    8d44:	01 96       	adiw	r24, 0x01	; 1
    8d46:	10 d0       	rcall	.+32     	; 0x8d68 <vfprintf>
    8d48:	ef 81       	ldd	r30, Y+7	; 0x07
    8d4a:	f8 85       	ldd	r31, Y+8	; 0x08
    8d4c:	e0 0f       	add	r30, r16
    8d4e:	f1 1f       	adc	r31, r17
    8d50:	10 82       	st	Z, r1
    8d52:	2e 96       	adiw	r28, 0x0e	; 14
    8d54:	0f b6       	in	r0, 0x3f	; 63
    8d56:	f8 94       	cli
    8d58:	de bf       	out	0x3e, r29	; 62
    8d5a:	0f be       	out	0x3f, r0	; 63
    8d5c:	cd bf       	out	0x3d, r28	; 61
    8d5e:	df 91       	pop	r29
    8d60:	cf 91       	pop	r28
    8d62:	1f 91       	pop	r17
    8d64:	0f 91       	pop	r16
    8d66:	08 95       	ret

00008d68 <vfprintf>:
    8d68:	2f 92       	push	r2
    8d6a:	3f 92       	push	r3
    8d6c:	4f 92       	push	r4
    8d6e:	5f 92       	push	r5
    8d70:	6f 92       	push	r6
    8d72:	7f 92       	push	r7
    8d74:	8f 92       	push	r8
    8d76:	9f 92       	push	r9
    8d78:	af 92       	push	r10
    8d7a:	bf 92       	push	r11
    8d7c:	cf 92       	push	r12
    8d7e:	df 92       	push	r13
    8d80:	ef 92       	push	r14
    8d82:	ff 92       	push	r15
    8d84:	0f 93       	push	r16
    8d86:	1f 93       	push	r17
    8d88:	cf 93       	push	r28
    8d8a:	df 93       	push	r29
    8d8c:	cd b7       	in	r28, 0x3d	; 61
    8d8e:	de b7       	in	r29, 0x3e	; 62
    8d90:	2b 97       	sbiw	r28, 0x0b	; 11
    8d92:	0f b6       	in	r0, 0x3f	; 63
    8d94:	f8 94       	cli
    8d96:	de bf       	out	0x3e, r29	; 62
    8d98:	0f be       	out	0x3f, r0	; 63
    8d9a:	cd bf       	out	0x3d, r28	; 61
    8d9c:	6c 01       	movw	r12, r24
    8d9e:	7b 01       	movw	r14, r22
    8da0:	8a 01       	movw	r16, r20
    8da2:	fc 01       	movw	r30, r24
    8da4:	17 82       	std	Z+7, r1	; 0x07
    8da6:	16 82       	std	Z+6, r1	; 0x06
    8da8:	83 81       	ldd	r24, Z+3	; 0x03
    8daa:	81 ff       	sbrs	r24, 1
    8dac:	bf c1       	rjmp	.+894    	; 0x912c <vfprintf+0x3c4>
    8dae:	ce 01       	movw	r24, r28
    8db0:	01 96       	adiw	r24, 0x01	; 1
    8db2:	3c 01       	movw	r6, r24
    8db4:	f6 01       	movw	r30, r12
    8db6:	93 81       	ldd	r25, Z+3	; 0x03
    8db8:	f7 01       	movw	r30, r14
    8dba:	93 fd       	sbrc	r25, 3
    8dbc:	85 91       	lpm	r24, Z+
    8dbe:	93 ff       	sbrs	r25, 3
    8dc0:	81 91       	ld	r24, Z+
    8dc2:	7f 01       	movw	r14, r30
    8dc4:	88 23       	and	r24, r24
    8dc6:	09 f4       	brne	.+2      	; 0x8dca <vfprintf+0x62>
    8dc8:	ad c1       	rjmp	.+858    	; 0x9124 <vfprintf+0x3bc>
    8dca:	85 32       	cpi	r24, 0x25	; 37
    8dcc:	39 f4       	brne	.+14     	; 0x8ddc <vfprintf+0x74>
    8dce:	93 fd       	sbrc	r25, 3
    8dd0:	85 91       	lpm	r24, Z+
    8dd2:	93 ff       	sbrs	r25, 3
    8dd4:	81 91       	ld	r24, Z+
    8dd6:	7f 01       	movw	r14, r30
    8dd8:	85 32       	cpi	r24, 0x25	; 37
    8dda:	21 f4       	brne	.+8      	; 0x8de4 <vfprintf+0x7c>
    8ddc:	b6 01       	movw	r22, r12
    8dde:	90 e0       	ldi	r25, 0x00	; 0
    8de0:	d6 d1       	rcall	.+940    	; 0x918e <fputc>
    8de2:	e8 cf       	rjmp	.-48     	; 0x8db4 <vfprintf+0x4c>
    8de4:	91 2c       	mov	r9, r1
    8de6:	21 2c       	mov	r2, r1
    8de8:	31 2c       	mov	r3, r1
    8dea:	ff e1       	ldi	r31, 0x1F	; 31
    8dec:	f3 15       	cp	r31, r3
    8dee:	d8 f0       	brcs	.+54     	; 0x8e26 <vfprintf+0xbe>
    8df0:	8b 32       	cpi	r24, 0x2B	; 43
    8df2:	79 f0       	breq	.+30     	; 0x8e12 <vfprintf+0xaa>
    8df4:	38 f4       	brcc	.+14     	; 0x8e04 <vfprintf+0x9c>
    8df6:	80 32       	cpi	r24, 0x20	; 32
    8df8:	79 f0       	breq	.+30     	; 0x8e18 <vfprintf+0xb0>
    8dfa:	83 32       	cpi	r24, 0x23	; 35
    8dfc:	a1 f4       	brne	.+40     	; 0x8e26 <vfprintf+0xbe>
    8dfe:	23 2d       	mov	r18, r3
    8e00:	20 61       	ori	r18, 0x10	; 16
    8e02:	1d c0       	rjmp	.+58     	; 0x8e3e <vfprintf+0xd6>
    8e04:	8d 32       	cpi	r24, 0x2D	; 45
    8e06:	61 f0       	breq	.+24     	; 0x8e20 <vfprintf+0xb8>
    8e08:	80 33       	cpi	r24, 0x30	; 48
    8e0a:	69 f4       	brne	.+26     	; 0x8e26 <vfprintf+0xbe>
    8e0c:	23 2d       	mov	r18, r3
    8e0e:	21 60       	ori	r18, 0x01	; 1
    8e10:	16 c0       	rjmp	.+44     	; 0x8e3e <vfprintf+0xd6>
    8e12:	83 2d       	mov	r24, r3
    8e14:	82 60       	ori	r24, 0x02	; 2
    8e16:	38 2e       	mov	r3, r24
    8e18:	e3 2d       	mov	r30, r3
    8e1a:	e4 60       	ori	r30, 0x04	; 4
    8e1c:	3e 2e       	mov	r3, r30
    8e1e:	2a c0       	rjmp	.+84     	; 0x8e74 <vfprintf+0x10c>
    8e20:	f3 2d       	mov	r31, r3
    8e22:	f8 60       	ori	r31, 0x08	; 8
    8e24:	1d c0       	rjmp	.+58     	; 0x8e60 <vfprintf+0xf8>
    8e26:	37 fc       	sbrc	r3, 7
    8e28:	2d c0       	rjmp	.+90     	; 0x8e84 <vfprintf+0x11c>
    8e2a:	20 ed       	ldi	r18, 0xD0	; 208
    8e2c:	28 0f       	add	r18, r24
    8e2e:	2a 30       	cpi	r18, 0x0A	; 10
    8e30:	40 f0       	brcs	.+16     	; 0x8e42 <vfprintf+0xda>
    8e32:	8e 32       	cpi	r24, 0x2E	; 46
    8e34:	b9 f4       	brne	.+46     	; 0x8e64 <vfprintf+0xfc>
    8e36:	36 fc       	sbrc	r3, 6
    8e38:	75 c1       	rjmp	.+746    	; 0x9124 <vfprintf+0x3bc>
    8e3a:	23 2d       	mov	r18, r3
    8e3c:	20 64       	ori	r18, 0x40	; 64
    8e3e:	32 2e       	mov	r3, r18
    8e40:	19 c0       	rjmp	.+50     	; 0x8e74 <vfprintf+0x10c>
    8e42:	36 fe       	sbrs	r3, 6
    8e44:	06 c0       	rjmp	.+12     	; 0x8e52 <vfprintf+0xea>
    8e46:	8a e0       	ldi	r24, 0x0A	; 10
    8e48:	98 9e       	mul	r9, r24
    8e4a:	20 0d       	add	r18, r0
    8e4c:	11 24       	eor	r1, r1
    8e4e:	92 2e       	mov	r9, r18
    8e50:	11 c0       	rjmp	.+34     	; 0x8e74 <vfprintf+0x10c>
    8e52:	ea e0       	ldi	r30, 0x0A	; 10
    8e54:	2e 9e       	mul	r2, r30
    8e56:	20 0d       	add	r18, r0
    8e58:	11 24       	eor	r1, r1
    8e5a:	22 2e       	mov	r2, r18
    8e5c:	f3 2d       	mov	r31, r3
    8e5e:	f0 62       	ori	r31, 0x20	; 32
    8e60:	3f 2e       	mov	r3, r31
    8e62:	08 c0       	rjmp	.+16     	; 0x8e74 <vfprintf+0x10c>
    8e64:	8c 36       	cpi	r24, 0x6C	; 108
    8e66:	21 f4       	brne	.+8      	; 0x8e70 <vfprintf+0x108>
    8e68:	83 2d       	mov	r24, r3
    8e6a:	80 68       	ori	r24, 0x80	; 128
    8e6c:	38 2e       	mov	r3, r24
    8e6e:	02 c0       	rjmp	.+4      	; 0x8e74 <vfprintf+0x10c>
    8e70:	88 36       	cpi	r24, 0x68	; 104
    8e72:	41 f4       	brne	.+16     	; 0x8e84 <vfprintf+0x11c>
    8e74:	f7 01       	movw	r30, r14
    8e76:	93 fd       	sbrc	r25, 3
    8e78:	85 91       	lpm	r24, Z+
    8e7a:	93 ff       	sbrs	r25, 3
    8e7c:	81 91       	ld	r24, Z+
    8e7e:	7f 01       	movw	r14, r30
    8e80:	81 11       	cpse	r24, r1
    8e82:	b3 cf       	rjmp	.-154    	; 0x8dea <vfprintf+0x82>
    8e84:	98 2f       	mov	r25, r24
    8e86:	9f 7d       	andi	r25, 0xDF	; 223
    8e88:	95 54       	subi	r25, 0x45	; 69
    8e8a:	93 30       	cpi	r25, 0x03	; 3
    8e8c:	28 f4       	brcc	.+10     	; 0x8e98 <vfprintf+0x130>
    8e8e:	0c 5f       	subi	r16, 0xFC	; 252
    8e90:	1f 4f       	sbci	r17, 0xFF	; 255
    8e92:	9f e3       	ldi	r25, 0x3F	; 63
    8e94:	99 83       	std	Y+1, r25	; 0x01
    8e96:	0d c0       	rjmp	.+26     	; 0x8eb2 <vfprintf+0x14a>
    8e98:	83 36       	cpi	r24, 0x63	; 99
    8e9a:	31 f0       	breq	.+12     	; 0x8ea8 <vfprintf+0x140>
    8e9c:	83 37       	cpi	r24, 0x73	; 115
    8e9e:	71 f0       	breq	.+28     	; 0x8ebc <vfprintf+0x154>
    8ea0:	83 35       	cpi	r24, 0x53	; 83
    8ea2:	09 f0       	breq	.+2      	; 0x8ea6 <vfprintf+0x13e>
    8ea4:	55 c0       	rjmp	.+170    	; 0x8f50 <vfprintf+0x1e8>
    8ea6:	20 c0       	rjmp	.+64     	; 0x8ee8 <vfprintf+0x180>
    8ea8:	f8 01       	movw	r30, r16
    8eaa:	80 81       	ld	r24, Z
    8eac:	89 83       	std	Y+1, r24	; 0x01
    8eae:	0e 5f       	subi	r16, 0xFE	; 254
    8eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    8eb2:	88 24       	eor	r8, r8
    8eb4:	83 94       	inc	r8
    8eb6:	91 2c       	mov	r9, r1
    8eb8:	53 01       	movw	r10, r6
    8eba:	12 c0       	rjmp	.+36     	; 0x8ee0 <vfprintf+0x178>
    8ebc:	28 01       	movw	r4, r16
    8ebe:	f2 e0       	ldi	r31, 0x02	; 2
    8ec0:	4f 0e       	add	r4, r31
    8ec2:	51 1c       	adc	r5, r1
    8ec4:	f8 01       	movw	r30, r16
    8ec6:	a0 80       	ld	r10, Z
    8ec8:	b1 80       	ldd	r11, Z+1	; 0x01
    8eca:	36 fe       	sbrs	r3, 6
    8ecc:	03 c0       	rjmp	.+6      	; 0x8ed4 <vfprintf+0x16c>
    8ece:	69 2d       	mov	r22, r9
    8ed0:	70 e0       	ldi	r23, 0x00	; 0
    8ed2:	02 c0       	rjmp	.+4      	; 0x8ed8 <vfprintf+0x170>
    8ed4:	6f ef       	ldi	r22, 0xFF	; 255
    8ed6:	7f ef       	ldi	r23, 0xFF	; 255
    8ed8:	c5 01       	movw	r24, r10
    8eda:	4e d1       	rcall	.+668    	; 0x9178 <strnlen>
    8edc:	4c 01       	movw	r8, r24
    8ede:	82 01       	movw	r16, r4
    8ee0:	f3 2d       	mov	r31, r3
    8ee2:	ff 77       	andi	r31, 0x7F	; 127
    8ee4:	3f 2e       	mov	r3, r31
    8ee6:	15 c0       	rjmp	.+42     	; 0x8f12 <vfprintf+0x1aa>
    8ee8:	28 01       	movw	r4, r16
    8eea:	22 e0       	ldi	r18, 0x02	; 2
    8eec:	42 0e       	add	r4, r18
    8eee:	51 1c       	adc	r5, r1
    8ef0:	f8 01       	movw	r30, r16
    8ef2:	a0 80       	ld	r10, Z
    8ef4:	b1 80       	ldd	r11, Z+1	; 0x01
    8ef6:	36 fe       	sbrs	r3, 6
    8ef8:	03 c0       	rjmp	.+6      	; 0x8f00 <vfprintf+0x198>
    8efa:	69 2d       	mov	r22, r9
    8efc:	70 e0       	ldi	r23, 0x00	; 0
    8efe:	02 c0       	rjmp	.+4      	; 0x8f04 <vfprintf+0x19c>
    8f00:	6f ef       	ldi	r22, 0xFF	; 255
    8f02:	7f ef       	ldi	r23, 0xFF	; 255
    8f04:	c5 01       	movw	r24, r10
    8f06:	2d d1       	rcall	.+602    	; 0x9162 <strnlen_P>
    8f08:	4c 01       	movw	r8, r24
    8f0a:	f3 2d       	mov	r31, r3
    8f0c:	f0 68       	ori	r31, 0x80	; 128
    8f0e:	3f 2e       	mov	r3, r31
    8f10:	82 01       	movw	r16, r4
    8f12:	33 fc       	sbrc	r3, 3
    8f14:	19 c0       	rjmp	.+50     	; 0x8f48 <vfprintf+0x1e0>
    8f16:	82 2d       	mov	r24, r2
    8f18:	90 e0       	ldi	r25, 0x00	; 0
    8f1a:	88 16       	cp	r8, r24
    8f1c:	99 06       	cpc	r9, r25
    8f1e:	a0 f4       	brcc	.+40     	; 0x8f48 <vfprintf+0x1e0>
    8f20:	b6 01       	movw	r22, r12
    8f22:	80 e2       	ldi	r24, 0x20	; 32
    8f24:	90 e0       	ldi	r25, 0x00	; 0
    8f26:	33 d1       	rcall	.+614    	; 0x918e <fputc>
    8f28:	2a 94       	dec	r2
    8f2a:	f5 cf       	rjmp	.-22     	; 0x8f16 <vfprintf+0x1ae>
    8f2c:	f5 01       	movw	r30, r10
    8f2e:	37 fc       	sbrc	r3, 7
    8f30:	85 91       	lpm	r24, Z+
    8f32:	37 fe       	sbrs	r3, 7
    8f34:	81 91       	ld	r24, Z+
    8f36:	5f 01       	movw	r10, r30
    8f38:	b6 01       	movw	r22, r12
    8f3a:	90 e0       	ldi	r25, 0x00	; 0
    8f3c:	28 d1       	rcall	.+592    	; 0x918e <fputc>
    8f3e:	21 10       	cpse	r2, r1
    8f40:	2a 94       	dec	r2
    8f42:	21 e0       	ldi	r18, 0x01	; 1
    8f44:	82 1a       	sub	r8, r18
    8f46:	91 08       	sbc	r9, r1
    8f48:	81 14       	cp	r8, r1
    8f4a:	91 04       	cpc	r9, r1
    8f4c:	79 f7       	brne	.-34     	; 0x8f2c <vfprintf+0x1c4>
    8f4e:	e1 c0       	rjmp	.+450    	; 0x9112 <vfprintf+0x3aa>
    8f50:	84 36       	cpi	r24, 0x64	; 100
    8f52:	11 f0       	breq	.+4      	; 0x8f58 <vfprintf+0x1f0>
    8f54:	89 36       	cpi	r24, 0x69	; 105
    8f56:	39 f5       	brne	.+78     	; 0x8fa6 <vfprintf+0x23e>
    8f58:	f8 01       	movw	r30, r16
    8f5a:	37 fe       	sbrs	r3, 7
    8f5c:	07 c0       	rjmp	.+14     	; 0x8f6c <vfprintf+0x204>
    8f5e:	60 81       	ld	r22, Z
    8f60:	71 81       	ldd	r23, Z+1	; 0x01
    8f62:	82 81       	ldd	r24, Z+2	; 0x02
    8f64:	93 81       	ldd	r25, Z+3	; 0x03
    8f66:	0c 5f       	subi	r16, 0xFC	; 252
    8f68:	1f 4f       	sbci	r17, 0xFF	; 255
    8f6a:	08 c0       	rjmp	.+16     	; 0x8f7c <vfprintf+0x214>
    8f6c:	60 81       	ld	r22, Z
    8f6e:	71 81       	ldd	r23, Z+1	; 0x01
    8f70:	07 2e       	mov	r0, r23
    8f72:	00 0c       	add	r0, r0
    8f74:	88 0b       	sbc	r24, r24
    8f76:	99 0b       	sbc	r25, r25
    8f78:	0e 5f       	subi	r16, 0xFE	; 254
    8f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    8f7c:	f3 2d       	mov	r31, r3
    8f7e:	ff 76       	andi	r31, 0x6F	; 111
    8f80:	3f 2e       	mov	r3, r31
    8f82:	97 ff       	sbrs	r25, 7
    8f84:	09 c0       	rjmp	.+18     	; 0x8f98 <vfprintf+0x230>
    8f86:	90 95       	com	r25
    8f88:	80 95       	com	r24
    8f8a:	70 95       	com	r23
    8f8c:	61 95       	neg	r22
    8f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    8f90:	8f 4f       	sbci	r24, 0xFF	; 255
    8f92:	9f 4f       	sbci	r25, 0xFF	; 255
    8f94:	f0 68       	ori	r31, 0x80	; 128
    8f96:	3f 2e       	mov	r3, r31
    8f98:	2a e0       	ldi	r18, 0x0A	; 10
    8f9a:	30 e0       	ldi	r19, 0x00	; 0
    8f9c:	a3 01       	movw	r20, r6
    8f9e:	33 d1       	rcall	.+614    	; 0x9206 <__ultoa_invert>
    8fa0:	88 2e       	mov	r8, r24
    8fa2:	86 18       	sub	r8, r6
    8fa4:	44 c0       	rjmp	.+136    	; 0x902e <vfprintf+0x2c6>
    8fa6:	85 37       	cpi	r24, 0x75	; 117
    8fa8:	31 f4       	brne	.+12     	; 0x8fb6 <vfprintf+0x24e>
    8faa:	23 2d       	mov	r18, r3
    8fac:	2f 7e       	andi	r18, 0xEF	; 239
    8fae:	b2 2e       	mov	r11, r18
    8fb0:	2a e0       	ldi	r18, 0x0A	; 10
    8fb2:	30 e0       	ldi	r19, 0x00	; 0
    8fb4:	25 c0       	rjmp	.+74     	; 0x9000 <vfprintf+0x298>
    8fb6:	93 2d       	mov	r25, r3
    8fb8:	99 7f       	andi	r25, 0xF9	; 249
    8fba:	b9 2e       	mov	r11, r25
    8fbc:	8f 36       	cpi	r24, 0x6F	; 111
    8fbe:	c1 f0       	breq	.+48     	; 0x8ff0 <vfprintf+0x288>
    8fc0:	18 f4       	brcc	.+6      	; 0x8fc8 <vfprintf+0x260>
    8fc2:	88 35       	cpi	r24, 0x58	; 88
    8fc4:	79 f0       	breq	.+30     	; 0x8fe4 <vfprintf+0x27c>
    8fc6:	ae c0       	rjmp	.+348    	; 0x9124 <vfprintf+0x3bc>
    8fc8:	80 37       	cpi	r24, 0x70	; 112
    8fca:	19 f0       	breq	.+6      	; 0x8fd2 <vfprintf+0x26a>
    8fcc:	88 37       	cpi	r24, 0x78	; 120
    8fce:	21 f0       	breq	.+8      	; 0x8fd8 <vfprintf+0x270>
    8fd0:	a9 c0       	rjmp	.+338    	; 0x9124 <vfprintf+0x3bc>
    8fd2:	e9 2f       	mov	r30, r25
    8fd4:	e0 61       	ori	r30, 0x10	; 16
    8fd6:	be 2e       	mov	r11, r30
    8fd8:	b4 fe       	sbrs	r11, 4
    8fda:	0d c0       	rjmp	.+26     	; 0x8ff6 <vfprintf+0x28e>
    8fdc:	fb 2d       	mov	r31, r11
    8fde:	f4 60       	ori	r31, 0x04	; 4
    8fe0:	bf 2e       	mov	r11, r31
    8fe2:	09 c0       	rjmp	.+18     	; 0x8ff6 <vfprintf+0x28e>
    8fe4:	34 fe       	sbrs	r3, 4
    8fe6:	0a c0       	rjmp	.+20     	; 0x8ffc <vfprintf+0x294>
    8fe8:	29 2f       	mov	r18, r25
    8fea:	26 60       	ori	r18, 0x06	; 6
    8fec:	b2 2e       	mov	r11, r18
    8fee:	06 c0       	rjmp	.+12     	; 0x8ffc <vfprintf+0x294>
    8ff0:	28 e0       	ldi	r18, 0x08	; 8
    8ff2:	30 e0       	ldi	r19, 0x00	; 0
    8ff4:	05 c0       	rjmp	.+10     	; 0x9000 <vfprintf+0x298>
    8ff6:	20 e1       	ldi	r18, 0x10	; 16
    8ff8:	30 e0       	ldi	r19, 0x00	; 0
    8ffa:	02 c0       	rjmp	.+4      	; 0x9000 <vfprintf+0x298>
    8ffc:	20 e1       	ldi	r18, 0x10	; 16
    8ffe:	32 e0       	ldi	r19, 0x02	; 2
    9000:	f8 01       	movw	r30, r16
    9002:	b7 fe       	sbrs	r11, 7
    9004:	07 c0       	rjmp	.+14     	; 0x9014 <vfprintf+0x2ac>
    9006:	60 81       	ld	r22, Z
    9008:	71 81       	ldd	r23, Z+1	; 0x01
    900a:	82 81       	ldd	r24, Z+2	; 0x02
    900c:	93 81       	ldd	r25, Z+3	; 0x03
    900e:	0c 5f       	subi	r16, 0xFC	; 252
    9010:	1f 4f       	sbci	r17, 0xFF	; 255
    9012:	06 c0       	rjmp	.+12     	; 0x9020 <vfprintf+0x2b8>
    9014:	60 81       	ld	r22, Z
    9016:	71 81       	ldd	r23, Z+1	; 0x01
    9018:	80 e0       	ldi	r24, 0x00	; 0
    901a:	90 e0       	ldi	r25, 0x00	; 0
    901c:	0e 5f       	subi	r16, 0xFE	; 254
    901e:	1f 4f       	sbci	r17, 0xFF	; 255
    9020:	a3 01       	movw	r20, r6
    9022:	f1 d0       	rcall	.+482    	; 0x9206 <__ultoa_invert>
    9024:	88 2e       	mov	r8, r24
    9026:	86 18       	sub	r8, r6
    9028:	fb 2d       	mov	r31, r11
    902a:	ff 77       	andi	r31, 0x7F	; 127
    902c:	3f 2e       	mov	r3, r31
    902e:	36 fe       	sbrs	r3, 6
    9030:	0d c0       	rjmp	.+26     	; 0x904c <vfprintf+0x2e4>
    9032:	23 2d       	mov	r18, r3
    9034:	2e 7f       	andi	r18, 0xFE	; 254
    9036:	a2 2e       	mov	r10, r18
    9038:	89 14       	cp	r8, r9
    903a:	58 f4       	brcc	.+22     	; 0x9052 <vfprintf+0x2ea>
    903c:	34 fe       	sbrs	r3, 4
    903e:	0b c0       	rjmp	.+22     	; 0x9056 <vfprintf+0x2ee>
    9040:	32 fc       	sbrc	r3, 2
    9042:	09 c0       	rjmp	.+18     	; 0x9056 <vfprintf+0x2ee>
    9044:	83 2d       	mov	r24, r3
    9046:	8e 7e       	andi	r24, 0xEE	; 238
    9048:	a8 2e       	mov	r10, r24
    904a:	05 c0       	rjmp	.+10     	; 0x9056 <vfprintf+0x2ee>
    904c:	b8 2c       	mov	r11, r8
    904e:	a3 2c       	mov	r10, r3
    9050:	03 c0       	rjmp	.+6      	; 0x9058 <vfprintf+0x2f0>
    9052:	b8 2c       	mov	r11, r8
    9054:	01 c0       	rjmp	.+2      	; 0x9058 <vfprintf+0x2f0>
    9056:	b9 2c       	mov	r11, r9
    9058:	a4 fe       	sbrs	r10, 4
    905a:	0f c0       	rjmp	.+30     	; 0x907a <vfprintf+0x312>
    905c:	fe 01       	movw	r30, r28
    905e:	e8 0d       	add	r30, r8
    9060:	f1 1d       	adc	r31, r1
    9062:	80 81       	ld	r24, Z
    9064:	80 33       	cpi	r24, 0x30	; 48
    9066:	21 f4       	brne	.+8      	; 0x9070 <vfprintf+0x308>
    9068:	9a 2d       	mov	r25, r10
    906a:	99 7e       	andi	r25, 0xE9	; 233
    906c:	a9 2e       	mov	r10, r25
    906e:	09 c0       	rjmp	.+18     	; 0x9082 <vfprintf+0x31a>
    9070:	a2 fe       	sbrs	r10, 2
    9072:	06 c0       	rjmp	.+12     	; 0x9080 <vfprintf+0x318>
    9074:	b3 94       	inc	r11
    9076:	b3 94       	inc	r11
    9078:	04 c0       	rjmp	.+8      	; 0x9082 <vfprintf+0x31a>
    907a:	8a 2d       	mov	r24, r10
    907c:	86 78       	andi	r24, 0x86	; 134
    907e:	09 f0       	breq	.+2      	; 0x9082 <vfprintf+0x31a>
    9080:	b3 94       	inc	r11
    9082:	a3 fc       	sbrc	r10, 3
    9084:	10 c0       	rjmp	.+32     	; 0x90a6 <vfprintf+0x33e>
    9086:	a0 fe       	sbrs	r10, 0
    9088:	06 c0       	rjmp	.+12     	; 0x9096 <vfprintf+0x32e>
    908a:	b2 14       	cp	r11, r2
    908c:	80 f4       	brcc	.+32     	; 0x90ae <vfprintf+0x346>
    908e:	28 0c       	add	r2, r8
    9090:	92 2c       	mov	r9, r2
    9092:	9b 18       	sub	r9, r11
    9094:	0d c0       	rjmp	.+26     	; 0x90b0 <vfprintf+0x348>
    9096:	b2 14       	cp	r11, r2
    9098:	58 f4       	brcc	.+22     	; 0x90b0 <vfprintf+0x348>
    909a:	b6 01       	movw	r22, r12
    909c:	80 e2       	ldi	r24, 0x20	; 32
    909e:	90 e0       	ldi	r25, 0x00	; 0
    90a0:	76 d0       	rcall	.+236    	; 0x918e <fputc>
    90a2:	b3 94       	inc	r11
    90a4:	f8 cf       	rjmp	.-16     	; 0x9096 <vfprintf+0x32e>
    90a6:	b2 14       	cp	r11, r2
    90a8:	18 f4       	brcc	.+6      	; 0x90b0 <vfprintf+0x348>
    90aa:	2b 18       	sub	r2, r11
    90ac:	02 c0       	rjmp	.+4      	; 0x90b2 <vfprintf+0x34a>
    90ae:	98 2c       	mov	r9, r8
    90b0:	21 2c       	mov	r2, r1
    90b2:	a4 fe       	sbrs	r10, 4
    90b4:	0f c0       	rjmp	.+30     	; 0x90d4 <vfprintf+0x36c>
    90b6:	b6 01       	movw	r22, r12
    90b8:	80 e3       	ldi	r24, 0x30	; 48
    90ba:	90 e0       	ldi	r25, 0x00	; 0
    90bc:	68 d0       	rcall	.+208    	; 0x918e <fputc>
    90be:	a2 fe       	sbrs	r10, 2
    90c0:	16 c0       	rjmp	.+44     	; 0x90ee <vfprintf+0x386>
    90c2:	a1 fc       	sbrc	r10, 1
    90c4:	03 c0       	rjmp	.+6      	; 0x90cc <vfprintf+0x364>
    90c6:	88 e7       	ldi	r24, 0x78	; 120
    90c8:	90 e0       	ldi	r25, 0x00	; 0
    90ca:	02 c0       	rjmp	.+4      	; 0x90d0 <vfprintf+0x368>
    90cc:	88 e5       	ldi	r24, 0x58	; 88
    90ce:	90 e0       	ldi	r25, 0x00	; 0
    90d0:	b6 01       	movw	r22, r12
    90d2:	0c c0       	rjmp	.+24     	; 0x90ec <vfprintf+0x384>
    90d4:	8a 2d       	mov	r24, r10
    90d6:	86 78       	andi	r24, 0x86	; 134
    90d8:	51 f0       	breq	.+20     	; 0x90ee <vfprintf+0x386>
    90da:	a1 fe       	sbrs	r10, 1
    90dc:	02 c0       	rjmp	.+4      	; 0x90e2 <vfprintf+0x37a>
    90de:	8b e2       	ldi	r24, 0x2B	; 43
    90e0:	01 c0       	rjmp	.+2      	; 0x90e4 <vfprintf+0x37c>
    90e2:	80 e2       	ldi	r24, 0x20	; 32
    90e4:	a7 fc       	sbrc	r10, 7
    90e6:	8d e2       	ldi	r24, 0x2D	; 45
    90e8:	b6 01       	movw	r22, r12
    90ea:	90 e0       	ldi	r25, 0x00	; 0
    90ec:	50 d0       	rcall	.+160    	; 0x918e <fputc>
    90ee:	89 14       	cp	r8, r9
    90f0:	30 f4       	brcc	.+12     	; 0x90fe <vfprintf+0x396>
    90f2:	b6 01       	movw	r22, r12
    90f4:	80 e3       	ldi	r24, 0x30	; 48
    90f6:	90 e0       	ldi	r25, 0x00	; 0
    90f8:	4a d0       	rcall	.+148    	; 0x918e <fputc>
    90fa:	9a 94       	dec	r9
    90fc:	f8 cf       	rjmp	.-16     	; 0x90ee <vfprintf+0x386>
    90fe:	8a 94       	dec	r8
    9100:	f3 01       	movw	r30, r6
    9102:	e8 0d       	add	r30, r8
    9104:	f1 1d       	adc	r31, r1
    9106:	80 81       	ld	r24, Z
    9108:	b6 01       	movw	r22, r12
    910a:	90 e0       	ldi	r25, 0x00	; 0
    910c:	40 d0       	rcall	.+128    	; 0x918e <fputc>
    910e:	81 10       	cpse	r8, r1
    9110:	f6 cf       	rjmp	.-20     	; 0x90fe <vfprintf+0x396>
    9112:	22 20       	and	r2, r2
    9114:	09 f4       	brne	.+2      	; 0x9118 <vfprintf+0x3b0>
    9116:	4e ce       	rjmp	.-868    	; 0x8db4 <vfprintf+0x4c>
    9118:	b6 01       	movw	r22, r12
    911a:	80 e2       	ldi	r24, 0x20	; 32
    911c:	90 e0       	ldi	r25, 0x00	; 0
    911e:	37 d0       	rcall	.+110    	; 0x918e <fputc>
    9120:	2a 94       	dec	r2
    9122:	f7 cf       	rjmp	.-18     	; 0x9112 <vfprintf+0x3aa>
    9124:	f6 01       	movw	r30, r12
    9126:	86 81       	ldd	r24, Z+6	; 0x06
    9128:	97 81       	ldd	r25, Z+7	; 0x07
    912a:	02 c0       	rjmp	.+4      	; 0x9130 <vfprintf+0x3c8>
    912c:	8f ef       	ldi	r24, 0xFF	; 255
    912e:	9f ef       	ldi	r25, 0xFF	; 255
    9130:	2b 96       	adiw	r28, 0x0b	; 11
    9132:	0f b6       	in	r0, 0x3f	; 63
    9134:	f8 94       	cli
    9136:	de bf       	out	0x3e, r29	; 62
    9138:	0f be       	out	0x3f, r0	; 63
    913a:	cd bf       	out	0x3d, r28	; 61
    913c:	df 91       	pop	r29
    913e:	cf 91       	pop	r28
    9140:	1f 91       	pop	r17
    9142:	0f 91       	pop	r16
    9144:	ff 90       	pop	r15
    9146:	ef 90       	pop	r14
    9148:	df 90       	pop	r13
    914a:	cf 90       	pop	r12
    914c:	bf 90       	pop	r11
    914e:	af 90       	pop	r10
    9150:	9f 90       	pop	r9
    9152:	8f 90       	pop	r8
    9154:	7f 90       	pop	r7
    9156:	6f 90       	pop	r6
    9158:	5f 90       	pop	r5
    915a:	4f 90       	pop	r4
    915c:	3f 90       	pop	r3
    915e:	2f 90       	pop	r2
    9160:	08 95       	ret

00009162 <strnlen_P>:
    9162:	fc 01       	movw	r30, r24
    9164:	05 90       	lpm	r0, Z+
    9166:	61 50       	subi	r22, 0x01	; 1
    9168:	70 40       	sbci	r23, 0x00	; 0
    916a:	01 10       	cpse	r0, r1
    916c:	d8 f7       	brcc	.-10     	; 0x9164 <strnlen_P+0x2>
    916e:	80 95       	com	r24
    9170:	90 95       	com	r25
    9172:	8e 0f       	add	r24, r30
    9174:	9f 1f       	adc	r25, r31
    9176:	08 95       	ret

00009178 <strnlen>:
    9178:	fc 01       	movw	r30, r24
    917a:	61 50       	subi	r22, 0x01	; 1
    917c:	70 40       	sbci	r23, 0x00	; 0
    917e:	01 90       	ld	r0, Z+
    9180:	01 10       	cpse	r0, r1
    9182:	d8 f7       	brcc	.-10     	; 0x917a <strnlen+0x2>
    9184:	80 95       	com	r24
    9186:	90 95       	com	r25
    9188:	8e 0f       	add	r24, r30
    918a:	9f 1f       	adc	r25, r31
    918c:	08 95       	ret

0000918e <fputc>:
    918e:	0f 93       	push	r16
    9190:	1f 93       	push	r17
    9192:	cf 93       	push	r28
    9194:	df 93       	push	r29
    9196:	fb 01       	movw	r30, r22
    9198:	23 81       	ldd	r18, Z+3	; 0x03
    919a:	21 fd       	sbrc	r18, 1
    919c:	03 c0       	rjmp	.+6      	; 0x91a4 <fputc+0x16>
    919e:	8f ef       	ldi	r24, 0xFF	; 255
    91a0:	9f ef       	ldi	r25, 0xFF	; 255
    91a2:	2c c0       	rjmp	.+88     	; 0x91fc <fputc+0x6e>
    91a4:	22 ff       	sbrs	r18, 2
    91a6:	16 c0       	rjmp	.+44     	; 0x91d4 <fputc+0x46>
    91a8:	46 81       	ldd	r20, Z+6	; 0x06
    91aa:	57 81       	ldd	r21, Z+7	; 0x07
    91ac:	24 81       	ldd	r18, Z+4	; 0x04
    91ae:	35 81       	ldd	r19, Z+5	; 0x05
    91b0:	42 17       	cp	r20, r18
    91b2:	53 07       	cpc	r21, r19
    91b4:	44 f4       	brge	.+16     	; 0x91c6 <fputc+0x38>
    91b6:	a0 81       	ld	r26, Z
    91b8:	b1 81       	ldd	r27, Z+1	; 0x01
    91ba:	9d 01       	movw	r18, r26
    91bc:	2f 5f       	subi	r18, 0xFF	; 255
    91be:	3f 4f       	sbci	r19, 0xFF	; 255
    91c0:	31 83       	std	Z+1, r19	; 0x01
    91c2:	20 83       	st	Z, r18
    91c4:	8c 93       	st	X, r24
    91c6:	26 81       	ldd	r18, Z+6	; 0x06
    91c8:	37 81       	ldd	r19, Z+7	; 0x07
    91ca:	2f 5f       	subi	r18, 0xFF	; 255
    91cc:	3f 4f       	sbci	r19, 0xFF	; 255
    91ce:	37 83       	std	Z+7, r19	; 0x07
    91d0:	26 83       	std	Z+6, r18	; 0x06
    91d2:	14 c0       	rjmp	.+40     	; 0x91fc <fputc+0x6e>
    91d4:	8b 01       	movw	r16, r22
    91d6:	ec 01       	movw	r28, r24
    91d8:	fb 01       	movw	r30, r22
    91da:	00 84       	ldd	r0, Z+8	; 0x08
    91dc:	f1 85       	ldd	r31, Z+9	; 0x09
    91de:	e0 2d       	mov	r30, r0
    91e0:	19 95       	eicall
    91e2:	89 2b       	or	r24, r25
    91e4:	e1 f6       	brne	.-72     	; 0x919e <fputc+0x10>
    91e6:	d8 01       	movw	r26, r16
    91e8:	16 96       	adiw	r26, 0x06	; 6
    91ea:	8d 91       	ld	r24, X+
    91ec:	9c 91       	ld	r25, X
    91ee:	17 97       	sbiw	r26, 0x07	; 7
    91f0:	01 96       	adiw	r24, 0x01	; 1
    91f2:	17 96       	adiw	r26, 0x07	; 7
    91f4:	9c 93       	st	X, r25
    91f6:	8e 93       	st	-X, r24
    91f8:	16 97       	sbiw	r26, 0x06	; 6
    91fa:	ce 01       	movw	r24, r28
    91fc:	df 91       	pop	r29
    91fe:	cf 91       	pop	r28
    9200:	1f 91       	pop	r17
    9202:	0f 91       	pop	r16
    9204:	08 95       	ret

00009206 <__ultoa_invert>:
    9206:	fa 01       	movw	r30, r20
    9208:	aa 27       	eor	r26, r26
    920a:	28 30       	cpi	r18, 0x08	; 8
    920c:	51 f1       	breq	.+84     	; 0x9262 <__ultoa_invert+0x5c>
    920e:	20 31       	cpi	r18, 0x10	; 16
    9210:	81 f1       	breq	.+96     	; 0x9272 <__ultoa_invert+0x6c>
    9212:	e8 94       	clt
    9214:	6f 93       	push	r22
    9216:	6e 7f       	andi	r22, 0xFE	; 254
    9218:	6e 5f       	subi	r22, 0xFE	; 254
    921a:	7f 4f       	sbci	r23, 0xFF	; 255
    921c:	8f 4f       	sbci	r24, 0xFF	; 255
    921e:	9f 4f       	sbci	r25, 0xFF	; 255
    9220:	af 4f       	sbci	r26, 0xFF	; 255
    9222:	b1 e0       	ldi	r27, 0x01	; 1
    9224:	3e d0       	rcall	.+124    	; 0x92a2 <__ultoa_invert+0x9c>
    9226:	b4 e0       	ldi	r27, 0x04	; 4
    9228:	3c d0       	rcall	.+120    	; 0x92a2 <__ultoa_invert+0x9c>
    922a:	67 0f       	add	r22, r23
    922c:	78 1f       	adc	r23, r24
    922e:	89 1f       	adc	r24, r25
    9230:	9a 1f       	adc	r25, r26
    9232:	a1 1d       	adc	r26, r1
    9234:	68 0f       	add	r22, r24
    9236:	79 1f       	adc	r23, r25
    9238:	8a 1f       	adc	r24, r26
    923a:	91 1d       	adc	r25, r1
    923c:	a1 1d       	adc	r26, r1
    923e:	6a 0f       	add	r22, r26
    9240:	71 1d       	adc	r23, r1
    9242:	81 1d       	adc	r24, r1
    9244:	91 1d       	adc	r25, r1
    9246:	a1 1d       	adc	r26, r1
    9248:	20 d0       	rcall	.+64     	; 0x928a <__ultoa_invert+0x84>
    924a:	09 f4       	brne	.+2      	; 0x924e <__ultoa_invert+0x48>
    924c:	68 94       	set
    924e:	3f 91       	pop	r19
    9250:	2a e0       	ldi	r18, 0x0A	; 10
    9252:	26 9f       	mul	r18, r22
    9254:	11 24       	eor	r1, r1
    9256:	30 19       	sub	r19, r0
    9258:	30 5d       	subi	r19, 0xD0	; 208
    925a:	31 93       	st	Z+, r19
    925c:	de f6       	brtc	.-74     	; 0x9214 <__ultoa_invert+0xe>
    925e:	cf 01       	movw	r24, r30
    9260:	08 95       	ret
    9262:	46 2f       	mov	r20, r22
    9264:	47 70       	andi	r20, 0x07	; 7
    9266:	40 5d       	subi	r20, 0xD0	; 208
    9268:	41 93       	st	Z+, r20
    926a:	b3 e0       	ldi	r27, 0x03	; 3
    926c:	0f d0       	rcall	.+30     	; 0x928c <__ultoa_invert+0x86>
    926e:	c9 f7       	brne	.-14     	; 0x9262 <__ultoa_invert+0x5c>
    9270:	f6 cf       	rjmp	.-20     	; 0x925e <__ultoa_invert+0x58>
    9272:	46 2f       	mov	r20, r22
    9274:	4f 70       	andi	r20, 0x0F	; 15
    9276:	40 5d       	subi	r20, 0xD0	; 208
    9278:	4a 33       	cpi	r20, 0x3A	; 58
    927a:	18 f0       	brcs	.+6      	; 0x9282 <__ultoa_invert+0x7c>
    927c:	49 5d       	subi	r20, 0xD9	; 217
    927e:	31 fd       	sbrc	r19, 1
    9280:	40 52       	subi	r20, 0x20	; 32
    9282:	41 93       	st	Z+, r20
    9284:	02 d0       	rcall	.+4      	; 0x928a <__ultoa_invert+0x84>
    9286:	a9 f7       	brne	.-22     	; 0x9272 <__ultoa_invert+0x6c>
    9288:	ea cf       	rjmp	.-44     	; 0x925e <__ultoa_invert+0x58>
    928a:	b4 e0       	ldi	r27, 0x04	; 4
    928c:	a6 95       	lsr	r26
    928e:	97 95       	ror	r25
    9290:	87 95       	ror	r24
    9292:	77 95       	ror	r23
    9294:	67 95       	ror	r22
    9296:	ba 95       	dec	r27
    9298:	c9 f7       	brne	.-14     	; 0x928c <__ultoa_invert+0x86>
    929a:	00 97       	sbiw	r24, 0x00	; 0
    929c:	61 05       	cpc	r22, r1
    929e:	71 05       	cpc	r23, r1
    92a0:	08 95       	ret
    92a2:	9b 01       	movw	r18, r22
    92a4:	ac 01       	movw	r20, r24
    92a6:	0a 2e       	mov	r0, r26
    92a8:	06 94       	lsr	r0
    92aa:	57 95       	ror	r21
    92ac:	47 95       	ror	r20
    92ae:	37 95       	ror	r19
    92b0:	27 95       	ror	r18
    92b2:	ba 95       	dec	r27
    92b4:	c9 f7       	brne	.-14     	; 0x92a8 <__ultoa_invert+0xa2>
    92b6:	62 0f       	add	r22, r18
    92b8:	73 1f       	adc	r23, r19
    92ba:	84 1f       	adc	r24, r20
    92bc:	95 1f       	adc	r25, r21
    92be:	a0 1d       	adc	r26, r0
    92c0:	08 95       	ret

000092c2 <_exit>:
    92c2:	f8 94       	cli

000092c4 <__stop_program>:
    92c4:	ff cf       	rjmp	.-2      	; 0x92c4 <__stop_program>
