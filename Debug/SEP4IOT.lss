
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004d2  00800200  000053f8  0000548c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000053f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c6c  008006d2  008006d2  0000595e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000595e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000059bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008d8  00000000  00000000  000059fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b8c4  00000000  00000000  000062d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b0e  00000000  00000000  00011b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000586d  00000000  00000000  000146a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002134  00000000  00000000  00019f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003740  00000000  00000000  0001c048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000abca  00000000  00000000  0001f788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000880  00000000  00000000  0002a352  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	d3 c4       	rjmp	.+2470   	; 0x9d8 <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f7 1e 	jmp	0x3dee	; 0x3dee <__vector_25>
      68:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__vector_36>
      94:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 23 20 	jmp	0x4046	; 0x4046 <__vector_51>
      d0:	0c 94 75 20 	jmp	0x40ea	; 0x40ea <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <__vector_54>
      dc:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f0 17       	cp	r31, r16
      e6:	f0 17       	cp	r31, r16
      e8:	f0 17       	cp	r31, r16
      ea:	27 18       	sub	r2, r7
      ec:	2f 18       	sub	r2, r15
      ee:	44 18       	sub	r4, r4
      f0:	f0 17       	cp	r31, r16
      f2:	f0 17       	cp	r31, r16
      f4:	27 18       	sub	r2, r7
      f6:	2f 18       	sub	r2, r15

000000f8 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      f8:	0e 94 40 0c 	call	0x1880	; 0x1880 <prvCheckTasksWaitingTermination>
      fc:	80 91 5b 11 	lds	r24, 0x115B	; 0x80115b <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	a3 d3       	rcall	.+1862   	; 0x84c <vPortYield>
     106:	0e 94 6d 18 	call	0x30da	; 0x30da <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 6d 15 	call	0x2ada	; 0x2ada <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <prvProcessTimerOrBlockTask>
     124:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	16 e0       	ldi	r17, 0x06	; 6
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e8 ef       	ldi	r30, 0xF8	; 248
     142:	f3 e5       	ldi	r31, 0x53	; 83
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a2 3d       	cpi	r26, 0xD2	; 210
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e1       	ldi	r18, 0x13	; 19
     156:	a2 ed       	ldi	r26, 0xD2	; 210
     158:	b6 e0       	ldi	r27, 0x06	; 6
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	ae 33       	cpi	r26, 0x3E	; 62
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 46 19 	call	0x328c	; 0x328c <main>
     168:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <SensorDataPackage_create>:
	vPortFree( (void *) packet );
	packet = NULL;
}

void SensorDataPackage_setCO2(SensorDataPackage_t packet, uint16_t _co2Data){
	packet->co2Data = _co2Data;
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	b8 d1       	rcall	.+880    	; 0x4e4 <pvPortMalloc>
     174:	00 97       	sbiw	r24, 0x00	; 0
     176:	11 f4       	brne	.+4      	; 0x17c <SensorDataPackage_create+0xe>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	08 95       	ret

0000017e <SensorDataPackage_free>:
     17e:	5b c2       	rjmp	.+1206   	; 0x636 <vPortFree>
     180:	08 95       	ret

00000182 <SensorDataPackage_getCO2>:
}

uint16_t SensorDataPackage_getCO2(SensorDataPackage_t packet){
	return packet->co2Data;
     182:	fc 01       	movw	r30, r24
     184:	80 81       	ld	r24, Z
     186:	91 81       	ldd	r25, Z+1	; 0x01
     188:	08 95       	ret

0000018a <_lora_setup>:
	}

 }
 
 static void _lora_setup(void)
 {
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
	 lora_driver_returnCode_t rc;
	 status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	0e 94 c2 22 	call	0x4584	; 0x4584 <status_leds_slowBlink>

	 // Factory reset the transceiver
	 printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     194:	0e 94 bd 1a 	call	0x357a	; 0x357a <lora_driver_rn2483FactoryReset>
     198:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_mapReturnCodeToText>
     19c:	9f 93       	push	r25
     19e:	8f 93       	push	r24
     1a0:	8d e3       	ldi	r24, 0x3D	; 61
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	9f 93       	push	r25
     1a6:	8f 93       	push	r24
     1a8:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <printf>
	 
	 // Configure to EU868 LoRaWAN standards
	 printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     1ac:	0e 94 3b 1c 	call	0x3876	; 0x3876 <lora_driver_configureToEu868>
     1b0:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_mapReturnCodeToText>
     1b4:	9f 93       	push	r25
     1b6:	8f 93       	push	r24
     1b8:	80 e5       	ldi	r24, 0x50	; 80
     1ba:	92 e0       	ldi	r25, 0x02	; 2
     1bc:	9f 93       	push	r25
     1be:	8f 93       	push	r24
     1c0:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <printf>

	 // Get the transceivers HW EUI
	 rc = lora_driver_getRn2483Hweui(_out_buf);
     1c4:	82 ed       	ldi	r24, 0xD2	; 210
     1c6:	96 e0       	ldi	r25, 0x06	; 6
     1c8:	0e 94 cf 1a 	call	0x359e	; 0x359e <lora_driver_getRn2483Hweui>
	 printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     1cc:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_mapReturnCodeToText>
     1d0:	c2 ed       	ldi	r28, 0xD2	; 210
     1d2:	d6 e0       	ldi	r29, 0x06	; 6
     1d4:	df 93       	push	r29
     1d6:	cf 93       	push	r28
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	89 e6       	ldi	r24, 0x69	; 105
     1de:	92 e0       	ldi	r25, 0x02	; 2
     1e0:	9f 93       	push	r25
     1e2:	8f 93       	push	r24
     1e4:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <printf>

	 // Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	 printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     1e8:	ce 01       	movw	r24, r28
     1ea:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <lora_driver_setDeviceIdentifier>
     1ee:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_mapReturnCodeToText>
     1f2:	9f 93       	push	r25
     1f4:	8f 93       	push	r24
     1f6:	df 93       	push	r29
     1f8:	cf 93       	push	r28
     1fa:	8d e7       	ldi	r24, 0x7D	; 125
     1fc:	92 e0       	ldi	r25, 0x02	; 2
     1fe:	9f 93       	push	r25
     200:	8f 93       	push	r24
     202:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <printf>

	 // Set Over The Air Activation parameters to be ready to join the LoRaWAN
	 printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     206:	ae 01       	movw	r20, r28
     208:	62 e9       	ldi	r22, 0x92	; 146
     20a:	72 e0       	ldi	r23, 0x02	; 2
     20c:	83 eb       	ldi	r24, 0xB3	; 179
     20e:	92 e0       	ldi	r25, 0x02	; 2
     210:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <lora_driver_setOtaaIdentity>
     214:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_mapReturnCodeToText>
     218:	9f 93       	push	r25
     21a:	8f 93       	push	r24
     21c:	df 93       	push	r29
     21e:	cf 93       	push	r28
     220:	82 e9       	ldi	r24, 0x92	; 146
     222:	92 e0       	ldi	r25, 0x02	; 2
     224:	9f 93       	push	r25
     226:	8f 93       	push	r24
     228:	83 eb       	ldi	r24, 0xB3	; 179
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	9f 93       	push	r25
     22e:	8f 93       	push	r24
     230:	84 ec       	ldi	r24, 0xC4	; 196
     232:	92 e0       	ldi	r25, 0x02	; 2
     234:	9f 93       	push	r25
     236:	8f 93       	push	r24
     238:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <printf>

	 // Save all the MAC settings in the transceiver
	 printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     23c:	0e 94 1e 1b 	call	0x363c	; 0x363c <lora_driver_saveMac>
     240:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_mapReturnCodeToText>
     244:	9f 93       	push	r25
     246:	8f 93       	push	r24
     248:	8a ef       	ldi	r24, 0xFA	; 250
     24a:	92 e0       	ldi	r25, 0x02	; 2
     24c:	9f 93       	push	r25
     24e:	8f 93       	push	r24
     250:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <printf>

	 // Enable Adaptive Data Rate
	 printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     254:	8d b7       	in	r24, 0x3d	; 61
     256:	9e b7       	in	r25, 0x3e	; 62
     258:	82 96       	adiw	r24, 0x22	; 34
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	9e bf       	out	0x3e, r25	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	8d bf       	out	0x3d, r24	; 61
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	0e 94 18 1c 	call	0x3830	; 0x3830 <lora_driver_setAdaptiveDataRate>
     26a:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_mapReturnCodeToText>
     26e:	9f 93       	push	r25
     270:	8f 93       	push	r24
     272:	89 e0       	ldi	r24, 0x09	; 9
     274:	93 e0       	ldi	r25, 0x03	; 3
     276:	9f 93       	push	r25
     278:	8f 93       	push	r24
     27a:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <printf>

	 // Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	 printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     27e:	84 ef       	ldi	r24, 0xF4	; 244
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	0e 94 23 1c 	call	0x3846	; 0x3846 <lora_driver_setReceiveDelay>
     286:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_mapReturnCodeToText>
     28a:	9f 93       	push	r25
     28c:	8f 93       	push	r24
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	8f 93       	push	r24
     292:	84 ef       	ldi	r24, 0xF4	; 244
     294:	8f 93       	push	r24
     296:	8a e2       	ldi	r24, 0x2A	; 42
     298:	93 e0       	ldi	r25, 0x03	; 3
     29a:	9f 93       	push	r25
     29c:	8f 93       	push	r24
     29e:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <printf>
     2a2:	8d b7       	in	r24, 0x3d	; 61
     2a4:	9e b7       	in	r25, 0x3e	; 62
     2a6:	0a 96       	adiw	r24, 0x0a	; 10
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	9e bf       	out	0x3e, r25	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	8d bf       	out	0x3d, r24	; 61

	 // Join the LoRaWAN
	 uint8_t maxJoinTriesLeft = 10;
     2b2:	ca e0       	ldi	r28, 0x0A	; 10
	 
	 do {
		 rc = lora_driver_join(LORA_OTAA);
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 24 1b 	call	0x3648	; 0x3648 <lora_driver_join>
     2ba:	d8 2f       	mov	r29, r24
		 printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     2bc:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_mapReturnCodeToText>
     2c0:	9f 93       	push	r25
     2c2:	8f 93       	push	r24
     2c4:	1f 92       	push	r1
     2c6:	cf 93       	push	r28
     2c8:	8a e4       	ldi	r24, 0x4A	; 74
     2ca:	93 e0       	ldi	r25, 0x03	; 3
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <printf>

		 if ( rc != LORA_ACCEPTED)
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	d8 30       	cpi	r29, 0x08	; 8
     2e2:	59 f0       	breq	.+22     	; 0x2fa <_lora_setup+0x170>
		 {
			 // Make the red led pulse to tell something went wrong
			 status_leds_longPuls(led_ST1); // OPTIONAL
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	0e 94 26 23 	call	0x464c	; 0x464c <status_leds_longPuls>
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
     2ea:	66 e3       	ldi	r22, 0x36	; 54
     2ec:	71 e0       	ldi	r23, 0x01	; 1
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
		 }
		 else
		 {
			 break;
		 }
	 } while (--maxJoinTriesLeft);
     2f6:	c1 50       	subi	r28, 0x01	; 1
     2f8:	e9 f6       	brne	.-70     	; 0x2b4 <_lora_setup+0x12a>

	 if (rc == LORA_ACCEPTED)
     2fa:	d8 30       	cpi	r29, 0x08	; 8
     2fc:	21 f4       	brne	.+8      	; 0x306 <_lora_setup+0x17c>
	 {
		 // Connected to LoRaWAN :-)
		 // Make the green led steady
		 status_leds_ledOn(led_ST2); // OPTIONAL
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 08 23 	call	0x4610	; 0x4610 <status_leds_ledOn>
		 while (1)
		 {
			 taskYIELD();
		 }
	 }
     304:	08 c0       	rjmp	.+16     	; 0x316 <_lora_setup+0x18c>
	 }
	 else
	 {
		 // Something went wrong
		 // Turn off the green led
		 status_leds_ledOff(led_ST2); // OPTIONAL
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	0e 94 17 23 	call	0x462e	; 0x462e <status_leds_ledOff>
		 // Make the red led blink fast to tell something went wrong
		 status_leds_fastBlink(led_ST1); // OPTIONAL
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <status_leds_fastBlink>

		 // Lets stay here
		 while (1)
		 {
			 taskYIELD();
     312:	9c d2       	rcall	.+1336   	; 0x84c <vPortYield>
     314:	fe cf       	rjmp	.-4      	; 0x312 <_lora_setup+0x188>
		 }
	 }
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <UL_handler_create>:
#define LORA_appEUI "926F9B5931FCA94C"
#define LORA_appKEY "1D2EB57B831FBDEF807978AE930786E4"

static char _out_buf[100];

void UL_handler_create(MessageBufferHandle_t _uplinkMessageBuffer ){
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	ec 01       	movw	r28, r24
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	0e 94 af 1a 	call	0x355e	; 0x355e <lora_driver_resetRn2483>
	vTaskDelay(2);
     328:	62 e0       	ldi	r22, 0x02	; 2
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
	lora_driver_resetRn2483(0);
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	0e 94 af 1a 	call	0x355e	; 0x355e <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     33a:	66 e9       	ldi	r22, 0x96	; 150
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     346:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <lora_driver_flushBuffers>

	_lora_setup();
     34a:	1f df       	rcall	.-450    	; 0x18a <_lora_setup>
	
	uplinkMessageBuffer = _uplinkMessageBuffer;
     34c:	d0 93 31 13 	sts	0x1331, r29	; 0x801331 <uplinkMessageBuffer+0x1>
     350:	c0 93 30 13 	sts	0x1330, r28	; 0x801330 <uplinkMessageBuffer>
}
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <UL_handler_receive>:

 void UL_handler_receive( void *pvParameters )
 {
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	66 97       	sbiw	r28, 0x16	; 22
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61

	for(;;){
		  SensorDataPackage_t sensorDataPackage = SensorDataPackage_create();
     36e:	ff de       	rcall	.-514    	; 0x16e <SensorDataPackage_create>
     370:	7c 01       	movw	r14, r24
		  
		  size_t xReceivedBytes;
		  const TickType_t xBlockTime = pdMS_TO_TICKS( 20 );

		  // Receive next message from the UL message buffer. Wait for a maximum of 100ms for a message to become available.
		  xReceivedBytes = xMessageBufferReceive( uplinkMessageBuffer,
     372:	01 e0       	ldi	r16, 0x01	; 1
     374:	10 e0       	ldi	r17, 0x00	; 0
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	42 e0       	ldi	r20, 0x02	; 2
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	bc 01       	movw	r22, r24
     380:	80 91 30 13 	lds	r24, 0x1330	; 0x801330 <uplinkMessageBuffer>
     384:	90 91 31 13 	lds	r25, 0x1331	; 0x801331 <uplinkMessageBuffer+0x1>
     388:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <xStreamBufferReceive>
     38c:	8c 01       	movw	r16, r24
		  ( void * ) sensorDataPackage,
		  sizeof( SensorDataPackage_t ),
		  xBlockTime );
		  
		  if( xReceivedBytes > 0 )
     38e:	89 2b       	or	r24, r25
     390:	79 f1       	breq	.+94     	; 0x3f0 <UL_handler_receive+0x96>
		  {
			  // The sensorDataPackage contains the message to be transmitted. Serialize it here and send it using LoRaWan.
			  puts("UL_handler_receive -> OK");
     392:	8a e6       	ldi	r24, 0x6A	; 106
     394:	93 e0       	ldi	r25, 0x03	; 3
     396:	0e 94 ef 26 	call	0x4dde	; 0x4dde <puts>
			  puts(xReceivedBytes);
     39a:	c8 01       	movw	r24, r16
     39c:	0e 94 ef 26 	call	0x4dde	; 0x4dde <puts>
			  
			  // take the data out of the packet
			  uint16_t co2_ppm = SensorDataPackage_getCO2(sensorDataPackage);
     3a0:	c7 01       	movw	r24, r14
     3a2:	ef de       	rcall	.-546    	; 0x182 <SensorDataPackage_getCO2>
     3a4:	18 2f       	mov	r17, r24
     3a6:	09 2f       	mov	r16, r25
			  
			  // free up memory
			  SensorDataPackage_free(sensorDataPackage);
     3a8:	c7 01       	movw	r24, r14
     3aa:	e9 de       	rcall	.-558    	; 0x17e <SensorDataPackage_free>
     3ac:	0b 83       	std	Y+3, r16	; 0x03
			  
			  
			  lora_driver_payload_t _uplink_payload;
			  
			  _uplink_payload.bytes[0] = co2_ppm >> 8;
     3ae:	1c 83       	std	Y+4, r17	; 0x04
			  _uplink_payload.bytes[1] = co2_ppm & 0xFF;
     3b0:	82 e0       	ldi	r24, 0x02	; 2
			  _uplink_payload.len = 2;
     3b2:	8a 83       	std	Y+2, r24	; 0x02
     3b4:	83 e0       	ldi	r24, 0x03	; 3

			  status_leds_shortPuls(led_ST4);  // OPTIONAL
     3b6:	0e 94 38 23 	call	0x4670	; 0x4670 <status_leds_shortPuls>
     3ba:	be 01       	movw	r22, r28
			  printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     3bc:	6f 5f       	subi	r22, 0xFF	; 255
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	0e 94 4d 1b 	call	0x369a	; 0x369a <lora_driver_sendUploadMessage>
     3c6:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <lora_driver_mapReturnCodeToText>
     3ca:	9f 93       	push	r25
     3cc:	8f 93       	push	r24
     3ce:	83 e8       	ldi	r24, 0x83	; 131
     3d0:	93 e0       	ldi	r25, 0x03	; 3
     3d2:	9f 93       	push	r25
     3d4:	8f 93       	push	r24
     3d6:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <printf>
     3da:	68 ea       	ldi	r22, 0xA8	; 168
			  vTaskDelay(pdMS_TO_TICKS(300000));
     3dc:	78 e4       	ldi	r23, 0x48	; 72
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	bf cf       	rjmp	.-130    	; 0x36e <UL_handler_receive+0x14>
     3f0:	64 e5       	ldi	r22, 0x54	; 84
			  }else{
			  // Wait 2.5 minutes to retry
			  vTaskDelay(pdMS_TO_TICKS(150000));
     3f2:	74 e2       	ldi	r23, 0x24	; 36
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
     3fc:	b8 cf       	rjmp	.-144    	; 0x36e <UL_handler_receive+0x14>

000003fe <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     3fe:	e2 e4       	ldi	r30, 0x42	; 66
     400:	f7 e0       	ldi	r31, 0x07	; 7
     402:	a6 e4       	ldi	r26, 0x46	; 70
     404:	b7 e0       	ldi	r27, 0x07	; 7
     406:	b1 83       	std	Z+1, r27	; 0x01
     408:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     40a:	13 82       	std	Z+3, r1	; 0x03
     40c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     40e:	e6 e0       	ldi	r30, 0x06	; 6
     410:	f1 e1       	ldi	r31, 0x11	; 17
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     412:	f0 93 41 07 	sts	0x0741, r31	; 0x800741 <pxEnd+0x1>
     416:	e0 93 40 07 	sts	0x0740, r30	; 0x800740 <pxEnd>
    pxEnd->xBlockSize = 0;
     41a:	13 82       	std	Z+3, r1	; 0x03
     41c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     41e:	11 82       	std	Z+1, r1	; 0x01
     420:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     422:	80 ec       	ldi	r24, 0xC0	; 192
     424:	99 e0       	ldi	r25, 0x09	; 9
     426:	13 96       	adiw	r26, 0x03	; 3
     428:	9c 93       	st	X, r25
     42a:	8e 93       	st	-X, r24
     42c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     42e:	ed 93       	st	X+, r30
     430:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     432:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <xMinimumEverFreeBytesRemaining+0x1>
     436:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     43a:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <xFreeBytesRemaining+0x1>
     43e:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e8       	ldi	r25, 0x80	; 128
     446:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <xBlockAllocatedBit+0x1>
     44a:	80 93 36 07 	sts	0x0736, r24	; 0x800736 <xBlockAllocatedBit>
     44e:	08 95       	ret

00000450 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     456:	a2 e4       	ldi	r26, 0x42	; 66
     458:	b7 e0       	ldi	r27, 0x07	; 7
     45a:	01 c0       	rjmp	.+2      	; 0x45e <prvInsertBlockIntoFreeList+0xe>
     45c:	df 01       	movw	r26, r30
     45e:	ed 91       	ld	r30, X+
     460:	fc 91       	ld	r31, X
     462:	11 97       	sbiw	r26, 0x01	; 1
     464:	ec 17       	cp	r30, r28
     466:	fd 07       	cpc	r31, r29
     468:	c8 f3       	brcs	.-14     	; 0x45c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     46a:	12 96       	adiw	r26, 0x02	; 2
     46c:	8d 91       	ld	r24, X+
     46e:	9c 91       	ld	r25, X
     470:	13 97       	sbiw	r26, 0x03	; 3
     472:	9d 01       	movw	r18, r26
     474:	28 0f       	add	r18, r24
     476:	39 1f       	adc	r19, r25
     478:	c2 17       	cp	r28, r18
     47a:	d3 07       	cpc	r29, r19
     47c:	49 f4       	brne	.+18     	; 0x490 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     47e:	2a 81       	ldd	r18, Y+2	; 0x02
     480:	3b 81       	ldd	r19, Y+3	; 0x03
     482:	82 0f       	add	r24, r18
     484:	93 1f       	adc	r25, r19
     486:	13 96       	adiw	r26, 0x03	; 3
     488:	9c 93       	st	X, r25
     48a:	8e 93       	st	-X, r24
     48c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     48e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     490:	8a 81       	ldd	r24, Y+2	; 0x02
     492:	9b 81       	ldd	r25, Y+3	; 0x03
     494:	9e 01       	movw	r18, r28
     496:	28 0f       	add	r18, r24
     498:	39 1f       	adc	r19, r25
     49a:	e2 17       	cp	r30, r18
     49c:	f3 07       	cpc	r31, r19
     49e:	c1 f4       	brne	.+48     	; 0x4d0 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     4a0:	20 91 40 07 	lds	r18, 0x0740	; 0x800740 <pxEnd>
     4a4:	30 91 41 07 	lds	r19, 0x0741	; 0x800741 <pxEnd+0x1>
     4a8:	e2 17       	cp	r30, r18
     4aa:	f3 07       	cpc	r31, r19
     4ac:	71 f0       	breq	.+28     	; 0x4ca <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     4ae:	22 81       	ldd	r18, Z+2	; 0x02
     4b0:	33 81       	ldd	r19, Z+3	; 0x03
     4b2:	82 0f       	add	r24, r18
     4b4:	93 1f       	adc	r25, r19
     4b6:	9b 83       	std	Y+3, r25	; 0x03
     4b8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     4ba:	ed 91       	ld	r30, X+
     4bc:	fc 91       	ld	r31, X
     4be:	11 97       	sbiw	r26, 0x01	; 1
     4c0:	80 81       	ld	r24, Z
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
     4c4:	99 83       	std	Y+1, r25	; 0x01
     4c6:	88 83       	st	Y, r24
     4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4ca:	39 83       	std	Y+1, r19	; 0x01
     4cc:	28 83       	st	Y, r18
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4d0:	f9 83       	std	Y+1, r31	; 0x01
     4d2:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     4d4:	ca 17       	cp	r28, r26
     4d6:	db 07       	cpc	r29, r27
     4d8:	11 f0       	breq	.+4      	; 0x4de <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4da:	cd 93       	st	X+, r28
     4dc:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     4f2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     4f6:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <pxEnd>
     4fa:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <pxEnd+0x1>
     4fe:	89 2b       	or	r24, r25
     500:	09 f4       	brne	.+2      	; 0x504 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     502:	7d df       	rcall	.-262    	; 0x3fe <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     504:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <xBlockAllocatedBit>
     508:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <xBlockAllocatedBit+0x1>
     50c:	80 23       	and	r24, r16
     50e:	91 23       	and	r25, r17
     510:	89 2b       	or	r24, r25
     512:	09 f0       	breq	.+2      	; 0x516 <pvPortMalloc+0x32>
     514:	76 c0       	rjmp	.+236    	; 0x602 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     516:	01 15       	cp	r16, r1
     518:	11 05       	cpc	r17, r1
     51a:	49 f0       	breq	.+18     	; 0x52e <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     51c:	c8 01       	movw	r24, r16
     51e:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     520:	08 17       	cp	r16, r24
     522:	19 07       	cpc	r17, r25
     524:	18 f0       	brcs	.+6      	; 0x52c <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	10 e0       	ldi	r17, 0x00	; 0
     52a:	01 c0       	rjmp	.+2      	; 0x52e <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     52c:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     52e:	01 15       	cp	r16, r1
     530:	11 05       	cpc	r17, r1
     532:	09 f4       	brne	.+2      	; 0x536 <pvPortMalloc+0x52>
     534:	69 c0       	rjmp	.+210    	; 0x608 <pvPortMalloc+0x124>
     536:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xFreeBytesRemaining>
     53a:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <xFreeBytesRemaining+0x1>
     53e:	80 17       	cp	r24, r16
     540:	91 07       	cpc	r25, r17
     542:	08 f4       	brcc	.+2      	; 0x546 <pvPortMalloc+0x62>
     544:	64 c0       	rjmp	.+200    	; 0x60e <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     546:	c0 91 42 07 	lds	r28, 0x0742	; 0x800742 <xStart>
     54a:	d0 91 43 07 	lds	r29, 0x0743	; 0x800743 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     54e:	e2 e4       	ldi	r30, 0x42	; 66
     550:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     552:	02 c0       	rjmp	.+4      	; 0x558 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     554:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     556:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     558:	8a 81       	ldd	r24, Y+2	; 0x02
     55a:	9b 81       	ldd	r25, Y+3	; 0x03
     55c:	80 17       	cp	r24, r16
     55e:	91 07       	cpc	r25, r17
     560:	20 f4       	brcc	.+8      	; 0x56a <pvPortMalloc+0x86>
     562:	88 81       	ld	r24, Y
     564:	99 81       	ldd	r25, Y+1	; 0x01
     566:	00 97       	sbiw	r24, 0x00	; 0
     568:	a9 f7       	brne	.-22     	; 0x554 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     56a:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <pxEnd>
     56e:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <pxEnd+0x1>
     572:	c8 17       	cp	r28, r24
     574:	d9 07       	cpc	r29, r25
     576:	09 f4       	brne	.+2      	; 0x57a <pvPortMalloc+0x96>
     578:	4d c0       	rjmp	.+154    	; 0x614 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     57a:	e0 80       	ld	r14, Z
     57c:	f1 80       	ldd	r15, Z+1	; 0x01
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	e8 0e       	add	r14, r24
     582:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     584:	88 81       	ld	r24, Y
     586:	99 81       	ldd	r25, Y+1	; 0x01
     588:	91 83       	std	Z+1, r25	; 0x01
     58a:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     58c:	2a 81       	ldd	r18, Y+2	; 0x02
     58e:	3b 81       	ldd	r19, Y+3	; 0x03
     590:	20 1b       	sub	r18, r16
     592:	31 0b       	sbc	r19, r17
     594:	29 30       	cpi	r18, 0x09	; 9
     596:	31 05       	cpc	r19, r1
     598:	48 f0       	brcs	.+18     	; 0x5ac <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     59a:	ce 01       	movw	r24, r28
     59c:	80 0f       	add	r24, r16
     59e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5a0:	fc 01       	movw	r30, r24
     5a2:	33 83       	std	Z+3, r19	; 0x03
     5a4:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     5a6:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     5a8:	0a 83       	std	Y+2, r16	; 0x02
     5aa:	52 df       	rcall	.-348    	; 0x450 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     5ac:	2a 81       	ldd	r18, Y+2	; 0x02
     5ae:	3b 81       	ldd	r19, Y+3	; 0x03
     5b0:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <xFreeBytesRemaining>
     5b4:	90 91 3f 07 	lds	r25, 0x073F	; 0x80073f <xFreeBytesRemaining+0x1>
     5b8:	82 1b       	sub	r24, r18
     5ba:	93 0b       	sbc	r25, r19
     5bc:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <xFreeBytesRemaining+0x1>
     5c0:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5c4:	40 91 3c 07 	lds	r20, 0x073C	; 0x80073c <xMinimumEverFreeBytesRemaining>
     5c8:	50 91 3d 07 	lds	r21, 0x073D	; 0x80073d <xMinimumEverFreeBytesRemaining+0x1>
     5cc:	84 17       	cp	r24, r20
     5ce:	95 07       	cpc	r25, r21
     5d0:	20 f4       	brcc	.+8      	; 0x5da <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     5d2:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <xMinimumEverFreeBytesRemaining+0x1>
     5d6:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     5da:	80 91 36 07 	lds	r24, 0x0736	; 0x800736 <xBlockAllocatedBit>
     5de:	90 91 37 07 	lds	r25, 0x0737	; 0x800737 <xBlockAllocatedBit+0x1>
     5e2:	28 2b       	or	r18, r24
     5e4:	39 2b       	or	r19, r25
     5e6:	3b 83       	std	Y+3, r19	; 0x03
     5e8:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     5ea:	19 82       	std	Y+1, r1	; 0x01
     5ec:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     5ee:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <xNumberOfSuccessfulAllocations>
     5f2:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <xNumberOfSuccessfulAllocations+0x1>
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <xNumberOfSuccessfulAllocations+0x1>
     5fc:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <xNumberOfSuccessfulAllocations>
     600:	0b c0       	rjmp	.+22     	; 0x618 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     602:	e1 2c       	mov	r14, r1
     604:	f1 2c       	mov	r15, r1
     606:	08 c0       	rjmp	.+16     	; 0x618 <pvPortMalloc+0x134>
     608:	e1 2c       	mov	r14, r1
     60a:	f1 2c       	mov	r15, r1
     60c:	05 c0       	rjmp	.+10     	; 0x618 <pvPortMalloc+0x134>
     60e:	e1 2c       	mov	r14, r1
     610:	f1 2c       	mov	r15, r1
     612:	02 c0       	rjmp	.+4      	; 0x618 <pvPortMalloc+0x134>
     614:	e1 2c       	mov	r14, r1
     616:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     618:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     61c:	e1 14       	cp	r14, r1
     61e:	f1 04       	cpc	r15, r1
     620:	11 f4       	brne	.+4      	; 0x626 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     622:	0e 94 79 18 	call	0x30f2	; 0x30f2 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     626:	c7 01       	movw	r24, r14
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	08 95       	ret

00000636 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	91 f1       	breq	.+100    	; 0x6a6 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     642:	ec 01       	movw	r28, r24
     644:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     646:	4a 81       	ldd	r20, Y+2	; 0x02
     648:	5b 81       	ldd	r21, Y+3	; 0x03
     64a:	20 91 36 07 	lds	r18, 0x0736	; 0x800736 <xBlockAllocatedBit>
     64e:	30 91 37 07 	lds	r19, 0x0737	; 0x800737 <xBlockAllocatedBit+0x1>
     652:	ba 01       	movw	r22, r20
     654:	62 23       	and	r22, r18
     656:	73 23       	and	r23, r19
     658:	67 2b       	or	r22, r23
     65a:	29 f1       	breq	.+74     	; 0x6a6 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     65c:	68 81       	ld	r22, Y
     65e:	79 81       	ldd	r23, Y+1	; 0x01
     660:	67 2b       	or	r22, r23
     662:	09 f5       	brne	.+66     	; 0x6a6 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     664:	20 95       	com	r18
     666:	30 95       	com	r19
     668:	24 23       	and	r18, r20
     66a:	35 23       	and	r19, r21
     66c:	3b 83       	std	Y+3, r19	; 0x03
     66e:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     670:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	9b 81       	ldd	r25, Y+3	; 0x03
     678:	20 91 3e 07 	lds	r18, 0x073E	; 0x80073e <xFreeBytesRemaining>
     67c:	30 91 3f 07 	lds	r19, 0x073F	; 0x80073f <xFreeBytesRemaining+0x1>
     680:	82 0f       	add	r24, r18
     682:	93 1f       	adc	r25, r19
     684:	90 93 3f 07 	sts	0x073F, r25	; 0x80073f <xFreeBytesRemaining+0x1>
     688:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     68c:	ce 01       	movw	r24, r28
     68e:	e0 de       	rcall	.-576    	; 0x450 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     690:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <xNumberOfSuccessfulFrees>
     694:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <xNumberOfSuccessfulFrees+0x1>
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <xNumberOfSuccessfulFrees+0x1>
     69e:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     6a2:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     6b0:	fc 01       	movw	r30, r24
     6b2:	03 96       	adiw	r24, 0x03	; 3
     6b4:	92 83       	std	Z+2, r25	; 0x02
     6b6:	81 83       	std	Z+1, r24	; 0x01
     6b8:	4f ef       	ldi	r20, 0xFF	; 255
     6ba:	5f ef       	ldi	r21, 0xFF	; 255
     6bc:	ba 01       	movw	r22, r20
     6be:	43 83       	std	Z+3, r20	; 0x03
     6c0:	54 83       	std	Z+4, r21	; 0x04
     6c2:	65 83       	std	Z+5, r22	; 0x05
     6c4:	76 83       	std	Z+6, r23	; 0x06
     6c6:	90 87       	std	Z+8, r25	; 0x08
     6c8:	87 83       	std	Z+7, r24	; 0x07
     6ca:	92 87       	std	Z+10, r25	; 0x0a
     6cc:	81 87       	std	Z+9, r24	; 0x09
     6ce:	10 82       	st	Z, r1
     6d0:	08 95       	ret

000006d2 <vListInitialiseItem>:
     6d2:	fc 01       	movw	r30, r24
     6d4:	13 86       	std	Z+11, r1	; 0x0b
     6d6:	12 86       	std	Z+10, r1	; 0x0a
     6d8:	08 95       	ret

000006da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6e4:	08 81       	ld	r16, Y
     6e6:	19 81       	ldd	r17, Y+1	; 0x01
     6e8:	2a 81       	ldd	r18, Y+2	; 0x02
     6ea:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     6ec:	0f 3f       	cpi	r16, 0xFF	; 255
     6ee:	4f ef       	ldi	r20, 0xFF	; 255
     6f0:	14 07       	cpc	r17, r20
     6f2:	24 07       	cpc	r18, r20
     6f4:	34 07       	cpc	r19, r20
     6f6:	21 f4       	brne	.+8      	; 0x700 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     6f8:	fc 01       	movw	r30, r24
     6fa:	a1 85       	ldd	r26, Z+9	; 0x09
     6fc:	b2 85       	ldd	r27, Z+10	; 0x0a
     6fe:	11 c0       	rjmp	.+34     	; 0x722 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     700:	dc 01       	movw	r26, r24
     702:	13 96       	adiw	r26, 0x03	; 3
     704:	01 c0       	rjmp	.+2      	; 0x708 <vListInsert+0x2e>
     706:	df 01       	movw	r26, r30
     708:	14 96       	adiw	r26, 0x04	; 4
     70a:	ed 91       	ld	r30, X+
     70c:	fc 91       	ld	r31, X
     70e:	15 97       	sbiw	r26, 0x05	; 5
     710:	40 81       	ld	r20, Z
     712:	51 81       	ldd	r21, Z+1	; 0x01
     714:	62 81       	ldd	r22, Z+2	; 0x02
     716:	73 81       	ldd	r23, Z+3	; 0x03
     718:	04 17       	cp	r16, r20
     71a:	15 07       	cpc	r17, r21
     71c:	26 07       	cpc	r18, r22
     71e:	37 07       	cpc	r19, r23
     720:	90 f7       	brcc	.-28     	; 0x706 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     722:	14 96       	adiw	r26, 0x04	; 4
     724:	ed 91       	ld	r30, X+
     726:	fc 91       	ld	r31, X
     728:	15 97       	sbiw	r26, 0x05	; 5
     72a:	fd 83       	std	Y+5, r31	; 0x05
     72c:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     72e:	d7 83       	std	Z+7, r29	; 0x07
     730:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     732:	bf 83       	std	Y+7, r27	; 0x07
     734:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     736:	15 96       	adiw	r26, 0x05	; 5
     738:	dc 93       	st	X, r29
     73a:	ce 93       	st	-X, r28
     73c:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     73e:	9b 87       	std	Y+11, r25	; 0x0b
     740:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     742:	fc 01       	movw	r30, r24
     744:	20 81       	ld	r18, Z
     746:	2f 5f       	subi	r18, 0xFF	; 255
     748:	20 83       	st	Z, r18
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	08 95       	ret

00000754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     75a:	a2 85       	ldd	r26, Z+10	; 0x0a
     75c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     75e:	c4 81       	ldd	r28, Z+4	; 0x04
     760:	d5 81       	ldd	r29, Z+5	; 0x05
     762:	86 81       	ldd	r24, Z+6	; 0x06
     764:	97 81       	ldd	r25, Z+7	; 0x07
     766:	9f 83       	std	Y+7, r25	; 0x07
     768:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     76a:	c6 81       	ldd	r28, Z+6	; 0x06
     76c:	d7 81       	ldd	r29, Z+7	; 0x07
     76e:	84 81       	ldd	r24, Z+4	; 0x04
     770:	95 81       	ldd	r25, Z+5	; 0x05
     772:	9d 83       	std	Y+5, r25	; 0x05
     774:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     776:	11 96       	adiw	r26, 0x01	; 1
     778:	8d 91       	ld	r24, X+
     77a:	9c 91       	ld	r25, X
     77c:	12 97       	sbiw	r26, 0x02	; 2
     77e:	e8 17       	cp	r30, r24
     780:	f9 07       	cpc	r31, r25
     782:	31 f4       	brne	.+12     	; 0x790 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     784:	86 81       	ldd	r24, Z+6	; 0x06
     786:	97 81       	ldd	r25, Z+7	; 0x07
     788:	12 96       	adiw	r26, 0x02	; 2
     78a:	9c 93       	st	X, r25
     78c:	8e 93       	st	-X, r24
     78e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     790:	13 86       	std	Z+11, r1	; 0x0b
     792:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     794:	8c 91       	ld	r24, X
     796:	81 50       	subi	r24, 0x01	; 1
     798:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     79a:	8c 91       	ld	r24, X
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     7a2:	a8 95       	wdr
     7a4:	90 ec       	ldi	r25, 0xC0	; 192
     7a6:	88 e1       	ldi	r24, 0x18	; 24
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	a8 95       	wdr
     7ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     7b8:	08 95       	ret

000007ba <pxPortInitialiseStack>:
     7ba:	fc 01       	movw	r30, r24
     7bc:	60 83       	st	Z, r22
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	70 83       	st	Z, r23
     7c2:	31 97       	sbiw	r30, 0x01	; 1
     7c4:	10 82       	st	Z, r1
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	10 82       	st	Z, r1
     7ca:	31 97       	sbiw	r30, 0x01	; 1
     7cc:	20 e8       	ldi	r18, 0x80	; 128
     7ce:	20 83       	st	Z, r18
     7d0:	31 97       	sbiw	r30, 0x01	; 1
     7d2:	10 82       	st	Z, r1
     7d4:	31 97       	sbiw	r30, 0x01	; 1
     7d6:	10 82       	st	Z, r1
     7d8:	31 97       	sbiw	r30, 0x01	; 1
     7da:	10 82       	st	Z, r1
     7dc:	77 97       	sbiw	r30, 0x17	; 23
     7de:	40 83       	st	Z, r20
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	50 83       	st	Z, r21
     7e4:	86 97       	sbiw	r24, 0x26	; 38
     7e6:	08 95       	ret

000007e8 <xPortStartScheduler>:
     7e8:	dc df       	rcall	.-72     	; 0x7a2 <prvSetupTimerInterrupt>
     7ea:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <pxCurrentTCB>
     7ee:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
     7f2:	cd 91       	ld	r28, X+
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	dd 91       	ld	r29, X+
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	ff 91       	pop	r31
     7fc:	ef 91       	pop	r30
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	bf 91       	pop	r27
     804:	af 91       	pop	r26
     806:	9f 91       	pop	r25
     808:	8f 91       	pop	r24
     80a:	7f 91       	pop	r23
     80c:	6f 91       	pop	r22
     80e:	5f 91       	pop	r21
     810:	4f 91       	pop	r20
     812:	3f 91       	pop	r19
     814:	2f 91       	pop	r18
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
     822:	bf 90       	pop	r11
     824:	af 90       	pop	r10
     826:	9f 90       	pop	r9
     828:	8f 90       	pop	r8
     82a:	7f 90       	pop	r7
     82c:	6f 90       	pop	r6
     82e:	5f 90       	pop	r5
     830:	4f 90       	pop	r4
     832:	3f 90       	pop	r3
     834:	2f 90       	pop	r2
     836:	1f 90       	pop	r1
     838:	0f 90       	pop	r0
     83a:	0c be       	out	0x3c, r0	; 60
     83c:	0f 90       	pop	r0
     83e:	0b be       	out	0x3b, r0	; 59
     840:	0f 90       	pop	r0
     842:	0f be       	out	0x3f, r0	; 63
     844:	0f 90       	pop	r0
     846:	08 95       	ret
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	08 95       	ret

0000084c <vPortYield>:
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	0f 92       	push	r0
     854:	0b b6       	in	r0, 0x3b	; 59
     856:	0f 92       	push	r0
     858:	0c b6       	in	r0, 0x3c	; 60
     85a:	0f 92       	push	r0
     85c:	1f 92       	push	r1
     85e:	11 24       	eor	r1, r1
     860:	2f 92       	push	r2
     862:	3f 92       	push	r3
     864:	4f 92       	push	r4
     866:	5f 92       	push	r5
     868:	6f 92       	push	r6
     86a:	7f 92       	push	r7
     86c:	8f 92       	push	r8
     86e:	9f 92       	push	r9
     870:	af 92       	push	r10
     872:	bf 92       	push	r11
     874:	cf 92       	push	r12
     876:	df 92       	push	r13
     878:	ef 92       	push	r14
     87a:	ff 92       	push	r15
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	2f 93       	push	r18
     882:	3f 93       	push	r19
     884:	4f 93       	push	r20
     886:	5f 93       	push	r21
     888:	6f 93       	push	r22
     88a:	7f 93       	push	r23
     88c:	8f 93       	push	r24
     88e:	9f 93       	push	r25
     890:	af 93       	push	r26
     892:	bf 93       	push	r27
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
     89c:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <pxCurrentTCB>
     8a0:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
     8a4:	0d b6       	in	r0, 0x3d	; 61
     8a6:	0d 92       	st	X+, r0
     8a8:	0e b6       	in	r0, 0x3e	; 62
     8aa:	0d 92       	st	X+, r0
     8ac:	0e 94 27 10 	call	0x204e	; 0x204e <vTaskSwitchContext>
     8b0:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <pxCurrentTCB>
     8b4:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
     8b8:	cd 91       	ld	r28, X+
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	dd 91       	ld	r29, X+
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	7f 91       	pop	r23
     8d2:	6f 91       	pop	r22
     8d4:	5f 91       	pop	r21
     8d6:	4f 91       	pop	r20
     8d8:	3f 91       	pop	r19
     8da:	2f 91       	pop	r18
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	3f 90       	pop	r3
     8fa:	2f 90       	pop	r2
     8fc:	1f 90       	pop	r1
     8fe:	0f 90       	pop	r0
     900:	0c be       	out	0x3c, r0	; 60
     902:	0f 90       	pop	r0
     904:	0b be       	out	0x3b, r0	; 59
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	08 95       	ret

0000090e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	0f 92       	push	r0
     916:	0b b6       	in	r0, 0x3b	; 59
     918:	0f 92       	push	r0
     91a:	0c b6       	in	r0, 0x3c	; 60
     91c:	0f 92       	push	r0
     91e:	1f 92       	push	r1
     920:	11 24       	eor	r1, r1
     922:	2f 92       	push	r2
     924:	3f 92       	push	r3
     926:	4f 92       	push	r4
     928:	5f 92       	push	r5
     92a:	6f 92       	push	r6
     92c:	7f 92       	push	r7
     92e:	8f 92       	push	r8
     930:	9f 92       	push	r9
     932:	af 92       	push	r10
     934:	bf 92       	push	r11
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	2f 93       	push	r18
     944:	3f 93       	push	r19
     946:	4f 93       	push	r20
     948:	5f 93       	push	r21
     94a:	6f 93       	push	r22
     94c:	7f 93       	push	r23
     94e:	8f 93       	push	r24
     950:	9f 93       	push	r25
     952:	af 93       	push	r26
     954:	bf 93       	push	r27
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
     95e:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <pxCurrentTCB>
     962:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
     966:	0d b6       	in	r0, 0x3d	; 61
     968:	0d 92       	st	X+, r0
     96a:	0e b6       	in	r0, 0x3e	; 62
     96c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     96e:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     970:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <xTaskIncrementTick>
     974:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     976:	0e 94 27 10 	call	0x204e	; 0x204e <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     97a:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <pxCurrentTCB>
     97e:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
     982:	cd 91       	ld	r28, X+
     984:	cd bf       	out	0x3d, r28	; 61
     986:	dd 91       	ld	r29, X+
     988:	de bf       	out	0x3e, r29	; 62
     98a:	ff 91       	pop	r31
     98c:	ef 91       	pop	r30
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	af 90       	pop	r10
     9b6:	9f 90       	pop	r9
     9b8:	8f 90       	pop	r8
     9ba:	7f 90       	pop	r7
     9bc:	6f 90       	pop	r6
     9be:	5f 90       	pop	r5
     9c0:	4f 90       	pop	r4
     9c2:	3f 90       	pop	r3
     9c4:	2f 90       	pop	r2
     9c6:	1f 90       	pop	r1
     9c8:	0f 90       	pop	r0
     9ca:	0c be       	out	0x3c, r0	; 60
     9cc:	0f 90       	pop	r0
     9ce:	0b be       	out	0x3b, r0	; 59
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     9d6:	08 95       	ret

000009d8 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     9d8:	9a df       	rcall	.-204    	; 0x90e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     9da:	18 95       	reti

000009dc <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	0f 92       	push	r0
     9e2:	fc 01       	movw	r30, r24
     9e4:	86 8d       	ldd	r24, Z+30	; 0x1e
     9e6:	81 11       	cpse	r24, r1
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <prvIsQueueEmpty+0x12>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <prvIsQueueEmpty+0x14>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	08 95       	ret

000009f6 <prvIsQueueFull>:
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	0f 92       	push	r0
     9fc:	fc 01       	movw	r30, r24
     9fe:	26 8d       	ldd	r18, Z+30	; 0x1e
     a00:	87 8d       	ldd	r24, Z+31	; 0x1f
     a02:	28 13       	cpse	r18, r24
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <prvIsQueueFull+0x14>
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <prvIsQueueFull+0x16>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	08 95       	ret

00000a12 <prvCopyDataToQueue>:
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	ec 01       	movw	r28, r24
     a1c:	04 2f       	mov	r16, r20
     a1e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a20:	48 a1       	ldd	r20, Y+32	; 0x20
     a22:	41 11       	cpse	r20, r1
     a24:	0c c0       	rjmp	.+24     	; 0xa3e <prvCopyDataToQueue+0x2c>
     a26:	88 81       	ld	r24, Y
     a28:	99 81       	ldd	r25, Y+1	; 0x01
     a2a:	89 2b       	or	r24, r25
     a2c:	09 f0       	breq	.+2      	; 0xa30 <prvCopyDataToQueue+0x1e>
     a2e:	42 c0       	rjmp	.+132    	; 0xab4 <prvCopyDataToQueue+0xa2>
     a30:	8c 81       	ldd	r24, Y+4	; 0x04
     a32:	9d 81       	ldd	r25, Y+5	; 0x05
     a34:	0e 94 38 12 	call	0x2470	; 0x2470 <xTaskPriorityDisinherit>
     a38:	1d 82       	std	Y+5, r1	; 0x05
     a3a:	1c 82       	std	Y+4, r1	; 0x04
     a3c:	42 c0       	rjmp	.+132    	; 0xac2 <prvCopyDataToQueue+0xb0>
     a3e:	01 11       	cpse	r16, r1
     a40:	17 c0       	rjmp	.+46     	; 0xa70 <prvCopyDataToQueue+0x5e>
     a42:	50 e0       	ldi	r21, 0x00	; 0
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	9b 81       	ldd	r25, Y+3	; 0x03
     a48:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <memcpy>
     a4c:	28 a1       	ldd	r18, Y+32	; 0x20
     a4e:	8a 81       	ldd	r24, Y+2	; 0x02
     a50:	9b 81       	ldd	r25, Y+3	; 0x03
     a52:	82 0f       	add	r24, r18
     a54:	91 1d       	adc	r25, r1
     a56:	9b 83       	std	Y+3, r25	; 0x03
     a58:	8a 83       	std	Y+2, r24	; 0x02
     a5a:	2c 81       	ldd	r18, Y+4	; 0x04
     a5c:	3d 81       	ldd	r19, Y+5	; 0x05
     a5e:	82 17       	cp	r24, r18
     a60:	93 07       	cpc	r25, r19
     a62:	50 f1       	brcs	.+84     	; 0xab8 <prvCopyDataToQueue+0xa6>
     a64:	88 81       	ld	r24, Y
     a66:	99 81       	ldd	r25, Y+1	; 0x01
     a68:	9b 83       	std	Y+3, r25	; 0x03
     a6a:	8a 83       	std	Y+2, r24	; 0x02
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	29 c0       	rjmp	.+82     	; 0xac2 <prvCopyDataToQueue+0xb0>
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	8e 81       	ldd	r24, Y+6	; 0x06
     a74:	9f 81       	ldd	r25, Y+7	; 0x07
     a76:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <memcpy>
     a7a:	88 a1       	ldd	r24, Y+32	; 0x20
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	91 95       	neg	r25
     a80:	81 95       	neg	r24
     a82:	91 09       	sbc	r25, r1
     a84:	2e 81       	ldd	r18, Y+6	; 0x06
     a86:	3f 81       	ldd	r19, Y+7	; 0x07
     a88:	28 0f       	add	r18, r24
     a8a:	39 1f       	adc	r19, r25
     a8c:	3f 83       	std	Y+7, r19	; 0x07
     a8e:	2e 83       	std	Y+6, r18	; 0x06
     a90:	48 81       	ld	r20, Y
     a92:	59 81       	ldd	r21, Y+1	; 0x01
     a94:	24 17       	cp	r18, r20
     a96:	35 07       	cpc	r19, r21
     a98:	30 f4       	brcc	.+12     	; 0xaa6 <prvCopyDataToQueue+0x94>
     a9a:	2c 81       	ldd	r18, Y+4	; 0x04
     a9c:	3d 81       	ldd	r19, Y+5	; 0x05
     a9e:	82 0f       	add	r24, r18
     aa0:	93 1f       	adc	r25, r19
     aa2:	9f 83       	std	Y+7, r25	; 0x07
     aa4:	8e 83       	std	Y+6, r24	; 0x06
     aa6:	02 30       	cpi	r16, 0x02	; 2
     aa8:	49 f4       	brne	.+18     	; 0xabc <prvCopyDataToQueue+0xaa>
     aaa:	11 23       	and	r17, r17
     aac:	49 f0       	breq	.+18     	; 0xac0 <prvCopyDataToQueue+0xae>
     aae:	11 50       	subi	r17, 0x01	; 1
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	07 c0       	rjmp	.+14     	; 0xac2 <prvCopyDataToQueue+0xb0>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <prvCopyDataToQueue+0xb0>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <prvCopyDataToQueue+0xb0>
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <prvCopyDataToQueue+0xb0>
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	1f 5f       	subi	r17, 0xFF	; 255
     ac4:	1e 8f       	std	Y+30, r17	; 0x1e
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <prvCopyDataFromQueue>:
     ad0:	fc 01       	movw	r30, r24
     ad2:	40 a1       	ldd	r20, Z+32	; 0x20
     ad4:	44 23       	and	r20, r20
     ad6:	a9 f0       	breq	.+42     	; 0xb02 <prvCopyDataFromQueue+0x32>
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	26 81       	ldd	r18, Z+6	; 0x06
     adc:	37 81       	ldd	r19, Z+7	; 0x07
     ade:	24 0f       	add	r18, r20
     ae0:	35 1f       	adc	r19, r21
     ae2:	37 83       	std	Z+7, r19	; 0x07
     ae4:	26 83       	std	Z+6, r18	; 0x06
     ae6:	84 81       	ldd	r24, Z+4	; 0x04
     ae8:	95 81       	ldd	r25, Z+5	; 0x05
     aea:	28 17       	cp	r18, r24
     aec:	39 07       	cpc	r19, r25
     aee:	20 f0       	brcs	.+8      	; 0xaf8 <prvCopyDataFromQueue+0x28>
     af0:	80 81       	ld	r24, Z
     af2:	91 81       	ldd	r25, Z+1	; 0x01
     af4:	97 83       	std	Z+7, r25	; 0x07
     af6:	86 83       	std	Z+6, r24	; 0x06
     af8:	cb 01       	movw	r24, r22
     afa:	66 81       	ldd	r22, Z+6	; 0x06
     afc:	77 81       	ldd	r23, Z+7	; 0x07
     afe:	0c 94 7d 26 	jmp	0x4cfa	; 0x4cfa <memcpy>
     b02:	08 95       	ret

00000b04 <prvUnlockQueue>:
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	ec 01       	movw	r28, r24
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	0f 92       	push	r0
     b12:	1a a1       	ldd	r17, Y+34	; 0x22
     b14:	0b c0       	rjmp	.+22     	; 0xb2c <prvUnlockQueue+0x28>
     b16:	8b 89       	ldd	r24, Y+19	; 0x13
     b18:	88 23       	and	r24, r24
     b1a:	51 f0       	breq	.+20     	; 0xb30 <prvUnlockQueue+0x2c>
     b1c:	ce 01       	movw	r24, r28
     b1e:	43 96       	adiw	r24, 0x13	; 19
     b20:	0e 94 e5 10 	call	0x21ca	; 0x21ca <xTaskRemoveFromEventList>
     b24:	81 11       	cpse	r24, r1
     b26:	0e 94 21 12 	call	0x2442	; 0x2442 <vTaskMissedYield>
     b2a:	11 50       	subi	r17, 0x01	; 1
     b2c:	11 16       	cp	r1, r17
     b2e:	9c f3       	brlt	.-26     	; 0xb16 <prvUnlockQueue+0x12>
     b30:	8f ef       	ldi	r24, 0xFF	; 255
     b32:	8a a3       	std	Y+34, r24	; 0x22
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	0f 92       	push	r0
     b3e:	19 a1       	ldd	r17, Y+33	; 0x21
     b40:	0b c0       	rjmp	.+22     	; 0xb58 <prvUnlockQueue+0x54>
     b42:	88 85       	ldd	r24, Y+8	; 0x08
     b44:	88 23       	and	r24, r24
     b46:	51 f0       	breq	.+20     	; 0xb5c <prvUnlockQueue+0x58>
     b48:	ce 01       	movw	r24, r28
     b4a:	08 96       	adiw	r24, 0x08	; 8
     b4c:	0e 94 e5 10 	call	0x21ca	; 0x21ca <xTaskRemoveFromEventList>
     b50:	81 11       	cpse	r24, r1
     b52:	0e 94 21 12 	call	0x2442	; 0x2442 <vTaskMissedYield>
     b56:	11 50       	subi	r17, 0x01	; 1
     b58:	11 16       	cp	r1, r17
     b5a:	9c f3       	brlt	.-26     	; 0xb42 <prvUnlockQueue+0x3e>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	89 a3       	std	Y+33, r24	; 0x21
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	08 95       	ret

00000b6c <xQueueGenericReset>:
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	ec 01       	movw	r28, r24
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	0f 92       	push	r0
     b78:	e8 81       	ld	r30, Y
     b7a:	f9 81       	ldd	r31, Y+1	; 0x01
     b7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b7e:	28 a1       	ldd	r18, Y+32	; 0x20
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	82 9f       	mul	r24, r18
     b86:	a0 01       	movw	r20, r0
     b88:	83 9f       	mul	r24, r19
     b8a:	50 0d       	add	r21, r0
     b8c:	92 9f       	mul	r25, r18
     b8e:	50 0d       	add	r21, r0
     b90:	11 24       	eor	r1, r1
     b92:	4e 0f       	add	r20, r30
     b94:	5f 1f       	adc	r21, r31
     b96:	5d 83       	std	Y+5, r21	; 0x05
     b98:	4c 83       	std	Y+4, r20	; 0x04
     b9a:	1e 8e       	std	Y+30, r1	; 0x1e
     b9c:	fb 83       	std	Y+3, r31	; 0x03
     b9e:	ea 83       	std	Y+2, r30	; 0x02
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	28 9f       	mul	r18, r24
     ba4:	a0 01       	movw	r20, r0
     ba6:	29 9f       	mul	r18, r25
     ba8:	50 0d       	add	r21, r0
     baa:	38 9f       	mul	r19, r24
     bac:	50 0d       	add	r21, r0
     bae:	11 24       	eor	r1, r1
     bb0:	cf 01       	movw	r24, r30
     bb2:	84 0f       	add	r24, r20
     bb4:	95 1f       	adc	r25, r21
     bb6:	9f 83       	std	Y+7, r25	; 0x07
     bb8:	8e 83       	std	Y+6, r24	; 0x06
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	89 a3       	std	Y+33, r24	; 0x21
     bbe:	8a a3       	std	Y+34, r24	; 0x22
     bc0:	61 11       	cpse	r22, r1
     bc2:	0b c0       	rjmp	.+22     	; 0xbda <xQueueGenericReset+0x6e>
     bc4:	88 85       	ldd	r24, Y+8	; 0x08
     bc6:	88 23       	and	r24, r24
     bc8:	71 f0       	breq	.+28     	; 0xbe6 <xQueueGenericReset+0x7a>
     bca:	ce 01       	movw	r24, r28
     bcc:	08 96       	adiw	r24, 0x08	; 8
     bce:	0e 94 e5 10 	call	0x21ca	; 0x21ca <xTaskRemoveFromEventList>
     bd2:	88 23       	and	r24, r24
     bd4:	41 f0       	breq	.+16     	; 0xbe6 <xQueueGenericReset+0x7a>
     bd6:	3a de       	rcall	.-908    	; 0x84c <vPortYield>
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <xQueueGenericReset+0x7a>
     bda:	ce 01       	movw	r24, r28
     bdc:	08 96       	adiw	r24, 0x08	; 8
     bde:	68 dd       	rcall	.-1328   	; 0x6b0 <vListInitialise>
     be0:	ce 01       	movw	r24, r28
     be2:	43 96       	adiw	r24, 0x13	; 19
     be4:	65 dd       	rcall	.-1334   	; 0x6b0 <vListInitialise>
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	08 95       	ret

00000bf2 <prvInitialiseNewQueue>:
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	f8 01       	movw	r30, r16
     bf8:	61 11       	cpse	r22, r1
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <prvInitialiseNewQueue+0x10>
     bfc:	11 83       	std	Z+1, r17	; 0x01
     bfe:	00 83       	st	Z, r16
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <prvInitialiseNewQueue+0x14>
     c02:	51 83       	std	Z+1, r21	; 0x01
     c04:	40 83       	st	Z, r20
     c06:	87 8f       	std	Z+31, r24	; 0x1f
     c08:	60 a3       	std	Z+32, r22	; 0x20
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	cf 01       	movw	r24, r30
     c0e:	ae df       	rcall	.-164    	; 0xb6c <xQueueGenericReset>
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	08 95       	ret

00000c16 <xQueueGenericCreate>:
     c16:	df 92       	push	r13
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	f8 2e       	mov	r15, r24
     c26:	e6 2e       	mov	r14, r22
     c28:	d4 2e       	mov	r13, r20
     c2a:	86 9f       	mul	r24, r22
     c2c:	c0 01       	movw	r24, r0
     c2e:	11 24       	eor	r1, r1
     c30:	83 96       	adiw	r24, 0x23	; 35
     c32:	58 dc       	rcall	.-1872   	; 0x4e4 <pvPortMalloc>
     c34:	ec 01       	movw	r28, r24
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	41 f0       	breq	.+16     	; 0xc4a <xQueueGenericCreate+0x34>
     c3a:	8c 01       	movw	r16, r24
     c3c:	2d 2d       	mov	r18, r13
     c3e:	ac 01       	movw	r20, r24
     c40:	4d 5d       	subi	r20, 0xDD	; 221
     c42:	5f 4f       	sbci	r21, 0xFF	; 255
     c44:	6e 2d       	mov	r22, r14
     c46:	8f 2d       	mov	r24, r15
     c48:	d4 df       	rcall	.-88     	; 0xbf2 <prvInitialiseNewQueue>
     c4a:	ce 01       	movw	r24, r28
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	08 95       	ret

00000c5c <xQueueGenericSend>:
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	29 97       	sbiw	r28, 0x09	; 9
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	7c 01       	movw	r14, r24
     c7e:	6b 01       	movw	r12, r22
     c80:	2e 83       	std	Y+6, r18	; 0x06
     c82:	3f 83       	std	Y+7, r19	; 0x07
     c84:	48 87       	std	Y+8, r20	; 0x08
     c86:	59 87       	std	Y+9, r21	; 0x09
     c88:	10 e0       	ldi	r17, 0x00	; 0
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	0f 92       	push	r0
     c90:	f7 01       	movw	r30, r14
     c92:	96 8d       	ldd	r25, Z+30	; 0x1e
     c94:	87 8d       	ldd	r24, Z+31	; 0x1f
     c96:	98 17       	cp	r25, r24
     c98:	10 f0       	brcs	.+4      	; 0xc9e <xQueueGenericSend+0x42>
     c9a:	02 30       	cpi	r16, 0x02	; 2
     c9c:	b1 f4       	brne	.+44     	; 0xcca <xQueueGenericSend+0x6e>
     c9e:	40 2f       	mov	r20, r16
     ca0:	b6 01       	movw	r22, r12
     ca2:	c7 01       	movw	r24, r14
     ca4:	b6 de       	rcall	.-660    	; 0xa12 <prvCopyDataToQueue>
     ca6:	f7 01       	movw	r30, r14
     ca8:	93 89       	ldd	r25, Z+19	; 0x13
     caa:	99 23       	and	r25, r25
     cac:	41 f0       	breq	.+16     	; 0xcbe <xQueueGenericSend+0x62>
     cae:	c7 01       	movw	r24, r14
     cb0:	43 96       	adiw	r24, 0x13	; 19
     cb2:	0e 94 e5 10 	call	0x21ca	; 0x21ca <xTaskRemoveFromEventList>
     cb6:	88 23       	and	r24, r24
     cb8:	21 f0       	breq	.+8      	; 0xcc2 <xQueueGenericSend+0x66>
     cba:	c8 dd       	rcall	.-1136   	; 0x84c <vPortYield>
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <xQueueGenericSend+0x66>
     cbe:	81 11       	cpse	r24, r1
     cc0:	c5 dd       	rcall	.-1142   	; 0x84c <vPortYield>
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	4c c0       	rjmp	.+152    	; 0xd62 <xQueueGenericSend+0x106>
     cca:	8e 81       	ldd	r24, Y+6	; 0x06
     ccc:	9f 81       	ldd	r25, Y+7	; 0x07
     cce:	a8 85       	ldd	r26, Y+8	; 0x08
     cd0:	b9 85       	ldd	r27, Y+9	; 0x09
     cd2:	89 2b       	or	r24, r25
     cd4:	8a 2b       	or	r24, r26
     cd6:	8b 2b       	or	r24, r27
     cd8:	21 f4       	brne	.+8      	; 0xce2 <xQueueGenericSend+0x86>
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	40 c0       	rjmp	.+128    	; 0xd62 <xQueueGenericSend+0x106>
     ce2:	11 11       	cpse	r17, r1
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <xQueueGenericSend+0x94>
     ce6:	ce 01       	movw	r24, r28
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	0e 94 aa 11 	call	0x2354	; 0x2354 <vTaskInternalSetTimeOutState>
     cee:	11 e0       	ldi	r17, 0x01	; 1
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	10 d7       	rcall	.+3616   	; 0x1b16 <vTaskSuspendAll>
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	0f 92       	push	r0
     cfc:	f7 01       	movw	r30, r14
     cfe:	81 a1       	ldd	r24, Z+33	; 0x21
     d00:	8f 3f       	cpi	r24, 0xFF	; 255
     d02:	09 f4       	brne	.+2      	; 0xd06 <xQueueGenericSend+0xaa>
     d04:	11 a2       	std	Z+33, r1	; 0x21
     d06:	f7 01       	movw	r30, r14
     d08:	82 a1       	ldd	r24, Z+34	; 0x22
     d0a:	8f 3f       	cpi	r24, 0xFF	; 255
     d0c:	09 f4       	brne	.+2      	; 0xd10 <xQueueGenericSend+0xb4>
     d0e:	12 a2       	std	Z+34, r1	; 0x22
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	be 01       	movw	r22, r28
     d16:	6a 5f       	subi	r22, 0xFA	; 250
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskCheckForTimeOut>
     d22:	81 11       	cpse	r24, r1
     d24:	19 c0       	rjmp	.+50     	; 0xd58 <xQueueGenericSend+0xfc>
     d26:	c7 01       	movw	r24, r14
     d28:	66 de       	rcall	.-820    	; 0x9f6 <prvIsQueueFull>
     d2a:	88 23       	and	r24, r24
     d2c:	81 f0       	breq	.+32     	; 0xd4e <xQueueGenericSend+0xf2>
     d2e:	4e 81       	ldd	r20, Y+6	; 0x06
     d30:	5f 81       	ldd	r21, Y+7	; 0x07
     d32:	68 85       	ldd	r22, Y+8	; 0x08
     d34:	79 85       	ldd	r23, Y+9	; 0x09
     d36:	c7 01       	movw	r24, r14
     d38:	08 96       	adiw	r24, 0x08	; 8
     d3a:	0e 94 8c 10 	call	0x2118	; 0x2118 <vTaskPlaceOnEventList>
     d3e:	c7 01       	movw	r24, r14
     d40:	e1 de       	rcall	.-574    	; 0xb04 <prvUnlockQueue>
     d42:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <xTaskResumeAll>
     d46:	81 11       	cpse	r24, r1
     d48:	a0 cf       	rjmp	.-192    	; 0xc8a <xQueueGenericSend+0x2e>
     d4a:	80 dd       	rcall	.-1280   	; 0x84c <vPortYield>
     d4c:	9e cf       	rjmp	.-196    	; 0xc8a <xQueueGenericSend+0x2e>
     d4e:	c7 01       	movw	r24, r14
     d50:	d9 de       	rcall	.-590    	; 0xb04 <prvUnlockQueue>
     d52:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <xTaskResumeAll>
     d56:	99 cf       	rjmp	.-206    	; 0xc8a <xQueueGenericSend+0x2e>
     d58:	c7 01       	movw	r24, r14
     d5a:	d4 de       	rcall	.-600    	; 0xb04 <prvUnlockQueue>
     d5c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <xTaskResumeAll>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	29 96       	adiw	r28, 0x09	; 9
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	df 90       	pop	r13
     d7c:	cf 90       	pop	r12
     d7e:	08 95       	ret

00000d80 <prvInitialiseMutex>:
     d80:	0f 93       	push	r16
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	69 f0       	breq	.+26     	; 0xda0 <prvInitialiseMutex+0x20>
     d86:	fc 01       	movw	r30, r24
     d88:	15 82       	std	Z+5, r1	; 0x05
     d8a:	14 82       	std	Z+4, r1	; 0x04
     d8c:	11 82       	std	Z+1, r1	; 0x01
     d8e:	10 82       	st	Z, r1
     d90:	16 82       	std	Z+6, r1	; 0x06
     d92:	00 e0       	ldi	r16, 0x00	; 0
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	a9 01       	movw	r20, r18
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	5e df       	rcall	.-324    	; 0xc5c <xQueueGenericSend>
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <xQueueCreateMutex>:
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	48 2f       	mov	r20, r24
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	33 df       	rcall	.-410    	; 0xc16 <xQueueGenericCreate>
     db0:	ec 01       	movw	r28, r24
     db2:	e6 df       	rcall	.-52     	; 0xd80 <prvInitialiseMutex>
     db4:	ce 01       	movw	r24, r28
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <xQueueGenericSendFromISR>:
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	8a 01       	movw	r16, r20
     dca:	fc 01       	movw	r30, r24
     dcc:	56 8d       	ldd	r21, Z+30	; 0x1e
     dce:	37 8d       	ldd	r19, Z+31	; 0x1f
     dd0:	53 17       	cp	r21, r19
     dd2:	10 f0       	brcs	.+4      	; 0xdd8 <xQueueGenericSendFromISR+0x1c>
     dd4:	22 30       	cpi	r18, 0x02	; 2
     dd6:	f9 f4       	brne	.+62     	; 0xe16 <xQueueGenericSendFromISR+0x5a>
     dd8:	42 2f       	mov	r20, r18
     dda:	78 01       	movw	r14, r16
     ddc:	ec 01       	movw	r28, r24
     dde:	1a a1       	ldd	r17, Y+34	; 0x22
     de0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     de2:	ce 01       	movw	r24, r28
     de4:	16 de       	rcall	.-980    	; 0xa12 <prvCopyDataToQueue>
     de6:	1f 3f       	cpi	r17, 0xFF	; 255
     de8:	81 f4       	brne	.+32     	; 0xe0a <xQueueGenericSendFromISR+0x4e>
     dea:	8b 89       	ldd	r24, Y+19	; 0x13
     dec:	88 23       	and	r24, r24
     dee:	a9 f0       	breq	.+42     	; 0xe1a <xQueueGenericSendFromISR+0x5e>
     df0:	ce 01       	movw	r24, r28
     df2:	43 96       	adiw	r24, 0x13	; 19
     df4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <xTaskRemoveFromEventList>
     df8:	88 23       	and	r24, r24
     dfa:	89 f0       	breq	.+34     	; 0xe1e <xQueueGenericSendFromISR+0x62>
     dfc:	e1 14       	cp	r14, r1
     dfe:	f1 04       	cpc	r15, r1
     e00:	81 f0       	breq	.+32     	; 0xe22 <xQueueGenericSendFromISR+0x66>
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	f7 01       	movw	r30, r14
     e06:	80 83       	st	Z, r24
     e08:	0d c0       	rjmp	.+26     	; 0xe24 <xQueueGenericSendFromISR+0x68>
     e0a:	ff 24       	eor	r15, r15
     e0c:	f3 94       	inc	r15
     e0e:	f1 0e       	add	r15, r17
     e10:	fa a2       	std	Y+34, r15	; 0x22
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	07 c0       	rjmp	.+14     	; 0xe24 <xQueueGenericSendFromISR+0x68>
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <xQueueGenericSendFromISR+0x68>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <xQueueGenericSendFromISR+0x68>
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <xQueueGenericSendFromISR+0x68>
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	08 95       	ret

00000e32 <xQueueReceive>:
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	29 97       	sbiw	r28, 0x09	; 9
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	8c 01       	movw	r16, r24
     e54:	6b 01       	movw	r12, r22
     e56:	2e 83       	std	Y+6, r18	; 0x06
     e58:	3f 83       	std	Y+7, r19	; 0x07
     e5a:	48 87       	std	Y+8, r20	; 0x08
     e5c:	59 87       	std	Y+9, r21	; 0x09
     e5e:	e1 2c       	mov	r14, r1
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	0f 92       	push	r0
     e66:	f8 01       	movw	r30, r16
     e68:	f6 8c       	ldd	r15, Z+30	; 0x1e
     e6a:	ff 20       	and	r15, r15
     e6c:	99 f0       	breq	.+38     	; 0xe94 <xQueueReceive+0x62>
     e6e:	b6 01       	movw	r22, r12
     e70:	c8 01       	movw	r24, r16
     e72:	2e de       	rcall	.-932    	; 0xad0 <prvCopyDataFromQueue>
     e74:	fa 94       	dec	r15
     e76:	f8 01       	movw	r30, r16
     e78:	f6 8e       	std	Z+30, r15	; 0x1e
     e7a:	80 85       	ldd	r24, Z+8	; 0x08
     e7c:	88 23       	and	r24, r24
     e7e:	31 f0       	breq	.+12     	; 0xe8c <xQueueReceive+0x5a>
     e80:	c8 01       	movw	r24, r16
     e82:	08 96       	adiw	r24, 0x08	; 8
     e84:	0e 94 e5 10 	call	0x21ca	; 0x21ca <xTaskRemoveFromEventList>
     e88:	81 11       	cpse	r24, r1
     e8a:	e0 dc       	rcall	.-1600   	; 0x84c <vPortYield>
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	4f c0       	rjmp	.+158    	; 0xf32 <xQueueReceive+0x100>
     e94:	8e 81       	ldd	r24, Y+6	; 0x06
     e96:	9f 81       	ldd	r25, Y+7	; 0x07
     e98:	a8 85       	ldd	r26, Y+8	; 0x08
     e9a:	b9 85       	ldd	r27, Y+9	; 0x09
     e9c:	89 2b       	or	r24, r25
     e9e:	8a 2b       	or	r24, r26
     ea0:	8b 2b       	or	r24, r27
     ea2:	21 f4       	brne	.+8      	; 0xeac <xQueueReceive+0x7a>
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	43 c0       	rjmp	.+134    	; 0xf32 <xQueueReceive+0x100>
     eac:	e1 10       	cpse	r14, r1
     eae:	06 c0       	rjmp	.+12     	; 0xebc <xQueueReceive+0x8a>
     eb0:	ce 01       	movw	r24, r28
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	0e 94 aa 11 	call	0x2354	; 0x2354 <vTaskInternalSetTimeOutState>
     eb8:	ee 24       	eor	r14, r14
     eba:	e3 94       	inc	r14
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	2a d6       	rcall	.+3156   	; 0x1b16 <vTaskSuspendAll>
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	f8 01       	movw	r30, r16
     eca:	81 a1       	ldd	r24, Z+33	; 0x21
     ecc:	8f 3f       	cpi	r24, 0xFF	; 255
     ece:	09 f4       	brne	.+2      	; 0xed2 <xQueueReceive+0xa0>
     ed0:	11 a2       	std	Z+33, r1	; 0x21
     ed2:	f8 01       	movw	r30, r16
     ed4:	82 a1       	ldd	r24, Z+34	; 0x22
     ed6:	8f 3f       	cpi	r24, 0xFF	; 255
     ed8:	09 f4       	brne	.+2      	; 0xedc <xQueueReceive+0xaa>
     eda:	12 a2       	std	Z+34, r1	; 0x22
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	be 01       	movw	r22, r28
     ee2:	6a 5f       	subi	r22, 0xFA	; 250
     ee4:	7f 4f       	sbci	r23, 0xFF	; 255
     ee6:	ce 01       	movw	r24, r28
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	0e 94 bb 11 	call	0x2376	; 0x2376 <xTaskCheckForTimeOut>
     eee:	81 11       	cpse	r24, r1
     ef0:	17 c0       	rjmp	.+46     	; 0xf20 <xQueueReceive+0xee>
     ef2:	c8 01       	movw	r24, r16
     ef4:	73 dd       	rcall	.-1306   	; 0x9dc <prvIsQueueEmpty>
     ef6:	88 23       	and	r24, r24
     ef8:	79 f0       	breq	.+30     	; 0xf18 <xQueueReceive+0xe6>
     efa:	4e 81       	ldd	r20, Y+6	; 0x06
     efc:	5f 81       	ldd	r21, Y+7	; 0x07
     efe:	68 85       	ldd	r22, Y+8	; 0x08
     f00:	79 85       	ldd	r23, Y+9	; 0x09
     f02:	c8 01       	movw	r24, r16
     f04:	43 96       	adiw	r24, 0x13	; 19
     f06:	0e 94 8c 10 	call	0x2118	; 0x2118 <vTaskPlaceOnEventList>
     f0a:	c8 01       	movw	r24, r16
     f0c:	fb dd       	rcall	.-1034   	; 0xb04 <prvUnlockQueue>
     f0e:	43 d7       	rcall	.+3718   	; 0x1d96 <xTaskResumeAll>
     f10:	81 11       	cpse	r24, r1
     f12:	a6 cf       	rjmp	.-180    	; 0xe60 <xQueueReceive+0x2e>
     f14:	9b dc       	rcall	.-1738   	; 0x84c <vPortYield>
     f16:	a4 cf       	rjmp	.-184    	; 0xe60 <xQueueReceive+0x2e>
     f18:	c8 01       	movw	r24, r16
     f1a:	f4 dd       	rcall	.-1048   	; 0xb04 <prvUnlockQueue>
     f1c:	3c d7       	rcall	.+3704   	; 0x1d96 <xTaskResumeAll>
     f1e:	a0 cf       	rjmp	.-192    	; 0xe60 <xQueueReceive+0x2e>
     f20:	c8 01       	movw	r24, r16
     f22:	f0 dd       	rcall	.-1056   	; 0xb04 <prvUnlockQueue>
     f24:	38 d7       	rcall	.+3696   	; 0x1d96 <xTaskResumeAll>
     f26:	c8 01       	movw	r24, r16
     f28:	59 dd       	rcall	.-1358   	; 0x9dc <prvIsQueueEmpty>
     f2a:	88 23       	and	r24, r24
     f2c:	09 f4       	brne	.+2      	; 0xf30 <xQueueReceive+0xfe>
     f2e:	98 cf       	rjmp	.-208    	; 0xe60 <xQueueReceive+0x2e>
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	29 96       	adiw	r28, 0x09	; 9
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	08 95       	ret

00000f50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	0f 92       	push	r0
     f5c:	89 a1       	ldd	r24, Y+33	; 0x21
     f5e:	8f 3f       	cpi	r24, 0xFF	; 255
     f60:	09 f4       	brne	.+2      	; 0xf64 <vQueueWaitForMessageRestricted+0x14>
     f62:	19 a2       	std	Y+33, r1	; 0x21
     f64:	8a a1       	ldd	r24, Y+34	; 0x22
     f66:	8f 3f       	cpi	r24, 0xFF	; 255
     f68:	09 f4       	brne	.+2      	; 0xf6c <vQueueWaitForMessageRestricted+0x1c>
     f6a:	1a a2       	std	Y+34, r1	; 0x22
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f70:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f72:	81 11       	cpse	r24, r1
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f76:	ce 01       	movw	r24, r28
     f78:	43 96       	adiw	r24, 0x13	; 19
     f7a:	0e 94 a3 10 	call	0x2146	; 0x2146 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     f7e:	ce 01       	movw	r24, r28
     f80:	c1 dd       	rcall	.-1150   	; 0xb04 <prvUnlockQueue>
    }
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     f88:	fc 01       	movw	r30, r24
     f8a:	44 81       	ldd	r20, Z+4	; 0x04
     f8c:	55 81       	ldd	r21, Z+5	; 0x05
     f8e:	22 81       	ldd	r18, Z+2	; 0x02
     f90:	33 81       	ldd	r19, Z+3	; 0x03
     f92:	24 0f       	add	r18, r20
     f94:	35 1f       	adc	r19, r21
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	b9 01       	movw	r22, r18
     f9c:	68 1b       	sub	r22, r24
     f9e:	79 0b       	sbc	r23, r25
     fa0:	cb 01       	movw	r24, r22
     fa2:	64 17       	cp	r22, r20
     fa4:	75 07       	cpc	r23, r21
     fa6:	10 f0       	brcs	.+4      	; 0xfac <prvBytesInBuffer+0x24>
     fa8:	84 1b       	sub	r24, r20
     faa:	95 0b       	sbc	r25, r21
     fac:	08 95       	ret

00000fae <prvInitialiseNewStreamBuffer>:
     fae:	0f 93       	push	r16
     fb0:	fc 01       	movw	r30, r24
     fb2:	8f e0       	ldi	r24, 0x0F	; 15
     fb4:	df 01       	movw	r26, r30
     fb6:	1d 92       	st	X+, r1
     fb8:	8a 95       	dec	r24
     fba:	e9 f7       	brne	.-6      	; 0xfb6 <prvInitialiseNewStreamBuffer+0x8>
     fbc:	75 87       	std	Z+13, r23	; 0x0d
     fbe:	64 87       	std	Z+12, r22	; 0x0c
     fc0:	55 83       	std	Z+5, r21	; 0x05
     fc2:	44 83       	std	Z+4, r20	; 0x04
     fc4:	37 83       	std	Z+7, r19	; 0x07
     fc6:	26 83       	std	Z+6, r18	; 0x06
     fc8:	06 87       	std	Z+14, r16	; 0x0e
     fca:	0f 91       	pop	r16
     fcc:	08 95       	ret

00000fce <prvWriteBytesToBuffer>:
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	6c 01       	movw	r12, r24
     fe4:	5b 01       	movw	r10, r22
     fe6:	7a 01       	movw	r14, r20
     fe8:	fc 01       	movw	r30, r24
     fea:	c2 81       	ldd	r28, Z+2	; 0x02
     fec:	d3 81       	ldd	r29, Z+3	; 0x03
     fee:	04 81       	ldd	r16, Z+4	; 0x04
     ff0:	15 81       	ldd	r17, Z+5	; 0x05
     ff2:	0c 1b       	sub	r16, r28
     ff4:	1d 0b       	sbc	r17, r29
     ff6:	40 17       	cp	r20, r16
     ff8:	51 07       	cpc	r21, r17
     ffa:	08 f4       	brcc	.+2      	; 0xffe <prvWriteBytesToBuffer+0x30>
     ffc:	8a 01       	movw	r16, r20
     ffe:	f6 01       	movw	r30, r12
    1000:	84 85       	ldd	r24, Z+12	; 0x0c
    1002:	95 85       	ldd	r25, Z+13	; 0x0d
    1004:	a8 01       	movw	r20, r16
    1006:	b5 01       	movw	r22, r10
    1008:	8c 0f       	add	r24, r28
    100a:	9d 1f       	adc	r25, r29
    100c:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <memcpy>
    1010:	0e 15       	cp	r16, r14
    1012:	1f 05       	cpc	r17, r15
    1014:	58 f4       	brcc	.+22     	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
    1016:	a7 01       	movw	r20, r14
    1018:	40 1b       	sub	r20, r16
    101a:	51 0b       	sbc	r21, r17
    101c:	b5 01       	movw	r22, r10
    101e:	60 0f       	add	r22, r16
    1020:	71 1f       	adc	r23, r17
    1022:	f6 01       	movw	r30, r12
    1024:	84 85       	ldd	r24, Z+12	; 0x0c
    1026:	95 85       	ldd	r25, Z+13	; 0x0d
    1028:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <memcpy>
    102c:	ce 01       	movw	r24, r28
    102e:	8e 0d       	add	r24, r14
    1030:	9f 1d       	adc	r25, r15
    1032:	f6 01       	movw	r30, r12
    1034:	24 81       	ldd	r18, Z+4	; 0x04
    1036:	35 81       	ldd	r19, Z+5	; 0x05
    1038:	82 17       	cp	r24, r18
    103a:	93 07       	cpc	r25, r19
    103c:	10 f0       	brcs	.+4      	; 0x1042 <__EEPROM_REGION_LENGTH__+0x42>
    103e:	82 1b       	sub	r24, r18
    1040:	93 0b       	sbc	r25, r19
    1042:	f6 01       	movw	r30, r12
    1044:	93 83       	std	Z+3, r25	; 0x03
    1046:	82 83       	std	Z+2, r24	; 0x02
    1048:	c7 01       	movw	r24, r14
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	cf 90       	pop	r12
    105a:	bf 90       	pop	r11
    105c:	af 90       	pop	r10
    105e:	08 95       	ret

00001060 <prvWriteMessageToBuffer>:
    1060:	cf 92       	push	r12
    1062:	df 92       	push	r13
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	1f 92       	push	r1
    1072:	1f 92       	push	r1
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	7c 01       	movw	r14, r24
    107a:	6b 01       	movw	r12, r22
    107c:	5a 83       	std	Y+2, r21	; 0x02
    107e:	49 83       	std	Y+1, r20	; 0x01
    1080:	21 15       	cp	r18, r1
    1082:	31 05       	cpc	r19, r1
    1084:	c1 f0       	breq	.+48     	; 0x10b6 <prvWriteMessageToBuffer+0x56>
    1086:	fc 01       	movw	r30, r24
    1088:	86 85       	ldd	r24, Z+14	; 0x0e
    108a:	80 fd       	sbrc	r24, 0
    108c:	08 c0       	rjmp	.+16     	; 0x109e <prvWriteMessageToBuffer+0x3e>
    108e:	42 17       	cp	r20, r18
    1090:	53 07       	cpc	r21, r19
    1092:	08 f4       	brcc	.+2      	; 0x1096 <prvWriteMessageToBuffer+0x36>
    1094:	9a 01       	movw	r18, r20
    1096:	3a 83       	std	Y+2, r19	; 0x02
    1098:	29 83       	std	Y+1, r18	; 0x01
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	0f c0       	rjmp	.+30     	; 0x10bc <prvWriteMessageToBuffer+0x5c>
    109e:	20 17       	cp	r18, r16
    10a0:	31 07       	cpc	r19, r17
    10a2:	58 f0       	brcs	.+22     	; 0x10ba <prvWriteMessageToBuffer+0x5a>
    10a4:	42 e0       	ldi	r20, 0x02	; 2
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	be 01       	movw	r22, r28
    10aa:	6f 5f       	subi	r22, 0xFF	; 255
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	c7 01       	movw	r24, r14
    10b0:	8e df       	rcall	.-228    	; 0xfce <prvWriteBytesToBuffer>
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <prvWriteMessageToBuffer+0x5c>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <prvWriteMessageToBuffer+0x5c>
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	88 23       	and	r24, r24
    10be:	31 f0       	breq	.+12     	; 0x10cc <prvWriteMessageToBuffer+0x6c>
    10c0:	49 81       	ldd	r20, Y+1	; 0x01
    10c2:	5a 81       	ldd	r21, Y+2	; 0x02
    10c4:	b6 01       	movw	r22, r12
    10c6:	c7 01       	movw	r24, r14
    10c8:	82 df       	rcall	.-252    	; 0xfce <prvWriteBytesToBuffer>
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <prvWriteMessageToBuffer+0x70>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	df 90       	pop	r13
    10e2:	cf 90       	pop	r12
    10e4:	08 95       	ret

000010e6 <prvReadBytesFromBuffer>:
    10e6:	af 92       	push	r10
    10e8:	bf 92       	push	r11
    10ea:	cf 92       	push	r12
    10ec:	df 92       	push	r13
    10ee:	ef 92       	push	r14
    10f0:	ff 92       	push	r15
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	7c 01       	movw	r14, r24
    10fc:	5b 01       	movw	r10, r22
    10fe:	e9 01       	movw	r28, r18
    1100:	42 17       	cp	r20, r18
    1102:	53 07       	cpc	r21, r19
    1104:	08 f4       	brcc	.+2      	; 0x1108 <prvReadBytesFromBuffer+0x22>
    1106:	ea 01       	movw	r28, r20
    1108:	20 97       	sbiw	r28, 0x00	; 0
    110a:	81 f1       	breq	.+96     	; 0x116c <prvReadBytesFromBuffer+0x86>
    110c:	f7 01       	movw	r30, r14
    110e:	00 81       	ld	r16, Z
    1110:	11 81       	ldd	r17, Z+1	; 0x01
    1112:	84 81       	ldd	r24, Z+4	; 0x04
    1114:	95 81       	ldd	r25, Z+5	; 0x05
    1116:	80 1b       	sub	r24, r16
    1118:	91 0b       	sbc	r25, r17
    111a:	6e 01       	movw	r12, r28
    111c:	8c 17       	cp	r24, r28
    111e:	9d 07       	cpc	r25, r29
    1120:	08 f4       	brcc	.+2      	; 0x1124 <prvReadBytesFromBuffer+0x3e>
    1122:	6c 01       	movw	r12, r24
    1124:	f7 01       	movw	r30, r14
    1126:	64 85       	ldd	r22, Z+12	; 0x0c
    1128:	75 85       	ldd	r23, Z+13	; 0x0d
    112a:	60 0f       	add	r22, r16
    112c:	71 1f       	adc	r23, r17
    112e:	a6 01       	movw	r20, r12
    1130:	c5 01       	movw	r24, r10
    1132:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <memcpy>
    1136:	cc 16       	cp	r12, r28
    1138:	dd 06       	cpc	r13, r29
    113a:	58 f4       	brcc	.+22     	; 0x1152 <prvReadBytesFromBuffer+0x6c>
    113c:	ae 01       	movw	r20, r28
    113e:	4c 19       	sub	r20, r12
    1140:	5d 09       	sbc	r21, r13
    1142:	f7 01       	movw	r30, r14
    1144:	64 85       	ldd	r22, Z+12	; 0x0c
    1146:	75 85       	ldd	r23, Z+13	; 0x0d
    1148:	c5 01       	movw	r24, r10
    114a:	8c 0d       	add	r24, r12
    114c:	9d 1d       	adc	r25, r13
    114e:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <memcpy>
    1152:	0c 0f       	add	r16, r28
    1154:	1d 1f       	adc	r17, r29
    1156:	f7 01       	movw	r30, r14
    1158:	84 81       	ldd	r24, Z+4	; 0x04
    115a:	95 81       	ldd	r25, Z+5	; 0x05
    115c:	08 17       	cp	r16, r24
    115e:	19 07       	cpc	r17, r25
    1160:	10 f0       	brcs	.+4      	; 0x1166 <prvReadBytesFromBuffer+0x80>
    1162:	08 1b       	sub	r16, r24
    1164:	19 0b       	sbc	r17, r25
    1166:	f7 01       	movw	r30, r14
    1168:	11 83       	std	Z+1, r17	; 0x01
    116a:	00 83       	st	Z, r16
    116c:	ce 01       	movw	r24, r28
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	df 90       	pop	r13
    117c:	cf 90       	pop	r12
    117e:	bf 90       	pop	r11
    1180:	af 90       	pop	r10
    1182:	08 95       	ret

00001184 <prvReadMessageFromBuffer>:
    1184:	6f 92       	push	r6
    1186:	7f 92       	push	r7
    1188:	8f 92       	push	r8
    118a:	9f 92       	push	r9
    118c:	af 92       	push	r10
    118e:	bf 92       	push	r11
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	1f 92       	push	r1
    11a2:	1f 92       	push	r1
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	6c 01       	movw	r12, r24
    11aa:	4b 01       	movw	r8, r22
    11ac:	5a 01       	movw	r10, r20
    11ae:	79 01       	movw	r14, r18
    11b0:	01 15       	cp	r16, r1
    11b2:	11 05       	cpc	r17, r1
    11b4:	b1 f0       	breq	.+44     	; 0x11e2 <prvReadMessageFromBuffer+0x5e>
    11b6:	fc 01       	movw	r30, r24
    11b8:	60 80       	ld	r6, Z
    11ba:	71 80       	ldd	r7, Z+1	; 0x01
    11bc:	a8 01       	movw	r20, r16
    11be:	be 01       	movw	r22, r28
    11c0:	6f 5f       	subi	r22, 0xFF	; 255
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	90 df       	rcall	.-224    	; 0x10e6 <prvReadBytesFromBuffer>
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ca:	e0 1a       	sub	r14, r16
    11cc:	f1 0a       	sbc	r15, r17
    11ce:	a8 16       	cp	r10, r24
    11d0:	b9 06       	cpc	r11, r25
    11d2:	30 f4       	brcc	.+12     	; 0x11e0 <prvReadMessageFromBuffer+0x5c>
    11d4:	f6 01       	movw	r30, r12
    11d6:	71 82       	std	Z+1, r7	; 0x01
    11d8:	60 82       	st	Z, r6
    11da:	a1 2c       	mov	r10, r1
    11dc:	b1 2c       	mov	r11, r1
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <prvReadMessageFromBuffer+0x5e>
    11e0:	5c 01       	movw	r10, r24
    11e2:	97 01       	movw	r18, r14
    11e4:	a5 01       	movw	r20, r10
    11e6:	b4 01       	movw	r22, r8
    11e8:	c6 01       	movw	r24, r12
    11ea:	7d df       	rcall	.-262    	; 0x10e6 <prvReadBytesFromBuffer>
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	df 90       	pop	r13
    11fe:	cf 90       	pop	r12
    1200:	bf 90       	pop	r11
    1202:	af 90       	pop	r10
    1204:	9f 90       	pop	r9
    1206:	8f 90       	pop	r8
    1208:	7f 90       	pop	r7
    120a:	6f 90       	pop	r6
    120c:	08 95       	ret

0000120e <xStreamBufferGenericCreate>:
    120e:	cf 92       	push	r12
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	ec 01       	movw	r28, r24
    121e:	6b 01       	movw	r12, r22
    1220:	41 30       	cpi	r20, 0x01	; 1
    1222:	11 f4       	brne	.+4      	; 0x1228 <xStreamBufferGenericCreate+0x1a>
    1224:	01 e0       	ldi	r16, 0x01	; 1
    1226:	01 c0       	rjmp	.+2      	; 0x122a <xStreamBufferGenericCreate+0x1c>
    1228:	00 e0       	ldi	r16, 0x00	; 0
    122a:	c1 14       	cp	r12, r1
    122c:	d1 04       	cpc	r13, r1
    122e:	19 f4       	brne	.+6      	; 0x1236 <xStreamBufferGenericCreate+0x28>
    1230:	cc 24       	eor	r12, r12
    1232:	c3 94       	inc	r12
    1234:	d1 2c       	mov	r13, r1
    1236:	ce 01       	movw	r24, r28
    1238:	40 96       	adiw	r24, 0x10	; 16
    123a:	c8 17       	cp	r28, r24
    123c:	d9 07       	cpc	r29, r25
    123e:	20 f4       	brcc	.+8      	; 0x1248 <xStreamBufferGenericCreate+0x3a>
    1240:	21 96       	adiw	r28, 0x01	; 1
    1242:	50 d9       	rcall	.-3424   	; 0x4e4 <pvPortMalloc>
    1244:	7c 01       	movw	r14, r24
    1246:	02 c0       	rjmp	.+4      	; 0x124c <xStreamBufferGenericCreate+0x3e>
    1248:	e1 2c       	mov	r14, r1
    124a:	f1 2c       	mov	r15, r1
    124c:	e1 14       	cp	r14, r1
    124e:	f1 04       	cpc	r15, r1
    1250:	39 f0       	breq	.+14     	; 0x1260 <xStreamBufferGenericCreate+0x52>
    1252:	96 01       	movw	r18, r12
    1254:	ae 01       	movw	r20, r28
    1256:	b7 01       	movw	r22, r14
    1258:	61 5f       	subi	r22, 0xF1	; 241
    125a:	7f 4f       	sbci	r23, 0xFF	; 255
    125c:	c7 01       	movw	r24, r14
    125e:	a7 de       	rcall	.-690    	; 0xfae <prvInitialiseNewStreamBuffer>
    1260:	c7 01       	movw	r24, r14
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	08 95       	ret

00001272 <xStreamBufferReset>:
    1272:	0f 93       	push	r16
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	0f 92       	push	r0
    127a:	fc 01       	movw	r30, r24
    127c:	20 85       	ldd	r18, Z+8	; 0x08
    127e:	31 85       	ldd	r19, Z+9	; 0x09
    1280:	23 2b       	or	r18, r19
    1282:	71 f4       	brne	.+28     	; 0x12a0 <xStreamBufferReset+0x2e>
    1284:	22 85       	ldd	r18, Z+10	; 0x0a
    1286:	33 85       	ldd	r19, Z+11	; 0x0b
    1288:	23 2b       	or	r18, r19
    128a:	61 f4       	brne	.+24     	; 0x12a4 <xStreamBufferReset+0x32>
    128c:	26 81       	ldd	r18, Z+6	; 0x06
    128e:	37 81       	ldd	r19, Z+7	; 0x07
    1290:	44 81       	ldd	r20, Z+4	; 0x04
    1292:	55 81       	ldd	r21, Z+5	; 0x05
    1294:	64 85       	ldd	r22, Z+12	; 0x0c
    1296:	75 85       	ldd	r23, Z+13	; 0x0d
    1298:	06 85       	ldd	r16, Z+14	; 0x0e
    129a:	89 de       	rcall	.-750    	; 0xfae <prvInitialiseNewStreamBuffer>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <xStreamBufferReset+0x34>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <xStreamBufferReset+0x34>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	0f 91       	pop	r16
    12ac:	08 95       	ret

000012ae <xStreamBufferSpacesAvailable>:
    12ae:	fc 01       	movw	r30, r24
    12b0:	24 81       	ldd	r18, Z+4	; 0x04
    12b2:	35 81       	ldd	r19, Z+5	; 0x05
    12b4:	80 81       	ld	r24, Z
    12b6:	91 81       	ldd	r25, Z+1	; 0x01
    12b8:	82 0f       	add	r24, r18
    12ba:	93 1f       	adc	r25, r19
    12bc:	42 81       	ldd	r20, Z+2	; 0x02
    12be:	53 81       	ldd	r21, Z+3	; 0x03
    12c0:	84 1b       	sub	r24, r20
    12c2:	95 0b       	sbc	r25, r21
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	82 17       	cp	r24, r18
    12c8:	93 07       	cpc	r25, r19
    12ca:	10 f0       	brcs	.+4      	; 0x12d0 <xStreamBufferSpacesAvailable+0x22>
    12cc:	82 1b       	sub	r24, r18
    12ce:	93 0b       	sbc	r25, r19
    12d0:	08 95       	ret

000012d2 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    12d2:	2f 92       	push	r2
    12d4:	3f 92       	push	r3
    12d6:	4f 92       	push	r4
    12d8:	5f 92       	push	r5
    12da:	6f 92       	push	r6
    12dc:	7f 92       	push	r7
    12de:	8f 92       	push	r8
    12e0:	9f 92       	push	r9
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	2b 97       	sbiw	r28, 0x0b	; 11
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	4c 01       	movw	r8, r24
    1308:	7b 87       	std	Y+11, r23	; 0x0b
    130a:	6a 87       	std	Y+10, r22	; 0x0a
    130c:	1a 01       	movw	r2, r20
    130e:	0e 83       	std	Y+6, r16	; 0x06
    1310:	1f 83       	std	Y+7, r17	; 0x07
    1312:	28 87       	std	Y+8, r18	; 0x08
    1314:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1316:	fc 01       	movw	r30, r24
    1318:	84 81       	ldd	r24, Z+4	; 0x04
    131a:	95 81       	ldd	r25, Z+5	; 0x05
    131c:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    131e:	26 85       	ldd	r18, Z+14	; 0x0e
    1320:	20 ff       	sbrs	r18, 0
    1322:	0c c0       	rjmp	.+24     	; 0x133c <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1324:	2a 01       	movw	r4, r20
    1326:	f2 e0       	ldi	r31, 0x02	; 2
    1328:	4f 0e       	add	r4, r31
    132a:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    132c:	84 15       	cp	r24, r4
    132e:	95 05       	cpc	r25, r5
    1330:	58 f4       	brcc	.+22     	; 0x1348 <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1332:	1e 82       	std	Y+6, r1	; 0x06
    1334:	1f 82       	std	Y+7, r1	; 0x07
    1336:	18 86       	std	Y+8, r1	; 0x08
    1338:	19 86       	std	Y+9, r1	; 0x09
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    133c:	84 17       	cp	r24, r20
    133e:	95 07       	cpc	r25, r21
    1340:	10 f0       	brcs	.+4      	; 0x1346 <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    1342:	2a 01       	movw	r4, r20
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    1346:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	a8 85       	ldd	r26, Y+8	; 0x08
    134e:	b9 85       	ldd	r27, Y+9	; 0x09
    1350:	89 2b       	or	r24, r25
    1352:	8a 2b       	or	r24, r26
    1354:	8b 2b       	or	r24, r27
    1356:	09 f4       	brne	.+2      	; 0x135a <xStreamBufferSend+0x88>
    1358:	36 c0       	rjmp	.+108    	; 0x13c6 <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	e4 d7       	rcall	.+4040   	; 0x2328 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1366:	c4 01       	movw	r24, r8
    1368:	a2 df       	rcall	.-188    	; 0x12ae <xStreamBufferSpacesAvailable>
    136a:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    136c:	84 15       	cp	r24, r4
    136e:	95 05       	cpc	r25, r5
    1370:	38 f5       	brcc	.+78     	; 0x13c0 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    137c:	0e 94 25 12 	call	0x244a	; 0x244a <xTaskGetCurrentTaskHandle>
    1380:	f4 01       	movw	r30, r8
    1382:	93 87       	std	Z+11, r25	; 0x0b
    1384:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1386:	0f 90       	pop	r0
    1388:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    138a:	ae 80       	ldd	r10, Y+6	; 0x06
    138c:	bf 80       	ldd	r11, Y+7	; 0x07
    138e:	c8 84       	ldd	r12, Y+8	; 0x08
    1390:	d9 84       	ldd	r13, Y+9	; 0x09
    1392:	e1 2c       	mov	r14, r1
    1394:	f1 2c       	mov	r15, r1
    1396:	00 e0       	ldi	r16, 0x00	; 0
    1398:	10 e0       	ldi	r17, 0x00	; 0
    139a:	98 01       	movw	r18, r16
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	ba 01       	movw	r22, r20
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	0e 94 93 12 	call	0x2526	; 0x2526 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    13a8:	f4 01       	movw	r30, r8
    13aa:	13 86       	std	Z+11, r1	; 0x0b
    13ac:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    13ae:	be 01       	movw	r22, r28
    13b0:	6a 5f       	subi	r22, 0xFA	; 250
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	ce 01       	movw	r24, r28
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	de d7       	rcall	.+4028   	; 0x2376 <xTaskCheckForTimeOut>
    13ba:	88 23       	and	r24, r24
    13bc:	89 f2       	breq	.-94     	; 0x1360 <xStreamBufferSend+0x8e>
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
                    break;
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    13c6:	61 2c       	mov	r6, r1
    13c8:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    13ca:	61 14       	cp	r6, r1
    13cc:	71 04       	cpc	r7, r1
    13ce:	19 f4       	brne	.+6      	; 0x13d6 <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13d0:	c4 01       	movw	r24, r8
    13d2:	6d df       	rcall	.-294    	; 0x12ae <xStreamBufferSpacesAvailable>
    13d4:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    13d6:	82 01       	movw	r16, r4
    13d8:	93 01       	movw	r18, r6
    13da:	a1 01       	movw	r20, r2
    13dc:	6a 85       	ldd	r22, Y+10	; 0x0a
    13de:	7b 85       	ldd	r23, Y+11	; 0x0b
    13e0:	c4 01       	movw	r24, r8
    13e2:	3e de       	rcall	.-900    	; 0x1060 <prvWriteMessageToBuffer>
    13e4:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    13e6:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    13e8:	e9 f0       	breq	.+58     	; 0x1424 <xStreamBufferSend+0x152>
    13ea:	c4 01       	movw	r24, r8
    13ec:	cd dd       	rcall	.-1126   	; 0xf88 <prvBytesInBuffer>
    13ee:	f4 01       	movw	r30, r8
    13f0:	26 81       	ldd	r18, Z+6	; 0x06
    13f2:	37 81       	ldd	r19, Z+7	; 0x07
    13f4:	82 17       	cp	r24, r18
    13f6:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    13f8:	a8 f0       	brcs	.+42     	; 0x1424 <xStreamBufferSend+0x152>
    13fa:	8d d3       	rcall	.+1818   	; 0x1b16 <vTaskSuspendAll>
    13fc:	f4 01       	movw	r30, r8
    13fe:	80 85       	ldd	r24, Z+8	; 0x08
    1400:	91 85       	ldd	r25, Z+9	; 0x09
    1402:	89 2b       	or	r24, r25
    1404:	71 f0       	breq	.+28     	; 0x1422 <xStreamBufferSend+0x150>
    1406:	80 85       	ldd	r24, Z+8	; 0x08
    1408:	91 85       	ldd	r25, Z+9	; 0x09
    140a:	e1 2c       	mov	r14, r1
    140c:	f1 2c       	mov	r15, r1
    140e:	00 e0       	ldi	r16, 0x00	; 0
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	a9 01       	movw	r20, r18
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	0e 94 3a 13 	call	0x2674	; 0x2674 <xTaskGenericNotify>
    141c:	f4 01       	movw	r30, r8
    141e:	11 86       	std	Z+9, r1	; 0x09
    1420:	10 86       	std	Z+8, r1	; 0x08
    1422:	b9 d4       	rcall	.+2418   	; 0x1d96 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1424:	c6 01       	movw	r24, r12
    1426:	2b 96       	adiw	r28, 0x0b	; 11
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	ff 90       	pop	r15
    143c:	ef 90       	pop	r14
    143e:	df 90       	pop	r13
    1440:	cf 90       	pop	r12
    1442:	bf 90       	pop	r11
    1444:	af 90       	pop	r10
    1446:	9f 90       	pop	r9
    1448:	8f 90       	pop	r8
    144a:	7f 90       	pop	r7
    144c:	6f 90       	pop	r6
    144e:	5f 90       	pop	r5
    1450:	4f 90       	pop	r4
    1452:	3f 90       	pop	r3
    1454:	2f 90       	pop	r2
    1456:	08 95       	ret

00001458 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1458:	af 92       	push	r10
    145a:	bf 92       	push	r11
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
    146e:	7b 01       	movw	r14, r22
    1470:	5a 01       	movw	r10, r20
    1472:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1474:	8e 85       	ldd	r24, Y+14	; 0x0e
    1476:	80 ff       	sbrs	r24, 0
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    147a:	8a 01       	movw	r16, r20
    147c:	0e 5f       	subi	r16, 0xFE	; 254
    147e:	1f 4f       	sbci	r17, 0xFF	; 255
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1482:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1484:	ce 01       	movw	r24, r28
    1486:	13 df       	rcall	.-474    	; 0x12ae <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1488:	9c 01       	movw	r18, r24
    148a:	a5 01       	movw	r20, r10
    148c:	b7 01       	movw	r22, r14
    148e:	ce 01       	movw	r24, r28
    1490:	e7 dd       	rcall	.-1074   	; 0x1060 <prvWriteMessageToBuffer>
    1492:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1494:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1496:	c1 f0       	breq	.+48     	; 0x14c8 <xStreamBufferSendFromISR+0x70>
    1498:	ce 01       	movw	r24, r28
    149a:	76 dd       	rcall	.-1300   	; 0xf88 <prvBytesInBuffer>
    149c:	2e 81       	ldd	r18, Y+6	; 0x06
    149e:	3f 81       	ldd	r19, Y+7	; 0x07
    14a0:	82 17       	cp	r24, r18
    14a2:	93 07       	cpc	r25, r19
    14a4:	88 f0       	brcs	.+34     	; 0x14c8 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    14a6:	88 85       	ldd	r24, Y+8	; 0x08
    14a8:	99 85       	ldd	r25, Y+9	; 0x09
    14aa:	89 2b       	or	r24, r25
    14ac:	69 f0       	breq	.+26     	; 0x14c8 <xStreamBufferSendFromISR+0x70>
    14ae:	88 85       	ldd	r24, Y+8	; 0x08
    14b0:	99 85       	ldd	r25, Y+9	; 0x09
    14b2:	e1 2c       	mov	r14, r1
    14b4:	f1 2c       	mov	r15, r1
    14b6:	00 e0       	ldi	r16, 0x00	; 0
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	0e 94 31 14 	call	0x2862	; 0x2862 <xTaskGenericNotifyFromISR>
    14c4:	19 86       	std	Y+9, r1	; 0x09
    14c6:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    14c8:	c5 01       	movw	r24, r10
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	bf 90       	pop	r11
    14dc:	af 90       	pop	r10
    14de:	08 95       	ret

000014e0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    14e0:	4f 92       	push	r4
    14e2:	5f 92       	push	r5
    14e4:	6f 92       	push	r6
    14e6:	7f 92       	push	r7
    14e8:	8f 92       	push	r8
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	ec 01       	movw	r28, r24
    1502:	2b 01       	movw	r4, r22
    1504:	3a 01       	movw	r6, r20
    1506:	58 01       	movw	r10, r16
    1508:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    150a:	8e 85       	ldd	r24, Y+14	; 0x0e
    150c:	80 ff       	sbrs	r24, 0
    150e:	05 c0       	rjmp	.+10     	; 0x151a <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1510:	68 94       	set
    1512:	88 24       	eor	r8, r8
    1514:	81 f8       	bld	r8, 1
    1516:	91 2c       	mov	r9, r1
    1518:	02 c0       	rjmp	.+4      	; 0x151e <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    151a:	81 2c       	mov	r8, r1
    151c:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    151e:	a1 14       	cp	r10, r1
    1520:	b1 04       	cpc	r11, r1
    1522:	c1 04       	cpc	r12, r1
    1524:	d1 04       	cpc	r13, r1
    1526:	31 f1       	breq	.+76     	; 0x1574 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    152e:	ce 01       	movw	r24, r28
    1530:	2b dd       	rcall	.-1450   	; 0xf88 <prvBytesInBuffer>
    1532:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1534:	88 16       	cp	r8, r24
    1536:	99 06       	cpc	r9, r25
    1538:	40 f0       	brcs	.+16     	; 0x154a <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1544:	82 d7       	rcall	.+3844   	; 0x244a <xTaskGetCurrentTaskHandle>
    1546:	99 87       	std	Y+9, r25	; 0x09
    1548:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    154a:	0f 90       	pop	r0
    154c:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    154e:	8e 14       	cp	r8, r14
    1550:	9f 04       	cpc	r9, r15
    1552:	98 f0       	brcs	.+38     	; 0x157a <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1554:	e1 2c       	mov	r14, r1
    1556:	f1 2c       	mov	r15, r1
    1558:	00 e0       	ldi	r16, 0x00	; 0
    155a:	10 e0       	ldi	r17, 0x00	; 0
    155c:	98 01       	movw	r18, r16
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	ba 01       	movw	r22, r20
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	df d7       	rcall	.+4030   	; 0x2526 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1568:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    156a:	18 86       	std	Y+8, r1	; 0x08
    156c:	ce 01       	movw	r24, r28
    156e:	0c dd       	rcall	.-1512   	; 0xf88 <prvBytesInBuffer>
    1570:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1572:	03 c0       	rjmp	.+6      	; 0x157a <xStreamBufferReceive+0x9a>
    1574:	ce 01       	movw	r24, r28
    1576:	08 dd       	rcall	.-1520   	; 0xf88 <prvBytesInBuffer>
    1578:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    157a:	8e 14       	cp	r8, r14
    157c:	9f 04       	cpc	r9, r15
    157e:	e8 f4       	brcc	.+58     	; 0x15ba <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1580:	84 01       	movw	r16, r8
    1582:	97 01       	movw	r18, r14
    1584:	a3 01       	movw	r20, r6
    1586:	b2 01       	movw	r22, r4
    1588:	ce 01       	movw	r24, r28
    158a:	fc dd       	rcall	.-1032   	; 0x1184 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    158c:	6c 01       	movw	r12, r24
    158e:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1590:	b1 f0       	breq	.+44     	; 0x15be <xStreamBufferReceive+0xde>
    1592:	c1 d2       	rcall	.+1410   	; 0x1b16 <vTaskSuspendAll>
    1594:	8a 85       	ldd	r24, Y+10	; 0x0a
    1596:	9b 85       	ldd	r25, Y+11	; 0x0b
    1598:	89 2b       	or	r24, r25
    159a:	69 f0       	breq	.+26     	; 0x15b6 <xStreamBufferReceive+0xd6>
    159c:	8a 85       	ldd	r24, Y+10	; 0x0a
    159e:	9b 85       	ldd	r25, Y+11	; 0x0b
    15a0:	e1 2c       	mov	r14, r1
    15a2:	f1 2c       	mov	r15, r1
    15a4:	00 e0       	ldi	r16, 0x00	; 0
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	a9 01       	movw	r20, r18
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	0e 94 3a 13 	call	0x2674	; 0x2674 <xTaskGenericNotify>
    15b2:	1b 86       	std	Y+11, r1	; 0x0b
    15b4:	1a 86       	std	Y+10, r1	; 0x0a
    15b6:	ef d3       	rcall	.+2014   	; 0x1d96 <xTaskResumeAll>
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    15ba:	c1 2c       	mov	r12, r1
    15bc:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    15be:	c6 01       	movw	r24, r12
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	9f 90       	pop	r9
    15d6:	8f 90       	pop	r8
    15d8:	7f 90       	pop	r7
    15da:	6f 90       	pop	r6
    15dc:	5f 90       	pop	r5
    15de:	4f 90       	pop	r4
    15e0:	08 95       	ret

000015e2 <prvResetNextTaskUnblockTime>:
    15e2:	e0 91 43 11 	lds	r30, 0x1143	; 0x801143 <pxDelayedTaskList>
    15e6:	f0 91 44 11 	lds	r31, 0x1144	; 0x801144 <pxDelayedTaskList+0x1>
    15ea:	80 81       	ld	r24, Z
    15ec:	81 11       	cpse	r24, r1
    15ee:	0c c0       	rjmp	.+24     	; 0x1608 <prvResetNextTaskUnblockTime+0x26>
    15f0:	8f ef       	ldi	r24, 0xFF	; 255
    15f2:	9f ef       	ldi	r25, 0xFF	; 255
    15f4:	dc 01       	movw	r26, r24
    15f6:	80 93 0d 11 	sts	0x110D, r24	; 0x80110d <xNextTaskUnblockTime>
    15fa:	90 93 0e 11 	sts	0x110E, r25	; 0x80110e <xNextTaskUnblockTime+0x1>
    15fe:	a0 93 0f 11 	sts	0x110F, r26	; 0x80110f <xNextTaskUnblockTime+0x2>
    1602:	b0 93 10 11 	sts	0x1110, r27	; 0x801110 <xNextTaskUnblockTime+0x3>
    1606:	08 95       	ret
    1608:	e0 91 43 11 	lds	r30, 0x1143	; 0x801143 <pxDelayedTaskList>
    160c:	f0 91 44 11 	lds	r31, 0x1144	; 0x801144 <pxDelayedTaskList+0x1>
    1610:	07 80       	ldd	r0, Z+7	; 0x07
    1612:	f0 85       	ldd	r31, Z+8	; 0x08
    1614:	e0 2d       	mov	r30, r0
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	a2 81       	ldd	r26, Z+2	; 0x02
    161c:	b3 81       	ldd	r27, Z+3	; 0x03
    161e:	80 93 0d 11 	sts	0x110D, r24	; 0x80110d <xNextTaskUnblockTime>
    1622:	90 93 0e 11 	sts	0x110E, r25	; 0x80110e <xNextTaskUnblockTime+0x1>
    1626:	a0 93 0f 11 	sts	0x110F, r26	; 0x80110f <xNextTaskUnblockTime+0x2>
    162a:	b0 93 10 11 	sts	0x1110, r27	; 0x801110 <xNextTaskUnblockTime+0x3>
    162e:	08 95       	ret

00001630 <prvDeleteTCB>:
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	ec 01       	movw	r28, r24
    1636:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1638:	9c 8d       	ldd	r25, Y+28	; 0x1c
    163a:	0e 94 1b 03 	call	0x636	; 0x636 <vPortFree>
    163e:	ce 01       	movw	r24, r28
    1640:	0e 94 1b 03 	call	0x636	; 0x636 <vPortFree>
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <prvInitialiseNewTask>:
    164a:	4f 92       	push	r4
    164c:	5f 92       	push	r5
    164e:	6f 92       	push	r6
    1650:	7f 92       	push	r7
    1652:	8f 92       	push	r8
    1654:	9f 92       	push	r9
    1656:	af 92       	push	r10
    1658:	bf 92       	push	r11
    165a:	cf 92       	push	r12
    165c:	df 92       	push	r13
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	2c 01       	movw	r4, r24
    166a:	5b 01       	movw	r10, r22
    166c:	4a 01       	movw	r8, r20
    166e:	39 01       	movw	r6, r18
    1670:	e6 01       	movw	r28, r12
    1672:	65 ea       	ldi	r22, 0xA5	; 165
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167a:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <memset>
    167e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1680:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1682:	21 e0       	ldi	r18, 0x01	; 1
    1684:	82 1a       	sub	r8, r18
    1686:	91 08       	sbc	r9, r1
    1688:	88 0e       	add	r8, r24
    168a:	99 1e       	adc	r9, r25
    168c:	a1 14       	cp	r10, r1
    168e:	b1 04       	cpc	r11, r1
    1690:	89 f4       	brne	.+34     	; 0x16b4 <prvInitialiseNewTask+0x6a>
    1692:	15 c0       	rjmp	.+42     	; 0x16be <prvInitialiseNewTask+0x74>
    1694:	82 2f       	mov	r24, r18
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	f5 01       	movw	r30, r10
    169a:	e8 0f       	add	r30, r24
    169c:	f9 1f       	adc	r31, r25
    169e:	30 81       	ld	r19, Z
    16a0:	de 01       	movw	r26, r28
    16a2:	a8 0f       	add	r26, r24
    16a4:	b9 1f       	adc	r27, r25
    16a6:	5d 96       	adiw	r26, 0x1d	; 29
    16a8:	3c 93       	st	X, r19
    16aa:	80 81       	ld	r24, Z
    16ac:	88 23       	and	r24, r24
    16ae:	29 f0       	breq	.+10     	; 0x16ba <prvInitialiseNewTask+0x70>
    16b0:	2f 5f       	subi	r18, 0xFF	; 255
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <prvInitialiseNewTask+0x6c>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	20 31       	cpi	r18, 0x10	; 16
    16b8:	68 f3       	brcs	.-38     	; 0x1694 <prvInitialiseNewTask+0x4a>
    16ba:	1c a6       	std	Y+44, r1	; 0x2c
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <prvInitialiseNewTask+0x76>
    16be:	1d 8e       	std	Y+29, r1	; 0x1d
    16c0:	0a 30       	cpi	r16, 0x0A	; 10
    16c2:	08 f0       	brcs	.+2      	; 0x16c6 <prvInitialiseNewTask+0x7c>
    16c4:	09 e0       	ldi	r16, 0x09	; 9
    16c6:	0a 8f       	std	Y+26, r16	; 0x1a
    16c8:	0d a7       	std	Y+45, r16	; 0x2d
    16ca:	1e a6       	std	Y+46, r1	; 0x2e
    16cc:	ce 01       	movw	r24, r28
    16ce:	02 96       	adiw	r24, 0x02	; 2
    16d0:	00 d8       	rcall	.-4096   	; 0x6d2 <vListInitialiseItem>
    16d2:	ce 01       	movw	r24, r28
    16d4:	0e 96       	adiw	r24, 0x0e	; 14
    16d6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <vListInitialiseItem>
    16da:	db 87       	std	Y+11, r29	; 0x0b
    16dc:	ca 87       	std	Y+10, r28	; 0x0a
    16de:	8a e0       	ldi	r24, 0x0A	; 10
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	80 1b       	sub	r24, r16
    16e8:	91 09       	sbc	r25, r1
    16ea:	a1 09       	sbc	r26, r1
    16ec:	b1 09       	sbc	r27, r1
    16ee:	8e 87       	std	Y+14, r24	; 0x0e
    16f0:	9f 87       	std	Y+15, r25	; 0x0f
    16f2:	a8 8b       	std	Y+16, r26	; 0x10
    16f4:	b9 8b       	std	Y+17, r27	; 0x11
    16f6:	df 8b       	std	Y+23, r29	; 0x17
    16f8:	ce 8b       	std	Y+22, r28	; 0x16
    16fa:	84 e0       	ldi	r24, 0x04	; 4
    16fc:	fe 01       	movw	r30, r28
    16fe:	bf 96       	adiw	r30, 0x2f	; 47
    1700:	df 01       	movw	r26, r30
    1702:	1d 92       	st	X+, r1
    1704:	8a 95       	dec	r24
    1706:	e9 f7       	brne	.-6      	; 0x1702 <prvInitialiseNewTask+0xb8>
    1708:	1b aa       	std	Y+51, r1	; 0x33
    170a:	a3 01       	movw	r20, r6
    170c:	b2 01       	movw	r22, r4
    170e:	c4 01       	movw	r24, r8
    1710:	54 d8       	rcall	.-3928   	; 0x7ba <pxPortInitialiseStack>
    1712:	99 83       	std	Y+1, r25	; 0x01
    1714:	88 83       	st	Y, r24
    1716:	e1 14       	cp	r14, r1
    1718:	f1 04       	cpc	r15, r1
    171a:	19 f0       	breq	.+6      	; 0x1722 <prvInitialiseNewTask+0xd8>
    171c:	f7 01       	movw	r30, r14
    171e:	d1 83       	std	Z+1, r29	; 0x01
    1720:	c0 83       	st	Z, r28
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	cf 90       	pop	r12
    1730:	bf 90       	pop	r11
    1732:	af 90       	pop	r10
    1734:	9f 90       	pop	r9
    1736:	8f 90       	pop	r8
    1738:	7f 90       	pop	r7
    173a:	6f 90       	pop	r6
    173c:	5f 90       	pop	r5
    173e:	4f 90       	pop	r4
    1740:	08 95       	ret

00001742 <prvInitialiseTaskLists>:
    1742:	cf 93       	push	r28
    1744:	c0 e0       	ldi	r28, 0x00	; 0
    1746:	09 c0       	rjmp	.+18     	; 0x175a <prvInitialiseTaskLists+0x18>
    1748:	2b e0       	ldi	r18, 0x0B	; 11
    174a:	c2 9f       	mul	r28, r18
    174c:	c0 01       	movw	r24, r0
    174e:	11 24       	eor	r1, r1
    1750:	85 5a       	subi	r24, 0xA5	; 165
    1752:	9e 4e       	sbci	r25, 0xEE	; 238
    1754:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInitialise>
    1758:	cf 5f       	subi	r28, 0xFF	; 255
    175a:	ca 30       	cpi	r28, 0x0A	; 10
    175c:	a8 f3       	brcs	.-22     	; 0x1748 <prvInitialiseTaskLists+0x6>
    175e:	80 e5       	ldi	r24, 0x50	; 80
    1760:	91 e1       	ldi	r25, 0x11	; 17
    1762:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInitialise>
    1766:	85 e4       	ldi	r24, 0x45	; 69
    1768:	91 e1       	ldi	r25, 0x11	; 17
    176a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInitialise>
    176e:	86 e3       	ldi	r24, 0x36	; 54
    1770:	91 e1       	ldi	r25, 0x11	; 17
    1772:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInitialise>
    1776:	8b e2       	ldi	r24, 0x2B	; 43
    1778:	91 e1       	ldi	r25, 0x11	; 17
    177a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInitialise>
    177e:	8f e1       	ldi	r24, 0x1F	; 31
    1780:	91 e1       	ldi	r25, 0x11	; 17
    1782:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInitialise>
    1786:	80 e5       	ldi	r24, 0x50	; 80
    1788:	91 e1       	ldi	r25, 0x11	; 17
    178a:	90 93 44 11 	sts	0x1144, r25	; 0x801144 <pxDelayedTaskList+0x1>
    178e:	80 93 43 11 	sts	0x1143, r24	; 0x801143 <pxDelayedTaskList>
    1792:	85 e4       	ldi	r24, 0x45	; 69
    1794:	91 e1       	ldi	r25, 0x11	; 17
    1796:	90 93 42 11 	sts	0x1142, r25	; 0x801142 <pxOverflowDelayedTaskList+0x1>
    179a:	80 93 41 11 	sts	0x1141, r24	; 0x801141 <pxOverflowDelayedTaskList>
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <prvAddNewTaskToReadyList>:
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	ec 01       	movw	r28, r24
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	0f 92       	push	r0
    17ae:	80 91 1e 11 	lds	r24, 0x111E	; 0x80111e <uxCurrentNumberOfTasks>
    17b2:	8f 5f       	subi	r24, 0xFF	; 255
    17b4:	80 93 1e 11 	sts	0x111E, r24	; 0x80111e <uxCurrentNumberOfTasks>
    17b8:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    17bc:	90 91 ca 11 	lds	r25, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    17c0:	89 2b       	or	r24, r25
    17c2:	51 f4       	brne	.+20     	; 0x17d8 <prvAddNewTaskToReadyList+0x36>
    17c4:	d0 93 ca 11 	sts	0x11CA, r29	; 0x8011ca <pxCurrentTCB+0x1>
    17c8:	c0 93 c9 11 	sts	0x11C9, r28	; 0x8011c9 <pxCurrentTCB>
    17cc:	80 91 1e 11 	lds	r24, 0x111E	; 0x80111e <uxCurrentNumberOfTasks>
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	91 f4       	brne	.+36     	; 0x17f8 <prvAddNewTaskToReadyList+0x56>
    17d4:	b6 df       	rcall	.-148    	; 0x1742 <prvInitialiseTaskLists>
    17d6:	10 c0       	rjmp	.+32     	; 0x17f8 <prvAddNewTaskToReadyList+0x56>
    17d8:	80 91 18 11 	lds	r24, 0x1118	; 0x801118 <xSchedulerRunning>
    17dc:	81 11       	cpse	r24, r1
    17de:	0c c0       	rjmp	.+24     	; 0x17f8 <prvAddNewTaskToReadyList+0x56>
    17e0:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    17e4:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    17e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    17ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17ec:	89 17       	cp	r24, r25
    17ee:	20 f0       	brcs	.+8      	; 0x17f8 <prvAddNewTaskToReadyList+0x56>
    17f0:	d0 93 ca 11 	sts	0x11CA, r29	; 0x8011ca <pxCurrentTCB+0x1>
    17f4:	c0 93 c9 11 	sts	0x11C9, r28	; 0x8011c9 <pxCurrentTCB>
    17f8:	80 91 11 11 	lds	r24, 0x1111	; 0x801111 <uxTaskNumber>
    17fc:	8f 5f       	subi	r24, 0xFF	; 255
    17fe:	80 93 11 11 	sts	0x1111, r24	; 0x801111 <uxTaskNumber>
    1802:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1804:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <uxTopReadyPriority>
    1808:	8e 17       	cp	r24, r30
    180a:	10 f4       	brcc	.+4      	; 0x1810 <prvAddNewTaskToReadyList+0x6e>
    180c:	e0 93 19 11 	sts	0x1119, r30	; 0x801119 <uxTopReadyPriority>
    1810:	8b e0       	ldi	r24, 0x0B	; 11
    1812:	8e 9f       	mul	r24, r30
    1814:	f0 01       	movw	r30, r0
    1816:	11 24       	eor	r1, r1
    1818:	e5 5a       	subi	r30, 0xA5	; 165
    181a:	fe 4e       	sbci	r31, 0xEE	; 238
    181c:	01 80       	ldd	r0, Z+1	; 0x01
    181e:	f2 81       	ldd	r31, Z+2	; 0x02
    1820:	e0 2d       	mov	r30, r0
    1822:	ff 83       	std	Y+7, r31	; 0x07
    1824:	ee 83       	std	Y+6, r30	; 0x06
    1826:	26 81       	ldd	r18, Z+6	; 0x06
    1828:	37 81       	ldd	r19, Z+7	; 0x07
    182a:	39 87       	std	Y+9, r19	; 0x09
    182c:	28 87       	std	Y+8, r18	; 0x08
    182e:	a6 81       	ldd	r26, Z+6	; 0x06
    1830:	b7 81       	ldd	r27, Z+7	; 0x07
    1832:	9e 01       	movw	r18, r28
    1834:	2e 5f       	subi	r18, 0xFE	; 254
    1836:	3f 4f       	sbci	r19, 0xFF	; 255
    1838:	15 96       	adiw	r26, 0x05	; 5
    183a:	3c 93       	st	X, r19
    183c:	2e 93       	st	-X, r18
    183e:	14 97       	sbiw	r26, 0x04	; 4
    1840:	37 83       	std	Z+7, r19	; 0x07
    1842:	26 83       	std	Z+6, r18	; 0x06
    1844:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1846:	8e 9f       	mul	r24, r30
    1848:	f0 01       	movw	r30, r0
    184a:	11 24       	eor	r1, r1
    184c:	e5 5a       	subi	r30, 0xA5	; 165
    184e:	fe 4e       	sbci	r31, 0xEE	; 238
    1850:	fd 87       	std	Y+13, r31	; 0x0d
    1852:	ec 87       	std	Y+12, r30	; 0x0c
    1854:	80 81       	ld	r24, Z
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	80 83       	st	Z, r24
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	80 91 18 11 	lds	r24, 0x1118	; 0x801118 <xSchedulerRunning>
    1862:	88 23       	and	r24, r24
    1864:	51 f0       	breq	.+20     	; 0x187a <prvAddNewTaskToReadyList+0xd8>
    1866:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    186a:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    186e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1870:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1872:	98 17       	cp	r25, r24
    1874:	10 f4       	brcc	.+4      	; 0x187a <prvAddNewTaskToReadyList+0xd8>
    1876:	0e 94 26 04 	call	0x84c	; 0x84c <vPortYield>
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <prvCheckTasksWaitingTermination>:
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	1b c0       	rjmp	.+54     	; 0x18bc <prvCheckTasksWaitingTermination+0x3c>
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	0f 92       	push	r0
    188c:	e0 91 32 11 	lds	r30, 0x1132	; 0x801132 <xTasksWaitingTermination+0x7>
    1890:	f0 91 33 11 	lds	r31, 0x1133	; 0x801133 <xTasksWaitingTermination+0x8>
    1894:	c0 85       	ldd	r28, Z+8	; 0x08
    1896:	d1 85       	ldd	r29, Z+9	; 0x09
    1898:	ce 01       	movw	r24, r28
    189a:	02 96       	adiw	r24, 0x02	; 2
    189c:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    18a0:	80 91 1e 11 	lds	r24, 0x111E	; 0x80111e <uxCurrentNumberOfTasks>
    18a4:	81 50       	subi	r24, 0x01	; 1
    18a6:	80 93 1e 11 	sts	0x111E, r24	; 0x80111e <uxCurrentNumberOfTasks>
    18aa:	80 91 2a 11 	lds	r24, 0x112A	; 0x80112a <uxDeletedTasksWaitingCleanUp>
    18ae:	81 50       	subi	r24, 0x01	; 1
    18b0:	80 93 2a 11 	sts	0x112A, r24	; 0x80112a <uxDeletedTasksWaitingCleanUp>
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	ce 01       	movw	r24, r28
    18ba:	ba de       	rcall	.-652    	; 0x1630 <prvDeleteTCB>
    18bc:	80 91 2a 11 	lds	r24, 0x112A	; 0x80112a <uxDeletedTasksWaitingCleanUp>
    18c0:	81 11       	cpse	r24, r1
    18c2:	e1 cf       	rjmp	.-62     	; 0x1886 <prvCheckTasksWaitingTermination+0x6>
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	08 95       	ret

000018ca <prvAddCurrentTaskToDelayedList>:
    18ca:	8f 92       	push	r8
    18cc:	9f 92       	push	r9
    18ce:	af 92       	push	r10
    18d0:	bf 92       	push	r11
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	6b 01       	movw	r12, r22
    18e0:	7c 01       	movw	r14, r24
    18e2:	c4 2f       	mov	r28, r20
    18e4:	80 90 1a 11 	lds	r8, 0x111A	; 0x80111a <xTickCount>
    18e8:	90 90 1b 11 	lds	r9, 0x111B	; 0x80111b <xTickCount+0x1>
    18ec:	a0 90 1c 11 	lds	r10, 0x111C	; 0x80111c <xTickCount+0x2>
    18f0:	b0 90 1d 11 	lds	r11, 0x111D	; 0x80111d <xTickCount+0x3>
    18f4:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    18f8:	90 91 ca 11 	lds	r25, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    18fc:	02 96       	adiw	r24, 0x02	; 2
    18fe:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	c8 16       	cp	r12, r24
    1906:	d8 06       	cpc	r13, r24
    1908:	e8 06       	cpc	r14, r24
    190a:	f8 06       	cpc	r15, r24
    190c:	b1 f5       	brne	.+108    	; 0x197a <prvAddCurrentTaskToDelayedList+0xb0>
    190e:	cc 23       	and	r28, r28
    1910:	a1 f1       	breq	.+104    	; 0x197a <prvAddCurrentTaskToDelayedList+0xb0>
    1912:	ef e1       	ldi	r30, 0x1F	; 31
    1914:	f1 e1       	ldi	r31, 0x11	; 17
    1916:	a1 81       	ldd	r26, Z+1	; 0x01
    1918:	b2 81       	ldd	r27, Z+2	; 0x02
    191a:	c0 91 c9 11 	lds	r28, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    191e:	d0 91 ca 11 	lds	r29, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    1922:	bf 83       	std	Y+7, r27	; 0x07
    1924:	ae 83       	std	Y+6, r26	; 0x06
    1926:	c0 91 c9 11 	lds	r28, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    192a:	d0 91 ca 11 	lds	r29, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    192e:	16 96       	adiw	r26, 0x06	; 6
    1930:	8d 91       	ld	r24, X+
    1932:	9c 91       	ld	r25, X
    1934:	17 97       	sbiw	r26, 0x07	; 7
    1936:	99 87       	std	Y+9, r25	; 0x09
    1938:	88 87       	std	Y+8, r24	; 0x08
    193a:	16 96       	adiw	r26, 0x06	; 6
    193c:	cd 91       	ld	r28, X+
    193e:	dc 91       	ld	r29, X
    1940:	17 97       	sbiw	r26, 0x07	; 7
    1942:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    1946:	90 91 ca 11 	lds	r25, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    194a:	02 96       	adiw	r24, 0x02	; 2
    194c:	9d 83       	std	Y+5, r25	; 0x05
    194e:	8c 83       	std	Y+4, r24	; 0x04
    1950:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    1954:	90 91 ca 11 	lds	r25, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    1958:	02 96       	adiw	r24, 0x02	; 2
    195a:	17 96       	adiw	r26, 0x07	; 7
    195c:	9c 93       	st	X, r25
    195e:	8e 93       	st	-X, r24
    1960:	16 97       	sbiw	r26, 0x06	; 6
    1962:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    1966:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    196a:	1d 96       	adiw	r26, 0x0d	; 13
    196c:	fc 93       	st	X, r31
    196e:	ee 93       	st	-X, r30
    1970:	1c 97       	sbiw	r26, 0x0c	; 12
    1972:	80 81       	ld	r24, Z
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	80 83       	st	Z, r24
    1978:	3f c0       	rjmp	.+126    	; 0x19f8 <prvAddCurrentTaskToDelayedList+0x12e>
    197a:	c8 0c       	add	r12, r8
    197c:	d9 1c       	adc	r13, r9
    197e:	ea 1c       	adc	r14, r10
    1980:	fb 1c       	adc	r15, r11
    1982:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    1986:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    198a:	c2 82       	std	Z+2, r12	; 0x02
    198c:	d3 82       	std	Z+3, r13	; 0x03
    198e:	e4 82       	std	Z+4, r14	; 0x04
    1990:	f5 82       	std	Z+5, r15	; 0x05
    1992:	c8 14       	cp	r12, r8
    1994:	d9 04       	cpc	r13, r9
    1996:	ea 04       	cpc	r14, r10
    1998:	fb 04       	cpc	r15, r11
    199a:	68 f4       	brcc	.+26     	; 0x19b6 <prvAddCurrentTaskToDelayedList+0xec>
    199c:	60 91 c9 11 	lds	r22, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    19a0:	70 91 ca 11 	lds	r23, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    19a4:	80 91 41 11 	lds	r24, 0x1141	; 0x801141 <pxOverflowDelayedTaskList>
    19a8:	90 91 42 11 	lds	r25, 0x1142	; 0x801142 <pxOverflowDelayedTaskList+0x1>
    19ac:	6e 5f       	subi	r22, 0xFE	; 254
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255
    19b0:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInsert>
    19b4:	21 c0       	rjmp	.+66     	; 0x19f8 <prvAddCurrentTaskToDelayedList+0x12e>
    19b6:	60 91 c9 11 	lds	r22, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    19ba:	70 91 ca 11 	lds	r23, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    19be:	80 91 43 11 	lds	r24, 0x1143	; 0x801143 <pxDelayedTaskList>
    19c2:	90 91 44 11 	lds	r25, 0x1144	; 0x801144 <pxDelayedTaskList+0x1>
    19c6:	6e 5f       	subi	r22, 0xFE	; 254
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInsert>
    19ce:	80 91 0d 11 	lds	r24, 0x110D	; 0x80110d <xNextTaskUnblockTime>
    19d2:	90 91 0e 11 	lds	r25, 0x110E	; 0x80110e <xNextTaskUnblockTime+0x1>
    19d6:	a0 91 0f 11 	lds	r26, 0x110F	; 0x80110f <xNextTaskUnblockTime+0x2>
    19da:	b0 91 10 11 	lds	r27, 0x1110	; 0x801110 <xNextTaskUnblockTime+0x3>
    19de:	c8 16       	cp	r12, r24
    19e0:	d9 06       	cpc	r13, r25
    19e2:	ea 06       	cpc	r14, r26
    19e4:	fb 06       	cpc	r15, r27
    19e6:	40 f4       	brcc	.+16     	; 0x19f8 <prvAddCurrentTaskToDelayedList+0x12e>
    19e8:	c0 92 0d 11 	sts	0x110D, r12	; 0x80110d <xNextTaskUnblockTime>
    19ec:	d0 92 0e 11 	sts	0x110E, r13	; 0x80110e <xNextTaskUnblockTime+0x1>
    19f0:	e0 92 0f 11 	sts	0x110F, r14	; 0x80110f <xNextTaskUnblockTime+0x2>
    19f4:	f0 92 10 11 	sts	0x1110, r15	; 0x801110 <xNextTaskUnblockTime+0x3>
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	bf 90       	pop	r11
    1a06:	af 90       	pop	r10
    1a08:	9f 90       	pop	r9
    1a0a:	8f 90       	pop	r8
    1a0c:	08 95       	ret

00001a0e <xTaskCreate>:
    1a0e:	2f 92       	push	r2
    1a10:	3f 92       	push	r3
    1a12:	4f 92       	push	r4
    1a14:	5f 92       	push	r5
    1a16:	6f 92       	push	r6
    1a18:	7f 92       	push	r7
    1a1a:	8f 92       	push	r8
    1a1c:	9f 92       	push	r9
    1a1e:	af 92       	push	r10
    1a20:	bf 92       	push	r11
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	3c 01       	movw	r6, r24
    1a32:	1b 01       	movw	r2, r22
    1a34:	4a 01       	movw	r8, r20
    1a36:	29 01       	movw	r4, r18
    1a38:	ca 01       	movw	r24, r20
    1a3a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <pvPortMalloc>
    1a3e:	6c 01       	movw	r12, r24
    1a40:	89 2b       	or	r24, r25
    1a42:	71 f0       	breq	.+28     	; 0x1a60 <xTaskCreate+0x52>
    1a44:	84 e3       	ldi	r24, 0x34	; 52
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 94 72 02 	call	0x4e4	; 0x4e4 <pvPortMalloc>
    1a4c:	ec 01       	movw	r28, r24
    1a4e:	89 2b       	or	r24, r25
    1a50:	19 f0       	breq	.+6      	; 0x1a58 <xTaskCreate+0x4a>
    1a52:	dc 8e       	std	Y+28, r13	; 0x1c
    1a54:	cb 8e       	std	Y+27, r12	; 0x1b
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <xTaskCreate+0x56>
    1a58:	c6 01       	movw	r24, r12
    1a5a:	0e 94 1b 03 	call	0x636	; 0x636 <vPortFree>
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <xTaskCreate+0x56>
    1a60:	c0 e0       	ldi	r28, 0x00	; 0
    1a62:	d0 e0       	ldi	r29, 0x00	; 0
    1a64:	20 97       	sbiw	r28, 0x00	; 0
    1a66:	61 f0       	breq	.+24     	; 0x1a80 <xTaskCreate+0x72>
    1a68:	a1 2c       	mov	r10, r1
    1a6a:	b1 2c       	mov	r11, r1
    1a6c:	6e 01       	movw	r12, r28
    1a6e:	92 01       	movw	r18, r4
    1a70:	a4 01       	movw	r20, r8
    1a72:	b1 01       	movw	r22, r2
    1a74:	c3 01       	movw	r24, r6
    1a76:	e9 dd       	rcall	.-1070   	; 0x164a <prvInitialiseNewTask>
    1a78:	ce 01       	movw	r24, r28
    1a7a:	93 de       	rcall	.-730    	; 0x17a2 <prvAddNewTaskToReadyList>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <xTaskCreate+0x74>
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	df 90       	pop	r13
    1a8e:	cf 90       	pop	r12
    1a90:	bf 90       	pop	r11
    1a92:	af 90       	pop	r10
    1a94:	9f 90       	pop	r9
    1a96:	8f 90       	pop	r8
    1a98:	7f 90       	pop	r7
    1a9a:	6f 90       	pop	r6
    1a9c:	5f 90       	pop	r5
    1a9e:	4f 90       	pop	r4
    1aa0:	3f 90       	pop	r3
    1aa2:	2f 90       	pop	r2
    1aa4:	08 95       	ret

00001aa6 <vTaskStartScheduler>:
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	0f 2e       	mov	r0, r31
    1aae:	fb e0       	ldi	r31, 0x0B	; 11
    1ab0:	ef 2e       	mov	r14, r31
    1ab2:	f1 e1       	ldi	r31, 0x11	; 17
    1ab4:	ff 2e       	mov	r15, r31
    1ab6:	f0 2d       	mov	r31, r0
    1ab8:	00 e0       	ldi	r16, 0x00	; 0
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 ec       	ldi	r20, 0xC0	; 192
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	68 e9       	ldi	r22, 0x98	; 152
    1ac4:	73 e0       	ldi	r23, 0x03	; 3
    1ac6:	8c e7       	ldi	r24, 0x7C	; 124
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a1 df       	rcall	.-190    	; 0x1a0e <xTaskCreate>
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	11 f4       	brne	.+4      	; 0x1ad4 <vTaskStartScheduler+0x2e>
    1ad0:	0e 94 f7 15 	call	0x2bee	; 0x2bee <xTimerCreateTimerTask>
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	c9 f4       	brne	.+50     	; 0x1b0a <vTaskStartScheduler+0x64>
    1ad8:	f8 94       	cli
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	9f ef       	ldi	r25, 0xFF	; 255
    1ade:	dc 01       	movw	r26, r24
    1ae0:	80 93 0d 11 	sts	0x110D, r24	; 0x80110d <xNextTaskUnblockTime>
    1ae4:	90 93 0e 11 	sts	0x110E, r25	; 0x80110e <xNextTaskUnblockTime+0x1>
    1ae8:	a0 93 0f 11 	sts	0x110F, r26	; 0x80110f <xNextTaskUnblockTime+0x2>
    1aec:	b0 93 10 11 	sts	0x1110, r27	; 0x801110 <xNextTaskUnblockTime+0x3>
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	80 93 18 11 	sts	0x1118, r24	; 0x801118 <xSchedulerRunning>
    1af6:	10 92 1a 11 	sts	0x111A, r1	; 0x80111a <xTickCount>
    1afa:	10 92 1b 11 	sts	0x111B, r1	; 0x80111b <xTickCount+0x1>
    1afe:	10 92 1c 11 	sts	0x111C, r1	; 0x80111c <xTickCount+0x2>
    1b02:	10 92 1d 11 	sts	0x111D, r1	; 0x80111d <xTickCount+0x3>
    1b06:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <xPortStartScheduler>
    1b0a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1b0e:	0f 91       	pop	r16
    1b10:	ff 90       	pop	r15
    1b12:	ef 90       	pop	r14
    1b14:	08 95       	ret

00001b16 <vTaskSuspendAll>:
    1b16:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <uxSchedulerSuspended>
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	80 93 0a 11 	sts	0x110A, r24	; 0x80110a <uxSchedulerSuspended>
    1b20:	08 95       	ret

00001b22 <xTaskGetTickCount>:
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	0f 92       	push	r0
    1b28:	60 91 1a 11 	lds	r22, 0x111A	; 0x80111a <xTickCount>
    1b2c:	70 91 1b 11 	lds	r23, 0x111B	; 0x80111b <xTickCount+0x1>
    1b30:	80 91 1c 11 	lds	r24, 0x111C	; 0x80111c <xTickCount+0x2>
    1b34:	90 91 1d 11 	lds	r25, 0x111D	; 0x80111d <xTickCount+0x3>
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	08 95       	ret

00001b3e <xTaskIncrementTick>:
    1b3e:	cf 92       	push	r12
    1b40:	df 92       	push	r13
    1b42:	ef 92       	push	r14
    1b44:	ff 92       	push	r15
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <uxSchedulerSuspended>
    1b4e:	81 11       	cpse	r24, r1
    1b50:	05 c1       	rjmp	.+522    	; 0x1d5c <xTaskIncrementTick+0x21e>
    1b52:	c0 90 1a 11 	lds	r12, 0x111A	; 0x80111a <xTickCount>
    1b56:	d0 90 1b 11 	lds	r13, 0x111B	; 0x80111b <xTickCount+0x1>
    1b5a:	e0 90 1c 11 	lds	r14, 0x111C	; 0x80111c <xTickCount+0x2>
    1b5e:	f0 90 1d 11 	lds	r15, 0x111D	; 0x80111d <xTickCount+0x3>
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	c8 1a       	sub	r12, r24
    1b66:	d8 0a       	sbc	r13, r24
    1b68:	e8 0a       	sbc	r14, r24
    1b6a:	f8 0a       	sbc	r15, r24
    1b6c:	c0 92 1a 11 	sts	0x111A, r12	; 0x80111a <xTickCount>
    1b70:	d0 92 1b 11 	sts	0x111B, r13	; 0x80111b <xTickCount+0x1>
    1b74:	e0 92 1c 11 	sts	0x111C, r14	; 0x80111c <xTickCount+0x2>
    1b78:	f0 92 1d 11 	sts	0x111D, r15	; 0x80111d <xTickCount+0x3>
    1b7c:	c1 14       	cp	r12, r1
    1b7e:	d1 04       	cpc	r13, r1
    1b80:	e1 04       	cpc	r14, r1
    1b82:	f1 04       	cpc	r15, r1
    1b84:	b1 f4       	brne	.+44     	; 0x1bb2 <xTaskIncrementTick+0x74>
    1b86:	80 91 43 11 	lds	r24, 0x1143	; 0x801143 <pxDelayedTaskList>
    1b8a:	90 91 44 11 	lds	r25, 0x1144	; 0x801144 <pxDelayedTaskList+0x1>
    1b8e:	20 91 41 11 	lds	r18, 0x1141	; 0x801141 <pxOverflowDelayedTaskList>
    1b92:	30 91 42 11 	lds	r19, 0x1142	; 0x801142 <pxOverflowDelayedTaskList+0x1>
    1b96:	30 93 44 11 	sts	0x1144, r19	; 0x801144 <pxDelayedTaskList+0x1>
    1b9a:	20 93 43 11 	sts	0x1143, r18	; 0x801143 <pxDelayedTaskList>
    1b9e:	90 93 42 11 	sts	0x1142, r25	; 0x801142 <pxOverflowDelayedTaskList+0x1>
    1ba2:	80 93 41 11 	sts	0x1141, r24	; 0x801141 <pxOverflowDelayedTaskList>
    1ba6:	80 91 12 11 	lds	r24, 0x1112	; 0x801112 <xNumOfOverflows>
    1baa:	8f 5f       	subi	r24, 0xFF	; 255
    1bac:	80 93 12 11 	sts	0x1112, r24	; 0x801112 <xNumOfOverflows>
    1bb0:	18 dd       	rcall	.-1488   	; 0x15e2 <prvResetNextTaskUnblockTime>
    1bb2:	80 91 0d 11 	lds	r24, 0x110D	; 0x80110d <xNextTaskUnblockTime>
    1bb6:	90 91 0e 11 	lds	r25, 0x110E	; 0x80110e <xNextTaskUnblockTime+0x1>
    1bba:	a0 91 0f 11 	lds	r26, 0x110F	; 0x80110f <xNextTaskUnblockTime+0x2>
    1bbe:	b0 91 10 11 	lds	r27, 0x1110	; 0x801110 <xNextTaskUnblockTime+0x3>
    1bc2:	c8 16       	cp	r12, r24
    1bc4:	d9 06       	cpc	r13, r25
    1bc6:	ea 06       	cpc	r14, r26
    1bc8:	fb 06       	cpc	r15, r27
    1bca:	20 f4       	brcc	.+8      	; 0x1bd4 <xTaskIncrementTick+0x96>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	b2 c0       	rjmp	.+356    	; 0x1d34 <xTaskIncrementTick+0x1f6>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <xTaskIncrementTick+0x98>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	e0 91 43 11 	lds	r30, 0x1143	; 0x801143 <pxDelayedTaskList>
    1bda:	f0 91 44 11 	lds	r31, 0x1144	; 0x801144 <pxDelayedTaskList+0x1>
    1bde:	90 81       	ld	r25, Z
    1be0:	91 11       	cpse	r25, r1
    1be2:	0c c0       	rjmp	.+24     	; 0x1bfc <xTaskIncrementTick+0xbe>
    1be4:	4f ef       	ldi	r20, 0xFF	; 255
    1be6:	5f ef       	ldi	r21, 0xFF	; 255
    1be8:	ba 01       	movw	r22, r20
    1bea:	40 93 0d 11 	sts	0x110D, r20	; 0x80110d <xNextTaskUnblockTime>
    1bee:	50 93 0e 11 	sts	0x110E, r21	; 0x80110e <xNextTaskUnblockTime+0x1>
    1bf2:	60 93 0f 11 	sts	0x110F, r22	; 0x80110f <xNextTaskUnblockTime+0x2>
    1bf6:	70 93 10 11 	sts	0x1110, r23	; 0x801110 <xNextTaskUnblockTime+0x3>
    1bfa:	9c c0       	rjmp	.+312    	; 0x1d34 <xTaskIncrementTick+0x1f6>
    1bfc:	e0 91 43 11 	lds	r30, 0x1143	; 0x801143 <pxDelayedTaskList>
    1c00:	f0 91 44 11 	lds	r31, 0x1144	; 0x801144 <pxDelayedTaskList+0x1>
    1c04:	07 80       	ldd	r0, Z+7	; 0x07
    1c06:	f0 85       	ldd	r31, Z+8	; 0x08
    1c08:	e0 2d       	mov	r30, r0
    1c0a:	00 84       	ldd	r0, Z+8	; 0x08
    1c0c:	f1 85       	ldd	r31, Z+9	; 0x09
    1c0e:	e0 2d       	mov	r30, r0
    1c10:	42 81       	ldd	r20, Z+2	; 0x02
    1c12:	53 81       	ldd	r21, Z+3	; 0x03
    1c14:	64 81       	ldd	r22, Z+4	; 0x04
    1c16:	75 81       	ldd	r23, Z+5	; 0x05
    1c18:	c4 16       	cp	r12, r20
    1c1a:	d5 06       	cpc	r13, r21
    1c1c:	e6 06       	cpc	r14, r22
    1c1e:	f7 06       	cpc	r15, r23
    1c20:	48 f4       	brcc	.+18     	; 0x1c34 <xTaskIncrementTick+0xf6>
    1c22:	40 93 0d 11 	sts	0x110D, r20	; 0x80110d <xNextTaskUnblockTime>
    1c26:	50 93 0e 11 	sts	0x110E, r21	; 0x80110e <xNextTaskUnblockTime+0x1>
    1c2a:	60 93 0f 11 	sts	0x110F, r22	; 0x80110f <xNextTaskUnblockTime+0x2>
    1c2e:	70 93 10 11 	sts	0x1110, r23	; 0x801110 <xNextTaskUnblockTime+0x3>
    1c32:	80 c0       	rjmp	.+256    	; 0x1d34 <xTaskIncrementTick+0x1f6>
    1c34:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c36:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c38:	c6 81       	ldd	r28, Z+6	; 0x06
    1c3a:	d7 81       	ldd	r29, Z+7	; 0x07
    1c3c:	20 85       	ldd	r18, Z+8	; 0x08
    1c3e:	31 85       	ldd	r19, Z+9	; 0x09
    1c40:	3f 83       	std	Y+7, r19	; 0x07
    1c42:	2e 83       	std	Y+6, r18	; 0x06
    1c44:	c0 85       	ldd	r28, Z+8	; 0x08
    1c46:	d1 85       	ldd	r29, Z+9	; 0x09
    1c48:	26 81       	ldd	r18, Z+6	; 0x06
    1c4a:	37 81       	ldd	r19, Z+7	; 0x07
    1c4c:	3d 83       	std	Y+5, r19	; 0x05
    1c4e:	2c 83       	std	Y+4, r18	; 0x04
    1c50:	11 96       	adiw	r26, 0x01	; 1
    1c52:	4d 91       	ld	r20, X+
    1c54:	5c 91       	ld	r21, X
    1c56:	12 97       	sbiw	r26, 0x02	; 2
    1c58:	9f 01       	movw	r18, r30
    1c5a:	2e 5f       	subi	r18, 0xFE	; 254
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	42 17       	cp	r20, r18
    1c60:	53 07       	cpc	r21, r19
    1c62:	31 f4       	brne	.+12     	; 0x1c70 <xTaskIncrementTick+0x132>
    1c64:	40 85       	ldd	r20, Z+8	; 0x08
    1c66:	51 85       	ldd	r21, Z+9	; 0x09
    1c68:	12 96       	adiw	r26, 0x02	; 2
    1c6a:	5c 93       	st	X, r21
    1c6c:	4e 93       	st	-X, r20
    1c6e:	11 97       	sbiw	r26, 0x01	; 1
    1c70:	15 86       	std	Z+13, r1	; 0x0d
    1c72:	14 86       	std	Z+12, r1	; 0x0c
    1c74:	9c 91       	ld	r25, X
    1c76:	91 50       	subi	r25, 0x01	; 1
    1c78:	9c 93       	st	X, r25
    1c7a:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c7c:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c7e:	10 97       	sbiw	r26, 0x00	; 0
    1c80:	09 f1       	breq	.+66     	; 0x1cc4 <xTaskIncrementTick+0x186>
    1c82:	c2 89       	ldd	r28, Z+18	; 0x12
    1c84:	d3 89       	ldd	r29, Z+19	; 0x13
    1c86:	44 89       	ldd	r20, Z+20	; 0x14
    1c88:	55 89       	ldd	r21, Z+21	; 0x15
    1c8a:	5f 83       	std	Y+7, r21	; 0x07
    1c8c:	4e 83       	std	Y+6, r20	; 0x06
    1c8e:	c4 89       	ldd	r28, Z+20	; 0x14
    1c90:	d5 89       	ldd	r29, Z+21	; 0x15
    1c92:	42 89       	ldd	r20, Z+18	; 0x12
    1c94:	53 89       	ldd	r21, Z+19	; 0x13
    1c96:	5d 83       	std	Y+5, r21	; 0x05
    1c98:	4c 83       	std	Y+4, r20	; 0x04
    1c9a:	11 96       	adiw	r26, 0x01	; 1
    1c9c:	6d 91       	ld	r22, X+
    1c9e:	7c 91       	ld	r23, X
    1ca0:	12 97       	sbiw	r26, 0x02	; 2
    1ca2:	af 01       	movw	r20, r30
    1ca4:	42 5f       	subi	r20, 0xF2	; 242
    1ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca8:	64 17       	cp	r22, r20
    1caa:	75 07       	cpc	r23, r21
    1cac:	31 f4       	brne	.+12     	; 0x1cba <xTaskIncrementTick+0x17c>
    1cae:	44 89       	ldd	r20, Z+20	; 0x14
    1cb0:	55 89       	ldd	r21, Z+21	; 0x15
    1cb2:	12 96       	adiw	r26, 0x02	; 2
    1cb4:	5c 93       	st	X, r21
    1cb6:	4e 93       	st	-X, r20
    1cb8:	11 97       	sbiw	r26, 0x01	; 1
    1cba:	11 8e       	std	Z+25, r1	; 0x19
    1cbc:	10 8e       	std	Z+24, r1	; 0x18
    1cbe:	9c 91       	ld	r25, X
    1cc0:	91 50       	subi	r25, 0x01	; 1
    1cc2:	9c 93       	st	X, r25
    1cc4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cc6:	90 91 19 11 	lds	r25, 0x1119	; 0x801119 <uxTopReadyPriority>
    1cca:	9a 17       	cp	r25, r26
    1ccc:	10 f4       	brcc	.+4      	; 0x1cd2 <xTaskIncrementTick+0x194>
    1cce:	a0 93 19 11 	sts	0x1119, r26	; 0x801119 <uxTopReadyPriority>
    1cd2:	9b e0       	ldi	r25, 0x0B	; 11
    1cd4:	9a 9f       	mul	r25, r26
    1cd6:	d0 01       	movw	r26, r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	a5 5a       	subi	r26, 0xA5	; 165
    1cdc:	be 4e       	sbci	r27, 0xEE	; 238
    1cde:	11 96       	adiw	r26, 0x01	; 1
    1ce0:	0d 90       	ld	r0, X+
    1ce2:	bc 91       	ld	r27, X
    1ce4:	a0 2d       	mov	r26, r0
    1ce6:	b7 83       	std	Z+7, r27	; 0x07
    1ce8:	a6 83       	std	Z+6, r26	; 0x06
    1cea:	16 96       	adiw	r26, 0x06	; 6
    1cec:	4d 91       	ld	r20, X+
    1cee:	5c 91       	ld	r21, X
    1cf0:	17 97       	sbiw	r26, 0x07	; 7
    1cf2:	51 87       	std	Z+9, r21	; 0x09
    1cf4:	40 87       	std	Z+8, r20	; 0x08
    1cf6:	16 96       	adiw	r26, 0x06	; 6
    1cf8:	cd 91       	ld	r28, X+
    1cfa:	dc 91       	ld	r29, X
    1cfc:	17 97       	sbiw	r26, 0x07	; 7
    1cfe:	3d 83       	std	Y+5, r19	; 0x05
    1d00:	2c 83       	std	Y+4, r18	; 0x04
    1d02:	17 96       	adiw	r26, 0x07	; 7
    1d04:	3c 93       	st	X, r19
    1d06:	2e 93       	st	-X, r18
    1d08:	16 97       	sbiw	r26, 0x06	; 6
    1d0a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d0c:	9a 9f       	mul	r25, r26
    1d0e:	d0 01       	movw	r26, r0
    1d10:	11 24       	eor	r1, r1
    1d12:	a5 5a       	subi	r26, 0xA5	; 165
    1d14:	be 4e       	sbci	r27, 0xEE	; 238
    1d16:	b5 87       	std	Z+13, r27	; 0x0d
    1d18:	a4 87       	std	Z+12, r26	; 0x0c
    1d1a:	9c 91       	ld	r25, X
    1d1c:	9f 5f       	subi	r25, 0xFF	; 255
    1d1e:	9c 93       	st	X, r25
    1d20:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d22:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    1d26:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    1d2a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d2c:	29 17       	cp	r18, r25
    1d2e:	08 f0       	brcs	.+2      	; 0x1d32 <xTaskIncrementTick+0x1f4>
    1d30:	4f cf       	rjmp	.-354    	; 0x1bd0 <xTaskIncrementTick+0x92>
    1d32:	51 cf       	rjmp	.-350    	; 0x1bd6 <xTaskIncrementTick+0x98>
    1d34:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    1d38:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    1d3c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1d3e:	9b e0       	ldi	r25, 0x0B	; 11
    1d40:	e9 9f       	mul	r30, r25
    1d42:	f0 01       	movw	r30, r0
    1d44:	11 24       	eor	r1, r1
    1d46:	e5 5a       	subi	r30, 0xA5	; 165
    1d48:	fe 4e       	sbci	r31, 0xEE	; 238
    1d4a:	90 81       	ld	r25, Z
    1d4c:	92 30       	cpi	r25, 0x02	; 2
    1d4e:	08 f0       	brcs	.+2      	; 0x1d52 <xTaskIncrementTick+0x214>
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 91 13 11 	lds	r25, 0x1113	; 0x801113 <xYieldPending>
    1d56:	91 11       	cpse	r25, r1
    1d58:	16 c0       	rjmp	.+44     	; 0x1d86 <xTaskIncrementTick+0x248>
    1d5a:	16 c0       	rjmp	.+44     	; 0x1d88 <xTaskIncrementTick+0x24a>
    1d5c:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <xPendedTicks>
    1d60:	90 91 15 11 	lds	r25, 0x1115	; 0x801115 <xPendedTicks+0x1>
    1d64:	a0 91 16 11 	lds	r26, 0x1116	; 0x801116 <xPendedTicks+0x2>
    1d68:	b0 91 17 11 	lds	r27, 0x1117	; 0x801117 <xPendedTicks+0x3>
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	a1 1d       	adc	r26, r1
    1d70:	b1 1d       	adc	r27, r1
    1d72:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <xPendedTicks>
    1d76:	90 93 15 11 	sts	0x1115, r25	; 0x801115 <xPendedTicks+0x1>
    1d7a:	a0 93 16 11 	sts	0x1116, r26	; 0x801116 <xPendedTicks+0x2>
    1d7e:	b0 93 17 11 	sts	0x1117, r27	; 0x801117 <xPendedTicks+0x3>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	01 c0       	rjmp	.+2      	; 0x1d88 <xTaskIncrementTick+0x24a>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	08 95       	ret

00001d96 <xTaskResumeAll>:
    1d96:	cf 92       	push	r12
    1d98:	df 92       	push	r13
    1d9a:	ef 92       	push	r14
    1d9c:	ff 92       	push	r15
    1d9e:	cf 93       	push	r28
    1da0:	df 93       	push	r29
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	0f 92       	push	r0
    1da8:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <uxSchedulerSuspended>
    1dac:	81 50       	subi	r24, 0x01	; 1
    1dae:	80 93 0a 11 	sts	0x110A, r24	; 0x80110a <uxSchedulerSuspended>
    1db2:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <uxSchedulerSuspended>
    1db6:	81 11       	cpse	r24, r1
    1db8:	be c0       	rjmp	.+380    	; 0x1f36 <xTaskResumeAll+0x1a0>
    1dba:	80 91 1e 11 	lds	r24, 0x111E	; 0x80111e <uxCurrentNumberOfTasks>
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	88 c0       	rjmp	.+272    	; 0x1ed2 <xTaskResumeAll+0x13c>
    1dc2:	bc c0       	rjmp	.+376    	; 0x1f3c <xTaskResumeAll+0x1a6>
    1dc4:	e0 91 3d 11 	lds	r30, 0x113D	; 0x80113d <xPendingReadyList+0x7>
    1dc8:	f0 91 3e 11 	lds	r31, 0x113E	; 0x80113e <xPendingReadyList+0x8>
    1dcc:	00 84       	ldd	r0, Z+8	; 0x08
    1dce:	f1 85       	ldd	r31, Z+9	; 0x09
    1dd0:	e0 2d       	mov	r30, r0
    1dd2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1dd4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1dd6:	c2 89       	ldd	r28, Z+18	; 0x12
    1dd8:	d3 89       	ldd	r29, Z+19	; 0x13
    1dda:	84 89       	ldd	r24, Z+20	; 0x14
    1ddc:	95 89       	ldd	r25, Z+21	; 0x15
    1dde:	9f 83       	std	Y+7, r25	; 0x07
    1de0:	8e 83       	std	Y+6, r24	; 0x06
    1de2:	c4 89       	ldd	r28, Z+20	; 0x14
    1de4:	d5 89       	ldd	r29, Z+21	; 0x15
    1de6:	82 89       	ldd	r24, Z+18	; 0x12
    1de8:	93 89       	ldd	r25, Z+19	; 0x13
    1dea:	9d 83       	std	Y+5, r25	; 0x05
    1dec:	8c 83       	std	Y+4, r24	; 0x04
    1dee:	11 96       	adiw	r26, 0x01	; 1
    1df0:	2d 91       	ld	r18, X+
    1df2:	3c 91       	ld	r19, X
    1df4:	12 97       	sbiw	r26, 0x02	; 2
    1df6:	cf 01       	movw	r24, r30
    1df8:	0e 96       	adiw	r24, 0x0e	; 14
    1dfa:	28 17       	cp	r18, r24
    1dfc:	39 07       	cpc	r19, r25
    1dfe:	31 f4       	brne	.+12     	; 0x1e0c <xTaskResumeAll+0x76>
    1e00:	84 89       	ldd	r24, Z+20	; 0x14
    1e02:	95 89       	ldd	r25, Z+21	; 0x15
    1e04:	12 96       	adiw	r26, 0x02	; 2
    1e06:	9c 93       	st	X, r25
    1e08:	8e 93       	st	-X, r24
    1e0a:	11 97       	sbiw	r26, 0x01	; 1
    1e0c:	11 8e       	std	Z+25, r1	; 0x19
    1e0e:	10 8e       	std	Z+24, r1	; 0x18
    1e10:	8c 91       	ld	r24, X
    1e12:	81 50       	subi	r24, 0x01	; 1
    1e14:	8c 93       	st	X, r24
    1e16:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e18:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e1a:	c6 81       	ldd	r28, Z+6	; 0x06
    1e1c:	d7 81       	ldd	r29, Z+7	; 0x07
    1e1e:	80 85       	ldd	r24, Z+8	; 0x08
    1e20:	91 85       	ldd	r25, Z+9	; 0x09
    1e22:	9f 83       	std	Y+7, r25	; 0x07
    1e24:	8e 83       	std	Y+6, r24	; 0x06
    1e26:	c0 85       	ldd	r28, Z+8	; 0x08
    1e28:	d1 85       	ldd	r29, Z+9	; 0x09
    1e2a:	86 81       	ldd	r24, Z+6	; 0x06
    1e2c:	97 81       	ldd	r25, Z+7	; 0x07
    1e2e:	9d 83       	std	Y+5, r25	; 0x05
    1e30:	8c 83       	std	Y+4, r24	; 0x04
    1e32:	11 96       	adiw	r26, 0x01	; 1
    1e34:	8d 91       	ld	r24, X+
    1e36:	9c 91       	ld	r25, X
    1e38:	12 97       	sbiw	r26, 0x02	; 2
    1e3a:	9f 01       	movw	r18, r30
    1e3c:	2e 5f       	subi	r18, 0xFE	; 254
    1e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e40:	82 17       	cp	r24, r18
    1e42:	93 07       	cpc	r25, r19
    1e44:	31 f4       	brne	.+12     	; 0x1e52 <xTaskResumeAll+0xbc>
    1e46:	80 85       	ldd	r24, Z+8	; 0x08
    1e48:	91 85       	ldd	r25, Z+9	; 0x09
    1e4a:	12 96       	adiw	r26, 0x02	; 2
    1e4c:	9c 93       	st	X, r25
    1e4e:	8e 93       	st	-X, r24
    1e50:	11 97       	sbiw	r26, 0x01	; 1
    1e52:	15 86       	std	Z+13, r1	; 0x0d
    1e54:	14 86       	std	Z+12, r1	; 0x0c
    1e56:	8c 91       	ld	r24, X
    1e58:	81 50       	subi	r24, 0x01	; 1
    1e5a:	8c 93       	st	X, r24
    1e5c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e5e:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <uxTopReadyPriority>
    1e62:	8a 17       	cp	r24, r26
    1e64:	10 f4       	brcc	.+4      	; 0x1e6a <xTaskResumeAll+0xd4>
    1e66:	a0 93 19 11 	sts	0x1119, r26	; 0x801119 <uxTopReadyPriority>
    1e6a:	8b e0       	ldi	r24, 0x0B	; 11
    1e6c:	8a 9f       	mul	r24, r26
    1e6e:	d0 01       	movw	r26, r0
    1e70:	11 24       	eor	r1, r1
    1e72:	a5 5a       	subi	r26, 0xA5	; 165
    1e74:	be 4e       	sbci	r27, 0xEE	; 238
    1e76:	11 96       	adiw	r26, 0x01	; 1
    1e78:	0d 90       	ld	r0, X+
    1e7a:	bc 91       	ld	r27, X
    1e7c:	a0 2d       	mov	r26, r0
    1e7e:	b7 83       	std	Z+7, r27	; 0x07
    1e80:	a6 83       	std	Z+6, r26	; 0x06
    1e82:	16 96       	adiw	r26, 0x06	; 6
    1e84:	4d 91       	ld	r20, X+
    1e86:	5c 91       	ld	r21, X
    1e88:	17 97       	sbiw	r26, 0x07	; 7
    1e8a:	51 87       	std	Z+9, r21	; 0x09
    1e8c:	40 87       	std	Z+8, r20	; 0x08
    1e8e:	16 96       	adiw	r26, 0x06	; 6
    1e90:	cd 91       	ld	r28, X+
    1e92:	dc 91       	ld	r29, X
    1e94:	17 97       	sbiw	r26, 0x07	; 7
    1e96:	3d 83       	std	Y+5, r19	; 0x05
    1e98:	2c 83       	std	Y+4, r18	; 0x04
    1e9a:	17 96       	adiw	r26, 0x07	; 7
    1e9c:	3c 93       	st	X, r19
    1e9e:	2e 93       	st	-X, r18
    1ea0:	16 97       	sbiw	r26, 0x06	; 6
    1ea2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ea4:	8a 9f       	mul	r24, r26
    1ea6:	d0 01       	movw	r26, r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	a5 5a       	subi	r26, 0xA5	; 165
    1eac:	be 4e       	sbci	r27, 0xEE	; 238
    1eae:	b5 87       	std	Z+13, r27	; 0x0d
    1eb0:	a4 87       	std	Z+12, r26	; 0x0c
    1eb2:	8c 91       	ld	r24, X
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	8c 93       	st	X, r24
    1eb8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eba:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    1ebe:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    1ec2:	5a 96       	adiw	r26, 0x1a	; 26
    1ec4:	8c 91       	ld	r24, X
    1ec6:	98 17       	cp	r25, r24
    1ec8:	30 f0       	brcs	.+12     	; 0x1ed6 <xTaskResumeAll+0x140>
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	80 93 13 11 	sts	0x1113, r24	; 0x801113 <xYieldPending>
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <xTaskResumeAll+0x140>
    1ed2:	e0 e0       	ldi	r30, 0x00	; 0
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 91 36 11 	lds	r24, 0x1136	; 0x801136 <xPendingReadyList>
    1eda:	81 11       	cpse	r24, r1
    1edc:	73 cf       	rjmp	.-282    	; 0x1dc4 <xTaskResumeAll+0x2e>
    1ede:	ef 2b       	or	r30, r31
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <xTaskResumeAll+0x14e>
    1ee2:	7f db       	rcall	.-2306   	; 0x15e2 <prvResetNextTaskUnblockTime>
    1ee4:	c0 90 14 11 	lds	r12, 0x1114	; 0x801114 <xPendedTicks>
    1ee8:	d0 90 15 11 	lds	r13, 0x1115	; 0x801115 <xPendedTicks+0x1>
    1eec:	e0 90 16 11 	lds	r14, 0x1116	; 0x801116 <xPendedTicks+0x2>
    1ef0:	f0 90 17 11 	lds	r15, 0x1117	; 0x801117 <xPendedTicks+0x3>
    1ef4:	c1 14       	cp	r12, r1
    1ef6:	d1 04       	cpc	r13, r1
    1ef8:	e1 04       	cpc	r14, r1
    1efa:	f1 04       	cpc	r15, r1
    1efc:	a1 f0       	breq	.+40     	; 0x1f26 <xTaskResumeAll+0x190>
    1efe:	1f de       	rcall	.-962    	; 0x1b3e <xTaskIncrementTick>
    1f00:	88 23       	and	r24, r24
    1f02:	19 f0       	breq	.+6      	; 0x1f0a <xTaskResumeAll+0x174>
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	80 93 13 11 	sts	0x1113, r24	; 0x801113 <xYieldPending>
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	c8 1a       	sub	r12, r24
    1f0e:	d1 08       	sbc	r13, r1
    1f10:	e1 08       	sbc	r14, r1
    1f12:	f1 08       	sbc	r15, r1
    1f14:	a1 f7       	brne	.-24     	; 0x1efe <xTaskResumeAll+0x168>
    1f16:	10 92 14 11 	sts	0x1114, r1	; 0x801114 <xPendedTicks>
    1f1a:	10 92 15 11 	sts	0x1115, r1	; 0x801115 <xPendedTicks+0x1>
    1f1e:	10 92 16 11 	sts	0x1116, r1	; 0x801116 <xPendedTicks+0x2>
    1f22:	10 92 17 11 	sts	0x1117, r1	; 0x801117 <xPendedTicks+0x3>
    1f26:	80 91 13 11 	lds	r24, 0x1113	; 0x801113 <xYieldPending>
    1f2a:	88 23       	and	r24, r24
    1f2c:	31 f0       	breq	.+12     	; 0x1f3a <xTaskResumeAll+0x1a4>
    1f2e:	0e 94 26 04 	call	0x84c	; 0x84c <vPortYield>
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <xTaskResumeAll+0x1a6>
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	01 c0       	rjmp	.+2      	; 0x1f3c <xTaskResumeAll+0x1a6>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	df 90       	pop	r13
    1f4a:	cf 90       	pop	r12
    1f4c:	08 95       	ret

00001f4e <xTaskDelayUntil>:
    1f4e:	8f 92       	push	r8
    1f50:	9f 92       	push	r9
    1f52:	af 92       	push	r10
    1f54:	bf 92       	push	r11
    1f56:	cf 92       	push	r12
    1f58:	df 92       	push	r13
    1f5a:	ef 92       	push	r14
    1f5c:	ff 92       	push	r15
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	ec 01       	movw	r28, r24
    1f66:	6a 01       	movw	r12, r20
    1f68:	7b 01       	movw	r14, r22
    1f6a:	d5 dd       	rcall	.-1110   	; 0x1b16 <vTaskSuspendAll>
    1f6c:	80 90 1a 11 	lds	r8, 0x111A	; 0x80111a <xTickCount>
    1f70:	90 90 1b 11 	lds	r9, 0x111B	; 0x80111b <xTickCount+0x1>
    1f74:	a0 90 1c 11 	lds	r10, 0x111C	; 0x80111c <xTickCount+0x2>
    1f78:	b0 90 1d 11 	lds	r11, 0x111D	; 0x80111d <xTickCount+0x3>
    1f7c:	88 81       	ld	r24, Y
    1f7e:	99 81       	ldd	r25, Y+1	; 0x01
    1f80:	aa 81       	ldd	r26, Y+2	; 0x02
    1f82:	bb 81       	ldd	r27, Y+3	; 0x03
    1f84:	ac 01       	movw	r20, r24
    1f86:	bd 01       	movw	r22, r26
    1f88:	4c 0d       	add	r20, r12
    1f8a:	5d 1d       	adc	r21, r13
    1f8c:	6e 1d       	adc	r22, r14
    1f8e:	7f 1d       	adc	r23, r15
    1f90:	88 16       	cp	r8, r24
    1f92:	99 06       	cpc	r9, r25
    1f94:	aa 06       	cpc	r10, r26
    1f96:	bb 06       	cpc	r11, r27
    1f98:	60 f4       	brcc	.+24     	; 0x1fb2 <xTaskDelayUntil+0x64>
    1f9a:	48 17       	cp	r20, r24
    1f9c:	59 07       	cpc	r21, r25
    1f9e:	6a 07       	cpc	r22, r26
    1fa0:	7b 07       	cpc	r23, r27
    1fa2:	98 f4       	brcc	.+38     	; 0x1fca <xTaskDelayUntil+0x7c>
    1fa4:	84 16       	cp	r8, r20
    1fa6:	95 06       	cpc	r9, r21
    1fa8:	a6 06       	cpc	r10, r22
    1faa:	b7 06       	cpc	r11, r23
    1fac:	80 f0       	brcs	.+32     	; 0x1fce <xTaskDelayUntil+0x80>
    1fae:	10 e0       	ldi	r17, 0x00	; 0
    1fb0:	13 c0       	rjmp	.+38     	; 0x1fd8 <xTaskDelayUntil+0x8a>
    1fb2:	48 17       	cp	r20, r24
    1fb4:	59 07       	cpc	r21, r25
    1fb6:	6a 07       	cpc	r22, r26
    1fb8:	7b 07       	cpc	r23, r27
    1fba:	58 f0       	brcs	.+22     	; 0x1fd2 <xTaskDelayUntil+0x84>
    1fbc:	84 16       	cp	r8, r20
    1fbe:	95 06       	cpc	r9, r21
    1fc0:	a6 06       	cpc	r10, r22
    1fc2:	b7 06       	cpc	r11, r23
    1fc4:	40 f0       	brcs	.+16     	; 0x1fd6 <xTaskDelayUntil+0x88>
    1fc6:	10 e0       	ldi	r17, 0x00	; 0
    1fc8:	07 c0       	rjmp	.+14     	; 0x1fd8 <xTaskDelayUntil+0x8a>
    1fca:	10 e0       	ldi	r17, 0x00	; 0
    1fcc:	05 c0       	rjmp	.+10     	; 0x1fd8 <xTaskDelayUntil+0x8a>
    1fce:	11 e0       	ldi	r17, 0x01	; 1
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <xTaskDelayUntil+0x8a>
    1fd2:	11 e0       	ldi	r17, 0x01	; 1
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <xTaskDelayUntil+0x8a>
    1fd6:	11 e0       	ldi	r17, 0x01	; 1
    1fd8:	48 83       	st	Y, r20
    1fda:	59 83       	std	Y+1, r21	; 0x01
    1fdc:	6a 83       	std	Y+2, r22	; 0x02
    1fde:	7b 83       	std	Y+3, r23	; 0x03
    1fe0:	11 23       	and	r17, r17
    1fe2:	41 f0       	breq	.+16     	; 0x1ff4 <xTaskDelayUntil+0xa6>
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	ba 01       	movw	r22, r20
    1fe8:	68 19       	sub	r22, r8
    1fea:	79 09       	sbc	r23, r9
    1fec:	8a 09       	sbc	r24, r10
    1fee:	9b 09       	sbc	r25, r11
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	6b dc       	rcall	.-1834   	; 0x18ca <prvAddCurrentTaskToDelayedList>
    1ff4:	d0 de       	rcall	.-608    	; 0x1d96 <xTaskResumeAll>
    1ff6:	81 11       	cpse	r24, r1
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <xTaskDelayUntil+0xb0>
    1ffa:	0e 94 26 04 	call	0x84c	; 0x84c <vPortYield>
    1ffe:	81 2f       	mov	r24, r17
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	df 90       	pop	r13
    200c:	cf 90       	pop	r12
    200e:	bf 90       	pop	r11
    2010:	af 90       	pop	r10
    2012:	9f 90       	pop	r9
    2014:	8f 90       	pop	r8
    2016:	08 95       	ret

00002018 <vTaskDelay>:
    2018:	cf 92       	push	r12
    201a:	df 92       	push	r13
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	6b 01       	movw	r12, r22
    2022:	7c 01       	movw	r14, r24
    2024:	67 2b       	or	r22, r23
    2026:	68 2b       	or	r22, r24
    2028:	69 2b       	or	r22, r25
    202a:	39 f0       	breq	.+14     	; 0x203a <vTaskDelay+0x22>
    202c:	74 dd       	rcall	.-1304   	; 0x1b16 <vTaskSuspendAll>
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	c7 01       	movw	r24, r14
    2032:	b6 01       	movw	r22, r12
    2034:	4a dc       	rcall	.-1900   	; 0x18ca <prvAddCurrentTaskToDelayedList>
    2036:	af de       	rcall	.-674    	; 0x1d96 <xTaskResumeAll>
    2038:	01 c0       	rjmp	.+2      	; 0x203c <vTaskDelay+0x24>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	81 11       	cpse	r24, r1
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <vTaskDelay+0x2c>
    2040:	0e 94 26 04 	call	0x84c	; 0x84c <vPortYield>
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	cf 90       	pop	r12
    204c:	08 95       	ret

0000204e <vTaskSwitchContext>:
    204e:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <uxSchedulerSuspended>
    2052:	88 23       	and	r24, r24
    2054:	21 f0       	breq	.+8      	; 0x205e <vTaskSwitchContext+0x10>
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	80 93 13 11 	sts	0x1113, r24	; 0x801113 <xYieldPending>
    205c:	08 95       	ret
    205e:	10 92 13 11 	sts	0x1113, r1	; 0x801113 <xYieldPending>
    2062:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2066:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    206a:	20 81       	ld	r18, Z
    206c:	31 81       	ldd	r19, Z+1	; 0x01
    206e:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2072:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2076:	83 8d       	ldd	r24, Z+27	; 0x1b
    2078:	94 8d       	ldd	r25, Z+28	; 0x1c
    207a:	82 17       	cp	r24, r18
    207c:	93 07       	cpc	r25, r19
    207e:	60 f0       	brcs	.+24     	; 0x2098 <vTaskSwitchContext+0x4a>
    2080:	60 91 c9 11 	lds	r22, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2084:	70 91 ca 11 	lds	r23, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2088:	63 5e       	subi	r22, 0xE3	; 227
    208a:	7f 4f       	sbci	r23, 0xFF	; 255
    208c:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2090:	90 91 ca 11 	lds	r25, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2094:	0e 94 85 18 	call	0x310a	; 0x310a <vApplicationStackOverflowHook>
    2098:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <uxTopReadyPriority>
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <vTaskSwitchContext+0x52>
    209e:	81 50       	subi	r24, 0x01	; 1
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	9b e0       	ldi	r25, 0x0B	; 11
    20a6:	92 9f       	mul	r25, r18
    20a8:	f0 01       	movw	r30, r0
    20aa:	93 9f       	mul	r25, r19
    20ac:	f0 0d       	add	r31, r0
    20ae:	11 24       	eor	r1, r1
    20b0:	e5 5a       	subi	r30, 0xA5	; 165
    20b2:	fe 4e       	sbci	r31, 0xEE	; 238
    20b4:	90 81       	ld	r25, Z
    20b6:	99 23       	and	r25, r25
    20b8:	91 f3       	breq	.-28     	; 0x209e <vTaskSwitchContext+0x50>
    20ba:	9b e0       	ldi	r25, 0x0B	; 11
    20bc:	92 9f       	mul	r25, r18
    20be:	a0 01       	movw	r20, r0
    20c0:	93 9f       	mul	r25, r19
    20c2:	50 0d       	add	r21, r0
    20c4:	11 24       	eor	r1, r1
    20c6:	df 01       	movw	r26, r30
    20c8:	01 80       	ldd	r0, Z+1	; 0x01
    20ca:	f2 81       	ldd	r31, Z+2	; 0x02
    20cc:	e0 2d       	mov	r30, r0
    20ce:	04 80       	ldd	r0, Z+4	; 0x04
    20d0:	f5 81       	ldd	r31, Z+5	; 0x05
    20d2:	e0 2d       	mov	r30, r0
    20d4:	12 96       	adiw	r26, 0x02	; 2
    20d6:	fc 93       	st	X, r31
    20d8:	ee 93       	st	-X, r30
    20da:	11 97       	sbiw	r26, 0x01	; 1
    20dc:	42 5a       	subi	r20, 0xA2	; 162
    20de:	5e 4e       	sbci	r21, 0xEE	; 238
    20e0:	e4 17       	cp	r30, r20
    20e2:	f5 07       	cpc	r31, r21
    20e4:	29 f4       	brne	.+10     	; 0x20f0 <vTaskSwitchContext+0xa2>
    20e6:	44 81       	ldd	r20, Z+4	; 0x04
    20e8:	55 81       	ldd	r21, Z+5	; 0x05
    20ea:	fd 01       	movw	r30, r26
    20ec:	52 83       	std	Z+2, r21	; 0x02
    20ee:	41 83       	std	Z+1, r20	; 0x01
    20f0:	9b e0       	ldi	r25, 0x0B	; 11
    20f2:	92 9f       	mul	r25, r18
    20f4:	f0 01       	movw	r30, r0
    20f6:	93 9f       	mul	r25, r19
    20f8:	f0 0d       	add	r31, r0
    20fa:	11 24       	eor	r1, r1
    20fc:	e5 5a       	subi	r30, 0xA5	; 165
    20fe:	fe 4e       	sbci	r31, 0xEE	; 238
    2100:	01 80       	ldd	r0, Z+1	; 0x01
    2102:	f2 81       	ldd	r31, Z+2	; 0x02
    2104:	e0 2d       	mov	r30, r0
    2106:	20 85       	ldd	r18, Z+8	; 0x08
    2108:	31 85       	ldd	r19, Z+9	; 0x09
    210a:	30 93 ca 11 	sts	0x11CA, r19	; 0x8011ca <pxCurrentTCB+0x1>
    210e:	20 93 c9 11 	sts	0x11C9, r18	; 0x8011c9 <pxCurrentTCB>
    2112:	80 93 19 11 	sts	0x1119, r24	; 0x801119 <uxTopReadyPriority>
    2116:	08 95       	ret

00002118 <vTaskPlaceOnEventList>:
    2118:	cf 92       	push	r12
    211a:	df 92       	push	r13
    211c:	ef 92       	push	r14
    211e:	ff 92       	push	r15
    2120:	6a 01       	movw	r12, r20
    2122:	7b 01       	movw	r14, r22
    2124:	60 91 c9 11 	lds	r22, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2128:	70 91 ca 11 	lds	r23, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    212c:	62 5f       	subi	r22, 0xF2	; 242
    212e:	7f 4f       	sbci	r23, 0xFF	; 255
    2130:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInsert>
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	c7 01       	movw	r24, r14
    2138:	b6 01       	movw	r22, r12
    213a:	c7 db       	rcall	.-2162   	; 0x18ca <prvAddCurrentTaskToDelayedList>
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	08 95       	ret

00002146 <vTaskPlaceOnEventListRestricted>:
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	fc 01       	movw	r30, r24
    214c:	cb 01       	movw	r24, r22
    214e:	ba 01       	movw	r22, r20
    2150:	a1 81       	ldd	r26, Z+1	; 0x01
    2152:	b2 81       	ldd	r27, Z+2	; 0x02
    2154:	c0 91 c9 11 	lds	r28, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2158:	d0 91 ca 11 	lds	r29, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    215c:	bb 8b       	std	Y+19, r27	; 0x13
    215e:	aa 8b       	std	Y+18, r26	; 0x12
    2160:	c0 91 c9 11 	lds	r28, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2164:	d0 91 ca 11 	lds	r29, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2168:	16 96       	adiw	r26, 0x06	; 6
    216a:	4d 91       	ld	r20, X+
    216c:	5c 91       	ld	r21, X
    216e:	17 97       	sbiw	r26, 0x07	; 7
    2170:	5d 8b       	std	Y+21, r21	; 0x15
    2172:	4c 8b       	std	Y+20, r20	; 0x14
    2174:	16 96       	adiw	r26, 0x06	; 6
    2176:	cd 91       	ld	r28, X+
    2178:	dc 91       	ld	r29, X
    217a:	17 97       	sbiw	r26, 0x07	; 7
    217c:	40 91 c9 11 	lds	r20, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2180:	50 91 ca 11 	lds	r21, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2184:	42 5f       	subi	r20, 0xF2	; 242
    2186:	5f 4f       	sbci	r21, 0xFF	; 255
    2188:	5d 83       	std	Y+5, r21	; 0x05
    218a:	4c 83       	std	Y+4, r20	; 0x04
    218c:	40 91 c9 11 	lds	r20, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2190:	50 91 ca 11 	lds	r21, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2194:	42 5f       	subi	r20, 0xF2	; 242
    2196:	5f 4f       	sbci	r21, 0xFF	; 255
    2198:	17 96       	adiw	r26, 0x07	; 7
    219a:	5c 93       	st	X, r21
    219c:	4e 93       	st	-X, r20
    219e:	16 97       	sbiw	r26, 0x06	; 6
    21a0:	a0 91 c9 11 	lds	r26, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    21a4:	b0 91 ca 11 	lds	r27, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    21a8:	59 96       	adiw	r26, 0x19	; 25
    21aa:	fc 93       	st	X, r31
    21ac:	ee 93       	st	-X, r30
    21ae:	58 97       	sbiw	r26, 0x18	; 24
    21b0:	30 81       	ld	r19, Z
    21b2:	3f 5f       	subi	r19, 0xFF	; 255
    21b4:	30 83       	st	Z, r19
    21b6:	22 23       	and	r18, r18
    21b8:	19 f0       	breq	.+6      	; 0x21c0 <vTaskPlaceOnEventListRestricted+0x7a>
    21ba:	6f ef       	ldi	r22, 0xFF	; 255
    21bc:	7f ef       	ldi	r23, 0xFF	; 255
    21be:	cb 01       	movw	r24, r22
    21c0:	42 2f       	mov	r20, r18
    21c2:	83 db       	rcall	.-2298   	; 0x18ca <prvAddCurrentTaskToDelayedList>
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <xTaskRemoveFromEventList>:
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	dc 01       	movw	r26, r24
    21d0:	17 96       	adiw	r26, 0x07	; 7
    21d2:	ed 91       	ld	r30, X+
    21d4:	fc 91       	ld	r31, X
    21d6:	18 97       	sbiw	r26, 0x08	; 8
    21d8:	00 84       	ldd	r0, Z+8	; 0x08
    21da:	f1 85       	ldd	r31, Z+9	; 0x09
    21dc:	e0 2d       	mov	r30, r0
    21de:	a0 8d       	ldd	r26, Z+24	; 0x18
    21e0:	b1 8d       	ldd	r27, Z+25	; 0x19
    21e2:	c2 89       	ldd	r28, Z+18	; 0x12
    21e4:	d3 89       	ldd	r29, Z+19	; 0x13
    21e6:	84 89       	ldd	r24, Z+20	; 0x14
    21e8:	95 89       	ldd	r25, Z+21	; 0x15
    21ea:	9f 83       	std	Y+7, r25	; 0x07
    21ec:	8e 83       	std	Y+6, r24	; 0x06
    21ee:	c4 89       	ldd	r28, Z+20	; 0x14
    21f0:	d5 89       	ldd	r29, Z+21	; 0x15
    21f2:	82 89       	ldd	r24, Z+18	; 0x12
    21f4:	93 89       	ldd	r25, Z+19	; 0x13
    21f6:	9d 83       	std	Y+5, r25	; 0x05
    21f8:	8c 83       	std	Y+4, r24	; 0x04
    21fa:	11 96       	adiw	r26, 0x01	; 1
    21fc:	8d 91       	ld	r24, X+
    21fe:	9c 91       	ld	r25, X
    2200:	12 97       	sbiw	r26, 0x02	; 2
    2202:	9f 01       	movw	r18, r30
    2204:	22 5f       	subi	r18, 0xF2	; 242
    2206:	3f 4f       	sbci	r19, 0xFF	; 255
    2208:	82 17       	cp	r24, r18
    220a:	93 07       	cpc	r25, r19
    220c:	31 f4       	brne	.+12     	; 0x221a <__stack+0x1b>
    220e:	84 89       	ldd	r24, Z+20	; 0x14
    2210:	95 89       	ldd	r25, Z+21	; 0x15
    2212:	12 96       	adiw	r26, 0x02	; 2
    2214:	9c 93       	st	X, r25
    2216:	8e 93       	st	-X, r24
    2218:	11 97       	sbiw	r26, 0x01	; 1
    221a:	11 8e       	std	Z+25, r1	; 0x19
    221c:	10 8e       	std	Z+24, r1	; 0x18
    221e:	8c 91       	ld	r24, X
    2220:	81 50       	subi	r24, 0x01	; 1
    2222:	8c 93       	st	X, r24
    2224:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <uxSchedulerSuspended>
    2228:	81 11       	cpse	r24, r1
    222a:	52 c0       	rjmp	.+164    	; 0x22d0 <__stack+0xd1>
    222c:	a4 85       	ldd	r26, Z+12	; 0x0c
    222e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2230:	c6 81       	ldd	r28, Z+6	; 0x06
    2232:	d7 81       	ldd	r29, Z+7	; 0x07
    2234:	80 85       	ldd	r24, Z+8	; 0x08
    2236:	91 85       	ldd	r25, Z+9	; 0x09
    2238:	9f 83       	std	Y+7, r25	; 0x07
    223a:	8e 83       	std	Y+6, r24	; 0x06
    223c:	c0 85       	ldd	r28, Z+8	; 0x08
    223e:	d1 85       	ldd	r29, Z+9	; 0x09
    2240:	86 81       	ldd	r24, Z+6	; 0x06
    2242:	97 81       	ldd	r25, Z+7	; 0x07
    2244:	9d 83       	std	Y+5, r25	; 0x05
    2246:	8c 83       	std	Y+4, r24	; 0x04
    2248:	11 96       	adiw	r26, 0x01	; 1
    224a:	8d 91       	ld	r24, X+
    224c:	9c 91       	ld	r25, X
    224e:	12 97       	sbiw	r26, 0x02	; 2
    2250:	9f 01       	movw	r18, r30
    2252:	2e 5f       	subi	r18, 0xFE	; 254
    2254:	3f 4f       	sbci	r19, 0xFF	; 255
    2256:	82 17       	cp	r24, r18
    2258:	93 07       	cpc	r25, r19
    225a:	31 f4       	brne	.+12     	; 0x2268 <__stack+0x69>
    225c:	80 85       	ldd	r24, Z+8	; 0x08
    225e:	91 85       	ldd	r25, Z+9	; 0x09
    2260:	12 96       	adiw	r26, 0x02	; 2
    2262:	9c 93       	st	X, r25
    2264:	8e 93       	st	-X, r24
    2266:	11 97       	sbiw	r26, 0x01	; 1
    2268:	15 86       	std	Z+13, r1	; 0x0d
    226a:	14 86       	std	Z+12, r1	; 0x0c
    226c:	8c 91       	ld	r24, X
    226e:	81 50       	subi	r24, 0x01	; 1
    2270:	8c 93       	st	X, r24
    2272:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2274:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <uxTopReadyPriority>
    2278:	8a 17       	cp	r24, r26
    227a:	10 f4       	brcc	.+4      	; 0x2280 <__stack+0x81>
    227c:	a0 93 19 11 	sts	0x1119, r26	; 0x801119 <uxTopReadyPriority>
    2280:	8b e0       	ldi	r24, 0x0B	; 11
    2282:	8a 9f       	mul	r24, r26
    2284:	d0 01       	movw	r26, r0
    2286:	11 24       	eor	r1, r1
    2288:	a5 5a       	subi	r26, 0xA5	; 165
    228a:	be 4e       	sbci	r27, 0xEE	; 238
    228c:	11 96       	adiw	r26, 0x01	; 1
    228e:	0d 90       	ld	r0, X+
    2290:	bc 91       	ld	r27, X
    2292:	a0 2d       	mov	r26, r0
    2294:	b7 83       	std	Z+7, r27	; 0x07
    2296:	a6 83       	std	Z+6, r26	; 0x06
    2298:	16 96       	adiw	r26, 0x06	; 6
    229a:	4d 91       	ld	r20, X+
    229c:	5c 91       	ld	r21, X
    229e:	17 97       	sbiw	r26, 0x07	; 7
    22a0:	51 87       	std	Z+9, r21	; 0x09
    22a2:	40 87       	std	Z+8, r20	; 0x08
    22a4:	16 96       	adiw	r26, 0x06	; 6
    22a6:	cd 91       	ld	r28, X+
    22a8:	dc 91       	ld	r29, X
    22aa:	17 97       	sbiw	r26, 0x07	; 7
    22ac:	3d 83       	std	Y+5, r19	; 0x05
    22ae:	2c 83       	std	Y+4, r18	; 0x04
    22b0:	17 96       	adiw	r26, 0x07	; 7
    22b2:	3c 93       	st	X, r19
    22b4:	2e 93       	st	-X, r18
    22b6:	16 97       	sbiw	r26, 0x06	; 6
    22b8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22ba:	8a 9f       	mul	r24, r26
    22bc:	d0 01       	movw	r26, r0
    22be:	11 24       	eor	r1, r1
    22c0:	a5 5a       	subi	r26, 0xA5	; 165
    22c2:	be 4e       	sbci	r27, 0xEE	; 238
    22c4:	b5 87       	std	Z+13, r27	; 0x0d
    22c6:	a4 87       	std	Z+12, r26	; 0x0c
    22c8:	8c 91       	ld	r24, X
    22ca:	8f 5f       	subi	r24, 0xFF	; 255
    22cc:	8c 93       	st	X, r24
    22ce:	1c c0       	rjmp	.+56     	; 0x2308 <__stack+0x109>
    22d0:	46 e3       	ldi	r20, 0x36	; 54
    22d2:	51 e1       	ldi	r21, 0x11	; 17
    22d4:	da 01       	movw	r26, r20
    22d6:	11 96       	adiw	r26, 0x01	; 1
    22d8:	cd 91       	ld	r28, X+
    22da:	dc 91       	ld	r29, X
    22dc:	12 97       	sbiw	r26, 0x02	; 2
    22de:	d3 8b       	std	Z+19, r29	; 0x13
    22e0:	c2 8b       	std	Z+18, r28	; 0x12
    22e2:	8e 81       	ldd	r24, Y+6	; 0x06
    22e4:	9f 81       	ldd	r25, Y+7	; 0x07
    22e6:	95 8b       	std	Z+21, r25	; 0x15
    22e8:	84 8b       	std	Z+20, r24	; 0x14
    22ea:	8e 81       	ldd	r24, Y+6	; 0x06
    22ec:	9f 81       	ldd	r25, Y+7	; 0x07
    22ee:	dc 01       	movw	r26, r24
    22f0:	15 96       	adiw	r26, 0x05	; 5
    22f2:	3c 93       	st	X, r19
    22f4:	2e 93       	st	-X, r18
    22f6:	14 97       	sbiw	r26, 0x04	; 4
    22f8:	3f 83       	std	Y+7, r19	; 0x07
    22fa:	2e 83       	std	Y+6, r18	; 0x06
    22fc:	51 8f       	std	Z+25, r21	; 0x19
    22fe:	40 8f       	std	Z+24, r20	; 0x18
    2300:	da 01       	movw	r26, r20
    2302:	8c 91       	ld	r24, X
    2304:	8f 5f       	subi	r24, 0xFF	; 255
    2306:	8c 93       	st	X, r24
    2308:	92 8d       	ldd	r25, Z+26	; 0x1a
    230a:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    230e:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2312:	82 8d       	ldd	r24, Z+26	; 0x1a
    2314:	89 17       	cp	r24, r25
    2316:	20 f4       	brcc	.+8      	; 0x2320 <__stack+0x121>
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	80 93 13 11 	sts	0x1113, r24	; 0x801113 <xYieldPending>
    231e:	01 c0       	rjmp	.+2      	; 0x2322 <__stack+0x123>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	08 95       	ret

00002328 <vTaskSetTimeOutState>:
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	0f 92       	push	r0
    232e:	20 91 12 11 	lds	r18, 0x1112	; 0x801112 <xNumOfOverflows>
    2332:	fc 01       	movw	r30, r24
    2334:	20 83       	st	Z, r18
    2336:	40 91 1a 11 	lds	r20, 0x111A	; 0x80111a <xTickCount>
    233a:	50 91 1b 11 	lds	r21, 0x111B	; 0x80111b <xTickCount+0x1>
    233e:	60 91 1c 11 	lds	r22, 0x111C	; 0x80111c <xTickCount+0x2>
    2342:	70 91 1d 11 	lds	r23, 0x111D	; 0x80111d <xTickCount+0x3>
    2346:	41 83       	std	Z+1, r20	; 0x01
    2348:	52 83       	std	Z+2, r21	; 0x02
    234a:	63 83       	std	Z+3, r22	; 0x03
    234c:	74 83       	std	Z+4, r23	; 0x04
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	08 95       	ret

00002354 <vTaskInternalSetTimeOutState>:
    2354:	20 91 12 11 	lds	r18, 0x1112	; 0x801112 <xNumOfOverflows>
    2358:	fc 01       	movw	r30, r24
    235a:	20 83       	st	Z, r18
    235c:	40 91 1a 11 	lds	r20, 0x111A	; 0x80111a <xTickCount>
    2360:	50 91 1b 11 	lds	r21, 0x111B	; 0x80111b <xTickCount+0x1>
    2364:	60 91 1c 11 	lds	r22, 0x111C	; 0x80111c <xTickCount+0x2>
    2368:	70 91 1d 11 	lds	r23, 0x111D	; 0x80111d <xTickCount+0x3>
    236c:	41 83       	std	Z+1, r20	; 0x01
    236e:	52 83       	std	Z+2, r21	; 0x02
    2370:	63 83       	std	Z+3, r22	; 0x03
    2372:	74 83       	std	Z+4, r23	; 0x04
    2374:	08 95       	ret

00002376 <xTaskCheckForTimeOut>:
    2376:	8f 92       	push	r8
    2378:	9f 92       	push	r9
    237a:	af 92       	push	r10
    237c:	bf 92       	push	r11
    237e:	cf 92       	push	r12
    2380:	df 92       	push	r13
    2382:	ef 92       	push	r14
    2384:	ff 92       	push	r15
    2386:	0f 93       	push	r16
    2388:	1f 93       	push	r17
    238a:	cf 93       	push	r28
    238c:	df 93       	push	r29
    238e:	fb 01       	movw	r30, r22
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	0f 92       	push	r0
    2396:	c0 90 1a 11 	lds	r12, 0x111A	; 0x80111a <xTickCount>
    239a:	d0 90 1b 11 	lds	r13, 0x111B	; 0x80111b <xTickCount+0x1>
    239e:	e0 90 1c 11 	lds	r14, 0x111C	; 0x80111c <xTickCount+0x2>
    23a2:	f0 90 1d 11 	lds	r15, 0x111D	; 0x80111d <xTickCount+0x3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	11 96       	adiw	r26, 0x01	; 1
    23aa:	0d 91       	ld	r16, X+
    23ac:	1d 91       	ld	r17, X+
    23ae:	2d 91       	ld	r18, X+
    23b0:	3c 91       	ld	r19, X
    23b2:	14 97       	sbiw	r26, 0x04	; 4
    23b4:	46 01       	movw	r8, r12
    23b6:	57 01       	movw	r10, r14
    23b8:	80 1a       	sub	r8, r16
    23ba:	91 0a       	sbc	r9, r17
    23bc:	a2 0a       	sbc	r10, r18
    23be:	b3 0a       	sbc	r11, r19
    23c0:	40 81       	ld	r20, Z
    23c2:	51 81       	ldd	r21, Z+1	; 0x01
    23c4:	62 81       	ldd	r22, Z+2	; 0x02
    23c6:	73 81       	ldd	r23, Z+3	; 0x03
    23c8:	4f 3f       	cpi	r20, 0xFF	; 255
    23ca:	bf ef       	ldi	r27, 0xFF	; 255
    23cc:	5b 07       	cpc	r21, r27
    23ce:	6b 07       	cpc	r22, r27
    23d0:	7b 07       	cpc	r23, r27
    23d2:	39 f1       	breq	.+78     	; 0x2422 <xTaskCheckForTimeOut+0xac>
    23d4:	ec 01       	movw	r28, r24
    23d6:	b8 81       	ld	r27, Y
    23d8:	a0 91 12 11 	lds	r26, 0x1112	; 0x801112 <xNumOfOverflows>
    23dc:	ba 17       	cp	r27, r26
    23de:	59 f0       	breq	.+22     	; 0x23f6 <xTaskCheckForTimeOut+0x80>
    23e0:	c0 16       	cp	r12, r16
    23e2:	d1 06       	cpc	r13, r17
    23e4:	e2 06       	cpc	r14, r18
    23e6:	f3 06       	cpc	r15, r19
    23e8:	30 f0       	brcs	.+12     	; 0x23f6 <xTaskCheckForTimeOut+0x80>
    23ea:	10 82       	st	Z, r1
    23ec:	11 82       	std	Z+1, r1	; 0x01
    23ee:	12 82       	std	Z+2, r1	; 0x02
    23f0:	13 82       	std	Z+3, r1	; 0x03
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	17 c0       	rjmp	.+46     	; 0x2424 <xTaskCheckForTimeOut+0xae>
    23f6:	84 16       	cp	r8, r20
    23f8:	95 06       	cpc	r9, r21
    23fa:	a6 06       	cpc	r10, r22
    23fc:	b7 06       	cpc	r11, r23
    23fe:	58 f4       	brcc	.+22     	; 0x2416 <xTaskCheckForTimeOut+0xa0>
    2400:	48 19       	sub	r20, r8
    2402:	59 09       	sbc	r21, r9
    2404:	6a 09       	sbc	r22, r10
    2406:	7b 09       	sbc	r23, r11
    2408:	40 83       	st	Z, r20
    240a:	51 83       	std	Z+1, r21	; 0x01
    240c:	62 83       	std	Z+2, r22	; 0x02
    240e:	73 83       	std	Z+3, r23	; 0x03
    2410:	a1 df       	rcall	.-190    	; 0x2354 <vTaskInternalSetTimeOutState>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	07 c0       	rjmp	.+14     	; 0x2424 <xTaskCheckForTimeOut+0xae>
    2416:	10 82       	st	Z, r1
    2418:	11 82       	std	Z+1, r1	; 0x01
    241a:	12 82       	std	Z+2, r1	; 0x02
    241c:	13 82       	std	Z+3, r1	; 0x03
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <xTaskCheckForTimeOut+0xae>
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	0f 90       	pop	r0
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	1f 91       	pop	r17
    242e:	0f 91       	pop	r16
    2430:	ff 90       	pop	r15
    2432:	ef 90       	pop	r14
    2434:	df 90       	pop	r13
    2436:	cf 90       	pop	r12
    2438:	bf 90       	pop	r11
    243a:	af 90       	pop	r10
    243c:	9f 90       	pop	r9
    243e:	8f 90       	pop	r8
    2440:	08 95       	ret

00002442 <vTaskMissedYield>:
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	80 93 13 11 	sts	0x1113, r24	; 0x801113 <xYieldPending>
    2448:	08 95       	ret

0000244a <xTaskGetCurrentTaskHandle>:
    244a:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    244e:	90 91 ca 11 	lds	r25, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2452:	08 95       	ret

00002454 <xTaskGetSchedulerState>:
    2454:	80 91 18 11 	lds	r24, 0x1118	; 0x801118 <xSchedulerRunning>
    2458:	88 23       	and	r24, r24
    245a:	31 f0       	breq	.+12     	; 0x2468 <xTaskGetSchedulerState+0x14>
    245c:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <uxSchedulerSuspended>
    2460:	81 11       	cpse	r24, r1
    2462:	04 c0       	rjmp	.+8      	; 0x246c <xTaskGetSchedulerState+0x18>
    2464:	82 e0       	ldi	r24, 0x02	; 2
    2466:	08 95       	ret
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	08 95       	ret
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	08 95       	ret

00002470 <xTaskPriorityDisinherit>:
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	fc 01       	movw	r30, r24
    247a:	89 2b       	or	r24, r25
    247c:	09 f4       	brne	.+2      	; 0x2480 <xTaskPriorityDisinherit+0x10>
    247e:	49 c0       	rjmp	.+146    	; 0x2512 <xTaskPriorityDisinherit+0xa2>
    2480:	86 a5       	ldd	r24, Z+46	; 0x2e
    2482:	81 50       	subi	r24, 0x01	; 1
    2484:	86 a7       	std	Z+46, r24	; 0x2e
    2486:	22 8d       	ldd	r18, Z+26	; 0x1a
    2488:	95 a5       	ldd	r25, Z+45	; 0x2d
    248a:	29 17       	cp	r18, r25
    248c:	09 f4       	brne	.+2      	; 0x2490 <xTaskPriorityDisinherit+0x20>
    248e:	43 c0       	rjmp	.+134    	; 0x2516 <xTaskPriorityDisinherit+0xa6>
    2490:	81 11       	cpse	r24, r1
    2492:	43 c0       	rjmp	.+134    	; 0x251a <xTaskPriorityDisinherit+0xaa>
    2494:	ef 01       	movw	r28, r30
    2496:	8f 01       	movw	r16, r30
    2498:	0e 5f       	subi	r16, 0xFE	; 254
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    249c:	c8 01       	movw	r24, r16
    249e:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
    24a2:	ed a5       	ldd	r30, Y+45	; 0x2d
    24a4:	ea 8f       	std	Y+26, r30	; 0x1a
    24a6:	8a e0       	ldi	r24, 0x0A	; 10
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e0       	ldi	r26, 0x00	; 0
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	8e 1b       	sub	r24, r30
    24b0:	91 09       	sbc	r25, r1
    24b2:	a1 09       	sbc	r26, r1
    24b4:	b1 09       	sbc	r27, r1
    24b6:	8e 87       	std	Y+14, r24	; 0x0e
    24b8:	9f 87       	std	Y+15, r25	; 0x0f
    24ba:	a8 8b       	std	Y+16, r26	; 0x10
    24bc:	b9 8b       	std	Y+17, r27	; 0x11
    24be:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <uxTopReadyPriority>
    24c2:	8e 17       	cp	r24, r30
    24c4:	10 f4       	brcc	.+4      	; 0x24ca <xTaskPriorityDisinherit+0x5a>
    24c6:	e0 93 19 11 	sts	0x1119, r30	; 0x801119 <uxTopReadyPriority>
    24ca:	8b e0       	ldi	r24, 0x0B	; 11
    24cc:	8e 9f       	mul	r24, r30
    24ce:	f0 01       	movw	r30, r0
    24d0:	11 24       	eor	r1, r1
    24d2:	e5 5a       	subi	r30, 0xA5	; 165
    24d4:	fe 4e       	sbci	r31, 0xEE	; 238
    24d6:	01 80       	ldd	r0, Z+1	; 0x01
    24d8:	f2 81       	ldd	r31, Z+2	; 0x02
    24da:	e0 2d       	mov	r30, r0
    24dc:	ff 83       	std	Y+7, r31	; 0x07
    24de:	ee 83       	std	Y+6, r30	; 0x06
    24e0:	26 81       	ldd	r18, Z+6	; 0x06
    24e2:	37 81       	ldd	r19, Z+7	; 0x07
    24e4:	39 87       	std	Y+9, r19	; 0x09
    24e6:	28 87       	std	Y+8, r18	; 0x08
    24e8:	a6 81       	ldd	r26, Z+6	; 0x06
    24ea:	b7 81       	ldd	r27, Z+7	; 0x07
    24ec:	15 96       	adiw	r26, 0x05	; 5
    24ee:	1c 93       	st	X, r17
    24f0:	0e 93       	st	-X, r16
    24f2:	14 97       	sbiw	r26, 0x04	; 4
    24f4:	17 83       	std	Z+7, r17	; 0x07
    24f6:	06 83       	std	Z+6, r16	; 0x06
    24f8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    24fa:	8e 9f       	mul	r24, r30
    24fc:	f0 01       	movw	r30, r0
    24fe:	11 24       	eor	r1, r1
    2500:	e5 5a       	subi	r30, 0xA5	; 165
    2502:	fe 4e       	sbci	r31, 0xEE	; 238
    2504:	fd 87       	std	Y+13, r31	; 0x0d
    2506:	ec 87       	std	Y+12, r30	; 0x0c
    2508:	80 81       	ld	r24, Z
    250a:	8f 5f       	subi	r24, 0xFF	; 255
    250c:	80 83       	st	Z, r24
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	05 c0       	rjmp	.+10     	; 0x251c <xTaskPriorityDisinherit+0xac>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	03 c0       	rjmp	.+6      	; 0x251c <xTaskPriorityDisinherit+0xac>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	01 c0       	rjmp	.+2      	; 0x251c <xTaskPriorityDisinherit+0xac>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	08 95       	ret

00002526 <xTaskGenericNotifyWait>:
    2526:	4f 92       	push	r4
    2528:	5f 92       	push	r5
    252a:	6f 92       	push	r6
    252c:	7f 92       	push	r7
    252e:	af 92       	push	r10
    2530:	bf 92       	push	r11
    2532:	cf 92       	push	r12
    2534:	df 92       	push	r13
    2536:	ef 92       	push	r14
    2538:	ff 92       	push	r15
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	28 01       	movw	r4, r16
    2544:	39 01       	movw	r6, r18
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	0f 92       	push	r0
    254c:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2550:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2554:	c8 2f       	mov	r28, r24
    2556:	d0 e0       	ldi	r29, 0x00	; 0
    2558:	ec 0f       	add	r30, r28
    255a:	fd 1f       	adc	r31, r29
    255c:	83 a9       	ldd	r24, Z+51	; 0x33
    255e:	82 30       	cpi	r24, 0x02	; 2
    2560:	71 f1       	breq	.+92     	; 0x25be <xTaskGenericNotifyWait+0x98>
    2562:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2566:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    256a:	ce 01       	movw	r24, r28
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	e8 0f       	add	r30, r24
    2576:	f9 1f       	adc	r31, r25
    2578:	87 a5       	ldd	r24, Z+47	; 0x2f
    257a:	90 a9       	ldd	r25, Z+48	; 0x30
    257c:	a1 a9       	ldd	r26, Z+49	; 0x31
    257e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2580:	40 95       	com	r20
    2582:	50 95       	com	r21
    2584:	60 95       	com	r22
    2586:	70 95       	com	r23
    2588:	48 23       	and	r20, r24
    258a:	59 23       	and	r21, r25
    258c:	6a 23       	and	r22, r26
    258e:	7b 23       	and	r23, r27
    2590:	47 a7       	std	Z+47, r20	; 0x2f
    2592:	50 ab       	std	Z+48, r21	; 0x30
    2594:	61 ab       	std	Z+49, r22	; 0x31
    2596:	72 ab       	std	Z+50, r23	; 0x32
    2598:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    259c:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    25a0:	ec 0f       	add	r30, r28
    25a2:	fd 1f       	adc	r31, r29
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	83 ab       	std	Z+51, r24	; 0x33
    25a8:	a1 14       	cp	r10, r1
    25aa:	b1 04       	cpc	r11, r1
    25ac:	c1 04       	cpc	r12, r1
    25ae:	d1 04       	cpc	r13, r1
    25b0:	31 f0       	breq	.+12     	; 0x25be <xTaskGenericNotifyWait+0x98>
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	c6 01       	movw	r24, r12
    25b6:	b5 01       	movw	r22, r10
    25b8:	88 d9       	rcall	.-3312   	; 0x18ca <prvAddCurrentTaskToDelayedList>
    25ba:	0e 94 26 04 	call	0x84c	; 0x84c <vPortYield>
    25be:	0f 90       	pop	r0
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	0f 92       	push	r0
    25c8:	e1 14       	cp	r14, r1
    25ca:	f1 04       	cpc	r15, r1
    25cc:	a1 f0       	breq	.+40     	; 0x25f6 <xTaskGenericNotifyWait+0xd0>
    25ce:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    25d2:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    25d6:	ce 01       	movw	r24, r28
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	e8 0f       	add	r30, r24
    25e2:	f9 1f       	adc	r31, r25
    25e4:	87 a5       	ldd	r24, Z+47	; 0x2f
    25e6:	90 a9       	ldd	r25, Z+48	; 0x30
    25e8:	a1 a9       	ldd	r26, Z+49	; 0x31
    25ea:	b2 a9       	ldd	r27, Z+50	; 0x32
    25ec:	f7 01       	movw	r30, r14
    25ee:	80 83       	st	Z, r24
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	a2 83       	std	Z+2, r26	; 0x02
    25f4:	b3 83       	std	Z+3, r27	; 0x03
    25f6:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    25fa:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    25fe:	ec 0f       	add	r30, r28
    2600:	fd 1f       	adc	r31, r29
    2602:	83 a9       	ldd	r24, Z+51	; 0x33
    2604:	82 30       	cpi	r24, 0x02	; 2
    2606:	e9 f4       	brne	.+58     	; 0x2642 <xTaskGenericNotifyWait+0x11c>
    2608:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    260c:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2610:	ce 01       	movw	r24, r28
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	e8 0f       	add	r30, r24
    261c:	f9 1f       	adc	r31, r25
    261e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2620:	90 a9       	ldd	r25, Z+48	; 0x30
    2622:	a1 a9       	ldd	r26, Z+49	; 0x31
    2624:	b2 a9       	ldd	r27, Z+50	; 0x32
    2626:	40 94       	com	r4
    2628:	50 94       	com	r5
    262a:	60 94       	com	r6
    262c:	70 94       	com	r7
    262e:	48 22       	and	r4, r24
    2630:	59 22       	and	r5, r25
    2632:	6a 22       	and	r6, r26
    2634:	7b 22       	and	r7, r27
    2636:	47 a6       	std	Z+47, r4	; 0x2f
    2638:	50 aa       	std	Z+48, r5	; 0x30
    263a:	61 aa       	std	Z+49, r6	; 0x31
    263c:	72 aa       	std	Z+50, r7	; 0x32
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	01 c0       	rjmp	.+2      	; 0x2644 <xTaskGenericNotifyWait+0x11e>
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	20 91 c9 11 	lds	r18, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2648:	30 91 ca 11 	lds	r19, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    264c:	c2 0f       	add	r28, r18
    264e:	d3 1f       	adc	r29, r19
    2650:	1b aa       	std	Y+51, r1	; 0x33
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	1f 91       	pop	r17
    265c:	0f 91       	pop	r16
    265e:	ff 90       	pop	r15
    2660:	ef 90       	pop	r14
    2662:	df 90       	pop	r13
    2664:	cf 90       	pop	r12
    2666:	bf 90       	pop	r11
    2668:	af 90       	pop	r10
    266a:	7f 90       	pop	r7
    266c:	6f 90       	pop	r6
    266e:	5f 90       	pop	r5
    2670:	4f 90       	pop	r4
    2672:	08 95       	ret

00002674 <xTaskGenericNotify>:
    2674:	8f 92       	push	r8
    2676:	9f 92       	push	r9
    2678:	af 92       	push	r10
    267a:	bf 92       	push	r11
    267c:	ef 92       	push	r14
    267e:	ff 92       	push	r15
    2680:	0f 93       	push	r16
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	dc 01       	movw	r26, r24
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	0f 92       	push	r0
    268e:	e1 14       	cp	r14, r1
    2690:	f1 04       	cpc	r15, r1
    2692:	89 f0       	breq	.+34     	; 0x26b6 <xTaskGenericNotify+0x42>
    2694:	e6 2f       	mov	r30, r22
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	ee 0f       	add	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	ee 0f       	add	r30, r30
    269e:	ff 1f       	adc	r31, r31
    26a0:	e8 0f       	add	r30, r24
    26a2:	f9 1f       	adc	r31, r25
    26a4:	87 a4       	ldd	r8, Z+47	; 0x2f
    26a6:	90 a8       	ldd	r9, Z+48	; 0x30
    26a8:	a1 a8       	ldd	r10, Z+49	; 0x31
    26aa:	b2 a8       	ldd	r11, Z+50	; 0x32
    26ac:	f7 01       	movw	r30, r14
    26ae:	80 82       	st	Z, r8
    26b0:	91 82       	std	Z+1, r9	; 0x01
    26b2:	a2 82       	std	Z+2, r10	; 0x02
    26b4:	b3 82       	std	Z+3, r11	; 0x03
    26b6:	70 e0       	ldi	r23, 0x00	; 0
    26b8:	fd 01       	movw	r30, r26
    26ba:	e6 0f       	add	r30, r22
    26bc:	f7 1f       	adc	r31, r23
    26be:	83 a9       	ldd	r24, Z+51	; 0x33
    26c0:	92 e0       	ldi	r25, 0x02	; 2
    26c2:	93 ab       	std	Z+51, r25	; 0x33
    26c4:	02 30       	cpi	r16, 0x02	; 2
    26c6:	01 f1       	breq	.+64     	; 0x2708 <xTaskGenericNotify+0x94>
    26c8:	18 f4       	brcc	.+6      	; 0x26d0 <xTaskGenericNotify+0x5c>
    26ca:	01 30       	cpi	r16, 0x01	; 1
    26cc:	31 f0       	breq	.+12     	; 0x26da <xTaskGenericNotify+0x66>
    26ce:	4d c0       	rjmp	.+154    	; 0x276a <xTaskGenericNotify+0xf6>
    26d0:	03 30       	cpi	r16, 0x03	; 3
    26d2:	79 f1       	breq	.+94     	; 0x2732 <xTaskGenericNotify+0xbe>
    26d4:	04 30       	cpi	r16, 0x04	; 4
    26d6:	d1 f1       	breq	.+116    	; 0x274c <xTaskGenericNotify+0xd8>
    26d8:	48 c0       	rjmp	.+144    	; 0x276a <xTaskGenericNotify+0xf6>
    26da:	66 0f       	add	r22, r22
    26dc:	77 1f       	adc	r23, r23
    26de:	66 0f       	add	r22, r22
    26e0:	77 1f       	adc	r23, r23
    26e2:	fd 01       	movw	r30, r26
    26e4:	e6 0f       	add	r30, r22
    26e6:	f7 1f       	adc	r31, r23
    26e8:	87 a4       	ldd	r8, Z+47	; 0x2f
    26ea:	90 a8       	ldd	r9, Z+48	; 0x30
    26ec:	a1 a8       	ldd	r10, Z+49	; 0x31
    26ee:	b2 a8       	ldd	r11, Z+50	; 0x32
    26f0:	ba 01       	movw	r22, r20
    26f2:	a9 01       	movw	r20, r18
    26f4:	48 29       	or	r20, r8
    26f6:	59 29       	or	r21, r9
    26f8:	6a 29       	or	r22, r10
    26fa:	7b 29       	or	r23, r11
    26fc:	47 a7       	std	Z+47, r20	; 0x2f
    26fe:	50 ab       	std	Z+48, r21	; 0x30
    2700:	61 ab       	std	Z+49, r22	; 0x31
    2702:	72 ab       	std	Z+50, r23	; 0x32
    2704:	01 e0       	ldi	r16, 0x01	; 1
    2706:	34 c0       	rjmp	.+104    	; 0x2770 <xTaskGenericNotify+0xfc>
    2708:	66 0f       	add	r22, r22
    270a:	77 1f       	adc	r23, r23
    270c:	66 0f       	add	r22, r22
    270e:	77 1f       	adc	r23, r23
    2710:	fd 01       	movw	r30, r26
    2712:	e6 0f       	add	r30, r22
    2714:	f7 1f       	adc	r31, r23
    2716:	47 a5       	ldd	r20, Z+47	; 0x2f
    2718:	50 a9       	ldd	r21, Z+48	; 0x30
    271a:	61 a9       	ldd	r22, Z+49	; 0x31
    271c:	72 a9       	ldd	r23, Z+50	; 0x32
    271e:	4f 5f       	subi	r20, 0xFF	; 255
    2720:	5f 4f       	sbci	r21, 0xFF	; 255
    2722:	6f 4f       	sbci	r22, 0xFF	; 255
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	47 a7       	std	Z+47, r20	; 0x2f
    2728:	50 ab       	std	Z+48, r21	; 0x30
    272a:	61 ab       	std	Z+49, r22	; 0x31
    272c:	72 ab       	std	Z+50, r23	; 0x32
    272e:	01 e0       	ldi	r16, 0x01	; 1
    2730:	1f c0       	rjmp	.+62     	; 0x2770 <xTaskGenericNotify+0xfc>
    2732:	66 0f       	add	r22, r22
    2734:	77 1f       	adc	r23, r23
    2736:	66 0f       	add	r22, r22
    2738:	77 1f       	adc	r23, r23
    273a:	fd 01       	movw	r30, r26
    273c:	e6 0f       	add	r30, r22
    273e:	f7 1f       	adc	r31, r23
    2740:	27 a7       	std	Z+47, r18	; 0x2f
    2742:	30 ab       	std	Z+48, r19	; 0x30
    2744:	41 ab       	std	Z+49, r20	; 0x31
    2746:	52 ab       	std	Z+50, r21	; 0x32
    2748:	01 e0       	ldi	r16, 0x01	; 1
    274a:	12 c0       	rjmp	.+36     	; 0x2770 <xTaskGenericNotify+0xfc>
    274c:	82 30       	cpi	r24, 0x02	; 2
    274e:	79 f0       	breq	.+30     	; 0x276e <xTaskGenericNotify+0xfa>
    2750:	66 0f       	add	r22, r22
    2752:	77 1f       	adc	r23, r23
    2754:	66 0f       	add	r22, r22
    2756:	77 1f       	adc	r23, r23
    2758:	fd 01       	movw	r30, r26
    275a:	e6 0f       	add	r30, r22
    275c:	f7 1f       	adc	r31, r23
    275e:	27 a7       	std	Z+47, r18	; 0x2f
    2760:	30 ab       	std	Z+48, r19	; 0x30
    2762:	41 ab       	std	Z+49, r20	; 0x31
    2764:	52 ab       	std	Z+50, r21	; 0x32
    2766:	01 e0       	ldi	r16, 0x01	; 1
    2768:	03 c0       	rjmp	.+6      	; 0x2770 <xTaskGenericNotify+0xfc>
    276a:	01 e0       	ldi	r16, 0x01	; 1
    276c:	01 c0       	rjmp	.+2      	; 0x2770 <xTaskGenericNotify+0xfc>
    276e:	00 e0       	ldi	r16, 0x00	; 0
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	09 f0       	breq	.+2      	; 0x2776 <xTaskGenericNotify+0x102>
    2774:	69 c0       	rjmp	.+210    	; 0x2848 <xTaskGenericNotify+0x1d4>
    2776:	1c 96       	adiw	r26, 0x0c	; 12
    2778:	ed 91       	ld	r30, X+
    277a:	fc 91       	ld	r31, X
    277c:	1d 97       	sbiw	r26, 0x0d	; 13
    277e:	16 96       	adiw	r26, 0x06	; 6
    2780:	cd 91       	ld	r28, X+
    2782:	dc 91       	ld	r29, X
    2784:	17 97       	sbiw	r26, 0x07	; 7
    2786:	18 96       	adiw	r26, 0x08	; 8
    2788:	8d 91       	ld	r24, X+
    278a:	9c 91       	ld	r25, X
    278c:	19 97       	sbiw	r26, 0x09	; 9
    278e:	9f 83       	std	Y+7, r25	; 0x07
    2790:	8e 83       	std	Y+6, r24	; 0x06
    2792:	18 96       	adiw	r26, 0x08	; 8
    2794:	cd 91       	ld	r28, X+
    2796:	dc 91       	ld	r29, X
    2798:	19 97       	sbiw	r26, 0x09	; 9
    279a:	16 96       	adiw	r26, 0x06	; 6
    279c:	8d 91       	ld	r24, X+
    279e:	9c 91       	ld	r25, X
    27a0:	17 97       	sbiw	r26, 0x07	; 7
    27a2:	9d 83       	std	Y+5, r25	; 0x05
    27a4:	8c 83       	std	Y+4, r24	; 0x04
    27a6:	81 81       	ldd	r24, Z+1	; 0x01
    27a8:	92 81       	ldd	r25, Z+2	; 0x02
    27aa:	9d 01       	movw	r18, r26
    27ac:	2e 5f       	subi	r18, 0xFE	; 254
    27ae:	3f 4f       	sbci	r19, 0xFF	; 255
    27b0:	82 17       	cp	r24, r18
    27b2:	93 07       	cpc	r25, r19
    27b4:	31 f4       	brne	.+12     	; 0x27c2 <xTaskGenericNotify+0x14e>
    27b6:	18 96       	adiw	r26, 0x08	; 8
    27b8:	8d 91       	ld	r24, X+
    27ba:	9c 91       	ld	r25, X
    27bc:	19 97       	sbiw	r26, 0x09	; 9
    27be:	92 83       	std	Z+2, r25	; 0x02
    27c0:	81 83       	std	Z+1, r24	; 0x01
    27c2:	1d 96       	adiw	r26, 0x0d	; 13
    27c4:	1c 92       	st	X, r1
    27c6:	1e 92       	st	-X, r1
    27c8:	1c 97       	sbiw	r26, 0x0c	; 12
    27ca:	80 81       	ld	r24, Z
    27cc:	81 50       	subi	r24, 0x01	; 1
    27ce:	80 83       	st	Z, r24
    27d0:	5a 96       	adiw	r26, 0x1a	; 26
    27d2:	ec 91       	ld	r30, X
    27d4:	5a 97       	sbiw	r26, 0x1a	; 26
    27d6:	80 91 19 11 	lds	r24, 0x1119	; 0x801119 <uxTopReadyPriority>
    27da:	8e 17       	cp	r24, r30
    27dc:	10 f4       	brcc	.+4      	; 0x27e2 <xTaskGenericNotify+0x16e>
    27de:	e0 93 19 11 	sts	0x1119, r30	; 0x801119 <uxTopReadyPriority>
    27e2:	8b e0       	ldi	r24, 0x0B	; 11
    27e4:	8e 9f       	mul	r24, r30
    27e6:	f0 01       	movw	r30, r0
    27e8:	11 24       	eor	r1, r1
    27ea:	e5 5a       	subi	r30, 0xA5	; 165
    27ec:	fe 4e       	sbci	r31, 0xEE	; 238
    27ee:	01 80       	ldd	r0, Z+1	; 0x01
    27f0:	f2 81       	ldd	r31, Z+2	; 0x02
    27f2:	e0 2d       	mov	r30, r0
    27f4:	17 96       	adiw	r26, 0x07	; 7
    27f6:	fc 93       	st	X, r31
    27f8:	ee 93       	st	-X, r30
    27fa:	16 97       	sbiw	r26, 0x06	; 6
    27fc:	46 81       	ldd	r20, Z+6	; 0x06
    27fe:	57 81       	ldd	r21, Z+7	; 0x07
    2800:	19 96       	adiw	r26, 0x09	; 9
    2802:	5c 93       	st	X, r21
    2804:	4e 93       	st	-X, r20
    2806:	18 97       	sbiw	r26, 0x08	; 8
    2808:	c6 81       	ldd	r28, Z+6	; 0x06
    280a:	d7 81       	ldd	r29, Z+7	; 0x07
    280c:	3d 83       	std	Y+5, r19	; 0x05
    280e:	2c 83       	std	Y+4, r18	; 0x04
    2810:	37 83       	std	Z+7, r19	; 0x07
    2812:	26 83       	std	Z+6, r18	; 0x06
    2814:	5a 96       	adiw	r26, 0x1a	; 26
    2816:	ec 91       	ld	r30, X
    2818:	5a 97       	sbiw	r26, 0x1a	; 26
    281a:	8e 9f       	mul	r24, r30
    281c:	f0 01       	movw	r30, r0
    281e:	11 24       	eor	r1, r1
    2820:	e5 5a       	subi	r30, 0xA5	; 165
    2822:	fe 4e       	sbci	r31, 0xEE	; 238
    2824:	1d 96       	adiw	r26, 0x0d	; 13
    2826:	fc 93       	st	X, r31
    2828:	ee 93       	st	-X, r30
    282a:	1c 97       	sbiw	r26, 0x0c	; 12
    282c:	80 81       	ld	r24, Z
    282e:	8f 5f       	subi	r24, 0xFF	; 255
    2830:	80 83       	st	Z, r24
    2832:	5a 96       	adiw	r26, 0x1a	; 26
    2834:	9c 91       	ld	r25, X
    2836:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    283a:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    283e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2840:	89 17       	cp	r24, r25
    2842:	10 f4       	brcc	.+4      	; 0x2848 <xTaskGenericNotify+0x1d4>
    2844:	0e 94 26 04 	call	0x84c	; 0x84c <vPortYield>
    2848:	0f 90       	pop	r0
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	80 2f       	mov	r24, r16
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	0f 91       	pop	r16
    2854:	ff 90       	pop	r15
    2856:	ef 90       	pop	r14
    2858:	bf 90       	pop	r11
    285a:	af 90       	pop	r10
    285c:	9f 90       	pop	r9
    285e:	8f 90       	pop	r8
    2860:	08 95       	ret

00002862 <xTaskGenericNotifyFromISR>:
    2862:	8f 92       	push	r8
    2864:	9f 92       	push	r9
    2866:	af 92       	push	r10
    2868:	bf 92       	push	r11
    286a:	cf 92       	push	r12
    286c:	df 92       	push	r13
    286e:	ef 92       	push	r14
    2870:	ff 92       	push	r15
    2872:	0f 93       	push	r16
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	dc 01       	movw	r26, r24
    287a:	e1 14       	cp	r14, r1
    287c:	f1 04       	cpc	r15, r1
    287e:	89 f0       	breq	.+34     	; 0x28a2 <xTaskGenericNotifyFromISR+0x40>
    2880:	e6 2f       	mov	r30, r22
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	ee 0f       	add	r30, r30
    2886:	ff 1f       	adc	r31, r31
    2888:	ee 0f       	add	r30, r30
    288a:	ff 1f       	adc	r31, r31
    288c:	e8 0f       	add	r30, r24
    288e:	f9 1f       	adc	r31, r25
    2890:	87 a4       	ldd	r8, Z+47	; 0x2f
    2892:	90 a8       	ldd	r9, Z+48	; 0x30
    2894:	a1 a8       	ldd	r10, Z+49	; 0x31
    2896:	b2 a8       	ldd	r11, Z+50	; 0x32
    2898:	f7 01       	movw	r30, r14
    289a:	80 82       	st	Z, r8
    289c:	91 82       	std	Z+1, r9	; 0x01
    289e:	a2 82       	std	Z+2, r10	; 0x02
    28a0:	b3 82       	std	Z+3, r11	; 0x03
    28a2:	70 e0       	ldi	r23, 0x00	; 0
    28a4:	fd 01       	movw	r30, r26
    28a6:	e6 0f       	add	r30, r22
    28a8:	f7 1f       	adc	r31, r23
    28aa:	93 a9       	ldd	r25, Z+51	; 0x33
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	83 ab       	std	Z+51, r24	; 0x33
    28b0:	02 30       	cpi	r16, 0x02	; 2
    28b2:	01 f1       	breq	.+64     	; 0x28f4 <xTaskGenericNotifyFromISR+0x92>
    28b4:	18 f4       	brcc	.+6      	; 0x28bc <xTaskGenericNotifyFromISR+0x5a>
    28b6:	01 30       	cpi	r16, 0x01	; 1
    28b8:	31 f0       	breq	.+12     	; 0x28c6 <xTaskGenericNotifyFromISR+0x64>
    28ba:	4d c0       	rjmp	.+154    	; 0x2956 <xTaskGenericNotifyFromISR+0xf4>
    28bc:	03 30       	cpi	r16, 0x03	; 3
    28be:	79 f1       	breq	.+94     	; 0x291e <xTaskGenericNotifyFromISR+0xbc>
    28c0:	04 30       	cpi	r16, 0x04	; 4
    28c2:	d1 f1       	breq	.+116    	; 0x2938 <xTaskGenericNotifyFromISR+0xd6>
    28c4:	48 c0       	rjmp	.+144    	; 0x2956 <xTaskGenericNotifyFromISR+0xf4>
    28c6:	66 0f       	add	r22, r22
    28c8:	77 1f       	adc	r23, r23
    28ca:	66 0f       	add	r22, r22
    28cc:	77 1f       	adc	r23, r23
    28ce:	fd 01       	movw	r30, r26
    28d0:	e6 0f       	add	r30, r22
    28d2:	f7 1f       	adc	r31, r23
    28d4:	87 a4       	ldd	r8, Z+47	; 0x2f
    28d6:	90 a8       	ldd	r9, Z+48	; 0x30
    28d8:	a1 a8       	ldd	r10, Z+49	; 0x31
    28da:	b2 a8       	ldd	r11, Z+50	; 0x32
    28dc:	ba 01       	movw	r22, r20
    28de:	a9 01       	movw	r20, r18
    28e0:	48 29       	or	r20, r8
    28e2:	59 29       	or	r21, r9
    28e4:	6a 29       	or	r22, r10
    28e6:	7b 29       	or	r23, r11
    28e8:	47 a7       	std	Z+47, r20	; 0x2f
    28ea:	50 ab       	std	Z+48, r21	; 0x30
    28ec:	61 ab       	std	Z+49, r22	; 0x31
    28ee:	72 ab       	std	Z+50, r23	; 0x32
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	34 c0       	rjmp	.+104    	; 0x295c <xTaskGenericNotifyFromISR+0xfa>
    28f4:	66 0f       	add	r22, r22
    28f6:	77 1f       	adc	r23, r23
    28f8:	66 0f       	add	r22, r22
    28fa:	77 1f       	adc	r23, r23
    28fc:	fd 01       	movw	r30, r26
    28fe:	e6 0f       	add	r30, r22
    2900:	f7 1f       	adc	r31, r23
    2902:	47 a5       	ldd	r20, Z+47	; 0x2f
    2904:	50 a9       	ldd	r21, Z+48	; 0x30
    2906:	61 a9       	ldd	r22, Z+49	; 0x31
    2908:	72 a9       	ldd	r23, Z+50	; 0x32
    290a:	4f 5f       	subi	r20, 0xFF	; 255
    290c:	5f 4f       	sbci	r21, 0xFF	; 255
    290e:	6f 4f       	sbci	r22, 0xFF	; 255
    2910:	7f 4f       	sbci	r23, 0xFF	; 255
    2912:	47 a7       	std	Z+47, r20	; 0x2f
    2914:	50 ab       	std	Z+48, r21	; 0x30
    2916:	61 ab       	std	Z+49, r22	; 0x31
    2918:	72 ab       	std	Z+50, r23	; 0x32
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	1f c0       	rjmp	.+62     	; 0x295c <xTaskGenericNotifyFromISR+0xfa>
    291e:	66 0f       	add	r22, r22
    2920:	77 1f       	adc	r23, r23
    2922:	66 0f       	add	r22, r22
    2924:	77 1f       	adc	r23, r23
    2926:	fd 01       	movw	r30, r26
    2928:	e6 0f       	add	r30, r22
    292a:	f7 1f       	adc	r31, r23
    292c:	27 a7       	std	Z+47, r18	; 0x2f
    292e:	30 ab       	std	Z+48, r19	; 0x30
    2930:	41 ab       	std	Z+49, r20	; 0x31
    2932:	52 ab       	std	Z+50, r21	; 0x32
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	12 c0       	rjmp	.+36     	; 0x295c <xTaskGenericNotifyFromISR+0xfa>
    2938:	92 30       	cpi	r25, 0x02	; 2
    293a:	79 f0       	breq	.+30     	; 0x295a <xTaskGenericNotifyFromISR+0xf8>
    293c:	66 0f       	add	r22, r22
    293e:	77 1f       	adc	r23, r23
    2940:	66 0f       	add	r22, r22
    2942:	77 1f       	adc	r23, r23
    2944:	fd 01       	movw	r30, r26
    2946:	e6 0f       	add	r30, r22
    2948:	f7 1f       	adc	r31, r23
    294a:	27 a7       	std	Z+47, r18	; 0x2f
    294c:	30 ab       	std	Z+48, r19	; 0x30
    294e:	41 ab       	std	Z+49, r20	; 0x31
    2950:	52 ab       	std	Z+50, r21	; 0x32
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	03 c0       	rjmp	.+6      	; 0x295c <xTaskGenericNotifyFromISR+0xfa>
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	01 c0       	rjmp	.+2      	; 0x295c <xTaskGenericNotifyFromISR+0xfa>
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	91 30       	cpi	r25, 0x01	; 1
    295e:	09 f0       	breq	.+2      	; 0x2962 <xTaskGenericNotifyFromISR+0x100>
    2960:	96 c0       	rjmp	.+300    	; 0x2a8e <xTaskGenericNotifyFromISR+0x22c>
    2962:	90 91 0a 11 	lds	r25, 0x110A	; 0x80110a <uxSchedulerSuspended>
    2966:	91 11       	cpse	r25, r1
    2968:	5f c0       	rjmp	.+190    	; 0x2a28 <xTaskGenericNotifyFromISR+0x1c6>
    296a:	1c 96       	adiw	r26, 0x0c	; 12
    296c:	ed 91       	ld	r30, X+
    296e:	fc 91       	ld	r31, X
    2970:	1d 97       	sbiw	r26, 0x0d	; 13
    2972:	16 96       	adiw	r26, 0x06	; 6
    2974:	cd 91       	ld	r28, X+
    2976:	dc 91       	ld	r29, X
    2978:	17 97       	sbiw	r26, 0x07	; 7
    297a:	18 96       	adiw	r26, 0x08	; 8
    297c:	2d 91       	ld	r18, X+
    297e:	3c 91       	ld	r19, X
    2980:	19 97       	sbiw	r26, 0x09	; 9
    2982:	3f 83       	std	Y+7, r19	; 0x07
    2984:	2e 83       	std	Y+6, r18	; 0x06
    2986:	18 96       	adiw	r26, 0x08	; 8
    2988:	cd 91       	ld	r28, X+
    298a:	dc 91       	ld	r29, X
    298c:	19 97       	sbiw	r26, 0x09	; 9
    298e:	16 96       	adiw	r26, 0x06	; 6
    2990:	2d 91       	ld	r18, X+
    2992:	3c 91       	ld	r19, X
    2994:	17 97       	sbiw	r26, 0x07	; 7
    2996:	3d 83       	std	Y+5, r19	; 0x05
    2998:	2c 83       	std	Y+4, r18	; 0x04
    299a:	41 81       	ldd	r20, Z+1	; 0x01
    299c:	52 81       	ldd	r21, Z+2	; 0x02
    299e:	9d 01       	movw	r18, r26
    29a0:	2e 5f       	subi	r18, 0xFE	; 254
    29a2:	3f 4f       	sbci	r19, 0xFF	; 255
    29a4:	42 17       	cp	r20, r18
    29a6:	53 07       	cpc	r21, r19
    29a8:	31 f4       	brne	.+12     	; 0x29b6 <xTaskGenericNotifyFromISR+0x154>
    29aa:	18 96       	adiw	r26, 0x08	; 8
    29ac:	4d 91       	ld	r20, X+
    29ae:	5c 91       	ld	r21, X
    29b0:	19 97       	sbiw	r26, 0x09	; 9
    29b2:	52 83       	std	Z+2, r21	; 0x02
    29b4:	41 83       	std	Z+1, r20	; 0x01
    29b6:	1d 96       	adiw	r26, 0x0d	; 13
    29b8:	1c 92       	st	X, r1
    29ba:	1e 92       	st	-X, r1
    29bc:	1c 97       	sbiw	r26, 0x0c	; 12
    29be:	90 81       	ld	r25, Z
    29c0:	91 50       	subi	r25, 0x01	; 1
    29c2:	90 83       	st	Z, r25
    29c4:	5a 96       	adiw	r26, 0x1a	; 26
    29c6:	ec 91       	ld	r30, X
    29c8:	5a 97       	sbiw	r26, 0x1a	; 26
    29ca:	90 91 19 11 	lds	r25, 0x1119	; 0x801119 <uxTopReadyPriority>
    29ce:	9e 17       	cp	r25, r30
    29d0:	10 f4       	brcc	.+4      	; 0x29d6 <xTaskGenericNotifyFromISR+0x174>
    29d2:	e0 93 19 11 	sts	0x1119, r30	; 0x801119 <uxTopReadyPriority>
    29d6:	9b e0       	ldi	r25, 0x0B	; 11
    29d8:	9e 9f       	mul	r25, r30
    29da:	f0 01       	movw	r30, r0
    29dc:	11 24       	eor	r1, r1
    29de:	e5 5a       	subi	r30, 0xA5	; 165
    29e0:	fe 4e       	sbci	r31, 0xEE	; 238
    29e2:	01 80       	ldd	r0, Z+1	; 0x01
    29e4:	f2 81       	ldd	r31, Z+2	; 0x02
    29e6:	e0 2d       	mov	r30, r0
    29e8:	17 96       	adiw	r26, 0x07	; 7
    29ea:	fc 93       	st	X, r31
    29ec:	ee 93       	st	-X, r30
    29ee:	16 97       	sbiw	r26, 0x06	; 6
    29f0:	46 81       	ldd	r20, Z+6	; 0x06
    29f2:	57 81       	ldd	r21, Z+7	; 0x07
    29f4:	19 96       	adiw	r26, 0x09	; 9
    29f6:	5c 93       	st	X, r21
    29f8:	4e 93       	st	-X, r20
    29fa:	18 97       	sbiw	r26, 0x08	; 8
    29fc:	c6 81       	ldd	r28, Z+6	; 0x06
    29fe:	d7 81       	ldd	r29, Z+7	; 0x07
    2a00:	3d 83       	std	Y+5, r19	; 0x05
    2a02:	2c 83       	std	Y+4, r18	; 0x04
    2a04:	37 83       	std	Z+7, r19	; 0x07
    2a06:	26 83       	std	Z+6, r18	; 0x06
    2a08:	5a 96       	adiw	r26, 0x1a	; 26
    2a0a:	ec 91       	ld	r30, X
    2a0c:	5a 97       	sbiw	r26, 0x1a	; 26
    2a0e:	9e 9f       	mul	r25, r30
    2a10:	f0 01       	movw	r30, r0
    2a12:	11 24       	eor	r1, r1
    2a14:	e5 5a       	subi	r30, 0xA5	; 165
    2a16:	fe 4e       	sbci	r31, 0xEE	; 238
    2a18:	1d 96       	adiw	r26, 0x0d	; 13
    2a1a:	fc 93       	st	X, r31
    2a1c:	ee 93       	st	-X, r30
    2a1e:	1c 97       	sbiw	r26, 0x0c	; 12
    2a20:	90 81       	ld	r25, Z
    2a22:	9f 5f       	subi	r25, 0xFF	; 255
    2a24:	90 83       	st	Z, r25
    2a26:	21 c0       	rjmp	.+66     	; 0x2a6a <xTaskGenericNotifyFromISR+0x208>
    2a28:	66 e3       	ldi	r22, 0x36	; 54
    2a2a:	71 e1       	ldi	r23, 0x11	; 17
    2a2c:	fb 01       	movw	r30, r22
    2a2e:	c1 81       	ldd	r28, Z+1	; 0x01
    2a30:	d2 81       	ldd	r29, Z+2	; 0x02
    2a32:	53 96       	adiw	r26, 0x13	; 19
    2a34:	dc 93       	st	X, r29
    2a36:	ce 93       	st	-X, r28
    2a38:	52 97       	sbiw	r26, 0x12	; 18
    2a3a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a3c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a3e:	55 96       	adiw	r26, 0x15	; 21
    2a40:	3c 93       	st	X, r19
    2a42:	2e 93       	st	-X, r18
    2a44:	54 97       	sbiw	r26, 0x14	; 20
    2a46:	4e 81       	ldd	r20, Y+6	; 0x06
    2a48:	5f 81       	ldd	r21, Y+7	; 0x07
    2a4a:	9d 01       	movw	r18, r26
    2a4c:	22 5f       	subi	r18, 0xF2	; 242
    2a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a50:	fa 01       	movw	r30, r20
    2a52:	35 83       	std	Z+5, r19	; 0x05
    2a54:	24 83       	std	Z+4, r18	; 0x04
    2a56:	3f 83       	std	Y+7, r19	; 0x07
    2a58:	2e 83       	std	Y+6, r18	; 0x06
    2a5a:	59 96       	adiw	r26, 0x19	; 25
    2a5c:	7c 93       	st	X, r23
    2a5e:	6e 93       	st	-X, r22
    2a60:	58 97       	sbiw	r26, 0x18	; 24
    2a62:	fb 01       	movw	r30, r22
    2a64:	90 81       	ld	r25, Z
    2a66:	9f 5f       	subi	r25, 0xFF	; 255
    2a68:	90 83       	st	Z, r25
    2a6a:	5a 96       	adiw	r26, 0x1a	; 26
    2a6c:	2c 91       	ld	r18, X
    2a6e:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2a72:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>
    2a76:	92 8d       	ldd	r25, Z+26	; 0x1a
    2a78:	92 17       	cp	r25, r18
    2a7a:	48 f4       	brcc	.+18     	; 0x2a8e <xTaskGenericNotifyFromISR+0x22c>
    2a7c:	c1 14       	cp	r12, r1
    2a7e:	d1 04       	cpc	r13, r1
    2a80:	19 f0       	breq	.+6      	; 0x2a88 <xTaskGenericNotifyFromISR+0x226>
    2a82:	91 e0       	ldi	r25, 0x01	; 1
    2a84:	f6 01       	movw	r30, r12
    2a86:	90 83       	st	Z, r25
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	90 93 13 11 	sts	0x1113, r25	; 0x801113 <xYieldPending>
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	0f 91       	pop	r16
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	cf 90       	pop	r12
    2a9c:	bf 90       	pop	r11
    2a9e:	af 90       	pop	r10
    2aa0:	9f 90       	pop	r9
    2aa2:	8f 90       	pop	r8
    2aa4:	08 95       	ret

00002aa6 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	21 f4       	brne	.+8      	; 0x2ab2 <xTaskGenericNotifyStateClear+0xc>
    2aaa:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <pxCurrentTCB>
    2aae:	90 91 ca 11 	lds	r25, 0x11CA	; 0x8011ca <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	fc 01       	movw	r30, r24
    2abc:	e6 0f       	add	r30, r22
    2abe:	f7 1f       	adc	r31, r23
    2ac0:	23 a9       	ldd	r18, Z+51	; 0x33
    2ac2:	22 30       	cpi	r18, 0x02	; 2
    2ac4:	31 f4       	brne	.+12     	; 0x2ad2 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e6 0f       	add	r30, r22
    2aca:	f7 1f       	adc	r31, r23
    2acc:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2ad4:	0f 90       	pop	r0
    2ad6:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2ad8:	08 95       	ret

00002ada <prvGetNextExpireTime>:
    2ada:	dc 01       	movw	r26, r24
    2adc:	e0 91 d5 11 	lds	r30, 0x11D5	; 0x8011d5 <pxCurrentTimerList>
    2ae0:	f0 91 d6 11 	lds	r31, 0x11D6	; 0x8011d6 <pxCurrentTimerList+0x1>
    2ae4:	80 81       	ld	r24, Z
    2ae6:	91 e0       	ldi	r25, 0x01	; 1
    2ae8:	81 11       	cpse	r24, r1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	9c 93       	st	X, r25
    2aee:	91 11       	cpse	r25, r1
    2af0:	08 c0       	rjmp	.+16     	; 0x2b02 <prvGetNextExpireTime+0x28>
    2af2:	07 80       	ldd	r0, Z+7	; 0x07
    2af4:	f0 85       	ldd	r31, Z+8	; 0x08
    2af6:	e0 2d       	mov	r30, r0
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	08 95       	ret
    2b02:	60 e0       	ldi	r22, 0x00	; 0
    2b04:	70 e0       	ldi	r23, 0x00	; 0
    2b06:	cb 01       	movw	r24, r22
    2b08:	08 95       	ret

00002b0a <prvInsertTimerInActiveList>:
    2b0a:	cf 92       	push	r12
    2b0c:	df 92       	push	r13
    2b0e:	ef 92       	push	r14
    2b10:	ff 92       	push	r15
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	fc 01       	movw	r30, r24
    2b18:	42 83       	std	Z+2, r20	; 0x02
    2b1a:	53 83       	std	Z+3, r21	; 0x03
    2b1c:	64 83       	std	Z+4, r22	; 0x04
    2b1e:	75 83       	std	Z+5, r23	; 0x05
    2b20:	93 87       	std	Z+11, r25	; 0x0b
    2b22:	82 87       	std	Z+10, r24	; 0x0a
    2b24:	04 17       	cp	r16, r20
    2b26:	15 07       	cpc	r17, r21
    2b28:	26 07       	cpc	r18, r22
    2b2a:	37 07       	cpc	r19, r23
    2b2c:	c0 f0       	brcs	.+48     	; 0x2b5e <prvInsertTimerInActiveList+0x54>
    2b2e:	0c 19       	sub	r16, r12
    2b30:	1d 09       	sbc	r17, r13
    2b32:	2e 09       	sbc	r18, r14
    2b34:	3f 09       	sbc	r19, r15
    2b36:	86 85       	ldd	r24, Z+14	; 0x0e
    2b38:	97 85       	ldd	r25, Z+15	; 0x0f
    2b3a:	a0 89       	ldd	r26, Z+16	; 0x10
    2b3c:	b1 89       	ldd	r27, Z+17	; 0x11
    2b3e:	08 17       	cp	r16, r24
    2b40:	19 07       	cpc	r17, r25
    2b42:	2a 07       	cpc	r18, r26
    2b44:	3b 07       	cpc	r19, r27
    2b46:	00 f5       	brcc	.+64     	; 0x2b88 <prvInsertTimerInActiveList+0x7e>
    2b48:	bf 01       	movw	r22, r30
    2b4a:	6e 5f       	subi	r22, 0xFE	; 254
    2b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4e:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <pxOverflowTimerList>
    2b52:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <pxOverflowTimerList+0x1>
    2b56:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInsert>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	18 c0       	rjmp	.+48     	; 0x2b8e <prvInsertTimerInActiveList+0x84>
    2b5e:	0c 15       	cp	r16, r12
    2b60:	1d 05       	cpc	r17, r13
    2b62:	2e 05       	cpc	r18, r14
    2b64:	3f 05       	cpc	r19, r15
    2b66:	28 f4       	brcc	.+10     	; 0x2b72 <prvInsertTimerInActiveList+0x68>
    2b68:	4c 15       	cp	r20, r12
    2b6a:	5d 05       	cpc	r21, r13
    2b6c:	6e 05       	cpc	r22, r14
    2b6e:	7f 05       	cpc	r23, r15
    2b70:	68 f4       	brcc	.+26     	; 0x2b8c <prvInsertTimerInActiveList+0x82>
    2b72:	bf 01       	movw	r22, r30
    2b74:	6e 5f       	subi	r22, 0xFE	; 254
    2b76:	7f 4f       	sbci	r23, 0xFF	; 255
    2b78:	80 91 d5 11 	lds	r24, 0x11D5	; 0x8011d5 <pxCurrentTimerList>
    2b7c:	90 91 d6 11 	lds	r25, 0x11D6	; 0x8011d6 <pxCurrentTimerList+0x1>
    2b80:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInsert>
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	03 c0       	rjmp	.+6      	; 0x2b8e <prvInsertTimerInActiveList+0x84>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	01 c0       	rjmp	.+2      	; 0x2b8e <prvInsertTimerInActiveList+0x84>
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	df 90       	pop	r13
    2b98:	cf 90       	pop	r12
    2b9a:	08 95       	ret

00002b9c <prvCheckForValidListAndQueue>:
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	0f 92       	push	r0
    2ba2:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <xTimerQueue>
    2ba6:	90 91 d2 11 	lds	r25, 0x11D2	; 0x8011d2 <xTimerQueue+0x1>
    2baa:	89 2b       	or	r24, r25
    2bac:	e9 f4       	brne	.+58     	; 0x2be8 <prvCheckForValidListAndQueue+0x4c>
    2bae:	82 ee       	ldi	r24, 0xE2	; 226
    2bb0:	91 e1       	ldi	r25, 0x11	; 17
    2bb2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInitialise>
    2bb6:	87 ed       	ldi	r24, 0xD7	; 215
    2bb8:	91 e1       	ldi	r25, 0x11	; 17
    2bba:	0e 94 58 03 	call	0x6b0	; 0x6b0 <vListInitialise>
    2bbe:	82 ee       	ldi	r24, 0xE2	; 226
    2bc0:	91 e1       	ldi	r25, 0x11	; 17
    2bc2:	90 93 d6 11 	sts	0x11D6, r25	; 0x8011d6 <pxCurrentTimerList+0x1>
    2bc6:	80 93 d5 11 	sts	0x11D5, r24	; 0x8011d5 <pxCurrentTimerList>
    2bca:	87 ed       	ldi	r24, 0xD7	; 215
    2bcc:	91 e1       	ldi	r25, 0x11	; 17
    2bce:	90 93 d4 11 	sts	0x11D4, r25	; 0x8011d4 <pxOverflowTimerList+0x1>
    2bd2:	80 93 d3 11 	sts	0x11D3, r24	; 0x8011d3 <pxOverflowTimerList>
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	67 e0       	ldi	r22, 0x07	; 7
    2bda:	8a e0       	ldi	r24, 0x0A	; 10
    2bdc:	0e 94 0b 06 	call	0xc16	; 0xc16 <xQueueGenericCreate>
    2be0:	90 93 d2 11 	sts	0x11D2, r25	; 0x8011d2 <xTimerQueue+0x1>
    2be4:	80 93 d1 11 	sts	0x11D1, r24	; 0x8011d1 <xTimerQueue>
    2be8:	0f 90       	pop	r0
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	08 95       	ret

00002bee <xTimerCreateTimerTask>:
    2bee:	ef 92       	push	r14
    2bf0:	ff 92       	push	r15
    2bf2:	0f 93       	push	r16
    2bf4:	d3 df       	rcall	.-90     	; 0x2b9c <prvCheckForValidListAndQueue>
    2bf6:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <xTimerQueue>
    2bfa:	90 91 d2 11 	lds	r25, 0x11D2	; 0x8011d2 <xTimerQueue+0x1>
    2bfe:	89 2b       	or	r24, r25
    2c00:	91 f0       	breq	.+36     	; 0x2c26 <xTimerCreateTimerTask+0x38>
    2c02:	0f 2e       	mov	r0, r31
    2c04:	ff ec       	ldi	r31, 0xCF	; 207
    2c06:	ef 2e       	mov	r14, r31
    2c08:	f1 e1       	ldi	r31, 0x11	; 17
    2c0a:	ff 2e       	mov	r15, r31
    2c0c:	f0 2d       	mov	r31, r0
    2c0e:	03 e0       	ldi	r16, 0x03	; 3
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 ec       	ldi	r20, 0xC0	; 192
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	6d e9       	ldi	r22, 0x9D	; 157
    2c1a:	73 e0       	ldi	r23, 0x03	; 3
    2c1c:	86 e8       	ldi	r24, 0x86	; 134
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <xTaskCreate>
    2c24:	01 c0       	rjmp	.+2      	; 0x2c28 <xTimerCreateTimerTask+0x3a>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	08 95       	ret

00002c30 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2c30:	8f 92       	push	r8
    2c32:	9f 92       	push	r9
    2c34:	af 92       	push	r10
    2c36:	bf 92       	push	r11
    2c38:	cf 92       	push	r12
    2c3a:	df 92       	push	r13
    2c3c:	ef 92       	push	r14
    2c3e:	ff 92       	push	r15
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	27 97       	sbiw	r28, 0x07	; 7
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2c58:	e0 91 d1 11 	lds	r30, 0x11D1	; 0x8011d1 <xTimerQueue>
    2c5c:	f0 91 d2 11 	lds	r31, 0x11D2	; 0x8011d2 <xTimerQueue+0x1>
    2c60:	30 97       	sbiw	r30, 0x00	; 0
    2c62:	81 f1       	breq	.+96     	; 0x2cc4 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2c64:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2c66:	2a 83       	std	Y+2, r18	; 0x02
    2c68:	3b 83       	std	Y+3, r19	; 0x03
    2c6a:	4c 83       	std	Y+4, r20	; 0x04
    2c6c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2c6e:	9f 83       	std	Y+7, r25	; 0x07
    2c70:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2c72:	66 30       	cpi	r22, 0x06	; 6
    2c74:	f4 f4       	brge	.+60     	; 0x2cb2 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2c76:	ee db       	rcall	.-2084   	; 0x2454 <xTaskGetSchedulerState>
    2c78:	82 30       	cpi	r24, 0x02	; 2
    2c7a:	69 f4       	brne	.+26     	; 0x2c96 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2c7c:	00 e0       	ldi	r16, 0x00	; 0
    2c7e:	a7 01       	movw	r20, r14
    2c80:	96 01       	movw	r18, r12
    2c82:	be 01       	movw	r22, r28
    2c84:	6f 5f       	subi	r22, 0xFF	; 255
    2c86:	7f 4f       	sbci	r23, 0xFF	; 255
    2c88:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <xTimerQueue>
    2c8c:	90 91 d2 11 	lds	r25, 0x11D2	; 0x8011d2 <xTimerQueue+0x1>
    2c90:	0e 94 2e 06 	call	0xc5c	; 0xc5c <xQueueGenericSend>
    2c94:	18 c0       	rjmp	.+48     	; 0x2cc6 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2c96:	00 e0       	ldi	r16, 0x00	; 0
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	a9 01       	movw	r20, r18
    2c9e:	be 01       	movw	r22, r28
    2ca0:	6f 5f       	subi	r22, 0xFF	; 255
    2ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca4:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <xTimerQueue>
    2ca8:	90 91 d2 11 	lds	r25, 0x11D2	; 0x8011d2 <xTimerQueue+0x1>
    2cac:	0e 94 2e 06 	call	0xc5c	; 0xc5c <xQueueGenericSend>
    2cb0:	0a c0       	rjmp	.+20     	; 0x2cc6 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	a8 01       	movw	r20, r16
    2cb6:	be 01       	movw	r22, r28
    2cb8:	6f 5f       	subi	r22, 0xFF	; 255
    2cba:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbc:	cf 01       	movw	r24, r30
    2cbe:	0e 94 de 06 	call	0xdbc	; 0xdbc <xQueueGenericSendFromISR>
    2cc2:	01 c0       	rjmp	.+2      	; 0x2cc6 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2cc6:	27 96       	adiw	r28, 0x07	; 7
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	df 90       	pop	r13
    2ce0:	cf 90       	pop	r12
    2ce2:	bf 90       	pop	r11
    2ce4:	af 90       	pop	r10
    2ce6:	9f 90       	pop	r9
    2ce8:	8f 90       	pop	r8
    2cea:	08 95       	ret

00002cec <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2cec:	8f 92       	push	r8
    2cee:	9f 92       	push	r9
    2cf0:	af 92       	push	r10
    2cf2:	bf 92       	push	r11
    2cf4:	cf 92       	push	r12
    2cf6:	df 92       	push	r13
    2cf8:	ef 92       	push	r14
    2cfa:	ff 92       	push	r15
    2cfc:	0f 93       	push	r16
    2cfe:	1f 93       	push	r17
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2d04:	3b c0       	rjmp	.+118    	; 0x2d7c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2d06:	07 80       	ldd	r0, Z+7	; 0x07
    2d08:	f0 85       	ldd	r31, Z+8	; 0x08
    2d0a:	e0 2d       	mov	r30, r0
    2d0c:	80 80       	ld	r8, Z
    2d0e:	91 80       	ldd	r9, Z+1	; 0x01
    2d10:	a2 80       	ldd	r10, Z+2	; 0x02
    2d12:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2d14:	c0 85       	ldd	r28, Z+8	; 0x08
    2d16:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d18:	8e 01       	movw	r16, r28
    2d1a:	0e 5f       	subi	r16, 0xFE	; 254
    2d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1e:	c8 01       	movw	r24, r16
    2d20:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d24:	ec 89       	ldd	r30, Y+20	; 0x14
    2d26:	fd 89       	ldd	r31, Y+21	; 0x15
    2d28:	ce 01       	movw	r24, r28
    2d2a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d2c:	8e 89       	ldd	r24, Y+22	; 0x16
    2d2e:	82 ff       	sbrs	r24, 2
    2d30:	25 c0       	rjmp	.+74     	; 0x2d7c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2d32:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d34:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d36:	a8 89       	ldd	r26, Y+16	; 0x10
    2d38:	b9 89       	ldd	r27, Y+17	; 0x11
    2d3a:	88 0d       	add	r24, r8
    2d3c:	99 1d       	adc	r25, r9
    2d3e:	aa 1d       	adc	r26, r10
    2d40:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2d42:	88 16       	cp	r8, r24
    2d44:	99 06       	cpc	r9, r25
    2d46:	aa 06       	cpc	r10, r26
    2d48:	bb 06       	cpc	r11, r27
    2d4a:	70 f4       	brcc	.+28     	; 0x2d68 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2d4c:	8a 83       	std	Y+2, r24	; 0x02
    2d4e:	9b 83       	std	Y+3, r25	; 0x03
    2d50:	ac 83       	std	Y+4, r26	; 0x04
    2d52:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2d54:	db 87       	std	Y+11, r29	; 0x0b
    2d56:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2d58:	b8 01       	movw	r22, r16
    2d5a:	80 91 d5 11 	lds	r24, 0x11D5	; 0x8011d5 <pxCurrentTimerList>
    2d5e:	90 91 d6 11 	lds	r25, 0x11D6	; 0x8011d6 <pxCurrentTimerList+0x1>
    2d62:	0e 94 6d 03 	call	0x6da	; 0x6da <vListInsert>
    2d66:	0a c0       	rjmp	.+20     	; 0x2d7c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2d68:	c1 2c       	mov	r12, r1
    2d6a:	d1 2c       	mov	r13, r1
    2d6c:	76 01       	movw	r14, r12
    2d6e:	00 e0       	ldi	r16, 0x00	; 0
    2d70:	10 e0       	ldi	r17, 0x00	; 0
    2d72:	a5 01       	movw	r20, r10
    2d74:	94 01       	movw	r18, r8
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	ce 01       	movw	r24, r28
    2d7a:	5a df       	rcall	.-332    	; 0x2c30 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2d7c:	e0 91 d5 11 	lds	r30, 0x11D5	; 0x8011d5 <pxCurrentTimerList>
    2d80:	f0 91 d6 11 	lds	r31, 0x11D6	; 0x8011d6 <pxCurrentTimerList+0x1>
    2d84:	80 81       	ld	r24, Z
    2d86:	81 11       	cpse	r24, r1
    2d88:	be cf       	rjmp	.-132    	; 0x2d06 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2d8a:	80 91 d3 11 	lds	r24, 0x11D3	; 0x8011d3 <pxOverflowTimerList>
    2d8e:	90 91 d4 11 	lds	r25, 0x11D4	; 0x8011d4 <pxOverflowTimerList+0x1>
    2d92:	90 93 d6 11 	sts	0x11D6, r25	; 0x8011d6 <pxCurrentTimerList+0x1>
    2d96:	80 93 d5 11 	sts	0x11D5, r24	; 0x8011d5 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2d9a:	f0 93 d4 11 	sts	0x11D4, r31	; 0x8011d4 <pxOverflowTimerList+0x1>
    2d9e:	e0 93 d3 11 	sts	0x11D3, r30	; 0x8011d3 <pxOverflowTimerList>
    }
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	1f 91       	pop	r17
    2da8:	0f 91       	pop	r16
    2daa:	ff 90       	pop	r15
    2dac:	ef 90       	pop	r14
    2dae:	df 90       	pop	r13
    2db0:	cf 90       	pop	r12
    2db2:	bf 90       	pop	r11
    2db4:	af 90       	pop	r10
    2db6:	9f 90       	pop	r9
    2db8:	8f 90       	pop	r8
    2dba:	08 95       	ret

00002dbc <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2dbc:	cf 92       	push	r12
    2dbe:	df 92       	push	r13
    2dc0:	ef 92       	push	r14
    2dc2:	ff 92       	push	r15
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2dca:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <xTaskGetTickCount>
    2dce:	6b 01       	movw	r12, r22
    2dd0:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2dd2:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <xLastTime.2436>
    2dd6:	90 91 cc 11 	lds	r25, 0x11CC	; 0x8011cc <xLastTime.2436+0x1>
    2dda:	a0 91 cd 11 	lds	r26, 0x11CD	; 0x8011cd <xLastTime.2436+0x2>
    2dde:	b0 91 ce 11 	lds	r27, 0x11CE	; 0x8011ce <xLastTime.2436+0x3>
    2de2:	c8 16       	cp	r12, r24
    2de4:	d9 06       	cpc	r13, r25
    2de6:	ea 06       	cpc	r14, r26
    2de8:	fb 06       	cpc	r15, r27
    2dea:	20 f4       	brcc	.+8      	; 0x2df4 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2dec:	7f df       	rcall	.-258    	; 0x2cec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	88 83       	st	Y, r24
    2df2:	01 c0       	rjmp	.+2      	; 0x2df6 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2df4:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2df6:	c0 92 cb 11 	sts	0x11CB, r12	; 0x8011cb <xLastTime.2436>
    2dfa:	d0 92 cc 11 	sts	0x11CC, r13	; 0x8011cc <xLastTime.2436+0x1>
    2dfe:	e0 92 cd 11 	sts	0x11CD, r14	; 0x8011cd <xLastTime.2436+0x2>
    2e02:	f0 92 ce 11 	sts	0x11CE, r15	; 0x8011ce <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2e06:	c7 01       	movw	r24, r14
    2e08:	b6 01       	movw	r22, r12
    2e0a:	df 91       	pop	r29
    2e0c:	cf 91       	pop	r28
    2e0e:	ff 90       	pop	r15
    2e10:	ef 90       	pop	r14
    2e12:	df 90       	pop	r13
    2e14:	cf 90       	pop	r12
    2e16:	08 95       	ret

00002e18 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2e18:	4f 92       	push	r4
    2e1a:	5f 92       	push	r5
    2e1c:	6f 92       	push	r6
    2e1e:	7f 92       	push	r7
    2e20:	8f 92       	push	r8
    2e22:	9f 92       	push	r9
    2e24:	af 92       	push	r10
    2e26:	bf 92       	push	r11
    2e28:	cf 92       	push	r12
    2e2a:	df 92       	push	r13
    2e2c:	ef 92       	push	r14
    2e2e:	ff 92       	push	r15
    2e30:	0f 93       	push	r16
    2e32:	1f 93       	push	r17
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	4b 01       	movw	r8, r22
    2e3a:	5c 01       	movw	r10, r24
    2e3c:	29 01       	movw	r4, r18
    2e3e:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2e40:	e0 91 d5 11 	lds	r30, 0x11D5	; 0x8011d5 <pxCurrentTimerList>
    2e44:	f0 91 d6 11 	lds	r31, 0x11D6	; 0x8011d6 <pxCurrentTimerList+0x1>
    2e48:	07 80       	ldd	r0, Z+7	; 0x07
    2e4a:	f0 85       	ldd	r31, Z+8	; 0x08
    2e4c:	e0 2d       	mov	r30, r0
    2e4e:	c0 85       	ldd	r28, Z+8	; 0x08
    2e50:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e52:	ce 01       	movw	r24, r28
    2e54:	02 96       	adiw	r24, 0x02	; 2
    2e56:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2e5a:	8e 89       	ldd	r24, Y+22	; 0x16
    2e5c:	82 ff       	sbrs	r24, 2
    2e5e:	1b c0       	rjmp	.+54     	; 0x2e96 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2e60:	4e 85       	ldd	r20, Y+14	; 0x0e
    2e62:	5f 85       	ldd	r21, Y+15	; 0x0f
    2e64:	68 89       	ldd	r22, Y+16	; 0x10
    2e66:	79 89       	ldd	r23, Y+17	; 0x11
    2e68:	48 0d       	add	r20, r8
    2e6a:	59 1d       	adc	r21, r9
    2e6c:	6a 1d       	adc	r22, r10
    2e6e:	7b 1d       	adc	r23, r11
    2e70:	75 01       	movw	r14, r10
    2e72:	64 01       	movw	r12, r8
    2e74:	93 01       	movw	r18, r6
    2e76:	82 01       	movw	r16, r4
    2e78:	ce 01       	movw	r24, r28
    2e7a:	47 de       	rcall	.-882    	; 0x2b0a <prvInsertTimerInActiveList>
    2e7c:	88 23       	and	r24, r24
    2e7e:	69 f0       	breq	.+26     	; 0x2e9a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2e80:	c1 2c       	mov	r12, r1
    2e82:	d1 2c       	mov	r13, r1
    2e84:	76 01       	movw	r14, r12
    2e86:	00 e0       	ldi	r16, 0x00	; 0
    2e88:	10 e0       	ldi	r17, 0x00	; 0
    2e8a:	a5 01       	movw	r20, r10
    2e8c:	94 01       	movw	r18, r8
    2e8e:	60 e0       	ldi	r22, 0x00	; 0
    2e90:	ce 01       	movw	r24, r28
    2e92:	ce de       	rcall	.-612    	; 0x2c30 <xTimerGenericCommand>
    2e94:	02 c0       	rjmp	.+4      	; 0x2e9a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e96:	8e 7f       	andi	r24, 0xFE	; 254
    2e98:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e9a:	ec 89       	ldd	r30, Y+20	; 0x14
    2e9c:	fd 89       	ldd	r31, Y+21	; 0x15
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	19 95       	eicall
    }
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	df 90       	pop	r13
    2eb0:	cf 90       	pop	r12
    2eb2:	bf 90       	pop	r11
    2eb4:	af 90       	pop	r10
    2eb6:	9f 90       	pop	r9
    2eb8:	8f 90       	pop	r8
    2eba:	7f 90       	pop	r7
    2ebc:	6f 90       	pop	r6
    2ebe:	5f 90       	pop	r5
    2ec0:	4f 90       	pop	r4
    2ec2:	08 95       	ret

00002ec4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2ec4:	8f 92       	push	r8
    2ec6:	9f 92       	push	r9
    2ec8:	af 92       	push	r10
    2eca:	bf 92       	push	r11
    2ecc:	cf 92       	push	r12
    2ece:	df 92       	push	r13
    2ed0:	ef 92       	push	r14
    2ed2:	ff 92       	push	r15
    2ed4:	1f 93       	push	r17
    2ed6:	cf 93       	push	r28
    2ed8:	df 93       	push	r29
    2eda:	1f 92       	push	r1
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	6b 01       	movw	r12, r22
    2ee2:	7c 01       	movw	r14, r24
    2ee4:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2ee6:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2eea:	ce 01       	movw	r24, r28
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	66 df       	rcall	.-308    	; 0x2dbc <prvSampleTimeNow>
    2ef0:	4b 01       	movw	r8, r22
    2ef2:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	81 11       	cpse	r24, r1
    2ef8:	2d c0       	rjmp	.+90     	; 0x2f54 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2efa:	11 11       	cpse	r17, r1
    2efc:	0d c0       	rjmp	.+26     	; 0x2f18 <prvProcessTimerOrBlockTask+0x54>
    2efe:	8c 14       	cp	r8, r12
    2f00:	9d 04       	cpc	r9, r13
    2f02:	ae 04       	cpc	r10, r14
    2f04:	bf 04       	cpc	r11, r15
    2f06:	40 f0       	brcs	.+16     	; 0x2f18 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2f08:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2f0c:	a5 01       	movw	r20, r10
    2f0e:	94 01       	movw	r18, r8
    2f10:	c7 01       	movw	r24, r14
    2f12:	b6 01       	movw	r22, r12
    2f14:	81 df       	rcall	.-254    	; 0x2e18 <prvProcessExpiredTimer>
    2f16:	20 c0       	rjmp	.+64     	; 0x2f58 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2f18:	11 23       	and	r17, r17
    2f1a:	41 f0       	breq	.+16     	; 0x2f2c <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2f1c:	e0 91 d3 11 	lds	r30, 0x11D3	; 0x8011d3 <pxOverflowTimerList>
    2f20:	f0 91 d4 11 	lds	r31, 0x11D4	; 0x8011d4 <pxOverflowTimerList+0x1>
    2f24:	80 81       	ld	r24, Z
    2f26:	11 e0       	ldi	r17, 0x01	; 1
    2f28:	81 11       	cpse	r24, r1
    2f2a:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2f2c:	b7 01       	movw	r22, r14
    2f2e:	a6 01       	movw	r20, r12
    2f30:	48 19       	sub	r20, r8
    2f32:	59 09       	sbc	r21, r9
    2f34:	6a 09       	sbc	r22, r10
    2f36:	7b 09       	sbc	r23, r11
    2f38:	21 2f       	mov	r18, r17
    2f3a:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <xTimerQueue>
    2f3e:	90 91 d2 11 	lds	r25, 0x11D2	; 0x8011d2 <xTimerQueue+0x1>
    2f42:	0e 94 a8 07 	call	0xf50	; 0xf50 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2f46:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <xTaskResumeAll>
    2f4a:	81 11       	cpse	r24, r1
    2f4c:	05 c0       	rjmp	.+10     	; 0x2f58 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2f4e:	0e 94 26 04 	call	0x84c	; 0x84c <vPortYield>
    2f52:	02 c0       	rjmp	.+4      	; 0x2f58 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2f54:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <xTaskResumeAll>
            }
        }
    }
    2f58:	0f 90       	pop	r0
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	1f 91       	pop	r17
    2f60:	ff 90       	pop	r15
    2f62:	ef 90       	pop	r14
    2f64:	df 90       	pop	r13
    2f66:	cf 90       	pop	r12
    2f68:	bf 90       	pop	r11
    2f6a:	af 90       	pop	r10
    2f6c:	9f 90       	pop	r9
    2f6e:	8f 90       	pop	r8
    2f70:	08 95       	ret

00002f72 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2f72:	af 92       	push	r10
    2f74:	bf 92       	push	r11
    2f76:	cf 92       	push	r12
    2f78:	df 92       	push	r13
    2f7a:	ef 92       	push	r14
    2f7c:	ff 92       	push	r15
    2f7e:	0f 93       	push	r16
    2f80:	1f 93       	push	r17
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	28 97       	sbiw	r28, 0x08	; 8
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	f8 94       	cli
    2f90:	de bf       	out	0x3e, r29	; 62
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2f96:	82 c0       	rjmp	.+260    	; 0x309c <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	88 23       	and	r24, r24
    2f9c:	0c f4       	brge	.+2      	; 0x2fa0 <prvProcessReceivedCommands+0x2e>
    2f9e:	7e c0       	rjmp	.+252    	; 0x309c <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2fa0:	ae 80       	ldd	r10, Y+6	; 0x06
    2fa2:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2fa4:	d5 01       	movw	r26, r10
    2fa6:	1c 96       	adiw	r26, 0x0c	; 12
    2fa8:	8d 91       	ld	r24, X+
    2faa:	9c 91       	ld	r25, X
    2fac:	1d 97       	sbiw	r26, 0x0d	; 13
    2fae:	89 2b       	or	r24, r25
    2fb0:	21 f0       	breq	.+8      	; 0x2fba <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2fb2:	c5 01       	movw	r24, r10
    2fb4:	02 96       	adiw	r24, 0x02	; 2
    2fb6:	0e 94 aa 03 	call	0x754	; 0x754 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2fba:	ce 01       	movw	r24, r28
    2fbc:	08 96       	adiw	r24, 0x08	; 8
    2fbe:	fe de       	rcall	.-516    	; 0x2dbc <prvSampleTimeNow>
    2fc0:	8b 01       	movw	r16, r22
    2fc2:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc6:	0e 2e       	mov	r0, r30
    2fc8:	00 0c       	add	r0, r0
    2fca:	ff 0b       	sbc	r31, r31
    2fcc:	ea 30       	cpi	r30, 0x0A	; 10
    2fce:	f1 05       	cpc	r31, r1
    2fd0:	08 f0       	brcs	.+2      	; 0x2fd4 <prvProcessReceivedCommands+0x62>
    2fd2:	64 c0       	rjmp	.+200    	; 0x309c <prvProcessReceivedCommands+0x12a>
    2fd4:	88 27       	eor	r24, r24
    2fd6:	ee 58       	subi	r30, 0x8E	; 142
    2fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fda:	8f 4f       	sbci	r24, 0xFF	; 255
    2fdc:	0c 94 50 25 	jmp	0x4aa0	; 0x4aa0 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2fe0:	f5 01       	movw	r30, r10
    2fe2:	86 89       	ldd	r24, Z+22	; 0x16
    2fe4:	81 60       	ori	r24, 0x01	; 1
    2fe6:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2fe8:	ca 80       	ldd	r12, Y+2	; 0x02
    2fea:	db 80       	ldd	r13, Y+3	; 0x03
    2fec:	ec 80       	ldd	r14, Y+4	; 0x04
    2fee:	fd 80       	ldd	r15, Y+5	; 0x05
    2ff0:	46 85       	ldd	r20, Z+14	; 0x0e
    2ff2:	57 85       	ldd	r21, Z+15	; 0x0f
    2ff4:	60 89       	ldd	r22, Z+16	; 0x10
    2ff6:	71 89       	ldd	r23, Z+17	; 0x11
    2ff8:	4c 0d       	add	r20, r12
    2ffa:	5d 1d       	adc	r21, r13
    2ffc:	6e 1d       	adc	r22, r14
    2ffe:	7f 1d       	adc	r23, r15
    3000:	c5 01       	movw	r24, r10
    3002:	83 dd       	rcall	.-1274   	; 0x2b0a <prvInsertTimerInActiveList>
    3004:	88 23       	and	r24, r24
    3006:	09 f4       	brne	.+2      	; 0x300a <prvProcessReceivedCommands+0x98>
    3008:	49 c0       	rjmp	.+146    	; 0x309c <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    300a:	d5 01       	movw	r26, r10
    300c:	54 96       	adiw	r26, 0x14	; 20
    300e:	ed 91       	ld	r30, X+
    3010:	fc 91       	ld	r31, X
    3012:	55 97       	sbiw	r26, 0x15	; 21
    3014:	c5 01       	movw	r24, r10
    3016:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3018:	f5 01       	movw	r30, r10
    301a:	86 89       	ldd	r24, Z+22	; 0x16
    301c:	82 ff       	sbrs	r24, 2
    301e:	3e c0       	rjmp	.+124    	; 0x309c <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3020:	4a 81       	ldd	r20, Y+2	; 0x02
    3022:	5b 81       	ldd	r21, Y+3	; 0x03
    3024:	6c 81       	ldd	r22, Y+4	; 0x04
    3026:	7d 81       	ldd	r23, Y+5	; 0x05
    3028:	86 85       	ldd	r24, Z+14	; 0x0e
    302a:	97 85       	ldd	r25, Z+15	; 0x0f
    302c:	a0 89       	ldd	r26, Z+16	; 0x10
    302e:	b1 89       	ldd	r27, Z+17	; 0x11
    3030:	9a 01       	movw	r18, r20
    3032:	ab 01       	movw	r20, r22
    3034:	28 0f       	add	r18, r24
    3036:	39 1f       	adc	r19, r25
    3038:	4a 1f       	adc	r20, r26
    303a:	5b 1f       	adc	r21, r27
    303c:	c1 2c       	mov	r12, r1
    303e:	d1 2c       	mov	r13, r1
    3040:	76 01       	movw	r14, r12
    3042:	00 e0       	ldi	r16, 0x00	; 0
    3044:	10 e0       	ldi	r17, 0x00	; 0
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	c5 01       	movw	r24, r10
    304a:	f2 dd       	rcall	.-1052   	; 0x2c30 <xTimerGenericCommand>
    304c:	27 c0       	rjmp	.+78     	; 0x309c <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    304e:	d5 01       	movw	r26, r10
    3050:	56 96       	adiw	r26, 0x16	; 22
    3052:	8c 91       	ld	r24, X
    3054:	56 97       	sbiw	r26, 0x16	; 22
    3056:	8e 7f       	andi	r24, 0xFE	; 254
    3058:	56 96       	adiw	r26, 0x16	; 22
    305a:	8c 93       	st	X, r24
                        break;
    305c:	1f c0       	rjmp	.+62     	; 0x309c <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    305e:	f5 01       	movw	r30, r10
    3060:	86 89       	ldd	r24, Z+22	; 0x16
    3062:	81 60       	ori	r24, 0x01	; 1
    3064:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3066:	4a 81       	ldd	r20, Y+2	; 0x02
    3068:	5b 81       	ldd	r21, Y+3	; 0x03
    306a:	6c 81       	ldd	r22, Y+4	; 0x04
    306c:	7d 81       	ldd	r23, Y+5	; 0x05
    306e:	46 87       	std	Z+14, r20	; 0x0e
    3070:	57 87       	std	Z+15, r21	; 0x0f
    3072:	60 8b       	std	Z+16, r22	; 0x10
    3074:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3076:	40 0f       	add	r20, r16
    3078:	51 1f       	adc	r21, r17
    307a:	62 1f       	adc	r22, r18
    307c:	73 1f       	adc	r23, r19
    307e:	68 01       	movw	r12, r16
    3080:	79 01       	movw	r14, r18
    3082:	c5 01       	movw	r24, r10
    3084:	42 dd       	rcall	.-1404   	; 0x2b0a <prvInsertTimerInActiveList>
                        break;
    3086:	0a c0       	rjmp	.+20     	; 0x309c <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3088:	f5 01       	movw	r30, r10
    308a:	86 89       	ldd	r24, Z+22	; 0x16
    308c:	81 fd       	sbrc	r24, 1
    308e:	04 c0       	rjmp	.+8      	; 0x3098 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    3090:	c5 01       	movw	r24, r10
    3092:	0e 94 1b 03 	call	0x636	; 0x636 <vPortFree>
    3096:	02 c0       	rjmp	.+4      	; 0x309c <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3098:	8e 7f       	andi	r24, 0xFE	; 254
    309a:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	a9 01       	movw	r20, r18
    30a2:	be 01       	movw	r22, r28
    30a4:	6f 5f       	subi	r22, 0xFF	; 255
    30a6:	7f 4f       	sbci	r23, 0xFF	; 255
    30a8:	80 91 d1 11 	lds	r24, 0x11D1	; 0x8011d1 <xTimerQueue>
    30ac:	90 91 d2 11 	lds	r25, 0x11D2	; 0x8011d2 <xTimerQueue+0x1>
    30b0:	0e 94 19 07 	call	0xe32	; 0xe32 <xQueueReceive>
    30b4:	81 11       	cpse	r24, r1
    30b6:	70 cf       	rjmp	.-288    	; 0x2f98 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    30b8:	28 96       	adiw	r28, 0x08	; 8
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	df 91       	pop	r29
    30c6:	cf 91       	pop	r28
    30c8:	1f 91       	pop	r17
    30ca:	0f 91       	pop	r16
    30cc:	ff 90       	pop	r15
    30ce:	ef 90       	pop	r14
    30d0:	df 90       	pop	r13
    30d2:	cf 90       	pop	r12
    30d4:	bf 90       	pop	r11
    30d6:	af 90       	pop	r10
    30d8:	08 95       	ret

000030da <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    30da:	08 95       	ret

000030dc <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    30dc:	84 b1       	in	r24, 0x04	; 4
    30de:	80 68       	ori	r24, 0x80	; 128
    30e0:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    30e2:	85 b1       	in	r24, 0x05	; 5
    30e4:	80 68       	ori	r24, 0x80	; 128
    30e6:	85 b9       	out	0x05, r24	; 5
    30e8:	08 95       	ret

000030ea <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    30ea:	83 b1       	in	r24, 0x03	; 3
    30ec:	80 68       	ori	r24, 0x80	; 128
    30ee:	83 b9       	out	0x03, r24	; 3
    30f0:	08 95       	ret

000030f2 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    30f2:	f4 df       	rcall	.-24     	; 0x30dc <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    30f4:	2f ef       	ldi	r18, 0xFF	; 255
    30f6:	80 e7       	ldi	r24, 0x70	; 112
    30f8:	92 e0       	ldi	r25, 0x02	; 2
    30fa:	21 50       	subi	r18, 0x01	; 1
    30fc:	80 40       	sbci	r24, 0x00	; 0
    30fe:	90 40       	sbci	r25, 0x00	; 0
    3100:	e1 f7       	brne	.-8      	; 0x30fa <vApplicationMallocFailedHook+0x8>
    3102:	00 c0       	rjmp	.+0      	; 0x3104 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    3104:	00 00       	nop
    3106:	f1 df       	rcall	.-30     	; 0x30ea <prvBlinkMainLed>
    3108:	f5 cf       	rjmp	.-22     	; 0x30f4 <vApplicationMallocFailedHook+0x2>

0000310a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    310a:	e8 df       	rcall	.-48     	; 0x30dc <prvSetMainLedOn>
    310c:	2f ef       	ldi	r18, 0xFF	; 255
    310e:	87 ea       	ldi	r24, 0xA7	; 167
    3110:	91 e6       	ldi	r25, 0x61	; 97
    3112:	21 50       	subi	r18, 0x01	; 1
    3114:	80 40       	sbci	r24, 0x00	; 0
    3116:	90 40       	sbci	r25, 0x00	; 0
    3118:	e1 f7       	brne	.-8      	; 0x3112 <vApplicationStackOverflowHook+0x8>
    311a:	00 c0       	rjmp	.+0      	; 0x311c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    311c:	00 00       	nop
    311e:	e5 df       	rcall	.-54     	; 0x30ea <prvBlinkMainLed>
    3120:	f5 cf       	rjmp	.-22     	; 0x310c <vApplicationStackOverflowHook+0x2>

00003122 <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	00 d0       	rcall	.+0      	; 0x3128 <task1+0x6>
    3128:	1f 92       	push	r1
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    312e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <xTaskGetTickCount>
    3132:	69 83       	std	Y+1, r22	; 0x01
    3134:	7a 83       	std	Y+2, r23	; 0x02
    3136:	8b 83       	std	Y+3, r24	; 0x03
    3138:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    313a:	4f e1       	ldi	r20, 0x1F	; 31
    313c:	50 e0       	ldi	r21, 0x00	; 0
    313e:	60 e0       	ldi	r22, 0x00	; 0
    3140:	70 e0       	ldi	r23, 0x00	; 0
    3142:	ce 01       	movw	r24, r28
    3144:	01 96       	adiw	r24, 0x01	; 1
    3146:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <xTaskDelayUntil>
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    314a:	85 ea       	ldi	r24, 0xA5	; 165
    314c:	93 e0       	ldi	r25, 0x03	; 3
    314e:	0e 94 ef 26 	call	0x4dde	; 0x4dde <puts>
		PORTA ^= _BV(PA0);
    3152:	92 b1       	in	r25, 0x02	; 2
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	89 27       	eor	r24, r25
    3158:	82 b9       	out	0x02, r24	; 2
    315a:	ef cf       	rjmp	.-34     	; 0x313a <task1+0x18>

0000315c <UL_handler_send>:
void UL_handler_send( void *pvParameters )
{
	for(;;){
		size_t xBytesSent;
		// Payload
		SensorDataPackage_t sensorDataPackage = SensorDataPackage_create(/*JULIA PUT YOUR DATA HERE - CO2Sensor.getCO2()*/250); 
    315c:	8a ef       	ldi	r24, 0xFA	; 250
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	0e 94 b7 00 	call	0x16e	; 0x16e <SensorDataPackage_create>
		const TickType_t x100ms = pdMS_TO_TICKS( 100 );
	
		// Send the payload to the message buffer, a maximum of 100ms to wait for enough space to be available in the message buffer.
		xBytesSent = xMessageBufferSend( UpLinkMessageBuffer, ( void * ) sensorDataPackage, sizeof( sensorDataPackage ), x100ms );
    3164:	06 e0       	ldi	r16, 0x06	; 6
    3166:	10 e0       	ldi	r17, 0x00	; 0
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	42 e0       	ldi	r20, 0x02	; 2
    316e:	50 e0       	ldi	r21, 0x00	; 0
    3170:	bc 01       	movw	r22, r24
    3172:	80 91 ef 11 	lds	r24, 0x11EF	; 0x8011ef <UpLinkMessageBuffer>
    3176:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <UpLinkMessageBuffer+0x1>
    317a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <xStreamBufferSend>
	
		if( xBytesSent != sizeof( sensorDataPackage ) )
    317e:	02 97       	sbiw	r24, 0x02	; 2
    3180:	39 f0       	breq	.+14     	; 0x3190 <UL_handler_send+0x34>
		{
			// The call to xMessageBufferSend() timed out before there was enough space in the buffer for the data to be written.
			// Wait 2.5 minutes to retry
			vTaskDelay(pdMS_TO_TICKS(150000));
    3182:	64 e5       	ldi	r22, 0x54	; 84
    3184:	74 e2       	ldi	r23, 0x24	; 36
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
    318e:	e6 cf       	rjmp	.-52     	; 0x315c <UL_handler_send>
		}else{
			// OK
			puts("UL_handler_send -> OK");
    3190:	8b ea       	ldi	r24, 0xAB	; 171
    3192:	93 e0       	ldi	r25, 0x03	; 3
    3194:	0e 94 ef 26 	call	0x4dde	; 0x4dde <puts>
			vTaskDelay(pdMS_TO_TICKS(300000));
    3198:	68 ea       	ldi	r22, 0xA8	; 168
    319a:	78 e4       	ldi	r23, 0x48	; 72
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
    31a4:	db cf       	rjmp	.-74     	; 0x315c <UL_handler_send>

000031a6 <create_tasks_and_semaphores>:
MessageBufferHandle_t UpLinkMessageBuffer = NULL;
MessageBufferHandle_t DownLinkMessageBuffer = NULL;

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    31ac:	80 91 32 13 	lds	r24, 0x1332	; 0x801332 <xTestSemaphore>
    31b0:	90 91 33 13 	lds	r25, 0x1333	; 0x801333 <xTestSemaphore+0x1>
    31b4:	89 2b       	or	r24, r25
    31b6:	89 f4       	brne	.+34     	; 0x31da <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	0e 94 d2 06 	call	0xda4	; 0xda4 <xQueueCreateMutex>
    31be:	90 93 33 13 	sts	0x1333, r25	; 0x801333 <xTestSemaphore+0x1>
    31c2:	80 93 32 13 	sts	0x1332, r24	; 0x801332 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    31c6:	00 97       	sbiw	r24, 0x00	; 0
    31c8:	41 f0       	breq	.+16     	; 0x31da <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    31ca:	00 e0       	ldi	r16, 0x00	; 0
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	a9 01       	movw	r20, r18
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	70 e0       	ldi	r23, 0x00	; 0
    31d6:	0e 94 2e 06 	call	0xc5c	; 0xc5c <xQueueGenericSend>
		}
	}

	xTaskCreate(
    31da:	e1 2c       	mov	r14, r1
    31dc:	f1 2c       	mov	r15, r1
    31de:	03 e0       	ldi	r16, 0x03	; 3
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 ec       	ldi	r20, 0xC0	; 192
    31e6:	50 e0       	ldi	r21, 0x00	; 0
    31e8:	61 ec       	ldi	r22, 0xC1	; 193
    31ea:	73 e0       	ldi	r23, 0x03	; 3
    31ec:	8e ea       	ldi	r24, 0xAE	; 174
    31ee:	98 e1       	ldi	r25, 0x18	; 24
    31f0:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL 
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 ec       	ldi	r20, 0xC0	; 192
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	65 ed       	ldi	r22, 0xD5	; 213
    31fe:	73 e0       	ldi	r23, 0x03	; 3
    3200:	8d ea       	ldi	r24, 0xAD	; 173
    3202:	91 e0       	ldi	r25, 0x01	; 1
    3204:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    3208:	02 e0       	ldi	r16, 0x02	; 2
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 ec       	ldi	r20, 0xC0	; 192
    3210:	50 e0       	ldi	r21, 0x00	; 0
    3212:	65 ea       	ldi	r22, 0xA5	; 165
    3214:	73 e0       	ldi	r23, 0x03	; 3
    3216:	81 e9       	ldi	r24, 0x91	; 145
    3218:	98 e1       	ldi	r25, 0x18	; 24
    321a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <xTaskCreate>
	,  "Task1"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    321e:	0f 91       	pop	r16
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	08 95       	ret

00003226 <initialiseSystem>:
/*-----------------------------------------------------------*/
void initialiseSystem()
{
	
	// Set output ports for LEDs used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    3226:	81 b1       	in	r24, 0x01	; 1
    3228:	81 68       	ori	r24, 0x81	; 129
    322a:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	0e 94 6d 21 	call	0x42da	; 0x42da <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    3232:	b9 df       	rcall	.-142    	; 0x31a6 <create_tasks_and_semaphores>
	
	UpLinkMessageBuffer = xMessageBufferCreate(UpLinkSize);
    3234:	41 e0       	ldi	r20, 0x01	; 1
    3236:	60 e0       	ldi	r22, 0x00	; 0
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	84 e0       	ldi	r24, 0x04	; 4
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	0e 94 07 09 	call	0x120e	; 0x120e <xStreamBufferGenericCreate>
    3242:	90 93 f0 11 	sts	0x11F0, r25	; 0x8011f0 <UpLinkMessageBuffer+0x1>
    3246:	80 93 ef 11 	sts	0x11EF, r24	; 0x8011ef <UpLinkMessageBuffer>
	DownLinkMessageBuffer = xMessageBufferCreate(DownLinkSize);
    324a:	41 e0       	ldi	r20, 0x01	; 1
    324c:	60 e0       	ldi	r22, 0x00	; 0
    324e:	70 e0       	ldi	r23, 0x00	; 0
    3250:	8c e2       	ldi	r24, 0x2C	; 44
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 07 09 	call	0x120e	; 0x120e <xStreamBufferGenericCreate>
    3258:	90 93 ee 11 	sts	0x11EE, r25	; 0x8011ee <DownLinkMessageBuffer+0x1>
    325c:	80 93 ed 11 	sts	0x11ED, r24	; 0x8011ed <DownLinkMessageBuffer>

	// LoRaWAN initialization
	// Status LEDs driver
	status_leds_initialise(5); // Priority 5 for internal task
    3260:	85 e0       	ldi	r24, 0x05	; 5
    3262:	0e 94 74 22 	call	0x44e8	; 0x44e8 <status_leds_initialise>
	
	// Initialize the LoRaWAN driver with down-link buffer
	lora_driver_initialise(1, DownLinkMessageBuffer);
    3266:	60 91 ed 11 	lds	r22, 0x11ED	; 0x8011ed <DownLinkMessageBuffer>
    326a:	70 91 ee 11 	lds	r23, 0x11EE	; 0x8011ee <DownLinkMessageBuffer+0x1>
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	36 d1       	rcall	.+620    	; 0x34de <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	
	UL_handler_create(UpLinkMessageBuffer);
    3272:	80 91 ef 11 	lds	r24, 0x11EF	; 0x8011ef <UpLinkMessageBuffer>
    3276:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <UpLinkMessageBuffer+0x1>
    327a:	0e 94 8e 01 	call	0x31c	; 0x31c <UL_handler_create>
	//lora_handler_initialise(3);	
	
	// UpLinkHandler
	UL_handler_create(UpLinkMessageBuffer);
    327e:	80 91 ef 11 	lds	r24, 0x11EF	; 0x8011ef <UpLinkMessageBuffer>
    3282:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <UpLinkMessageBuffer+0x1>
    3286:	0c 94 8e 01 	jmp	0x31c	; 0x31c <UL_handler_create>
    328a:	08 95       	ret

0000328c <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    328c:	cc df       	rcall	.-104    	; 0x3226 <initialiseSystem>
	printf("Program Started!!\n");
    328e:	8c ee       	ldi	r24, 0xEC	; 236
    3290:	93 e0       	ldi	r25, 0x03	; 3
    3292:	0e 94 ef 26 	call	0x4dde	; 0x4dde <puts>
	
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler.
    3296:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <vTaskStartScheduler>
	//Execution will never reach here.
}
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	08 95       	ret

000032a0 <_serialCallBack>:
    32a0:	0f 93       	push	r16
    32a2:	1f 93       	push	r17
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	1f 92       	push	r1
    32aa:	1f 92       	push	r1
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	8c 01       	movw	r16, r24
    32b2:	19 82       	std	Y+1, r1	; 0x01
    32b4:	2d c0       	rjmp	.+90     	; 0x3310 <_serialCallBack+0x70>
    32b6:	e0 91 55 12 	lds	r30, 0x1255	; 0x801255 <rec_buf_inp.2878>
    32ba:	ec 32       	cpi	r30, 0x2C	; 44
    32bc:	50 f4       	brcc	.+20     	; 0x32d2 <_serialCallBack+0x32>
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	8e 0f       	add	r24, r30
    32c2:	80 93 55 12 	sts	0x1255, r24	; 0x801255 <rec_buf_inp.2878>
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	e9 57       	subi	r30, 0x79	; 121
    32ca:	fd 4e       	sbci	r31, 0xED	; 237
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	80 83       	st	Z, r24
    32d0:	02 c0       	rjmp	.+4      	; 0x32d6 <_serialCallBack+0x36>
    32d2:	10 92 55 12 	sts	0x1255, r1	; 0x801255 <rec_buf_inp.2878>
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	8a 30       	cpi	r24, 0x0A	; 10
    32da:	d1 f4       	brne	.+52     	; 0x3310 <_serialCallBack+0x70>
    32dc:	40 91 55 12 	lds	r20, 0x1255	; 0x801255 <rec_buf_inp.2878>
    32e0:	50 e0       	ldi	r21, 0x00	; 0
    32e2:	fa 01       	movw	r30, r20
    32e4:	eb 57       	subi	r30, 0x7B	; 123
    32e6:	fd 4e       	sbci	r31, 0xED	; 237
    32e8:	10 82       	st	Z, r1
    32ea:	41 50       	subi	r20, 0x01	; 1
    32ec:	51 09       	sbc	r21, r1
    32ee:	9e 01       	movw	r18, r28
    32f0:	2f 5f       	subi	r18, 0xFF	; 255
    32f2:	3f 4f       	sbci	r19, 0xFF	; 255
    32f4:	67 e8       	ldi	r22, 0x87	; 135
    32f6:	72 e1       	ldi	r23, 0x12	; 18
    32f8:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    32fc:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    3300:	0e 94 2c 0a 	call	0x1458	; 0x1458 <xStreamBufferSendFromISR>
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	81 11       	cpse	r24, r1
    3308:	0e 94 26 04 	call	0x84c	; 0x84c <vPortYield>
    330c:	10 92 55 12 	sts	0x1255, r1	; 0x801255 <rec_buf_inp.2878>
    3310:	be 01       	movw	r22, r28
    3312:	6e 5f       	subi	r22, 0xFE	; 254
    3314:	7f 4f       	sbci	r23, 0xFF	; 255
    3316:	c8 01       	movw	r24, r16
    3318:	4a d5       	rcall	.+2708   	; 0x3dae <serial_getByte>
    331a:	88 23       	and	r24, r24
    331c:	61 f2       	breq	.-104    	; 0x32b6 <_serialCallBack+0x16>
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	df 91       	pop	r29
    3324:	cf 91       	pop	r28
    3326:	1f 91       	pop	r17
    3328:	0f 91       	pop	r16
    332a:	08 95       	ret

0000332c <_uploadMessage>:
    332c:	0f 93       	push	r16
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	8c 01       	movw	r16, r24
    3336:	eb 01       	movw	r28, r22
    3338:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    333c:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    3340:	0e 94 39 09 	call	0x1272	; 0x1272 <xStreamBufferReset>
    3344:	b8 01       	movw	r22, r16
    3346:	81 ef       	ldi	r24, 0xF1	; 241
    3348:	91 e1       	ldi	r25, 0x11	; 17
    334a:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <strcpy>
    334e:	20 97       	sbiw	r28, 0x00	; 0
    3350:	79 f0       	breq	.+30     	; 0x3370 <_uploadMessage+0x44>
    3352:	e1 ef       	ldi	r30, 0xF1	; 241
    3354:	f1 e1       	ldi	r31, 0x11	; 17
    3356:	01 90       	ld	r0, Z+
    3358:	00 20       	and	r0, r0
    335a:	e9 f7       	brne	.-6      	; 0x3356 <_uploadMessage+0x2a>
    335c:	31 97       	sbiw	r30, 0x01	; 1
    335e:	80 e2       	ldi	r24, 0x20	; 32
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	91 83       	std	Z+1, r25	; 0x01
    3364:	80 83       	st	Z, r24
    3366:	be 01       	movw	r22, r28
    3368:	81 ef       	ldi	r24, 0xF1	; 241
    336a:	91 e1       	ldi	r25, 0x11	; 17
    336c:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <strcat>
    3370:	e1 ef       	ldi	r30, 0xF1	; 241
    3372:	f1 e1       	ldi	r31, 0x11	; 17
    3374:	df 01       	movw	r26, r30
    3376:	0d 90       	ld	r0, X+
    3378:	00 20       	and	r0, r0
    337a:	e9 f7       	brne	.-6      	; 0x3376 <_uploadMessage+0x4a>
    337c:	11 97       	sbiw	r26, 0x01	; 1
    337e:	8d e0       	ldi	r24, 0x0D	; 13
    3380:	9a e0       	ldi	r25, 0x0A	; 10
    3382:	11 96       	adiw	r26, 0x01	; 1
    3384:	9c 93       	st	X, r25
    3386:	8e 93       	st	-X, r24
    3388:	12 96       	adiw	r26, 0x02	; 2
    338a:	1c 92       	st	X, r1
    338c:	01 90       	ld	r0, Z+
    338e:	00 20       	and	r0, r0
    3390:	e9 f7       	brne	.-6      	; 0x338c <_uploadMessage+0x60>
    3392:	31 97       	sbiw	r30, 0x01	; 1
    3394:	e1 5f       	subi	r30, 0xF1	; 241
    3396:	f1 41       	sbci	r31, 0x11	; 17
    3398:	ae 2f       	mov	r26, r30
    339a:	81 ef       	ldi	r24, 0xF1	; 241
    339c:	91 e1       	ldi	r25, 0x11	; 17
    339e:	ac 01       	movw	r20, r24
    33a0:	6a 2f       	mov	r22, r26
    33a2:	80 91 5a 12 	lds	r24, 0x125A	; 0x80125a <_rn2483_serial>
    33a6:	90 91 5b 12 	lds	r25, 0x125B	; 0x80125b <_rn2483_serial+0x1>
    33aa:	ac d4       	rcall	.+2392   	; 0x3d04 <serial_sendBytes>
    33ac:	81 11       	cpse	r24, r1
    33ae:	11 c0       	rjmp	.+34     	; 0x33d2 <_uploadMessage+0xa6>
    33b0:	08 e2       	ldi	r16, 0x28	; 40
    33b2:	15 e0       	ldi	r17, 0x05	; 5
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	4d e2       	ldi	r20, 0x2D	; 45
    33ba:	50 e0       	ldi	r21, 0x00	; 0
    33bc:	61 ee       	ldi	r22, 0xE1	; 225
    33be:	72 e1       	ldi	r23, 0x12	; 18
    33c0:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    33c4:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    33c8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <xStreamBufferReceive>
    33cc:	81 ee       	ldi	r24, 0xE1	; 225
    33ce:	92 e1       	ldi	r25, 0x12	; 18
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <_uploadMessage+0xaa>
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	1f 91       	pop	r17
    33dc:	0f 91       	pop	r16
    33de:	08 95       	ret

000033e0 <_reply2ReturnCode>:
    33e0:	2f 92       	push	r2
    33e2:	3f 92       	push	r3
    33e4:	4f 92       	push	r4
    33e6:	5f 92       	push	r5
    33e8:	6f 92       	push	r6
    33ea:	7f 92       	push	r7
    33ec:	8f 92       	push	r8
    33ee:	9f 92       	push	r9
    33f0:	af 92       	push	r10
    33f2:	bf 92       	push	r11
    33f4:	cf 92       	push	r12
    33f6:	df 92       	push	r13
    33f8:	ef 92       	push	r14
    33fa:	ff 92       	push	r15
    33fc:	0f 93       	push	r16
    33fe:	1f 93       	push	r17
    3400:	cf 93       	push	r28
    3402:	df 93       	push	r29
    3404:	5c 01       	movw	r10, r24
    3406:	fc 01       	movw	r30, r24
    3408:	01 90       	ld	r0, Z+
    340a:	00 20       	and	r0, r0
    340c:	e9 f7       	brne	.-6      	; 0x3408 <_reply2ReturnCode+0x28>
    340e:	31 97       	sbiw	r30, 0x01	; 1
    3410:	6f 01       	movw	r12, r30
    3412:	c8 1a       	sub	r12, r24
    3414:	d9 0a       	sbc	r13, r25
    3416:	5c 2c       	mov	r5, r12
    3418:	0f 2e       	mov	r0, r31
    341a:	f7 e9       	ldi	r31, 0x97	; 151
    341c:	8f 2e       	mov	r8, r31
    341e:	f6 e0       	ldi	r31, 0x06	; 6
    3420:	9f 2e       	mov	r9, r31
    3422:	f0 2d       	mov	r31, r0
    3424:	e1 2c       	mov	r14, r1
    3426:	f1 2c       	mov	r15, r1
    3428:	4c 2c       	mov	r4, r12
    342a:	37 01       	movw	r6, r14
    342c:	f4 01       	movw	r30, r8
    342e:	01 81       	ldd	r16, Z+1	; 0x01
    3430:	12 81       	ldd	r17, Z+2	; 0x02
    3432:	e8 01       	movw	r28, r16
    3434:	09 90       	ld	r0, Y+
    3436:	00 20       	and	r0, r0
    3438:	e9 f7       	brne	.-6      	; 0x3434 <_reply2ReturnCode+0x54>
    343a:	21 97       	sbiw	r28, 0x01	; 1
    343c:	c0 1b       	sub	r28, r16
    343e:	d1 0b       	sbc	r29, r17
    3440:	3c 2e       	mov	r3, r28
    3442:	f9 e0       	ldi	r31, 0x09	; 9
    3444:	cf 16       	cp	r12, r31
    3446:	d1 04       	cpc	r13, r1
    3448:	58 f0       	brcs	.+22     	; 0x3460 <_reply2ReturnCode+0x80>
    344a:	f4 01       	movw	r30, r8
    344c:	20 80       	ld	r2, Z
    344e:	fe e0       	ldi	r31, 0x0E	; 14
    3450:	2f 12       	cpse	r2, r31
    3452:	06 c0       	rjmp	.+12     	; 0x3460 <_reply2ReturnCode+0x80>
    3454:	b8 01       	movw	r22, r16
    3456:	c5 01       	movw	r24, r10
    3458:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <strcasestr>
    345c:	89 2b       	or	r24, r25
    345e:	09 f5       	brne	.+66     	; 0x34a2 <_reply2ReturnCode+0xc2>
    3460:	44 2d       	mov	r20, r4
    3462:	35 14       	cp	r3, r5
    3464:	08 f4       	brcc	.+2      	; 0x3468 <_reply2ReturnCode+0x88>
    3466:	4c 2f       	mov	r20, r28
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	b8 01       	movw	r22, r16
    346c:	c5 01       	movw	r24, r10
    346e:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <strncasecmp>
    3472:	89 2b       	or	r24, r25
    3474:	49 f4       	brne	.+18     	; 0x3488 <_reply2ReturnCode+0xa8>
    3476:	f3 01       	movw	r30, r6
    3478:	ee 0f       	add	r30, r30
    347a:	ff 1f       	adc	r31, r31
    347c:	e6 0d       	add	r30, r6
    347e:	f7 1d       	adc	r31, r7
    3480:	e9 56       	subi	r30, 0x69	; 105
    3482:	f9 4f       	sbci	r31, 0xF9	; 249
    3484:	20 80       	ld	r2, Z
    3486:	0d c0       	rjmp	.+26     	; 0x34a2 <_reply2ReturnCode+0xc2>
    3488:	8f ef       	ldi	r24, 0xFF	; 255
    348a:	e8 1a       	sub	r14, r24
    348c:	f8 0a       	sbc	r15, r24
    348e:	e3 e0       	ldi	r30, 0x03	; 3
    3490:	8e 0e       	add	r8, r30
    3492:	91 1c       	adc	r9, r1
    3494:	f1 e1       	ldi	r31, 0x11	; 17
    3496:	ef 16       	cp	r14, r31
    3498:	f1 04       	cpc	r15, r1
    349a:	39 f6       	brne	.-114    	; 0x342a <_reply2ReturnCode+0x4a>
    349c:	68 94       	set
    349e:	22 24       	eor	r2, r2
    34a0:	24 f8       	bld	r2, 4
    34a2:	82 2d       	mov	r24, r2
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	1f 91       	pop	r17
    34aa:	0f 91       	pop	r16
    34ac:	ff 90       	pop	r15
    34ae:	ef 90       	pop	r14
    34b0:	df 90       	pop	r13
    34b2:	cf 90       	pop	r12
    34b4:	bf 90       	pop	r11
    34b6:	af 90       	pop	r10
    34b8:	9f 90       	pop	r9
    34ba:	8f 90       	pop	r8
    34bc:	7f 90       	pop	r7
    34be:	6f 90       	pop	r6
    34c0:	5f 90       	pop	r5
    34c2:	4f 90       	pop	r4
    34c4:	3f 90       	pop	r3
    34c6:	2f 90       	pop	r2
    34c8:	08 95       	ret

000034ca <_uploadMessageRc>:
    34ca:	30 df       	rcall	.-416    	; 0x332c <_uploadMessage>
    34cc:	89 cf       	rjmp	.-238    	; 0x33e0 <_reply2ReturnCode>
    34ce:	08 95       	ret

000034d0 <lora_driver_flushBuffers>:
    34d0:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    34d4:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    34d8:	0c 94 39 09 	jmp	0x1272	; 0x1272 <xStreamBufferReset>
    34dc:	08 95       	ret

000034de <lora_driver_initialise>:
    34de:	8f 92       	push	r8
    34e0:	9f 92       	push	r9
    34e2:	af 92       	push	r10
    34e4:	cf 92       	push	r12
    34e6:	ef 92       	push	r14
    34e8:	0f 93       	push	r16
    34ea:	1f 93       	push	r17
    34ec:	cf 93       	push	r28
    34ee:	c8 2f       	mov	r28, r24
    34f0:	8b 01       	movw	r16, r22
    34f2:	41 e0       	ldi	r20, 0x01	; 1
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	70 e0       	ldi	r23, 0x00	; 0
    34f8:	88 ec       	ldi	r24, 0xC8	; 200
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	0e 94 07 09 	call	0x120e	; 0x120e <xStreamBufferGenericCreate>
    3500:	90 93 59 12 	sts	0x1259, r25	; 0x801259 <_serialReplyBufferHandle+0x1>
    3504:	80 93 58 12 	sts	0x1258, r24	; 0x801258 <_serialReplyBufferHandle>
    3508:	10 93 57 12 	sts	0x1257, r17	; 0x801257 <_downlinkMessageBuffer+0x1>
    350c:	00 93 56 12 	sts	0x1256, r16	; 0x801256 <_downlinkMessageBuffer>
    3510:	0f 2e       	mov	r0, r31
    3512:	f0 e5       	ldi	r31, 0x50	; 80
    3514:	8f 2e       	mov	r8, r31
    3516:	f9 e1       	ldi	r31, 0x19	; 25
    3518:	9f 2e       	mov	r9, r31
    351a:	f0 2d       	mov	r31, r0
    351c:	68 94       	set
    351e:	aa 24       	eor	r10, r10
    3520:	a6 f8       	bld	r10, 6
    3522:	68 94       	set
    3524:	cc 24       	eor	r12, r12
    3526:	c6 f8       	bld	r12, 6
    3528:	e1 2c       	mov	r14, r1
    352a:	00 e0       	ldi	r16, 0x00	; 0
    352c:	23 e0       	ldi	r18, 0x03	; 3
    352e:	40 e0       	ldi	r20, 0x00	; 0
    3530:	51 ee       	ldi	r21, 0xE1	; 225
    3532:	60 e0       	ldi	r22, 0x00	; 0
    3534:	70 e0       	ldi	r23, 0x00	; 0
    3536:	8c 2f       	mov	r24, r28
    3538:	1e d3       	rcall	.+1596   	; 0x3b76 <serial_create>
    353a:	90 93 5b 12 	sts	0x125B, r25	; 0x80125b <_rn2483_serial+0x1>
    353e:	80 93 5a 12 	sts	0x125A, r24	; 0x80125a <_rn2483_serial>
    3542:	e7 e0       	ldi	r30, 0x07	; 7
    3544:	f1 e0       	ldi	r31, 0x01	; 1
    3546:	80 81       	ld	r24, Z
    3548:	80 61       	ori	r24, 0x10	; 16
    354a:	80 83       	st	Z, r24
    354c:	cf 91       	pop	r28
    354e:	1f 91       	pop	r17
    3550:	0f 91       	pop	r16
    3552:	ef 90       	pop	r14
    3554:	cf 90       	pop	r12
    3556:	af 90       	pop	r10
    3558:	9f 90       	pop	r9
    355a:	8f 90       	pop	r8
    355c:	08 95       	ret

0000355e <lora_driver_resetRn2483>:
    355e:	88 23       	and	r24, r24
    3560:	31 f0       	breq	.+12     	; 0x356e <lora_driver_resetRn2483+0x10>
    3562:	e8 e0       	ldi	r30, 0x08	; 8
    3564:	f1 e0       	ldi	r31, 0x01	; 1
    3566:	80 81       	ld	r24, Z
    3568:	8f 7e       	andi	r24, 0xEF	; 239
    356a:	80 83       	st	Z, r24
    356c:	08 95       	ret
    356e:	e8 e0       	ldi	r30, 0x08	; 8
    3570:	f1 e0       	ldi	r31, 0x01	; 1
    3572:	80 81       	ld	r24, Z
    3574:	80 61       	ori	r24, 0x10	; 16
    3576:	80 83       	st	Z, r24
    3578:	08 95       	ret

0000357a <lora_driver_rn2483FactoryReset>:
    357a:	60 e0       	ldi	r22, 0x00	; 0
    357c:	70 e0       	ldi	r23, 0x00	; 0
    357e:	8d e1       	ldi	r24, 0x1D	; 29
    3580:	94 e0       	ldi	r25, 0x04	; 4
    3582:	d4 de       	rcall	.-600    	; 0x332c <_uploadMessage>
    3584:	e1 ee       	ldi	r30, 0xE1	; 225
    3586:	f2 e1       	ldi	r31, 0x12	; 18
    3588:	01 90       	ld	r0, Z+
    358a:	00 20       	and	r0, r0
    358c:	e9 f7       	brne	.-6      	; 0x3588 <lora_driver_rn2483FactoryReset+0xe>
    358e:	31 97       	sbiw	r30, 0x01	; 1
    3590:	e1 5e       	subi	r30, 0xE1	; 225
    3592:	f2 41       	sbci	r31, 0x12	; 18
    3594:	81 e0       	ldi	r24, 0x01	; 1
    3596:	75 97       	sbiw	r30, 0x15	; 21
    3598:	08 f0       	brcs	.+2      	; 0x359c <lora_driver_rn2483FactoryReset+0x22>
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	08 95       	ret

0000359e <lora_driver_getRn2483Hweui>:
    359e:	cf 93       	push	r28
    35a0:	df 93       	push	r29
    35a2:	ec 01       	movw	r28, r24
    35a4:	60 e0       	ldi	r22, 0x00	; 0
    35a6:	70 e0       	ldi	r23, 0x00	; 0
    35a8:	8e e2       	ldi	r24, 0x2E	; 46
    35aa:	94 e0       	ldi	r25, 0x04	; 4
    35ac:	bf de       	rcall	.-642    	; 0x332c <_uploadMessage>
    35ae:	e1 ee       	ldi	r30, 0xE1	; 225
    35b0:	f2 e1       	ldi	r31, 0x12	; 18
    35b2:	01 90       	ld	r0, Z+
    35b4:	00 20       	and	r0, r0
    35b6:	e9 f7       	brne	.-6      	; 0x35b2 <lora_driver_getRn2483Hweui+0x14>
    35b8:	e2 5f       	subi	r30, 0xF2	; 242
    35ba:	f2 41       	sbci	r31, 0x12	; 18
    35bc:	39 f4       	brne	.+14     	; 0x35cc <lora_driver_getRn2483Hweui+0x2e>
    35be:	61 ee       	ldi	r22, 0xE1	; 225
    35c0:	72 e1       	ldi	r23, 0x12	; 18
    35c2:	ce 01       	movw	r24, r28
    35c4:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <strcpy>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	02 c0       	rjmp	.+4      	; 0x35d0 <lora_driver_getRn2483Hweui+0x32>
    35cc:	18 82       	st	Y, r1
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	df 91       	pop	r29
    35d2:	cf 91       	pop	r28
    35d4:	08 95       	ret

000035d6 <lora_driver_setDeviceIdentifier>:
    35d6:	fc 01       	movw	r30, r24
    35d8:	01 90       	ld	r0, Z+
    35da:	00 20       	and	r0, r0
    35dc:	e9 f7       	brne	.-6      	; 0x35d8 <lora_driver_setDeviceIdentifier+0x2>
    35de:	9f 01       	movw	r18, r30
    35e0:	21 51       	subi	r18, 0x11	; 17
    35e2:	31 09       	sbc	r19, r1
    35e4:	28 17       	cp	r18, r24
    35e6:	39 07       	cpc	r19, r25
    35e8:	29 f4       	brne	.+10     	; 0x35f4 <lora_driver_setDeviceIdentifier+0x1e>
    35ea:	bc 01       	movw	r22, r24
    35ec:	8c e5       	ldi	r24, 0x5C	; 92
    35ee:	94 e0       	ldi	r25, 0x04	; 4
    35f0:	6c cf       	rjmp	.-296    	; 0x34ca <_uploadMessageRc>
    35f2:	08 95       	ret
    35f4:	89 e0       	ldi	r24, 0x09	; 9
    35f6:	08 95       	ret

000035f8 <lora_driver_setApplicationIdentifier>:
    35f8:	fc 01       	movw	r30, r24
    35fa:	01 90       	ld	r0, Z+
    35fc:	00 20       	and	r0, r0
    35fe:	e9 f7       	brne	.-6      	; 0x35fa <lora_driver_setApplicationIdentifier+0x2>
    3600:	9f 01       	movw	r18, r30
    3602:	21 51       	subi	r18, 0x11	; 17
    3604:	31 09       	sbc	r19, r1
    3606:	28 17       	cp	r18, r24
    3608:	39 07       	cpc	r19, r25
    360a:	29 f4       	brne	.+10     	; 0x3616 <lora_driver_setApplicationIdentifier+0x1e>
    360c:	bc 01       	movw	r22, r24
    360e:	8b e6       	ldi	r24, 0x6B	; 107
    3610:	94 e0       	ldi	r25, 0x04	; 4
    3612:	5b cf       	rjmp	.-330    	; 0x34ca <_uploadMessageRc>
    3614:	08 95       	ret
    3616:	89 e0       	ldi	r24, 0x09	; 9
    3618:	08 95       	ret

0000361a <lora_driver_setApplicationKey>:
    361a:	fc 01       	movw	r30, r24
    361c:	01 90       	ld	r0, Z+
    361e:	00 20       	and	r0, r0
    3620:	e9 f7       	brne	.-6      	; 0x361c <lora_driver_setApplicationKey+0x2>
    3622:	9f 01       	movw	r18, r30
    3624:	21 52       	subi	r18, 0x21	; 33
    3626:	31 09       	sbc	r19, r1
    3628:	28 17       	cp	r18, r24
    362a:	39 07       	cpc	r19, r25
    362c:	29 f4       	brne	.+10     	; 0x3638 <lora_driver_setApplicationKey+0x1e>
    362e:	bc 01       	movw	r22, r24
    3630:	8a e7       	ldi	r24, 0x7A	; 122
    3632:	94 e0       	ldi	r25, 0x04	; 4
    3634:	4a cf       	rjmp	.-364    	; 0x34ca <_uploadMessageRc>
    3636:	08 95       	ret
    3638:	89 e0       	ldi	r24, 0x09	; 9
    363a:	08 95       	ret

0000363c <lora_driver_saveMac>:
    363c:	60 e0       	ldi	r22, 0x00	; 0
    363e:	70 e0       	ldi	r23, 0x00	; 0
    3640:	89 eb       	ldi	r24, 0xB9	; 185
    3642:	94 e0       	ldi	r25, 0x04	; 4
    3644:	42 cf       	rjmp	.-380    	; 0x34ca <_uploadMessageRc>
    3646:	08 95       	ret

00003648 <lora_driver_join>:
    3648:	0f 93       	push	r16
    364a:	1f 93       	push	r17
    364c:	e8 2f       	mov	r30, r24
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	ee 0f       	add	r30, r30
    3652:	ff 1f       	adc	r31, r31
    3654:	ed 56       	subi	r30, 0x6D	; 109
    3656:	f9 4f       	sbci	r31, 0xF9	; 249
    3658:	60 81       	ld	r22, Z
    365a:	71 81       	ldd	r23, Z+1	; 0x01
    365c:	82 ec       	ldi	r24, 0xC2	; 194
    365e:	94 e0       	ldi	r25, 0x04	; 4
    3660:	34 df       	rcall	.-408    	; 0x34ca <_uploadMessageRc>
    3662:	81 11       	cpse	r24, r1
    3664:	14 c0       	rjmp	.+40     	; 0x368e <lora_driver_join+0x46>
    3666:	08 e2       	ldi	r16, 0x28	; 40
    3668:	15 e0       	ldi	r17, 0x05	; 5
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	4d e2       	ldi	r20, 0x2D	; 45
    3670:	50 e0       	ldi	r21, 0x00	; 0
    3672:	61 ee       	ldi	r22, 0xE1	; 225
    3674:	72 e1       	ldi	r23, 0x12	; 18
    3676:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    367a:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    367e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <xStreamBufferReceive>
    3682:	88 23       	and	r24, r24
    3684:	21 f0       	breq	.+8      	; 0x368e <lora_driver_join+0x46>
    3686:	81 ee       	ldi	r24, 0xE1	; 225
    3688:	92 e1       	ldi	r25, 0x12	; 18
    368a:	aa de       	rcall	.-684    	; 0x33e0 <_reply2ReturnCode>
    368c:	03 c0       	rjmp	.+6      	; 0x3694 <lora_driver_join+0x4c>
    368e:	81 ee       	ldi	r24, 0xE1	; 225
    3690:	92 e1       	ldi	r25, 0x12	; 18
    3692:	a6 de       	rcall	.-692    	; 0x33e0 <_reply2ReturnCode>
    3694:	1f 91       	pop	r17
    3696:	0f 91       	pop	r16
    3698:	08 95       	ret

0000369a <lora_driver_sendUploadMessage>:
    369a:	0f 93       	push	r16
    369c:	1f 93       	push	r17
    369e:	cf 93       	push	r28
    36a0:	df 93       	push	r29
    36a2:	1f 92       	push	r1
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62
    36a8:	db 01       	movw	r26, r22
    36aa:	11 96       	adiw	r26, 0x01	; 1
    36ac:	9c 91       	ld	r25, X
    36ae:	11 97       	sbiw	r26, 0x01	; 1
    36b0:	95 31       	cpi	r25, 0x15	; 21
    36b2:	08 f0       	brcs	.+2      	; 0x36b6 <lora_driver_sendUploadMessage+0x1c>
    36b4:	b4 c0       	rjmp	.+360    	; 0x381e <lora_driver_sendUploadMessage+0x184>
    36b6:	99 23       	and	r25, r25
    36b8:	81 f1       	breq	.+96     	; 0x371a <lora_driver_sendUploadMessage+0x80>
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	70 e0       	ldi	r23, 0x00	; 0
    36be:	27 2f       	mov	r18, r23
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	46 2f       	mov	r20, r22
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	fd 01       	movw	r30, r26
    36c8:	e4 0f       	add	r30, r20
    36ca:	f5 1f       	adc	r31, r21
    36cc:	92 81       	ldd	r25, Z+2	; 0x02
    36ce:	92 95       	swap	r25
    36d0:	9f 70       	andi	r25, 0x0F	; 15
    36d2:	9a 30       	cpi	r25, 0x0A	; 10
    36d4:	10 f0       	brcs	.+4      	; 0x36da <lora_driver_sendUploadMessage+0x40>
    36d6:	99 5c       	subi	r25, 0xC9	; 201
    36d8:	01 c0       	rjmp	.+2      	; 0x36dc <lora_driver_sendUploadMessage+0x42>
    36da:	90 5d       	subi	r25, 0xD0	; 208
    36dc:	f9 01       	movw	r30, r18
    36de:	ee 58       	subi	r30, 0x8E	; 142
    36e0:	fd 4e       	sbci	r31, 0xED	; 237
    36e2:	90 83       	st	Z, r25
    36e4:	2f 5f       	subi	r18, 0xFF	; 255
    36e6:	3f 4f       	sbci	r19, 0xFF	; 255
    36e8:	fd 01       	movw	r30, r26
    36ea:	e4 0f       	add	r30, r20
    36ec:	f5 1f       	adc	r31, r21
    36ee:	92 81       	ldd	r25, Z+2	; 0x02
    36f0:	9f 70       	andi	r25, 0x0F	; 15
    36f2:	49 2f       	mov	r20, r25
    36f4:	50 e0       	ldi	r21, 0x00	; 0
    36f6:	4a 30       	cpi	r20, 0x0A	; 10
    36f8:	51 05       	cpc	r21, r1
    36fa:	14 f0       	brlt	.+4      	; 0x3700 <lora_driver_sendUploadMessage+0x66>
    36fc:	99 5c       	subi	r25, 0xC9	; 201
    36fe:	01 c0       	rjmp	.+2      	; 0x3702 <lora_driver_sendUploadMessage+0x68>
    3700:	90 5d       	subi	r25, 0xD0	; 208
    3702:	f9 01       	movw	r30, r18
    3704:	ee 58       	subi	r30, 0x8E	; 142
    3706:	fd 4e       	sbci	r31, 0xED	; 237
    3708:	90 83       	st	Z, r25
    370a:	7e 5f       	subi	r23, 0xFE	; 254
    370c:	6f 5f       	subi	r22, 0xFF	; 255
    370e:	11 96       	adiw	r26, 0x01	; 1
    3710:	9c 91       	ld	r25, X
    3712:	11 97       	sbiw	r26, 0x01	; 1
    3714:	69 17       	cp	r22, r25
    3716:	98 f2       	brcs	.-90     	; 0x36be <lora_driver_sendUploadMessage+0x24>
    3718:	01 c0       	rjmp	.+2      	; 0x371c <lora_driver_sendUploadMessage+0x82>
    371a:	70 e0       	ldi	r23, 0x00	; 0
    371c:	e7 2f       	mov	r30, r23
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	ee 58       	subi	r30, 0x8E	; 142
    3722:	fd 4e       	sbci	r31, 0xED	; 237
    3724:	10 82       	st	Z, r1
    3726:	4c 91       	ld	r20, X
    3728:	81 11       	cpse	r24, r1
    372a:	03 c0       	rjmp	.+6      	; 0x3732 <lora_driver_sendUploadMessage+0x98>
    372c:	8b ec       	ldi	r24, 0xCB	; 203
    372e:	94 e0       	ldi	r25, 0x04	; 4
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <lora_driver_sendUploadMessage+0x9c>
    3732:	8d ec       	ldi	r24, 0xCD	; 205
    3734:	94 e0       	ldi	r25, 0x04	; 4
    3736:	22 e7       	ldi	r18, 0x72	; 114
    3738:	32 e1       	ldi	r19, 0x12	; 18
    373a:	3f 93       	push	r19
    373c:	2f 93       	push	r18
    373e:	1f 92       	push	r1
    3740:	4f 93       	push	r20
    3742:	9f 93       	push	r25
    3744:	8f 93       	push	r24
    3746:	81 ed       	ldi	r24, 0xD1	; 209
    3748:	94 e0       	ldi	r25, 0x04	; 4
    374a:	9f 93       	push	r25
    374c:	8f 93       	push	r24
    374e:	84 eb       	ldi	r24, 0xB4	; 180
    3750:	92 e1       	ldi	r25, 0x12	; 18
    3752:	9f 93       	push	r25
    3754:	8f 93       	push	r24
    3756:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sprintf>
    375a:	60 e0       	ldi	r22, 0x00	; 0
    375c:	70 e0       	ldi	r23, 0x00	; 0
    375e:	84 eb       	ldi	r24, 0xB4	; 180
    3760:	92 e1       	ldi	r25, 0x12	; 18
    3762:	b3 de       	rcall	.-666    	; 0x34ca <_uploadMessageRc>
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	81 11       	cpse	r24, r1
    3770:	59 c0       	rjmp	.+178    	; 0x3824 <lora_driver_sendUploadMessage+0x18a>
    3772:	08 e2       	ldi	r16, 0x28	; 40
    3774:	15 e0       	ldi	r17, 0x05	; 5
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	4d e2       	ldi	r20, 0x2D	; 45
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	61 ee       	ldi	r22, 0xE1	; 225
    3780:	72 e1       	ldi	r23, 0x12	; 18
    3782:	80 91 58 12 	lds	r24, 0x1258	; 0x801258 <_serialReplyBufferHandle>
    3786:	90 91 59 12 	lds	r25, 0x1259	; 0x801259 <_serialReplyBufferHandle+0x1>
    378a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <xStreamBufferReceive>
    378e:	88 23       	and	r24, r24
    3790:	09 f4       	brne	.+2      	; 0x3794 <lora_driver_sendUploadMessage+0xfa>
    3792:	47 c0       	rjmp	.+142    	; 0x3822 <lora_driver_sendUploadMessage+0x188>
    3794:	81 ee       	ldi	r24, 0xE1	; 225
    3796:	92 e1       	ldi	r25, 0x12	; 18
    3798:	23 de       	rcall	.-954    	; 0x33e0 <_reply2ReturnCode>
    379a:	8e 30       	cpi	r24, 0x0E	; 14
    379c:	09 f0       	breq	.+2      	; 0x37a0 <lora_driver_sendUploadMessage+0x106>
    379e:	42 c0       	rjmp	.+132    	; 0x3824 <lora_driver_sendUploadMessage+0x18a>
    37a0:	87 e0       	ldi	r24, 0x07	; 7
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	80 91 56 12 	lds	r24, 0x1256	; 0x801256 <_downlinkMessageBuffer>
    37a8:	90 91 57 12 	lds	r25, 0x1257	; 0x801257 <_downlinkMessageBuffer+0x1>
    37ac:	89 2b       	or	r24, r25
    37ae:	a9 f1       	breq	.+106    	; 0x381a <lora_driver_sendUploadMessage+0x180>
    37b0:	be 01       	movw	r22, r28
    37b2:	6f 5f       	subi	r22, 0xFF	; 255
    37b4:	7f 4f       	sbci	r23, 0xFF	; 255
    37b6:	81 ee       	ldi	r24, 0xE1	; 225
    37b8:	92 e1       	ldi	r25, 0x12	; 18
    37ba:	68 d1       	rcall	.+720    	; 0x3a8c <decode_port_no>
    37bc:	80 93 5c 12 	sts	0x125C, r24	; 0x80125c <_downlinkPayload>
    37c0:	e9 81       	ldd	r30, Y+1	; 0x01
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	ef 51       	subi	r30, 0x1F	; 31
    37c6:	fd 4e       	sbci	r31, 0xED	; 237
    37c8:	df 01       	movw	r26, r30
    37ca:	0d 90       	ld	r0, X+
    37cc:	00 20       	and	r0, r0
    37ce:	e9 f7       	brne	.-6      	; 0x37ca <lora_driver_sendUploadMessage+0x130>
    37d0:	11 97       	sbiw	r26, 0x01	; 1
    37d2:	ae 1b       	sub	r26, r30
    37d4:	bf 0b       	sbc	r27, r31
    37d6:	aa 23       	and	r26, r26
    37d8:	91 f0       	breq	.+36     	; 0x37fe <lora_driver_sendUploadMessage+0x164>
    37da:	bb 27       	eor	r27, r27
    37dc:	cd 01       	movw	r24, r26
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	9c 01       	movw	r18, r24
    37e2:	12 f4       	brpl	.+4      	; 0x37e8 <lora_driver_sendUploadMessage+0x14e>
    37e4:	2f 5f       	subi	r18, 0xFF	; 255
    37e6:	3f 4f       	sbci	r19, 0xFF	; 255
    37e8:	35 95       	asr	r19
    37ea:	27 95       	ror	r18
    37ec:	20 93 5d 12 	sts	0x125D, r18	; 0x80125d <_downlinkPayload+0x1>
    37f0:	af 01       	movw	r20, r30
    37f2:	4f 5f       	subi	r20, 0xFF	; 255
    37f4:	5f 4f       	sbci	r21, 0xFF	; 255
    37f6:	64 e1       	ldi	r22, 0x14	; 20
    37f8:	8e e5       	ldi	r24, 0x5E	; 94
    37fa:	92 e1       	ldi	r25, 0x12	; 18
    37fc:	73 d1       	rcall	.+742    	; 0x3ae4 <decode_hexadecimal_string_bytes>
    37fe:	01 e0       	ldi	r16, 0x01	; 1
    3800:	10 e0       	ldi	r17, 0x00	; 0
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	46 e1       	ldi	r20, 0x16	; 22
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	6c e5       	ldi	r22, 0x5C	; 92
    380c:	72 e1       	ldi	r23, 0x12	; 18
    380e:	80 91 56 12 	lds	r24, 0x1256	; 0x801256 <_downlinkMessageBuffer>
    3812:	90 91 57 12 	lds	r25, 0x1257	; 0x801257 <_downlinkMessageBuffer+0x1>
    3816:	0e 94 69 09 	call	0x12d2	; 0x12d2 <xStreamBufferSend>
    381a:	8e e0       	ldi	r24, 0x0E	; 14
    381c:	03 c0       	rjmp	.+6      	; 0x3824 <lora_driver_sendUploadMessage+0x18a>
    381e:	84 e1       	ldi	r24, 0x14	; 20
    3820:	01 c0       	rjmp	.+2      	; 0x3824 <lora_driver_sendUploadMessage+0x18a>
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	0f 90       	pop	r0
    3826:	df 91       	pop	r29
    3828:	cf 91       	pop	r28
    382a:	1f 91       	pop	r17
    382c:	0f 91       	pop	r16
    382e:	08 95       	ret

00003830 <lora_driver_setAdaptiveDataRate>:
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	19 f0       	breq	.+6      	; 0x383a <lora_driver_setAdaptiveDataRate+0xa>
    3834:	61 ee       	ldi	r22, 0xE1	; 225
    3836:	74 e0       	ldi	r23, 0x04	; 4
    3838:	02 c0       	rjmp	.+4      	; 0x383e <lora_driver_setAdaptiveDataRate+0xe>
    383a:	6a eb       	ldi	r22, 0xBA	; 186
    383c:	75 e0       	ldi	r23, 0x05	; 5
    383e:	85 ee       	ldi	r24, 0xE5	; 229
    3840:	94 e0       	ldi	r25, 0x04	; 4
    3842:	43 ce       	rjmp	.-890    	; 0x34ca <_uploadMessageRc>
    3844:	08 95       	ret

00003846 <lora_driver_setReceiveDelay>:
    3846:	9f 93       	push	r25
    3848:	8f 93       	push	r24
    384a:	86 e1       	ldi	r24, 0x16	; 22
    384c:	95 e0       	ldi	r25, 0x05	; 5
    384e:	9f 93       	push	r25
    3850:	8f 93       	push	r24
    3852:	84 eb       	ldi	r24, 0xB4	; 180
    3854:	92 e1       	ldi	r25, 0x12	; 18
    3856:	9f 93       	push	r25
    3858:	8f 93       	push	r24
    385a:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sprintf>
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	70 e0       	ldi	r23, 0x00	; 0
    3862:	84 eb       	ldi	r24, 0xB4	; 180
    3864:	92 e1       	ldi	r25, 0x12	; 18
    3866:	31 de       	rcall	.-926    	; 0x34ca <_uploadMessageRc>
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	08 95       	ret

00003876 <lora_driver_configureToEu868>:
    3876:	2f 92       	push	r2
    3878:	3f 92       	push	r3
    387a:	4f 92       	push	r4
    387c:	5f 92       	push	r5
    387e:	6f 92       	push	r6
    3880:	7f 92       	push	r7
    3882:	8f 92       	push	r8
    3884:	9f 92       	push	r9
    3886:	af 92       	push	r10
    3888:	bf 92       	push	r11
    388a:	cf 92       	push	r12
    388c:	df 92       	push	r13
    388e:	ef 92       	push	r14
    3890:	ff 92       	push	r15
    3892:	0f 93       	push	r16
    3894:	1f 93       	push	r17
    3896:	cf 93       	push	r28
    3898:	df 93       	push	r29
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	a0 97       	sbiw	r28, 0x20	; 32
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	63 e4       	ldi	r22, 0x43	; 67
    38ac:	75 e0       	ldi	r23, 0x05	; 5
    38ae:	8f e4       	ldi	r24, 0x4F	; 79
    38b0:	95 e0       	ldi	r25, 0x05	; 5
    38b2:	3c dd       	rcall	.-1416   	; 0x332c <_uploadMessage>
    38b4:	95 dd       	rcall	.-1238   	; 0x33e0 <_reply2ReturnCode>
    38b6:	81 11       	cpse	r24, r1
    38b8:	a3 c0       	rjmp	.+326    	; 0x3a00 <lora_driver_configureToEu868+0x18a>
    38ba:	80 e2       	ldi	r24, 0x20	; 32
    38bc:	ed e1       	ldi	r30, 0x1D	; 29
    38be:	f2 e0       	ldi	r31, 0x02	; 2
    38c0:	de 01       	movw	r26, r28
    38c2:	11 96       	adiw	r26, 0x01	; 1
    38c4:	01 90       	ld	r0, Z+
    38c6:	0d 92       	st	X+, r0
    38c8:	8a 95       	dec	r24
    38ca:	e1 f7       	brne	.-8      	; 0x38c4 <lora_driver_configureToEu868+0x4e>
    38cc:	9e 01       	movw	r18, r28
    38ce:	2f 5f       	subi	r18, 0xFF	; 255
    38d0:	3f 4f       	sbci	r19, 0xFF	; 255
    38d2:	69 01       	movw	r12, r18
    38d4:	e1 2c       	mov	r14, r1
    38d6:	f1 2c       	mov	r15, r1
    38d8:	0f 2e       	mov	r0, r31
    38da:	fb e5       	ldi	r31, 0x5B	; 91
    38dc:	af 2e       	mov	r10, r31
    38de:	f5 e0       	ldi	r31, 0x05	; 5
    38e0:	bf 2e       	mov	r11, r31
    38e2:	f0 2d       	mov	r31, r0
    38e4:	04 eb       	ldi	r16, 0xB4	; 180
    38e6:	12 e1       	ldi	r17, 0x12	; 18
    38e8:	0f 2e       	mov	r0, r31
    38ea:	f4 e7       	ldi	r31, 0x74	; 116
    38ec:	4f 2e       	mov	r4, r31
    38ee:	f5 e0       	ldi	r31, 0x05	; 5
    38f0:	5f 2e       	mov	r5, r31
    38f2:	f0 2d       	mov	r31, r0
    38f4:	0f 2e       	mov	r0, r31
    38f6:	fb e8       	ldi	r31, 0x8B	; 139
    38f8:	8f 2e       	mov	r8, r31
    38fa:	f5 e0       	ldi	r31, 0x05	; 5
    38fc:	9f 2e       	mov	r9, r31
    38fe:	f0 2d       	mov	r31, r0
    3900:	0f 2e       	mov	r0, r31
    3902:	f5 ea       	ldi	r31, 0xA5	; 165
    3904:	6f 2e       	mov	r6, r31
    3906:	f5 e0       	ldi	r31, 0x05	; 5
    3908:	7f 2e       	mov	r7, r31
    390a:	f0 2d       	mov	r31, r0
    390c:	3e 2c       	mov	r3, r14
    390e:	2f 2c       	mov	r2, r15
    3910:	ff 92       	push	r15
    3912:	ef 92       	push	r14
    3914:	bf 92       	push	r11
    3916:	af 92       	push	r10
    3918:	1f 93       	push	r17
    391a:	0f 93       	push	r16
    391c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sprintf>
    3920:	60 e0       	ldi	r22, 0x00	; 0
    3922:	70 e0       	ldi	r23, 0x00	; 0
    3924:	c8 01       	movw	r24, r16
    3926:	02 dd       	rcall	.-1532   	; 0x332c <_uploadMessage>
    3928:	5b dd       	rcall	.-1354   	; 0x33e0 <_reply2ReturnCode>
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	81 11       	cpse	r24, r1
    3938:	63 c0       	rjmp	.+198    	; 0x3a00 <lora_driver_configureToEu868+0x18a>
    393a:	32 e0       	ldi	r19, 0x02	; 2
    393c:	3e 15       	cp	r19, r14
    393e:	e8 f4       	brcc	.+58     	; 0x397a <lora_driver_configureToEu868+0x104>
    3940:	f6 01       	movw	r30, r12
    3942:	83 81       	ldd	r24, Z+3	; 0x03
    3944:	8f 93       	push	r24
    3946:	82 81       	ldd	r24, Z+2	; 0x02
    3948:	8f 93       	push	r24
    394a:	81 81       	ldd	r24, Z+1	; 0x01
    394c:	8f 93       	push	r24
    394e:	80 81       	ld	r24, Z
    3950:	8f 93       	push	r24
    3952:	ff 92       	push	r15
    3954:	ef 92       	push	r14
    3956:	5f 92       	push	r5
    3958:	4f 92       	push	r4
    395a:	1f 93       	push	r17
    395c:	0f 93       	push	r16
    395e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sprintf>
    3962:	60 e0       	ldi	r22, 0x00	; 0
    3964:	70 e0       	ldi	r23, 0x00	; 0
    3966:	c8 01       	movw	r24, r16
    3968:	e1 dc       	rcall	.-1598   	; 0x332c <_uploadMessage>
    396a:	3a dd       	rcall	.-1420   	; 0x33e0 <_reply2ReturnCode>
    396c:	0f b6       	in	r0, 0x3f	; 63
    396e:	f8 94       	cli
    3970:	de bf       	out	0x3e, r29	; 62
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	cd bf       	out	0x3d, r28	; 61
    3976:	81 11       	cpse	r24, r1
    3978:	43 c0       	rjmp	.+134    	; 0x3a00 <lora_driver_configureToEu868+0x18a>
    397a:	2f 92       	push	r2
    397c:	3f 92       	push	r3
    397e:	9f 92       	push	r9
    3980:	8f 92       	push	r8
    3982:	1f 93       	push	r17
    3984:	0f 93       	push	r16
    3986:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sprintf>
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	70 e0       	ldi	r23, 0x00	; 0
    398e:	c8 01       	movw	r24, r16
    3990:	cd dc       	rcall	.-1638   	; 0x332c <_uploadMessage>
    3992:	26 dd       	rcall	.-1460   	; 0x33e0 <_reply2ReturnCode>
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	81 11       	cpse	r24, r1
    39a2:	2e c0       	rjmp	.+92     	; 0x3a00 <lora_driver_configureToEu868+0x18a>
    39a4:	2f 92       	push	r2
    39a6:	3f 92       	push	r3
    39a8:	7f 92       	push	r7
    39aa:	6f 92       	push	r6
    39ac:	1f 93       	push	r17
    39ae:	0f 93       	push	r16
    39b0:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sprintf>
    39b4:	60 e0       	ldi	r22, 0x00	; 0
    39b6:	70 e0       	ldi	r23, 0x00	; 0
    39b8:	c8 01       	movw	r24, r16
    39ba:	b8 dc       	rcall	.-1680   	; 0x332c <_uploadMessage>
    39bc:	11 dd       	rcall	.-1502   	; 0x33e0 <_reply2ReturnCode>
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	81 11       	cpse	r24, r1
    39cc:	19 c0       	rjmp	.+50     	; 0x3a00 <lora_driver_configureToEu868+0x18a>
    39ce:	3f ef       	ldi	r19, 0xFF	; 255
    39d0:	e3 1a       	sub	r14, r19
    39d2:	f3 0a       	sbc	r15, r19
    39d4:	84 e0       	ldi	r24, 0x04	; 4
    39d6:	c8 0e       	add	r12, r24
    39d8:	d1 1c       	adc	r13, r1
    39da:	98 e0       	ldi	r25, 0x08	; 8
    39dc:	e9 16       	cp	r14, r25
    39de:	f1 04       	cpc	r15, r1
    39e0:	09 f0       	breq	.+2      	; 0x39e4 <lora_driver_configureToEu868+0x16e>
    39e2:	94 cf       	rjmp	.-216    	; 0x390c <lora_driver_configureToEu868+0x96>
    39e4:	60 e0       	ldi	r22, 0x00	; 0
    39e6:	70 e0       	ldi	r23, 0x00	; 0
    39e8:	8d eb       	ldi	r24, 0xBD	; 189
    39ea:	95 e0       	ldi	r25, 0x05	; 5
    39ec:	9f dc       	rcall	.-1730   	; 0x332c <_uploadMessage>
    39ee:	f8 dc       	rcall	.-1552   	; 0x33e0 <_reply2ReturnCode>
    39f0:	81 11       	cpse	r24, r1
    39f2:	06 c0       	rjmp	.+12     	; 0x3a00 <lora_driver_configureToEu868+0x18a>
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	8e ec       	ldi	r24, 0xCE	; 206
    39fa:	95 e0       	ldi	r25, 0x05	; 5
    39fc:	97 dc       	rcall	.-1746   	; 0x332c <_uploadMessage>
    39fe:	f0 dc       	rcall	.-1568   	; 0x33e0 <_reply2ReturnCode>
    3a00:	a0 96       	adiw	r28, 0x20	; 32
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	de bf       	out	0x3e, r29	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	cd bf       	out	0x3d, r28	; 61
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	1f 91       	pop	r17
    3a12:	0f 91       	pop	r16
    3a14:	ff 90       	pop	r15
    3a16:	ef 90       	pop	r14
    3a18:	df 90       	pop	r13
    3a1a:	cf 90       	pop	r12
    3a1c:	bf 90       	pop	r11
    3a1e:	af 90       	pop	r10
    3a20:	9f 90       	pop	r9
    3a22:	8f 90       	pop	r8
    3a24:	7f 90       	pop	r7
    3a26:	6f 90       	pop	r6
    3a28:	5f 90       	pop	r5
    3a2a:	4f 90       	pop	r4
    3a2c:	3f 90       	pop	r3
    3a2e:	2f 90       	pop	r2
    3a30:	08 95       	ret

00003a32 <lora_driver_setOtaaIdentity>:
    3a32:	ef 92       	push	r14
    3a34:	ff 92       	push	r15
    3a36:	0f 93       	push	r16
    3a38:	1f 93       	push	r17
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
    3a3e:	ec 01       	movw	r28, r24
    3a40:	8b 01       	movw	r16, r22
    3a42:	7a 01       	movw	r14, r20
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	f4 de       	rcall	.-536    	; 0x3830 <lora_driver_setAdaptiveDataRate>
    3a48:	81 11       	cpse	r24, r1
    3a4a:	0d c0       	rjmp	.+26     	; 0x3a66 <lora_driver_setOtaaIdentity+0x34>
    3a4c:	ce 01       	movw	r24, r28
    3a4e:	d4 dd       	rcall	.-1112   	; 0x35f8 <lora_driver_setApplicationIdentifier>
    3a50:	81 11       	cpse	r24, r1
    3a52:	09 c0       	rjmp	.+18     	; 0x3a66 <lora_driver_setOtaaIdentity+0x34>
    3a54:	c8 01       	movw	r24, r16
    3a56:	e1 dd       	rcall	.-1086   	; 0x361a <lora_driver_setApplicationKey>
    3a58:	81 11       	cpse	r24, r1
    3a5a:	05 c0       	rjmp	.+10     	; 0x3a66 <lora_driver_setOtaaIdentity+0x34>
    3a5c:	c7 01       	movw	r24, r14
    3a5e:	bb dd       	rcall	.-1162   	; 0x35d6 <lora_driver_setDeviceIdentifier>
    3a60:	81 11       	cpse	r24, r1
    3a62:	01 c0       	rjmp	.+2      	; 0x3a66 <lora_driver_setOtaaIdentity+0x34>
    3a64:	eb dd       	rcall	.-1066   	; 0x363c <lora_driver_saveMac>
    3a66:	df 91       	pop	r29
    3a68:	cf 91       	pop	r28
    3a6a:	1f 91       	pop	r17
    3a6c:	0f 91       	pop	r16
    3a6e:	ff 90       	pop	r15
    3a70:	ef 90       	pop	r14
    3a72:	08 95       	ret

00003a74 <lora_driver_mapReturnCodeToText>:
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	fc 01       	movw	r30, r24
    3a78:	ee 0f       	add	r30, r30
    3a7a:	ff 1f       	adc	r31, r31
    3a7c:	8e 0f       	add	r24, r30
    3a7e:	9f 1f       	adc	r25, r31
    3a80:	fc 01       	movw	r30, r24
    3a82:	e9 56       	subi	r30, 0x69	; 105
    3a84:	f9 4f       	sbci	r31, 0xF9	; 249
    3a86:	81 81       	ldd	r24, Z+1	; 0x01
    3a88:	92 81       	ldd	r25, Z+2	; 0x02
    3a8a:	08 95       	ret

00003a8c <decode_port_no>:
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	29 f1       	breq	.+74     	; 0x3adc <decode_port_no+0x50>
    3a92:	fb 01       	movw	r30, r22
    3a94:	20 81       	ld	r18, Z
    3a96:	fc 01       	movw	r30, r24
    3a98:	01 90       	ld	r0, Z+
    3a9a:	00 20       	and	r0, r0
    3a9c:	e9 f7       	brne	.-6      	; 0x3a98 <decode_port_no+0xc>
    3a9e:	31 97       	sbiw	r30, 0x01	; 1
    3aa0:	e8 1b       	sub	r30, r24
    3aa2:	f9 0b       	sbc	r31, r25
    3aa4:	82 2f       	mov	r24, r18
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	e8 17       	cp	r30, r24
    3aaa:	f9 07       	cpc	r31, r25
    3aac:	c8 f0       	brcs	.+50     	; 0x3ae0 <decode_port_no+0x54>
    3aae:	80 e0       	ldi	r24, 0x00	; 0
    3ab0:	08 c0       	rjmp	.+16     	; 0x3ac2 <decode_port_no+0x36>
    3ab2:	88 0f       	add	r24, r24
    3ab4:	38 2f       	mov	r19, r24
    3ab6:	33 0f       	add	r19, r19
    3ab8:	33 0f       	add	r19, r19
    3aba:	83 0f       	add	r24, r19
    3abc:	80 53       	subi	r24, 0x30	; 48
    3abe:	89 0f       	add	r24, r25
    3ac0:	2f 5f       	subi	r18, 0xFF	; 255
    3ac2:	fd 01       	movw	r30, r26
    3ac4:	e2 0f       	add	r30, r18
    3ac6:	f1 1d       	adc	r31, r1
    3ac8:	90 81       	ld	r25, Z
    3aca:	30 ed       	ldi	r19, 0xD0	; 208
    3acc:	39 0f       	add	r19, r25
    3ace:	3a 30       	cpi	r19, 0x0A	; 10
    3ad0:	10 f4       	brcc	.+4      	; 0x3ad6 <decode_port_no+0x4a>
    3ad2:	91 11       	cpse	r25, r1
    3ad4:	ee cf       	rjmp	.-36     	; 0x3ab2 <decode_port_no+0x26>
    3ad6:	fb 01       	movw	r30, r22
    3ad8:	20 83       	st	Z, r18
    3ada:	08 95       	ret
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	08 95       	ret
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	08 95       	ret

00003ae4 <decode_hexadecimal_string_bytes>:
    3ae4:	0f 93       	push	r16
    3ae6:	1f 93       	push	r17
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	dc 01       	movw	r26, r24
    3aee:	ea 01       	movw	r28, r20
    3af0:	20 97       	sbiw	r28, 0x00	; 0
    3af2:	e1 f1       	breq	.+120    	; 0x3b6c <decode_hexadecimal_string_bytes+0x88>
    3af4:	fa 01       	movw	r30, r20
    3af6:	01 90       	ld	r0, Z+
    3af8:	00 20       	and	r0, r0
    3afa:	e9 f7       	brne	.-6      	; 0x3af6 <decode_hexadecimal_string_bytes+0x12>
    3afc:	31 97       	sbiw	r30, 0x01	; 1
    3afe:	e4 1b       	sub	r30, r20
    3b00:	f5 0b       	sbc	r31, r21
    3b02:	32 97       	sbiw	r30, 0x02	; 2
    3b04:	10 f5       	brcc	.+68     	; 0x3b4a <decode_hexadecimal_string_bytes+0x66>
    3b06:	32 c0       	rjmp	.+100    	; 0x3b6c <decode_hexadecimal_string_bytes+0x88>
    3b08:	8d 01       	movw	r16, r26
    3b0a:	04 0f       	add	r16, r20
    3b0c:	15 1f       	adc	r17, r21
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	ae 01       	movw	r20, r28
    3b12:	42 0f       	add	r20, r18
    3b14:	53 1f       	adc	r21, r19
    3b16:	fa 01       	movw	r30, r20
    3b18:	90 81       	ld	r25, Z
    3b1a:	91 34       	cpi	r25, 0x41	; 65
    3b1c:	28 f0       	brcs	.+10     	; 0x3b28 <decode_hexadecimal_string_bytes+0x44>
    3b1e:	97 53       	subi	r25, 0x37	; 55
    3b20:	59 2f       	mov	r21, r25
    3b22:	52 95       	swap	r21
    3b24:	50 7f       	andi	r21, 0xF0	; 240
    3b26:	03 c0       	rjmp	.+6      	; 0x3b2e <decode_hexadecimal_string_bytes+0x4a>
    3b28:	59 2f       	mov	r21, r25
    3b2a:	52 95       	swap	r21
    3b2c:	50 7f       	andi	r21, 0xF0	; 240
    3b2e:	2c 0f       	add	r18, r28
    3b30:	3d 1f       	adc	r19, r29
    3b32:	f9 01       	movw	r30, r18
    3b34:	91 81       	ldd	r25, Z+1	; 0x01
    3b36:	91 34       	cpi	r25, 0x41	; 65
    3b38:	10 f0       	brcs	.+4      	; 0x3b3e <decode_hexadecimal_string_bytes+0x5a>
    3b3a:	97 53       	subi	r25, 0x37	; 55
    3b3c:	01 c0       	rjmp	.+2      	; 0x3b40 <decode_hexadecimal_string_bytes+0x5c>
    3b3e:	90 53       	subi	r25, 0x30	; 48
    3b40:	95 0f       	add	r25, r21
    3b42:	f8 01       	movw	r30, r16
    3b44:	90 83       	st	Z, r25
    3b46:	8f 5f       	subi	r24, 0xFF	; 255
    3b48:	01 c0       	rjmp	.+2      	; 0x3b4c <decode_hexadecimal_string_bytes+0x68>
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	28 2f       	mov	r18, r24
    3b4e:	22 0f       	add	r18, r18
    3b50:	48 2f       	mov	r20, r24
    3b52:	50 e0       	ldi	r21, 0x00	; 0
    3b54:	fe 01       	movw	r30, r28
    3b56:	01 90       	ld	r0, Z+
    3b58:	00 20       	and	r0, r0
    3b5a:	e9 f7       	brne	.-6      	; 0x3b56 <decode_hexadecimal_string_bytes+0x72>
    3b5c:	31 97       	sbiw	r30, 0x01	; 1
    3b5e:	ec 1b       	sub	r30, r28
    3b60:	fd 0b       	sbc	r31, r29
    3b62:	4e 17       	cp	r20, r30
    3b64:	5f 07       	cpc	r21, r31
    3b66:	10 f4       	brcc	.+4      	; 0x3b6c <decode_hexadecimal_string_bytes+0x88>
    3b68:	86 13       	cpse	r24, r22
    3b6a:	ce cf       	rjmp	.-100    	; 0x3b08 <decode_hexadecimal_string_bytes+0x24>
    3b6c:	df 91       	pop	r29
    3b6e:	cf 91       	pop	r28
    3b70:	1f 91       	pop	r17
    3b72:	0f 91       	pop	r16
    3b74:	08 95       	ret

00003b76 <serial_create>:
    3b76:	2f 92       	push	r2
    3b78:	3f 92       	push	r3
    3b7a:	4f 92       	push	r4
    3b7c:	5f 92       	push	r5
    3b7e:	6f 92       	push	r6
    3b80:	7f 92       	push	r7
    3b82:	8f 92       	push	r8
    3b84:	9f 92       	push	r9
    3b86:	af 92       	push	r10
    3b88:	cf 92       	push	r12
    3b8a:	ef 92       	push	r14
    3b8c:	ff 92       	push	r15
    3b8e:	0f 93       	push	r16
    3b90:	1f 93       	push	r17
    3b92:	cf 93       	push	r28
    3b94:	df 93       	push	r29
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	f8 2e       	mov	r15, r24
    3b9c:	2a 01       	movw	r4, r20
    3b9e:	3b 01       	movw	r6, r22
    3ba0:	88 e0       	ldi	r24, 0x08	; 8
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	85 d7       	rcall	.+3850   	; 0x4ab0 <malloc>
    3ba6:	8c 01       	movw	r16, r24
    3ba8:	8f 2d       	mov	r24, r15
    3baa:	90 e0       	ldi	r25, 0x00	; 0
    3bac:	fc 01       	movw	r30, r24
    3bae:	ee 0f       	add	r30, r30
    3bb0:	ff 1f       	adc	r31, r31
    3bb2:	e2 5f       	subi	r30, 0xF2	; 242
    3bb4:	fc 4e       	sbci	r31, 0xEC	; 236
    3bb6:	11 83       	std	Z+1, r17	; 0x01
    3bb8:	00 83       	st	Z, r16
    3bba:	01 15       	cp	r16, r1
    3bbc:	11 05       	cpc	r17, r1
    3bbe:	09 f4       	brne	.+2      	; 0x3bc2 <serial_create+0x4c>
    3bc0:	64 c0       	rjmp	.+200    	; 0x3c8a <serial_create+0x114>
    3bc2:	88 0f       	add	r24, r24
    3bc4:	99 1f       	adc	r25, r25
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	e9 5f       	subi	r30, 0xF9	; 249
    3bca:	fd 4f       	sbci	r31, 0xFD	; 253
    3bcc:	80 81       	ld	r24, Z
    3bce:	91 81       	ldd	r25, Z+1	; 0x01
    3bd0:	d8 01       	movw	r26, r16
    3bd2:	8d 93       	st	X+, r24
    3bd4:	9c 93       	st	X, r25
    3bd6:	8c 2d       	mov	r24, r12
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	88 0f       	add	r24, r24
    3bdc:	99 1f       	adc	r25, r25
    3bde:	88 0f       	add	r24, r24
    3be0:	99 1f       	adc	r25, r25
    3be2:	66 d7       	rcall	.+3788   	; 0x4ab0 <malloc>
    3be4:	1c 01       	movw	r2, r24
    3be6:	86 e0       	ldi	r24, 0x06	; 6
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	62 d7       	rcall	.+3780   	; 0x4ab0 <malloc>
    3bec:	7c 01       	movw	r14, r24
    3bee:	4c 2d       	mov	r20, r12
    3bf0:	b1 01       	movw	r22, r2
    3bf2:	50 d5       	rcall	.+2720   	; 0x4694 <fifo_init>
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	f5 82       	std	Z+5, r15	; 0x05
    3bf8:	e4 82       	std	Z+4, r14	; 0x04
    3bfa:	8a 2d       	mov	r24, r10
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	88 0f       	add	r24, r24
    3c00:	99 1f       	adc	r25, r25
    3c02:	88 0f       	add	r24, r24
    3c04:	99 1f       	adc	r25, r25
    3c06:	54 d7       	rcall	.+3752   	; 0x4ab0 <malloc>
    3c08:	1c 01       	movw	r2, r24
    3c0a:	86 e0       	ldi	r24, 0x06	; 6
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	50 d7       	rcall	.+3744   	; 0x4ab0 <malloc>
    3c10:	7c 01       	movw	r14, r24
    3c12:	4a 2d       	mov	r20, r10
    3c14:	b1 01       	movw	r22, r2
    3c16:	3e d5       	rcall	.+2684   	; 0x4694 <fifo_init>
    3c18:	d8 01       	movw	r26, r16
    3c1a:	13 96       	adiw	r26, 0x03	; 3
    3c1c:	fc 92       	st	X, r15
    3c1e:	ee 92       	st	-X, r14
    3c20:	12 97       	sbiw	r26, 0x02	; 2
    3c22:	17 96       	adiw	r26, 0x07	; 7
    3c24:	9c 92       	st	X, r9
    3c26:	8e 92       	st	-X, r8
    3c28:	16 97       	sbiw	r26, 0x06	; 6
    3c2a:	ff b6       	in	r15, 0x3f	; 63
    3c2c:	f8 94       	cli
    3c2e:	ed 91       	ld	r30, X+
    3c30:	fc 91       	ld	r31, X
    3c32:	11 97       	sbiw	r26, 0x01	; 1
    3c34:	36 97       	sbiw	r30, 0x06	; 6
    3c36:	80 81       	ld	r24, Z
    3c38:	82 60       	ori	r24, 0x02	; 2
    3c3a:	80 83       	st	Z, r24
    3c3c:	8d 90       	ld	r8, X+
    3c3e:	9c 90       	ld	r9, X
    3c40:	c3 01       	movw	r24, r6
    3c42:	b2 01       	movw	r22, r4
    3c44:	3c d6       	rcall	.+3192   	; 0x48be <__floatunsisf>
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	40 e0       	ldi	r20, 0x00	; 0
    3c4c:	51 e4       	ldi	r21, 0x41	; 65
    3c4e:	c5 d6       	rcall	.+3466   	; 0x49da <__mulsf3>
    3c50:	9b 01       	movw	r18, r22
    3c52:	ac 01       	movw	r20, r24
    3c54:	60 e0       	ldi	r22, 0x00	; 0
    3c56:	74 e2       	ldi	r23, 0x24	; 36
    3c58:	84 e7       	ldi	r24, 0x74	; 116
    3c5a:	9b e4       	ldi	r25, 0x4B	; 75
    3c5c:	9c d5       	rcall	.+2872   	; 0x4796 <__divsf3>
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e8       	ldi	r20, 0x80	; 128
    3c64:	5f e3       	ldi	r21, 0x3F	; 63
    3c66:	32 d5       	rcall	.+2660   	; 0x46cc <__subsf3>
    3c68:	fe d5       	rcall	.+3068   	; 0x4866 <__fixunssfsi>
    3c6a:	f4 01       	movw	r30, r8
    3c6c:	32 97       	sbiw	r30, 0x02	; 2
    3c6e:	60 83       	st	Z, r22
    3c70:	d8 01       	movw	r26, r16
    3c72:	ed 91       	ld	r30, X+
    3c74:	fc 91       	ld	r31, X
    3c76:	11 97       	sbiw	r26, 0x01	; 1
    3c78:	35 97       	sbiw	r30, 0x05	; 5
    3c7a:	88 e9       	ldi	r24, 0x98	; 152
    3c7c:	80 83       	st	Z, r24
    3c7e:	ed 91       	ld	r30, X+
    3c80:	fc 91       	ld	r31, X
    3c82:	34 97       	sbiw	r30, 0x04	; 4
    3c84:	86 e0       	ldi	r24, 0x06	; 6
    3c86:	80 83       	st	Z, r24
    3c88:	ff be       	out	0x3f, r15	; 63
    3c8a:	c8 01       	movw	r24, r16
    3c8c:	df 91       	pop	r29
    3c8e:	cf 91       	pop	r28
    3c90:	1f 91       	pop	r17
    3c92:	0f 91       	pop	r16
    3c94:	ff 90       	pop	r15
    3c96:	ef 90       	pop	r14
    3c98:	cf 90       	pop	r12
    3c9a:	af 90       	pop	r10
    3c9c:	9f 90       	pop	r9
    3c9e:	8f 90       	pop	r8
    3ca0:	7f 90       	pop	r7
    3ca2:	6f 90       	pop	r6
    3ca4:	5f 90       	pop	r5
    3ca6:	4f 90       	pop	r4
    3ca8:	3f 90       	pop	r3
    3caa:	2f 90       	pop	r2
    3cac:	08 95       	ret

00003cae <serial_sendByte>:
    3cae:	cf 93       	push	r28
    3cb0:	df 93       	push	r29
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	89 2b       	or	r24, r25
    3cb6:	01 f1       	breq	.+64     	; 0x3cf8 <serial_sendByte+0x4a>
    3cb8:	12 96       	adiw	r26, 0x02	; 2
    3cba:	ed 91       	ld	r30, X+
    3cbc:	fc 91       	ld	r31, X
    3cbe:	13 97       	sbiw	r26, 0x03	; 3
    3cc0:	93 81       	ldd	r25, Z+3	; 0x03
    3cc2:	82 81       	ldd	r24, Z+2	; 0x02
    3cc4:	25 81       	ldd	r18, Z+5	; 0x05
    3cc6:	98 1b       	sub	r25, r24
    3cc8:	92 23       	and	r25, r18
    3cca:	84 81       	ldd	r24, Z+4	; 0x04
    3ccc:	98 17       	cp	r25, r24
    3cce:	b1 f0       	breq	.+44     	; 0x3cfc <serial_sendByte+0x4e>
    3cd0:	83 81       	ldd	r24, Z+3	; 0x03
    3cd2:	26 95       	lsr	r18
    3cd4:	28 23       	and	r18, r24
    3cd6:	c0 81       	ld	r28, Z
    3cd8:	d1 81       	ldd	r29, Z+1	; 0x01
    3cda:	c2 0f       	add	r28, r18
    3cdc:	d1 1d       	adc	r29, r1
    3cde:	68 83       	st	Y, r22
    3ce0:	8f 5f       	subi	r24, 0xFF	; 255
    3ce2:	95 81       	ldd	r25, Z+5	; 0x05
    3ce4:	89 23       	and	r24, r25
    3ce6:	83 83       	std	Z+3, r24	; 0x03
    3ce8:	ed 91       	ld	r30, X+
    3cea:	fc 91       	ld	r31, X
    3cec:	35 97       	sbiw	r30, 0x05	; 5
    3cee:	80 81       	ld	r24, Z
    3cf0:	80 62       	ori	r24, 0x20	; 32
    3cf2:	80 83       	st	Z, r24
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	03 c0       	rjmp	.+6      	; 0x3cfe <serial_sendByte+0x50>
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	01 c0       	rjmp	.+2      	; 0x3cfe <serial_sendByte+0x50>
    3cfc:	82 e0       	ldi	r24, 0x02	; 2
    3cfe:	df 91       	pop	r29
    3d00:	cf 91       	pop	r28
    3d02:	08 95       	ret

00003d04 <serial_sendBytes>:
    3d04:	ef 92       	push	r14
    3d06:	ff 92       	push	r15
    3d08:	0f 93       	push	r16
    3d0a:	1f 93       	push	r17
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	7c 01       	movw	r14, r24
    3d12:	00 97       	sbiw	r24, 0x00	; 0
    3d14:	09 f4       	brne	.+2      	; 0x3d18 <serial_sendBytes+0x14>
    3d16:	41 c0       	rjmp	.+130    	; 0x3d9a <serial_sendBytes+0x96>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	12 96       	adiw	r26, 0x02	; 2
    3d1c:	ed 91       	ld	r30, X+
    3d1e:	fc 91       	ld	r31, X
    3d20:	13 97       	sbiw	r26, 0x03	; 3
    3d22:	93 81       	ldd	r25, Z+3	; 0x03
    3d24:	82 81       	ldd	r24, Z+2	; 0x02
    3d26:	98 1b       	sub	r25, r24
    3d28:	85 81       	ldd	r24, Z+5	; 0x05
    3d2a:	98 23       	and	r25, r24
    3d2c:	84 81       	ldd	r24, Z+4	; 0x04
    3d2e:	89 1b       	sub	r24, r25
    3d30:	86 17       	cp	r24, r22
    3d32:	a8 f1       	brcs	.+106    	; 0x3d9e <serial_sendBytes+0x9a>
    3d34:	66 23       	and	r22, r22
    3d36:	41 f1       	breq	.+80     	; 0x3d88 <serial_sendBytes+0x84>
    3d38:	84 2f       	mov	r24, r20
    3d3a:	95 2f       	mov	r25, r21
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	61 50       	subi	r22, 0x01	; 1
    3d40:	46 2f       	mov	r20, r22
    3d42:	50 e0       	ldi	r21, 0x00	; 0
    3d44:	4f 5f       	subi	r20, 0xFF	; 255
    3d46:	5f 4f       	sbci	r21, 0xFF	; 255
    3d48:	48 0f       	add	r20, r24
    3d4a:	59 1f       	adc	r21, r25
    3d4c:	e7 01       	movw	r28, r14
    3d4e:	ea 81       	ldd	r30, Y+2	; 0x02
    3d50:	fb 81       	ldd	r31, Y+3	; 0x03
    3d52:	93 81       	ldd	r25, Z+3	; 0x03
    3d54:	82 81       	ldd	r24, Z+2	; 0x02
    3d56:	25 81       	ldd	r18, Z+5	; 0x05
    3d58:	98 1b       	sub	r25, r24
    3d5a:	92 23       	and	r25, r18
    3d5c:	84 81       	ldd	r24, Z+4	; 0x04
    3d5e:	98 17       	cp	r25, r24
    3d60:	79 f0       	breq	.+30     	; 0x3d80 <serial_sendBytes+0x7c>
    3d62:	8c 91       	ld	r24, X
    3d64:	93 81       	ldd	r25, Z+3	; 0x03
    3d66:	26 95       	lsr	r18
    3d68:	29 23       	and	r18, r25
    3d6a:	60 81       	ld	r22, Z
    3d6c:	71 81       	ldd	r23, Z+1	; 0x01
    3d6e:	8b 01       	movw	r16, r22
    3d70:	02 0f       	add	r16, r18
    3d72:	11 1d       	adc	r17, r1
    3d74:	e8 01       	movw	r28, r16
    3d76:	88 83       	st	Y, r24
    3d78:	9f 5f       	subi	r25, 0xFF	; 255
    3d7a:	85 81       	ldd	r24, Z+5	; 0x05
    3d7c:	98 23       	and	r25, r24
    3d7e:	93 83       	std	Z+3, r25	; 0x03
    3d80:	11 96       	adiw	r26, 0x01	; 1
    3d82:	a4 17       	cp	r26, r20
    3d84:	b5 07       	cpc	r27, r21
    3d86:	11 f7       	brne	.-60     	; 0x3d4c <serial_sendBytes+0x48>
    3d88:	d7 01       	movw	r26, r14
    3d8a:	ed 91       	ld	r30, X+
    3d8c:	fc 91       	ld	r31, X
    3d8e:	35 97       	sbiw	r30, 0x05	; 5
    3d90:	80 81       	ld	r24, Z
    3d92:	80 62       	ori	r24, 0x20	; 32
    3d94:	80 83       	st	Z, r24
    3d96:	80 e0       	ldi	r24, 0x00	; 0
    3d98:	03 c0       	rjmp	.+6      	; 0x3da0 <serial_sendBytes+0x9c>
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	01 c0       	rjmp	.+2      	; 0x3da0 <serial_sendBytes+0x9c>
    3d9e:	82 e0       	ldi	r24, 0x02	; 2
    3da0:	df 91       	pop	r29
    3da2:	cf 91       	pop	r28
    3da4:	1f 91       	pop	r17
    3da6:	0f 91       	pop	r16
    3da8:	ff 90       	pop	r15
    3daa:	ef 90       	pop	r14
    3dac:	08 95       	ret

00003dae <serial_getByte>:
    3dae:	00 97       	sbiw	r24, 0x00	; 0
    3db0:	d1 f0       	breq	.+52     	; 0x3de6 <serial_getByte+0x38>
    3db2:	dc 01       	movw	r26, r24
    3db4:	14 96       	adiw	r26, 0x04	; 4
    3db6:	ed 91       	ld	r30, X+
    3db8:	fc 91       	ld	r31, X
    3dba:	15 97       	sbiw	r26, 0x05	; 5
    3dbc:	93 81       	ldd	r25, Z+3	; 0x03
    3dbe:	82 81       	ldd	r24, Z+2	; 0x02
    3dc0:	98 17       	cp	r25, r24
    3dc2:	99 f0       	breq	.+38     	; 0x3dea <serial_getByte+0x3c>
    3dc4:	92 81       	ldd	r25, Z+2	; 0x02
    3dc6:	85 81       	ldd	r24, Z+5	; 0x05
    3dc8:	86 95       	lsr	r24
    3dca:	89 23       	and	r24, r25
    3dcc:	a0 81       	ld	r26, Z
    3dce:	b1 81       	ldd	r27, Z+1	; 0x01
    3dd0:	a8 0f       	add	r26, r24
    3dd2:	b1 1d       	adc	r27, r1
    3dd4:	8c 91       	ld	r24, X
    3dd6:	db 01       	movw	r26, r22
    3dd8:	8c 93       	st	X, r24
    3dda:	9f 5f       	subi	r25, 0xFF	; 255
    3ddc:	85 81       	ldd	r24, Z+5	; 0x05
    3dde:	98 23       	and	r25, r24
    3de0:	92 83       	std	Z+2, r25	; 0x02
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	08 95       	ret
    3de6:	81 e0       	ldi	r24, 0x01	; 1
    3de8:	08 95       	ret
    3dea:	83 e0       	ldi	r24, 0x03	; 3
    3dec:	08 95       	ret

00003dee <__vector_25>:
    3dee:	1f 92       	push	r1
    3df0:	0f 92       	push	r0
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	0f 92       	push	r0
    3df6:	11 24       	eor	r1, r1
    3df8:	0b b6       	in	r0, 0x3b	; 59
    3dfa:	0f 92       	push	r0
    3dfc:	2f 93       	push	r18
    3dfe:	3f 93       	push	r19
    3e00:	4f 93       	push	r20
    3e02:	5f 93       	push	r21
    3e04:	6f 93       	push	r22
    3e06:	7f 93       	push	r23
    3e08:	8f 93       	push	r24
    3e0a:	9f 93       	push	r25
    3e0c:	af 93       	push	r26
    3e0e:	bf 93       	push	r27
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	ef 93       	push	r30
    3e16:	ff 93       	push	r31
    3e18:	a0 91 0e 13 	lds	r26, 0x130E	; 0x80130e <_ser_handle>
    3e1c:	b0 91 0f 13 	lds	r27, 0x130F	; 0x80130f <_ser_handle+0x1>
    3e20:	10 97       	sbiw	r26, 0x00	; 0
    3e22:	11 f1       	breq	.+68     	; 0x3e68 <__vector_25+0x7a>
    3e24:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3e28:	14 96       	adiw	r26, 0x04	; 4
    3e2a:	ed 91       	ld	r30, X+
    3e2c:	fc 91       	ld	r31, X
    3e2e:	15 97       	sbiw	r26, 0x05	; 5
    3e30:	93 81       	ldd	r25, Z+3	; 0x03
    3e32:	82 81       	ldd	r24, Z+2	; 0x02
    3e34:	25 81       	ldd	r18, Z+5	; 0x05
    3e36:	98 1b       	sub	r25, r24
    3e38:	92 23       	and	r25, r18
    3e3a:	84 81       	ldd	r24, Z+4	; 0x04
    3e3c:	98 17       	cp	r25, r24
    3e3e:	61 f0       	breq	.+24     	; 0x3e58 <__vector_25+0x6a>
    3e40:	83 81       	ldd	r24, Z+3	; 0x03
    3e42:	26 95       	lsr	r18
    3e44:	28 23       	and	r18, r24
    3e46:	c0 81       	ld	r28, Z
    3e48:	d1 81       	ldd	r29, Z+1	; 0x01
    3e4a:	c2 0f       	add	r28, r18
    3e4c:	d1 1d       	adc	r29, r1
    3e4e:	68 83       	st	Y, r22
    3e50:	8f 5f       	subi	r24, 0xFF	; 255
    3e52:	95 81       	ldd	r25, Z+5	; 0x05
    3e54:	89 23       	and	r24, r25
    3e56:	83 83       	std	Z+3, r24	; 0x03
    3e58:	16 96       	adiw	r26, 0x06	; 6
    3e5a:	ed 91       	ld	r30, X+
    3e5c:	fc 91       	ld	r31, X
    3e5e:	17 97       	sbiw	r26, 0x07	; 7
    3e60:	30 97       	sbiw	r30, 0x00	; 0
    3e62:	11 f0       	breq	.+4      	; 0x3e68 <__vector_25+0x7a>
    3e64:	cd 01       	movw	r24, r26
    3e66:	19 95       	eicall
    3e68:	ff 91       	pop	r31
    3e6a:	ef 91       	pop	r30
    3e6c:	df 91       	pop	r29
    3e6e:	cf 91       	pop	r28
    3e70:	bf 91       	pop	r27
    3e72:	af 91       	pop	r26
    3e74:	9f 91       	pop	r25
    3e76:	8f 91       	pop	r24
    3e78:	7f 91       	pop	r23
    3e7a:	6f 91       	pop	r22
    3e7c:	5f 91       	pop	r21
    3e7e:	4f 91       	pop	r20
    3e80:	3f 91       	pop	r19
    3e82:	2f 91       	pop	r18
    3e84:	0f 90       	pop	r0
    3e86:	0b be       	out	0x3b, r0	; 59
    3e88:	0f 90       	pop	r0
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	0f 90       	pop	r0
    3e8e:	1f 90       	pop	r1
    3e90:	18 95       	reti

00003e92 <__vector_26>:
    3e92:	1f 92       	push	r1
    3e94:	0f 92       	push	r0
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	0f 92       	push	r0
    3e9a:	11 24       	eor	r1, r1
    3e9c:	0b b6       	in	r0, 0x3b	; 59
    3e9e:	0f 92       	push	r0
    3ea0:	2f 93       	push	r18
    3ea2:	8f 93       	push	r24
    3ea4:	9f 93       	push	r25
    3ea6:	af 93       	push	r26
    3ea8:	bf 93       	push	r27
    3eaa:	ef 93       	push	r30
    3eac:	ff 93       	push	r31
    3eae:	e0 91 0e 13 	lds	r30, 0x130E	; 0x80130e <_ser_handle>
    3eb2:	f0 91 0f 13 	lds	r31, 0x130F	; 0x80130f <_ser_handle+0x1>
    3eb6:	30 97       	sbiw	r30, 0x00	; 0
    3eb8:	b9 f0       	breq	.+46     	; 0x3ee8 <__vector_26+0x56>
    3eba:	02 80       	ldd	r0, Z+2	; 0x02
    3ebc:	f3 81       	ldd	r31, Z+3	; 0x03
    3ebe:	e0 2d       	mov	r30, r0
    3ec0:	93 81       	ldd	r25, Z+3	; 0x03
    3ec2:	82 81       	ldd	r24, Z+2	; 0x02
    3ec4:	98 17       	cp	r25, r24
    3ec6:	b1 f0       	breq	.+44     	; 0x3ef4 <__vector_26+0x62>
    3ec8:	92 81       	ldd	r25, Z+2	; 0x02
    3eca:	85 81       	ldd	r24, Z+5	; 0x05
    3ecc:	28 2f       	mov	r18, r24
    3ece:	26 95       	lsr	r18
    3ed0:	29 23       	and	r18, r25
    3ed2:	a0 81       	ld	r26, Z
    3ed4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ed6:	a2 0f       	add	r26, r18
    3ed8:	b1 1d       	adc	r27, r1
    3eda:	2c 91       	ld	r18, X
    3edc:	9f 5f       	subi	r25, 0xFF	; 255
    3ede:	89 23       	and	r24, r25
    3ee0:	82 83       	std	Z+2, r24	; 0x02
    3ee2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3ee6:	0b c0       	rjmp	.+22     	; 0x3efe <__vector_26+0x6c>
    3ee8:	e1 ec       	ldi	r30, 0xC1	; 193
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	80 81       	ld	r24, Z
    3eee:	8f 7d       	andi	r24, 0xDF	; 223
    3ef0:	80 83       	st	Z, r24
    3ef2:	05 c0       	rjmp	.+10     	; 0x3efe <__vector_26+0x6c>
    3ef4:	e1 ec       	ldi	r30, 0xC1	; 193
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	80 81       	ld	r24, Z
    3efa:	8f 7d       	andi	r24, 0xDF	; 223
    3efc:	80 83       	st	Z, r24
    3efe:	ff 91       	pop	r31
    3f00:	ef 91       	pop	r30
    3f02:	bf 91       	pop	r27
    3f04:	af 91       	pop	r26
    3f06:	9f 91       	pop	r25
    3f08:	8f 91       	pop	r24
    3f0a:	2f 91       	pop	r18
    3f0c:	0f 90       	pop	r0
    3f0e:	0b be       	out	0x3b, r0	; 59
    3f10:	0f 90       	pop	r0
    3f12:	0f be       	out	0x3f, r0	; 63
    3f14:	0f 90       	pop	r0
    3f16:	1f 90       	pop	r1
    3f18:	18 95       	reti

00003f1a <__vector_36>:
    3f1a:	1f 92       	push	r1
    3f1c:	0f 92       	push	r0
    3f1e:	0f b6       	in	r0, 0x3f	; 63
    3f20:	0f 92       	push	r0
    3f22:	11 24       	eor	r1, r1
    3f24:	0b b6       	in	r0, 0x3b	; 59
    3f26:	0f 92       	push	r0
    3f28:	2f 93       	push	r18
    3f2a:	3f 93       	push	r19
    3f2c:	4f 93       	push	r20
    3f2e:	5f 93       	push	r21
    3f30:	6f 93       	push	r22
    3f32:	7f 93       	push	r23
    3f34:	8f 93       	push	r24
    3f36:	9f 93       	push	r25
    3f38:	af 93       	push	r26
    3f3a:	bf 93       	push	r27
    3f3c:	cf 93       	push	r28
    3f3e:	df 93       	push	r29
    3f40:	ef 93       	push	r30
    3f42:	ff 93       	push	r31
    3f44:	a0 91 10 13 	lds	r26, 0x1310	; 0x801310 <_ser_handle+0x2>
    3f48:	b0 91 11 13 	lds	r27, 0x1311	; 0x801311 <_ser_handle+0x3>
    3f4c:	10 97       	sbiw	r26, 0x00	; 0
    3f4e:	11 f1       	breq	.+68     	; 0x3f94 <__vector_36+0x7a>
    3f50:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3f54:	14 96       	adiw	r26, 0x04	; 4
    3f56:	ed 91       	ld	r30, X+
    3f58:	fc 91       	ld	r31, X
    3f5a:	15 97       	sbiw	r26, 0x05	; 5
    3f5c:	93 81       	ldd	r25, Z+3	; 0x03
    3f5e:	82 81       	ldd	r24, Z+2	; 0x02
    3f60:	25 81       	ldd	r18, Z+5	; 0x05
    3f62:	98 1b       	sub	r25, r24
    3f64:	92 23       	and	r25, r18
    3f66:	84 81       	ldd	r24, Z+4	; 0x04
    3f68:	98 17       	cp	r25, r24
    3f6a:	61 f0       	breq	.+24     	; 0x3f84 <__vector_36+0x6a>
    3f6c:	83 81       	ldd	r24, Z+3	; 0x03
    3f6e:	26 95       	lsr	r18
    3f70:	28 23       	and	r18, r24
    3f72:	c0 81       	ld	r28, Z
    3f74:	d1 81       	ldd	r29, Z+1	; 0x01
    3f76:	c2 0f       	add	r28, r18
    3f78:	d1 1d       	adc	r29, r1
    3f7a:	68 83       	st	Y, r22
    3f7c:	8f 5f       	subi	r24, 0xFF	; 255
    3f7e:	95 81       	ldd	r25, Z+5	; 0x05
    3f80:	89 23       	and	r24, r25
    3f82:	83 83       	std	Z+3, r24	; 0x03
    3f84:	16 96       	adiw	r26, 0x06	; 6
    3f86:	ed 91       	ld	r30, X+
    3f88:	fc 91       	ld	r31, X
    3f8a:	17 97       	sbiw	r26, 0x07	; 7
    3f8c:	30 97       	sbiw	r30, 0x00	; 0
    3f8e:	11 f0       	breq	.+4      	; 0x3f94 <__vector_36+0x7a>
    3f90:	cd 01       	movw	r24, r26
    3f92:	19 95       	eicall
    3f94:	ff 91       	pop	r31
    3f96:	ef 91       	pop	r30
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	bf 91       	pop	r27
    3f9e:	af 91       	pop	r26
    3fa0:	9f 91       	pop	r25
    3fa2:	8f 91       	pop	r24
    3fa4:	7f 91       	pop	r23
    3fa6:	6f 91       	pop	r22
    3fa8:	5f 91       	pop	r21
    3faa:	4f 91       	pop	r20
    3fac:	3f 91       	pop	r19
    3fae:	2f 91       	pop	r18
    3fb0:	0f 90       	pop	r0
    3fb2:	0b be       	out	0x3b, r0	; 59
    3fb4:	0f 90       	pop	r0
    3fb6:	0f be       	out	0x3f, r0	; 63
    3fb8:	0f 90       	pop	r0
    3fba:	1f 90       	pop	r1
    3fbc:	18 95       	reti

00003fbe <__vector_37>:
    3fbe:	1f 92       	push	r1
    3fc0:	0f 92       	push	r0
    3fc2:	0f b6       	in	r0, 0x3f	; 63
    3fc4:	0f 92       	push	r0
    3fc6:	11 24       	eor	r1, r1
    3fc8:	0b b6       	in	r0, 0x3b	; 59
    3fca:	0f 92       	push	r0
    3fcc:	2f 93       	push	r18
    3fce:	8f 93       	push	r24
    3fd0:	9f 93       	push	r25
    3fd2:	af 93       	push	r26
    3fd4:	bf 93       	push	r27
    3fd6:	ef 93       	push	r30
    3fd8:	ff 93       	push	r31
    3fda:	e0 91 10 13 	lds	r30, 0x1310	; 0x801310 <_ser_handle+0x2>
    3fde:	f0 91 11 13 	lds	r31, 0x1311	; 0x801311 <_ser_handle+0x3>
    3fe2:	30 97       	sbiw	r30, 0x00	; 0
    3fe4:	b9 f0       	breq	.+46     	; 0x4014 <__vector_37+0x56>
    3fe6:	02 80       	ldd	r0, Z+2	; 0x02
    3fe8:	f3 81       	ldd	r31, Z+3	; 0x03
    3fea:	e0 2d       	mov	r30, r0
    3fec:	93 81       	ldd	r25, Z+3	; 0x03
    3fee:	82 81       	ldd	r24, Z+2	; 0x02
    3ff0:	98 17       	cp	r25, r24
    3ff2:	b1 f0       	breq	.+44     	; 0x4020 <__vector_37+0x62>
    3ff4:	92 81       	ldd	r25, Z+2	; 0x02
    3ff6:	85 81       	ldd	r24, Z+5	; 0x05
    3ff8:	28 2f       	mov	r18, r24
    3ffa:	26 95       	lsr	r18
    3ffc:	29 23       	and	r18, r25
    3ffe:	a0 81       	ld	r26, Z
    4000:	b1 81       	ldd	r27, Z+1	; 0x01
    4002:	a2 0f       	add	r26, r18
    4004:	b1 1d       	adc	r27, r1
    4006:	2c 91       	ld	r18, X
    4008:	9f 5f       	subi	r25, 0xFF	; 255
    400a:	89 23       	and	r24, r25
    400c:	82 83       	std	Z+2, r24	; 0x02
    400e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4012:	0b c0       	rjmp	.+22     	; 0x402a <__vector_37+0x6c>
    4014:	e9 ec       	ldi	r30, 0xC9	; 201
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	80 81       	ld	r24, Z
    401a:	8f 7d       	andi	r24, 0xDF	; 223
    401c:	80 83       	st	Z, r24
    401e:	05 c0       	rjmp	.+10     	; 0x402a <__vector_37+0x6c>
    4020:	e9 ec       	ldi	r30, 0xC9	; 201
    4022:	f0 e0       	ldi	r31, 0x00	; 0
    4024:	80 81       	ld	r24, Z
    4026:	8f 7d       	andi	r24, 0xDF	; 223
    4028:	80 83       	st	Z, r24
    402a:	ff 91       	pop	r31
    402c:	ef 91       	pop	r30
    402e:	bf 91       	pop	r27
    4030:	af 91       	pop	r26
    4032:	9f 91       	pop	r25
    4034:	8f 91       	pop	r24
    4036:	2f 91       	pop	r18
    4038:	0f 90       	pop	r0
    403a:	0b be       	out	0x3b, r0	; 59
    403c:	0f 90       	pop	r0
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	0f 90       	pop	r0
    4042:	1f 90       	pop	r1
    4044:	18 95       	reti

00004046 <__vector_51>:
    4046:	1f 92       	push	r1
    4048:	0f 92       	push	r0
    404a:	0f b6       	in	r0, 0x3f	; 63
    404c:	0f 92       	push	r0
    404e:	11 24       	eor	r1, r1
    4050:	0b b6       	in	r0, 0x3b	; 59
    4052:	0f 92       	push	r0
    4054:	2f 93       	push	r18
    4056:	3f 93       	push	r19
    4058:	4f 93       	push	r20
    405a:	5f 93       	push	r21
    405c:	6f 93       	push	r22
    405e:	7f 93       	push	r23
    4060:	8f 93       	push	r24
    4062:	9f 93       	push	r25
    4064:	af 93       	push	r26
    4066:	bf 93       	push	r27
    4068:	cf 93       	push	r28
    406a:	df 93       	push	r29
    406c:	ef 93       	push	r30
    406e:	ff 93       	push	r31
    4070:	a0 91 12 13 	lds	r26, 0x1312	; 0x801312 <_ser_handle+0x4>
    4074:	b0 91 13 13 	lds	r27, 0x1313	; 0x801313 <_ser_handle+0x5>
    4078:	10 97       	sbiw	r26, 0x00	; 0
    407a:	11 f1       	breq	.+68     	; 0x40c0 <__vector_51+0x7a>
    407c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4080:	14 96       	adiw	r26, 0x04	; 4
    4082:	ed 91       	ld	r30, X+
    4084:	fc 91       	ld	r31, X
    4086:	15 97       	sbiw	r26, 0x05	; 5
    4088:	93 81       	ldd	r25, Z+3	; 0x03
    408a:	82 81       	ldd	r24, Z+2	; 0x02
    408c:	25 81       	ldd	r18, Z+5	; 0x05
    408e:	98 1b       	sub	r25, r24
    4090:	92 23       	and	r25, r18
    4092:	84 81       	ldd	r24, Z+4	; 0x04
    4094:	98 17       	cp	r25, r24
    4096:	61 f0       	breq	.+24     	; 0x40b0 <__vector_51+0x6a>
    4098:	83 81       	ldd	r24, Z+3	; 0x03
    409a:	26 95       	lsr	r18
    409c:	28 23       	and	r18, r24
    409e:	c0 81       	ld	r28, Z
    40a0:	d1 81       	ldd	r29, Z+1	; 0x01
    40a2:	c2 0f       	add	r28, r18
    40a4:	d1 1d       	adc	r29, r1
    40a6:	68 83       	st	Y, r22
    40a8:	8f 5f       	subi	r24, 0xFF	; 255
    40aa:	95 81       	ldd	r25, Z+5	; 0x05
    40ac:	89 23       	and	r24, r25
    40ae:	83 83       	std	Z+3, r24	; 0x03
    40b0:	16 96       	adiw	r26, 0x06	; 6
    40b2:	ed 91       	ld	r30, X+
    40b4:	fc 91       	ld	r31, X
    40b6:	17 97       	sbiw	r26, 0x07	; 7
    40b8:	30 97       	sbiw	r30, 0x00	; 0
    40ba:	11 f0       	breq	.+4      	; 0x40c0 <__vector_51+0x7a>
    40bc:	cd 01       	movw	r24, r26
    40be:	19 95       	eicall
    40c0:	ff 91       	pop	r31
    40c2:	ef 91       	pop	r30
    40c4:	df 91       	pop	r29
    40c6:	cf 91       	pop	r28
    40c8:	bf 91       	pop	r27
    40ca:	af 91       	pop	r26
    40cc:	9f 91       	pop	r25
    40ce:	8f 91       	pop	r24
    40d0:	7f 91       	pop	r23
    40d2:	6f 91       	pop	r22
    40d4:	5f 91       	pop	r21
    40d6:	4f 91       	pop	r20
    40d8:	3f 91       	pop	r19
    40da:	2f 91       	pop	r18
    40dc:	0f 90       	pop	r0
    40de:	0b be       	out	0x3b, r0	; 59
    40e0:	0f 90       	pop	r0
    40e2:	0f be       	out	0x3f, r0	; 63
    40e4:	0f 90       	pop	r0
    40e6:	1f 90       	pop	r1
    40e8:	18 95       	reti

000040ea <__vector_52>:
    40ea:	1f 92       	push	r1
    40ec:	0f 92       	push	r0
    40ee:	0f b6       	in	r0, 0x3f	; 63
    40f0:	0f 92       	push	r0
    40f2:	11 24       	eor	r1, r1
    40f4:	0b b6       	in	r0, 0x3b	; 59
    40f6:	0f 92       	push	r0
    40f8:	2f 93       	push	r18
    40fa:	8f 93       	push	r24
    40fc:	9f 93       	push	r25
    40fe:	af 93       	push	r26
    4100:	bf 93       	push	r27
    4102:	ef 93       	push	r30
    4104:	ff 93       	push	r31
    4106:	e0 91 12 13 	lds	r30, 0x1312	; 0x801312 <_ser_handle+0x4>
    410a:	f0 91 13 13 	lds	r31, 0x1313	; 0x801313 <_ser_handle+0x5>
    410e:	30 97       	sbiw	r30, 0x00	; 0
    4110:	b9 f0       	breq	.+46     	; 0x4140 <__vector_52+0x56>
    4112:	02 80       	ldd	r0, Z+2	; 0x02
    4114:	f3 81       	ldd	r31, Z+3	; 0x03
    4116:	e0 2d       	mov	r30, r0
    4118:	93 81       	ldd	r25, Z+3	; 0x03
    411a:	82 81       	ldd	r24, Z+2	; 0x02
    411c:	98 17       	cp	r25, r24
    411e:	b1 f0       	breq	.+44     	; 0x414c <__vector_52+0x62>
    4120:	92 81       	ldd	r25, Z+2	; 0x02
    4122:	85 81       	ldd	r24, Z+5	; 0x05
    4124:	28 2f       	mov	r18, r24
    4126:	26 95       	lsr	r18
    4128:	29 23       	and	r18, r25
    412a:	a0 81       	ld	r26, Z
    412c:	b1 81       	ldd	r27, Z+1	; 0x01
    412e:	a2 0f       	add	r26, r18
    4130:	b1 1d       	adc	r27, r1
    4132:	2c 91       	ld	r18, X
    4134:	9f 5f       	subi	r25, 0xFF	; 255
    4136:	89 23       	and	r24, r25
    4138:	82 83       	std	Z+2, r24	; 0x02
    413a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    413e:	0b c0       	rjmp	.+22     	; 0x4156 <__vector_52+0x6c>
    4140:	e1 ed       	ldi	r30, 0xD1	; 209
    4142:	f0 e0       	ldi	r31, 0x00	; 0
    4144:	80 81       	ld	r24, Z
    4146:	8f 7d       	andi	r24, 0xDF	; 223
    4148:	80 83       	st	Z, r24
    414a:	05 c0       	rjmp	.+10     	; 0x4156 <__vector_52+0x6c>
    414c:	e1 ed       	ldi	r30, 0xD1	; 209
    414e:	f0 e0       	ldi	r31, 0x00	; 0
    4150:	80 81       	ld	r24, Z
    4152:	8f 7d       	andi	r24, 0xDF	; 223
    4154:	80 83       	st	Z, r24
    4156:	ff 91       	pop	r31
    4158:	ef 91       	pop	r30
    415a:	bf 91       	pop	r27
    415c:	af 91       	pop	r26
    415e:	9f 91       	pop	r25
    4160:	8f 91       	pop	r24
    4162:	2f 91       	pop	r18
    4164:	0f 90       	pop	r0
    4166:	0b be       	out	0x3b, r0	; 59
    4168:	0f 90       	pop	r0
    416a:	0f be       	out	0x3f, r0	; 63
    416c:	0f 90       	pop	r0
    416e:	1f 90       	pop	r1
    4170:	18 95       	reti

00004172 <__vector_54>:
    4172:	1f 92       	push	r1
    4174:	0f 92       	push	r0
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	0f 92       	push	r0
    417a:	11 24       	eor	r1, r1
    417c:	0b b6       	in	r0, 0x3b	; 59
    417e:	0f 92       	push	r0
    4180:	2f 93       	push	r18
    4182:	3f 93       	push	r19
    4184:	4f 93       	push	r20
    4186:	5f 93       	push	r21
    4188:	6f 93       	push	r22
    418a:	7f 93       	push	r23
    418c:	8f 93       	push	r24
    418e:	9f 93       	push	r25
    4190:	af 93       	push	r26
    4192:	bf 93       	push	r27
    4194:	cf 93       	push	r28
    4196:	df 93       	push	r29
    4198:	ef 93       	push	r30
    419a:	ff 93       	push	r31
    419c:	a0 91 14 13 	lds	r26, 0x1314	; 0x801314 <_ser_handle+0x6>
    41a0:	b0 91 15 13 	lds	r27, 0x1315	; 0x801315 <_ser_handle+0x7>
    41a4:	10 97       	sbiw	r26, 0x00	; 0
    41a6:	11 f1       	breq	.+68     	; 0x41ec <__vector_54+0x7a>
    41a8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    41ac:	14 96       	adiw	r26, 0x04	; 4
    41ae:	ed 91       	ld	r30, X+
    41b0:	fc 91       	ld	r31, X
    41b2:	15 97       	sbiw	r26, 0x05	; 5
    41b4:	93 81       	ldd	r25, Z+3	; 0x03
    41b6:	82 81       	ldd	r24, Z+2	; 0x02
    41b8:	25 81       	ldd	r18, Z+5	; 0x05
    41ba:	98 1b       	sub	r25, r24
    41bc:	92 23       	and	r25, r18
    41be:	84 81       	ldd	r24, Z+4	; 0x04
    41c0:	98 17       	cp	r25, r24
    41c2:	61 f0       	breq	.+24     	; 0x41dc <__vector_54+0x6a>
    41c4:	83 81       	ldd	r24, Z+3	; 0x03
    41c6:	26 95       	lsr	r18
    41c8:	28 23       	and	r18, r24
    41ca:	c0 81       	ld	r28, Z
    41cc:	d1 81       	ldd	r29, Z+1	; 0x01
    41ce:	c2 0f       	add	r28, r18
    41d0:	d1 1d       	adc	r29, r1
    41d2:	68 83       	st	Y, r22
    41d4:	8f 5f       	subi	r24, 0xFF	; 255
    41d6:	95 81       	ldd	r25, Z+5	; 0x05
    41d8:	89 23       	and	r24, r25
    41da:	83 83       	std	Z+3, r24	; 0x03
    41dc:	16 96       	adiw	r26, 0x06	; 6
    41de:	ed 91       	ld	r30, X+
    41e0:	fc 91       	ld	r31, X
    41e2:	17 97       	sbiw	r26, 0x07	; 7
    41e4:	30 97       	sbiw	r30, 0x00	; 0
    41e6:	11 f0       	breq	.+4      	; 0x41ec <__vector_54+0x7a>
    41e8:	cd 01       	movw	r24, r26
    41ea:	19 95       	eicall
    41ec:	ff 91       	pop	r31
    41ee:	ef 91       	pop	r30
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	bf 91       	pop	r27
    41f6:	af 91       	pop	r26
    41f8:	9f 91       	pop	r25
    41fa:	8f 91       	pop	r24
    41fc:	7f 91       	pop	r23
    41fe:	6f 91       	pop	r22
    4200:	5f 91       	pop	r21
    4202:	4f 91       	pop	r20
    4204:	3f 91       	pop	r19
    4206:	2f 91       	pop	r18
    4208:	0f 90       	pop	r0
    420a:	0b be       	out	0x3b, r0	; 59
    420c:	0f 90       	pop	r0
    420e:	0f be       	out	0x3f, r0	; 63
    4210:	0f 90       	pop	r0
    4212:	1f 90       	pop	r1
    4214:	18 95       	reti

00004216 <__vector_55>:
    4216:	1f 92       	push	r1
    4218:	0f 92       	push	r0
    421a:	0f b6       	in	r0, 0x3f	; 63
    421c:	0f 92       	push	r0
    421e:	11 24       	eor	r1, r1
    4220:	0b b6       	in	r0, 0x3b	; 59
    4222:	0f 92       	push	r0
    4224:	2f 93       	push	r18
    4226:	8f 93       	push	r24
    4228:	9f 93       	push	r25
    422a:	af 93       	push	r26
    422c:	bf 93       	push	r27
    422e:	ef 93       	push	r30
    4230:	ff 93       	push	r31
    4232:	e0 91 14 13 	lds	r30, 0x1314	; 0x801314 <_ser_handle+0x6>
    4236:	f0 91 15 13 	lds	r31, 0x1315	; 0x801315 <_ser_handle+0x7>
    423a:	30 97       	sbiw	r30, 0x00	; 0
    423c:	b9 f0       	breq	.+46     	; 0x426c <__vector_55+0x56>
    423e:	02 80       	ldd	r0, Z+2	; 0x02
    4240:	f3 81       	ldd	r31, Z+3	; 0x03
    4242:	e0 2d       	mov	r30, r0
    4244:	93 81       	ldd	r25, Z+3	; 0x03
    4246:	82 81       	ldd	r24, Z+2	; 0x02
    4248:	98 17       	cp	r25, r24
    424a:	b1 f0       	breq	.+44     	; 0x4278 <__vector_55+0x62>
    424c:	92 81       	ldd	r25, Z+2	; 0x02
    424e:	85 81       	ldd	r24, Z+5	; 0x05
    4250:	28 2f       	mov	r18, r24
    4252:	26 95       	lsr	r18
    4254:	29 23       	and	r18, r25
    4256:	a0 81       	ld	r26, Z
    4258:	b1 81       	ldd	r27, Z+1	; 0x01
    425a:	a2 0f       	add	r26, r18
    425c:	b1 1d       	adc	r27, r1
    425e:	2c 91       	ld	r18, X
    4260:	9f 5f       	subi	r25, 0xFF	; 255
    4262:	89 23       	and	r24, r25
    4264:	82 83       	std	Z+2, r24	; 0x02
    4266:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    426a:	0b c0       	rjmp	.+22     	; 0x4282 <__vector_55+0x6c>
    426c:	e1 e3       	ldi	r30, 0x31	; 49
    426e:	f1 e0       	ldi	r31, 0x01	; 1
    4270:	80 81       	ld	r24, Z
    4272:	8f 7d       	andi	r24, 0xDF	; 223
    4274:	80 83       	st	Z, r24
    4276:	05 c0       	rjmp	.+10     	; 0x4282 <__vector_55+0x6c>
    4278:	e1 e3       	ldi	r30, 0x31	; 49
    427a:	f1 e0       	ldi	r31, 0x01	; 1
    427c:	80 81       	ld	r24, Z
    427e:	8f 7d       	andi	r24, 0xDF	; 223
    4280:	80 83       	st	Z, r24
    4282:	ff 91       	pop	r31
    4284:	ef 91       	pop	r30
    4286:	bf 91       	pop	r27
    4288:	af 91       	pop	r26
    428a:	9f 91       	pop	r25
    428c:	8f 91       	pop	r24
    428e:	2f 91       	pop	r18
    4290:	0f 90       	pop	r0
    4292:	0b be       	out	0x3b, r0	; 59
    4294:	0f 90       	pop	r0
    4296:	0f be       	out	0x3f, r0	; 63
    4298:	0f 90       	pop	r0
    429a:	1f 90       	pop	r1
    429c:	18 95       	reti

0000429e <usart_getchar>:
    429e:	cf 93       	push	r28
    42a0:	df 93       	push	r29
    42a2:	1f 92       	push	r1
    42a4:	cd b7       	in	r28, 0x3d	; 61
    42a6:	de b7       	in	r29, 0x3e	; 62
    42a8:	be 01       	movw	r22, r28
    42aa:	6f 5f       	subi	r22, 0xFF	; 255
    42ac:	7f 4f       	sbci	r23, 0xFF	; 255
    42ae:	80 91 16 13 	lds	r24, 0x1316	; 0x801316 <_com_serial_instance>
    42b2:	90 91 17 13 	lds	r25, 0x1317	; 0x801317 <_com_serial_instance+0x1>
    42b6:	7b dd       	rcall	.-1290   	; 0x3dae <serial_getByte>
    42b8:	81 11       	cpse	r24, r1
    42ba:	f6 cf       	rjmp	.-20     	; 0x42a8 <usart_getchar+0xa>
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	0f 90       	pop	r0
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	08 95       	ret

000042c8 <usart_putchar>:
    42c8:	68 2f       	mov	r22, r24
    42ca:	80 91 16 13 	lds	r24, 0x1316	; 0x801316 <_com_serial_instance>
    42ce:	90 91 17 13 	lds	r25, 0x1317	; 0x801317 <_com_serial_instance+0x1>
    42d2:	ed dc       	rcall	.-1574   	; 0x3cae <serial_sendByte>
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	08 95       	ret

000042da <stdio_initialise>:
    42da:	8f 92       	push	r8
    42dc:	9f 92       	push	r9
    42de:	af 92       	push	r10
    42e0:	cf 92       	push	r12
    42e2:	ef 92       	push	r14
    42e4:	0f 93       	push	r16
    42e6:	81 2c       	mov	r8, r1
    42e8:	91 2c       	mov	r9, r1
    42ea:	68 94       	set
    42ec:	aa 24       	eor	r10, r10
    42ee:	a7 f8       	bld	r10, 7
    42f0:	68 94       	set
    42f2:	cc 24       	eor	r12, r12
    42f4:	c7 f8       	bld	r12, 7
    42f6:	e1 2c       	mov	r14, r1
    42f8:	00 e0       	ldi	r16, 0x00	; 0
    42fa:	23 e0       	ldi	r18, 0x03	; 3
    42fc:	40 e0       	ldi	r20, 0x00	; 0
    42fe:	51 ee       	ldi	r21, 0xE1	; 225
    4300:	60 e0       	ldi	r22, 0x00	; 0
    4302:	70 e0       	ldi	r23, 0x00	; 0
    4304:	38 dc       	rcall	.-1936   	; 0x3b76 <serial_create>
    4306:	90 93 17 13 	sts	0x1317, r25	; 0x801317 <_com_serial_instance+0x1>
    430a:	80 93 16 13 	sts	0x1316, r24	; 0x801316 <_com_serial_instance>
    430e:	e8 e3       	ldi	r30, 0x38	; 56
    4310:	f3 e1       	ldi	r31, 0x13	; 19
    4312:	8f e0       	ldi	r24, 0x0F	; 15
    4314:	92 e0       	ldi	r25, 0x02	; 2
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	80 83       	st	Z, r24
    431a:	93 83       	std	Z+3, r25	; 0x03
    431c:	82 83       	std	Z+2, r24	; 0x02
    431e:	0f 91       	pop	r16
    4320:	ef 90       	pop	r14
    4322:	cf 90       	pop	r12
    4324:	af 90       	pop	r10
    4326:	9f 90       	pop	r9
    4328:	8f 90       	pop	r8
    432a:	08 95       	ret

0000432c <_turn_off>:
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	fc 01       	movw	r30, r24
    4330:	ee 0f       	add	r30, r30
    4332:	ff 1f       	adc	r31, r31
    4334:	e8 0f       	add	r30, r24
    4336:	f9 1f       	adc	r31, r25
    4338:	ee 0f       	add	r30, r30
    433a:	ff 1f       	adc	r31, r31
    433c:	e8 5e       	subi	r30, 0xE8	; 232
    433e:	fc 4e       	sbci	r31, 0xEC	; 236
    4340:	23 81       	ldd	r18, Z+3	; 0x03
    4342:	21 11       	cpse	r18, r1
    4344:	1f c0       	rjmp	.+62     	; 0x4384 <_turn_off+0x58>
    4346:	9c 01       	movw	r18, r24
    4348:	22 0f       	add	r18, r18
    434a:	33 1f       	adc	r19, r19
    434c:	f9 01       	movw	r30, r18
    434e:	e8 0f       	add	r30, r24
    4350:	f9 1f       	adc	r31, r25
    4352:	ee 0f       	add	r30, r30
    4354:	ff 1f       	adc	r31, r31
    4356:	e8 5e       	subi	r30, 0xE8	; 232
    4358:	fc 4e       	sbci	r31, 0xEC	; 236
    435a:	a0 81       	ld	r26, Z
    435c:	b1 81       	ldd	r27, Z+1	; 0x01
    435e:	4c 91       	ld	r20, X
    4360:	f9 01       	movw	r30, r18
    4362:	e8 0f       	add	r30, r24
    4364:	f9 1f       	adc	r31, r25
    4366:	ee 0f       	add	r30, r30
    4368:	ff 1f       	adc	r31, r31
    436a:	e8 5e       	subi	r30, 0xE8	; 232
    436c:	fc 4e       	sbci	r31, 0xEC	; 236
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	02 80       	ldd	r0, Z+2	; 0x02
    4374:	02 c0       	rjmp	.+4      	; 0x437a <_turn_off+0x4e>
    4376:	88 0f       	add	r24, r24
    4378:	99 1f       	adc	r25, r25
    437a:	0a 94       	dec	r0
    437c:	e2 f7       	brpl	.-8      	; 0x4376 <_turn_off+0x4a>
    437e:	84 2b       	or	r24, r20
    4380:	8c 93       	st	X, r24
    4382:	08 95       	ret
    4384:	fc 01       	movw	r30, r24
    4386:	ee 0f       	add	r30, r30
    4388:	ff 1f       	adc	r31, r31
    438a:	df 01       	movw	r26, r30
    438c:	a8 0f       	add	r26, r24
    438e:	b9 1f       	adc	r27, r25
    4390:	aa 0f       	add	r26, r26
    4392:	bb 1f       	adc	r27, r27
    4394:	a8 5e       	subi	r26, 0xE8	; 232
    4396:	bc 4e       	sbci	r27, 0xEC	; 236
    4398:	0d 90       	ld	r0, X+
    439a:	bc 91       	ld	r27, X
    439c:	a0 2d       	mov	r26, r0
    439e:	2c 91       	ld	r18, X
    43a0:	e8 0f       	add	r30, r24
    43a2:	f9 1f       	adc	r31, r25
    43a4:	ee 0f       	add	r30, r30
    43a6:	ff 1f       	adc	r31, r31
    43a8:	e8 5e       	subi	r30, 0xE8	; 232
    43aa:	fc 4e       	sbci	r31, 0xEC	; 236
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	02 80       	ldd	r0, Z+2	; 0x02
    43b2:	02 c0       	rjmp	.+4      	; 0x43b8 <_turn_off+0x8c>
    43b4:	88 0f       	add	r24, r24
    43b6:	99 1f       	adc	r25, r25
    43b8:	0a 94       	dec	r0
    43ba:	e2 f7       	brpl	.-8      	; 0x43b4 <_turn_off+0x88>
    43bc:	80 95       	com	r24
    43be:	82 23       	and	r24, r18
    43c0:	8c 93       	st	X, r24
    43c2:	08 95       	ret

000043c4 <_turn_on>:
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	fc 01       	movw	r30, r24
    43c8:	ee 0f       	add	r30, r30
    43ca:	ff 1f       	adc	r31, r31
    43cc:	e8 0f       	add	r30, r24
    43ce:	f9 1f       	adc	r31, r25
    43d0:	ee 0f       	add	r30, r30
    43d2:	ff 1f       	adc	r31, r31
    43d4:	e8 5e       	subi	r30, 0xE8	; 232
    43d6:	fc 4e       	sbci	r31, 0xEC	; 236
    43d8:	23 81       	ldd	r18, Z+3	; 0x03
    43da:	21 11       	cpse	r18, r1
    43dc:	20 c0       	rjmp	.+64     	; 0x441e <_turn_on+0x5a>
    43de:	9c 01       	movw	r18, r24
    43e0:	22 0f       	add	r18, r18
    43e2:	33 1f       	adc	r19, r19
    43e4:	f9 01       	movw	r30, r18
    43e6:	e8 0f       	add	r30, r24
    43e8:	f9 1f       	adc	r31, r25
    43ea:	ee 0f       	add	r30, r30
    43ec:	ff 1f       	adc	r31, r31
    43ee:	e8 5e       	subi	r30, 0xE8	; 232
    43f0:	fc 4e       	sbci	r31, 0xEC	; 236
    43f2:	a0 81       	ld	r26, Z
    43f4:	b1 81       	ldd	r27, Z+1	; 0x01
    43f6:	4c 91       	ld	r20, X
    43f8:	f9 01       	movw	r30, r18
    43fa:	e8 0f       	add	r30, r24
    43fc:	f9 1f       	adc	r31, r25
    43fe:	ee 0f       	add	r30, r30
    4400:	ff 1f       	adc	r31, r31
    4402:	e8 5e       	subi	r30, 0xE8	; 232
    4404:	fc 4e       	sbci	r31, 0xEC	; 236
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	02 80       	ldd	r0, Z+2	; 0x02
    440c:	02 c0       	rjmp	.+4      	; 0x4412 <_turn_on+0x4e>
    440e:	88 0f       	add	r24, r24
    4410:	99 1f       	adc	r25, r25
    4412:	0a 94       	dec	r0
    4414:	e2 f7       	brpl	.-8      	; 0x440e <_turn_on+0x4a>
    4416:	80 95       	com	r24
    4418:	84 23       	and	r24, r20
    441a:	8c 93       	st	X, r24
    441c:	08 95       	ret
    441e:	fc 01       	movw	r30, r24
    4420:	ee 0f       	add	r30, r30
    4422:	ff 1f       	adc	r31, r31
    4424:	df 01       	movw	r26, r30
    4426:	a8 0f       	add	r26, r24
    4428:	b9 1f       	adc	r27, r25
    442a:	aa 0f       	add	r26, r26
    442c:	bb 1f       	adc	r27, r27
    442e:	a8 5e       	subi	r26, 0xE8	; 232
    4430:	bc 4e       	sbci	r27, 0xEC	; 236
    4432:	0d 90       	ld	r0, X+
    4434:	bc 91       	ld	r27, X
    4436:	a0 2d       	mov	r26, r0
    4438:	2c 91       	ld	r18, X
    443a:	e8 0f       	add	r30, r24
    443c:	f9 1f       	adc	r31, r25
    443e:	ee 0f       	add	r30, r30
    4440:	ff 1f       	adc	r31, r31
    4442:	e8 5e       	subi	r30, 0xE8	; 232
    4444:	fc 4e       	sbci	r31, 0xEC	; 236
    4446:	81 e0       	ldi	r24, 0x01	; 1
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	02 80       	ldd	r0, Z+2	; 0x02
    444c:	02 c0       	rjmp	.+4      	; 0x4452 <_turn_on+0x8e>
    444e:	88 0f       	add	r24, r24
    4450:	99 1f       	adc	r25, r25
    4452:	0a 94       	dec	r0
    4454:	e2 f7       	brpl	.-8      	; 0x444e <_turn_on+0x8a>
    4456:	82 2b       	or	r24, r18
    4458:	8c 93       	st	X, r24
    445a:	08 95       	ret

0000445c <_hal_led_task>:
    445c:	cc 24       	eor	r12, r12
    445e:	c3 94       	inc	r12
    4460:	d1 2c       	mov	r13, r1
    4462:	68 94       	set
    4464:	bb 24       	eor	r11, r11
    4466:	b2 f8       	bld	r11, 2
    4468:	c8 e1       	ldi	r28, 0x18	; 24
    446a:	d3 e1       	ldi	r29, 0x13	; 19
    446c:	10 e0       	ldi	r17, 0x00	; 0
    446e:	8c 81       	ldd	r24, Y+4	; 0x04
    4470:	81 30       	cpi	r24, 0x01	; 1
    4472:	81 f0       	breq	.+32     	; 0x4494 <_hal_led_task+0x38>
    4474:	18 f1       	brcs	.+70     	; 0x44bc <_hal_led_task+0x60>
    4476:	82 30       	cpi	r24, 0x02	; 2
    4478:	61 f5       	brne	.+88     	; 0x44d2 <_hal_led_task+0x76>
    447a:	e8 81       	ld	r30, Y
    447c:	f9 81       	ldd	r31, Y+1	; 0x01
    447e:	20 81       	ld	r18, Z
    4480:	c6 01       	movw	r24, r12
    4482:	0a 80       	ldd	r0, Y+2	; 0x02
    4484:	02 c0       	rjmp	.+4      	; 0x448a <_hal_led_task+0x2e>
    4486:	88 0f       	add	r24, r24
    4488:	99 1f       	adc	r25, r25
    448a:	0a 94       	dec	r0
    448c:	e2 f7       	brpl	.-8      	; 0x4486 <_hal_led_task+0x2a>
    448e:	82 27       	eor	r24, r18
    4490:	80 83       	st	Z, r24
    4492:	1f c0       	rjmp	.+62     	; 0x44d2 <_hal_led_task+0x76>
    4494:	8d 81       	ldd	r24, Y+5	; 0x05
    4496:	8f 5f       	subi	r24, 0xFF	; 255
    4498:	8a 30       	cpi	r24, 0x0A	; 10
    449a:	10 f4       	brcc	.+4      	; 0x44a0 <_hal_led_task+0x44>
    449c:	8d 83       	std	Y+5, r24	; 0x05
    449e:	19 c0       	rjmp	.+50     	; 0x44d2 <_hal_led_task+0x76>
    44a0:	1d 82       	std	Y+5, r1	; 0x05
    44a2:	e8 81       	ld	r30, Y
    44a4:	f9 81       	ldd	r31, Y+1	; 0x01
    44a6:	20 81       	ld	r18, Z
    44a8:	c6 01       	movw	r24, r12
    44aa:	0a 80       	ldd	r0, Y+2	; 0x02
    44ac:	02 c0       	rjmp	.+4      	; 0x44b2 <_hal_led_task+0x56>
    44ae:	88 0f       	add	r24, r24
    44b0:	99 1f       	adc	r25, r25
    44b2:	0a 94       	dec	r0
    44b4:	e2 f7       	brpl	.-8      	; 0x44ae <_hal_led_task+0x52>
    44b6:	82 27       	eor	r24, r18
    44b8:	80 83       	st	Z, r24
    44ba:	0b c0       	rjmp	.+22     	; 0x44d2 <_hal_led_task+0x76>
    44bc:	0d 81       	ldd	r16, Y+5	; 0x05
    44be:	00 23       	and	r16, r16
    44c0:	29 f0       	breq	.+10     	; 0x44cc <_hal_led_task+0x70>
    44c2:	81 2f       	mov	r24, r17
    44c4:	7f df       	rcall	.-258    	; 0x43c4 <_turn_on>
    44c6:	01 50       	subi	r16, 0x01	; 1
    44c8:	0d 83       	std	Y+5, r16	; 0x05
    44ca:	03 c0       	rjmp	.+6      	; 0x44d2 <_hal_led_task+0x76>
    44cc:	bc 82       	std	Y+4, r11	; 0x04
    44ce:	81 2f       	mov	r24, r17
    44d0:	2d df       	rcall	.-422    	; 0x432c <_turn_off>
    44d2:	1f 5f       	subi	r17, 0xFF	; 255
    44d4:	26 96       	adiw	r28, 0x06	; 6
    44d6:	14 30       	cpi	r17, 0x04	; 4
    44d8:	51 f6       	brne	.-108    	; 0x446e <_hal_led_task+0x12>
    44da:	65 e0       	ldi	r22, 0x05	; 5
    44dc:	70 e0       	ldi	r23, 0x00	; 0
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	0e 94 0c 10 	call	0x2018	; 0x2018 <vTaskDelay>
    44e6:	c0 cf       	rjmp	.-128    	; 0x4468 <_hal_led_task+0xc>

000044e8 <status_leds_initialise>:
    44e8:	ef 92       	push	r14
    44ea:	ff 92       	push	r15
    44ec:	0f 93       	push	r16
    44ee:	1f 93       	push	r17
    44f0:	cf 93       	push	r28
    44f2:	df 93       	push	r29
    44f4:	08 2f       	mov	r16, r24
    44f6:	80 e4       	ldi	r24, 0x40	; 64
    44f8:	87 b9       	out	0x07, r24	; 7
    44fa:	c8 e1       	ldi	r28, 0x18	; 24
    44fc:	d3 e1       	ldi	r29, 0x13	; 19
    44fe:	0f 2e       	mov	r0, r31
    4500:	f8 e2       	ldi	r31, 0x28	; 40
    4502:	ef 2e       	mov	r14, r31
    4504:	f1 2c       	mov	r15, r1
    4506:	f0 2d       	mov	r31, r0
    4508:	f9 82       	std	Y+1, r15	; 0x01
    450a:	e8 82       	st	Y, r14
    450c:	86 e0       	ldi	r24, 0x06	; 6
    450e:	8a 83       	std	Y+2, r24	; 0x02
    4510:	1b 82       	std	Y+3, r1	; 0x03
    4512:	14 e0       	ldi	r17, 0x04	; 4
    4514:	1c 83       	std	Y+4, r17	; 0x04
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	09 df       	rcall	.-494    	; 0x432c <_turn_off>
    451a:	80 e8       	ldi	r24, 0x80	; 128
    451c:	87 b9       	out	0x07, r24	; 7
    451e:	ff 82       	std	Y+7, r15	; 0x07
    4520:	ee 82       	std	Y+6, r14	; 0x06
    4522:	87 e0       	ldi	r24, 0x07	; 7
    4524:	88 87       	std	Y+8, r24	; 0x08
    4526:	19 86       	std	Y+9, r1	; 0x09
    4528:	1a 87       	std	Y+10, r17	; 0x0a
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	ff de       	rcall	.-514    	; 0x432c <_turn_off>
    452e:	80 e2       	ldi	r24, 0x20	; 32
    4530:	83 bb       	out	0x13, r24	; 19
    4532:	84 e3       	ldi	r24, 0x34	; 52
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	9d 87       	std	Y+13, r25	; 0x0d
    4538:	8c 87       	std	Y+12, r24	; 0x0c
    453a:	85 e0       	ldi	r24, 0x05	; 5
    453c:	8e 87       	std	Y+14, r24	; 0x0e
    453e:	1f 86       	std	Y+15, r1	; 0x0f
    4540:	18 8b       	std	Y+16, r17	; 0x10
    4542:	82 e0       	ldi	r24, 0x02	; 2
    4544:	f3 de       	rcall	.-538    	; 0x432c <_turn_off>
    4546:	80 e1       	ldi	r24, 0x10	; 16
    4548:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    454c:	82 e0       	ldi	r24, 0x02	; 2
    454e:	91 e0       	ldi	r25, 0x01	; 1
    4550:	9b 8b       	std	Y+19, r25	; 0x13
    4552:	8a 8b       	std	Y+18, r24	; 0x12
    4554:	1c 8b       	std	Y+20, r17	; 0x14
    4556:	1d 8a       	std	Y+21, r1	; 0x15
    4558:	1e 8b       	std	Y+22, r17	; 0x16
    455a:	83 e0       	ldi	r24, 0x03	; 3
    455c:	e7 de       	rcall	.-562    	; 0x432c <_turn_off>
    455e:	e1 2c       	mov	r14, r1
    4560:	f1 2c       	mov	r15, r1
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	40 ec       	ldi	r20, 0xC0	; 192
    4568:	50 e0       	ldi	r21, 0x00	; 0
    456a:	6a ec       	ldi	r22, 0xCA	; 202
    456c:	76 e0       	ldi	r23, 0x06	; 6
    456e:	8e e2       	ldi	r24, 0x2E	; 46
    4570:	92 e2       	ldi	r25, 0x22	; 34
    4572:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <xTaskCreate>
    4576:	df 91       	pop	r29
    4578:	cf 91       	pop	r28
    457a:	1f 91       	pop	r17
    457c:	0f 91       	pop	r16
    457e:	ff 90       	pop	r15
    4580:	ef 90       	pop	r14
    4582:	08 95       	ret

00004584 <status_leds_slowBlink>:
    4584:	cf 93       	push	r28
    4586:	df 93       	push	r29
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	fc 01       	movw	r30, r24
    458c:	ee 0f       	add	r30, r30
    458e:	ff 1f       	adc	r31, r31
    4590:	df 01       	movw	r26, r30
    4592:	a8 0f       	add	r26, r24
    4594:	b9 1f       	adc	r27, r25
    4596:	aa 0f       	add	r26, r26
    4598:	bb 1f       	adc	r27, r27
    459a:	a8 5e       	subi	r26, 0xE8	; 232
    459c:	bc 4e       	sbci	r27, 0xEC	; 236
    459e:	cd 91       	ld	r28, X+
    45a0:	dc 91       	ld	r29, X
    45a2:	11 97       	sbiw	r26, 0x01	; 1
    45a4:	48 81       	ld	r20, Y
    45a6:	21 e0       	ldi	r18, 0x01	; 1
    45a8:	30 e0       	ldi	r19, 0x00	; 0
    45aa:	12 96       	adiw	r26, 0x02	; 2
    45ac:	0c 90       	ld	r0, X
    45ae:	12 97       	sbiw	r26, 0x02	; 2
    45b0:	02 c0       	rjmp	.+4      	; 0x45b6 <status_leds_slowBlink+0x32>
    45b2:	22 0f       	add	r18, r18
    45b4:	33 1f       	adc	r19, r19
    45b6:	0a 94       	dec	r0
    45b8:	e2 f7       	brpl	.-8      	; 0x45b2 <status_leds_slowBlink+0x2e>
    45ba:	24 27       	eor	r18, r20
    45bc:	28 83       	st	Y, r18
    45be:	fd 01       	movw	r30, r26
    45c0:	81 e0       	ldi	r24, 0x01	; 1
    45c2:	84 83       	std	Z+4, r24	; 0x04
    45c4:	df 91       	pop	r29
    45c6:	cf 91       	pop	r28
    45c8:	08 95       	ret

000045ca <status_leds_fastBlink>:
    45ca:	cf 93       	push	r28
    45cc:	df 93       	push	r29
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	fc 01       	movw	r30, r24
    45d2:	ee 0f       	add	r30, r30
    45d4:	ff 1f       	adc	r31, r31
    45d6:	df 01       	movw	r26, r30
    45d8:	a8 0f       	add	r26, r24
    45da:	b9 1f       	adc	r27, r25
    45dc:	aa 0f       	add	r26, r26
    45de:	bb 1f       	adc	r27, r27
    45e0:	a8 5e       	subi	r26, 0xE8	; 232
    45e2:	bc 4e       	sbci	r27, 0xEC	; 236
    45e4:	cd 91       	ld	r28, X+
    45e6:	dc 91       	ld	r29, X
    45e8:	11 97       	sbiw	r26, 0x01	; 1
    45ea:	48 81       	ld	r20, Y
    45ec:	21 e0       	ldi	r18, 0x01	; 1
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	12 96       	adiw	r26, 0x02	; 2
    45f2:	0c 90       	ld	r0, X
    45f4:	12 97       	sbiw	r26, 0x02	; 2
    45f6:	02 c0       	rjmp	.+4      	; 0x45fc <status_leds_fastBlink+0x32>
    45f8:	22 0f       	add	r18, r18
    45fa:	33 1f       	adc	r19, r19
    45fc:	0a 94       	dec	r0
    45fe:	e2 f7       	brpl	.-8      	; 0x45f8 <status_leds_fastBlink+0x2e>
    4600:	24 27       	eor	r18, r20
    4602:	28 83       	st	Y, r18
    4604:	fd 01       	movw	r30, r26
    4606:	82 e0       	ldi	r24, 0x02	; 2
    4608:	84 83       	std	Z+4, r24	; 0x04
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	08 95       	ret

00004610 <status_leds_ledOn>:
    4610:	28 2f       	mov	r18, r24
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	f9 01       	movw	r30, r18
    4616:	ee 0f       	add	r30, r30
    4618:	ff 1f       	adc	r31, r31
    461a:	e2 0f       	add	r30, r18
    461c:	f3 1f       	adc	r31, r19
    461e:	ee 0f       	add	r30, r30
    4620:	ff 1f       	adc	r31, r31
    4622:	e8 5e       	subi	r30, 0xE8	; 232
    4624:	fc 4e       	sbci	r31, 0xEC	; 236
    4626:	93 e0       	ldi	r25, 0x03	; 3
    4628:	94 83       	std	Z+4, r25	; 0x04
    462a:	cc ce       	rjmp	.-616    	; 0x43c4 <_turn_on>
    462c:	08 95       	ret

0000462e <status_leds_ledOff>:
    462e:	28 2f       	mov	r18, r24
    4630:	30 e0       	ldi	r19, 0x00	; 0
    4632:	f9 01       	movw	r30, r18
    4634:	ee 0f       	add	r30, r30
    4636:	ff 1f       	adc	r31, r31
    4638:	e2 0f       	add	r30, r18
    463a:	f3 1f       	adc	r31, r19
    463c:	ee 0f       	add	r30, r30
    463e:	ff 1f       	adc	r31, r31
    4640:	e8 5e       	subi	r30, 0xE8	; 232
    4642:	fc 4e       	sbci	r31, 0xEC	; 236
    4644:	94 e0       	ldi	r25, 0x04	; 4
    4646:	94 83       	std	Z+4, r25	; 0x04
    4648:	71 ce       	rjmp	.-798    	; 0x432c <_turn_off>
    464a:	08 95       	ret

0000464c <status_leds_longPuls>:
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	fc 01       	movw	r30, r24
    4650:	ee 0f       	add	r30, r30
    4652:	ff 1f       	adc	r31, r31
    4654:	df 01       	movw	r26, r30
    4656:	a8 0f       	add	r26, r24
    4658:	b9 1f       	adc	r27, r25
    465a:	aa 0f       	add	r26, r26
    465c:	bb 1f       	adc	r27, r27
    465e:	a8 5e       	subi	r26, 0xE8	; 232
    4660:	bc 4e       	sbci	r27, 0xEC	; 236
    4662:	24 e0       	ldi	r18, 0x04	; 4
    4664:	15 96       	adiw	r26, 0x05	; 5
    4666:	2c 93       	st	X, r18
    4668:	15 97       	sbiw	r26, 0x05	; 5
    466a:	fd 01       	movw	r30, r26
    466c:	14 82       	std	Z+4, r1	; 0x04
    466e:	08 95       	ret

00004670 <status_leds_shortPuls>:
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	fc 01       	movw	r30, r24
    4674:	ee 0f       	add	r30, r30
    4676:	ff 1f       	adc	r31, r31
    4678:	df 01       	movw	r26, r30
    467a:	a8 0f       	add	r26, r24
    467c:	b9 1f       	adc	r27, r25
    467e:	aa 0f       	add	r26, r26
    4680:	bb 1f       	adc	r27, r27
    4682:	a8 5e       	subi	r26, 0xE8	; 232
    4684:	bc 4e       	sbci	r27, 0xEC	; 236
    4686:	21 e0       	ldi	r18, 0x01	; 1
    4688:	15 96       	adiw	r26, 0x05	; 5
    468a:	2c 93       	st	X, r18
    468c:	15 97       	sbiw	r26, 0x05	; 5
    468e:	fd 01       	movw	r30, r26
    4690:	14 82       	std	Z+4, r1	; 0x04
    4692:	08 95       	ret

00004694 <fifo_init>:
    4694:	fc 01       	movw	r30, r24
    4696:	41 11       	cpse	r20, r1
    4698:	01 c0       	rjmp	.+2      	; 0x469c <fifo_init+0x8>
    469a:	2b d3       	rcall	.+1622   	; 0x4cf2 <abort>
    469c:	84 2f       	mov	r24, r20
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	9c 01       	movw	r18, r24
    46a2:	21 50       	subi	r18, 0x01	; 1
    46a4:	31 09       	sbc	r19, r1
    46a6:	82 23       	and	r24, r18
    46a8:	93 23       	and	r25, r19
    46aa:	89 2b       	or	r24, r25
    46ac:	09 f0       	breq	.+2      	; 0x46b0 <fifo_init+0x1c>
    46ae:	21 d3       	rcall	.+1602   	; 0x4cf2 <abort>
    46b0:	41 38       	cpi	r20, 0x81	; 129
    46b2:	08 f0       	brcs	.+2      	; 0x46b6 <fifo_init+0x22>
    46b4:	1e d3       	rcall	.+1596   	; 0x4cf2 <abort>
    46b6:	12 82       	std	Z+2, r1	; 0x02
    46b8:	13 82       	std	Z+3, r1	; 0x03
    46ba:	44 83       	std	Z+4, r20	; 0x04
    46bc:	44 0f       	add	r20, r20
    46be:	41 50       	subi	r20, 0x01	; 1
    46c0:	45 83       	std	Z+5, r20	; 0x05
    46c2:	71 83       	std	Z+1, r23	; 0x01
    46c4:	60 83       	st	Z, r22
    46c6:	80 e0       	ldi	r24, 0x00	; 0
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	08 95       	ret

000046cc <__subsf3>:
    46cc:	50 58       	subi	r21, 0x80	; 128

000046ce <__addsf3>:
    46ce:	bb 27       	eor	r27, r27
    46d0:	aa 27       	eor	r26, r26
    46d2:	0e d0       	rcall	.+28     	; 0x46f0 <__addsf3x>
    46d4:	48 c1       	rjmp	.+656    	; 0x4966 <__fp_round>
    46d6:	39 d1       	rcall	.+626    	; 0x494a <__fp_pscA>
    46d8:	30 f0       	brcs	.+12     	; 0x46e6 <__addsf3+0x18>
    46da:	3e d1       	rcall	.+636    	; 0x4958 <__fp_pscB>
    46dc:	20 f0       	brcs	.+8      	; 0x46e6 <__addsf3+0x18>
    46de:	31 f4       	brne	.+12     	; 0x46ec <__addsf3+0x1e>
    46e0:	9f 3f       	cpi	r25, 0xFF	; 255
    46e2:	11 f4       	brne	.+4      	; 0x46e8 <__addsf3+0x1a>
    46e4:	1e f4       	brtc	.+6      	; 0x46ec <__addsf3+0x1e>
    46e6:	2e c1       	rjmp	.+604    	; 0x4944 <__fp_nan>
    46e8:	0e f4       	brtc	.+2      	; 0x46ec <__addsf3+0x1e>
    46ea:	e0 95       	com	r30
    46ec:	e7 fb       	bst	r30, 7
    46ee:	24 c1       	rjmp	.+584    	; 0x4938 <__fp_inf>

000046f0 <__addsf3x>:
    46f0:	e9 2f       	mov	r30, r25
    46f2:	4a d1       	rcall	.+660    	; 0x4988 <__fp_split3>
    46f4:	80 f3       	brcs	.-32     	; 0x46d6 <__addsf3+0x8>
    46f6:	ba 17       	cp	r27, r26
    46f8:	62 07       	cpc	r22, r18
    46fa:	73 07       	cpc	r23, r19
    46fc:	84 07       	cpc	r24, r20
    46fe:	95 07       	cpc	r25, r21
    4700:	18 f0       	brcs	.+6      	; 0x4708 <__addsf3x+0x18>
    4702:	71 f4       	brne	.+28     	; 0x4720 <__addsf3x+0x30>
    4704:	9e f5       	brtc	.+102    	; 0x476c <__addsf3x+0x7c>
    4706:	62 c1       	rjmp	.+708    	; 0x49cc <__fp_zero>
    4708:	0e f4       	brtc	.+2      	; 0x470c <__addsf3x+0x1c>
    470a:	e0 95       	com	r30
    470c:	0b 2e       	mov	r0, r27
    470e:	ba 2f       	mov	r27, r26
    4710:	a0 2d       	mov	r26, r0
    4712:	0b 01       	movw	r0, r22
    4714:	b9 01       	movw	r22, r18
    4716:	90 01       	movw	r18, r0
    4718:	0c 01       	movw	r0, r24
    471a:	ca 01       	movw	r24, r20
    471c:	a0 01       	movw	r20, r0
    471e:	11 24       	eor	r1, r1
    4720:	ff 27       	eor	r31, r31
    4722:	59 1b       	sub	r21, r25
    4724:	99 f0       	breq	.+38     	; 0x474c <__addsf3x+0x5c>
    4726:	59 3f       	cpi	r21, 0xF9	; 249
    4728:	50 f4       	brcc	.+20     	; 0x473e <__addsf3x+0x4e>
    472a:	50 3e       	cpi	r21, 0xE0	; 224
    472c:	68 f1       	brcs	.+90     	; 0x4788 <__addsf3x+0x98>
    472e:	1a 16       	cp	r1, r26
    4730:	f0 40       	sbci	r31, 0x00	; 0
    4732:	a2 2f       	mov	r26, r18
    4734:	23 2f       	mov	r18, r19
    4736:	34 2f       	mov	r19, r20
    4738:	44 27       	eor	r20, r20
    473a:	58 5f       	subi	r21, 0xF8	; 248
    473c:	f3 cf       	rjmp	.-26     	; 0x4724 <__addsf3x+0x34>
    473e:	46 95       	lsr	r20
    4740:	37 95       	ror	r19
    4742:	27 95       	ror	r18
    4744:	a7 95       	ror	r26
    4746:	f0 40       	sbci	r31, 0x00	; 0
    4748:	53 95       	inc	r21
    474a:	c9 f7       	brne	.-14     	; 0x473e <__addsf3x+0x4e>
    474c:	7e f4       	brtc	.+30     	; 0x476c <__addsf3x+0x7c>
    474e:	1f 16       	cp	r1, r31
    4750:	ba 0b       	sbc	r27, r26
    4752:	62 0b       	sbc	r22, r18
    4754:	73 0b       	sbc	r23, r19
    4756:	84 0b       	sbc	r24, r20
    4758:	ba f0       	brmi	.+46     	; 0x4788 <__addsf3x+0x98>
    475a:	91 50       	subi	r25, 0x01	; 1
    475c:	a1 f0       	breq	.+40     	; 0x4786 <__addsf3x+0x96>
    475e:	ff 0f       	add	r31, r31
    4760:	bb 1f       	adc	r27, r27
    4762:	66 1f       	adc	r22, r22
    4764:	77 1f       	adc	r23, r23
    4766:	88 1f       	adc	r24, r24
    4768:	c2 f7       	brpl	.-16     	; 0x475a <__addsf3x+0x6a>
    476a:	0e c0       	rjmp	.+28     	; 0x4788 <__addsf3x+0x98>
    476c:	ba 0f       	add	r27, r26
    476e:	62 1f       	adc	r22, r18
    4770:	73 1f       	adc	r23, r19
    4772:	84 1f       	adc	r24, r20
    4774:	48 f4       	brcc	.+18     	; 0x4788 <__addsf3x+0x98>
    4776:	87 95       	ror	r24
    4778:	77 95       	ror	r23
    477a:	67 95       	ror	r22
    477c:	b7 95       	ror	r27
    477e:	f7 95       	ror	r31
    4780:	9e 3f       	cpi	r25, 0xFE	; 254
    4782:	08 f0       	brcs	.+2      	; 0x4786 <__addsf3x+0x96>
    4784:	b3 cf       	rjmp	.-154    	; 0x46ec <__addsf3+0x1e>
    4786:	93 95       	inc	r25
    4788:	88 0f       	add	r24, r24
    478a:	08 f0       	brcs	.+2      	; 0x478e <__addsf3x+0x9e>
    478c:	99 27       	eor	r25, r25
    478e:	ee 0f       	add	r30, r30
    4790:	97 95       	ror	r25
    4792:	87 95       	ror	r24
    4794:	08 95       	ret

00004796 <__divsf3>:
    4796:	0c d0       	rcall	.+24     	; 0x47b0 <__divsf3x>
    4798:	e6 c0       	rjmp	.+460    	; 0x4966 <__fp_round>
    479a:	de d0       	rcall	.+444    	; 0x4958 <__fp_pscB>
    479c:	40 f0       	brcs	.+16     	; 0x47ae <__divsf3+0x18>
    479e:	d5 d0       	rcall	.+426    	; 0x494a <__fp_pscA>
    47a0:	30 f0       	brcs	.+12     	; 0x47ae <__divsf3+0x18>
    47a2:	21 f4       	brne	.+8      	; 0x47ac <__divsf3+0x16>
    47a4:	5f 3f       	cpi	r21, 0xFF	; 255
    47a6:	19 f0       	breq	.+6      	; 0x47ae <__divsf3+0x18>
    47a8:	c7 c0       	rjmp	.+398    	; 0x4938 <__fp_inf>
    47aa:	51 11       	cpse	r21, r1
    47ac:	10 c1       	rjmp	.+544    	; 0x49ce <__fp_szero>
    47ae:	ca c0       	rjmp	.+404    	; 0x4944 <__fp_nan>

000047b0 <__divsf3x>:
    47b0:	eb d0       	rcall	.+470    	; 0x4988 <__fp_split3>
    47b2:	98 f3       	brcs	.-26     	; 0x479a <__divsf3+0x4>

000047b4 <__divsf3_pse>:
    47b4:	99 23       	and	r25, r25
    47b6:	c9 f3       	breq	.-14     	; 0x47aa <__divsf3+0x14>
    47b8:	55 23       	and	r21, r21
    47ba:	b1 f3       	breq	.-20     	; 0x47a8 <__divsf3+0x12>
    47bc:	95 1b       	sub	r25, r21
    47be:	55 0b       	sbc	r21, r21
    47c0:	bb 27       	eor	r27, r27
    47c2:	aa 27       	eor	r26, r26
    47c4:	62 17       	cp	r22, r18
    47c6:	73 07       	cpc	r23, r19
    47c8:	84 07       	cpc	r24, r20
    47ca:	38 f0       	brcs	.+14     	; 0x47da <__divsf3_pse+0x26>
    47cc:	9f 5f       	subi	r25, 0xFF	; 255
    47ce:	5f 4f       	sbci	r21, 0xFF	; 255
    47d0:	22 0f       	add	r18, r18
    47d2:	33 1f       	adc	r19, r19
    47d4:	44 1f       	adc	r20, r20
    47d6:	aa 1f       	adc	r26, r26
    47d8:	a9 f3       	breq	.-22     	; 0x47c4 <__divsf3_pse+0x10>
    47da:	33 d0       	rcall	.+102    	; 0x4842 <__divsf3_pse+0x8e>
    47dc:	0e 2e       	mov	r0, r30
    47de:	3a f0       	brmi	.+14     	; 0x47ee <__divsf3_pse+0x3a>
    47e0:	e0 e8       	ldi	r30, 0x80	; 128
    47e2:	30 d0       	rcall	.+96     	; 0x4844 <__divsf3_pse+0x90>
    47e4:	91 50       	subi	r25, 0x01	; 1
    47e6:	50 40       	sbci	r21, 0x00	; 0
    47e8:	e6 95       	lsr	r30
    47ea:	00 1c       	adc	r0, r0
    47ec:	ca f7       	brpl	.-14     	; 0x47e0 <__divsf3_pse+0x2c>
    47ee:	29 d0       	rcall	.+82     	; 0x4842 <__divsf3_pse+0x8e>
    47f0:	fe 2f       	mov	r31, r30
    47f2:	27 d0       	rcall	.+78     	; 0x4842 <__divsf3_pse+0x8e>
    47f4:	66 0f       	add	r22, r22
    47f6:	77 1f       	adc	r23, r23
    47f8:	88 1f       	adc	r24, r24
    47fa:	bb 1f       	adc	r27, r27
    47fc:	26 17       	cp	r18, r22
    47fe:	37 07       	cpc	r19, r23
    4800:	48 07       	cpc	r20, r24
    4802:	ab 07       	cpc	r26, r27
    4804:	b0 e8       	ldi	r27, 0x80	; 128
    4806:	09 f0       	breq	.+2      	; 0x480a <__divsf3_pse+0x56>
    4808:	bb 0b       	sbc	r27, r27
    480a:	80 2d       	mov	r24, r0
    480c:	bf 01       	movw	r22, r30
    480e:	ff 27       	eor	r31, r31
    4810:	93 58       	subi	r25, 0x83	; 131
    4812:	5f 4f       	sbci	r21, 0xFF	; 255
    4814:	2a f0       	brmi	.+10     	; 0x4820 <__divsf3_pse+0x6c>
    4816:	9e 3f       	cpi	r25, 0xFE	; 254
    4818:	51 05       	cpc	r21, r1
    481a:	68 f0       	brcs	.+26     	; 0x4836 <__divsf3_pse+0x82>
    481c:	8d c0       	rjmp	.+282    	; 0x4938 <__fp_inf>
    481e:	d7 c0       	rjmp	.+430    	; 0x49ce <__fp_szero>
    4820:	5f 3f       	cpi	r21, 0xFF	; 255
    4822:	ec f3       	brlt	.-6      	; 0x481e <__divsf3_pse+0x6a>
    4824:	98 3e       	cpi	r25, 0xE8	; 232
    4826:	dc f3       	brlt	.-10     	; 0x481e <__divsf3_pse+0x6a>
    4828:	86 95       	lsr	r24
    482a:	77 95       	ror	r23
    482c:	67 95       	ror	r22
    482e:	b7 95       	ror	r27
    4830:	f7 95       	ror	r31
    4832:	9f 5f       	subi	r25, 0xFF	; 255
    4834:	c9 f7       	brne	.-14     	; 0x4828 <__divsf3_pse+0x74>
    4836:	88 0f       	add	r24, r24
    4838:	91 1d       	adc	r25, r1
    483a:	96 95       	lsr	r25
    483c:	87 95       	ror	r24
    483e:	97 f9       	bld	r25, 7
    4840:	08 95       	ret
    4842:	e1 e0       	ldi	r30, 0x01	; 1
    4844:	66 0f       	add	r22, r22
    4846:	77 1f       	adc	r23, r23
    4848:	88 1f       	adc	r24, r24
    484a:	bb 1f       	adc	r27, r27
    484c:	62 17       	cp	r22, r18
    484e:	73 07       	cpc	r23, r19
    4850:	84 07       	cpc	r24, r20
    4852:	ba 07       	cpc	r27, r26
    4854:	20 f0       	brcs	.+8      	; 0x485e <__divsf3_pse+0xaa>
    4856:	62 1b       	sub	r22, r18
    4858:	73 0b       	sbc	r23, r19
    485a:	84 0b       	sbc	r24, r20
    485c:	ba 0b       	sbc	r27, r26
    485e:	ee 1f       	adc	r30, r30
    4860:	88 f7       	brcc	.-30     	; 0x4844 <__divsf3_pse+0x90>
    4862:	e0 95       	com	r30
    4864:	08 95       	ret

00004866 <__fixunssfsi>:
    4866:	98 d0       	rcall	.+304    	; 0x4998 <__fp_splitA>
    4868:	88 f0       	brcs	.+34     	; 0x488c <__fixunssfsi+0x26>
    486a:	9f 57       	subi	r25, 0x7F	; 127
    486c:	90 f0       	brcs	.+36     	; 0x4892 <__fixunssfsi+0x2c>
    486e:	b9 2f       	mov	r27, r25
    4870:	99 27       	eor	r25, r25
    4872:	b7 51       	subi	r27, 0x17	; 23
    4874:	a0 f0       	brcs	.+40     	; 0x489e <__fixunssfsi+0x38>
    4876:	d1 f0       	breq	.+52     	; 0x48ac <__fixunssfsi+0x46>
    4878:	66 0f       	add	r22, r22
    487a:	77 1f       	adc	r23, r23
    487c:	88 1f       	adc	r24, r24
    487e:	99 1f       	adc	r25, r25
    4880:	1a f0       	brmi	.+6      	; 0x4888 <__fixunssfsi+0x22>
    4882:	ba 95       	dec	r27
    4884:	c9 f7       	brne	.-14     	; 0x4878 <__fixunssfsi+0x12>
    4886:	12 c0       	rjmp	.+36     	; 0x48ac <__fixunssfsi+0x46>
    4888:	b1 30       	cpi	r27, 0x01	; 1
    488a:	81 f0       	breq	.+32     	; 0x48ac <__fixunssfsi+0x46>
    488c:	9f d0       	rcall	.+318    	; 0x49cc <__fp_zero>
    488e:	b1 e0       	ldi	r27, 0x01	; 1
    4890:	08 95       	ret
    4892:	9c c0       	rjmp	.+312    	; 0x49cc <__fp_zero>
    4894:	67 2f       	mov	r22, r23
    4896:	78 2f       	mov	r23, r24
    4898:	88 27       	eor	r24, r24
    489a:	b8 5f       	subi	r27, 0xF8	; 248
    489c:	39 f0       	breq	.+14     	; 0x48ac <__fixunssfsi+0x46>
    489e:	b9 3f       	cpi	r27, 0xF9	; 249
    48a0:	cc f3       	brlt	.-14     	; 0x4894 <__fixunssfsi+0x2e>
    48a2:	86 95       	lsr	r24
    48a4:	77 95       	ror	r23
    48a6:	67 95       	ror	r22
    48a8:	b3 95       	inc	r27
    48aa:	d9 f7       	brne	.-10     	; 0x48a2 <__fixunssfsi+0x3c>
    48ac:	3e f4       	brtc	.+14     	; 0x48bc <__fixunssfsi+0x56>
    48ae:	90 95       	com	r25
    48b0:	80 95       	com	r24
    48b2:	70 95       	com	r23
    48b4:	61 95       	neg	r22
    48b6:	7f 4f       	sbci	r23, 0xFF	; 255
    48b8:	8f 4f       	sbci	r24, 0xFF	; 255
    48ba:	9f 4f       	sbci	r25, 0xFF	; 255
    48bc:	08 95       	ret

000048be <__floatunsisf>:
    48be:	e8 94       	clt
    48c0:	09 c0       	rjmp	.+18     	; 0x48d4 <__floatsisf+0x12>

000048c2 <__floatsisf>:
    48c2:	97 fb       	bst	r25, 7
    48c4:	3e f4       	brtc	.+14     	; 0x48d4 <__floatsisf+0x12>
    48c6:	90 95       	com	r25
    48c8:	80 95       	com	r24
    48ca:	70 95       	com	r23
    48cc:	61 95       	neg	r22
    48ce:	7f 4f       	sbci	r23, 0xFF	; 255
    48d0:	8f 4f       	sbci	r24, 0xFF	; 255
    48d2:	9f 4f       	sbci	r25, 0xFF	; 255
    48d4:	99 23       	and	r25, r25
    48d6:	a9 f0       	breq	.+42     	; 0x4902 <__floatsisf+0x40>
    48d8:	f9 2f       	mov	r31, r25
    48da:	96 e9       	ldi	r25, 0x96	; 150
    48dc:	bb 27       	eor	r27, r27
    48de:	93 95       	inc	r25
    48e0:	f6 95       	lsr	r31
    48e2:	87 95       	ror	r24
    48e4:	77 95       	ror	r23
    48e6:	67 95       	ror	r22
    48e8:	b7 95       	ror	r27
    48ea:	f1 11       	cpse	r31, r1
    48ec:	f8 cf       	rjmp	.-16     	; 0x48de <__floatsisf+0x1c>
    48ee:	fa f4       	brpl	.+62     	; 0x492e <__floatsisf+0x6c>
    48f0:	bb 0f       	add	r27, r27
    48f2:	11 f4       	brne	.+4      	; 0x48f8 <__floatsisf+0x36>
    48f4:	60 ff       	sbrs	r22, 0
    48f6:	1b c0       	rjmp	.+54     	; 0x492e <__floatsisf+0x6c>
    48f8:	6f 5f       	subi	r22, 0xFF	; 255
    48fa:	7f 4f       	sbci	r23, 0xFF	; 255
    48fc:	8f 4f       	sbci	r24, 0xFF	; 255
    48fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4900:	16 c0       	rjmp	.+44     	; 0x492e <__floatsisf+0x6c>
    4902:	88 23       	and	r24, r24
    4904:	11 f0       	breq	.+4      	; 0x490a <__floatsisf+0x48>
    4906:	96 e9       	ldi	r25, 0x96	; 150
    4908:	11 c0       	rjmp	.+34     	; 0x492c <__floatsisf+0x6a>
    490a:	77 23       	and	r23, r23
    490c:	21 f0       	breq	.+8      	; 0x4916 <__floatsisf+0x54>
    490e:	9e e8       	ldi	r25, 0x8E	; 142
    4910:	87 2f       	mov	r24, r23
    4912:	76 2f       	mov	r23, r22
    4914:	05 c0       	rjmp	.+10     	; 0x4920 <__floatsisf+0x5e>
    4916:	66 23       	and	r22, r22
    4918:	71 f0       	breq	.+28     	; 0x4936 <__floatsisf+0x74>
    491a:	96 e8       	ldi	r25, 0x86	; 134
    491c:	86 2f       	mov	r24, r22
    491e:	70 e0       	ldi	r23, 0x00	; 0
    4920:	60 e0       	ldi	r22, 0x00	; 0
    4922:	2a f0       	brmi	.+10     	; 0x492e <__floatsisf+0x6c>
    4924:	9a 95       	dec	r25
    4926:	66 0f       	add	r22, r22
    4928:	77 1f       	adc	r23, r23
    492a:	88 1f       	adc	r24, r24
    492c:	da f7       	brpl	.-10     	; 0x4924 <__floatsisf+0x62>
    492e:	88 0f       	add	r24, r24
    4930:	96 95       	lsr	r25
    4932:	87 95       	ror	r24
    4934:	97 f9       	bld	r25, 7
    4936:	08 95       	ret

00004938 <__fp_inf>:
    4938:	97 f9       	bld	r25, 7
    493a:	9f 67       	ori	r25, 0x7F	; 127
    493c:	80 e8       	ldi	r24, 0x80	; 128
    493e:	70 e0       	ldi	r23, 0x00	; 0
    4940:	60 e0       	ldi	r22, 0x00	; 0
    4942:	08 95       	ret

00004944 <__fp_nan>:
    4944:	9f ef       	ldi	r25, 0xFF	; 255
    4946:	80 ec       	ldi	r24, 0xC0	; 192
    4948:	08 95       	ret

0000494a <__fp_pscA>:
    494a:	00 24       	eor	r0, r0
    494c:	0a 94       	dec	r0
    494e:	16 16       	cp	r1, r22
    4950:	17 06       	cpc	r1, r23
    4952:	18 06       	cpc	r1, r24
    4954:	09 06       	cpc	r0, r25
    4956:	08 95       	ret

00004958 <__fp_pscB>:
    4958:	00 24       	eor	r0, r0
    495a:	0a 94       	dec	r0
    495c:	12 16       	cp	r1, r18
    495e:	13 06       	cpc	r1, r19
    4960:	14 06       	cpc	r1, r20
    4962:	05 06       	cpc	r0, r21
    4964:	08 95       	ret

00004966 <__fp_round>:
    4966:	09 2e       	mov	r0, r25
    4968:	03 94       	inc	r0
    496a:	00 0c       	add	r0, r0
    496c:	11 f4       	brne	.+4      	; 0x4972 <__fp_round+0xc>
    496e:	88 23       	and	r24, r24
    4970:	52 f0       	brmi	.+20     	; 0x4986 <__fp_round+0x20>
    4972:	bb 0f       	add	r27, r27
    4974:	40 f4       	brcc	.+16     	; 0x4986 <__fp_round+0x20>
    4976:	bf 2b       	or	r27, r31
    4978:	11 f4       	brne	.+4      	; 0x497e <__fp_round+0x18>
    497a:	60 ff       	sbrs	r22, 0
    497c:	04 c0       	rjmp	.+8      	; 0x4986 <__fp_round+0x20>
    497e:	6f 5f       	subi	r22, 0xFF	; 255
    4980:	7f 4f       	sbci	r23, 0xFF	; 255
    4982:	8f 4f       	sbci	r24, 0xFF	; 255
    4984:	9f 4f       	sbci	r25, 0xFF	; 255
    4986:	08 95       	ret

00004988 <__fp_split3>:
    4988:	57 fd       	sbrc	r21, 7
    498a:	90 58       	subi	r25, 0x80	; 128
    498c:	44 0f       	add	r20, r20
    498e:	55 1f       	adc	r21, r21
    4990:	59 f0       	breq	.+22     	; 0x49a8 <__fp_splitA+0x10>
    4992:	5f 3f       	cpi	r21, 0xFF	; 255
    4994:	71 f0       	breq	.+28     	; 0x49b2 <__fp_splitA+0x1a>
    4996:	47 95       	ror	r20

00004998 <__fp_splitA>:
    4998:	88 0f       	add	r24, r24
    499a:	97 fb       	bst	r25, 7
    499c:	99 1f       	adc	r25, r25
    499e:	61 f0       	breq	.+24     	; 0x49b8 <__fp_splitA+0x20>
    49a0:	9f 3f       	cpi	r25, 0xFF	; 255
    49a2:	79 f0       	breq	.+30     	; 0x49c2 <__fp_splitA+0x2a>
    49a4:	87 95       	ror	r24
    49a6:	08 95       	ret
    49a8:	12 16       	cp	r1, r18
    49aa:	13 06       	cpc	r1, r19
    49ac:	14 06       	cpc	r1, r20
    49ae:	55 1f       	adc	r21, r21
    49b0:	f2 cf       	rjmp	.-28     	; 0x4996 <__fp_split3+0xe>
    49b2:	46 95       	lsr	r20
    49b4:	f1 df       	rcall	.-30     	; 0x4998 <__fp_splitA>
    49b6:	08 c0       	rjmp	.+16     	; 0x49c8 <__fp_splitA+0x30>
    49b8:	16 16       	cp	r1, r22
    49ba:	17 06       	cpc	r1, r23
    49bc:	18 06       	cpc	r1, r24
    49be:	99 1f       	adc	r25, r25
    49c0:	f1 cf       	rjmp	.-30     	; 0x49a4 <__fp_splitA+0xc>
    49c2:	86 95       	lsr	r24
    49c4:	71 05       	cpc	r23, r1
    49c6:	61 05       	cpc	r22, r1
    49c8:	08 94       	sec
    49ca:	08 95       	ret

000049cc <__fp_zero>:
    49cc:	e8 94       	clt

000049ce <__fp_szero>:
    49ce:	bb 27       	eor	r27, r27
    49d0:	66 27       	eor	r22, r22
    49d2:	77 27       	eor	r23, r23
    49d4:	cb 01       	movw	r24, r22
    49d6:	97 f9       	bld	r25, 7
    49d8:	08 95       	ret

000049da <__mulsf3>:
    49da:	0b d0       	rcall	.+22     	; 0x49f2 <__mulsf3x>
    49dc:	c4 cf       	rjmp	.-120    	; 0x4966 <__fp_round>
    49de:	b5 df       	rcall	.-150    	; 0x494a <__fp_pscA>
    49e0:	28 f0       	brcs	.+10     	; 0x49ec <__mulsf3+0x12>
    49e2:	ba df       	rcall	.-140    	; 0x4958 <__fp_pscB>
    49e4:	18 f0       	brcs	.+6      	; 0x49ec <__mulsf3+0x12>
    49e6:	95 23       	and	r25, r21
    49e8:	09 f0       	breq	.+2      	; 0x49ec <__mulsf3+0x12>
    49ea:	a6 cf       	rjmp	.-180    	; 0x4938 <__fp_inf>
    49ec:	ab cf       	rjmp	.-170    	; 0x4944 <__fp_nan>
    49ee:	11 24       	eor	r1, r1
    49f0:	ee cf       	rjmp	.-36     	; 0x49ce <__fp_szero>

000049f2 <__mulsf3x>:
    49f2:	ca df       	rcall	.-108    	; 0x4988 <__fp_split3>
    49f4:	a0 f3       	brcs	.-24     	; 0x49de <__mulsf3+0x4>

000049f6 <__mulsf3_pse>:
    49f6:	95 9f       	mul	r25, r21
    49f8:	d1 f3       	breq	.-12     	; 0x49ee <__mulsf3+0x14>
    49fa:	95 0f       	add	r25, r21
    49fc:	50 e0       	ldi	r21, 0x00	; 0
    49fe:	55 1f       	adc	r21, r21
    4a00:	62 9f       	mul	r22, r18
    4a02:	f0 01       	movw	r30, r0
    4a04:	72 9f       	mul	r23, r18
    4a06:	bb 27       	eor	r27, r27
    4a08:	f0 0d       	add	r31, r0
    4a0a:	b1 1d       	adc	r27, r1
    4a0c:	63 9f       	mul	r22, r19
    4a0e:	aa 27       	eor	r26, r26
    4a10:	f0 0d       	add	r31, r0
    4a12:	b1 1d       	adc	r27, r1
    4a14:	aa 1f       	adc	r26, r26
    4a16:	64 9f       	mul	r22, r20
    4a18:	66 27       	eor	r22, r22
    4a1a:	b0 0d       	add	r27, r0
    4a1c:	a1 1d       	adc	r26, r1
    4a1e:	66 1f       	adc	r22, r22
    4a20:	82 9f       	mul	r24, r18
    4a22:	22 27       	eor	r18, r18
    4a24:	b0 0d       	add	r27, r0
    4a26:	a1 1d       	adc	r26, r1
    4a28:	62 1f       	adc	r22, r18
    4a2a:	73 9f       	mul	r23, r19
    4a2c:	b0 0d       	add	r27, r0
    4a2e:	a1 1d       	adc	r26, r1
    4a30:	62 1f       	adc	r22, r18
    4a32:	83 9f       	mul	r24, r19
    4a34:	a0 0d       	add	r26, r0
    4a36:	61 1d       	adc	r22, r1
    4a38:	22 1f       	adc	r18, r18
    4a3a:	74 9f       	mul	r23, r20
    4a3c:	33 27       	eor	r19, r19
    4a3e:	a0 0d       	add	r26, r0
    4a40:	61 1d       	adc	r22, r1
    4a42:	23 1f       	adc	r18, r19
    4a44:	84 9f       	mul	r24, r20
    4a46:	60 0d       	add	r22, r0
    4a48:	21 1d       	adc	r18, r1
    4a4a:	82 2f       	mov	r24, r18
    4a4c:	76 2f       	mov	r23, r22
    4a4e:	6a 2f       	mov	r22, r26
    4a50:	11 24       	eor	r1, r1
    4a52:	9f 57       	subi	r25, 0x7F	; 127
    4a54:	50 40       	sbci	r21, 0x00	; 0
    4a56:	8a f0       	brmi	.+34     	; 0x4a7a <__mulsf3_pse+0x84>
    4a58:	e1 f0       	breq	.+56     	; 0x4a92 <__mulsf3_pse+0x9c>
    4a5a:	88 23       	and	r24, r24
    4a5c:	4a f0       	brmi	.+18     	; 0x4a70 <__mulsf3_pse+0x7a>
    4a5e:	ee 0f       	add	r30, r30
    4a60:	ff 1f       	adc	r31, r31
    4a62:	bb 1f       	adc	r27, r27
    4a64:	66 1f       	adc	r22, r22
    4a66:	77 1f       	adc	r23, r23
    4a68:	88 1f       	adc	r24, r24
    4a6a:	91 50       	subi	r25, 0x01	; 1
    4a6c:	50 40       	sbci	r21, 0x00	; 0
    4a6e:	a9 f7       	brne	.-22     	; 0x4a5a <__mulsf3_pse+0x64>
    4a70:	9e 3f       	cpi	r25, 0xFE	; 254
    4a72:	51 05       	cpc	r21, r1
    4a74:	70 f0       	brcs	.+28     	; 0x4a92 <__mulsf3_pse+0x9c>
    4a76:	60 cf       	rjmp	.-320    	; 0x4938 <__fp_inf>
    4a78:	aa cf       	rjmp	.-172    	; 0x49ce <__fp_szero>
    4a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    4a7c:	ec f3       	brlt	.-6      	; 0x4a78 <__mulsf3_pse+0x82>
    4a7e:	98 3e       	cpi	r25, 0xE8	; 232
    4a80:	dc f3       	brlt	.-10     	; 0x4a78 <__mulsf3_pse+0x82>
    4a82:	86 95       	lsr	r24
    4a84:	77 95       	ror	r23
    4a86:	67 95       	ror	r22
    4a88:	b7 95       	ror	r27
    4a8a:	f7 95       	ror	r31
    4a8c:	e7 95       	ror	r30
    4a8e:	9f 5f       	subi	r25, 0xFF	; 255
    4a90:	c1 f7       	brne	.-16     	; 0x4a82 <__mulsf3_pse+0x8c>
    4a92:	fe 2b       	or	r31, r30
    4a94:	88 0f       	add	r24, r24
    4a96:	91 1d       	adc	r25, r1
    4a98:	96 95       	lsr	r25
    4a9a:	87 95       	ror	r24
    4a9c:	97 f9       	bld	r25, 7
    4a9e:	08 95       	ret

00004aa0 <__tablejump2__>:
    4aa0:	ee 0f       	add	r30, r30
    4aa2:	ff 1f       	adc	r31, r31
    4aa4:	88 1f       	adc	r24, r24
    4aa6:	8b bf       	out	0x3b, r24	; 59
    4aa8:	07 90       	elpm	r0, Z+
    4aaa:	f6 91       	elpm	r31, Z
    4aac:	e0 2d       	mov	r30, r0
    4aae:	19 94       	eijmp

00004ab0 <malloc>:
    4ab0:	0f 93       	push	r16
    4ab2:	1f 93       	push	r17
    4ab4:	cf 93       	push	r28
    4ab6:	df 93       	push	r29
    4ab8:	82 30       	cpi	r24, 0x02	; 2
    4aba:	91 05       	cpc	r25, r1
    4abc:	10 f4       	brcc	.+4      	; 0x4ac2 <malloc+0x12>
    4abe:	82 e0       	ldi	r24, 0x02	; 2
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	e0 91 36 13 	lds	r30, 0x1336	; 0x801336 <__flp>
    4ac6:	f0 91 37 13 	lds	r31, 0x1337	; 0x801337 <__flp+0x1>
    4aca:	20 e0       	ldi	r18, 0x00	; 0
    4acc:	30 e0       	ldi	r19, 0x00	; 0
    4ace:	a0 e0       	ldi	r26, 0x00	; 0
    4ad0:	b0 e0       	ldi	r27, 0x00	; 0
    4ad2:	30 97       	sbiw	r30, 0x00	; 0
    4ad4:	19 f1       	breq	.+70     	; 0x4b1c <malloc+0x6c>
    4ad6:	40 81       	ld	r20, Z
    4ad8:	51 81       	ldd	r21, Z+1	; 0x01
    4ada:	02 81       	ldd	r16, Z+2	; 0x02
    4adc:	13 81       	ldd	r17, Z+3	; 0x03
    4ade:	48 17       	cp	r20, r24
    4ae0:	59 07       	cpc	r21, r25
    4ae2:	c8 f0       	brcs	.+50     	; 0x4b16 <malloc+0x66>
    4ae4:	84 17       	cp	r24, r20
    4ae6:	95 07       	cpc	r25, r21
    4ae8:	69 f4       	brne	.+26     	; 0x4b04 <malloc+0x54>
    4aea:	10 97       	sbiw	r26, 0x00	; 0
    4aec:	31 f0       	breq	.+12     	; 0x4afa <malloc+0x4a>
    4aee:	12 96       	adiw	r26, 0x02	; 2
    4af0:	0c 93       	st	X, r16
    4af2:	12 97       	sbiw	r26, 0x02	; 2
    4af4:	13 96       	adiw	r26, 0x03	; 3
    4af6:	1c 93       	st	X, r17
    4af8:	27 c0       	rjmp	.+78     	; 0x4b48 <malloc+0x98>
    4afa:	00 93 36 13 	sts	0x1336, r16	; 0x801336 <__flp>
    4afe:	10 93 37 13 	sts	0x1337, r17	; 0x801337 <__flp+0x1>
    4b02:	22 c0       	rjmp	.+68     	; 0x4b48 <malloc+0x98>
    4b04:	21 15       	cp	r18, r1
    4b06:	31 05       	cpc	r19, r1
    4b08:	19 f0       	breq	.+6      	; 0x4b10 <malloc+0x60>
    4b0a:	42 17       	cp	r20, r18
    4b0c:	53 07       	cpc	r21, r19
    4b0e:	18 f4       	brcc	.+6      	; 0x4b16 <malloc+0x66>
    4b10:	9a 01       	movw	r18, r20
    4b12:	bd 01       	movw	r22, r26
    4b14:	ef 01       	movw	r28, r30
    4b16:	df 01       	movw	r26, r30
    4b18:	f8 01       	movw	r30, r16
    4b1a:	db cf       	rjmp	.-74     	; 0x4ad2 <malloc+0x22>
    4b1c:	21 15       	cp	r18, r1
    4b1e:	31 05       	cpc	r19, r1
    4b20:	f9 f0       	breq	.+62     	; 0x4b60 <malloc+0xb0>
    4b22:	28 1b       	sub	r18, r24
    4b24:	39 0b       	sbc	r19, r25
    4b26:	24 30       	cpi	r18, 0x04	; 4
    4b28:	31 05       	cpc	r19, r1
    4b2a:	80 f4       	brcc	.+32     	; 0x4b4c <malloc+0x9c>
    4b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4b30:	61 15       	cp	r22, r1
    4b32:	71 05       	cpc	r23, r1
    4b34:	21 f0       	breq	.+8      	; 0x4b3e <malloc+0x8e>
    4b36:	fb 01       	movw	r30, r22
    4b38:	93 83       	std	Z+3, r25	; 0x03
    4b3a:	82 83       	std	Z+2, r24	; 0x02
    4b3c:	04 c0       	rjmp	.+8      	; 0x4b46 <malloc+0x96>
    4b3e:	90 93 37 13 	sts	0x1337, r25	; 0x801337 <__flp+0x1>
    4b42:	80 93 36 13 	sts	0x1336, r24	; 0x801336 <__flp>
    4b46:	fe 01       	movw	r30, r28
    4b48:	32 96       	adiw	r30, 0x02	; 2
    4b4a:	44 c0       	rjmp	.+136    	; 0x4bd4 <malloc+0x124>
    4b4c:	fe 01       	movw	r30, r28
    4b4e:	e2 0f       	add	r30, r18
    4b50:	f3 1f       	adc	r31, r19
    4b52:	81 93       	st	Z+, r24
    4b54:	91 93       	st	Z+, r25
    4b56:	22 50       	subi	r18, 0x02	; 2
    4b58:	31 09       	sbc	r19, r1
    4b5a:	39 83       	std	Y+1, r19	; 0x01
    4b5c:	28 83       	st	Y, r18
    4b5e:	3a c0       	rjmp	.+116    	; 0x4bd4 <malloc+0x124>
    4b60:	20 91 34 13 	lds	r18, 0x1334	; 0x801334 <__brkval>
    4b64:	30 91 35 13 	lds	r19, 0x1335	; 0x801335 <__brkval+0x1>
    4b68:	23 2b       	or	r18, r19
    4b6a:	41 f4       	brne	.+16     	; 0x4b7c <malloc+0xcc>
    4b6c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4b70:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4b74:	30 93 35 13 	sts	0x1335, r19	; 0x801335 <__brkval+0x1>
    4b78:	20 93 34 13 	sts	0x1334, r18	; 0x801334 <__brkval>
    4b7c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    4b80:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    4b84:	21 15       	cp	r18, r1
    4b86:	31 05       	cpc	r19, r1
    4b88:	41 f4       	brne	.+16     	; 0x4b9a <malloc+0xea>
    4b8a:	2d b7       	in	r18, 0x3d	; 61
    4b8c:	3e b7       	in	r19, 0x3e	; 62
    4b8e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4b92:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4b96:	24 1b       	sub	r18, r20
    4b98:	35 0b       	sbc	r19, r21
    4b9a:	e0 91 34 13 	lds	r30, 0x1334	; 0x801334 <__brkval>
    4b9e:	f0 91 35 13 	lds	r31, 0x1335	; 0x801335 <__brkval+0x1>
    4ba2:	e2 17       	cp	r30, r18
    4ba4:	f3 07       	cpc	r31, r19
    4ba6:	a0 f4       	brcc	.+40     	; 0x4bd0 <malloc+0x120>
    4ba8:	2e 1b       	sub	r18, r30
    4baa:	3f 0b       	sbc	r19, r31
    4bac:	28 17       	cp	r18, r24
    4bae:	39 07       	cpc	r19, r25
    4bb0:	78 f0       	brcs	.+30     	; 0x4bd0 <malloc+0x120>
    4bb2:	ac 01       	movw	r20, r24
    4bb4:	4e 5f       	subi	r20, 0xFE	; 254
    4bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    4bb8:	24 17       	cp	r18, r20
    4bba:	35 07       	cpc	r19, r21
    4bbc:	48 f0       	brcs	.+18     	; 0x4bd0 <malloc+0x120>
    4bbe:	4e 0f       	add	r20, r30
    4bc0:	5f 1f       	adc	r21, r31
    4bc2:	50 93 35 13 	sts	0x1335, r21	; 0x801335 <__brkval+0x1>
    4bc6:	40 93 34 13 	sts	0x1334, r20	; 0x801334 <__brkval>
    4bca:	81 93       	st	Z+, r24
    4bcc:	91 93       	st	Z+, r25
    4bce:	02 c0       	rjmp	.+4      	; 0x4bd4 <malloc+0x124>
    4bd0:	e0 e0       	ldi	r30, 0x00	; 0
    4bd2:	f0 e0       	ldi	r31, 0x00	; 0
    4bd4:	cf 01       	movw	r24, r30
    4bd6:	df 91       	pop	r29
    4bd8:	cf 91       	pop	r28
    4bda:	1f 91       	pop	r17
    4bdc:	0f 91       	pop	r16
    4bde:	08 95       	ret

00004be0 <free>:
    4be0:	cf 93       	push	r28
    4be2:	df 93       	push	r29
    4be4:	00 97       	sbiw	r24, 0x00	; 0
    4be6:	09 f4       	brne	.+2      	; 0x4bea <free+0xa>
    4be8:	81 c0       	rjmp	.+258    	; 0x4cec <free+0x10c>
    4bea:	fc 01       	movw	r30, r24
    4bec:	32 97       	sbiw	r30, 0x02	; 2
    4bee:	13 82       	std	Z+3, r1	; 0x03
    4bf0:	12 82       	std	Z+2, r1	; 0x02
    4bf2:	a0 91 36 13 	lds	r26, 0x1336	; 0x801336 <__flp>
    4bf6:	b0 91 37 13 	lds	r27, 0x1337	; 0x801337 <__flp+0x1>
    4bfa:	10 97       	sbiw	r26, 0x00	; 0
    4bfc:	81 f4       	brne	.+32     	; 0x4c1e <free+0x3e>
    4bfe:	20 81       	ld	r18, Z
    4c00:	31 81       	ldd	r19, Z+1	; 0x01
    4c02:	82 0f       	add	r24, r18
    4c04:	93 1f       	adc	r25, r19
    4c06:	20 91 34 13 	lds	r18, 0x1334	; 0x801334 <__brkval>
    4c0a:	30 91 35 13 	lds	r19, 0x1335	; 0x801335 <__brkval+0x1>
    4c0e:	28 17       	cp	r18, r24
    4c10:	39 07       	cpc	r19, r25
    4c12:	51 f5       	brne	.+84     	; 0x4c68 <free+0x88>
    4c14:	f0 93 35 13 	sts	0x1335, r31	; 0x801335 <__brkval+0x1>
    4c18:	e0 93 34 13 	sts	0x1334, r30	; 0x801334 <__brkval>
    4c1c:	67 c0       	rjmp	.+206    	; 0x4cec <free+0x10c>
    4c1e:	ed 01       	movw	r28, r26
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	ce 17       	cp	r28, r30
    4c26:	df 07       	cpc	r29, r31
    4c28:	40 f4       	brcc	.+16     	; 0x4c3a <free+0x5a>
    4c2a:	4a 81       	ldd	r20, Y+2	; 0x02
    4c2c:	5b 81       	ldd	r21, Y+3	; 0x03
    4c2e:	9e 01       	movw	r18, r28
    4c30:	41 15       	cp	r20, r1
    4c32:	51 05       	cpc	r21, r1
    4c34:	f1 f0       	breq	.+60     	; 0x4c72 <free+0x92>
    4c36:	ea 01       	movw	r28, r20
    4c38:	f5 cf       	rjmp	.-22     	; 0x4c24 <free+0x44>
    4c3a:	d3 83       	std	Z+3, r29	; 0x03
    4c3c:	c2 83       	std	Z+2, r28	; 0x02
    4c3e:	40 81       	ld	r20, Z
    4c40:	51 81       	ldd	r21, Z+1	; 0x01
    4c42:	84 0f       	add	r24, r20
    4c44:	95 1f       	adc	r25, r21
    4c46:	c8 17       	cp	r28, r24
    4c48:	d9 07       	cpc	r29, r25
    4c4a:	59 f4       	brne	.+22     	; 0x4c62 <free+0x82>
    4c4c:	88 81       	ld	r24, Y
    4c4e:	99 81       	ldd	r25, Y+1	; 0x01
    4c50:	84 0f       	add	r24, r20
    4c52:	95 1f       	adc	r25, r21
    4c54:	02 96       	adiw	r24, 0x02	; 2
    4c56:	91 83       	std	Z+1, r25	; 0x01
    4c58:	80 83       	st	Z, r24
    4c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    4c5e:	93 83       	std	Z+3, r25	; 0x03
    4c60:	82 83       	std	Z+2, r24	; 0x02
    4c62:	21 15       	cp	r18, r1
    4c64:	31 05       	cpc	r19, r1
    4c66:	29 f4       	brne	.+10     	; 0x4c72 <free+0x92>
    4c68:	f0 93 37 13 	sts	0x1337, r31	; 0x801337 <__flp+0x1>
    4c6c:	e0 93 36 13 	sts	0x1336, r30	; 0x801336 <__flp>
    4c70:	3d c0       	rjmp	.+122    	; 0x4cec <free+0x10c>
    4c72:	e9 01       	movw	r28, r18
    4c74:	fb 83       	std	Y+3, r31	; 0x03
    4c76:	ea 83       	std	Y+2, r30	; 0x02
    4c78:	49 91       	ld	r20, Y+
    4c7a:	59 91       	ld	r21, Y+
    4c7c:	c4 0f       	add	r28, r20
    4c7e:	d5 1f       	adc	r29, r21
    4c80:	ec 17       	cp	r30, r28
    4c82:	fd 07       	cpc	r31, r29
    4c84:	61 f4       	brne	.+24     	; 0x4c9e <free+0xbe>
    4c86:	80 81       	ld	r24, Z
    4c88:	91 81       	ldd	r25, Z+1	; 0x01
    4c8a:	84 0f       	add	r24, r20
    4c8c:	95 1f       	adc	r25, r21
    4c8e:	02 96       	adiw	r24, 0x02	; 2
    4c90:	e9 01       	movw	r28, r18
    4c92:	99 83       	std	Y+1, r25	; 0x01
    4c94:	88 83       	st	Y, r24
    4c96:	82 81       	ldd	r24, Z+2	; 0x02
    4c98:	93 81       	ldd	r25, Z+3	; 0x03
    4c9a:	9b 83       	std	Y+3, r25	; 0x03
    4c9c:	8a 83       	std	Y+2, r24	; 0x02
    4c9e:	e0 e0       	ldi	r30, 0x00	; 0
    4ca0:	f0 e0       	ldi	r31, 0x00	; 0
    4ca2:	12 96       	adiw	r26, 0x02	; 2
    4ca4:	8d 91       	ld	r24, X+
    4ca6:	9c 91       	ld	r25, X
    4ca8:	13 97       	sbiw	r26, 0x03	; 3
    4caa:	00 97       	sbiw	r24, 0x00	; 0
    4cac:	19 f0       	breq	.+6      	; 0x4cb4 <free+0xd4>
    4cae:	fd 01       	movw	r30, r26
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	f7 cf       	rjmp	.-18     	; 0x4ca2 <free+0xc2>
    4cb4:	8d 91       	ld	r24, X+
    4cb6:	9c 91       	ld	r25, X
    4cb8:	11 97       	sbiw	r26, 0x01	; 1
    4cba:	9d 01       	movw	r18, r26
    4cbc:	2e 5f       	subi	r18, 0xFE	; 254
    4cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc0:	82 0f       	add	r24, r18
    4cc2:	93 1f       	adc	r25, r19
    4cc4:	20 91 34 13 	lds	r18, 0x1334	; 0x801334 <__brkval>
    4cc8:	30 91 35 13 	lds	r19, 0x1335	; 0x801335 <__brkval+0x1>
    4ccc:	28 17       	cp	r18, r24
    4cce:	39 07       	cpc	r19, r25
    4cd0:	69 f4       	brne	.+26     	; 0x4cec <free+0x10c>
    4cd2:	30 97       	sbiw	r30, 0x00	; 0
    4cd4:	29 f4       	brne	.+10     	; 0x4ce0 <free+0x100>
    4cd6:	10 92 37 13 	sts	0x1337, r1	; 0x801337 <__flp+0x1>
    4cda:	10 92 36 13 	sts	0x1336, r1	; 0x801336 <__flp>
    4cde:	02 c0       	rjmp	.+4      	; 0x4ce4 <free+0x104>
    4ce0:	13 82       	std	Z+3, r1	; 0x03
    4ce2:	12 82       	std	Z+2, r1	; 0x02
    4ce4:	b0 93 35 13 	sts	0x1335, r27	; 0x801335 <__brkval+0x1>
    4ce8:	a0 93 34 13 	sts	0x1334, r26	; 0x801334 <__brkval>
    4cec:	df 91       	pop	r29
    4cee:	cf 91       	pop	r28
    4cf0:	08 95       	ret

00004cf2 <abort>:
    4cf2:	81 e0       	ldi	r24, 0x01	; 1
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	f8 94       	cli
    4cf8:	7d c3       	rjmp	.+1786   	; 0x53f4 <_exit>

00004cfa <memcpy>:
    4cfa:	fb 01       	movw	r30, r22
    4cfc:	dc 01       	movw	r26, r24
    4cfe:	02 c0       	rjmp	.+4      	; 0x4d04 <memcpy+0xa>
    4d00:	01 90       	ld	r0, Z+
    4d02:	0d 92       	st	X+, r0
    4d04:	41 50       	subi	r20, 0x01	; 1
    4d06:	50 40       	sbci	r21, 0x00	; 0
    4d08:	d8 f7       	brcc	.-10     	; 0x4d00 <memcpy+0x6>
    4d0a:	08 95       	ret

00004d0c <memset>:
    4d0c:	dc 01       	movw	r26, r24
    4d0e:	01 c0       	rjmp	.+2      	; 0x4d12 <memset+0x6>
    4d10:	6d 93       	st	X+, r22
    4d12:	41 50       	subi	r20, 0x01	; 1
    4d14:	50 40       	sbci	r21, 0x00	; 0
    4d16:	e0 f7       	brcc	.-8      	; 0x4d10 <memset+0x4>
    4d18:	08 95       	ret

00004d1a <strcasestr>:
    4d1a:	fb 01       	movw	r30, r22
    4d1c:	51 91       	ld	r21, Z+
    4d1e:	55 23       	and	r21, r21
    4d20:	b1 f0       	breq	.+44     	; 0x4d4e <strcasestr+0x34>
    4d22:	bf 01       	movw	r22, r30
    4d24:	dc 01       	movw	r26, r24
    4d26:	05 2e       	mov	r0, r21
    4d28:	4d 91       	ld	r20, X+
    4d2a:	44 23       	and	r20, r20
    4d2c:	69 f0       	breq	.+26     	; 0x4d48 <strcasestr+0x2e>
    4d2e:	10 d0       	rcall	.+32     	; 0x4d50 <strcasestr+0x36>
    4d30:	d9 f7       	brne	.-10     	; 0x4d28 <strcasestr+0xe>
    4d32:	cd 01       	movw	r24, r26
    4d34:	01 90       	ld	r0, Z+
    4d36:	00 20       	and	r0, r0
    4d38:	49 f0       	breq	.+18     	; 0x4d4c <strcasestr+0x32>
    4d3a:	4d 91       	ld	r20, X+
    4d3c:	41 11       	cpse	r20, r1
    4d3e:	08 d0       	rcall	.+16     	; 0x4d50 <strcasestr+0x36>
    4d40:	c9 f3       	breq	.-14     	; 0x4d34 <strcasestr+0x1a>
    4d42:	fb 01       	movw	r30, r22
    4d44:	41 11       	cpse	r20, r1
    4d46:	ee cf       	rjmp	.-36     	; 0x4d24 <strcasestr+0xa>
    4d48:	81 e0       	ldi	r24, 0x01	; 1
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	01 97       	sbiw	r24, 0x01	; 1
    4d4e:	08 95       	ret
    4d50:	40 25       	eor	r20, r0
    4d52:	39 f0       	breq	.+14     	; 0x4d62 <strcasestr+0x48>
    4d54:	40 32       	cpi	r20, 0x20	; 32
    4d56:	29 f4       	brne	.+10     	; 0x4d62 <strcasestr+0x48>
    4d58:	40 29       	or	r20, r0
    4d5a:	4b 57       	subi	r20, 0x7B	; 123
    4d5c:	46 5e       	subi	r20, 0xE6	; 230
    4d5e:	08 f0       	brcs	.+2      	; 0x4d62 <strcasestr+0x48>
    4d60:	18 94       	sez
    4d62:	08 95       	ret

00004d64 <strcat>:
    4d64:	fb 01       	movw	r30, r22
    4d66:	dc 01       	movw	r26, r24
    4d68:	0d 90       	ld	r0, X+
    4d6a:	00 20       	and	r0, r0
    4d6c:	e9 f7       	brne	.-6      	; 0x4d68 <strcat+0x4>
    4d6e:	11 97       	sbiw	r26, 0x01	; 1
    4d70:	01 90       	ld	r0, Z+
    4d72:	0d 92       	st	X+, r0
    4d74:	00 20       	and	r0, r0
    4d76:	e1 f7       	brne	.-8      	; 0x4d70 <strcat+0xc>
    4d78:	08 95       	ret

00004d7a <strcpy>:
    4d7a:	fb 01       	movw	r30, r22
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	01 90       	ld	r0, Z+
    4d80:	0d 92       	st	X+, r0
    4d82:	00 20       	and	r0, r0
    4d84:	e1 f7       	brne	.-8      	; 0x4d7e <strcpy+0x4>
    4d86:	08 95       	ret

00004d88 <strncasecmp>:
    4d88:	fb 01       	movw	r30, r22
    4d8a:	dc 01       	movw	r26, r24
    4d8c:	41 50       	subi	r20, 0x01	; 1
    4d8e:	50 40       	sbci	r21, 0x00	; 0
    4d90:	88 f0       	brcs	.+34     	; 0x4db4 <strncasecmp+0x2c>
    4d92:	8d 91       	ld	r24, X+
    4d94:	81 34       	cpi	r24, 0x41	; 65
    4d96:	1c f0       	brlt	.+6      	; 0x4d9e <strncasecmp+0x16>
    4d98:	8b 35       	cpi	r24, 0x5B	; 91
    4d9a:	0c f4       	brge	.+2      	; 0x4d9e <strncasecmp+0x16>
    4d9c:	80 5e       	subi	r24, 0xE0	; 224
    4d9e:	61 91       	ld	r22, Z+
    4da0:	61 34       	cpi	r22, 0x41	; 65
    4da2:	1c f0       	brlt	.+6      	; 0x4daa <strncasecmp+0x22>
    4da4:	6b 35       	cpi	r22, 0x5B	; 91
    4da6:	0c f4       	brge	.+2      	; 0x4daa <strncasecmp+0x22>
    4da8:	60 5e       	subi	r22, 0xE0	; 224
    4daa:	86 1b       	sub	r24, r22
    4dac:	61 11       	cpse	r22, r1
    4dae:	71 f3       	breq	.-36     	; 0x4d8c <strncasecmp+0x4>
    4db0:	99 0b       	sbc	r25, r25
    4db2:	08 95       	ret
    4db4:	88 1b       	sub	r24, r24
    4db6:	fc cf       	rjmp	.-8      	; 0x4db0 <strncasecmp+0x28>

00004db8 <printf>:
    4db8:	cf 93       	push	r28
    4dba:	df 93       	push	r29
    4dbc:	cd b7       	in	r28, 0x3d	; 61
    4dbe:	de b7       	in	r29, 0x3e	; 62
    4dc0:	ae 01       	movw	r20, r28
    4dc2:	4a 5f       	subi	r20, 0xFA	; 250
    4dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    4dc6:	fa 01       	movw	r30, r20
    4dc8:	61 91       	ld	r22, Z+
    4dca:	71 91       	ld	r23, Z+
    4dcc:	af 01       	movw	r20, r30
    4dce:	80 91 3a 13 	lds	r24, 0x133A	; 0x80133a <__iob+0x2>
    4dd2:	90 91 3b 13 	lds	r25, 0x133B	; 0x80133b <__iob+0x3>
    4dd6:	61 d0       	rcall	.+194    	; 0x4e9a <vfprintf>
    4dd8:	df 91       	pop	r29
    4dda:	cf 91       	pop	r28
    4ddc:	08 95       	ret

00004dde <puts>:
    4dde:	0f 93       	push	r16
    4de0:	1f 93       	push	r17
    4de2:	cf 93       	push	r28
    4de4:	df 93       	push	r29
    4de6:	e0 91 3a 13 	lds	r30, 0x133A	; 0x80133a <__iob+0x2>
    4dea:	f0 91 3b 13 	lds	r31, 0x133B	; 0x80133b <__iob+0x3>
    4dee:	23 81       	ldd	r18, Z+3	; 0x03
    4df0:	21 ff       	sbrs	r18, 1
    4df2:	1b c0       	rjmp	.+54     	; 0x4e2a <puts+0x4c>
    4df4:	8c 01       	movw	r16, r24
    4df6:	d0 e0       	ldi	r29, 0x00	; 0
    4df8:	c0 e0       	ldi	r28, 0x00	; 0
    4dfa:	f8 01       	movw	r30, r16
    4dfc:	81 91       	ld	r24, Z+
    4dfe:	8f 01       	movw	r16, r30
    4e00:	60 91 3a 13 	lds	r22, 0x133A	; 0x80133a <__iob+0x2>
    4e04:	70 91 3b 13 	lds	r23, 0x133B	; 0x80133b <__iob+0x3>
    4e08:	db 01       	movw	r26, r22
    4e0a:	18 96       	adiw	r26, 0x08	; 8
    4e0c:	ed 91       	ld	r30, X+
    4e0e:	fc 91       	ld	r31, X
    4e10:	19 97       	sbiw	r26, 0x09	; 9
    4e12:	88 23       	and	r24, r24
    4e14:	31 f0       	breq	.+12     	; 0x4e22 <puts+0x44>
    4e16:	19 95       	eicall
    4e18:	89 2b       	or	r24, r25
    4e1a:	79 f3       	breq	.-34     	; 0x4dfa <puts+0x1c>
    4e1c:	df ef       	ldi	r29, 0xFF	; 255
    4e1e:	cf ef       	ldi	r28, 0xFF	; 255
    4e20:	ec cf       	rjmp	.-40     	; 0x4dfa <puts+0x1c>
    4e22:	8a e0       	ldi	r24, 0x0A	; 10
    4e24:	19 95       	eicall
    4e26:	89 2b       	or	r24, r25
    4e28:	19 f0       	breq	.+6      	; 0x4e30 <puts+0x52>
    4e2a:	8f ef       	ldi	r24, 0xFF	; 255
    4e2c:	9f ef       	ldi	r25, 0xFF	; 255
    4e2e:	02 c0       	rjmp	.+4      	; 0x4e34 <puts+0x56>
    4e30:	8d 2f       	mov	r24, r29
    4e32:	9c 2f       	mov	r25, r28
    4e34:	df 91       	pop	r29
    4e36:	cf 91       	pop	r28
    4e38:	1f 91       	pop	r17
    4e3a:	0f 91       	pop	r16
    4e3c:	08 95       	ret

00004e3e <sprintf>:
    4e3e:	0f 93       	push	r16
    4e40:	1f 93       	push	r17
    4e42:	cf 93       	push	r28
    4e44:	df 93       	push	r29
    4e46:	cd b7       	in	r28, 0x3d	; 61
    4e48:	de b7       	in	r29, 0x3e	; 62
    4e4a:	2e 97       	sbiw	r28, 0x0e	; 14
    4e4c:	0f b6       	in	r0, 0x3f	; 63
    4e4e:	f8 94       	cli
    4e50:	de bf       	out	0x3e, r29	; 62
    4e52:	0f be       	out	0x3f, r0	; 63
    4e54:	cd bf       	out	0x3d, r28	; 61
    4e56:	0e 89       	ldd	r16, Y+22	; 0x16
    4e58:	1f 89       	ldd	r17, Y+23	; 0x17
    4e5a:	86 e0       	ldi	r24, 0x06	; 6
    4e5c:	8c 83       	std	Y+4, r24	; 0x04
    4e5e:	1a 83       	std	Y+2, r17	; 0x02
    4e60:	09 83       	std	Y+1, r16	; 0x01
    4e62:	8f ef       	ldi	r24, 0xFF	; 255
    4e64:	9f e7       	ldi	r25, 0x7F	; 127
    4e66:	9e 83       	std	Y+6, r25	; 0x06
    4e68:	8d 83       	std	Y+5, r24	; 0x05
    4e6a:	ae 01       	movw	r20, r28
    4e6c:	46 5e       	subi	r20, 0xE6	; 230
    4e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e70:	68 8d       	ldd	r22, Y+24	; 0x18
    4e72:	79 8d       	ldd	r23, Y+25	; 0x19
    4e74:	ce 01       	movw	r24, r28
    4e76:	01 96       	adiw	r24, 0x01	; 1
    4e78:	10 d0       	rcall	.+32     	; 0x4e9a <vfprintf>
    4e7a:	ef 81       	ldd	r30, Y+7	; 0x07
    4e7c:	f8 85       	ldd	r31, Y+8	; 0x08
    4e7e:	e0 0f       	add	r30, r16
    4e80:	f1 1f       	adc	r31, r17
    4e82:	10 82       	st	Z, r1
    4e84:	2e 96       	adiw	r28, 0x0e	; 14
    4e86:	0f b6       	in	r0, 0x3f	; 63
    4e88:	f8 94       	cli
    4e8a:	de bf       	out	0x3e, r29	; 62
    4e8c:	0f be       	out	0x3f, r0	; 63
    4e8e:	cd bf       	out	0x3d, r28	; 61
    4e90:	df 91       	pop	r29
    4e92:	cf 91       	pop	r28
    4e94:	1f 91       	pop	r17
    4e96:	0f 91       	pop	r16
    4e98:	08 95       	ret

00004e9a <vfprintf>:
    4e9a:	2f 92       	push	r2
    4e9c:	3f 92       	push	r3
    4e9e:	4f 92       	push	r4
    4ea0:	5f 92       	push	r5
    4ea2:	6f 92       	push	r6
    4ea4:	7f 92       	push	r7
    4ea6:	8f 92       	push	r8
    4ea8:	9f 92       	push	r9
    4eaa:	af 92       	push	r10
    4eac:	bf 92       	push	r11
    4eae:	cf 92       	push	r12
    4eb0:	df 92       	push	r13
    4eb2:	ef 92       	push	r14
    4eb4:	ff 92       	push	r15
    4eb6:	0f 93       	push	r16
    4eb8:	1f 93       	push	r17
    4eba:	cf 93       	push	r28
    4ebc:	df 93       	push	r29
    4ebe:	cd b7       	in	r28, 0x3d	; 61
    4ec0:	de b7       	in	r29, 0x3e	; 62
    4ec2:	2b 97       	sbiw	r28, 0x0b	; 11
    4ec4:	0f b6       	in	r0, 0x3f	; 63
    4ec6:	f8 94       	cli
    4ec8:	de bf       	out	0x3e, r29	; 62
    4eca:	0f be       	out	0x3f, r0	; 63
    4ecc:	cd bf       	out	0x3d, r28	; 61
    4ece:	6c 01       	movw	r12, r24
    4ed0:	7b 01       	movw	r14, r22
    4ed2:	8a 01       	movw	r16, r20
    4ed4:	fc 01       	movw	r30, r24
    4ed6:	17 82       	std	Z+7, r1	; 0x07
    4ed8:	16 82       	std	Z+6, r1	; 0x06
    4eda:	83 81       	ldd	r24, Z+3	; 0x03
    4edc:	81 ff       	sbrs	r24, 1
    4ede:	bf c1       	rjmp	.+894    	; 0x525e <vfprintf+0x3c4>
    4ee0:	ce 01       	movw	r24, r28
    4ee2:	01 96       	adiw	r24, 0x01	; 1
    4ee4:	3c 01       	movw	r6, r24
    4ee6:	f6 01       	movw	r30, r12
    4ee8:	93 81       	ldd	r25, Z+3	; 0x03
    4eea:	f7 01       	movw	r30, r14
    4eec:	93 fd       	sbrc	r25, 3
    4eee:	85 91       	lpm	r24, Z+
    4ef0:	93 ff       	sbrs	r25, 3
    4ef2:	81 91       	ld	r24, Z+
    4ef4:	7f 01       	movw	r14, r30
    4ef6:	88 23       	and	r24, r24
    4ef8:	09 f4       	brne	.+2      	; 0x4efc <vfprintf+0x62>
    4efa:	ad c1       	rjmp	.+858    	; 0x5256 <vfprintf+0x3bc>
    4efc:	85 32       	cpi	r24, 0x25	; 37
    4efe:	39 f4       	brne	.+14     	; 0x4f0e <vfprintf+0x74>
    4f00:	93 fd       	sbrc	r25, 3
    4f02:	85 91       	lpm	r24, Z+
    4f04:	93 ff       	sbrs	r25, 3
    4f06:	81 91       	ld	r24, Z+
    4f08:	7f 01       	movw	r14, r30
    4f0a:	85 32       	cpi	r24, 0x25	; 37
    4f0c:	21 f4       	brne	.+8      	; 0x4f16 <vfprintf+0x7c>
    4f0e:	b6 01       	movw	r22, r12
    4f10:	90 e0       	ldi	r25, 0x00	; 0
    4f12:	d6 d1       	rcall	.+940    	; 0x52c0 <fputc>
    4f14:	e8 cf       	rjmp	.-48     	; 0x4ee6 <vfprintf+0x4c>
    4f16:	91 2c       	mov	r9, r1
    4f18:	21 2c       	mov	r2, r1
    4f1a:	31 2c       	mov	r3, r1
    4f1c:	ff e1       	ldi	r31, 0x1F	; 31
    4f1e:	f3 15       	cp	r31, r3
    4f20:	d8 f0       	brcs	.+54     	; 0x4f58 <vfprintf+0xbe>
    4f22:	8b 32       	cpi	r24, 0x2B	; 43
    4f24:	79 f0       	breq	.+30     	; 0x4f44 <vfprintf+0xaa>
    4f26:	38 f4       	brcc	.+14     	; 0x4f36 <vfprintf+0x9c>
    4f28:	80 32       	cpi	r24, 0x20	; 32
    4f2a:	79 f0       	breq	.+30     	; 0x4f4a <vfprintf+0xb0>
    4f2c:	83 32       	cpi	r24, 0x23	; 35
    4f2e:	a1 f4       	brne	.+40     	; 0x4f58 <vfprintf+0xbe>
    4f30:	23 2d       	mov	r18, r3
    4f32:	20 61       	ori	r18, 0x10	; 16
    4f34:	1d c0       	rjmp	.+58     	; 0x4f70 <vfprintf+0xd6>
    4f36:	8d 32       	cpi	r24, 0x2D	; 45
    4f38:	61 f0       	breq	.+24     	; 0x4f52 <vfprintf+0xb8>
    4f3a:	80 33       	cpi	r24, 0x30	; 48
    4f3c:	69 f4       	brne	.+26     	; 0x4f58 <vfprintf+0xbe>
    4f3e:	23 2d       	mov	r18, r3
    4f40:	21 60       	ori	r18, 0x01	; 1
    4f42:	16 c0       	rjmp	.+44     	; 0x4f70 <vfprintf+0xd6>
    4f44:	83 2d       	mov	r24, r3
    4f46:	82 60       	ori	r24, 0x02	; 2
    4f48:	38 2e       	mov	r3, r24
    4f4a:	e3 2d       	mov	r30, r3
    4f4c:	e4 60       	ori	r30, 0x04	; 4
    4f4e:	3e 2e       	mov	r3, r30
    4f50:	2a c0       	rjmp	.+84     	; 0x4fa6 <vfprintf+0x10c>
    4f52:	f3 2d       	mov	r31, r3
    4f54:	f8 60       	ori	r31, 0x08	; 8
    4f56:	1d c0       	rjmp	.+58     	; 0x4f92 <vfprintf+0xf8>
    4f58:	37 fc       	sbrc	r3, 7
    4f5a:	2d c0       	rjmp	.+90     	; 0x4fb6 <vfprintf+0x11c>
    4f5c:	20 ed       	ldi	r18, 0xD0	; 208
    4f5e:	28 0f       	add	r18, r24
    4f60:	2a 30       	cpi	r18, 0x0A	; 10
    4f62:	40 f0       	brcs	.+16     	; 0x4f74 <vfprintf+0xda>
    4f64:	8e 32       	cpi	r24, 0x2E	; 46
    4f66:	b9 f4       	brne	.+46     	; 0x4f96 <vfprintf+0xfc>
    4f68:	36 fc       	sbrc	r3, 6
    4f6a:	75 c1       	rjmp	.+746    	; 0x5256 <vfprintf+0x3bc>
    4f6c:	23 2d       	mov	r18, r3
    4f6e:	20 64       	ori	r18, 0x40	; 64
    4f70:	32 2e       	mov	r3, r18
    4f72:	19 c0       	rjmp	.+50     	; 0x4fa6 <vfprintf+0x10c>
    4f74:	36 fe       	sbrs	r3, 6
    4f76:	06 c0       	rjmp	.+12     	; 0x4f84 <vfprintf+0xea>
    4f78:	8a e0       	ldi	r24, 0x0A	; 10
    4f7a:	98 9e       	mul	r9, r24
    4f7c:	20 0d       	add	r18, r0
    4f7e:	11 24       	eor	r1, r1
    4f80:	92 2e       	mov	r9, r18
    4f82:	11 c0       	rjmp	.+34     	; 0x4fa6 <vfprintf+0x10c>
    4f84:	ea e0       	ldi	r30, 0x0A	; 10
    4f86:	2e 9e       	mul	r2, r30
    4f88:	20 0d       	add	r18, r0
    4f8a:	11 24       	eor	r1, r1
    4f8c:	22 2e       	mov	r2, r18
    4f8e:	f3 2d       	mov	r31, r3
    4f90:	f0 62       	ori	r31, 0x20	; 32
    4f92:	3f 2e       	mov	r3, r31
    4f94:	08 c0       	rjmp	.+16     	; 0x4fa6 <vfprintf+0x10c>
    4f96:	8c 36       	cpi	r24, 0x6C	; 108
    4f98:	21 f4       	brne	.+8      	; 0x4fa2 <vfprintf+0x108>
    4f9a:	83 2d       	mov	r24, r3
    4f9c:	80 68       	ori	r24, 0x80	; 128
    4f9e:	38 2e       	mov	r3, r24
    4fa0:	02 c0       	rjmp	.+4      	; 0x4fa6 <vfprintf+0x10c>
    4fa2:	88 36       	cpi	r24, 0x68	; 104
    4fa4:	41 f4       	brne	.+16     	; 0x4fb6 <vfprintf+0x11c>
    4fa6:	f7 01       	movw	r30, r14
    4fa8:	93 fd       	sbrc	r25, 3
    4faa:	85 91       	lpm	r24, Z+
    4fac:	93 ff       	sbrs	r25, 3
    4fae:	81 91       	ld	r24, Z+
    4fb0:	7f 01       	movw	r14, r30
    4fb2:	81 11       	cpse	r24, r1
    4fb4:	b3 cf       	rjmp	.-154    	; 0x4f1c <vfprintf+0x82>
    4fb6:	98 2f       	mov	r25, r24
    4fb8:	9f 7d       	andi	r25, 0xDF	; 223
    4fba:	95 54       	subi	r25, 0x45	; 69
    4fbc:	93 30       	cpi	r25, 0x03	; 3
    4fbe:	28 f4       	brcc	.+10     	; 0x4fca <vfprintf+0x130>
    4fc0:	0c 5f       	subi	r16, 0xFC	; 252
    4fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc4:	9f e3       	ldi	r25, 0x3F	; 63
    4fc6:	99 83       	std	Y+1, r25	; 0x01
    4fc8:	0d c0       	rjmp	.+26     	; 0x4fe4 <vfprintf+0x14a>
    4fca:	83 36       	cpi	r24, 0x63	; 99
    4fcc:	31 f0       	breq	.+12     	; 0x4fda <vfprintf+0x140>
    4fce:	83 37       	cpi	r24, 0x73	; 115
    4fd0:	71 f0       	breq	.+28     	; 0x4fee <vfprintf+0x154>
    4fd2:	83 35       	cpi	r24, 0x53	; 83
    4fd4:	09 f0       	breq	.+2      	; 0x4fd8 <vfprintf+0x13e>
    4fd6:	55 c0       	rjmp	.+170    	; 0x5082 <vfprintf+0x1e8>
    4fd8:	20 c0       	rjmp	.+64     	; 0x501a <vfprintf+0x180>
    4fda:	f8 01       	movw	r30, r16
    4fdc:	80 81       	ld	r24, Z
    4fde:	89 83       	std	Y+1, r24	; 0x01
    4fe0:	0e 5f       	subi	r16, 0xFE	; 254
    4fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe4:	88 24       	eor	r8, r8
    4fe6:	83 94       	inc	r8
    4fe8:	91 2c       	mov	r9, r1
    4fea:	53 01       	movw	r10, r6
    4fec:	12 c0       	rjmp	.+36     	; 0x5012 <vfprintf+0x178>
    4fee:	28 01       	movw	r4, r16
    4ff0:	f2 e0       	ldi	r31, 0x02	; 2
    4ff2:	4f 0e       	add	r4, r31
    4ff4:	51 1c       	adc	r5, r1
    4ff6:	f8 01       	movw	r30, r16
    4ff8:	a0 80       	ld	r10, Z
    4ffa:	b1 80       	ldd	r11, Z+1	; 0x01
    4ffc:	36 fe       	sbrs	r3, 6
    4ffe:	03 c0       	rjmp	.+6      	; 0x5006 <vfprintf+0x16c>
    5000:	69 2d       	mov	r22, r9
    5002:	70 e0       	ldi	r23, 0x00	; 0
    5004:	02 c0       	rjmp	.+4      	; 0x500a <vfprintf+0x170>
    5006:	6f ef       	ldi	r22, 0xFF	; 255
    5008:	7f ef       	ldi	r23, 0xFF	; 255
    500a:	c5 01       	movw	r24, r10
    500c:	4e d1       	rcall	.+668    	; 0x52aa <strnlen>
    500e:	4c 01       	movw	r8, r24
    5010:	82 01       	movw	r16, r4
    5012:	f3 2d       	mov	r31, r3
    5014:	ff 77       	andi	r31, 0x7F	; 127
    5016:	3f 2e       	mov	r3, r31
    5018:	15 c0       	rjmp	.+42     	; 0x5044 <vfprintf+0x1aa>
    501a:	28 01       	movw	r4, r16
    501c:	22 e0       	ldi	r18, 0x02	; 2
    501e:	42 0e       	add	r4, r18
    5020:	51 1c       	adc	r5, r1
    5022:	f8 01       	movw	r30, r16
    5024:	a0 80       	ld	r10, Z
    5026:	b1 80       	ldd	r11, Z+1	; 0x01
    5028:	36 fe       	sbrs	r3, 6
    502a:	03 c0       	rjmp	.+6      	; 0x5032 <vfprintf+0x198>
    502c:	69 2d       	mov	r22, r9
    502e:	70 e0       	ldi	r23, 0x00	; 0
    5030:	02 c0       	rjmp	.+4      	; 0x5036 <vfprintf+0x19c>
    5032:	6f ef       	ldi	r22, 0xFF	; 255
    5034:	7f ef       	ldi	r23, 0xFF	; 255
    5036:	c5 01       	movw	r24, r10
    5038:	2d d1       	rcall	.+602    	; 0x5294 <strnlen_P>
    503a:	4c 01       	movw	r8, r24
    503c:	f3 2d       	mov	r31, r3
    503e:	f0 68       	ori	r31, 0x80	; 128
    5040:	3f 2e       	mov	r3, r31
    5042:	82 01       	movw	r16, r4
    5044:	33 fc       	sbrc	r3, 3
    5046:	19 c0       	rjmp	.+50     	; 0x507a <vfprintf+0x1e0>
    5048:	82 2d       	mov	r24, r2
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	88 16       	cp	r8, r24
    504e:	99 06       	cpc	r9, r25
    5050:	a0 f4       	brcc	.+40     	; 0x507a <vfprintf+0x1e0>
    5052:	b6 01       	movw	r22, r12
    5054:	80 e2       	ldi	r24, 0x20	; 32
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	33 d1       	rcall	.+614    	; 0x52c0 <fputc>
    505a:	2a 94       	dec	r2
    505c:	f5 cf       	rjmp	.-22     	; 0x5048 <vfprintf+0x1ae>
    505e:	f5 01       	movw	r30, r10
    5060:	37 fc       	sbrc	r3, 7
    5062:	85 91       	lpm	r24, Z+
    5064:	37 fe       	sbrs	r3, 7
    5066:	81 91       	ld	r24, Z+
    5068:	5f 01       	movw	r10, r30
    506a:	b6 01       	movw	r22, r12
    506c:	90 e0       	ldi	r25, 0x00	; 0
    506e:	28 d1       	rcall	.+592    	; 0x52c0 <fputc>
    5070:	21 10       	cpse	r2, r1
    5072:	2a 94       	dec	r2
    5074:	21 e0       	ldi	r18, 0x01	; 1
    5076:	82 1a       	sub	r8, r18
    5078:	91 08       	sbc	r9, r1
    507a:	81 14       	cp	r8, r1
    507c:	91 04       	cpc	r9, r1
    507e:	79 f7       	brne	.-34     	; 0x505e <vfprintf+0x1c4>
    5080:	e1 c0       	rjmp	.+450    	; 0x5244 <vfprintf+0x3aa>
    5082:	84 36       	cpi	r24, 0x64	; 100
    5084:	11 f0       	breq	.+4      	; 0x508a <vfprintf+0x1f0>
    5086:	89 36       	cpi	r24, 0x69	; 105
    5088:	39 f5       	brne	.+78     	; 0x50d8 <vfprintf+0x23e>
    508a:	f8 01       	movw	r30, r16
    508c:	37 fe       	sbrs	r3, 7
    508e:	07 c0       	rjmp	.+14     	; 0x509e <vfprintf+0x204>
    5090:	60 81       	ld	r22, Z
    5092:	71 81       	ldd	r23, Z+1	; 0x01
    5094:	82 81       	ldd	r24, Z+2	; 0x02
    5096:	93 81       	ldd	r25, Z+3	; 0x03
    5098:	0c 5f       	subi	r16, 0xFC	; 252
    509a:	1f 4f       	sbci	r17, 0xFF	; 255
    509c:	08 c0       	rjmp	.+16     	; 0x50ae <vfprintf+0x214>
    509e:	60 81       	ld	r22, Z
    50a0:	71 81       	ldd	r23, Z+1	; 0x01
    50a2:	07 2e       	mov	r0, r23
    50a4:	00 0c       	add	r0, r0
    50a6:	88 0b       	sbc	r24, r24
    50a8:	99 0b       	sbc	r25, r25
    50aa:	0e 5f       	subi	r16, 0xFE	; 254
    50ac:	1f 4f       	sbci	r17, 0xFF	; 255
    50ae:	f3 2d       	mov	r31, r3
    50b0:	ff 76       	andi	r31, 0x6F	; 111
    50b2:	3f 2e       	mov	r3, r31
    50b4:	97 ff       	sbrs	r25, 7
    50b6:	09 c0       	rjmp	.+18     	; 0x50ca <vfprintf+0x230>
    50b8:	90 95       	com	r25
    50ba:	80 95       	com	r24
    50bc:	70 95       	com	r23
    50be:	61 95       	neg	r22
    50c0:	7f 4f       	sbci	r23, 0xFF	; 255
    50c2:	8f 4f       	sbci	r24, 0xFF	; 255
    50c4:	9f 4f       	sbci	r25, 0xFF	; 255
    50c6:	f0 68       	ori	r31, 0x80	; 128
    50c8:	3f 2e       	mov	r3, r31
    50ca:	2a e0       	ldi	r18, 0x0A	; 10
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	a3 01       	movw	r20, r6
    50d0:	33 d1       	rcall	.+614    	; 0x5338 <__ultoa_invert>
    50d2:	88 2e       	mov	r8, r24
    50d4:	86 18       	sub	r8, r6
    50d6:	44 c0       	rjmp	.+136    	; 0x5160 <vfprintf+0x2c6>
    50d8:	85 37       	cpi	r24, 0x75	; 117
    50da:	31 f4       	brne	.+12     	; 0x50e8 <vfprintf+0x24e>
    50dc:	23 2d       	mov	r18, r3
    50de:	2f 7e       	andi	r18, 0xEF	; 239
    50e0:	b2 2e       	mov	r11, r18
    50e2:	2a e0       	ldi	r18, 0x0A	; 10
    50e4:	30 e0       	ldi	r19, 0x00	; 0
    50e6:	25 c0       	rjmp	.+74     	; 0x5132 <vfprintf+0x298>
    50e8:	93 2d       	mov	r25, r3
    50ea:	99 7f       	andi	r25, 0xF9	; 249
    50ec:	b9 2e       	mov	r11, r25
    50ee:	8f 36       	cpi	r24, 0x6F	; 111
    50f0:	c1 f0       	breq	.+48     	; 0x5122 <vfprintf+0x288>
    50f2:	18 f4       	brcc	.+6      	; 0x50fa <vfprintf+0x260>
    50f4:	88 35       	cpi	r24, 0x58	; 88
    50f6:	79 f0       	breq	.+30     	; 0x5116 <vfprintf+0x27c>
    50f8:	ae c0       	rjmp	.+348    	; 0x5256 <vfprintf+0x3bc>
    50fa:	80 37       	cpi	r24, 0x70	; 112
    50fc:	19 f0       	breq	.+6      	; 0x5104 <vfprintf+0x26a>
    50fe:	88 37       	cpi	r24, 0x78	; 120
    5100:	21 f0       	breq	.+8      	; 0x510a <vfprintf+0x270>
    5102:	a9 c0       	rjmp	.+338    	; 0x5256 <vfprintf+0x3bc>
    5104:	e9 2f       	mov	r30, r25
    5106:	e0 61       	ori	r30, 0x10	; 16
    5108:	be 2e       	mov	r11, r30
    510a:	b4 fe       	sbrs	r11, 4
    510c:	0d c0       	rjmp	.+26     	; 0x5128 <vfprintf+0x28e>
    510e:	fb 2d       	mov	r31, r11
    5110:	f4 60       	ori	r31, 0x04	; 4
    5112:	bf 2e       	mov	r11, r31
    5114:	09 c0       	rjmp	.+18     	; 0x5128 <vfprintf+0x28e>
    5116:	34 fe       	sbrs	r3, 4
    5118:	0a c0       	rjmp	.+20     	; 0x512e <vfprintf+0x294>
    511a:	29 2f       	mov	r18, r25
    511c:	26 60       	ori	r18, 0x06	; 6
    511e:	b2 2e       	mov	r11, r18
    5120:	06 c0       	rjmp	.+12     	; 0x512e <vfprintf+0x294>
    5122:	28 e0       	ldi	r18, 0x08	; 8
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	05 c0       	rjmp	.+10     	; 0x5132 <vfprintf+0x298>
    5128:	20 e1       	ldi	r18, 0x10	; 16
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	02 c0       	rjmp	.+4      	; 0x5132 <vfprintf+0x298>
    512e:	20 e1       	ldi	r18, 0x10	; 16
    5130:	32 e0       	ldi	r19, 0x02	; 2
    5132:	f8 01       	movw	r30, r16
    5134:	b7 fe       	sbrs	r11, 7
    5136:	07 c0       	rjmp	.+14     	; 0x5146 <vfprintf+0x2ac>
    5138:	60 81       	ld	r22, Z
    513a:	71 81       	ldd	r23, Z+1	; 0x01
    513c:	82 81       	ldd	r24, Z+2	; 0x02
    513e:	93 81       	ldd	r25, Z+3	; 0x03
    5140:	0c 5f       	subi	r16, 0xFC	; 252
    5142:	1f 4f       	sbci	r17, 0xFF	; 255
    5144:	06 c0       	rjmp	.+12     	; 0x5152 <vfprintf+0x2b8>
    5146:	60 81       	ld	r22, Z
    5148:	71 81       	ldd	r23, Z+1	; 0x01
    514a:	80 e0       	ldi	r24, 0x00	; 0
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	0e 5f       	subi	r16, 0xFE	; 254
    5150:	1f 4f       	sbci	r17, 0xFF	; 255
    5152:	a3 01       	movw	r20, r6
    5154:	f1 d0       	rcall	.+482    	; 0x5338 <__ultoa_invert>
    5156:	88 2e       	mov	r8, r24
    5158:	86 18       	sub	r8, r6
    515a:	fb 2d       	mov	r31, r11
    515c:	ff 77       	andi	r31, 0x7F	; 127
    515e:	3f 2e       	mov	r3, r31
    5160:	36 fe       	sbrs	r3, 6
    5162:	0d c0       	rjmp	.+26     	; 0x517e <vfprintf+0x2e4>
    5164:	23 2d       	mov	r18, r3
    5166:	2e 7f       	andi	r18, 0xFE	; 254
    5168:	a2 2e       	mov	r10, r18
    516a:	89 14       	cp	r8, r9
    516c:	58 f4       	brcc	.+22     	; 0x5184 <vfprintf+0x2ea>
    516e:	34 fe       	sbrs	r3, 4
    5170:	0b c0       	rjmp	.+22     	; 0x5188 <vfprintf+0x2ee>
    5172:	32 fc       	sbrc	r3, 2
    5174:	09 c0       	rjmp	.+18     	; 0x5188 <vfprintf+0x2ee>
    5176:	83 2d       	mov	r24, r3
    5178:	8e 7e       	andi	r24, 0xEE	; 238
    517a:	a8 2e       	mov	r10, r24
    517c:	05 c0       	rjmp	.+10     	; 0x5188 <vfprintf+0x2ee>
    517e:	b8 2c       	mov	r11, r8
    5180:	a3 2c       	mov	r10, r3
    5182:	03 c0       	rjmp	.+6      	; 0x518a <vfprintf+0x2f0>
    5184:	b8 2c       	mov	r11, r8
    5186:	01 c0       	rjmp	.+2      	; 0x518a <vfprintf+0x2f0>
    5188:	b9 2c       	mov	r11, r9
    518a:	a4 fe       	sbrs	r10, 4
    518c:	0f c0       	rjmp	.+30     	; 0x51ac <vfprintf+0x312>
    518e:	fe 01       	movw	r30, r28
    5190:	e8 0d       	add	r30, r8
    5192:	f1 1d       	adc	r31, r1
    5194:	80 81       	ld	r24, Z
    5196:	80 33       	cpi	r24, 0x30	; 48
    5198:	21 f4       	brne	.+8      	; 0x51a2 <vfprintf+0x308>
    519a:	9a 2d       	mov	r25, r10
    519c:	99 7e       	andi	r25, 0xE9	; 233
    519e:	a9 2e       	mov	r10, r25
    51a0:	09 c0       	rjmp	.+18     	; 0x51b4 <vfprintf+0x31a>
    51a2:	a2 fe       	sbrs	r10, 2
    51a4:	06 c0       	rjmp	.+12     	; 0x51b2 <vfprintf+0x318>
    51a6:	b3 94       	inc	r11
    51a8:	b3 94       	inc	r11
    51aa:	04 c0       	rjmp	.+8      	; 0x51b4 <vfprintf+0x31a>
    51ac:	8a 2d       	mov	r24, r10
    51ae:	86 78       	andi	r24, 0x86	; 134
    51b0:	09 f0       	breq	.+2      	; 0x51b4 <vfprintf+0x31a>
    51b2:	b3 94       	inc	r11
    51b4:	a3 fc       	sbrc	r10, 3
    51b6:	10 c0       	rjmp	.+32     	; 0x51d8 <vfprintf+0x33e>
    51b8:	a0 fe       	sbrs	r10, 0
    51ba:	06 c0       	rjmp	.+12     	; 0x51c8 <vfprintf+0x32e>
    51bc:	b2 14       	cp	r11, r2
    51be:	80 f4       	brcc	.+32     	; 0x51e0 <vfprintf+0x346>
    51c0:	28 0c       	add	r2, r8
    51c2:	92 2c       	mov	r9, r2
    51c4:	9b 18       	sub	r9, r11
    51c6:	0d c0       	rjmp	.+26     	; 0x51e2 <vfprintf+0x348>
    51c8:	b2 14       	cp	r11, r2
    51ca:	58 f4       	brcc	.+22     	; 0x51e2 <vfprintf+0x348>
    51cc:	b6 01       	movw	r22, r12
    51ce:	80 e2       	ldi	r24, 0x20	; 32
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	76 d0       	rcall	.+236    	; 0x52c0 <fputc>
    51d4:	b3 94       	inc	r11
    51d6:	f8 cf       	rjmp	.-16     	; 0x51c8 <vfprintf+0x32e>
    51d8:	b2 14       	cp	r11, r2
    51da:	18 f4       	brcc	.+6      	; 0x51e2 <vfprintf+0x348>
    51dc:	2b 18       	sub	r2, r11
    51de:	02 c0       	rjmp	.+4      	; 0x51e4 <vfprintf+0x34a>
    51e0:	98 2c       	mov	r9, r8
    51e2:	21 2c       	mov	r2, r1
    51e4:	a4 fe       	sbrs	r10, 4
    51e6:	0f c0       	rjmp	.+30     	; 0x5206 <vfprintf+0x36c>
    51e8:	b6 01       	movw	r22, r12
    51ea:	80 e3       	ldi	r24, 0x30	; 48
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	68 d0       	rcall	.+208    	; 0x52c0 <fputc>
    51f0:	a2 fe       	sbrs	r10, 2
    51f2:	16 c0       	rjmp	.+44     	; 0x5220 <vfprintf+0x386>
    51f4:	a1 fc       	sbrc	r10, 1
    51f6:	03 c0       	rjmp	.+6      	; 0x51fe <vfprintf+0x364>
    51f8:	88 e7       	ldi	r24, 0x78	; 120
    51fa:	90 e0       	ldi	r25, 0x00	; 0
    51fc:	02 c0       	rjmp	.+4      	; 0x5202 <vfprintf+0x368>
    51fe:	88 e5       	ldi	r24, 0x58	; 88
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	b6 01       	movw	r22, r12
    5204:	0c c0       	rjmp	.+24     	; 0x521e <vfprintf+0x384>
    5206:	8a 2d       	mov	r24, r10
    5208:	86 78       	andi	r24, 0x86	; 134
    520a:	51 f0       	breq	.+20     	; 0x5220 <vfprintf+0x386>
    520c:	a1 fe       	sbrs	r10, 1
    520e:	02 c0       	rjmp	.+4      	; 0x5214 <vfprintf+0x37a>
    5210:	8b e2       	ldi	r24, 0x2B	; 43
    5212:	01 c0       	rjmp	.+2      	; 0x5216 <vfprintf+0x37c>
    5214:	80 e2       	ldi	r24, 0x20	; 32
    5216:	a7 fc       	sbrc	r10, 7
    5218:	8d e2       	ldi	r24, 0x2D	; 45
    521a:	b6 01       	movw	r22, r12
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	50 d0       	rcall	.+160    	; 0x52c0 <fputc>
    5220:	89 14       	cp	r8, r9
    5222:	30 f4       	brcc	.+12     	; 0x5230 <vfprintf+0x396>
    5224:	b6 01       	movw	r22, r12
    5226:	80 e3       	ldi	r24, 0x30	; 48
    5228:	90 e0       	ldi	r25, 0x00	; 0
    522a:	4a d0       	rcall	.+148    	; 0x52c0 <fputc>
    522c:	9a 94       	dec	r9
    522e:	f8 cf       	rjmp	.-16     	; 0x5220 <vfprintf+0x386>
    5230:	8a 94       	dec	r8
    5232:	f3 01       	movw	r30, r6
    5234:	e8 0d       	add	r30, r8
    5236:	f1 1d       	adc	r31, r1
    5238:	80 81       	ld	r24, Z
    523a:	b6 01       	movw	r22, r12
    523c:	90 e0       	ldi	r25, 0x00	; 0
    523e:	40 d0       	rcall	.+128    	; 0x52c0 <fputc>
    5240:	81 10       	cpse	r8, r1
    5242:	f6 cf       	rjmp	.-20     	; 0x5230 <vfprintf+0x396>
    5244:	22 20       	and	r2, r2
    5246:	09 f4       	brne	.+2      	; 0x524a <vfprintf+0x3b0>
    5248:	4e ce       	rjmp	.-868    	; 0x4ee6 <vfprintf+0x4c>
    524a:	b6 01       	movw	r22, r12
    524c:	80 e2       	ldi	r24, 0x20	; 32
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	37 d0       	rcall	.+110    	; 0x52c0 <fputc>
    5252:	2a 94       	dec	r2
    5254:	f7 cf       	rjmp	.-18     	; 0x5244 <vfprintf+0x3aa>
    5256:	f6 01       	movw	r30, r12
    5258:	86 81       	ldd	r24, Z+6	; 0x06
    525a:	97 81       	ldd	r25, Z+7	; 0x07
    525c:	02 c0       	rjmp	.+4      	; 0x5262 <vfprintf+0x3c8>
    525e:	8f ef       	ldi	r24, 0xFF	; 255
    5260:	9f ef       	ldi	r25, 0xFF	; 255
    5262:	2b 96       	adiw	r28, 0x0b	; 11
    5264:	0f b6       	in	r0, 0x3f	; 63
    5266:	f8 94       	cli
    5268:	de bf       	out	0x3e, r29	; 62
    526a:	0f be       	out	0x3f, r0	; 63
    526c:	cd bf       	out	0x3d, r28	; 61
    526e:	df 91       	pop	r29
    5270:	cf 91       	pop	r28
    5272:	1f 91       	pop	r17
    5274:	0f 91       	pop	r16
    5276:	ff 90       	pop	r15
    5278:	ef 90       	pop	r14
    527a:	df 90       	pop	r13
    527c:	cf 90       	pop	r12
    527e:	bf 90       	pop	r11
    5280:	af 90       	pop	r10
    5282:	9f 90       	pop	r9
    5284:	8f 90       	pop	r8
    5286:	7f 90       	pop	r7
    5288:	6f 90       	pop	r6
    528a:	5f 90       	pop	r5
    528c:	4f 90       	pop	r4
    528e:	3f 90       	pop	r3
    5290:	2f 90       	pop	r2
    5292:	08 95       	ret

00005294 <strnlen_P>:
    5294:	fc 01       	movw	r30, r24
    5296:	05 90       	lpm	r0, Z+
    5298:	61 50       	subi	r22, 0x01	; 1
    529a:	70 40       	sbci	r23, 0x00	; 0
    529c:	01 10       	cpse	r0, r1
    529e:	d8 f7       	brcc	.-10     	; 0x5296 <strnlen_P+0x2>
    52a0:	80 95       	com	r24
    52a2:	90 95       	com	r25
    52a4:	8e 0f       	add	r24, r30
    52a6:	9f 1f       	adc	r25, r31
    52a8:	08 95       	ret

000052aa <strnlen>:
    52aa:	fc 01       	movw	r30, r24
    52ac:	61 50       	subi	r22, 0x01	; 1
    52ae:	70 40       	sbci	r23, 0x00	; 0
    52b0:	01 90       	ld	r0, Z+
    52b2:	01 10       	cpse	r0, r1
    52b4:	d8 f7       	brcc	.-10     	; 0x52ac <strnlen+0x2>
    52b6:	80 95       	com	r24
    52b8:	90 95       	com	r25
    52ba:	8e 0f       	add	r24, r30
    52bc:	9f 1f       	adc	r25, r31
    52be:	08 95       	ret

000052c0 <fputc>:
    52c0:	0f 93       	push	r16
    52c2:	1f 93       	push	r17
    52c4:	cf 93       	push	r28
    52c6:	df 93       	push	r29
    52c8:	fb 01       	movw	r30, r22
    52ca:	23 81       	ldd	r18, Z+3	; 0x03
    52cc:	21 fd       	sbrc	r18, 1
    52ce:	03 c0       	rjmp	.+6      	; 0x52d6 <fputc+0x16>
    52d0:	8f ef       	ldi	r24, 0xFF	; 255
    52d2:	9f ef       	ldi	r25, 0xFF	; 255
    52d4:	2c c0       	rjmp	.+88     	; 0x532e <fputc+0x6e>
    52d6:	22 ff       	sbrs	r18, 2
    52d8:	16 c0       	rjmp	.+44     	; 0x5306 <fputc+0x46>
    52da:	46 81       	ldd	r20, Z+6	; 0x06
    52dc:	57 81       	ldd	r21, Z+7	; 0x07
    52de:	24 81       	ldd	r18, Z+4	; 0x04
    52e0:	35 81       	ldd	r19, Z+5	; 0x05
    52e2:	42 17       	cp	r20, r18
    52e4:	53 07       	cpc	r21, r19
    52e6:	44 f4       	brge	.+16     	; 0x52f8 <fputc+0x38>
    52e8:	a0 81       	ld	r26, Z
    52ea:	b1 81       	ldd	r27, Z+1	; 0x01
    52ec:	9d 01       	movw	r18, r26
    52ee:	2f 5f       	subi	r18, 0xFF	; 255
    52f0:	3f 4f       	sbci	r19, 0xFF	; 255
    52f2:	31 83       	std	Z+1, r19	; 0x01
    52f4:	20 83       	st	Z, r18
    52f6:	8c 93       	st	X, r24
    52f8:	26 81       	ldd	r18, Z+6	; 0x06
    52fa:	37 81       	ldd	r19, Z+7	; 0x07
    52fc:	2f 5f       	subi	r18, 0xFF	; 255
    52fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5300:	37 83       	std	Z+7, r19	; 0x07
    5302:	26 83       	std	Z+6, r18	; 0x06
    5304:	14 c0       	rjmp	.+40     	; 0x532e <fputc+0x6e>
    5306:	8b 01       	movw	r16, r22
    5308:	ec 01       	movw	r28, r24
    530a:	fb 01       	movw	r30, r22
    530c:	00 84       	ldd	r0, Z+8	; 0x08
    530e:	f1 85       	ldd	r31, Z+9	; 0x09
    5310:	e0 2d       	mov	r30, r0
    5312:	19 95       	eicall
    5314:	89 2b       	or	r24, r25
    5316:	e1 f6       	brne	.-72     	; 0x52d0 <fputc+0x10>
    5318:	d8 01       	movw	r26, r16
    531a:	16 96       	adiw	r26, 0x06	; 6
    531c:	8d 91       	ld	r24, X+
    531e:	9c 91       	ld	r25, X
    5320:	17 97       	sbiw	r26, 0x07	; 7
    5322:	01 96       	adiw	r24, 0x01	; 1
    5324:	17 96       	adiw	r26, 0x07	; 7
    5326:	9c 93       	st	X, r25
    5328:	8e 93       	st	-X, r24
    532a:	16 97       	sbiw	r26, 0x06	; 6
    532c:	ce 01       	movw	r24, r28
    532e:	df 91       	pop	r29
    5330:	cf 91       	pop	r28
    5332:	1f 91       	pop	r17
    5334:	0f 91       	pop	r16
    5336:	08 95       	ret

00005338 <__ultoa_invert>:
    5338:	fa 01       	movw	r30, r20
    533a:	aa 27       	eor	r26, r26
    533c:	28 30       	cpi	r18, 0x08	; 8
    533e:	51 f1       	breq	.+84     	; 0x5394 <__ultoa_invert+0x5c>
    5340:	20 31       	cpi	r18, 0x10	; 16
    5342:	81 f1       	breq	.+96     	; 0x53a4 <__ultoa_invert+0x6c>
    5344:	e8 94       	clt
    5346:	6f 93       	push	r22
    5348:	6e 7f       	andi	r22, 0xFE	; 254
    534a:	6e 5f       	subi	r22, 0xFE	; 254
    534c:	7f 4f       	sbci	r23, 0xFF	; 255
    534e:	8f 4f       	sbci	r24, 0xFF	; 255
    5350:	9f 4f       	sbci	r25, 0xFF	; 255
    5352:	af 4f       	sbci	r26, 0xFF	; 255
    5354:	b1 e0       	ldi	r27, 0x01	; 1
    5356:	3e d0       	rcall	.+124    	; 0x53d4 <__ultoa_invert+0x9c>
    5358:	b4 e0       	ldi	r27, 0x04	; 4
    535a:	3c d0       	rcall	.+120    	; 0x53d4 <__ultoa_invert+0x9c>
    535c:	67 0f       	add	r22, r23
    535e:	78 1f       	adc	r23, r24
    5360:	89 1f       	adc	r24, r25
    5362:	9a 1f       	adc	r25, r26
    5364:	a1 1d       	adc	r26, r1
    5366:	68 0f       	add	r22, r24
    5368:	79 1f       	adc	r23, r25
    536a:	8a 1f       	adc	r24, r26
    536c:	91 1d       	adc	r25, r1
    536e:	a1 1d       	adc	r26, r1
    5370:	6a 0f       	add	r22, r26
    5372:	71 1d       	adc	r23, r1
    5374:	81 1d       	adc	r24, r1
    5376:	91 1d       	adc	r25, r1
    5378:	a1 1d       	adc	r26, r1
    537a:	20 d0       	rcall	.+64     	; 0x53bc <__ultoa_invert+0x84>
    537c:	09 f4       	brne	.+2      	; 0x5380 <__ultoa_invert+0x48>
    537e:	68 94       	set
    5380:	3f 91       	pop	r19
    5382:	2a e0       	ldi	r18, 0x0A	; 10
    5384:	26 9f       	mul	r18, r22
    5386:	11 24       	eor	r1, r1
    5388:	30 19       	sub	r19, r0
    538a:	30 5d       	subi	r19, 0xD0	; 208
    538c:	31 93       	st	Z+, r19
    538e:	de f6       	brtc	.-74     	; 0x5346 <__ultoa_invert+0xe>
    5390:	cf 01       	movw	r24, r30
    5392:	08 95       	ret
    5394:	46 2f       	mov	r20, r22
    5396:	47 70       	andi	r20, 0x07	; 7
    5398:	40 5d       	subi	r20, 0xD0	; 208
    539a:	41 93       	st	Z+, r20
    539c:	b3 e0       	ldi	r27, 0x03	; 3
    539e:	0f d0       	rcall	.+30     	; 0x53be <__ultoa_invert+0x86>
    53a0:	c9 f7       	brne	.-14     	; 0x5394 <__ultoa_invert+0x5c>
    53a2:	f6 cf       	rjmp	.-20     	; 0x5390 <__ultoa_invert+0x58>
    53a4:	46 2f       	mov	r20, r22
    53a6:	4f 70       	andi	r20, 0x0F	; 15
    53a8:	40 5d       	subi	r20, 0xD0	; 208
    53aa:	4a 33       	cpi	r20, 0x3A	; 58
    53ac:	18 f0       	brcs	.+6      	; 0x53b4 <__ultoa_invert+0x7c>
    53ae:	49 5d       	subi	r20, 0xD9	; 217
    53b0:	31 fd       	sbrc	r19, 1
    53b2:	40 52       	subi	r20, 0x20	; 32
    53b4:	41 93       	st	Z+, r20
    53b6:	02 d0       	rcall	.+4      	; 0x53bc <__ultoa_invert+0x84>
    53b8:	a9 f7       	brne	.-22     	; 0x53a4 <__ultoa_invert+0x6c>
    53ba:	ea cf       	rjmp	.-44     	; 0x5390 <__ultoa_invert+0x58>
    53bc:	b4 e0       	ldi	r27, 0x04	; 4
    53be:	a6 95       	lsr	r26
    53c0:	97 95       	ror	r25
    53c2:	87 95       	ror	r24
    53c4:	77 95       	ror	r23
    53c6:	67 95       	ror	r22
    53c8:	ba 95       	dec	r27
    53ca:	c9 f7       	brne	.-14     	; 0x53be <__ultoa_invert+0x86>
    53cc:	00 97       	sbiw	r24, 0x00	; 0
    53ce:	61 05       	cpc	r22, r1
    53d0:	71 05       	cpc	r23, r1
    53d2:	08 95       	ret
    53d4:	9b 01       	movw	r18, r22
    53d6:	ac 01       	movw	r20, r24
    53d8:	0a 2e       	mov	r0, r26
    53da:	06 94       	lsr	r0
    53dc:	57 95       	ror	r21
    53de:	47 95       	ror	r20
    53e0:	37 95       	ror	r19
    53e2:	27 95       	ror	r18
    53e4:	ba 95       	dec	r27
    53e6:	c9 f7       	brne	.-14     	; 0x53da <__ultoa_invert+0xa2>
    53e8:	62 0f       	add	r22, r18
    53ea:	73 1f       	adc	r23, r19
    53ec:	84 1f       	adc	r24, r20
    53ee:	95 1f       	adc	r25, r21
    53f0:	a0 1d       	adc	r26, r0
    53f2:	08 95       	ret

000053f4 <_exit>:
    53f4:	f8 94       	cli

000053f6 <__stop_program>:
    53f6:	ff cf       	rjmp	.-2      	; 0x53f6 <__stop_program>
