
SEP4IOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000752  00800200  000093ee  00009482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000093ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cd4  00800952  00800952  00009bd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000af0  00000000  00000000  00009c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a841  00000000  00000000  0000a760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eb2  00000000  00000000  00014fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000726f  00000000  00000000  00017e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002988  00000000  00000000  0001f0c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003ed3  00000000  00000000  00021a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006ed5  00000000  00000000  0002591f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a0  00000000  00000000  0002c7f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b1 c0       	rjmp	.+354    	; 0x164 <__ctors_end>
       2:	00 00       	nop
       4:	cf c0       	rjmp	.+414    	; 0x1a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c0       	rjmp	.+410    	; 0x1a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c0       	rjmp	.+406    	; 0x1a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c0       	rjmp	.+398    	; 0x1a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c0       	rjmp	.+394    	; 0x1a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c0       	rjmp	.+386    	; 0x1a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c0       	rjmp	.+382    	; 0x1a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	bd c0       	rjmp	.+378    	; 0x1a4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bb c0       	rjmp	.+374    	; 0x1a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__vector_12>
      34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	b5 c0       	rjmp	.+362    	; 0x1a4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b3 c0       	rjmp	.+358    	; 0x1a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c0       	rjmp	.+354    	; 0x1a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c0       	rjmp	.+350    	; 0x1a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c0       	rjmp	.+346    	; 0x1a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c0       	rjmp	.+342    	; 0x1a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c0       	rjmp	.+338    	; 0x1a4 <__bad_interrupt>
      52:	00 00       	nop
      54:	a7 c0       	rjmp	.+334    	; 0x1a4 <__bad_interrupt>
      56:	00 00       	nop
      58:	a5 c0       	rjmp	.+330    	; 0x1a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c0       	rjmp	.+326    	; 0x1a4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a1 c0       	rjmp	.+322    	; 0x1a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c2 3f 	jmp	0x7f84	; 0x7f84 <__vector_25>
      68:	0c 94 14 40 	jmp	0x8028	; 0x8028 <__vector_26>
      6c:	9b c0       	rjmp	.+310    	; 0x1a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c0       	rjmp	.+306    	; 0x1a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c0       	rjmp	.+302    	; 0x1a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c0       	rjmp	.+298    	; 0x1a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c0       	rjmp	.+294    	; 0x1a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c0       	rjmp	.+290    	; 0x1a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c0       	rjmp	.+286    	; 0x1a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c0       	rjmp	.+282    	; 0x1a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c0       	rjmp	.+278    	; 0x1a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 58 40 	jmp	0x80b0	; 0x80b0 <__vector_36>
      94:	0c 94 aa 40 	jmp	0x8154	; 0x8154 <__vector_37>
      98:	85 c0       	rjmp	.+266    	; 0x1a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	83 c0       	rjmp	.+262    	; 0x1a4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	81 c0       	rjmp	.+258    	; 0x1a4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7f c0       	rjmp	.+254    	; 0x1a4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7d c0       	rjmp	.+250    	; 0x1a4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7b c0       	rjmp	.+246    	; 0x1a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c0       	rjmp	.+242    	; 0x1a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c0       	rjmp	.+238    	; 0x1a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	75 c0       	rjmp	.+234    	; 0x1a4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	73 c0       	rjmp	.+230    	; 0x1a4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	71 c0       	rjmp	.+226    	; 0x1a4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6f c0       	rjmp	.+222    	; 0x1a4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6d c0       	rjmp	.+218    	; 0x1a4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ee 40 	jmp	0x81dc	; 0x81dc <__vector_51>
      d0:	0c 94 40 41 	jmp	0x8280	; 0x8280 <__vector_52>
      d4:	67 c0       	rjmp	.+206    	; 0x1a4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 84 41 	jmp	0x8308	; 0x8308 <__vector_54>
      dc:	0c 94 d6 41 	jmp	0x83ac	; 0x83ac <__vector_55>
      e0:	61 c0       	rjmp	.+194    	; 0x1a4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	30 35       	cpi	r19, 0x50	; 80
      e6:	30 35       	cpi	r19, 0x50	; 80
      e8:	30 35       	cpi	r19, 0x50	; 80
      ea:	8f 35       	cpi	r24, 0x5F	; 95
      ec:	9a 35       	cpi	r25, 0x5A	; 90
      ee:	d1 35       	cpi	r29, 0x51	; 81
      f0:	30 35       	cpi	r19, 0x50	; 80
      f2:	30 35       	cpi	r19, 0x50	; 80
      f4:	8f 35       	cpi	r24, 0x5F	; 95
      f6:	9a 35       	cpi	r25, 0x5A	; 90

000000f8 <prvIdleTask>:
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
        }
        taskEXIT_CRITICAL();

        return ulReturn;
    }
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	1f 92       	push	r1
      fe:	1f 92       	push	r1
     100:	cd b7       	in	r28, 0x3d	; 61
     102:	de b7       	in	r29, 0x3e	; 62
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	0e 94 f5 27 	call	0x4fea	; 0x4fea <prvCheckTasksWaitingTermination>
     10c:	80 91 95 13 	lds	r24, 0x1395	; 0x801395 <pxReadyTasksLists>
     110:	82 30       	cpi	r24, 0x02	; 2
     112:	10 f0       	brcs	.+4      	; 0x118 <prvIdleTask+0x20>
     114:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vPortYield>
     118:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <vApplicationIdleHook>
     11c:	f5 cf       	rjmp	.-22     	; 0x108 <prvIdleTask+0x10>

0000011e <prvTimerTask>:
    {
        Timer_t * pxTimer = xTimer;

        configASSERT( xTimer );
        return pxTimer->pcTimerName;
    }
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
     126:	27 97       	sbiw	r28, 0x07	; 7
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	0f be       	out	0x3f, r0	; 63
     130:	cd bf       	out	0x3d, r28	; 61
     132:	9f 83       	std	Y+7, r25	; 0x07
     134:	8e 83       	std	Y+6, r24	; 0x06
     136:	ce 01       	movw	r24, r28
     138:	05 96       	adiw	r24, 0x05	; 5
     13a:	0e 94 c2 33 	call	0x6784	; 0x6784 <prvGetNextExpireTime>
     13e:	dc 01       	movw	r26, r24
     140:	cb 01       	movw	r24, r22
     142:	89 83       	std	Y+1, r24	; 0x01
     144:	9a 83       	std	Y+2, r25	; 0x02
     146:	ab 83       	std	Y+3, r26	; 0x03
     148:	bc 83       	std	Y+4, r27	; 0x04
     14a:	2d 81       	ldd	r18, Y+5	; 0x05
     14c:	89 81       	ldd	r24, Y+1	; 0x01
     14e:	9a 81       	ldd	r25, Y+2	; 0x02
     150:	ab 81       	ldd	r26, Y+3	; 0x03
     152:	bc 81       	ldd	r27, Y+4	; 0x04
     154:	42 2f       	mov	r20, r18
     156:	bc 01       	movw	r22, r24
     158:	cd 01       	movw	r24, r26
     15a:	0e 94 43 33 	call	0x6686	; 0x6686 <prvProcessTimerOrBlockTask>
     15e:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <prvProcessReceivedCommands>
     162:	e9 cf       	rjmp	.-46     	; 0x136 <prvTimerTask+0x18>

00000164 <__ctors_end>:
     164:	11 24       	eor	r1, r1
     166:	1f be       	out	0x3f, r1	; 63
     168:	cf ef       	ldi	r28, 0xFF	; 255
     16a:	d1 e2       	ldi	r29, 0x21	; 33
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	cd bf       	out	0x3d, r28	; 61
     170:	00 e0       	ldi	r16, 0x00	; 0
     172:	0c bf       	out	0x3c, r16	; 60

00000174 <__do_copy_data>:
     174:	19 e0       	ldi	r17, 0x09	; 9
     176:	a0 e0       	ldi	r26, 0x00	; 0
     178:	b2 e0       	ldi	r27, 0x02	; 2
     17a:	ee ee       	ldi	r30, 0xEE	; 238
     17c:	f3 e9       	ldi	r31, 0x93	; 147
     17e:	00 e0       	ldi	r16, 0x00	; 0
     180:	0b bf       	out	0x3b, r16	; 59
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x14>
     184:	07 90       	elpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a2 35       	cpi	r26, 0x52	; 82
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0x10>

0000018e <__do_clear_bss>:
     18e:	26 e1       	ldi	r18, 0x16	; 22
     190:	a2 e5       	ldi	r26, 0x52	; 82
     192:	b9 e0       	ldi	r27, 0x09	; 9
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	a6 32       	cpi	r26, 0x26	; 38
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	59 d5       	rcall	.+2738   	; 0xc52 <main>
     1a0:	0c 94 f5 49 	jmp	0x93ea	; 0x93ea <_exit>

000001a4 <__bad_interrupt>:
     1a4:	2d cf       	rjmp	.-422    	; 0x0 <__vectors>

000001a6 <UL_handler_create>:
 static void _lora_setup(void);
 void UL_receive_task( void *pvParameters );

/*-------------------------------------------------------*/

void UL_handler_create(){
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62

	xTaskCreate(
     1b4:	e1 2c       	mov	r14, r1
     1b6:	f1 2c       	mov	r15, r1
     1b8:	03 e0       	ldi	r16, 0x03	; 3
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 ec       	ldi	r20, 0xC0	; 192
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	6d e1       	ldi	r22, 0x1D	; 29
     1c4:	72 e0       	ldi	r23, 0x02	; 2
     1c6:	8e ee       	ldi	r24, 0xEE	; 238
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xTaskCreate>
	,  "UpLink Handler Receive"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  3
	,  NULL );
}
     1ce:	00 00       	nop
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	0f 91       	pop	r16
     1d6:	ff 90       	pop	r15
     1d8:	ef 90       	pop	r14
     1da:	08 95       	ret

000001dc <UL_receive_task>:

void UL_receive_task( void *pvParameters )
{
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
     1e8:	a2 97       	sbiw	r28, 0x22	; 34
     1ea:	0f b6       	in	r0, 0x3f	; 63
     1ec:	f8 94       	cli
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	9a a3       	std	Y+34, r25	; 0x22
     1f6:	89 a3       	std	Y+33, r24	; 0x21
	taskENTER_CRITICAL();
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	0f 92       	push	r0
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 92 3a 	call	0x7524	; 0x7524 <lora_driver_resetRn2483>
	vTaskDelay(2);
     204:	62 e0       	ldi	r22, 0x02	; 2
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <vTaskDelay>
	lora_driver_resetRn2483(0);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	0e 94 92 3a 	call	0x7524	; 0x7524 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     216:	66 e9       	ldi	r22, 0x96	; 150
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     222:	0e 94 4b 3a 	call	0x7496	; 0x7496 <lora_driver_flushBuffers>

	_lora_setup();
     226:	66 d0       	rcall	.+204    	; 0x2f4 <_lora_setup>
	
	taskEXIT_CRITICAL();
     228:	0f 90       	pop	r0
     22a:	0f be       	out	0x3f, r0	; 63
	 for(;;){
		 
		 xSemaphoreTake( windowControllerMutex , portMAX_DELAY);
     22c:	80 91 c0 15 	lds	r24, 0x15C0	; 0x8015c0 <windowControllerMutex>
     230:	90 91 c1 15 	lds	r25, 0x15C1	; 0x8015c1 <windowControllerMutex+0x1>
     234:	4f ef       	ldi	r20, 0xFF	; 255
     236:	5f ef       	ldi	r21, 0xFF	; 255
     238:	ba 01       	movw	r22, r20
     23a:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
		 
		 SensorDataPackage_t sensorDataPackage = SensorDataPackage_create();
     23e:	2f d5       	rcall	.+2654   	; 0xc9e <SensorDataPackage_create>
     240:	9a 87       	std	Y+10, r25	; 0x0a
     242:	89 87       	std	Y+9, r24	; 0x09
		 
		 size_t xReceivedBytes;
		 const TickType_t xBlockTime = pdMS_TO_TICKS( 200 );
     244:	8c e0       	ldi	r24, 0x0C	; 12
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	9a 83       	std	Y+2, r25	; 0x02
     250:	ab 83       	std	Y+3, r26	; 0x03
     252:	bc 83       	std	Y+4, r27	; 0x04

		 // Receive next message from the UL message buffer. Wait for a maximum of 100ms for a message to become available.
		 xReceivedBytes = xMessageBufferReceive( // Does not work properly... Fuck it, will do it the other way for now.
     254:	e0 91 c4 15 	lds	r30, 0x15C4	; 0x8015c4 <UpLinkMessageBuffer>
     258:	f0 91 c5 15 	lds	r31, 0x15C5	; 0x8015c5 <UpLinkMessageBuffer+0x1>
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	9a 81       	ldd	r25, Y+2	; 0x02
     260:	ab 81       	ldd	r26, Y+3	; 0x03
     262:	bc 81       	ldd	r27, Y+4	; 0x04
     264:	be 01       	movw	r22, r28
     266:	67 5f       	subi	r22, 0xF7	; 247
     268:	7f 4f       	sbci	r23, 0xFF	; 255
     26a:	8c 01       	movw	r16, r24
     26c:	9d 01       	movw	r18, r26
     26e:	42 e0       	ldi	r20, 0x02	; 2
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	cf 01       	movw	r24, r30
     274:	0e 94 07 19 	call	0x320e	; 0x320e <xStreamBufferReceive>
     278:	9e 83       	std	Y+6, r25	; 0x06
		 &sensorDataPackage,
		 sizeof( SensorDataPackage_t ),
		 xBlockTime
		 );
		 
		uint16_t co2_ppm = getCO2();
     27a:	8d 83       	std	Y+5, r24	; 0x05
     27c:	47 d2       	rcall	.+1166   	; 0x70c <getCO2>
     27e:	98 87       	std	Y+8, r25	; 0x08
     280:	8f 83       	std	Y+7, r24	; 0x07
		
		lora_driver_payload_t _uplink_payload;
		
		_uplink_payload.bytes[0] = co2_ppm >> 8;
     282:	8f 81       	ldd	r24, Y+7	; 0x07
     284:	98 85       	ldd	r25, Y+8	; 0x08
     286:	89 2f       	mov	r24, r25
     288:	99 27       	eor	r25, r25
     28a:	8d 87       	std	Y+13, r24	; 0x0d
		_uplink_payload.bytes[1] = co2_ppm & 0xFF;
     28c:	8f 81       	ldd	r24, Y+7	; 0x07
     28e:	8e 87       	std	Y+14, r24	; 0x0e
		_uplink_payload.len = 2;
     290:	82 e0       	ldi	r24, 0x02	; 2
     292:	8c 87       	std	Y+12, r24	; 0x0c
		_uplink_payload.portNo = 2;
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	8b 87       	std	Y+11, r24	; 0x0b

		status_leds_shortPuls(led_ST4);  // OPTIONAL
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	0e 94 03 44 	call	0x8806	; 0x8806 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     29e:	ce 01       	movw	r24, r28
     2a0:	0b 96       	adiw	r24, 0x0b	; 11
     2a2:	bc 01       	movw	r22, r24
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 30 3b 	call	0x7660	; 0x7660 <lora_driver_sendUploadMessage>
     2aa:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <lora_driver_mapReturnCodeToText>
     2ae:	29 2f       	mov	r18, r25
     2b0:	2f 93       	push	r18
     2b2:	8f 93       	push	r24
     2b4:	84 e3       	ldi	r24, 0x34	; 52
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	89 2f       	mov	r24, r25
     2ba:	8f 93       	push	r24
     2bc:	84 e3       	ldi	r24, 0x34	; 52
     2be:	92 e0       	ldi	r25, 0x02	; 2
     2c0:	8f 93       	push	r24
     2c2:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
		vTaskDelay(pdMS_TO_TICKS(150000));
     2ce:	64 e5       	ldi	r22, 0x54	; 84
     2d0:	74 e2       	ldi	r23, 0x24	; 36
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <vTaskDelay>
		xSemaphoreGive(UpLinkReceiveMutex);
     2da:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <UpLinkReceiveMutex>
     2de:	90 91 c3 15 	lds	r25, 0x15C3	; 0x8015c3 <UpLinkReceiveMutex+0x1>
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	a9 01       	movw	r20, r18
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
			 xSemaphoreGive(UpLinkReceiveMutex);
			 }else{
			 // Wait 2.5 minutes to retry
			// vTaskDelay(pdMS_TO_TICKS(150000));
		 }*/
	 }
     2f2:	9c cf       	rjmp	.-200    	; 0x22c <UL_receive_task+0x50>

000002f4 <_lora_setup>:

 }
 
 static void _lora_setup(void)
 {
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	1f 92       	push	r1
     2fa:	1f 92       	push	r1
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
	 lora_driver_returnCode_t rc;
	 status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	0e 94 8d 43 	call	0x871a	; 0x871a <status_leds_slowBlink>

	// Factory reset the transceiver
	 printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     306:	0e 94 a0 3a 	call	0x7540	; 0x7540 <lora_driver_rn2483FactoryReset>
     30a:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <lora_driver_mapReturnCodeToText>
     30e:	29 2f       	mov	r18, r25
     310:	2f 93       	push	r18
     312:	8f 93       	push	r24
     314:	89 e4       	ldi	r24, 0x49	; 73
     316:	92 e0       	ldi	r25, 0x02	; 2
     318:	89 2f       	mov	r24, r25
     31a:	8f 93       	push	r24
     31c:	89 e4       	ldi	r24, 0x49	; 73
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	8f 93       	push	r24
     322:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
	 
	 // Configure to EU868 LoRaWAN standards
	 printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     32e:	0e 94 1e 3c 	call	0x783c	; 0x783c <lora_driver_configureToEu868>
     332:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <lora_driver_mapReturnCodeToText>
     336:	29 2f       	mov	r18, r25
     338:	2f 93       	push	r18
     33a:	8f 93       	push	r24
     33c:	8c e5       	ldi	r24, 0x5C	; 92
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	89 2f       	mov	r24, r25
     342:	8f 93       	push	r24
     344:	8c e5       	ldi	r24, 0x5C	; 92
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	8f 93       	push	r24
     34a:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0

	 // Get the transceivers HW EUI
	 rc = lora_driver_getRn2483Hweui(_out_buf);
     356:	82 e5       	ldi	r24, 0x52	; 82
     358:	99 e0       	ldi	r25, 0x09	; 9
     35a:	0e 94 b2 3a 	call	0x7564	; 0x7564 <lora_driver_getRn2483Hweui>
     35e:	8a 83       	std	Y+2, r24	; 0x02
	 printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <lora_driver_mapReturnCodeToText>
     366:	9c 01       	movw	r18, r24
     368:	82 e5       	ldi	r24, 0x52	; 82
     36a:	99 e0       	ldi	r25, 0x09	; 9
     36c:	89 2f       	mov	r24, r25
     36e:	8f 93       	push	r24
     370:	82 e5       	ldi	r24, 0x52	; 82
     372:	99 e0       	ldi	r25, 0x09	; 9
     374:	8f 93       	push	r24
     376:	83 2f       	mov	r24, r19
     378:	8f 93       	push	r24
     37a:	82 2f       	mov	r24, r18
     37c:	8f 93       	push	r24
     37e:	85 e7       	ldi	r24, 0x75	; 117
     380:	92 e0       	ldi	r25, 0x02	; 2
     382:	89 2f       	mov	r24, r25
     384:	8f 93       	push	r24
     386:	85 e7       	ldi	r24, 0x75	; 117
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	8f 93       	push	r24
     38c:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0

	 // Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	 printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     39c:	82 e5       	ldi	r24, 0x52	; 82
     39e:	99 e0       	ldi	r25, 0x09	; 9
     3a0:	0e 94 ce 3a 	call	0x759c	; 0x759c <lora_driver_setDeviceIdentifier>
     3a4:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <lora_driver_mapReturnCodeToText>
     3a8:	29 2f       	mov	r18, r25
     3aa:	2f 93       	push	r18
     3ac:	8f 93       	push	r24
     3ae:	82 e5       	ldi	r24, 0x52	; 82
     3b0:	99 e0       	ldi	r25, 0x09	; 9
     3b2:	89 2f       	mov	r24, r25
     3b4:	8f 93       	push	r24
     3b6:	82 e5       	ldi	r24, 0x52	; 82
     3b8:	99 e0       	ldi	r25, 0x09	; 9
     3ba:	8f 93       	push	r24
     3bc:	89 e8       	ldi	r24, 0x89	; 137
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	89 2f       	mov	r24, r25
     3c2:	8f 93       	push	r24
     3c4:	89 e8       	ldi	r24, 0x89	; 137
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	8f 93       	push	r24
     3ca:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0

	 // Set Over The Air Activation parameters to be ready to join the LoRaWAN
	 printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     3da:	42 e5       	ldi	r20, 0x52	; 82
     3dc:	59 e0       	ldi	r21, 0x09	; 9
     3de:	6e e9       	ldi	r22, 0x9E	; 158
     3e0:	72 e0       	ldi	r23, 0x02	; 2
     3e2:	8f eb       	ldi	r24, 0xBF	; 191
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <lora_driver_setOtaaIdentity>
     3ea:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <lora_driver_mapReturnCodeToText>
     3ee:	29 2f       	mov	r18, r25
     3f0:	2f 93       	push	r18
     3f2:	8f 93       	push	r24
     3f4:	82 e5       	ldi	r24, 0x52	; 82
     3f6:	99 e0       	ldi	r25, 0x09	; 9
     3f8:	89 2f       	mov	r24, r25
     3fa:	8f 93       	push	r24
     3fc:	82 e5       	ldi	r24, 0x52	; 82
     3fe:	99 e0       	ldi	r25, 0x09	; 9
     400:	8f 93       	push	r24
     402:	8e e9       	ldi	r24, 0x9E	; 158
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	89 2f       	mov	r24, r25
     408:	8f 93       	push	r24
     40a:	8e e9       	ldi	r24, 0x9E	; 158
     40c:	92 e0       	ldi	r25, 0x02	; 2
     40e:	8f 93       	push	r24
     410:	8f eb       	ldi	r24, 0xBF	; 191
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	89 2f       	mov	r24, r25
     416:	8f 93       	push	r24
     418:	8f eb       	ldi	r24, 0xBF	; 191
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	8f 93       	push	r24
     41e:	80 ed       	ldi	r24, 0xD0	; 208
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	89 2f       	mov	r24, r25
     424:	8f 93       	push	r24
     426:	80 ed       	ldi	r24, 0xD0	; 208
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	8f 93       	push	r24
     42c:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     430:	8d b7       	in	r24, 0x3d	; 61
     432:	9e b7       	in	r25, 0x3e	; 62
     434:	0a 96       	adiw	r24, 0x0a	; 10
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61

	 // Save all the MAC settings in the transceiver
	 printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     440:	0e 94 01 3b 	call	0x7602	; 0x7602 <lora_driver_saveMac>
     444:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <lora_driver_mapReturnCodeToText>
     448:	29 2f       	mov	r18, r25
     44a:	2f 93       	push	r18
     44c:	8f 93       	push	r24
     44e:	86 e0       	ldi	r24, 0x06	; 6
     450:	93 e0       	ldi	r25, 0x03	; 3
     452:	89 2f       	mov	r24, r25
     454:	8f 93       	push	r24
     456:	86 e0       	ldi	r24, 0x06	; 6
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	8f 93       	push	r24
     45c:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0

	 // Enable Adaptive Data Rate
	 printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	0e 94 fb 3b 	call	0x77f6	; 0x77f6 <lora_driver_setAdaptiveDataRate>
     46e:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <lora_driver_mapReturnCodeToText>
     472:	29 2f       	mov	r18, r25
     474:	2f 93       	push	r18
     476:	8f 93       	push	r24
     478:	85 e1       	ldi	r24, 0x15	; 21
     47a:	93 e0       	ldi	r25, 0x03	; 3
     47c:	89 2f       	mov	r24, r25
     47e:	8f 93       	push	r24
     480:	85 e1       	ldi	r24, 0x15	; 21
     482:	93 e0       	ldi	r25, 0x03	; 3
     484:	8f 93       	push	r24
     486:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0

	 // Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	 printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     492:	84 ef       	ldi	r24, 0xF4	; 244
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 06 3c 	call	0x780c	; 0x780c <lora_driver_setReceiveDelay>
     49a:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <lora_driver_mapReturnCodeToText>
     49e:	29 2f       	mov	r18, r25
     4a0:	2f 93       	push	r18
     4a2:	8f 93       	push	r24
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	8f 93       	push	r24
     4a8:	84 ef       	ldi	r24, 0xF4	; 244
     4aa:	8f 93       	push	r24
     4ac:	86 e3       	ldi	r24, 0x36	; 54
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	89 2f       	mov	r24, r25
     4b2:	8f 93       	push	r24
     4b4:	86 e3       	ldi	r24, 0x36	; 54
     4b6:	93 e0       	ldi	r25, 0x03	; 3
     4b8:	8f 93       	push	r24
     4ba:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0

	 // Join the LoRaWAN
	 uint8_t maxJoinTriesLeft = 10;
     4ca:	8a e0       	ldi	r24, 0x0A	; 10
     4cc:	89 83       	std	Y+1, r24	; 0x01
	 
	 do {
		 rc = lora_driver_join(LORA_OTAA);
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	0e 94 07 3b 	call	0x760e	; 0x760e <lora_driver_join>
     4d4:	8a 83       	std	Y+2, r24	; 0x02
		 printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <lora_driver_mapReturnCodeToText>
     4dc:	9c 01       	movw	r18, r24
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	88 2f       	mov	r24, r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	43 2f       	mov	r20, r19
     4e6:	4f 93       	push	r20
     4e8:	2f 93       	push	r18
     4ea:	29 2f       	mov	r18, r25
     4ec:	2f 93       	push	r18
     4ee:	8f 93       	push	r24
     4f0:	86 e5       	ldi	r24, 0x56	; 86
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	89 2f       	mov	r24, r25
     4f6:	8f 93       	push	r24
     4f8:	86 e5       	ldi	r24, 0x56	; 86
     4fa:	93 e0       	ldi	r25, 0x03	; 3
     4fc:	8f 93       	push	r24
     4fe:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0

		 if ( rc != LORA_ACCEPTED){
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	88 30       	cpi	r24, 0x08	; 8
     512:	81 f0       	breq	.+32     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
			 // Make the red led pulse to tell something went wrong
			 status_leds_longPuls(led_ST1); // OPTIONAL
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	0e 94 f1 43 	call	0x87e2	; 0x87e2 <status_leds_longPuls>
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
     51a:	66 e3       	ldi	r22, 0x36	; 54
     51c:	71 e0       	ldi	r23, 0x01	; 1
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <vTaskDelay>
		 }
		 else
		 {
			 break;
		 }
	 } while (--maxJoinTriesLeft);
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	81 50       	subi	r24, 0x01	; 1
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	88 23       	and	r24, r24
     530:	71 f6       	brne	.-100    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     532:	01 c0       	rjmp	.+2      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
			 // Wait 5 sec and lets try again
			 vTaskDelay(pdMS_TO_TICKS(5000UL));
		 }
		 else
		 {
			 break;
     534:	00 00       	nop
		 }
	 } while (--maxJoinTriesLeft);

	 if ( rc == LORA_ACCEPTED)
     536:	8a 81       	ldd	r24, Y+2	; 0x02
     538:	88 30       	cpi	r24, 0x08	; 8
     53a:	21 f4       	brne	.+8      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
	 {
		 // Connected to LoRaWAN :-)
		 // Make the green led steady
		 status_leds_ledOn(led_ST2); // OPTIONAL
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <status_leds_ledOn>
		 while (1)
		 {
			 taskYIELD();
		 }
	 }
 }
     542:	09 c0       	rjmp	.+18     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
	 }
	 else
	 {
		 // Something went wrong
		 // Turn off the green led
		 status_leds_ledOff(led_ST2); // OPTIONAL
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <status_leds_ledOff>
		 // Make the red led blink fast to tell something went wrong
		 status_leds_fastBlink(led_ST1); // OPTIONAL
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 b0 43 	call	0x8760	; 0x8760 <status_leds_fastBlink>

		 // Lets stay here
		 while (1)
		 {
			 taskYIELD();
     550:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vPortYield>
		 }
     554:	fd cf       	rjmp	.-6      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
	 }
 }
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <rcServoTask>:

//private variables
static bool _IsClosed;

void rcServoTask(void *pvParameters)
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	00 d0       	rcall	.+0      	; 0x56a <rcServoTask+0xa>
     56a:	1f 92       	push	r1
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
     570:	9c 83       	std	Y+4, r25	; 0x04
     572:	8b 83       	std	Y+3, r24	; 0x03
	Configuration_t configuration = Configuration_create();
     574:	f2 d3       	rcall	.+2020   	; 0xd5a <Configuration_create>
     576:	9a 83       	std	Y+2, r25	; 0x02
     578:	89 83       	std	Y+1, r24	; 0x01
	
	 
	for (;;)
	{
		xSemaphoreTake(UpLinkSendMutex, portMAX_DELAY);
     57a:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <UpLinkSendMutex>
     57e:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <UpLinkSendMutex+0x1>
     582:	4f ef       	ldi	r20, 0xFF	; 255
     584:	5f ef       	ldi	r21, 0xFF	; 255
     586:	ba 01       	movw	r22, r20
     588:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
				
    if(getCO2()>Configuration_getCO2(configuration))
     58c:	bf d0       	rcall	.+382    	; 0x70c <getCO2>
     58e:	8c 01       	movw	r16, r24
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	9a 81       	ldd	r25, Y+2	; 0x02
     594:	2c d4       	rcall	.+2136   	; 0xdee <Configuration_getCO2>
     596:	80 17       	cp	r24, r16
     598:	91 07       	cpc	r25, r17
     59a:	88 f4       	brcc	.+34     	; 0x5be <rcServoTask+0x5e>
	{
		if (_IsClosed == false)
     59c:	90 91 b6 09 	lds	r25, 0x09B6	; 0x8009b6 <_IsClosed>
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	89 27       	eor	r24, r25
     5a4:	88 23       	and	r24, r24
		{
			mutexPuts("Window is closing \n");
     5a6:	01 f1       	breq	.+64     	; 0x5e8 <rcServoTask+0x88>
     5a8:	86 e7       	ldi	r24, 0x76	; 118
     5aa:	93 e0       	ldi	r25, 0x03	; 3
     5ac:	db d1       	rcall	.+950    	; 0x964 <mutexPuts>
			rc_servo_setPosition(14, RC_SERVO_UP_POSITION);
     5ae:	64 e6       	ldi	r22, 0x64	; 100
     5b0:	8e e0       	ldi	r24, 0x0E	; 14
     5b2:	0e 94 52 3e 	call	0x7ca4	; 0x7ca4 <rc_servo_setPosition>
			_IsClosed = true;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 b6 09 	sts	0x09B6, r24	; 0x8009b6 <_IsClosed>
		}
	}
	else if (getCO2()<Configuration_getCO2(configuration))
     5bc:	15 c0       	rjmp	.+42     	; 0x5e8 <rcServoTask+0x88>
     5be:	a6 d0       	rcall	.+332    	; 0x70c <getCO2>
     5c0:	8c 01       	movw	r16, r24
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	9a 81       	ldd	r25, Y+2	; 0x02
     5c6:	13 d4       	rcall	.+2086   	; 0xdee <Configuration_getCO2>
     5c8:	08 17       	cp	r16, r24
     5ca:	19 07       	cpc	r17, r25
     5cc:	68 f4       	brcc	.+26     	; 0x5e8 <rcServoTask+0x88>
	{
		if (_IsClosed == true)
     5ce:	80 91 b6 09 	lds	r24, 0x09B6	; 0x8009b6 <_IsClosed>
     5d2:	88 23       	and	r24, r24
		{
			mutexPuts("Window is opening \n");
     5d4:	49 f0       	breq	.+18     	; 0x5e8 <rcServoTask+0x88>
     5d6:	8a e8       	ldi	r24, 0x8A	; 138
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	c4 d1       	rcall	.+904    	; 0x964 <mutexPuts>
			rc_servo_setPosition(14, RC_SERVO_DOWN_POSITION);
     5dc:	6c e9       	ldi	r22, 0x9C	; 156
     5de:	8e e0       	ldi	r24, 0x0E	; 14
     5e0:	0e 94 52 3e 	call	0x7ca4	; 0x7ca4 <rc_servo_setPosition>
			_IsClosed = false;
     5e4:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <_IsClosed>
		}
	}
	xSemaphoreGive(windowControllerMutex);	
     5e8:	80 91 c0 15 	lds	r24, 0x15C0	; 0x8015c0 <windowControllerMutex>
     5ec:	90 91 c1 15 	lds	r25, 0x15C1	; 0x8015c1 <windowControllerMutex+0x1>
     5f0:	00 e0       	ldi	r16, 0x00	; 0
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	a9 01       	movw	r20, r18
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
						_IsClosed = false;
					}
					
		         }*/
		
	}
     600:	bc cf       	rjmp	.-136    	; 0x57a <rcServoTask+0x1a>

00000602 <rcServoTask_create>:
}

void rcServoTask_create()
{
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
	rc_servo_initialise();
     610:	0e 94 6a 3e 	call	0x7cd4	; 0x7cd4 <rc_servo_initialise>
	xTaskCreate(rcServoTask, RC_SERVO_TASK_NAME, configMINIMAL_STACK_SIZE, NULL, RC_SERVO_TASK_PRIORITY, NULL);
     614:	e1 2c       	mov	r14, r1
     616:	f1 2c       	mov	r15, r1
     618:	07 e0       	ldi	r16, 0x07	; 7
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 ec       	ldi	r20, 0xC0	; 192
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	6e e9       	ldi	r22, 0x9E	; 158
     624:	73 e0       	ldi	r23, 0x03	; 3
     626:	80 eb       	ldi	r24, 0xB0	; 176
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xTaskCreate>
     62e:	00 00       	nop
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	0f 91       	pop	r16
     636:	ff 90       	pop	r15
     638:	ef 90       	pop	r14
     63a:	08 95       	ret

0000063c <CO2_handler_create>:
void co2sensorTask(void* pvParameters);
//#define BIT_TASK_CO2_MEASURE (1 << 0)
//#define BIT_TASK_CO2_READY (1 << 1)
 

void CO2_handler_create(){
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
	// The parameter is the USART port the MH-Z19 sensor is connected to - in this case USART3
	mh_z19_initialise(ser_USART3);
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <mh_z19_initialise>
	mh_z19_injectCallBack(mh_z19_callBack);
     650:	89 e6       	ldi	r24, 0x69	; 105
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	0e 94 1e 3e 	call	0x7c3c	; 0x7c3c <mh_z19_injectCallBack>
	
	xTaskCreate(
     658:	e1 2c       	mov	r14, r1
     65a:	f1 2c       	mov	r15, r1
     65c:	03 e0       	ldi	r16, 0x03	; 3
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	40 ec       	ldi	r20, 0xC0	; 192
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	66 ea       	ldi	r22, 0xA6	; 166
     668:	73 e0       	ldi	r23, 0x03	; 3
     66a:	80 e4       	ldi	r24, 0x40	; 64
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xTaskCreate>
	,  "CO2 Sensor Task"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack High water
	,  NULL 
	,  3  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
} 
     672:	00 00       	nop
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	08 95       	ret

00000680 <co2sensorTask>:

void co2sensorTask(void* pvParameters)
{
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	1f 92       	push	r1
     690:	1f 92       	push	r1
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	9a 83       	std	Y+2, r25	; 0x02
     698:	89 83       	std	Y+1, r24	; 0x01
	(void)pvParameters;
	while(1){
		xEventGroupWaitBits(
     69a:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <measureEventGroup>
     69e:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <measureEventGroup+0x1>
     6a2:	cc 24       	eor	r12, r12
     6a4:	ca 94       	dec	r12
     6a6:	dc 2c       	mov	r13, r12
     6a8:	76 01       	movw	r14, r12
     6aa:	01 e0       	ldi	r16, 0x01	; 1
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	41 e0       	ldi	r20, 0x01	; 1
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	1a d4       	rcall	.+2100   	; 0xeec <xEventGroupWaitBits>
		BIT_TASK_CO2_MEASURE,
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		
		rc = mh_z19_takeMeassuring();
     6b8:	0e 94 23 3e 	call	0x7c46	; 0x7c46 <mh_z19_takeMeassuring>
     6bc:	80 93 c6 15 	sts	0x15C6, r24	; 0x8015c6 <rc>
		
		if (rc != MHZ19_OK)
     6c0:	80 91 c6 15 	lds	r24, 0x15C6	; 0x8015c6 <rc>
     6c4:	88 23       	and	r24, r24
     6c6:	49 f3       	breq	.-46     	; 0x69a <co2sensorTask+0x1a>
		{
			puts("something went wrong in co2Sensor");
     6c8:	86 eb       	ldi	r24, 0xB6	; 182
     6ca:	93 e0       	ldi	r25, 0x03	; 3
     6cc:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <puts>
			// Something went wrong
		}
		
		
	}
     6d0:	e4 cf       	rjmp	.-56     	; 0x69a <co2sensorTask+0x1a>

000006d2 <mh_z19_callBack>:
}

void mh_z19_callBack(uint16_t ppm){
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	1f 92       	push	r1
     6d8:	1f 92       	push	r1
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	9a 83       	std	Y+2, r25	; 0x02
     6e0:	89 83       	std	Y+1, r24	; 0x01
	lastCO2ppm = ppm;
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	90 93 ca 15 	sts	0x15CA, r25	; 0x8015ca <lastCO2ppm+0x1>
     6ea:	80 93 c9 15 	sts	0x15C9, r24	; 0x8015c9 <lastCO2ppm>
	xEventGroupSetBits(readyEventGroup,BIT_TASK_CO2_READY);
     6ee:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <readyEventGroup>
     6f2:	90 91 ba 09 	lds	r25, 0x09BA	; 0x8009ba <readyEventGroup+0x1>
     6f6:	42 e0       	ldi	r20, 0x02	; 2
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	7a d5       	rcall	.+2804   	; 0x11f4 <xEventGroupSetBits>
}
     700:	00 00       	nop
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <getCO2>:

uint16_t getCO2(){
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
	return lastCO2ppm;
     714:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <lastCO2ppm>
     718:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <lastCO2ppm+0x1>
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <create_semaphores>:
				mutexPuts(buff);
				SensorDataPackage_free(sensorDataPackage);
				xSemaphoreGive(DownLinkUpdateMutex);
			}
		}
	}
     722:	0f 93       	push	r16
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	80 91 12 16 	lds	r24, 0x1612	; 0x801612 <sysInitMutex>
     730:	90 91 13 16 	lds	r25, 0x1613	; 0x801613 <sysInitMutex+0x1>
     734:	89 2b       	or	r24, r25
     736:	81 f4       	brne	.+32     	; 0x758 <create_semaphores+0x36>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 2f 11 	call	0x225e	; 0x225e <xQueueCreateMutex>
     73e:	90 93 13 16 	sts	0x1613, r25	; 0x801613 <sysInitMutex+0x1>
     742:	80 93 12 16 	sts	0x1612, r24	; 0x801612 <sysInitMutex>
     746:	80 91 12 16 	lds	r24, 0x1612	; 0x801612 <sysInitMutex>
     74a:	90 91 13 16 	lds	r25, 0x1613	; 0x801613 <sysInitMutex+0x1>
     74e:	4f ef       	ldi	r20, 0xFF	; 255
     750:	5f ef       	ldi	r21, 0xFF	; 255
     752:	ba 01       	movw	r22, r20
     754:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
     758:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <measureCo2Mutex>
     75c:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <measureCo2Mutex+0x1>
     760:	89 2b       	or	r24, r25
     762:	81 f4       	brne	.+32     	; 0x784 <create_semaphores+0x62>
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 2f 11 	call	0x225e	; 0x225e <xQueueCreateMutex>
     76a:	90 93 cc 15 	sts	0x15CC, r25	; 0x8015cc <measureCo2Mutex+0x1>
     76e:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <measureCo2Mutex>
     772:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <measureCo2Mutex>
     776:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <measureCo2Mutex+0x1>
     77a:	4f ef       	ldi	r20, 0xFF	; 255
     77c:	5f ef       	ldi	r21, 0xFF	; 255
     77e:	ba 01       	movw	r22, r20
     780:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
     784:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <UpLinkSendMutex>
     788:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <UpLinkSendMutex+0x1>
     78c:	89 2b       	or	r24, r25
     78e:	81 f4       	brne	.+32     	; 0x7b0 <create_semaphores+0x8e>
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	0e 94 2f 11 	call	0x225e	; 0x225e <xQueueCreateMutex>
     796:	90 93 c8 15 	sts	0x15C8, r25	; 0x8015c8 <UpLinkSendMutex+0x1>
     79a:	80 93 c7 15 	sts	0x15C7, r24	; 0x8015c7 <UpLinkSendMutex>
     79e:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <UpLinkSendMutex>
     7a2:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <UpLinkSendMutex+0x1>
     7a6:	4f ef       	ldi	r20, 0xFF	; 255
     7a8:	5f ef       	ldi	r21, 0xFF	; 255
     7aa:	ba 01       	movw	r22, r20
     7ac:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
     7b0:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <UpLinkReceiveMutex>
     7b4:	90 91 c3 15 	lds	r25, 0x15C3	; 0x8015c3 <UpLinkReceiveMutex+0x1>
     7b8:	89 2b       	or	r24, r25
     7ba:	81 f4       	brne	.+32     	; 0x7dc <create_semaphores+0xba>
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 2f 11 	call	0x225e	; 0x225e <xQueueCreateMutex>
     7c2:	90 93 c3 15 	sts	0x15C3, r25	; 0x8015c3 <UpLinkReceiveMutex+0x1>
     7c6:	80 93 c2 15 	sts	0x15C2, r24	; 0x8015c2 <UpLinkReceiveMutex>
     7ca:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <UpLinkReceiveMutex>
     7ce:	90 91 c3 15 	lds	r25, 0x15C3	; 0x8015c3 <UpLinkReceiveMutex+0x1>
     7d2:	4f ef       	ldi	r20, 0xFF	; 255
     7d4:	5f ef       	ldi	r21, 0xFF	; 255
     7d6:	ba 01       	movw	r22, r20
     7d8:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
     7dc:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <DownLinkUpdateMutex>
     7e0:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <DownLinkUpdateMutex+0x1>
     7e4:	89 2b       	or	r24, r25
     7e6:	81 f4       	brne	.+32     	; 0x808 <create_semaphores+0xe6>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	0e 94 2f 11 	call	0x225e	; 0x225e <xQueueCreateMutex>
     7ee:	90 93 ce 15 	sts	0x15CE, r25	; 0x8015ce <DownLinkUpdateMutex+0x1>
     7f2:	80 93 cd 15 	sts	0x15CD, r24	; 0x8015cd <DownLinkUpdateMutex>
     7f6:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <DownLinkUpdateMutex>
     7fa:	90 91 ce 15 	lds	r25, 0x15CE	; 0x8015ce <DownLinkUpdateMutex+0x1>
     7fe:	4f ef       	ldi	r20, 0xFF	; 255
     800:	5f ef       	ldi	r21, 0xFF	; 255
     802:	ba 01       	movw	r22, r20
     804:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
     808:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <DownLinkReceiveMutex>
     80c:	90 91 11 16 	lds	r25, 0x1611	; 0x801611 <DownLinkReceiveMutex+0x1>
     810:	89 2b       	or	r24, r25
     812:	81 f4       	brne	.+32     	; 0x834 <create_semaphores+0x112>
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	0e 94 2f 11 	call	0x225e	; 0x225e <xQueueCreateMutex>
     81a:	90 93 11 16 	sts	0x1611, r25	; 0x801611 <DownLinkReceiveMutex+0x1>
     81e:	80 93 10 16 	sts	0x1610, r24	; 0x801610 <DownLinkReceiveMutex>
     822:	80 91 10 16 	lds	r24, 0x1610	; 0x801610 <DownLinkReceiveMutex>
     826:	90 91 11 16 	lds	r25, 0x1611	; 0x801611 <DownLinkReceiveMutex+0x1>
     82a:	4f ef       	ldi	r20, 0xFF	; 255
     82c:	5f ef       	ldi	r21, 0xFF	; 255
     82e:	ba 01       	movw	r22, r20
     830:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
     834:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <putsMutex>
     838:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <putsMutex+0x1>
     83c:	89 2b       	or	r24, r25
     83e:	99 f4       	brne	.+38     	; 0x866 <create_semaphores+0x144>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	0e 94 2f 11 	call	0x225e	; 0x225e <xQueueCreateMutex>
     846:	90 93 0f 16 	sts	0x160F, r25	; 0x80160f <putsMutex+0x1>
     84a:	80 93 0e 16 	sts	0x160E, r24	; 0x80160e <putsMutex>
     84e:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <putsMutex>
     852:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <putsMutex+0x1>
     856:	00 e0       	ldi	r16, 0x00	; 0
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	a9 01       	movw	r20, r18
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
     866:	80 91 c0 15 	lds	r24, 0x15C0	; 0x8015c0 <windowControllerMutex>
     86a:	90 91 c1 15 	lds	r25, 0x15C1	; 0x8015c1 <windowControllerMutex+0x1>
     86e:	89 2b       	or	r24, r25
     870:	81 f4       	brne	.+32     	; 0x892 <create_semaphores+0x170>
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	0e 94 2f 11 	call	0x225e	; 0x225e <xQueueCreateMutex>
     878:	90 93 c1 15 	sts	0x15C1, r25	; 0x8015c1 <windowControllerMutex+0x1>
     87c:	80 93 c0 15 	sts	0x15C0, r24	; 0x8015c0 <windowControllerMutex>
     880:	80 91 c0 15 	lds	r24, 0x15C0	; 0x8015c0 <windowControllerMutex>
     884:	90 91 c1 15 	lds	r25, 0x15C1	; 0x8015c1 <windowControllerMutex+0x1>
     888:	4f ef       	ldi	r20, 0xFF	; 255
     88a:	5f ef       	ldi	r21, 0xFF	; 255
     88c:	ba 01       	movw	r22, r20
     88e:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
     892:	00 00       	nop
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	0f 91       	pop	r16
     89a:	08 95       	ret

0000089c <create_event_groups>:
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	02 d3       	rcall	.+1540   	; 0xeaa <xEventGroupCreate>
     8a6:	90 93 b8 09 	sts	0x09B8, r25	; 0x8009b8 <measureEventGroup+0x1>
     8aa:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <measureEventGroup>
     8ae:	fd d2       	rcall	.+1530   	; 0xeaa <xEventGroupCreate>
     8b0:	90 93 ba 09 	sts	0x09BA, r25	; 0x8009ba <readyEventGroup+0x1>
     8b4:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <readyEventGroup>
     8b8:	00 00       	nop
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <create_message_buffers>:
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	84 e0       	ldi	r24, 0x04	; 4
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <xStreamBufferGenericCreate>
     8d6:	90 93 bc 09 	sts	0x09BC, r25	; 0x8009bc <UpLinkMessageBuffer+0x1>
     8da:	80 93 bb 09 	sts	0x09BB, r24	; 0x8009bb <UpLinkMessageBuffer>
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <xStreamBufferGenericCreate>
     8ec:	90 93 be 09 	sts	0x09BE, r25	; 0x8009be <DownLinkMessageBuffer+0x1>
     8f0:	80 93 bd 09 	sts	0x09BD, r24	; 0x8009bd <DownLinkMessageBuffer>
     8f4:	00 00       	nop
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <create_tasks>:
     8fc:	ef 92       	push	r14
     8fe:	ff 92       	push	r15
     900:	0f 93       	push	r16
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	e1 2c       	mov	r14, r1
     90c:	f1 2c       	mov	r15, r1
     90e:	03 e0       	ldi	r16, 0x03	; 3
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 ec       	ldi	r20, 0xC0	; 192
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	68 ed       	ldi	r22, 0xD8	; 216
     91a:	73 e0       	ldi	r23, 0x03	; 3
     91c:	82 e1       	ldi	r24, 0x12	; 18
     91e:	95 e0       	ldi	r25, 0x05	; 5
     920:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xTaskCreate>
     924:	e1 2c       	mov	r14, r1
     926:	f1 2c       	mov	r15, r1
     928:	03 e0       	ldi	r16, 0x03	; 3
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 ec       	ldi	r20, 0xC0	; 192
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	65 ef       	ldi	r22, 0xF5	; 245
     934:	73 e0       	ldi	r23, 0x03	; 3
     936:	82 e8       	ldi	r24, 0x82	; 130
     938:	95 e0       	ldi	r25, 0x05	; 5
     93a:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xTaskCreate>
     93e:	80 91 12 16 	lds	r24, 0x1612	; 0x801612 <sysInitMutex>
     942:	90 91 13 16 	lds	r25, 0x1613	; 0x801613 <sysInitMutex+0x1>
     946:	00 e0       	ldi	r16, 0x00	; 0
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	a9 01       	movw	r20, r18
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
     956:	00 00       	nop
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	08 95       	ret

00000964 <mutexPuts>:
     964:	0f 93       	push	r16
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	1f 92       	push	r1
     96c:	1f 92       	push	r1
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <putsMutex>
     97a:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <putsMutex+0x1>
     97e:	4f ef       	ldi	r20, 0xFF	; 255
     980:	5f ef       	ldi	r21, 0xFF	; 255
     982:	ba 01       	movw	r22, r20
     984:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	81 f4       	brne	.+32     	; 0x9ac <mutexPuts+0x48>
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	9a 81       	ldd	r25, Y+2	; 0x02
     990:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <puts>
     994:	80 91 0e 16 	lds	r24, 0x160E	; 0x80160e <putsMutex>
     998:	90 91 0f 16 	lds	r25, 0x160F	; 0x80160f <putsMutex+0x1>
     99c:	00 e0       	ldi	r16, 0x00	; 0
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	a9 01       	movw	r20, r18
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
     9ac:	00 00       	nop
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	0f 91       	pop	r16
     9b8:	08 95       	ret

000009ba <initialiseSystem>:
     9ba:	0f 93       	push	r16
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	ae de       	rcall	.-676    	; 0x722 <create_semaphores>
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 38 42 	call	0x8470	; 0x8470 <stdio_initialise>
     9cc:	81 e2       	ldi	r24, 0x21	; 33
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	21 e2       	ldi	r18, 0x21	; 33
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	f9 01       	movw	r30, r18
     9d6:	20 81       	ld	r18, Z
     9d8:	21 68       	ori	r18, 0x81	; 129
     9da:	fc 01       	movw	r30, r24
     9dc:	20 83       	st	Z, r18
     9de:	5e df       	rcall	.-324    	; 0x89c <create_event_groups>
     9e0:	6f df       	rcall	.-290    	; 0x8c0 <create_message_buffers>
     9e2:	85 e0       	ldi	r24, 0x05	; 5
     9e4:	0e 94 3f 43 	call	0x867e	; 0x867e <status_leds_initialise>
     9e8:	80 91 bd 09 	lds	r24, 0x09BD	; 0x8009bd <DownLinkMessageBuffer>
     9ec:	90 91 be 09 	lds	r25, 0x09BE	; 0x8009be <DownLinkMessageBuffer+0x1>
     9f0:	bc 01       	movw	r22, r24
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <lora_driver_initialise>
     9f8:	04 de       	rcall	.-1016   	; 0x602 <rcServoTask_create>
     9fa:	d5 db       	rcall	.-2134   	; 0x1a6 <UL_handler_create>
     9fc:	0a d2       	rcall	.+1044   	; 0xe12 <DL_handler_create>
     9fe:	1e de       	rcall	.-964    	; 0x63c <CO2_handler_create>
     a00:	7d df       	rcall	.-262    	; 0x8fc <create_tasks>
     a02:	80 91 12 16 	lds	r24, 0x1612	; 0x801612 <sysInitMutex>
     a06:	90 91 13 16 	lds	r25, 0x1613	; 0x801613 <sysInitMutex+0x1>
     a0a:	00 e0       	ldi	r16, 0x00	; 0
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	a9 01       	movw	r20, r18
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
     a1a:	00 00       	nop
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	0f 91       	pop	r16
     a22:	08 95       	ret

00000a24 <trigger_CO2_measurement_task>:
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	c1 54       	subi	r28, 0x41	; 65
     a38:	d1 09       	sbc	r29, r1
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	9e 01       	movw	r18, r28
     a46:	20 5c       	subi	r18, 0xC0	; 192
     a48:	3f 4f       	sbci	r19, 0xFF	; 255
     a4a:	f9 01       	movw	r30, r18
     a4c:	91 83       	std	Z+1, r25	; 0x01
     a4e:	80 83       	st	Z, r24
     a50:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <UpLinkReceiveMutex>
     a54:	90 91 c3 15 	lds	r25, 0x15C3	; 0x8015c3 <UpLinkReceiveMutex+0x1>
     a58:	4f ef       	ldi	r20, 0xFF	; 255
     a5a:	5f ef       	ldi	r21, 0xFF	; 255
     a5c:	ba 01       	movw	r22, r20
     a5e:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
     a62:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <readyEventGroup>
     a66:	90 91 ba 09 	lds	r25, 0x09BA	; 0x8009ba <readyEventGroup+0x1>
     a6a:	42 e0       	ldi	r20, 0x02	; 2
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	73 d3       	rcall	.+1766   	; 0x115a <xEventGroupClearBits>
     a74:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <measureEventGroup>
     a78:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <measureEventGroup+0x1>
     a7c:	41 e0       	ldi	r20, 0x01	; 1
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	b7 d3       	rcall	.+1902   	; 0x11f4 <xEventGroupSetBits>
     a86:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <readyEventGroup>
     a8a:	90 91 ba 09 	lds	r25, 0x09BA	; 0x8009ba <readyEventGroup+0x1>
     a8e:	cc 24       	eor	r12, r12
     a90:	ca 94       	dec	r12
     a92:	dc 2c       	mov	r13, r12
     a94:	76 01       	movw	r14, r12
     a96:	01 e0       	ldi	r16, 0x01	; 1
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	42 e0       	ldi	r20, 0x02	; 2
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	24 d2       	rcall	.+1096   	; 0xeec <xEventGroupWaitBits>
     aa4:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <measureEventGroup>
     aa8:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <measureEventGroup+0x1>
     aac:	41 e0       	ldi	r20, 0x01	; 1
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	52 d3       	rcall	.+1700   	; 0x115a <xEventGroupClearBits>
     ab6:	2a de       	rcall	.-940    	; 0x70c <getCO2>
     ab8:	29 2f       	mov	r18, r25
     aba:	2f 93       	push	r18
     abc:	8f 93       	push	r24
     abe:	89 e0       	ldi	r24, 0x09	; 9
     ac0:	94 e0       	ldi	r25, 0x04	; 4
     ac2:	89 2f       	mov	r24, r25
     ac4:	8f 93       	push	r24
     ac6:	89 e0       	ldi	r24, 0x09	; 9
     ac8:	94 e0       	ldi	r25, 0x04	; 4
     aca:	8f 93       	push	r24
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <sprintf>
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	ce 01       	movw	r24, r28
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	3d df       	rcall	.-390    	; 0x964 <mutexPuts>
     aea:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <measureCo2Mutex>
     aee:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <measureCo2Mutex+0x1>
     af2:	00 e0       	ldi	r16, 0x00	; 0
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	a9 01       	movw	r20, r18
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
     b02:	a6 cf       	rjmp	.-180    	; 0xa50 <trigger_CO2_measurement_task+0x2c>

00000b04 <UL_handler_send>:
}
	
void UL_handler_send( void *pvParameters )
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	c3 55       	subi	r28, 0x53	; 83
     b12:	d1 09       	sbc	r29, r1
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	9e 01       	movw	r18, r28
     b20:	2e 5a       	subi	r18, 0xAE	; 174
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	f9 01       	movw	r30, r18
     b26:	91 83       	std	Z+1, r25	; 0x01
     b28:	80 83       	st	Z, r24
	for(;;){
		xSemaphoreTake( measureCo2Mutex , portMAX_DELAY);
     b2a:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <measureCo2Mutex>
     b2e:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <measureCo2Mutex+0x1>
     b32:	4f ef       	ldi	r20, 0xFF	; 255
     b34:	5f ef       	ldi	r21, 0xFF	; 255
     b36:	ba 01       	movw	r22, r20
     b38:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
		size_t xBytesSent;
		// Payload
		SensorDataPackage_t sensorDataPackage = SensorDataPackage_create();
     b3c:	b0 d0       	rcall	.+352    	; 0xc9e <SensorDataPackage_create>
     b3e:	9a 83       	std	Y+2, r25	; 0x02
     b40:	89 83       	std	Y+1, r24	; 0x01
		
		SensorDataPackage_setCO2(sensorDataPackage,getCO2());/*JULIA PUT YOUR DATA HERE - CO2Sensor.getCO2()*/
     b42:	e4 dd       	rcall	.-1080   	; 0x70c <getCO2>
     b44:	9c 01       	movw	r18, r24
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
     b4a:	b9 01       	movw	r22, r18
     b4c:	db d0       	rcall	.+438    	; 0xd04 <SensorDataPackage_setCO2>
     b4e:	86 e0       	ldi	r24, 0x06	; 6
		
		const TickType_t x100ms = pdMS_TO_TICKS( 100 );
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 e0       	ldi	r26, 0x00	; 0
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	8b 83       	std	Y+3, r24	; 0x03
     b58:	9c 83       	std	Y+4, r25	; 0x04
     b5a:	ad 83       	std	Y+5, r26	; 0x05
     b5c:	be 83       	std	Y+6, r27	; 0x06
     b5e:	82 e0       	ldi	r24, 0x02	; 2
		
		int size = sizeof( sensorDataPackage );
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	98 87       	std	Y+8, r25	; 0x08
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	4f 81       	ldd	r20, Y+7	; 0x07
		
		// Send the payload to the message buffer, a maximum of 100ms to wait for enough space to be available in the message buffer.
		xBytesSent = xMessageBufferSend( UpLinkMessageBuffer, ( void * ) sensorDataPackage, size, x100ms );
     b68:	58 85       	ldd	r21, Y+8	; 0x08
     b6a:	e0 91 bb 09 	lds	r30, 0x09BB	; 0x8009bb <UpLinkMessageBuffer>
     b6e:	f0 91 bc 09 	lds	r31, 0x09BC	; 0x8009bc <UpLinkMessageBuffer+0x1>
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	ad 81       	ldd	r26, Y+5	; 0x05
     b78:	be 81       	ldd	r27, Y+6	; 0x06
     b7a:	69 81       	ldd	r22, Y+1	; 0x01
     b7c:	7a 81       	ldd	r23, Y+2	; 0x02
     b7e:	8c 01       	movw	r16, r24
     b80:	9d 01       	movw	r18, r26
     b82:	cf 01       	movw	r24, r30
     b84:	0e 94 20 17 	call	0x2e40	; 0x2e40 <xStreamBufferSend>
     b88:	9a 87       	std	Y+10, r25	; 0x0a
     b8a:	89 87       	std	Y+9, r24	; 0x09
     b8c:	8f 81       	ldd	r24, Y+7	; 0x07
		
		if( xBytesSent != size )
     b8e:	98 85       	ldd	r25, Y+8	; 0x08
     b90:	29 85       	ldd	r18, Y+9	; 0x09
     b92:	3a 85       	ldd	r19, Y+10	; 0x0a
     b94:	28 17       	cp	r18, r24
     b96:	39 07       	cpc	r19, r25
     b98:	51 f0       	breq	.+20     	; 0xbae <UL_handler_send+0xaa>
		{
			// The call to xMessageBufferSend() timed out before there was enough space in the buffer for the data to be written.
			// Wait 2.5 minutes to retry
			SensorDataPackage_free(sensorDataPackage);
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	9a 81       	ldd	r25, Y+2	; 0x02
     b9e:	9f d0       	rcall	.+318    	; 0xcde <SensorDataPackage_free>
     ba0:	64 e5       	ldi	r22, 0x54	; 84
			vTaskDelay(pdMS_TO_TICKS(150000));
     ba2:	74 e2       	ldi	r23, 0x24	; 36
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <vTaskDelay>
     bac:	be cf       	rjmp	.-132    	; 0xb2a <UL_handler_send+0x26>
     bae:	8c e0       	ldi	r24, 0x0C	; 12
			}else{
			// Try to receive
			const TickType_t xBlockTime = pdMS_TO_TICKS( 200 );
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	a0 e0       	ldi	r26, 0x00	; 0
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	8b 87       	std	Y+11, r24	; 0x0b
     bb8:	9c 87       	std	Y+12, r25	; 0x0c
     bba:	ad 87       	std	Y+13, r26	; 0x0d
     bbc:	be 87       	std	Y+14, r27	; 0x0e
			
			SensorDataPackage_t receivedDataPackage = SensorDataPackage_create();
     bbe:	6f d0       	rcall	.+222    	; 0xc9e <SensorDataPackage_create>
     bc0:	9a 8b       	std	Y+18, r25	; 0x12
     bc2:	89 8b       	std	Y+17, r24	; 0x11
     bc4:	4f 81       	ldd	r20, Y+7	; 0x07
			
			int xReceivedBytes = xMessageBufferReceive( // Does not work properly... Fuck it, will do it the other way for now.
     bc6:	58 85       	ldd	r21, Y+8	; 0x08
     bc8:	e0 91 bb 09 	lds	r30, 0x09BB	; 0x8009bb <UpLinkMessageBuffer>
     bcc:	f0 91 bc 09 	lds	r31, 0x09BC	; 0x8009bc <UpLinkMessageBuffer+0x1>
     bd0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bd2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bd4:	ad 85       	ldd	r26, Y+13	; 0x0d
     bd6:	be 85       	ldd	r27, Y+14	; 0x0e
     bd8:	be 01       	movw	r22, r28
     bda:	6f 5e       	subi	r22, 0xEF	; 239
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	8c 01       	movw	r16, r24
     be0:	9d 01       	movw	r18, r26
     be2:	cf 01       	movw	r24, r30
     be4:	0e 94 07 19 	call	0x320e	; 0x320e <xStreamBufferReceive>
     be8:	98 8b       	std	Y+16, r25	; 0x10
     bea:	8f 87       	std	Y+15, r24	; 0x0f
     bec:	8f 85       	ldd	r24, Y+15	; 0x0f
			&receivedDataPackage,
			size,
			xBlockTime
			);
			
			if(xReceivedBytes > 0){
     bee:	98 89       	ldd	r25, Y+16	; 0x10
     bf0:	18 16       	cp	r1, r24
     bf2:	19 06       	cpc	r1, r25
     bf4:	0c f0       	brlt	.+2      	; 0xbf8 <UL_handler_send+0xf4>
     bf6:	99 cf       	rjmp	.-206    	; 0xb2a <UL_handler_send+0x26>
				char buff [63] ;
				sprintf(buff, "UL_handler_send Co2 = (%d) -> OK", SensorDataPackage_getCO2(receivedDataPackage));
     bf8:	89 89       	ldd	r24, Y+17	; 0x11
     bfa:	9a 89       	ldd	r25, Y+18	; 0x12
     bfc:	9c d0       	rcall	.+312    	; 0xd36 <SensorDataPackage_getCO2>
     bfe:	29 2f       	mov	r18, r25
     c00:	2f 93       	push	r18
     c02:	8f 93       	push	r24
     c04:	80 e4       	ldi	r24, 0x40	; 64
     c06:	94 e0       	ldi	r25, 0x04	; 4
     c08:	89 2f       	mov	r24, r25
     c0a:	8f 93       	push	r24
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	94 e0       	ldi	r25, 0x04	; 4
     c10:	8f 93       	push	r24
     c12:	ce 01       	movw	r24, r28
     c14:	43 96       	adiw	r24, 0x13	; 19
     c16:	29 2f       	mov	r18, r25
     c18:	2f 93       	push	r18
     c1a:	8f 93       	push	r24
     c1c:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <sprintf>
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
				mutexPuts(buff);
     c2c:	ce 01       	movw	r24, r28
     c2e:	43 96       	adiw	r24, 0x13	; 19
     c30:	99 de       	rcall	.-718    	; 0x964 <mutexPuts>
     c32:	89 89       	ldd	r24, Y+17	; 0x11
				SensorDataPackage_free(receivedDataPackage);
     c34:	9a 89       	ldd	r25, Y+18	; 0x12
     c36:	53 d0       	rcall	.+166    	; 0xcde <SensorDataPackage_free>
     c38:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <UpLinkSendMutex>
				xSemaphoreGive(UpLinkSendMutex);
     c3c:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <UpLinkSendMutex+0x1>
     c40:	00 e0       	ldi	r16, 0x00	; 0
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	a9 01       	movw	r20, r18
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
     c50:	6c cf       	rjmp	.-296    	; 0xb2a <UL_handler_send+0x26>

00000c52 <main>:
     c52:	0f 93       	push	r16
			}
		}
	}
     c54:	cf 93       	push	r28
}

/*---------------------------MAIN----------------------------*/

int main(void){
     c56:	df 93       	push	r29
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
	
	initialiseSystem();
     c5c:	ae de       	rcall	.-676    	; 0x9ba <initialiseSystem>
	
	xSemaphoreTake(sysInitMutex , portMAX_DELAY);
     c5e:	80 91 12 16 	lds	r24, 0x1612	; 0x801612 <sysInitMutex>
     c62:	90 91 13 16 	lds	r25, 0x1613	; 0x801613 <sysInitMutex+0x1>
     c66:	4f ef       	ldi	r20, 0xFF	; 255
     c68:	5f ef       	ldi	r21, 0xFF	; 255
     c6a:	ba 01       	movw	r22, r20
     c6c:	0e 94 1a 13 	call	0x2634	; 0x2634 <xQueueSemaphoreTake>
	mutexPuts("Program Started!!\n");
     c70:	81 e6       	ldi	r24, 0x61	; 97
     c72:	94 e0       	ldi	r25, 0x04	; 4
     c74:	77 de       	rcall	.-786    	; 0x964 <mutexPuts>
	
	xSemaphoreGive(UpLinkReceiveMutex);
     c76:	80 91 c2 15 	lds	r24, 0x15C2	; 0x8015c2 <UpLinkReceiveMutex>
     c7a:	90 91 c3 15 	lds	r25, 0x15C3	; 0x8015c3 <UpLinkReceiveMutex+0x1>
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	a9 01       	movw	r20, r18
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
	
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler.
     c8e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <vTaskStartScheduler>
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
	//Execution will never reach here.
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	0f 91       	pop	r16
     c9c:	08 95       	ret

00000c9e <SensorDataPackage_create>:
void SensorDataPackage_setTemperature(SensorDataPackage_t packet, uint16_t _temperatureData){
	packet->temperatureData = _temperatureData;
}
void SensorDataPackage_setHumidity(SensorDataPackage_t packet, uint16_t _humidityData){
	packet->humidityData = _humidityData;
}
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	1f 92       	push	r1
     ca4:	1f 92       	push	r1
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	86 e0       	ldi	r24, 0x06	; 6
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	fd d3       	rcall	.+2042   	; 0x14aa <pvPortMalloc>
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	2f ef       	ldi	r18, 0xFF	; 255
     cba:	3f ef       	ldi	r19, 0xFF	; 255
     cbc:	fc 01       	movw	r30, r24
     cbe:	31 83       	std	Z+1, r19	; 0x01
     cc0:	20 83       	st	Z, r18
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	89 2b       	or	r24, r25
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <SensorDataPackage_create+0x32>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <SensorDataPackage_create+0x36>
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <SensorDataPackage_free>:
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	1f 92       	push	r1
     ce4:	1f 92       	push	r1
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	89 83       	std	Y+1, r24	; 0x01
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	f1 d4       	rcall	.+2530   	; 0x16d6 <vPortFree>
     cf4:	1a 82       	std	Y+2, r1	; 0x02
     cf6:	19 82       	std	Y+1, r1	; 0x01
     cf8:	00 00       	nop
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <SensorDataPackage_setCO2>:
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	00 d0       	rcall	.+0      	; 0xd0a <SensorDataPackage_setCO2+0x6>
     d0a:	1f 92       	push	r1
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	9a 83       	std	Y+2, r25	; 0x02
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	7c 83       	std	Y+4, r23	; 0x04
     d16:	6b 83       	std	Y+3, r22	; 0x03
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	2b 81       	ldd	r18, Y+3	; 0x03
     d1e:	3c 81       	ldd	r19, Y+4	; 0x04
     d20:	fc 01       	movw	r30, r24
     d22:	31 83       	std	Z+1, r19	; 0x01
     d24:	20 83       	st	Z, r18
     d26:	00 00       	nop
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret

00000d36 <SensorDataPackage_getCO2>:

uint16_t SensorDataPackage_getCO2(SensorDataPackage_t packet){
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	1f 92       	push	r1
     d3c:	1f 92       	push	r1
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	9a 83       	std	Y+2, r25	; 0x02
     d44:	89 83       	std	Y+1, r24	; 0x01
	return packet->co2Data;
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	fc 01       	movw	r30, r24
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <Configuration_create>:
void Configuration_setTemperature(Configuration_t config, uint16_t _temperatureData){
	config->temperatureData = _temperatureData;
}
void Configuration_setHumidity(Configuration_t config, uint16_t _humidityData){
	config->humidityData = _humidityData;
}
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	1f 92       	push	r1
     d60:	1f 92       	push	r1
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	9f d3       	rcall	.+1854   	; 0x14aa <pvPortMalloc>
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	9a 81       	ldd	r25, Y+2	; 0x02
     d74:	2c eb       	ldi	r18, 0xBC	; 188
     d76:	32 e0       	ldi	r19, 0x02	; 2
     d78:	fc 01       	movw	r30, r24
     d7a:	31 83       	std	Z+1, r19	; 0x01
     d7c:	20 83       	st	Z, r18
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	89 2b       	or	r24, r25
     d84:	19 f4       	brne	.+6      	; 0xd8c <Configuration_create+0x32>
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <Configuration_create+0x36>
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <Configuration_setCO2>:
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <Configuration_setCO2+0x6>
     da0:	1f 92       	push	r1
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	7c 83       	std	Y+4, r23	; 0x04
     dac:	6b 83       	std	Y+3, r22	; 0x03
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	2b 81       	ldd	r18, Y+3	; 0x03
     db4:	3c 81       	ldd	r19, Y+4	; 0x04
     db6:	fc 01       	movw	r30, r24
     db8:	31 83       	std	Z+1, r19	; 0x01
     dba:	20 83       	st	Z, r18
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	8f 93       	push	r24
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	8f 93       	push	r24
     dc4:	84 e7       	ldi	r24, 0x74	; 116
     dc6:	94 e0       	ldi	r25, 0x04	; 4
     dc8:	89 2f       	mov	r24, r25
     dca:	8f 93       	push	r24
     dcc:	84 e7       	ldi	r24, 0x74	; 116
     dce:	94 e0       	ldi	r25, 0x04	; 4
     dd0:	8f 93       	push	r24
     dd2:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	00 00       	nop
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	08 95       	ret

00000dee <Configuration_getCO2>:

uint16_t Configuration_getCO2(Configuration_t config){
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	1f 92       	push	r1
     df4:	1f 92       	push	r1
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	9a 83       	std	Y+2, r25	; 0x02
     dfc:	89 83       	std	Y+1, r24	; 0x01
	return config->co2Data;
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	fc 01       	movw	r30, r24
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <DL_handler_create>:
static void _lora_setup(void);
void DL_update_task (void *pvParameters);

//create and schedule this task somewhere in main method
void DL_handler_create()
{
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
	xTaskCreate(
     e20:	e1 2c       	mov	r14, r1
     e22:	f1 2c       	mov	r15, r1
     e24:	03 e0       	ldi	r16, 0x03	; 3
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 ec       	ldi	r20, 0xC0	; 192
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	68 ea       	ldi	r22, 0xA8	; 168
     e30:	74 e0       	ldi	r23, 0x04	; 4
     e32:	84 e2       	ldi	r24, 0x24	; 36
     e34:	97 e0       	ldi	r25, 0x07	; 7
     e36:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xTaskCreate>
	,  "DownLink Handler Update"
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  3
	,  NULL );
}
     e3a:	00 00       	nop
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	08 95       	ret

00000e48 <DL_update_task>:


//This task will set config data like 'desired co2 level' in Configuration class
void DL_update_task( void *pvParameters )
{
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <DL_update_task+0x6>
     e4e:	1f 92       	push	r1
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	9c 83       	std	Y+4, r25	; 0x04
     e56:	8b 83       	std	Y+3, r24	; 0x03
	for(;;)
	{
		//mutex for receiving data from loraWan
		// xSemaphoreTake( DownLinkReceiveMutex , portMAX_DELAY);
		 
		Configuration_t configuration = Configuration_create();
     e58:	80 df       	rcall	.-256    	; 0xd5a <Configuration_create>
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	89 83       	std	Y+1, r24	; 0x01
		 //here there will be some function receiving data from loraWan and this data shoud be saved in following variables ex: 'maxco2setting'
		
		Configuration_setCO2(configuration,maxCo2Setting);
     e5e:	20 91 1a 16 	lds	r18, 0x161A	; 0x80161a <maxCo2Setting>
     e62:	30 91 1b 16 	lds	r19, 0x161B	; 0x80161b <maxCo2Setting+0x1>
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	b9 01       	movw	r22, r18
     e6c:	96 df       	rcall	.-212    	; 0xd9a <Configuration_setCO2>
		puts("new value set in configuration \n");
     e6e:	80 ec       	ldi	r24, 0xC0	; 192
     e70:	94 e0       	ldi	r25, 0x04	; 4
     e72:	0e 94 ea 46 	call	0x8dd4	; 0x8dd4 <puts>
		// xSemaphoreGive(DownLinkReceiveMutex);
		 vTaskDelay(pdMS_TO_TICKS(200));
     e76:	6c e0       	ldi	r22, 0x0C	; 12
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <vTaskDelay>
		 printf("new co2 value is %d \n", Configuration_getCO2(configuration));
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	b3 df       	rcall	.-154    	; 0xdee <Configuration_getCO2>
     e88:	29 2f       	mov	r18, r25
     e8a:	2f 93       	push	r18
     e8c:	8f 93       	push	r24
     e8e:	81 ee       	ldi	r24, 0xE1	; 225
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	89 2f       	mov	r24, r25
     e94:	8f 93       	push	r24
     e96:	81 ee       	ldi	r24, 0xE1	; 225
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	8f 93       	push	r24
     e9c:	0e 94 d7 46 	call	0x8dae	; 0x8dae <printf>
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
				 // Wait 2.5min to retry
				 vTaskDelay(pdMS_TO_TICKS(150000));
			 }
			 
		}*/
	}	
     ea8:	d7 cf       	rjmp	.-82     	; 0xe58 <DL_update_task+0x10>

00000eaa <xEventGroupCreate>:
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	1f 92       	push	r1
     eb0:	1f 92       	push	r1
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	8f e0       	ldi	r24, 0x0F	; 15
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	f7 d2       	rcall	.+1518   	; 0x14aa <pvPortMalloc>
     ebc:	9a 83       	std	Y+2, r25	; 0x02
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	89 2b       	or	r24, r25
     ec6:	59 f0       	breq	.+22     	; 0xede <xEventGroupCreate+0x34>
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	fc 01       	movw	r30, r24
     ece:	10 82       	st	Z, r1
     ed0:	11 82       	std	Z+1, r1	; 0x01
     ed2:	12 82       	std	Z+2, r1	; 0x02
     ed4:	13 82       	std	Z+3, r1	; 0x03
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	04 96       	adiw	r24, 0x04	; 4
     edc:	9f d5       	rcall	.+2878   	; 0x1a1c <vListInitialise>
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	08 95       	ret

00000eec <xEventGroupWaitBits>:
     eec:	cf 92       	push	r12
     eee:	df 92       	push	r13
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	6d 97       	sbiw	r28, 0x1d	; 29
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	9b 8b       	std	Y+19, r25	; 0x13
     f0e:	8a 8b       	std	Y+18, r24	; 0x12
     f10:	4c 8b       	std	Y+20, r20	; 0x14
     f12:	5d 8b       	std	Y+21, r21	; 0x15
     f14:	6e 8b       	std	Y+22, r22	; 0x16
     f16:	7f 8b       	std	Y+23, r23	; 0x17
     f18:	28 8f       	std	Y+24, r18	; 0x18
     f1a:	09 8f       	std	Y+25, r16	; 0x19
     f1c:	ca 8e       	std	Y+26, r12	; 0x1a
     f1e:	db 8e       	std	Y+27, r13	; 0x1b
     f20:	ec 8e       	std	Y+28, r14	; 0x1c
     f22:	fd 8e       	std	Y+29, r15	; 0x1d
     f24:	8a 89       	ldd	r24, Y+18	; 0x12
     f26:	9b 89       	ldd	r25, Y+19	; 0x13
     f28:	9a 87       	std	Y+10, r25	; 0x0a
     f2a:	89 87       	std	Y+9, r24	; 0x09
     f2c:	1d 82       	std	Y+5, r1	; 0x05
     f2e:	1e 82       	std	Y+6, r1	; 0x06
     f30:	1f 82       	std	Y+7, r1	; 0x07
     f32:	18 86       	std	Y+8, r1	; 0x08
     f34:	1b 86       	std	Y+11, r1	; 0x0b
     f36:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <vTaskSuspendAll>
     f3a:	89 85       	ldd	r24, Y+9	; 0x09
     f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3e:	fc 01       	movw	r30, r24
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	a2 81       	ldd	r26, Z+2	; 0x02
     f46:	b3 81       	ldd	r27, Z+3	; 0x03
     f48:	8c 87       	std	Y+12, r24	; 0x0c
     f4a:	9d 87       	std	Y+13, r25	; 0x0d
     f4c:	ae 87       	std	Y+14, r26	; 0x0e
     f4e:	bf 87       	std	Y+15, r27	; 0x0f
     f50:	2c 89       	ldd	r18, Y+20	; 0x14
     f52:	3d 89       	ldd	r19, Y+21	; 0x15
     f54:	4e 89       	ldd	r20, Y+22	; 0x16
     f56:	5f 89       	ldd	r21, Y+23	; 0x17
     f58:	8c 85       	ldd	r24, Y+12	; 0x0c
     f5a:	9d 85       	ldd	r25, Y+13	; 0x0d
     f5c:	ae 85       	ldd	r26, Y+14	; 0x0e
     f5e:	bf 85       	ldd	r27, Y+15	; 0x0f
     f60:	09 8d       	ldd	r16, Y+25	; 0x19
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	54 d2       	rcall	.+1192   	; 0x1410 <prvTestWaitCondition>
     f68:	88 8b       	std	Y+16, r24	; 0x10
     f6a:	88 89       	ldd	r24, Y+16	; 0x10
     f6c:	88 23       	and	r24, r24
     f6e:	59 f1       	breq	.+86     	; 0xfc6 <xEventGroupWaitBits+0xda>
     f70:	8c 85       	ldd	r24, Y+12	; 0x0c
     f72:	9d 85       	ldd	r25, Y+13	; 0x0d
     f74:	ae 85       	ldd	r26, Y+14	; 0x0e
     f76:	bf 85       	ldd	r27, Y+15	; 0x0f
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	ab 83       	std	Y+3, r26	; 0x03
     f7e:	bc 83       	std	Y+4, r27	; 0x04
     f80:	1a 8e       	std	Y+26, r1	; 0x1a
     f82:	1b 8e       	std	Y+27, r1	; 0x1b
     f84:	1c 8e       	std	Y+28, r1	; 0x1c
     f86:	1d 8e       	std	Y+29, r1	; 0x1d
     f88:	88 8d       	ldd	r24, Y+24	; 0x18
     f8a:	88 23       	and	r24, r24
     f8c:	09 f4       	brne	.+2      	; 0xf90 <xEventGroupWaitBits+0xa4>
     f8e:	65 c0       	rjmp	.+202    	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
     f90:	89 85       	ldd	r24, Y+9	; 0x09
     f92:	9a 85       	ldd	r25, Y+10	; 0x0a
     f94:	fc 01       	movw	r30, r24
     f96:	20 81       	ld	r18, Z
     f98:	31 81       	ldd	r19, Z+1	; 0x01
     f9a:	42 81       	ldd	r20, Z+2	; 0x02
     f9c:	53 81       	ldd	r21, Z+3	; 0x03
     f9e:	8c 89       	ldd	r24, Y+20	; 0x14
     fa0:	9d 89       	ldd	r25, Y+21	; 0x15
     fa2:	ae 89       	ldd	r26, Y+22	; 0x16
     fa4:	bf 89       	ldd	r27, Y+23	; 0x17
     fa6:	80 95       	com	r24
     fa8:	90 95       	com	r25
     faa:	a0 95       	com	r26
     fac:	b0 95       	com	r27
     fae:	82 23       	and	r24, r18
     fb0:	93 23       	and	r25, r19
     fb2:	a4 23       	and	r26, r20
     fb4:	b5 23       	and	r27, r21
     fb6:	29 85       	ldd	r18, Y+9	; 0x09
     fb8:	3a 85       	ldd	r19, Y+10	; 0x0a
     fba:	f9 01       	movw	r30, r18
     fbc:	80 83       	st	Z, r24
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	a2 83       	std	Z+2, r26	; 0x02
     fc2:	b3 83       	std	Z+3, r27	; 0x03
     fc4:	4a c0       	rjmp	.+148    	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
     fc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fc8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fca:	ac 8d       	ldd	r26, Y+28	; 0x1c
     fcc:	bd 8d       	ldd	r27, Y+29	; 0x1d
     fce:	89 2b       	or	r24, r25
     fd0:	8a 2b       	or	r24, r26
     fd2:	8b 2b       	or	r24, r27
     fd4:	59 f4       	brne	.+22     	; 0xfec <xEventGroupWaitBits+0x100>
     fd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     fd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     fda:	ae 85       	ldd	r26, Y+14	; 0x0e
     fdc:	bf 85       	ldd	r27, Y+15	; 0x0f
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	ab 83       	std	Y+3, r26	; 0x03
     fe4:	bc 83       	std	Y+4, r27	; 0x04
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	8b 87       	std	Y+11, r24	; 0x0b
     fea:	37 c0       	rjmp	.+110    	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
     fec:	88 8d       	ldd	r24, Y+24	; 0x18
     fee:	88 23       	and	r24, r24
     ff0:	49 f0       	breq	.+18     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
     ff4:	9e 81       	ldd	r25, Y+6	; 0x06
     ff6:	af 81       	ldd	r26, Y+7	; 0x07
     ff8:	b8 85       	ldd	r27, Y+8	; 0x08
     ffa:	b1 60       	ori	r27, 0x01	; 1
     ffc:	8d 83       	std	Y+5, r24	; 0x05
     ffe:	9e 83       	std	Y+6, r25	; 0x06
    1000:	af 83       	std	Y+7, r26	; 0x07
    1002:	b8 87       	std	Y+8, r27	; 0x08
    1004:	89 8d       	ldd	r24, Y+25	; 0x19
    1006:	88 23       	and	r24, r24
    1008:	49 f0       	breq	.+18     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	af 81       	ldd	r26, Y+7	; 0x07
    1010:	b8 85       	ldd	r27, Y+8	; 0x08
    1012:	b4 60       	ori	r27, 0x04	; 4
    1014:	8d 83       	std	Y+5, r24	; 0x05
    1016:	9e 83       	std	Y+6, r25	; 0x06
    1018:	af 83       	std	Y+7, r26	; 0x07
    101a:	b8 87       	std	Y+8, r27	; 0x08
    101c:	2c 89       	ldd	r18, Y+20	; 0x14
    101e:	3d 89       	ldd	r19, Y+21	; 0x15
    1020:	4e 89       	ldd	r20, Y+22	; 0x16
    1022:	5f 89       	ldd	r21, Y+23	; 0x17
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	af 81       	ldd	r26, Y+7	; 0x07
    102a:	b8 85       	ldd	r27, Y+8	; 0x08
    102c:	82 2b       	or	r24, r18
    102e:	93 2b       	or	r25, r19
    1030:	a4 2b       	or	r26, r20
    1032:	b5 2b       	or	r27, r21
    1034:	29 85       	ldd	r18, Y+9	; 0x09
    1036:	3a 85       	ldd	r19, Y+10	; 0x0a
    1038:	f9 01       	movw	r30, r18
    103a:	34 96       	adiw	r30, 0x04	; 4
    103c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    103e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1040:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1042:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1044:	89 01       	movw	r16, r18
    1046:	9a 01       	movw	r18, r20
    1048:	ac 01       	movw	r20, r24
    104a:	bd 01       	movw	r22, r26
    104c:	cf 01       	movw	r24, r30
    104e:	0e 94 04 23 	call	0x4608	; 0x4608 <vTaskPlaceOnUnorderedEventList>
    1052:	19 82       	std	Y+1, r1	; 0x01
    1054:	1a 82       	std	Y+2, r1	; 0x02
    1056:	1b 82       	std	Y+3, r1	; 0x03
    1058:	1c 82       	std	Y+4, r1	; 0x04
    105a:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    105e:	89 8b       	std	Y+17, r24	; 0x11
    1060:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1062:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1064:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1066:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1068:	89 2b       	or	r24, r25
    106a:	8a 2b       	or	r24, r26
    106c:	8b 2b       	or	r24, r27
    106e:	09 f4       	brne	.+2      	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
    1070:	5f c0       	rjmp	.+190    	; 0x1130 <__EEPROM_REGION_LENGTH__+0x130>
    1072:	89 89       	ldd	r24, Y+17	; 0x11
    1074:	88 23       	and	r24, r24
    1076:	09 f4       	brne	.+2      	; 0x107a <__EEPROM_REGION_LENGTH__+0x7a>
    1078:	c2 d6       	rcall	.+3460   	; 0x1dfe <vPortYield>
    107a:	0e 94 9e 2b 	call	0x573c	; 0x573c <uxTaskResetEventItemValue>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	89 83       	std	Y+1, r24	; 0x01
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	ab 83       	std	Y+3, r26	; 0x03
    1088:	bc 83       	std	Y+4, r27	; 0x04
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	ab 81       	ldd	r26, Y+3	; 0x03
    1090:	bc 81       	ldd	r27, Y+4	; 0x04
    1092:	88 27       	eor	r24, r24
    1094:	99 27       	eor	r25, r25
    1096:	aa 27       	eor	r26, r26
    1098:	b2 70       	andi	r27, 0x02	; 2
    109a:	89 2b       	or	r24, r25
    109c:	8a 2b       	or	r24, r26
    109e:	8b 2b       	or	r24, r27
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
    10a2:	3d c0       	rjmp	.+122    	; 0x111e <__EEPROM_REGION_LENGTH__+0x11e>
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	0f 92       	push	r0
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	a2 81       	ldd	r26, Z+2	; 0x02
    10b6:	b3 81       	ldd	r27, Z+3	; 0x03
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	9a 83       	std	Y+2, r25	; 0x02
    10bc:	ab 83       	std	Y+3, r26	; 0x03
    10be:	bc 83       	std	Y+4, r27	; 0x04
    10c0:	2c 89       	ldd	r18, Y+20	; 0x14
    10c2:	3d 89       	ldd	r19, Y+21	; 0x15
    10c4:	4e 89       	ldd	r20, Y+22	; 0x16
    10c6:	5f 89       	ldd	r21, Y+23	; 0x17
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	ab 81       	ldd	r26, Y+3	; 0x03
    10ce:	bc 81       	ldd	r27, Y+4	; 0x04
    10d0:	09 8d       	ldd	r16, Y+25	; 0x19
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	9c d1       	rcall	.+824    	; 0x1410 <prvTestWaitCondition>
    10d8:	88 23       	and	r24, r24
    10da:	e9 f0       	breq	.+58     	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
    10dc:	88 8d       	ldd	r24, Y+24	; 0x18
    10de:	88 23       	and	r24, r24
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	fc 01       	movw	r30, r24
    10e8:	20 81       	ld	r18, Z
    10ea:	31 81       	ldd	r19, Z+1	; 0x01
    10ec:	42 81       	ldd	r20, Z+2	; 0x02
    10ee:	53 81       	ldd	r21, Z+3	; 0x03
    10f0:	8c 89       	ldd	r24, Y+20	; 0x14
    10f2:	9d 89       	ldd	r25, Y+21	; 0x15
    10f4:	ae 89       	ldd	r26, Y+22	; 0x16
    10f6:	bf 89       	ldd	r27, Y+23	; 0x17
    10f8:	80 95       	com	r24
    10fa:	90 95       	com	r25
    10fc:	a0 95       	com	r26
    10fe:	b0 95       	com	r27
    1100:	82 23       	and	r24, r18
    1102:	93 23       	and	r25, r19
    1104:	a4 23       	and	r26, r20
    1106:	b5 23       	and	r27, r21
    1108:	29 85       	ldd	r18, Y+9	; 0x09
    110a:	3a 85       	ldd	r19, Y+10	; 0x0a
    110c:	f9 01       	movw	r30, r18
    110e:	80 83       	st	Z, r24
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	a2 83       	std	Z+2, r26	; 0x02
    1114:	b3 83       	std	Z+3, r27	; 0x03
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	8b 87       	std	Y+11, r24	; 0x0b
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	ab 81       	ldd	r26, Y+3	; 0x03
    1124:	bc 81       	ldd	r27, Y+4	; 0x04
    1126:	bb 27       	eor	r27, r27
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	ab 83       	std	Y+3, r26	; 0x03
    112e:	bc 83       	std	Y+4, r27	; 0x04
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	ab 81       	ldd	r26, Y+3	; 0x03
    1136:	bc 81       	ldd	r27, Y+4	; 0x04
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	6d 96       	adiw	r28, 0x1d	; 29
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	08 95       	ret

0000115a <xEventGroupClearBits>:
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	2c 97       	sbiw	r28, 0x0c	; 12
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	98 87       	std	Y+8, r25	; 0x08
    1170:	8f 83       	std	Y+7, r24	; 0x07
    1172:	49 87       	std	Y+9, r20	; 0x09
    1174:	5a 87       	std	Y+10, r21	; 0x0a
    1176:	6b 87       	std	Y+11, r22	; 0x0b
    1178:	7c 87       	std	Y+12, r23	; 0x0c
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	98 85       	ldd	r25, Y+8	; 0x08
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	0f 92       	push	r0
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	fc 01       	movw	r30, r24
    118e:	80 81       	ld	r24, Z
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	a2 81       	ldd	r26, Z+2	; 0x02
    1194:	b3 81       	ldd	r27, Z+3	; 0x03
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	ad 83       	std	Y+5, r26	; 0x05
    119c:	be 83       	std	Y+6, r27	; 0x06
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	fc 01       	movw	r30, r24
    11a4:	20 81       	ld	r18, Z
    11a6:	31 81       	ldd	r19, Z+1	; 0x01
    11a8:	42 81       	ldd	r20, Z+2	; 0x02
    11aa:	53 81       	ldd	r21, Z+3	; 0x03
    11ac:	89 85       	ldd	r24, Y+9	; 0x09
    11ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    11b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    11b4:	80 95       	com	r24
    11b6:	90 95       	com	r25
    11b8:	a0 95       	com	r26
    11ba:	b0 95       	com	r27
    11bc:	82 23       	and	r24, r18
    11be:	93 23       	and	r25, r19
    11c0:	a4 23       	and	r26, r20
    11c2:	b5 23       	and	r27, r21
    11c4:	29 81       	ldd	r18, Y+1	; 0x01
    11c6:	3a 81       	ldd	r19, Y+2	; 0x02
    11c8:	f9 01       	movw	r30, r18
    11ca:	80 83       	st	Z, r24
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	a2 83       	std	Z+2, r26	; 0x02
    11d0:	b3 83       	std	Z+3, r27	; 0x03
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	ad 81       	ldd	r26, Y+5	; 0x05
    11dc:	be 81       	ldd	r27, Y+6	; 0x06
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	2c 96       	adiw	r28, 0x0c	; 12
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	08 95       	ret

000011f4 <xEventGroupSetBits>:
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	6d 97       	sbiw	r28, 0x1d	; 29
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	99 8f       	std	Y+25, r25	; 0x19
    120a:	88 8f       	std	Y+24, r24	; 0x18
    120c:	4a 8f       	std	Y+26, r20	; 0x1a
    120e:	5b 8f       	std	Y+27, r21	; 0x1b
    1210:	6c 8f       	std	Y+28, r22	; 0x1c
    1212:	7d 8f       	std	Y+29, r23	; 0x1d
    1214:	1b 82       	std	Y+3, r1	; 0x03
    1216:	1c 82       	std	Y+4, r1	; 0x04
    1218:	1d 82       	std	Y+5, r1	; 0x05
    121a:	1e 82       	std	Y+6, r1	; 0x06
    121c:	88 8d       	ldd	r24, Y+24	; 0x18
    121e:	99 8d       	ldd	r25, Y+25	; 0x19
    1220:	99 87       	std	Y+9, r25	; 0x09
    1222:	88 87       	std	Y+8, r24	; 0x08
    1224:	1f 82       	std	Y+7, r1	; 0x07
    1226:	88 85       	ldd	r24, Y+8	; 0x08
    1228:	99 85       	ldd	r25, Y+9	; 0x09
    122a:	04 96       	adiw	r24, 0x04	; 4
    122c:	9b 87       	std	Y+11, r25	; 0x0b
    122e:	8a 87       	std	Y+10, r24	; 0x0a
    1230:	8a 85       	ldd	r24, Y+10	; 0x0a
    1232:	9b 85       	ldd	r25, Y+11	; 0x0b
    1234:	03 96       	adiw	r24, 0x03	; 3
    1236:	9d 87       	std	Y+13, r25	; 0x0d
    1238:	8c 87       	std	Y+12, r24	; 0x0c
    123a:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <vTaskSuspendAll>
    123e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1240:	9b 85       	ldd	r25, Y+11	; 0x0b
    1242:	fc 01       	movw	r30, r24
    1244:	87 81       	ldd	r24, Z+7	; 0x07
    1246:	90 85       	ldd	r25, Z+8	; 0x08
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	88 85       	ldd	r24, Y+8	; 0x08
    124e:	99 85       	ldd	r25, Y+9	; 0x09
    1250:	fc 01       	movw	r30, r24
    1252:	20 81       	ld	r18, Z
    1254:	31 81       	ldd	r19, Z+1	; 0x01
    1256:	42 81       	ldd	r20, Z+2	; 0x02
    1258:	53 81       	ldd	r21, Z+3	; 0x03
    125a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    125c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    125e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1260:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1262:	82 2b       	or	r24, r18
    1264:	93 2b       	or	r25, r19
    1266:	a4 2b       	or	r26, r20
    1268:	b5 2b       	or	r27, r21
    126a:	28 85       	ldd	r18, Y+8	; 0x08
    126c:	39 85       	ldd	r19, Y+9	; 0x09
    126e:	f9 01       	movw	r30, r18
    1270:	80 83       	st	Z, r24
    1272:	91 83       	std	Z+1, r25	; 0x01
    1274:	a2 83       	std	Z+2, r26	; 0x02
    1276:	b3 83       	std	Z+3, r27	; 0x03
    1278:	95 c0       	rjmp	.+298    	; 0x13a4 <xEventGroupSetBits+0x1b0>
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	fc 01       	movw	r30, r24
    1280:	84 81       	ldd	r24, Z+4	; 0x04
    1282:	95 81       	ldd	r25, Z+5	; 0x05
    1284:	9f 87       	std	Y+15, r25	; 0x0f
    1286:	8e 87       	std	Y+14, r24	; 0x0e
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	a2 81       	ldd	r26, Z+2	; 0x02
    1294:	b3 81       	ldd	r27, Z+3	; 0x03
    1296:	88 8b       	std	Y+16, r24	; 0x10
    1298:	99 8b       	std	Y+17, r25	; 0x11
    129a:	aa 8b       	std	Y+18, r26	; 0x12
    129c:	bb 8b       	std	Y+19, r27	; 0x13
    129e:	1f 82       	std	Y+7, r1	; 0x07
    12a0:	88 89       	ldd	r24, Y+16	; 0x10
    12a2:	99 89       	ldd	r25, Y+17	; 0x11
    12a4:	aa 89       	ldd	r26, Y+18	; 0x12
    12a6:	bb 89       	ldd	r27, Y+19	; 0x13
    12a8:	88 27       	eor	r24, r24
    12aa:	99 27       	eor	r25, r25
    12ac:	aa 27       	eor	r26, r26
    12ae:	8c 8b       	std	Y+20, r24	; 0x14
    12b0:	9d 8b       	std	Y+21, r25	; 0x15
    12b2:	ae 8b       	std	Y+22, r26	; 0x16
    12b4:	bf 8b       	std	Y+23, r27	; 0x17
    12b6:	88 89       	ldd	r24, Y+16	; 0x10
    12b8:	99 89       	ldd	r25, Y+17	; 0x11
    12ba:	aa 89       	ldd	r26, Y+18	; 0x12
    12bc:	bb 89       	ldd	r27, Y+19	; 0x13
    12be:	bb 27       	eor	r27, r27
    12c0:	88 8b       	std	Y+16, r24	; 0x10
    12c2:	99 8b       	std	Y+17, r25	; 0x11
    12c4:	aa 8b       	std	Y+18, r26	; 0x12
    12c6:	bb 8b       	std	Y+19, r27	; 0x13
    12c8:	8c 89       	ldd	r24, Y+20	; 0x14
    12ca:	9d 89       	ldd	r25, Y+21	; 0x15
    12cc:	ae 89       	ldd	r26, Y+22	; 0x16
    12ce:	bf 89       	ldd	r27, Y+23	; 0x17
    12d0:	88 27       	eor	r24, r24
    12d2:	99 27       	eor	r25, r25
    12d4:	aa 27       	eor	r26, r26
    12d6:	b4 70       	andi	r27, 0x04	; 4
    12d8:	89 2b       	or	r24, r25
    12da:	8a 2b       	or	r24, r26
    12dc:	8b 2b       	or	r24, r27
    12de:	b1 f4       	brne	.+44     	; 0x130c <xEventGroupSetBits+0x118>
    12e0:	88 85       	ldd	r24, Y+8	; 0x08
    12e2:	99 85       	ldd	r25, Y+9	; 0x09
    12e4:	fc 01       	movw	r30, r24
    12e6:	20 81       	ld	r18, Z
    12e8:	31 81       	ldd	r19, Z+1	; 0x01
    12ea:	42 81       	ldd	r20, Z+2	; 0x02
    12ec:	53 81       	ldd	r21, Z+3	; 0x03
    12ee:	88 89       	ldd	r24, Y+16	; 0x10
    12f0:	99 89       	ldd	r25, Y+17	; 0x11
    12f2:	aa 89       	ldd	r26, Y+18	; 0x12
    12f4:	bb 89       	ldd	r27, Y+19	; 0x13
    12f6:	82 23       	and	r24, r18
    12f8:	93 23       	and	r25, r19
    12fa:	a4 23       	and	r26, r20
    12fc:	b5 23       	and	r27, r21
    12fe:	89 2b       	or	r24, r25
    1300:	8a 2b       	or	r24, r26
    1302:	8b 2b       	or	r24, r27
    1304:	e9 f0       	breq	.+58     	; 0x1340 <xEventGroupSetBits+0x14c>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	8f 83       	std	Y+7, r24	; 0x07
    130a:	1a c0       	rjmp	.+52     	; 0x1340 <xEventGroupSetBits+0x14c>
    130c:	88 85       	ldd	r24, Y+8	; 0x08
    130e:	99 85       	ldd	r25, Y+9	; 0x09
    1310:	fc 01       	movw	r30, r24
    1312:	20 81       	ld	r18, Z
    1314:	31 81       	ldd	r19, Z+1	; 0x01
    1316:	42 81       	ldd	r20, Z+2	; 0x02
    1318:	53 81       	ldd	r21, Z+3	; 0x03
    131a:	88 89       	ldd	r24, Y+16	; 0x10
    131c:	99 89       	ldd	r25, Y+17	; 0x11
    131e:	aa 89       	ldd	r26, Y+18	; 0x12
    1320:	bb 89       	ldd	r27, Y+19	; 0x13
    1322:	28 23       	and	r18, r24
    1324:	39 23       	and	r19, r25
    1326:	4a 23       	and	r20, r26
    1328:	5b 23       	and	r21, r27
    132a:	88 89       	ldd	r24, Y+16	; 0x10
    132c:	99 89       	ldd	r25, Y+17	; 0x11
    132e:	aa 89       	ldd	r26, Y+18	; 0x12
    1330:	bb 89       	ldd	r27, Y+19	; 0x13
    1332:	28 17       	cp	r18, r24
    1334:	39 07       	cpc	r19, r25
    1336:	4a 07       	cpc	r20, r26
    1338:	5b 07       	cpc	r21, r27
    133a:	11 f4       	brne	.+4      	; 0x1340 <xEventGroupSetBits+0x14c>
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	8f 83       	std	Y+7, r24	; 0x07
    1340:	8f 81       	ldd	r24, Y+7	; 0x07
    1342:	88 23       	and	r24, r24
    1344:	59 f1       	breq	.+86     	; 0x139c <xEventGroupSetBits+0x1a8>
    1346:	8c 89       	ldd	r24, Y+20	; 0x14
    1348:	9d 89       	ldd	r25, Y+21	; 0x15
    134a:	ae 89       	ldd	r26, Y+22	; 0x16
    134c:	bf 89       	ldd	r27, Y+23	; 0x17
    134e:	88 27       	eor	r24, r24
    1350:	99 27       	eor	r25, r25
    1352:	aa 27       	eor	r26, r26
    1354:	b1 70       	andi	r27, 0x01	; 1
    1356:	89 2b       	or	r24, r25
    1358:	8a 2b       	or	r24, r26
    135a:	8b 2b       	or	r24, r27
    135c:	81 f0       	breq	.+32     	; 0x137e <xEventGroupSetBits+0x18a>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	4d 81       	ldd	r20, Y+5	; 0x05
    1364:	5e 81       	ldd	r21, Y+6	; 0x06
    1366:	88 89       	ldd	r24, Y+16	; 0x10
    1368:	99 89       	ldd	r25, Y+17	; 0x11
    136a:	aa 89       	ldd	r26, Y+18	; 0x12
    136c:	bb 89       	ldd	r27, Y+19	; 0x13
    136e:	82 2b       	or	r24, r18
    1370:	93 2b       	or	r25, r19
    1372:	a4 2b       	or	r26, r20
    1374:	b5 2b       	or	r27, r21
    1376:	8b 83       	std	Y+3, r24	; 0x03
    1378:	9c 83       	std	Y+4, r25	; 0x04
    137a:	ad 83       	std	Y+5, r26	; 0x05
    137c:	be 83       	std	Y+6, r27	; 0x06
    137e:	88 85       	ldd	r24, Y+8	; 0x08
    1380:	99 85       	ldd	r25, Y+9	; 0x09
    1382:	fc 01       	movw	r30, r24
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	a2 81       	ldd	r26, Z+2	; 0x02
    138a:	b3 81       	ldd	r27, Z+3	; 0x03
    138c:	b2 60       	ori	r27, 0x02	; 2
    138e:	29 81       	ldd	r18, Y+1	; 0x01
    1390:	3a 81       	ldd	r19, Y+2	; 0x02
    1392:	ac 01       	movw	r20, r24
    1394:	bd 01       	movw	r22, r26
    1396:	c9 01       	movw	r24, r18
    1398:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <vTaskRemoveFromUnorderedEventList>
    139c:	8e 85       	ldd	r24, Y+14	; 0x0e
    139e:	9f 85       	ldd	r25, Y+15	; 0x0f
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	29 81       	ldd	r18, Y+1	; 0x01
    13a6:	3a 81       	ldd	r19, Y+2	; 0x02
    13a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    13aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    13ac:	28 17       	cp	r18, r24
    13ae:	39 07       	cpc	r19, r25
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <xEventGroupSetBits+0x1c0>
    13b2:	63 cf       	rjmp	.-314    	; 0x127a <xEventGroupSetBits+0x86>
    13b4:	88 85       	ldd	r24, Y+8	; 0x08
    13b6:	99 85       	ldd	r25, Y+9	; 0x09
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 81       	ld	r18, Z
    13bc:	31 81       	ldd	r19, Z+1	; 0x01
    13be:	42 81       	ldd	r20, Z+2	; 0x02
    13c0:	53 81       	ldd	r21, Z+3	; 0x03
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	ad 81       	ldd	r26, Y+5	; 0x05
    13c8:	be 81       	ldd	r27, Y+6	; 0x06
    13ca:	80 95       	com	r24
    13cc:	90 95       	com	r25
    13ce:	a0 95       	com	r26
    13d0:	b0 95       	com	r27
    13d2:	82 23       	and	r24, r18
    13d4:	93 23       	and	r25, r19
    13d6:	a4 23       	and	r26, r20
    13d8:	b5 23       	and	r27, r21
    13da:	28 85       	ldd	r18, Y+8	; 0x08
    13dc:	39 85       	ldd	r19, Y+9	; 0x09
    13de:	f9 01       	movw	r30, r18
    13e0:	80 83       	st	Z, r24
    13e2:	91 83       	std	Z+1, r25	; 0x01
    13e4:	a2 83       	std	Z+2, r26	; 0x02
    13e6:	b3 83       	std	Z+3, r27	; 0x03
    13e8:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    13ec:	88 85       	ldd	r24, Y+8	; 0x08
    13ee:	99 85       	ldd	r25, Y+9	; 0x09
    13f0:	fc 01       	movw	r30, r24
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	a2 81       	ldd	r26, Z+2	; 0x02
    13f8:	b3 81       	ldd	r27, Z+3	; 0x03
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	6d 96       	adiw	r28, 0x1d	; 29
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
    1410:	0f 93       	push	r16
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	2a 97       	sbiw	r28, 0x0a	; 10
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	de bf       	out	0x3e, r29	; 62
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	cd bf       	out	0x3d, r28	; 61
    1426:	6a 83       	std	Y+2, r22	; 0x02
    1428:	7b 83       	std	Y+3, r23	; 0x03
    142a:	8c 83       	std	Y+4, r24	; 0x04
    142c:	9d 83       	std	Y+5, r25	; 0x05
    142e:	2e 83       	std	Y+6, r18	; 0x06
    1430:	3f 83       	std	Y+7, r19	; 0x07
    1432:	48 87       	std	Y+8, r20	; 0x08
    1434:	59 87       	std	Y+9, r21	; 0x09
    1436:	0a 87       	std	Y+10, r16	; 0x0a
    BaseType_t xWaitConditionMet = pdFALSE;
    1438:	19 82       	std	Y+1, r1	; 0x01

    if( xWaitForAllBits == pdFALSE )
    143a:	8a 85       	ldd	r24, Y+10	; 0x0a
    143c:	88 23       	and	r24, r24
    143e:	99 f4       	brne	.+38     	; 0x1466 <prvTestWaitCondition+0x56>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    1440:	2a 81       	ldd	r18, Y+2	; 0x02
    1442:	3b 81       	ldd	r19, Y+3	; 0x03
    1444:	4c 81       	ldd	r20, Y+4	; 0x04
    1446:	5d 81       	ldd	r21, Y+5	; 0x05
    1448:	8e 81       	ldd	r24, Y+6	; 0x06
    144a:	9f 81       	ldd	r25, Y+7	; 0x07
    144c:	a8 85       	ldd	r26, Y+8	; 0x08
    144e:	b9 85       	ldd	r27, Y+9	; 0x09
    1450:	82 23       	and	r24, r18
    1452:	93 23       	and	r25, r19
    1454:	a4 23       	and	r26, r20
    1456:	b5 23       	and	r27, r21
    1458:	89 2b       	or	r24, r25
    145a:	8a 2b       	or	r24, r26
    145c:	8b 2b       	or	r24, r27
    145e:	d1 f0       	breq	.+52     	; 0x1494 <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	17 c0       	rjmp	.+46     	; 0x1494 <prvTestWaitCondition+0x84>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    1466:	2a 81       	ldd	r18, Y+2	; 0x02
    1468:	3b 81       	ldd	r19, Y+3	; 0x03
    146a:	4c 81       	ldd	r20, Y+4	; 0x04
    146c:	5d 81       	ldd	r21, Y+5	; 0x05
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	a8 85       	ldd	r26, Y+8	; 0x08
    1474:	b9 85       	ldd	r27, Y+9	; 0x09
    1476:	28 23       	and	r18, r24
    1478:	39 23       	and	r19, r25
    147a:	4a 23       	and	r20, r26
    147c:	5b 23       	and	r21, r27
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	a8 85       	ldd	r26, Y+8	; 0x08
    1484:	b9 85       	ldd	r27, Y+9	; 0x09
    1486:	28 17       	cp	r18, r24
    1488:	39 07       	cpc	r19, r25
    148a:	4a 07       	cpc	r20, r26
    148c:	5b 07       	cpc	r21, r27
    148e:	11 f4       	brne	.+4      	; 0x1494 <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	89 83       	std	Y+1, r24	; 0x01
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
}
    1496:	2a 96       	adiw	r28, 0x0a	; 10
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	0f 91       	pop	r16
    14a8:	08 95       	ret

000014aa <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    /* This just exists to keep the linker quiet. */
}
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	2a 97       	sbiw	r28, 0x0a	; 10
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	9a 87       	std	Y+10, r25	; 0x0a
    14c0:	89 87       	std	Y+9, r24	; 0x09
    14c2:	1e 82       	std	Y+6, r1	; 0x06
    14c4:	1d 82       	std	Y+5, r1	; 0x05
    14c6:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <vTaskSuspendAll>
    14ca:	80 91 87 13 	lds	r24, 0x1387	; 0x801387 <pxEnd>
    14ce:	90 91 88 13 	lds	r25, 0x1388	; 0x801388 <pxEnd+0x1>
    14d2:	89 2b       	or	r24, r25
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <pvPortMalloc+0x2e>
    14d6:	6e d1       	rcall	.+732    	; 0x17b4 <prvHeapInit>
    14d8:	20 91 91 13 	lds	r18, 0x1391	; 0x801391 <xBlockAllocatedBit>
    14dc:	30 91 92 13 	lds	r19, 0x1392	; 0x801392 <xBlockAllocatedBit+0x1>
    14e0:	89 85       	ldd	r24, Y+9	; 0x09
    14e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e4:	82 23       	and	r24, r18
    14e6:	93 23       	and	r25, r19
    14e8:	89 2b       	or	r24, r25
    14ea:	09 f0       	breq	.+2      	; 0x14ee <pvPortMalloc+0x44>
    14ec:	e1 c0       	rjmp	.+450    	; 0x16b0 <pvPortMalloc+0x206>
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	89 2b       	or	r24, r25
    14f4:	a1 f0       	breq	.+40     	; 0x151e <pvPortMalloc+0x74>
    14f6:	24 e0       	ldi	r18, 0x04	; 4
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	28 0f       	add	r18, r24
    1500:	39 1f       	adc	r19, r25
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	82 17       	cp	r24, r18
    1508:	93 07       	cpc	r25, r19
    150a:	48 f4       	brcc	.+18     	; 0x151e <pvPortMalloc+0x74>
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	29 85       	ldd	r18, Y+9	; 0x09
    1512:	3a 85       	ldd	r19, Y+10	; 0x0a
    1514:	82 0f       	add	r24, r18
    1516:	93 1f       	adc	r25, r19
    1518:	9a 87       	std	Y+10, r25	; 0x0a
    151a:	89 87       	std	Y+9, r24	; 0x09
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <pvPortMalloc+0x78>
    151e:	1a 86       	std	Y+10, r1	; 0x0a
    1520:	19 86       	std	Y+9, r1	; 0x09
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	89 2b       	or	r24, r25
    1528:	09 f4       	brne	.+2      	; 0x152c <pvPortMalloc+0x82>
    152a:	c2 c0       	rjmp	.+388    	; 0x16b0 <pvPortMalloc+0x206>
    152c:	80 91 89 13 	lds	r24, 0x1389	; 0x801389 <xFreeBytesRemaining>
    1530:	90 91 8a 13 	lds	r25, 0x138A	; 0x80138a <xFreeBytesRemaining+0x1>
    1534:	29 85       	ldd	r18, Y+9	; 0x09
    1536:	3a 85       	ldd	r19, Y+10	; 0x0a
    1538:	82 17       	cp	r24, r18
    153a:	93 07       	cpc	r25, r19
    153c:	08 f4       	brcc	.+2      	; 0x1540 <pvPortMalloc+0x96>
    153e:	b8 c0       	rjmp	.+368    	; 0x16b0 <pvPortMalloc+0x206>
    1540:	83 e8       	ldi	r24, 0x83	; 131
    1542:	93 e1       	ldi	r25, 0x13	; 19
    1544:	9c 83       	std	Y+4, r25	; 0x04
    1546:	8b 83       	std	Y+3, r24	; 0x03
    1548:	80 91 83 13 	lds	r24, 0x1383	; 0x801383 <xStart>
    154c:	90 91 84 13 	lds	r25, 0x1384	; 0x801384 <xStart+0x1>
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
    1554:	0b c0       	rjmp	.+22     	; 0x156c <pvPortMalloc+0xc2>
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	fc 01       	movw	r30, r24
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
    1568:	9a 83       	std	Y+2, r25	; 0x02
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	fc 01       	movw	r30, r24
    1572:	22 81       	ldd	r18, Z+2	; 0x02
    1574:	33 81       	ldd	r19, Z+3	; 0x03
    1576:	89 85       	ldd	r24, Y+9	; 0x09
    1578:	9a 85       	ldd	r25, Y+10	; 0x0a
    157a:	28 17       	cp	r18, r24
    157c:	39 07       	cpc	r19, r25
    157e:	38 f4       	brcc	.+14     	; 0x158e <pvPortMalloc+0xe4>
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	fc 01       	movw	r30, r24
    1586:	80 81       	ld	r24, Z
    1588:	91 81       	ldd	r25, Z+1	; 0x01
    158a:	89 2b       	or	r24, r25
    158c:	21 f7       	brne	.-56     	; 0x1556 <pvPortMalloc+0xac>
    158e:	80 91 87 13 	lds	r24, 0x1387	; 0x801387 <pxEnd>
    1592:	90 91 88 13 	lds	r25, 0x1388	; 0x801388 <pxEnd+0x1>
    1596:	29 81       	ldd	r18, Y+1	; 0x01
    1598:	3a 81       	ldd	r19, Y+2	; 0x02
    159a:	28 17       	cp	r18, r24
    159c:	39 07       	cpc	r19, r25
    159e:	09 f4       	brne	.+2      	; 0x15a2 <pvPortMalloc+0xf8>
    15a0:	87 c0       	rjmp	.+270    	; 0x16b0 <pvPortMalloc+0x206>
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	fc 01       	movw	r30, r24
    15a8:	20 81       	ld	r18, Z
    15aa:	31 81       	ldd	r19, Z+1	; 0x01
    15ac:	84 e0       	ldi	r24, 0x04	; 4
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	82 0f       	add	r24, r18
    15b2:	93 1f       	adc	r25, r19
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	9a 81       	ldd	r25, Y+2	; 0x02
    15bc:	fc 01       	movw	r30, r24
    15be:	20 81       	ld	r18, Z
    15c0:	31 81       	ldd	r19, Z+1	; 0x01
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	fc 01       	movw	r30, r24
    15c8:	31 83       	std	Z+1, r19	; 0x01
    15ca:	20 83       	st	Z, r18
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	fc 01       	movw	r30, r24
    15d2:	22 81       	ldd	r18, Z+2	; 0x02
    15d4:	33 81       	ldd	r19, Z+3	; 0x03
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	28 1b       	sub	r18, r24
    15dc:	39 0b       	sbc	r19, r25
    15de:	84 e0       	ldi	r24, 0x04	; 4
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	82 17       	cp	r24, r18
    15e8:	93 07       	cpc	r25, r19
    15ea:	00 f5       	brcc	.+64     	; 0x162c <pvPortMalloc+0x182>
    15ec:	29 81       	ldd	r18, Y+1	; 0x01
    15ee:	3a 81       	ldd	r19, Y+2	; 0x02
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	82 0f       	add	r24, r18
    15f6:	93 1f       	adc	r25, r19
    15f8:	98 87       	std	Y+8, r25	; 0x08
    15fa:	8f 83       	std	Y+7, r24	; 0x07
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	fc 01       	movw	r30, r24
    1602:	22 81       	ldd	r18, Z+2	; 0x02
    1604:	33 81       	ldd	r19, Z+3	; 0x03
    1606:	89 85       	ldd	r24, Y+9	; 0x09
    1608:	9a 85       	ldd	r25, Y+10	; 0x0a
    160a:	28 1b       	sub	r18, r24
    160c:	39 0b       	sbc	r19, r25
    160e:	8f 81       	ldd	r24, Y+7	; 0x07
    1610:	98 85       	ldd	r25, Y+8	; 0x08
    1612:	fc 01       	movw	r30, r24
    1614:	33 83       	std	Z+3, r19	; 0x03
    1616:	22 83       	std	Z+2, r18	; 0x02
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	29 85       	ldd	r18, Y+9	; 0x09
    161e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1620:	fc 01       	movw	r30, r24
    1622:	33 83       	std	Z+3, r19	; 0x03
    1624:	22 83       	std	Z+2, r18	; 0x02
    1626:	8f 81       	ldd	r24, Y+7	; 0x07
    1628:	98 85       	ldd	r25, Y+8	; 0x08
    162a:	44 d1       	rcall	.+648    	; 0x18b4 <prvInsertBlockIntoFreeList>
    162c:	20 91 89 13 	lds	r18, 0x1389	; 0x801389 <xFreeBytesRemaining>
    1630:	30 91 8a 13 	lds	r19, 0x138A	; 0x80138a <xFreeBytesRemaining+0x1>
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	fc 01       	movw	r30, r24
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	a9 01       	movw	r20, r18
    1640:	48 1b       	sub	r20, r24
    1642:	59 0b       	sbc	r21, r25
    1644:	ca 01       	movw	r24, r20
    1646:	90 93 8a 13 	sts	0x138A, r25	; 0x80138a <xFreeBytesRemaining+0x1>
    164a:	80 93 89 13 	sts	0x1389, r24	; 0x801389 <xFreeBytesRemaining>
    164e:	20 91 89 13 	lds	r18, 0x1389	; 0x801389 <xFreeBytesRemaining>
    1652:	30 91 8a 13 	lds	r19, 0x138A	; 0x80138a <xFreeBytesRemaining+0x1>
    1656:	80 91 8b 13 	lds	r24, 0x138B	; 0x80138b <xMinimumEverFreeBytesRemaining>
    165a:	90 91 8c 13 	lds	r25, 0x138C	; 0x80138c <xMinimumEverFreeBytesRemaining+0x1>
    165e:	28 17       	cp	r18, r24
    1660:	39 07       	cpc	r19, r25
    1662:	40 f4       	brcc	.+16     	; 0x1674 <pvPortMalloc+0x1ca>
    1664:	80 91 89 13 	lds	r24, 0x1389	; 0x801389 <xFreeBytesRemaining>
    1668:	90 91 8a 13 	lds	r25, 0x138A	; 0x80138a <xFreeBytesRemaining+0x1>
    166c:	90 93 8c 13 	sts	0x138C, r25	; 0x80138c <xMinimumEverFreeBytesRemaining+0x1>
    1670:	80 93 8b 13 	sts	0x138B, r24	; 0x80138b <xMinimumEverFreeBytesRemaining>
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	fc 01       	movw	r30, r24
    167a:	22 81       	ldd	r18, Z+2	; 0x02
    167c:	33 81       	ldd	r19, Z+3	; 0x03
    167e:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <xBlockAllocatedBit>
    1682:	90 91 92 13 	lds	r25, 0x1392	; 0x801392 <xBlockAllocatedBit+0x1>
    1686:	28 2b       	or	r18, r24
    1688:	39 2b       	or	r19, r25
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	fc 01       	movw	r30, r24
    1690:	33 83       	std	Z+3, r19	; 0x03
    1692:	22 83       	std	Z+2, r18	; 0x02
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	fc 01       	movw	r30, r24
    169a:	11 82       	std	Z+1, r1	; 0x01
    169c:	10 82       	st	Z, r1
    169e:	80 91 8d 13 	lds	r24, 0x138D	; 0x80138d <xNumberOfSuccessfulAllocations>
    16a2:	90 91 8e 13 	lds	r25, 0x138E	; 0x80138e <xNumberOfSuccessfulAllocations+0x1>
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	90 93 8e 13 	sts	0x138E, r25	; 0x80138e <xNumberOfSuccessfulAllocations+0x1>
    16ac:	80 93 8d 13 	sts	0x138D, r24	; 0x80138d <xNumberOfSuccessfulAllocations>
    16b0:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	89 2b       	or	r24, r25
    16ba:	11 f4       	brne	.+4      	; 0x16c0 <pvPortMalloc+0x216>
    16bc:	0e 94 31 37 	call	0x6e62	; 0x6e62 <vApplicationMallocFailedHook>
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	2a 96       	adiw	r28, 0x0a	; 10
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <vPortFree>:
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	00 d0       	rcall	.+0      	; 0x16dc <vPortFree+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <vPortFree+0x8>
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	89 2b       	or	r24, r25
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <vPortFree+0x22>
    16f6:	54 c0       	rjmp	.+168    	; 0x17a0 <vPortFree+0xca>
    16f8:	84 e0       	ldi	r24, 0x04	; 4
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	91 95       	neg	r25
    16fe:	81 95       	neg	r24
    1700:	91 09       	sbc	r25, r1
    1702:	29 81       	ldd	r18, Y+1	; 0x01
    1704:	3a 81       	ldd	r19, Y+2	; 0x02
    1706:	82 0f       	add	r24, r18
    1708:	93 1f       	adc	r25, r19
    170a:	9a 83       	std	Y+2, r25	; 0x02
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	9c 83       	std	Y+4, r25	; 0x04
    1714:	8b 83       	std	Y+3, r24	; 0x03
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	fc 01       	movw	r30, r24
    171c:	22 81       	ldd	r18, Z+2	; 0x02
    171e:	33 81       	ldd	r19, Z+3	; 0x03
    1720:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <xBlockAllocatedBit>
    1724:	90 91 92 13 	lds	r25, 0x1392	; 0x801392 <xBlockAllocatedBit+0x1>
    1728:	82 23       	and	r24, r18
    172a:	93 23       	and	r25, r19
    172c:	89 2b       	or	r24, r25
    172e:	c1 f1       	breq	.+112    	; 0x17a0 <vPortFree+0xca>
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	fc 01       	movw	r30, r24
    1736:	80 81       	ld	r24, Z
    1738:	91 81       	ldd	r25, Z+1	; 0x01
    173a:	89 2b       	or	r24, r25
    173c:	89 f5       	brne	.+98     	; 0x17a0 <vPortFree+0xca>
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	fc 01       	movw	r30, r24
    1744:	22 81       	ldd	r18, Z+2	; 0x02
    1746:	33 81       	ldd	r19, Z+3	; 0x03
    1748:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <xBlockAllocatedBit>
    174c:	90 91 92 13 	lds	r25, 0x1392	; 0x801392 <xBlockAllocatedBit+0x1>
    1750:	80 95       	com	r24
    1752:	90 95       	com	r25
    1754:	28 23       	and	r18, r24
    1756:	39 23       	and	r19, r25
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	fc 01       	movw	r30, r24
    175e:	33 83       	std	Z+3, r19	; 0x03
    1760:	22 83       	std	Z+2, r18	; 0x02
    1762:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <vTaskSuspendAll>
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	fc 01       	movw	r30, r24
    176c:	22 81       	ldd	r18, Z+2	; 0x02
    176e:	33 81       	ldd	r19, Z+3	; 0x03
    1770:	80 91 89 13 	lds	r24, 0x1389	; 0x801389 <xFreeBytesRemaining>
    1774:	90 91 8a 13 	lds	r25, 0x138A	; 0x80138a <xFreeBytesRemaining+0x1>
    1778:	82 0f       	add	r24, r18
    177a:	93 1f       	adc	r25, r19
    177c:	90 93 8a 13 	sts	0x138A, r25	; 0x80138a <xFreeBytesRemaining+0x1>
    1780:	80 93 89 13 	sts	0x1389, r24	; 0x801389 <xFreeBytesRemaining>
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	95 d0       	rcall	.+298    	; 0x18b4 <prvInsertBlockIntoFreeList>
    178a:	80 91 8f 13 	lds	r24, 0x138F	; 0x80138f <xNumberOfSuccessfulFrees>
    178e:	90 91 90 13 	lds	r25, 0x1390	; 0x801390 <xNumberOfSuccessfulFrees+0x1>
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	90 93 90 13 	sts	0x1390, r25	; 0x801390 <xNumberOfSuccessfulFrees+0x1>
    1798:	80 93 8f 13 	sts	0x138F, r24	; 0x80138f <xNumberOfSuccessfulFrees>
    179c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    17a0:	00 00       	nop
    17a2:	26 96       	adiw	r28, 0x06	; 6
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	28 97       	sbiw	r28, 0x08	; 8
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    17c8:	84 ec       	ldi	r24, 0xC4	; 196
    17ca:	99 e0       	ldi	r25, 0x09	; 9
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
    17d0:	8f eb       	ldi	r24, 0xBF	; 191
    17d2:	99 e0       	ldi	r25, 0x09	; 9
    17d4:	9c 83       	std	Y+4, r25	; 0x04
    17d6:	8b 83       	std	Y+3, r24	; 0x03
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	90 93 84 13 	sts	0x1384, r25	; 0x801384 <xStart+0x1>
    17e8:	80 93 83 13 	sts	0x1383, r24	; 0x801383 <xStart>
    xStart.xBlockSize = ( size_t ) 0;
    17ec:	10 92 86 13 	sts	0x1386, r1	; 0x801386 <xStart+0x3>
    17f0:	10 92 85 13 	sts	0x1385, r1	; 0x801385 <xStart+0x2>

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    17f4:	2d 81       	ldd	r18, Y+5	; 0x05
    17f6:	3e 81       	ldd	r19, Y+6	; 0x06
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	9a 81       	ldd	r25, Y+2	; 0x02
    17fc:	82 0f       	add	r24, r18
    17fe:	93 1f       	adc	r25, r19
    1800:	9c 83       	std	Y+4, r25	; 0x04
    1802:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress -= xHeapStructSize;
    1804:	84 e0       	ldi	r24, 0x04	; 4
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	2b 81       	ldd	r18, Y+3	; 0x03
    180a:	3c 81       	ldd	r19, Y+4	; 0x04
    180c:	a9 01       	movw	r20, r18
    180e:	48 1b       	sub	r20, r24
    1810:	59 0b       	sbc	r21, r25
    1812:	ca 01       	movw	r24, r20
    1814:	9c 83       	std	Y+4, r25	; 0x04
    1816:	8b 83       	std	Y+3, r24	; 0x03
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	9c 81       	ldd	r25, Y+4	; 0x04
    181c:	90 93 88 13 	sts	0x1388, r25	; 0x801388 <pxEnd+0x1>
    1820:	80 93 87 13 	sts	0x1387, r24	; 0x801387 <pxEnd>
    pxEnd->xBlockSize = 0;
    1824:	80 91 87 13 	lds	r24, 0x1387	; 0x801387 <pxEnd>
    1828:	90 91 88 13 	lds	r25, 0x1388	; 0x801388 <pxEnd+0x1>
    182c:	fc 01       	movw	r30, r24
    182e:	13 82       	std	Z+3, r1	; 0x03
    1830:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
    1832:	80 91 87 13 	lds	r24, 0x1387	; 0x801387 <pxEnd>
    1836:	90 91 88 13 	lds	r25, 0x1388	; 0x801388 <pxEnd+0x1>
    183a:	fc 01       	movw	r30, r24
    183c:	11 82       	std	Z+1, r1	; 0x01
    183e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	98 87       	std	Y+8, r25	; 0x08
    1846:	8f 83       	std	Y+7, r24	; 0x07
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1848:	8f 81       	ldd	r24, Y+7	; 0x07
    184a:	98 85       	ldd	r25, Y+8	; 0x08
    184c:	2b 81       	ldd	r18, Y+3	; 0x03
    184e:	3c 81       	ldd	r19, Y+4	; 0x04
    1850:	28 1b       	sub	r18, r24
    1852:	39 0b       	sbc	r19, r25
    1854:	8f 81       	ldd	r24, Y+7	; 0x07
    1856:	98 85       	ldd	r25, Y+8	; 0x08
    1858:	fc 01       	movw	r30, r24
    185a:	33 83       	std	Z+3, r19	; 0x03
    185c:	22 83       	std	Z+2, r18	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    185e:	20 91 87 13 	lds	r18, 0x1387	; 0x801387 <pxEnd>
    1862:	30 91 88 13 	lds	r19, 0x1388	; 0x801388 <pxEnd+0x1>
    1866:	8f 81       	ldd	r24, Y+7	; 0x07
    1868:	98 85       	ldd	r25, Y+8	; 0x08
    186a:	fc 01       	movw	r30, r24
    186c:	31 83       	std	Z+1, r19	; 0x01
    186e:	20 83       	st	Z, r18

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1870:	8f 81       	ldd	r24, Y+7	; 0x07
    1872:	98 85       	ldd	r25, Y+8	; 0x08
    1874:	fc 01       	movw	r30, r24
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	90 93 8c 13 	sts	0x138C, r25	; 0x80138c <xMinimumEverFreeBytesRemaining+0x1>
    187e:	80 93 8b 13 	sts	0x138B, r24	; 0x80138b <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1882:	8f 81       	ldd	r24, Y+7	; 0x07
    1884:	98 85       	ldd	r25, Y+8	; 0x08
    1886:	fc 01       	movw	r30, r24
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	90 93 8a 13 	sts	0x138A, r25	; 0x80138a <xFreeBytesRemaining+0x1>
    1890:	80 93 89 13 	sts	0x1389, r24	; 0x801389 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e8       	ldi	r25, 0x80	; 128
    1898:	90 93 92 13 	sts	0x1392, r25	; 0x801392 <xBlockAllocatedBit+0x1>
    189c:	80 93 91 13 	sts	0x1391, r24	; 0x801391 <xBlockAllocatedBit>
}
    18a0:	00 00       	nop
    18a2:	28 96       	adiw	r28, 0x08	; 8
    18a4:	0f b6       	in	r0, 0x3f	; 63
    18a6:	f8 94       	cli
    18a8:	de bf       	out	0x3e, r29	; 62
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <prvInsertBlockIntoFreeList+0x6>
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <prvInsertBlockIntoFreeList+0x8>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    18c4:	83 e8       	ldi	r24, 0x83	; 131
    18c6:	93 e1       	ldi	r25, 0x13	; 19
    18c8:	9a 83       	std	Y+2, r25	; 0x02
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <prvInsertBlockIntoFreeList+0x28>
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	9a 81       	ldd	r25, Y+2	; 0x02
    18d2:	fc 01       	movw	r30, r24
    18d4:	80 81       	ld	r24, Z
    18d6:	91 81       	ldd	r25, Z+1	; 0x01
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	fc 01       	movw	r30, r24
    18e2:	20 81       	ld	r18, Z
    18e4:	31 81       	ldd	r19, Z+1	; 0x01
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	28 17       	cp	r18, r24
    18ec:	39 07       	cpc	r19, r25
    18ee:	78 f3       	brcs	.-34     	; 0x18ce <prvInsertBlockIntoFreeList+0x1a>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	9a 81       	ldd	r25, Y+2	; 0x02
    18f4:	9c 83       	std	Y+4, r25	; 0x04
    18f6:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	fc 01       	movw	r30, r24
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	2b 81       	ldd	r18, Y+3	; 0x03
    1904:	3c 81       	ldd	r19, Y+4	; 0x04
    1906:	28 0f       	add	r18, r24
    1908:	39 1f       	adc	r19, r25
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	28 17       	cp	r18, r24
    1910:	39 07       	cpc	r19, r25
    1912:	a9 f4       	brne	.+42     	; 0x193e <prvInsertBlockIntoFreeList+0x8a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	fc 01       	movw	r30, r24
    191a:	22 81       	ldd	r18, Z+2	; 0x02
    191c:	33 81       	ldd	r19, Z+3	; 0x03
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	9e 81       	ldd	r25, Y+6	; 0x06
    1922:	fc 01       	movw	r30, r24
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	28 0f       	add	r18, r24
    192a:	39 1f       	adc	r19, r25
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	9a 81       	ldd	r25, Y+2	; 0x02
    1930:	fc 01       	movw	r30, r24
    1932:	33 83       	std	Z+3, r19	; 0x03
    1934:	22 83       	std	Z+2, r18	; 0x02
        pxBlockToInsert = pxIterator;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	9e 83       	std	Y+6, r25	; 0x06
    193c:	8d 83       	std	Y+5, r24	; 0x05
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	9e 81       	ldd	r25, Y+6	; 0x06
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	9e 81       	ldd	r25, Y+6	; 0x06
    194a:	fc 01       	movw	r30, r24
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	2b 81       	ldd	r18, Y+3	; 0x03
    1952:	3c 81       	ldd	r19, Y+4	; 0x04
    1954:	28 0f       	add	r18, r24
    1956:	39 1f       	adc	r19, r25
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	fc 01       	movw	r30, r24
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	28 17       	cp	r18, r24
    1964:	39 07       	cpc	r19, r25
    1966:	c1 f5       	brne	.+112    	; 0x19d8 <prvInsertBlockIntoFreeList+0x124>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	fc 01       	movw	r30, r24
    196e:	20 81       	ld	r18, Z
    1970:	31 81       	ldd	r19, Z+1	; 0x01
    1972:	80 91 87 13 	lds	r24, 0x1387	; 0x801387 <pxEnd>
    1976:	90 91 88 13 	lds	r25, 0x1388	; 0x801388 <pxEnd+0x1>
    197a:	28 17       	cp	r18, r24
    197c:	39 07       	cpc	r19, r25
    197e:	11 f1       	breq	.+68     	; 0x19c4 <prvInsertBlockIntoFreeList+0x110>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1980:	8d 81       	ldd	r24, Y+5	; 0x05
    1982:	9e 81       	ldd	r25, Y+6	; 0x06
    1984:	fc 01       	movw	r30, r24
    1986:	22 81       	ldd	r18, Z+2	; 0x02
    1988:	33 81       	ldd	r19, Z+3	; 0x03
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	fc 01       	movw	r30, r24
    1990:	80 81       	ld	r24, Z
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	fc 01       	movw	r30, r24
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	28 0f       	add	r18, r24
    199c:	39 1f       	adc	r19, r25
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	9e 81       	ldd	r25, Y+6	; 0x06
    19a2:	fc 01       	movw	r30, r24
    19a4:	33 83       	std	Z+3, r19	; 0x03
    19a6:	22 83       	std	Z+2, r18	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	fc 01       	movw	r30, r24
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	fc 01       	movw	r30, r24
    19b4:	20 81       	ld	r18, Z
    19b6:	31 81       	ldd	r19, Z+1	; 0x01
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	fc 01       	movw	r30, r24
    19be:	31 83       	std	Z+1, r19	; 0x01
    19c0:	20 83       	st	Z, r18
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <prvInsertBlockIntoFreeList+0x138>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    19c4:	20 91 87 13 	lds	r18, 0x1387	; 0x801387 <pxEnd>
    19c8:	30 91 88 13 	lds	r19, 0x1388	; 0x801388 <pxEnd+0x1>
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	fc 01       	movw	r30, r24
    19d2:	31 83       	std	Z+1, r19	; 0x01
    19d4:	20 83       	st	Z, r18
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <prvInsertBlockIntoFreeList+0x138>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	9a 81       	ldd	r25, Y+2	; 0x02
    19dc:	fc 01       	movw	r30, r24
    19de:	20 81       	ld	r18, Z
    19e0:	31 81       	ldd	r19, Z+1	; 0x01
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	fc 01       	movw	r30, r24
    19e8:	31 83       	std	Z+1, r19	; 0x01
    19ea:	20 83       	st	Z, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    19ec:	29 81       	ldd	r18, Y+1	; 0x01
    19ee:	3a 81       	ldd	r19, Y+2	; 0x02
    19f0:	8d 81       	ldd	r24, Y+5	; 0x05
    19f2:	9e 81       	ldd	r25, Y+6	; 0x06
    19f4:	28 17       	cp	r18, r24
    19f6:	39 07       	cpc	r19, r25
    19f8:	39 f0       	breq	.+14     	; 0x1a08 <prvInsertBlockIntoFreeList+0x154>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	9a 81       	ldd	r25, Y+2	; 0x02
    19fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1a00:	3e 81       	ldd	r19, Y+6	; 0x06
    1a02:	fc 01       	movw	r30, r24
    1a04:	31 83       	std	Z+1, r19	; 0x01
    1a06:	20 83       	st	Z, r18
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    1a08:	00 00       	nop
    1a0a:	26 96       	adiw	r28, 0x06	; 6
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	1f 92       	push	r1
    1a22:	1f 92       	push	r1
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a30:	9c 01       	movw	r18, r24
    1a32:	2d 5f       	subi	r18, 0xFD	; 253
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	32 83       	std	Z+2, r19	; 0x02
    1a3e:	21 83       	std	Z+1, r18	; 0x01
    1a40:	29 81       	ldd	r18, Y+1	; 0x01
    1a42:	3a 81       	ldd	r19, Y+2	; 0x02
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	9f ef       	ldi	r25, 0xFF	; 255
    1a48:	dc 01       	movw	r26, r24
    1a4a:	f9 01       	movw	r30, r18
    1a4c:	83 83       	std	Z+3, r24	; 0x03
    1a4e:	94 83       	std	Z+4, r25	; 0x04
    1a50:	a5 83       	std	Z+5, r26	; 0x05
    1a52:	b6 83       	std	Z+6, r27	; 0x06
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	9c 01       	movw	r18, r24
    1a5a:	2d 5f       	subi	r18, 0xFD	; 253
    1a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	fc 01       	movw	r30, r24
    1a64:	30 87       	std	Z+8, r19	; 0x08
    1a66:	27 83       	std	Z+7, r18	; 0x07
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6c:	9c 01       	movw	r18, r24
    1a6e:	2d 5f       	subi	r18, 0xFD	; 253
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	fc 01       	movw	r30, r24
    1a78:	32 87       	std	Z+10, r19	; 0x0a
    1a7a:	21 87       	std	Z+9, r18	; 0x09
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a80:	fc 01       	movw	r30, r24
    1a82:	10 82       	st	Z, r1
    1a84:	00 00       	nop
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	08 95       	ret

00001a90 <vListInitialiseItem>:
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	1f 92       	push	r1
    1a96:	1f 92       	push	r1
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	13 86       	std	Z+11, r1	; 0x0b
    1aa8:	12 86       	std	Z+10, r1	; 0x0a
    1aaa:	00 00       	nop
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	08 95       	ret

00001ab6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    1ab6:	cf 93       	push	r28
    1ab8:	df 93       	push	r29
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	2a 97       	sbiw	r28, 0x0a	; 10
    1ac0:	0f b6       	in	r0, 0x3f	; 63
    1ac2:	f8 94       	cli
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	cd bf       	out	0x3d, r28	; 61
    1aca:	98 87       	std	Y+8, r25	; 0x08
    1acc:	8f 83       	std	Y+7, r24	; 0x07
    1ace:	7a 87       	std	Y+10, r23	; 0x0a
    1ad0:	69 87       	std	Y+9, r22	; 0x09
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1ad2:	89 85       	ldd	r24, Y+9	; 0x09
    1ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	a2 81       	ldd	r26, Z+2	; 0x02
    1ade:	b3 81       	ldd	r27, Z+3	; 0x03
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
    1ae2:	9c 83       	std	Y+4, r25	; 0x04
    1ae4:	ad 83       	std	Y+5, r26	; 0x05
    1ae6:	be 83       	std	Y+6, r27	; 0x06
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	ad 81       	ldd	r26, Y+5	; 0x05
    1aee:	be 81       	ldd	r27, Y+6	; 0x06
    1af0:	8f 3f       	cpi	r24, 0xFF	; 255
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	af 4f       	sbci	r26, 0xFF	; 255
    1af6:	bf 4f       	sbci	r27, 0xFF	; 255
    1af8:	41 f4       	brne	.+16     	; 0x1b0a <vListInsert+0x54>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1afa:	8f 81       	ldd	r24, Y+7	; 0x07
    1afc:	98 85       	ldd	r25, Y+8	; 0x08
    1afe:	fc 01       	movw	r30, r24
    1b00:	81 85       	ldd	r24, Z+9	; 0x09
    1b02:	92 85       	ldd	r25, Z+10	; 0x0a
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	20 c0       	rjmp	.+64     	; 0x1b4a <vListInsert+0x94>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1b0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b0c:	98 85       	ldd	r25, Y+8	; 0x08
    1b0e:	03 96       	adiw	r24, 0x03	; 3
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	07 c0       	rjmp	.+14     	; 0x1b24 <vListInsert+0x6e>
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	84 81       	ldd	r24, Z+4	; 0x04
    1b1e:	95 81       	ldd	r25, Z+5	; 0x05
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	fc 01       	movw	r30, r24
    1b2a:	84 81       	ldd	r24, Z+4	; 0x04
    1b2c:	95 81       	ldd	r25, Z+5	; 0x05
    1b2e:	fc 01       	movw	r30, r24
    1b30:	20 81       	ld	r18, Z
    1b32:	31 81       	ldd	r19, Z+1	; 0x01
    1b34:	42 81       	ldd	r20, Z+2	; 0x02
    1b36:	53 81       	ldd	r21, Z+3	; 0x03
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	ad 81       	ldd	r26, Y+5	; 0x05
    1b3e:	be 81       	ldd	r27, Y+6	; 0x06
    1b40:	82 17       	cp	r24, r18
    1b42:	93 07       	cpc	r25, r19
    1b44:	a4 07       	cpc	r26, r20
    1b46:	b5 07       	cpc	r27, r21
    1b48:	30 f7       	brcc	.-52     	; 0x1b16 <vListInsert+0x60>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	fc 01       	movw	r30, r24
    1b50:	24 81       	ldd	r18, Z+4	; 0x04
    1b52:	35 81       	ldd	r19, Z+5	; 0x05
    1b54:	89 85       	ldd	r24, Y+9	; 0x09
    1b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b58:	fc 01       	movw	r30, r24
    1b5a:	35 83       	std	Z+5, r19	; 0x05
    1b5c:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1b5e:	89 85       	ldd	r24, Y+9	; 0x09
    1b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b62:	fc 01       	movw	r30, r24
    1b64:	84 81       	ldd	r24, Z+4	; 0x04
    1b66:	95 81       	ldd	r25, Z+5	; 0x05
    1b68:	29 85       	ldd	r18, Y+9	; 0x09
    1b6a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	37 83       	std	Z+7, r19	; 0x07
    1b70:	26 83       	std	Z+6, r18	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	29 81       	ldd	r18, Y+1	; 0x01
    1b78:	3a 81       	ldd	r19, Y+2	; 0x02
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	37 83       	std	Z+7, r19	; 0x07
    1b7e:	26 83       	std	Z+6, r18	; 0x06
    pxIterator->pxNext = pxNewListItem;
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	9a 81       	ldd	r25, Y+2	; 0x02
    1b84:	29 85       	ldd	r18, Y+9	; 0x09
    1b86:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b88:	fc 01       	movw	r30, r24
    1b8a:	35 83       	std	Z+5, r19	; 0x05
    1b8c:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    1b8e:	89 85       	ldd	r24, Y+9	; 0x09
    1b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b92:	2f 81       	ldd	r18, Y+7	; 0x07
    1b94:	38 85       	ldd	r19, Y+8	; 0x08
    1b96:	fc 01       	movw	r30, r24
    1b98:	33 87       	std	Z+11, r19	; 0x0b
    1b9a:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1b9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b9e:	98 85       	ldd	r25, Y+8	; 0x08
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	21 e0       	ldi	r18, 0x01	; 1
    1ba6:	28 0f       	add	r18, r24
    1ba8:	8f 81       	ldd	r24, Y+7	; 0x07
    1baa:	98 85       	ldd	r25, Y+8	; 0x08
    1bac:	fc 01       	movw	r30, r24
    1bae:	20 83       	st	Z, r18
}
    1bb0:	00 00       	nop
    1bb2:	2a 96       	adiw	r28, 0x0a	; 10
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	08 95       	ret

00001bc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <uxListRemove+0x6>
    1bca:	1f 92       	push	r1
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	fc 01       	movw	r30, r24
    1bda:	82 85       	ldd	r24, Z+10	; 0x0a
    1bdc:	93 85       	ldd	r25, Z+11	; 0x0b
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	fc 01       	movw	r30, r24
    1be8:	84 81       	ldd	r24, Z+4	; 0x04
    1bea:	95 81       	ldd	r25, Z+5	; 0x05
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	26 81       	ldd	r18, Z+6	; 0x06
    1bf4:	37 81       	ldd	r19, Z+7	; 0x07
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	37 83       	std	Z+7, r19	; 0x07
    1bfa:	26 83       	std	Z+6, r18	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	fc 01       	movw	r30, r24
    1c02:	86 81       	ldd	r24, Z+6	; 0x06
    1c04:	97 81       	ldd	r25, Z+7	; 0x07
    1c06:	2b 81       	ldd	r18, Y+3	; 0x03
    1c08:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0a:	f9 01       	movw	r30, r18
    1c0c:	24 81       	ldd	r18, Z+4	; 0x04
    1c0e:	35 81       	ldd	r19, Z+5	; 0x05
    1c10:	fc 01       	movw	r30, r24
    1c12:	35 83       	std	Z+5, r19	; 0x05
    1c14:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	21 81       	ldd	r18, Z+1	; 0x01
    1c1e:	32 81       	ldd	r19, Z+2	; 0x02
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	28 17       	cp	r18, r24
    1c26:	39 07       	cpc	r19, r25
    1c28:	51 f4       	brne	.+20     	; 0x1c3e <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	fc 01       	movw	r30, r24
    1c30:	26 81       	ldd	r18, Z+6	; 0x06
    1c32:	37 81       	ldd	r19, Z+7	; 0x07
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	9a 81       	ldd	r25, Y+2	; 0x02
    1c38:	fc 01       	movw	r30, r24
    1c3a:	32 83       	std	Z+2, r19	; 0x02
    1c3c:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	9c 81       	ldd	r25, Y+4	; 0x04
    1c42:	fc 01       	movw	r30, r24
    1c44:	13 86       	std	Z+11, r1	; 0x0b
    1c46:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	80 81       	ld	r24, Z
    1c50:	2f ef       	ldi	r18, 0xFF	; 255
    1c52:	28 0f       	add	r18, r24
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	fc 01       	movw	r30, r24
    1c5a:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c60:	fc 01       	movw	r30, r24
    1c62:	80 81       	ld	r24, Z
}
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	08 95       	ret

00001c72 <pxPortInitialiseStack>:
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
}
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	28 97       	sbiw	r28, 0x08	; 8
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	7e 83       	std	Y+6, r23	; 0x06
    1c8c:	6d 83       	std	Y+5, r22	; 0x05
    1c8e:	58 87       	std	Y+8, r21	; 0x08
    1c90:	4f 83       	std	Y+7, r20	; 0x07
    1c92:	8d 81       	ldd	r24, Y+5	; 0x05
    1c94:	9e 81       	ldd	r25, Y+6	; 0x06
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	29 81       	ldd	r18, Y+1	; 0x01
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	20 83       	st	Z, r18
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb2:	89 2f       	mov	r24, r25
    1cb4:	99 27       	eor	r25, r25
    1cb6:	9a 83       	std	Y+2, r25	; 0x02
    1cb8:	89 83       	std	Y+1, r24	; 0x01
    1cba:	29 81       	ldd	r18, Y+1	; 0x01
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	20 83       	st	Z, r18
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	10 82       	st	Z, r1
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	8b 83       	std	Y+3, r24	; 0x03
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	10 82       	st	Z, r1
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	9c 83       	std	Y+4, r25	; 0x04
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	20 e8       	ldi	r18, 0x80	; 128
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	20 83       	st	Z, r18
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	9c 83       	std	Y+4, r25	; 0x04
    1d04:	8b 83       	std	Y+3, r24	; 0x03
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	10 82       	st	Z, r1
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9c 83       	std	Y+4, r25	; 0x04
    1d16:	8b 83       	std	Y+3, r24	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	10 82       	st	Z, r1
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	fc 01       	movw	r30, r24
    1d30:	10 82       	st	Z, r1
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	47 97       	sbiw	r24, 0x17	; 23
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
    1d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3e:	98 85       	ldd	r25, Y+8	; 0x08
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	29 81       	ldd	r18, Y+1	; 0x01
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	20 83       	st	Z, r18
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	9c 81       	ldd	r25, Y+4	; 0x04
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	9c 83       	std	Y+4, r25	; 0x04
    1d56:	8b 83       	std	Y+3, r24	; 0x03
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5c:	89 2f       	mov	r24, r25
    1d5e:	99 27       	eor	r25, r25
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	29 81       	ldd	r18, Y+1	; 0x01
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	20 83       	st	Z, r18
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	07 97       	sbiw	r24, 0x07	; 7
    1d74:	9c 83       	std	Y+4, r25	; 0x04
    1d76:	8b 83       	std	Y+3, r24	; 0x03
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7c:	28 96       	adiw	r28, 0x08	; 8
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	08 95       	ret

00001d8e <xPortStartScheduler>:
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	ff d0       	rcall	.+510    	; 0x1f96 <prvSetupTimerInterrupt>
    1d98:	a0 91 93 13 	lds	r26, 0x1393	; 0x801393 <pxCurrentTCB>
    1d9c:	b0 91 94 13 	lds	r27, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    1da0:	cd 91       	ld	r28, X+
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	dd 91       	ld	r29, X+
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	ff 91       	pop	r31
    1daa:	ef 91       	pop	r30
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	bf 91       	pop	r27
    1db2:	af 91       	pop	r26
    1db4:	9f 91       	pop	r25
    1db6:	8f 91       	pop	r24
    1db8:	7f 91       	pop	r23
    1dba:	6f 91       	pop	r22
    1dbc:	5f 91       	pop	r21
    1dbe:	4f 91       	pop	r20
    1dc0:	3f 91       	pop	r19
    1dc2:	2f 91       	pop	r18
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	df 90       	pop	r13
    1dce:	cf 90       	pop	r12
    1dd0:	bf 90       	pop	r11
    1dd2:	af 90       	pop	r10
    1dd4:	9f 90       	pop	r9
    1dd6:	8f 90       	pop	r8
    1dd8:	7f 90       	pop	r7
    1dda:	6f 90       	pop	r6
    1ddc:	5f 90       	pop	r5
    1dde:	4f 90       	pop	r4
    1de0:	3f 90       	pop	r3
    1de2:	2f 90       	pop	r2
    1de4:	1f 90       	pop	r1
    1de6:	0f 90       	pop	r0
    1de8:	0c be       	out	0x3c, r0	; 60
    1dea:	0f 90       	pop	r0
    1dec:	0b be       	out	0x3b, r0	; 59
    1dee:	0f 90       	pop	r0
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	0f 90       	pop	r0
    1df4:	08 95       	ret
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <vPortYield>:
    1dfe:	0f 92       	push	r0
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	0f 92       	push	r0
    1e06:	0b b6       	in	r0, 0x3b	; 59
    1e08:	0f 92       	push	r0
    1e0a:	0c b6       	in	r0, 0x3c	; 60
    1e0c:	0f 92       	push	r0
    1e0e:	1f 92       	push	r1
    1e10:	11 24       	eor	r1, r1
    1e12:	2f 92       	push	r2
    1e14:	3f 92       	push	r3
    1e16:	4f 92       	push	r4
    1e18:	5f 92       	push	r5
    1e1a:	6f 92       	push	r6
    1e1c:	7f 92       	push	r7
    1e1e:	8f 92       	push	r8
    1e20:	9f 92       	push	r9
    1e22:	af 92       	push	r10
    1e24:	bf 92       	push	r11
    1e26:	cf 92       	push	r12
    1e28:	df 92       	push	r13
    1e2a:	ef 92       	push	r14
    1e2c:	ff 92       	push	r15
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	2f 93       	push	r18
    1e34:	3f 93       	push	r19
    1e36:	4f 93       	push	r20
    1e38:	5f 93       	push	r21
    1e3a:	6f 93       	push	r22
    1e3c:	7f 93       	push	r23
    1e3e:	8f 93       	push	r24
    1e40:	9f 93       	push	r25
    1e42:	af 93       	push	r26
    1e44:	bf 93       	push	r27
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	ef 93       	push	r30
    1e4c:	ff 93       	push	r31
    1e4e:	a0 91 93 13 	lds	r26, 0x1393	; 0x801393 <pxCurrentTCB>
    1e52:	b0 91 94 13 	lds	r27, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    1e56:	0d b6       	in	r0, 0x3d	; 61
    1e58:	0d 92       	st	X+, r0
    1e5a:	0e b6       	in	r0, 0x3e	; 62
    1e5c:	0d 92       	st	X+, r0
    1e5e:	0e 94 4d 22 	call	0x449a	; 0x449a <vTaskSwitchContext>
    1e62:	a0 91 93 13 	lds	r26, 0x1393	; 0x801393 <pxCurrentTCB>
    1e66:	b0 91 94 13 	lds	r27, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    1e6a:	cd 91       	ld	r28, X+
    1e6c:	cd bf       	out	0x3d, r28	; 61
    1e6e:	dd 91       	ld	r29, X+
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	ff 91       	pop	r31
    1e74:	ef 91       	pop	r30
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	bf 91       	pop	r27
    1e7c:	af 91       	pop	r26
    1e7e:	9f 91       	pop	r25
    1e80:	8f 91       	pop	r24
    1e82:	7f 91       	pop	r23
    1e84:	6f 91       	pop	r22
    1e86:	5f 91       	pop	r21
    1e88:	4f 91       	pop	r20
    1e8a:	3f 91       	pop	r19
    1e8c:	2f 91       	pop	r18
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	ff 90       	pop	r15
    1e94:	ef 90       	pop	r14
    1e96:	df 90       	pop	r13
    1e98:	cf 90       	pop	r12
    1e9a:	bf 90       	pop	r11
    1e9c:	af 90       	pop	r10
    1e9e:	9f 90       	pop	r9
    1ea0:	8f 90       	pop	r8
    1ea2:	7f 90       	pop	r7
    1ea4:	6f 90       	pop	r6
    1ea6:	5f 90       	pop	r5
    1ea8:	4f 90       	pop	r4
    1eaa:	3f 90       	pop	r3
    1eac:	2f 90       	pop	r2
    1eae:	1f 90       	pop	r1
    1eb0:	0f 90       	pop	r0
    1eb2:	0c be       	out	0x3c, r0	; 60
    1eb4:	0f 90       	pop	r0
    1eb6:	0b be       	out	0x3b, r0	; 59
    1eb8:	0f 90       	pop	r0
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	0f 90       	pop	r0
    1ebe:	08 95       	ret
	...

00001ec2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1ec2:	0f 92       	push	r0
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	0f 92       	push	r0
    1eca:	0b b6       	in	r0, 0x3b	; 59
    1ecc:	0f 92       	push	r0
    1ece:	0c b6       	in	r0, 0x3c	; 60
    1ed0:	0f 92       	push	r0
    1ed2:	1f 92       	push	r1
    1ed4:	11 24       	eor	r1, r1
    1ed6:	2f 92       	push	r2
    1ed8:	3f 92       	push	r3
    1eda:	4f 92       	push	r4
    1edc:	5f 92       	push	r5
    1ede:	6f 92       	push	r6
    1ee0:	7f 92       	push	r7
    1ee2:	8f 92       	push	r8
    1ee4:	9f 92       	push	r9
    1ee6:	af 92       	push	r10
    1ee8:	bf 92       	push	r11
    1eea:	cf 92       	push	r12
    1eec:	df 92       	push	r13
    1eee:	ef 92       	push	r14
    1ef0:	ff 92       	push	r15
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	2f 93       	push	r18
    1ef8:	3f 93       	push	r19
    1efa:	4f 93       	push	r20
    1efc:	5f 93       	push	r21
    1efe:	6f 93       	push	r22
    1f00:	7f 93       	push	r23
    1f02:	8f 93       	push	r24
    1f04:	9f 93       	push	r25
    1f06:	af 93       	push	r26
    1f08:	bf 93       	push	r27
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	ef 93       	push	r30
    1f10:	ff 93       	push	r31
    1f12:	a0 91 93 13 	lds	r26, 0x1393	; 0x801393 <pxCurrentTCB>
    1f16:	b0 91 94 13 	lds	r27, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    1f1a:	0d b6       	in	r0, 0x3d	; 61
    1f1c:	0d 92       	st	X+, r0
    1f1e:	0e b6       	in	r0, 0x3e	; 62
    1f20:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1f22:	83 e5       	ldi	r24, 0x53	; 83
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	fc 01       	movw	r30, r24
    1f28:	10 82       	st	Z, r1
    if( xTaskIncrementTick() != pdFALSE )
    1f2a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <xTaskIncrementTick>
    1f2e:	88 23       	and	r24, r24
    1f30:	11 f0       	breq	.+4      	; 0x1f36 <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
    1f32:	0e 94 4d 22 	call	0x449a	; 0x449a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1f36:	a0 91 93 13 	lds	r26, 0x1393	; 0x801393 <pxCurrentTCB>
    1f3a:	b0 91 94 13 	lds	r27, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    1f3e:	cd 91       	ld	r28, X+
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	dd 91       	ld	r29, X+
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	ff 91       	pop	r31
    1f48:	ef 91       	pop	r30
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	bf 91       	pop	r27
    1f50:	af 91       	pop	r26
    1f52:	9f 91       	pop	r25
    1f54:	8f 91       	pop	r24
    1f56:	7f 91       	pop	r23
    1f58:	6f 91       	pop	r22
    1f5a:	5f 91       	pop	r21
    1f5c:	4f 91       	pop	r20
    1f5e:	3f 91       	pop	r19
    1f60:	2f 91       	pop	r18
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	ff 90       	pop	r15
    1f68:	ef 90       	pop	r14
    1f6a:	df 90       	pop	r13
    1f6c:	cf 90       	pop	r12
    1f6e:	bf 90       	pop	r11
    1f70:	af 90       	pop	r10
    1f72:	9f 90       	pop	r9
    1f74:	8f 90       	pop	r8
    1f76:	7f 90       	pop	r7
    1f78:	6f 90       	pop	r6
    1f7a:	5f 90       	pop	r5
    1f7c:	4f 90       	pop	r4
    1f7e:	3f 90       	pop	r3
    1f80:	2f 90       	pop	r2
    1f82:	1f 90       	pop	r1
    1f84:	0f 90       	pop	r0
    1f86:	0c be       	out	0x3c, r0	; 60
    1f88:	0f 90       	pop	r0
    1f8a:	0b be       	out	0x3b, r0	; 59
    1f8c:	0f 90       	pop	r0
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1f92:	08 95       	ret
	...

00001f96 <prvSetupTimerInterrupt>:

/*
 * Setup WDT to generate a tick interrupt.
 */
void prvSetupTimerInterrupt( void )
{
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    /* reset watchdog */
    wdt_reset();
    1f9e:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	88 70       	andi	r24, 0x08	; 8
    1fa6:	99 27       	eor	r25, r25
    1fa8:	89 2b       	or	r24, r25
    1faa:	11 f0       	breq	.+4      	; 0x1fb0 <prvSetupTimerInterrupt+0x1a>
    1fac:	80 ee       	ldi	r24, 0xE0	; 224
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <prvSetupTimerInterrupt+0x1c>
    1fb0:	80 ec       	ldi	r24, 0xC0	; 192
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	97 70       	andi	r25, 0x07	; 7
    1fb6:	89 2b       	or	r24, r25
    1fb8:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    1fba:	88 e1       	ldi	r24, 0x18	; 24
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	a8 95       	wdr
    1fc2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
    /* reset watchdog */
    wdt_reset();

    /* set up WDT Interrupt (rather than the WDT Reset). */
    wdt_interrupt_enable( portUSE_WDTO );
}
    1fcc:	00 00       	nop
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	08 95       	ret

00001fd4 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1fd4:	76 df       	rcall	.-276    	; 0x1ec2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1fd6:	18 95       	reti
	...

00001fda <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <xQueueGenericReset+0x6>
    1fe0:	1f 92       	push	r1
    1fe2:	1f 92       	push	r1
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	9c 83       	std	Y+4, r25	; 0x04
    1fea:	8b 83       	std	Y+3, r24	; 0x03
    1fec:	6d 83       	std	Y+5, r22	; 0x05
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	f8 94       	cli
    1ffa:	0f 92       	push	r0
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	fc 01       	movw	r30, r24
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	29 81       	ldd	r18, Y+1	; 0x01
    2008:	3a 81       	ldd	r19, Y+2	; 0x02
    200a:	f9 01       	movw	r30, r18
    200c:	27 8d       	ldd	r18, Z+31	; 0x1f
    200e:	42 2f       	mov	r20, r18
    2010:	50 e0       	ldi	r21, 0x00	; 0
    2012:	29 81       	ldd	r18, Y+1	; 0x01
    2014:	3a 81       	ldd	r19, Y+2	; 0x02
    2016:	f9 01       	movw	r30, r18
    2018:	20 a1       	ldd	r18, Z+32	; 0x20
    201a:	22 2f       	mov	r18, r18
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	42 9f       	mul	r20, r18
    2020:	b0 01       	movw	r22, r0
    2022:	43 9f       	mul	r20, r19
    2024:	70 0d       	add	r23, r0
    2026:	52 9f       	mul	r21, r18
    2028:	70 0d       	add	r23, r0
    202a:	11 24       	eor	r1, r1
    202c:	9b 01       	movw	r18, r22
    202e:	28 0f       	add	r18, r24
    2030:	39 1f       	adc	r19, r25
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	9a 81       	ldd	r25, Y+2	; 0x02
    2036:	fc 01       	movw	r30, r24
    2038:	35 83       	std	Z+5, r19	; 0x05
    203a:	24 83       	std	Z+4, r18	; 0x04
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	fc 01       	movw	r30, r24
    2042:	16 8e       	std	Z+30, r1	; 0x1e
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	fc 01       	movw	r30, r24
    204a:	20 81       	ld	r18, Z
    204c:	31 81       	ldd	r19, Z+1	; 0x01
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	fc 01       	movw	r30, r24
    2054:	33 83       	std	Z+3, r19	; 0x03
    2056:	22 83       	std	Z+2, r18	; 0x02
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	9a 81       	ldd	r25, Y+2	; 0x02
    205c:	fc 01       	movw	r30, r24
    205e:	20 81       	ld	r18, Z
    2060:	31 81       	ldd	r19, Z+1	; 0x01
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	fc 01       	movw	r30, r24
    2068:	87 8d       	ldd	r24, Z+31	; 0x1f
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	bc 01       	movw	r22, r24
    2070:	61 50       	subi	r22, 0x01	; 1
    2072:	71 09       	sbc	r23, r1
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	9a 81       	ldd	r25, Y+2	; 0x02
    2078:	fc 01       	movw	r30, r24
    207a:	80 a1       	ldd	r24, Z+32	; 0x20
    207c:	48 2f       	mov	r20, r24
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	64 9f       	mul	r22, r20
    2082:	c0 01       	movw	r24, r0
    2084:	65 9f       	mul	r22, r21
    2086:	90 0d       	add	r25, r0
    2088:	74 9f       	mul	r23, r20
    208a:	90 0d       	add	r25, r0
    208c:	11 24       	eor	r1, r1
    208e:	28 0f       	add	r18, r24
    2090:	39 1f       	adc	r19, r25
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	fc 01       	movw	r30, r24
    2098:	37 83       	std	Z+7, r19	; 0x07
    209a:	26 83       	std	Z+6, r18	; 0x06
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	2f ef       	ldi	r18, 0xFF	; 255
    20a2:	fc 01       	movw	r30, r24
    20a4:	21 a3       	std	Z+33, r18	; 0x21
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	2f ef       	ldi	r18, 0xFF	; 255
    20ac:	fc 01       	movw	r30, r24
    20ae:	22 a3       	std	Z+34, r18	; 0x22
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	88 23       	and	r24, r24
    20b4:	79 f4       	brne	.+30     	; 0x20d4 <__DATA_REGION_LENGTH__+0xd4>
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	fc 01       	movw	r30, r24
    20bc:	80 85       	ldd	r24, Z+8	; 0x08
    20be:	88 23       	and	r24, r24
    20c0:	89 f0       	breq	.+34     	; 0x20e4 <__DATA_REGION_LENGTH__+0xe4>
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	08 96       	adiw	r24, 0x08	; 8
    20c8:	0e 94 fd 23 	call	0x47fa	; 0x47fa <xTaskRemoveFromEventList>
    20cc:	88 23       	and	r24, r24
    20ce:	51 f0       	breq	.+20     	; 0x20e4 <__DATA_REGION_LENGTH__+0xe4>
    20d0:	96 de       	rcall	.-724    	; 0x1dfe <vPortYield>
    20d2:	08 c0       	rjmp	.+16     	; 0x20e4 <__DATA_REGION_LENGTH__+0xe4>
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	08 96       	adiw	r24, 0x08	; 8
    20da:	a0 dc       	rcall	.-1728   	; 0x1a1c <vListInitialise>
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	43 96       	adiw	r24, 0x13	; 19
    20e2:	9c dc       	rcall	.-1736   	; 0x1a1c <vListInitialise>
    20e4:	0f 90       	pop	r0
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	08 95       	ret

000020fa <xQueueGenericCreate>:
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	29 97       	sbiw	r28, 0x09	; 9
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	8f 83       	std	Y+7, r24	; 0x07
    2114:	68 87       	std	Y+8, r22	; 0x08
    2116:	49 87       	std	Y+9, r20	; 0x09
    2118:	8f 81       	ldd	r24, Y+7	; 0x07
    211a:	48 2f       	mov	r20, r24
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	88 85       	ldd	r24, Y+8	; 0x08
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	42 9f       	mul	r20, r18
    2126:	c0 01       	movw	r24, r0
    2128:	43 9f       	mul	r20, r19
    212a:	90 0d       	add	r25, r0
    212c:	52 9f       	mul	r21, r18
    212e:	90 0d       	add	r25, r0
    2130:	11 24       	eor	r1, r1
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	83 96       	adiw	r24, 0x23	; 35
    213c:	b6 d9       	rcall	.-3220   	; 0x14aa <pvPortMalloc>
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	89 2b       	or	r24, r25
    2148:	99 f0       	breq	.+38     	; 0x2170 <xQueueGenericCreate+0x76>
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	83 96       	adiw	r24, 0x23	; 35
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	8d 83       	std	Y+5, r24	; 0x05
    215c:	2b 81       	ldd	r18, Y+3	; 0x03
    215e:	3c 81       	ldd	r19, Y+4	; 0x04
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	89 01       	movw	r16, r18
    2166:	29 85       	ldd	r18, Y+9	; 0x09
    2168:	ac 01       	movw	r20, r24
    216a:	68 85       	ldd	r22, Y+8	; 0x08
    216c:	8f 81       	ldd	r24, Y+7	; 0x07
    216e:	0d d0       	rcall	.+26     	; 0x218a <prvInitialiseNewQueue>
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	29 96       	adiw	r28, 0x09	; 9
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	1f 91       	pop	r17
    2186:	0f 91       	pop	r16
    2188:	08 95       	ret

0000218a <prvInitialiseNewQueue>:
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	27 97       	sbiw	r28, 0x07	; 7
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	6a 83       	std	Y+2, r22	; 0x02
    21a6:	5c 83       	std	Y+4, r21	; 0x04
    21a8:	4b 83       	std	Y+3, r20	; 0x03
    21aa:	2d 83       	std	Y+5, r18	; 0x05
    21ac:	1f 83       	std	Y+7, r17	; 0x07
    21ae:	0e 83       	std	Y+6, r16	; 0x06
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	88 23       	and	r24, r24
    21b4:	41 f4       	brne	.+16     	; 0x21c6 <prvInitialiseNewQueue+0x3c>
    21b6:	8e 81       	ldd	r24, Y+6	; 0x06
    21b8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ba:	2e 81       	ldd	r18, Y+6	; 0x06
    21bc:	3f 81       	ldd	r19, Y+7	; 0x07
    21be:	fc 01       	movw	r30, r24
    21c0:	31 83       	std	Z+1, r19	; 0x01
    21c2:	20 83       	st	Z, r18
    21c4:	07 c0       	rjmp	.+14     	; 0x21d4 <prvInitialiseNewQueue+0x4a>
    21c6:	8e 81       	ldd	r24, Y+6	; 0x06
    21c8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ca:	2b 81       	ldd	r18, Y+3	; 0x03
    21cc:	3c 81       	ldd	r19, Y+4	; 0x04
    21ce:	fc 01       	movw	r30, r24
    21d0:	31 83       	std	Z+1, r19	; 0x01
    21d2:	20 83       	st	Z, r18
    21d4:	8e 81       	ldd	r24, Y+6	; 0x06
    21d6:	9f 81       	ldd	r25, Y+7	; 0x07
    21d8:	29 81       	ldd	r18, Y+1	; 0x01
    21da:	fc 01       	movw	r30, r24
    21dc:	27 8f       	std	Z+31, r18	; 0x1f
    21de:	8e 81       	ldd	r24, Y+6	; 0x06
    21e0:	9f 81       	ldd	r25, Y+7	; 0x07
    21e2:	2a 81       	ldd	r18, Y+2	; 0x02
    21e4:	fc 01       	movw	r30, r24
    21e6:	20 a3       	std	Z+32, r18	; 0x20
    21e8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ea:	9f 81       	ldd	r25, Y+7	; 0x07
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	f5 de       	rcall	.-534    	; 0x1fda <xQueueGenericReset>
    21f0:	00 00       	nop
    21f2:	27 96       	adiw	r28, 0x07	; 7
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	1f 91       	pop	r17
    2204:	0f 91       	pop	r16
    2206:	08 95       	ret

00002208 <prvInitialiseMutex>:
    2208:	0f 93       	push	r16
    220a:	cf 93       	push	r28
    220c:	df 93       	push	r29
    220e:	1f 92       	push	r1
    2210:	1f 92       	push	r1
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	9a 81       	ldd	r25, Y+2	; 0x02
    221e:	89 2b       	or	r24, r25
    2220:	b9 f0       	breq	.+46     	; 0x2250 <prvInitialiseMutex+0x48>
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	9a 81       	ldd	r25, Y+2	; 0x02
    2226:	fc 01       	movw	r30, r24
    2228:	15 82       	std	Z+5, r1	; 0x05
    222a:	14 82       	std	Z+4, r1	; 0x04
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	9a 81       	ldd	r25, Y+2	; 0x02
    2230:	fc 01       	movw	r30, r24
    2232:	11 82       	std	Z+1, r1	; 0x01
    2234:	10 82       	st	Z, r1
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	9a 81       	ldd	r25, Y+2	; 0x02
    223a:	fc 01       	movw	r30, r24
    223c:	16 82       	std	Z+6, r1	; 0x06
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	00 e0       	ldi	r16, 0x00	; 0
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	a9 01       	movw	r20, r18
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	25 d0       	rcall	.+74     	; 0x229a <xQueueGenericSend>
    2250:	00 00       	nop
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	0f 91       	pop	r16
    225c:	08 95       	ret

0000225e <xQueueCreateMutex>:
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	00 d0       	rcall	.+0      	; 0x2264 <xQueueCreateMutex+0x6>
    2264:	1f 92       	push	r1
    2266:	1f 92       	push	r1
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	1a 82       	std	Y+2, r1	; 0x02
    2274:	4d 81       	ldd	r20, Y+5	; 0x05
    2276:	6a 81       	ldd	r22, Y+2	; 0x02
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	3f df       	rcall	.-386    	; 0x20fa <xQueueGenericCreate>
    227c:	9c 83       	std	Y+4, r25	; 0x04
    227e:	8b 83       	std	Y+3, r24	; 0x03
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	9c 81       	ldd	r25, Y+4	; 0x04
    2284:	c1 df       	rcall	.-126    	; 0x2208 <prvInitialiseMutex>
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	9c 81       	ldd	r25, Y+4	; 0x04
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	08 95       	ret

0000229a <xQueueGenericSend>:
    229a:	0f 93       	push	r16
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	62 97       	sbiw	r28, 0x12	; 18
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	9b 87       	std	Y+11, r25	; 0x0b
    22b2:	8a 87       	std	Y+10, r24	; 0x0a
    22b4:	7d 87       	std	Y+13, r23	; 0x0d
    22b6:	6c 87       	std	Y+12, r22	; 0x0c
    22b8:	2e 87       	std	Y+14, r18	; 0x0e
    22ba:	3f 87       	std	Y+15, r19	; 0x0f
    22bc:	48 8b       	std	Y+16, r20	; 0x10
    22be:	59 8b       	std	Y+17, r21	; 0x11
    22c0:	0a 8b       	std	Y+18, r16	; 0x12
    22c2:	19 82       	std	Y+1, r1	; 0x01
    22c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c8:	9b 83       	std	Y+3, r25	; 0x03
    22ca:	8a 83       	std	Y+2, r24	; 0x02
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	0f 92       	push	r0
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	9b 81       	ldd	r25, Y+3	; 0x03
    22d6:	fc 01       	movw	r30, r24
    22d8:	26 8d       	ldd	r18, Z+30	; 0x1e
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	9b 81       	ldd	r25, Y+3	; 0x03
    22de:	fc 01       	movw	r30, r24
    22e0:	87 8d       	ldd	r24, Z+31	; 0x1f
    22e2:	28 17       	cp	r18, r24
    22e4:	18 f0       	brcs	.+6      	; 0x22ec <xQueueGenericSend+0x52>
    22e6:	8a 89       	ldd	r24, Y+18	; 0x12
    22e8:	82 30       	cpi	r24, 0x02	; 2
    22ea:	f9 f4       	brne	.+62     	; 0x232a <xQueueGenericSend+0x90>
    22ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    22ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	9b 81       	ldd	r25, Y+3	; 0x03
    22f4:	4a 89       	ldd	r20, Y+18	; 0x12
    22f6:	b9 01       	movw	r22, r18
    22f8:	a6 d2       	rcall	.+1356   	; 0x2846 <prvCopyDataToQueue>
    22fa:	8c 83       	std	Y+4, r24	; 0x04
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2300:	fc 01       	movw	r30, r24
    2302:	83 89       	ldd	r24, Z+19	; 0x13
    2304:	88 23       	and	r24, r24
    2306:	49 f0       	breq	.+18     	; 0x231a <xQueueGenericSend+0x80>
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	9b 81       	ldd	r25, Y+3	; 0x03
    230c:	43 96       	adiw	r24, 0x13	; 19
    230e:	0e 94 fd 23 	call	0x47fa	; 0x47fa <xTaskRemoveFromEventList>
    2312:	88 23       	and	r24, r24
    2314:	31 f0       	breq	.+12     	; 0x2322 <xQueueGenericSend+0x88>
    2316:	73 dd       	rcall	.-1306   	; 0x1dfe <vPortYield>
    2318:	04 c0       	rjmp	.+8      	; 0x2322 <xQueueGenericSend+0x88>
    231a:	8c 81       	ldd	r24, Y+4	; 0x04
    231c:	88 23       	and	r24, r24
    231e:	09 f0       	breq	.+2      	; 0x2322 <xQueueGenericSend+0x88>
    2320:	6e dd       	rcall	.-1316   	; 0x1dfe <vPortYield>
    2322:	0f 90       	pop	r0
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	64 c0       	rjmp	.+200    	; 0x23f2 <xQueueGenericSend+0x158>
    232a:	8e 85       	ldd	r24, Y+14	; 0x0e
    232c:	9f 85       	ldd	r25, Y+15	; 0x0f
    232e:	a8 89       	ldd	r26, Y+16	; 0x10
    2330:	b9 89       	ldd	r27, Y+17	; 0x11
    2332:	89 2b       	or	r24, r25
    2334:	8a 2b       	or	r24, r26
    2336:	8b 2b       	or	r24, r27
    2338:	21 f4       	brne	.+8      	; 0x2342 <xQueueGenericSend+0xa8>
    233a:	0f 90       	pop	r0
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	58 c0       	rjmp	.+176    	; 0x23f2 <xQueueGenericSend+0x158>
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	88 23       	and	r24, r24
    2346:	31 f4       	brne	.+12     	; 0x2354 <xQueueGenericSend+0xba>
    2348:	ce 01       	movw	r24, r28
    234a:	05 96       	adiw	r24, 0x05	; 5
    234c:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <vTaskInternalSetTimeOutState>
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	0f 90       	pop	r0
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <vTaskSuspendAll>
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	0f 92       	push	r0
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	9b 81       	ldd	r25, Y+3	; 0x03
    2366:	fc 01       	movw	r30, r24
    2368:	81 a1       	ldd	r24, Z+33	; 0x21
    236a:	8f 3f       	cpi	r24, 0xFF	; 255
    236c:	21 f4       	brne	.+8      	; 0x2376 <xQueueGenericSend+0xdc>
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	9b 81       	ldd	r25, Y+3	; 0x03
    2372:	fc 01       	movw	r30, r24
    2374:	11 a2       	std	Z+33, r1	; 0x21
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	9b 81       	ldd	r25, Y+3	; 0x03
    237a:	fc 01       	movw	r30, r24
    237c:	82 a1       	ldd	r24, Z+34	; 0x22
    237e:	8f 3f       	cpi	r24, 0xFF	; 255
    2380:	21 f4       	brne	.+8      	; 0x238a <xQueueGenericSend+0xf0>
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	9b 81       	ldd	r25, Y+3	; 0x03
    2386:	fc 01       	movw	r30, r24
    2388:	12 a2       	std	Z+34, r1	; 0x22
    238a:	0f 90       	pop	r0
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	9e 01       	movw	r18, r28
    2390:	22 5f       	subi	r18, 0xF2	; 242
    2392:	3f 4f       	sbci	r19, 0xFF	; 255
    2394:	ce 01       	movw	r24, r28
    2396:	05 96       	adiw	r24, 0x05	; 5
    2398:	b9 01       	movw	r22, r18
    239a:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <xTaskCheckForTimeOut>
    239e:	88 23       	and	r24, r24
    23a0:	11 f5       	brne	.+68     	; 0x23e6 <xQueueGenericSend+0x14c>
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	9b 81       	ldd	r25, Y+3	; 0x03
    23a6:	eb d3       	rcall	.+2006   	; 0x2b7e <prvIsQueueFull>
    23a8:	88 23       	and	r24, r24
    23aa:	b9 f0       	breq	.+46     	; 0x23da <xQueueGenericSend+0x140>
    23ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    23ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    23b0:	a8 89       	ldd	r26, Y+16	; 0x10
    23b2:	b9 89       	ldd	r27, Y+17	; 0x11
    23b4:	2a 81       	ldd	r18, Y+2	; 0x02
    23b6:	3b 81       	ldd	r19, Y+3	; 0x03
    23b8:	28 5f       	subi	r18, 0xF8	; 248
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	ac 01       	movw	r20, r24
    23be:	bd 01       	movw	r22, r26
    23c0:	c9 01       	movw	r24, r18
    23c2:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <vTaskPlaceOnEventList>
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ca:	5e d3       	rcall	.+1724   	; 0x2a88 <prvUnlockQueue>
    23cc:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    23d0:	88 23       	and	r24, r24
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <xQueueGenericSend+0x13c>
    23d4:	7b cf       	rjmp	.-266    	; 0x22cc <xQueueGenericSend+0x32>
    23d6:	13 dd       	rcall	.-1498   	; 0x1dfe <vPortYield>
    23d8:	79 cf       	rjmp	.-270    	; 0x22cc <xQueueGenericSend+0x32>
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	9b 81       	ldd	r25, Y+3	; 0x03
    23de:	54 d3       	rcall	.+1704   	; 0x2a88 <prvUnlockQueue>
    23e0:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    23e4:	73 cf       	rjmp	.-282    	; 0x22cc <xQueueGenericSend+0x32>
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ea:	4e d3       	rcall	.+1692   	; 0x2a88 <prvUnlockQueue>
    23ec:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	62 96       	adiw	r28, 0x12	; 18
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	0f 91       	pop	r16
    2404:	08 95       	ret

00002406 <xQueueGenericSendFromISR>:
    2406:	cf 93       	push	r28
    2408:	df 93       	push	r29
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	2d 97       	sbiw	r28, 0x0d	; 13
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	98 87       	std	Y+8, r25	; 0x08
    241c:	8f 83       	std	Y+7, r24	; 0x07
    241e:	7a 87       	std	Y+10, r23	; 0x0a
    2420:	69 87       	std	Y+9, r22	; 0x09
    2422:	5c 87       	std	Y+12, r21	; 0x0c
    2424:	4b 87       	std	Y+11, r20	; 0x0b
    2426:	2d 87       	std	Y+13, r18	; 0x0d
    2428:	8f 81       	ldd	r24, Y+7	; 0x07
    242a:	98 85       	ldd	r25, Y+8	; 0x08
    242c:	9b 83       	std	Y+3, r25	; 0x03
    242e:	8a 83       	std	Y+2, r24	; 0x02
    2430:	1c 82       	std	Y+4, r1	; 0x04
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	9b 81       	ldd	r25, Y+3	; 0x03
    2436:	fc 01       	movw	r30, r24
    2438:	26 8d       	ldd	r18, Z+30	; 0x1e
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	fc 01       	movw	r30, r24
    2440:	87 8d       	ldd	r24, Z+31	; 0x1f
    2442:	28 17       	cp	r18, r24
    2444:	18 f0       	brcs	.+6      	; 0x244c <xQueueGenericSendFromISR+0x46>
    2446:	8d 85       	ldd	r24, Y+13	; 0x0d
    2448:	82 30       	cpi	r24, 0x02	; 2
    244a:	a9 f5       	brne	.+106    	; 0x24b6 <xQueueGenericSendFromISR+0xb0>
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	9b 81       	ldd	r25, Y+3	; 0x03
    2450:	fc 01       	movw	r30, r24
    2452:	82 a1       	ldd	r24, Z+34	; 0x22
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	9b 81       	ldd	r25, Y+3	; 0x03
    245a:	fc 01       	movw	r30, r24
    245c:	86 8d       	ldd	r24, Z+30	; 0x1e
    245e:	8e 83       	std	Y+6, r24	; 0x06
    2460:	29 85       	ldd	r18, Y+9	; 0x09
    2462:	3a 85       	ldd	r19, Y+10	; 0x0a
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	4d 85       	ldd	r20, Y+13	; 0x0d
    246a:	b9 01       	movw	r22, r18
    246c:	ec d1       	rcall	.+984    	; 0x2846 <prvCopyDataToQueue>
    246e:	8d 81       	ldd	r24, Y+5	; 0x05
    2470:	8f 3f       	cpi	r24, 0xFF	; 255
    2472:	b9 f4       	brne	.+46     	; 0x24a2 <xQueueGenericSendFromISR+0x9c>
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	9b 81       	ldd	r25, Y+3	; 0x03
    2478:	fc 01       	movw	r30, r24
    247a:	83 89       	ldd	r24, Z+19	; 0x13
    247c:	88 23       	and	r24, r24
    247e:	c1 f0       	breq	.+48     	; 0x24b0 <xQueueGenericSendFromISR+0xaa>
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	9b 81       	ldd	r25, Y+3	; 0x03
    2484:	43 96       	adiw	r24, 0x13	; 19
    2486:	0e 94 fd 23 	call	0x47fa	; 0x47fa <xTaskRemoveFromEventList>
    248a:	88 23       	and	r24, r24
    248c:	89 f0       	breq	.+34     	; 0x24b0 <xQueueGenericSendFromISR+0xaa>
    248e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2490:	9c 85       	ldd	r25, Y+12	; 0x0c
    2492:	89 2b       	or	r24, r25
    2494:	69 f0       	breq	.+26     	; 0x24b0 <xQueueGenericSendFromISR+0xaa>
    2496:	8b 85       	ldd	r24, Y+11	; 0x0b
    2498:	9c 85       	ldd	r25, Y+12	; 0x0c
    249a:	21 e0       	ldi	r18, 0x01	; 1
    249c:	fc 01       	movw	r30, r24
    249e:	20 83       	st	Z, r18
    24a0:	07 c0       	rjmp	.+14     	; 0x24b0 <xQueueGenericSendFromISR+0xaa>
    24a2:	8d 81       	ldd	r24, Y+5	; 0x05
    24a4:	8f 5f       	subi	r24, 0xFF	; 255
    24a6:	28 2f       	mov	r18, r24
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	9b 81       	ldd	r25, Y+3	; 0x03
    24ac:	fc 01       	movw	r30, r24
    24ae:	22 a3       	std	Z+34, r18	; 0x22
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	01 c0       	rjmp	.+2      	; 0x24b8 <xQueueGenericSendFromISR+0xb2>
    24b6:	19 82       	std	Y+1, r1	; 0x01
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	2d 96       	adiw	r28, 0x0d	; 13
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	08 95       	ret

000024cc <xQueueReceive>:
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	61 97       	sbiw	r28, 0x11	; 17
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	9b 87       	std	Y+11, r25	; 0x0b
    24e2:	8a 87       	std	Y+10, r24	; 0x0a
    24e4:	7d 87       	std	Y+13, r23	; 0x0d
    24e6:	6c 87       	std	Y+12, r22	; 0x0c
    24e8:	2e 87       	std	Y+14, r18	; 0x0e
    24ea:	3f 87       	std	Y+15, r19	; 0x0f
    24ec:	48 8b       	std	Y+16, r20	; 0x10
    24ee:	59 8b       	std	Y+17, r21	; 0x11
    24f0:	19 82       	std	Y+1, r1	; 0x01
    24f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    24f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    24f6:	9b 83       	std	Y+3, r25	; 0x03
    24f8:	8a 83       	std	Y+2, r24	; 0x02
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	0f 92       	push	r0
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	9b 81       	ldd	r25, Y+3	; 0x03
    2504:	fc 01       	movw	r30, r24
    2506:	86 8d       	ldd	r24, Z+30	; 0x1e
    2508:	8c 83       	std	Y+4, r24	; 0x04
    250a:	8c 81       	ldd	r24, Y+4	; 0x04
    250c:	88 23       	and	r24, r24
    250e:	f9 f0       	breq	.+62     	; 0x254e <xQueueReceive+0x82>
    2510:	2c 85       	ldd	r18, Y+12	; 0x0c
    2512:	3d 85       	ldd	r19, Y+13	; 0x0d
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	9b 81       	ldd	r25, Y+3	; 0x03
    2518:	b9 01       	movw	r22, r18
    251a:	65 d2       	rcall	.+1226   	; 0x29e6 <prvCopyDataFromQueue>
    251c:	8c 81       	ldd	r24, Y+4	; 0x04
    251e:	2f ef       	ldi	r18, 0xFF	; 255
    2520:	28 0f       	add	r18, r24
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	9b 81       	ldd	r25, Y+3	; 0x03
    2526:	fc 01       	movw	r30, r24
    2528:	26 8f       	std	Z+30, r18	; 0x1e
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	9b 81       	ldd	r25, Y+3	; 0x03
    252e:	fc 01       	movw	r30, r24
    2530:	80 85       	ldd	r24, Z+8	; 0x08
    2532:	88 23       	and	r24, r24
    2534:	41 f0       	breq	.+16     	; 0x2546 <xQueueReceive+0x7a>
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	9b 81       	ldd	r25, Y+3	; 0x03
    253a:	08 96       	adiw	r24, 0x08	; 8
    253c:	0e 94 fd 23 	call	0x47fa	; 0x47fa <xTaskRemoveFromEventList>
    2540:	88 23       	and	r24, r24
    2542:	09 f0       	breq	.+2      	; 0x2546 <xQueueReceive+0x7a>
    2544:	5c dc       	rcall	.-1864   	; 0x1dfe <vPortYield>
    2546:	0f 90       	pop	r0
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	6a c0       	rjmp	.+212    	; 0x2622 <xQueueReceive+0x156>
    254e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2550:	9f 85       	ldd	r25, Y+15	; 0x0f
    2552:	a8 89       	ldd	r26, Y+16	; 0x10
    2554:	b9 89       	ldd	r27, Y+17	; 0x11
    2556:	89 2b       	or	r24, r25
    2558:	8a 2b       	or	r24, r26
    255a:	8b 2b       	or	r24, r27
    255c:	21 f4       	brne	.+8      	; 0x2566 <xQueueReceive+0x9a>
    255e:	0f 90       	pop	r0
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	5e c0       	rjmp	.+188    	; 0x2622 <xQueueReceive+0x156>
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	88 23       	and	r24, r24
    256a:	31 f4       	brne	.+12     	; 0x2578 <xQueueReceive+0xac>
    256c:	ce 01       	movw	r24, r28
    256e:	05 96       	adiw	r24, 0x05	; 5
    2570:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <vTaskInternalSetTimeOutState>
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	0f 90       	pop	r0
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <vTaskSuspendAll>
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	0f 92       	push	r0
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	9b 81       	ldd	r25, Y+3	; 0x03
    258a:	fc 01       	movw	r30, r24
    258c:	81 a1       	ldd	r24, Z+33	; 0x21
    258e:	8f 3f       	cpi	r24, 0xFF	; 255
    2590:	21 f4       	brne	.+8      	; 0x259a <xQueueReceive+0xce>
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	9b 81       	ldd	r25, Y+3	; 0x03
    2596:	fc 01       	movw	r30, r24
    2598:	11 a2       	std	Z+33, r1	; 0x21
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	9b 81       	ldd	r25, Y+3	; 0x03
    259e:	fc 01       	movw	r30, r24
    25a0:	82 a1       	ldd	r24, Z+34	; 0x22
    25a2:	8f 3f       	cpi	r24, 0xFF	; 255
    25a4:	21 f4       	brne	.+8      	; 0x25ae <xQueueReceive+0xe2>
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	fc 01       	movw	r30, r24
    25ac:	12 a2       	std	Z+34, r1	; 0x22
    25ae:	0f 90       	pop	r0
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	9e 01       	movw	r18, r28
    25b4:	22 5f       	subi	r18, 0xF2	; 242
    25b6:	3f 4f       	sbci	r19, 0xFF	; 255
    25b8:	ce 01       	movw	r24, r28
    25ba:	05 96       	adiw	r24, 0x05	; 5
    25bc:	b9 01       	movw	r22, r18
    25be:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <xTaskCheckForTimeOut>
    25c2:	88 23       	and	r24, r24
    25c4:	11 f5       	brne	.+68     	; 0x260a <xQueueReceive+0x13e>
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	bc d2       	rcall	.+1400   	; 0x2b44 <prvIsQueueEmpty>
    25cc:	88 23       	and	r24, r24
    25ce:	b9 f0       	breq	.+46     	; 0x25fe <xQueueReceive+0x132>
    25d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    25d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    25d4:	a8 89       	ldd	r26, Y+16	; 0x10
    25d6:	b9 89       	ldd	r27, Y+17	; 0x11
    25d8:	2a 81       	ldd	r18, Y+2	; 0x02
    25da:	3b 81       	ldd	r19, Y+3	; 0x03
    25dc:	2d 5e       	subi	r18, 0xED	; 237
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	ac 01       	movw	r20, r24
    25e2:	bd 01       	movw	r22, r26
    25e4:	c9 01       	movw	r24, r18
    25e6:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <vTaskPlaceOnEventList>
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	4c d2       	rcall	.+1176   	; 0x2a88 <prvUnlockQueue>
    25f0:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    25f4:	88 23       	and	r24, r24
    25f6:	09 f0       	breq	.+2      	; 0x25fa <xQueueReceive+0x12e>
    25f8:	80 cf       	rjmp	.-256    	; 0x24fa <xQueueReceive+0x2e>
    25fa:	01 dc       	rcall	.-2046   	; 0x1dfe <vPortYield>
    25fc:	7e cf       	rjmp	.-260    	; 0x24fa <xQueueReceive+0x2e>
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	9b 81       	ldd	r25, Y+3	; 0x03
    2602:	42 d2       	rcall	.+1156   	; 0x2a88 <prvUnlockQueue>
    2604:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    2608:	78 cf       	rjmp	.-272    	; 0x24fa <xQueueReceive+0x2e>
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	9b 81       	ldd	r25, Y+3	; 0x03
    260e:	3c d2       	rcall	.+1144   	; 0x2a88 <prvUnlockQueue>
    2610:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	95 d2       	rcall	.+1322   	; 0x2b44 <prvIsQueueEmpty>
    261a:	88 23       	and	r24, r24
    261c:	09 f4       	brne	.+2      	; 0x2620 <xQueueReceive+0x154>
    261e:	6d cf       	rjmp	.-294    	; 0x24fa <xQueueReceive+0x2e>
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	61 96       	adiw	r28, 0x11	; 17
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	08 95       	ret

00002634 <xQueueSemaphoreTake>:
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	61 97       	sbiw	r28, 0x11	; 17
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	9d 87       	std	Y+13, r25	; 0x0d
    264a:	8c 87       	std	Y+12, r24	; 0x0c
    264c:	4e 87       	std	Y+14, r20	; 0x0e
    264e:	5f 87       	std	Y+15, r21	; 0x0f
    2650:	68 8b       	std	Y+16, r22	; 0x10
    2652:	79 8b       	std	Y+17, r23	; 0x11
    2654:	19 82       	std	Y+1, r1	; 0x01
    2656:	8c 85       	ldd	r24, Y+12	; 0x0c
    2658:	9d 85       	ldd	r25, Y+13	; 0x0d
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	8b 83       	std	Y+3, r24	; 0x03
    265e:	1a 82       	std	Y+2, r1	; 0x02
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	0f 92       	push	r0
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	fc 01       	movw	r30, r24
    266c:	86 8d       	ldd	r24, Z+30	; 0x1e
    266e:	8d 83       	std	Y+5, r24	; 0x05
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	88 23       	and	r24, r24
    2674:	41 f1       	breq	.+80     	; 0x26c6 <xQueueSemaphoreTake+0x92>
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	2f ef       	ldi	r18, 0xFF	; 255
    267a:	28 0f       	add	r18, r24
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	fc 01       	movw	r30, r24
    2682:	26 8f       	std	Z+30, r18	; 0x1e
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	9c 81       	ldd	r25, Y+4	; 0x04
    2688:	fc 01       	movw	r30, r24
    268a:	80 81       	ld	r24, Z
    268c:	91 81       	ldd	r25, Z+1	; 0x01
    268e:	89 2b       	or	r24, r25
    2690:	41 f4       	brne	.+16     	; 0x26a2 <xQueueSemaphoreTake+0x6e>
    2692:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <pvTaskIncrementMutexHeldCount>
    2696:	9c 01       	movw	r18, r24
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	9c 81       	ldd	r25, Y+4	; 0x04
    269c:	fc 01       	movw	r30, r24
    269e:	35 83       	std	Z+5, r19	; 0x05
    26a0:	24 83       	std	Z+4, r18	; 0x04
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	fc 01       	movw	r30, r24
    26a8:	80 85       	ldd	r24, Z+8	; 0x08
    26aa:	88 23       	and	r24, r24
    26ac:	41 f0       	breq	.+16     	; 0x26be <xQueueSemaphoreTake+0x8a>
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	9c 81       	ldd	r25, Y+4	; 0x04
    26b2:	08 96       	adiw	r24, 0x08	; 8
    26b4:	0e 94 fd 23 	call	0x47fa	; 0x47fa <xTaskRemoveFromEventList>
    26b8:	88 23       	and	r24, r24
    26ba:	09 f0       	breq	.+2      	; 0x26be <xQueueSemaphoreTake+0x8a>
    26bc:	a0 db       	rcall	.-2240   	; 0x1dfe <vPortYield>
    26be:	0f 90       	pop	r0
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	93 c0       	rjmp	.+294    	; 0x27ec <xQueueSemaphoreTake+0x1b8>
    26c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26ca:	a8 89       	ldd	r26, Y+16	; 0x10
    26cc:	b9 89       	ldd	r27, Y+17	; 0x11
    26ce:	89 2b       	or	r24, r25
    26d0:	8a 2b       	or	r24, r26
    26d2:	8b 2b       	or	r24, r27
    26d4:	21 f4       	brne	.+8      	; 0x26de <xQueueSemaphoreTake+0xaa>
    26d6:	0f 90       	pop	r0
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	87 c0       	rjmp	.+270    	; 0x27ec <xQueueSemaphoreTake+0x1b8>
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	88 23       	and	r24, r24
    26e2:	31 f4       	brne	.+12     	; 0x26f0 <xQueueSemaphoreTake+0xbc>
    26e4:	ce 01       	movw	r24, r28
    26e6:	07 96       	adiw	r24, 0x07	; 7
    26e8:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <vTaskInternalSetTimeOutState>
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <vTaskSuspendAll>
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	0f 92       	push	r0
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	9c 81       	ldd	r25, Y+4	; 0x04
    2702:	fc 01       	movw	r30, r24
    2704:	81 a1       	ldd	r24, Z+33	; 0x21
    2706:	8f 3f       	cpi	r24, 0xFF	; 255
    2708:	21 f4       	brne	.+8      	; 0x2712 <xQueueSemaphoreTake+0xde>
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	fc 01       	movw	r30, r24
    2710:	11 a2       	std	Z+33, r1	; 0x21
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	9c 81       	ldd	r25, Y+4	; 0x04
    2716:	fc 01       	movw	r30, r24
    2718:	82 a1       	ldd	r24, Z+34	; 0x22
    271a:	8f 3f       	cpi	r24, 0xFF	; 255
    271c:	21 f4       	brne	.+8      	; 0x2726 <xQueueSemaphoreTake+0xf2>
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	9c 81       	ldd	r25, Y+4	; 0x04
    2722:	fc 01       	movw	r30, r24
    2724:	12 a2       	std	Z+34, r1	; 0x22
    2726:	0f 90       	pop	r0
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	9e 01       	movw	r18, r28
    272c:	22 5f       	subi	r18, 0xF2	; 242
    272e:	3f 4f       	sbci	r19, 0xFF	; 255
    2730:	ce 01       	movw	r24, r28
    2732:	07 96       	adiw	r24, 0x07	; 7
    2734:	b9 01       	movw	r22, r18
    2736:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <xTaskCheckForTimeOut>
    273a:	88 23       	and	r24, r24
    273c:	09 f0       	breq	.+2      	; 0x2740 <xQueueSemaphoreTake+0x10c>
    273e:	36 c0       	rjmp	.+108    	; 0x27ac <xQueueSemaphoreTake+0x178>
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	9c 81       	ldd	r25, Y+4	; 0x04
    2744:	ff d1       	rcall	.+1022   	; 0x2b44 <prvIsQueueEmpty>
    2746:	88 23       	and	r24, r24
    2748:	59 f1       	breq	.+86     	; 0x27a0 <xQueueSemaphoreTake+0x16c>
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	fc 01       	movw	r30, r24
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	89 2b       	or	r24, r25
    2756:	69 f4       	brne	.+26     	; 0x2772 <xQueueSemaphoreTake+0x13e>
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	0f 92       	push	r0
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	fc 01       	movw	r30, r24
    2764:	84 81       	ldd	r24, Z+4	; 0x04
    2766:	95 81       	ldd	r25, Z+5	; 0x05
    2768:	0e 94 9b 28 	call	0x5136	; 0x5136 <xTaskPriorityInherit>
    276c:	8a 83       	std	Y+2, r24	; 0x02
    276e:	0f 90       	pop	r0
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	8e 85       	ldd	r24, Y+14	; 0x0e
    2774:	9f 85       	ldd	r25, Y+15	; 0x0f
    2776:	a8 89       	ldd	r26, Y+16	; 0x10
    2778:	b9 89       	ldd	r27, Y+17	; 0x11
    277a:	2b 81       	ldd	r18, Y+3	; 0x03
    277c:	3c 81       	ldd	r19, Y+4	; 0x04
    277e:	2d 5e       	subi	r18, 0xED	; 237
    2780:	3f 4f       	sbci	r19, 0xFF	; 255
    2782:	ac 01       	movw	r20, r24
    2784:	bd 01       	movw	r22, r26
    2786:	c9 01       	movw	r24, r18
    2788:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <vTaskPlaceOnEventList>
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	9c 81       	ldd	r25, Y+4	; 0x04
    2790:	7b d1       	rcall	.+758    	; 0x2a88 <prvUnlockQueue>
    2792:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    2796:	88 23       	and	r24, r24
    2798:	09 f0       	breq	.+2      	; 0x279c <xQueueSemaphoreTake+0x168>
    279a:	62 cf       	rjmp	.-316    	; 0x2660 <xQueueSemaphoreTake+0x2c>
    279c:	30 db       	rcall	.-2464   	; 0x1dfe <vPortYield>
    279e:	60 cf       	rjmp	.-320    	; 0x2660 <xQueueSemaphoreTake+0x2c>
    27a0:	8b 81       	ldd	r24, Y+3	; 0x03
    27a2:	9c 81       	ldd	r25, Y+4	; 0x04
    27a4:	71 d1       	rcall	.+738    	; 0x2a88 <prvUnlockQueue>
    27a6:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    27aa:	5a cf       	rjmp	.-332    	; 0x2660 <xQueueSemaphoreTake+0x2c>
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	6b d1       	rcall	.+726    	; 0x2a88 <prvUnlockQueue>
    27b2:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	c4 d1       	rcall	.+904    	; 0x2b44 <prvIsQueueEmpty>
    27bc:	88 23       	and	r24, r24
    27be:	09 f4       	brne	.+2      	; 0x27c2 <xQueueSemaphoreTake+0x18e>
    27c0:	4f cf       	rjmp	.-354    	; 0x2660 <xQueueSemaphoreTake+0x2c>
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	88 23       	and	r24, r24
    27c6:	89 f0       	breq	.+34     	; 0x27ea <xQueueSemaphoreTake+0x1b6>
    27c8:	0f b6       	in	r0, 0x3f	; 63
    27ca:	f8 94       	cli
    27cc:	0f 92       	push	r0
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	9c 81       	ldd	r25, Y+4	; 0x04
    27d2:	15 d0       	rcall	.+42     	; 0x27fe <prvGetDisinheritPriorityAfterTimeout>
    27d4:	8e 83       	std	Y+6, r24	; 0x06
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	fc 01       	movw	r30, r24
    27dc:	84 81       	ldd	r24, Z+4	; 0x04
    27de:	95 81       	ldd	r25, Z+5	; 0x05
    27e0:	6e 81       	ldd	r22, Y+6	; 0x06
    27e2:	0e 94 98 2a 	call	0x5530	; 0x5530 <vTaskPriorityDisinheritAfterTimeout>
    27e6:	0f 90       	pop	r0
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	61 96       	adiw	r28, 0x11	; 17
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	08 95       	ret

000027fe <prvGetDisinheritPriorityAfterTimeout>:
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	00 d0       	rcall	.+0      	; 0x2804 <prvGetDisinheritPriorityAfterTimeout+0x6>
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	9b 83       	std	Y+3, r25	; 0x03
    280a:	8a 83       	std	Y+2, r24	; 0x02
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	9b 81       	ldd	r25, Y+3	; 0x03
    2810:	fc 01       	movw	r30, r24
    2812:	83 89       	ldd	r24, Z+19	; 0x13
    2814:	88 23       	and	r24, r24
    2816:	79 f0       	breq	.+30     	; 0x2836 <prvGetDisinheritPriorityAfterTimeout+0x38>
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	9b 81       	ldd	r25, Y+3	; 0x03
    281c:	fc 01       	movw	r30, r24
    281e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2820:	93 8d       	ldd	r25, Z+27	; 0x1b
    2822:	fc 01       	movw	r30, r24
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	a2 81       	ldd	r26, Z+2	; 0x02
    282a:	b3 81       	ldd	r27, Z+3	; 0x03
    282c:	98 2f       	mov	r25, r24
    282e:	8a e0       	ldi	r24, 0x0A	; 10
    2830:	89 1b       	sub	r24, r25
    2832:	89 83       	std	Y+1, r24	; 0x01
    2834:	01 c0       	rjmp	.+2      	; 0x2838 <prvGetDisinheritPriorityAfterTimeout+0x3a>
    2836:	19 82       	std	Y+1, r1	; 0x01
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	08 95       	ret

00002846 <prvCopyDataToQueue>:
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	27 97       	sbiw	r28, 0x07	; 7
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	9c 83       	std	Y+4, r25	; 0x04
    285c:	8b 83       	std	Y+3, r24	; 0x03
    285e:	7e 83       	std	Y+6, r23	; 0x06
    2860:	6d 83       	std	Y+5, r22	; 0x05
    2862:	4f 83       	std	Y+7, r20	; 0x07
    2864:	19 82       	std	Y+1, r1	; 0x01
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	fc 01       	movw	r30, r24
    286c:	86 8d       	ldd	r24, Z+30	; 0x1e
    286e:	8a 83       	std	Y+2, r24	; 0x02
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	9c 81       	ldd	r25, Y+4	; 0x04
    2874:	fc 01       	movw	r30, r24
    2876:	80 a1       	ldd	r24, Z+32	; 0x20
    2878:	88 23       	and	r24, r24
    287a:	b1 f4       	brne	.+44     	; 0x28a8 <prvCopyDataToQueue+0x62>
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	fc 01       	movw	r30, r24
    2882:	80 81       	ld	r24, Z
    2884:	91 81       	ldd	r25, Z+1	; 0x01
    2886:	89 2b       	or	r24, r25
    2888:	09 f0       	breq	.+2      	; 0x288c <prvCopyDataToQueue+0x46>
    288a:	9c c0       	rjmp	.+312    	; 0x29c4 <prvCopyDataToQueue+0x17e>
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	9c 81       	ldd	r25, Y+4	; 0x04
    2890:	fc 01       	movw	r30, r24
    2892:	84 81       	ldd	r24, Z+4	; 0x04
    2894:	95 81       	ldd	r25, Z+5	; 0x05
    2896:	0e 94 b1 29 	call	0x5362	; 0x5362 <xTaskPriorityDisinherit>
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	9c 81       	ldd	r25, Y+4	; 0x04
    28a0:	fc 01       	movw	r30, r24
    28a2:	15 82       	std	Z+5, r1	; 0x05
    28a4:	14 82       	std	Z+4, r1	; 0x04
    28a6:	8e c0       	rjmp	.+284    	; 0x29c4 <prvCopyDataToQueue+0x17e>
    28a8:	8f 81       	ldd	r24, Y+7	; 0x07
    28aa:	88 23       	and	r24, r24
    28ac:	d9 f5       	brne	.+118    	; 0x2924 <prvCopyDataToQueue+0xde>
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	fc 01       	movw	r30, r24
    28b4:	80 a1       	ldd	r24, Z+32	; 0x20
    28b6:	48 2f       	mov	r20, r24
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	9c 81       	ldd	r25, Y+4	; 0x04
    28be:	fc 01       	movw	r30, r24
    28c0:	82 81       	ldd	r24, Z+2	; 0x02
    28c2:	93 81       	ldd	r25, Z+3	; 0x03
    28c4:	2d 81       	ldd	r18, Y+5	; 0x05
    28c6:	3e 81       	ldd	r19, Y+6	; 0x06
    28c8:	b9 01       	movw	r22, r18
    28ca:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <memcpy>
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	9c 81       	ldd	r25, Y+4	; 0x04
    28d2:	fc 01       	movw	r30, r24
    28d4:	22 81       	ldd	r18, Z+2	; 0x02
    28d6:	33 81       	ldd	r19, Z+3	; 0x03
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	9c 81       	ldd	r25, Y+4	; 0x04
    28dc:	fc 01       	movw	r30, r24
    28de:	80 a1       	ldd	r24, Z+32	; 0x20
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	28 0f       	add	r18, r24
    28e6:	39 1f       	adc	r19, r25
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	fc 01       	movw	r30, r24
    28ee:	33 83       	std	Z+3, r19	; 0x03
    28f0:	22 83       	std	Z+2, r18	; 0x02
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
    28f6:	fc 01       	movw	r30, r24
    28f8:	22 81       	ldd	r18, Z+2	; 0x02
    28fa:	33 81       	ldd	r19, Z+3	; 0x03
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	fc 01       	movw	r30, r24
    2902:	84 81       	ldd	r24, Z+4	; 0x04
    2904:	95 81       	ldd	r25, Z+5	; 0x05
    2906:	28 17       	cp	r18, r24
    2908:	39 07       	cpc	r19, r25
    290a:	08 f4       	brcc	.+2      	; 0x290e <prvCopyDataToQueue+0xc8>
    290c:	5b c0       	rjmp	.+182    	; 0x29c4 <prvCopyDataToQueue+0x17e>
    290e:	8b 81       	ldd	r24, Y+3	; 0x03
    2910:	9c 81       	ldd	r25, Y+4	; 0x04
    2912:	fc 01       	movw	r30, r24
    2914:	20 81       	ld	r18, Z
    2916:	31 81       	ldd	r19, Z+1	; 0x01
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	fc 01       	movw	r30, r24
    291e:	33 83       	std	Z+3, r19	; 0x03
    2920:	22 83       	std	Z+2, r18	; 0x02
    2922:	50 c0       	rjmp	.+160    	; 0x29c4 <prvCopyDataToQueue+0x17e>
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	fc 01       	movw	r30, r24
    292a:	80 a1       	ldd	r24, Z+32	; 0x20
    292c:	48 2f       	mov	r20, r24
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	8b 81       	ldd	r24, Y+3	; 0x03
    2932:	9c 81       	ldd	r25, Y+4	; 0x04
    2934:	fc 01       	movw	r30, r24
    2936:	86 81       	ldd	r24, Z+6	; 0x06
    2938:	97 81       	ldd	r25, Z+7	; 0x07
    293a:	2d 81       	ldd	r18, Y+5	; 0x05
    293c:	3e 81       	ldd	r19, Y+6	; 0x06
    293e:	b9 01       	movw	r22, r18
    2940:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <memcpy>
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	9c 81       	ldd	r25, Y+4	; 0x04
    2948:	fc 01       	movw	r30, r24
    294a:	26 81       	ldd	r18, Z+6	; 0x06
    294c:	37 81       	ldd	r19, Z+7	; 0x07
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	9c 81       	ldd	r25, Y+4	; 0x04
    2952:	fc 01       	movw	r30, r24
    2954:	80 a1       	ldd	r24, Z+32	; 0x20
    2956:	88 2f       	mov	r24, r24
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	91 95       	neg	r25
    295c:	81 95       	neg	r24
    295e:	91 09       	sbc	r25, r1
    2960:	28 0f       	add	r18, r24
    2962:	39 1f       	adc	r19, r25
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	9c 81       	ldd	r25, Y+4	; 0x04
    2968:	fc 01       	movw	r30, r24
    296a:	37 83       	std	Z+7, r19	; 0x07
    296c:	26 83       	std	Z+6, r18	; 0x06
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	fc 01       	movw	r30, r24
    2974:	26 81       	ldd	r18, Z+6	; 0x06
    2976:	37 81       	ldd	r19, Z+7	; 0x07
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	fc 01       	movw	r30, r24
    297e:	80 81       	ld	r24, Z
    2980:	91 81       	ldd	r25, Z+1	; 0x01
    2982:	28 17       	cp	r18, r24
    2984:	39 07       	cpc	r19, r25
    2986:	a8 f4       	brcc	.+42     	; 0x29b2 <prvCopyDataToQueue+0x16c>
    2988:	8b 81       	ldd	r24, Y+3	; 0x03
    298a:	9c 81       	ldd	r25, Y+4	; 0x04
    298c:	fc 01       	movw	r30, r24
    298e:	24 81       	ldd	r18, Z+4	; 0x04
    2990:	35 81       	ldd	r19, Z+5	; 0x05
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	fc 01       	movw	r30, r24
    2998:	80 a1       	ldd	r24, Z+32	; 0x20
    299a:	88 2f       	mov	r24, r24
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	91 95       	neg	r25
    29a0:	81 95       	neg	r24
    29a2:	91 09       	sbc	r25, r1
    29a4:	28 0f       	add	r18, r24
    29a6:	39 1f       	adc	r19, r25
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	fc 01       	movw	r30, r24
    29ae:	37 83       	std	Z+7, r19	; 0x07
    29b0:	26 83       	std	Z+6, r18	; 0x06
    29b2:	8f 81       	ldd	r24, Y+7	; 0x07
    29b4:	82 30       	cpi	r24, 0x02	; 2
    29b6:	31 f4       	brne	.+12     	; 0x29c4 <prvCopyDataToQueue+0x17e>
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	88 23       	and	r24, r24
    29bc:	19 f0       	breq	.+6      	; 0x29c4 <prvCopyDataToQueue+0x17e>
    29be:	8a 81       	ldd	r24, Y+2	; 0x02
    29c0:	81 50       	subi	r24, 0x01	; 1
    29c2:	8a 83       	std	Y+2, r24	; 0x02
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	21 e0       	ldi	r18, 0x01	; 1
    29c8:	28 0f       	add	r18, r24
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	9c 81       	ldd	r25, Y+4	; 0x04
    29ce:	fc 01       	movw	r30, r24
    29d0:	26 8f       	std	Z+30, r18	; 0x1e
    29d2:	89 81       	ldd	r24, Y+1	; 0x01
    29d4:	27 96       	adiw	r28, 0x07	; 7
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	f8 94       	cli
    29da:	de bf       	out	0x3e, r29	; 62
    29dc:	0f be       	out	0x3f, r0	; 63
    29de:	cd bf       	out	0x3d, r28	; 61
    29e0:	df 91       	pop	r29
    29e2:	cf 91       	pop	r28
    29e4:	08 95       	ret

000029e6 <prvCopyDataFromQueue>:
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <prvCopyDataFromQueue+0x6>
    29ec:	1f 92       	push	r1
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	7c 83       	std	Y+4, r23	; 0x04
    29f8:	6b 83       	std	Y+3, r22	; 0x03
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	fc 01       	movw	r30, r24
    2a00:	80 a1       	ldd	r24, Z+32	; 0x20
    2a02:	88 23       	and	r24, r24
    2a04:	c9 f1       	breq	.+114    	; 0x2a78 <prvCopyDataFromQueue+0x92>
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	26 81       	ldd	r18, Z+6	; 0x06
    2a0e:	37 81       	ldd	r19, Z+7	; 0x07
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	fc 01       	movw	r30, r24
    2a16:	80 a1       	ldd	r24, Z+32	; 0x20
    2a18:	88 2f       	mov	r24, r24
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	28 0f       	add	r18, r24
    2a1e:	39 1f       	adc	r19, r25
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	fc 01       	movw	r30, r24
    2a26:	37 83       	std	Z+7, r19	; 0x07
    2a28:	26 83       	std	Z+6, r18	; 0x06
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2e:	fc 01       	movw	r30, r24
    2a30:	26 81       	ldd	r18, Z+6	; 0x06
    2a32:	37 81       	ldd	r19, Z+7	; 0x07
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	9a 81       	ldd	r25, Y+2	; 0x02
    2a38:	fc 01       	movw	r30, r24
    2a3a:	84 81       	ldd	r24, Z+4	; 0x04
    2a3c:	95 81       	ldd	r25, Z+5	; 0x05
    2a3e:	28 17       	cp	r18, r24
    2a40:	39 07       	cpc	r19, r25
    2a42:	50 f0       	brcs	.+20     	; 0x2a58 <prvCopyDataFromQueue+0x72>
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	fc 01       	movw	r30, r24
    2a4a:	20 81       	ld	r18, Z
    2a4c:	31 81       	ldd	r19, Z+1	; 0x01
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	9a 81       	ldd	r25, Y+2	; 0x02
    2a52:	fc 01       	movw	r30, r24
    2a54:	37 83       	std	Z+7, r19	; 0x07
    2a56:	26 83       	std	Z+6, r18	; 0x06
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	80 a1       	ldd	r24, Z+32	; 0x20
    2a60:	48 2f       	mov	r20, r24
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	9a 81       	ldd	r25, Y+2	; 0x02
    2a68:	fc 01       	movw	r30, r24
    2a6a:	26 81       	ldd	r18, Z+6	; 0x06
    2a6c:	37 81       	ldd	r19, Z+7	; 0x07
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	9c 81       	ldd	r25, Y+4	; 0x04
    2a72:	b9 01       	movw	r22, r18
    2a74:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <memcpy>
    2a78:	00 00       	nop
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	08 95       	ret

00002a88 <prvUnlockQueue>:
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <prvUnlockQueue+0x6>
    2a8e:	1f 92       	push	r1
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	9c 83       	std	Y+4, r25	; 0x04
    2a96:	8b 83       	std	Y+3, r24	; 0x03
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	0f 92       	push	r0
    2a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa2:	fc 01       	movw	r30, r24
    2aa4:	82 a1       	ldd	r24, Z+34	; 0x22
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	12 c0       	rjmp	.+36     	; 0x2ace <prvUnlockQueue+0x46>
    2aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2aac:	9c 81       	ldd	r25, Y+4	; 0x04
    2aae:	fc 01       	movw	r30, r24
    2ab0:	83 89       	ldd	r24, Z+19	; 0x13
    2ab2:	88 23       	and	r24, r24
    2ab4:	81 f0       	breq	.+32     	; 0x2ad6 <prvUnlockQueue+0x4e>
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aba:	43 96       	adiw	r24, 0x13	; 19
    2abc:	0e 94 fd 23 	call	0x47fa	; 0x47fa <xTaskRemoveFromEventList>
    2ac0:	88 23       	and	r24, r24
    2ac2:	11 f0       	breq	.+4      	; 0x2ac8 <prvUnlockQueue+0x40>
    2ac4:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <vTaskMissedYield>
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	81 50       	subi	r24, 0x01	; 1
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	18 16       	cp	r1, r24
    2ad2:	5c f3       	brlt	.-42     	; 0x2aaa <prvUnlockQueue+0x22>
    2ad4:	01 c0       	rjmp	.+2      	; 0x2ad8 <prvUnlockQueue+0x50>
    2ad6:	00 00       	nop
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	9c 81       	ldd	r25, Y+4	; 0x04
    2adc:	2f ef       	ldi	r18, 0xFF	; 255
    2ade:	fc 01       	movw	r30, r24
    2ae0:	22 a3       	std	Z+34, r18	; 0x22
    2ae2:	0f 90       	pop	r0
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	0f 92       	push	r0
    2aec:	8b 81       	ldd	r24, Y+3	; 0x03
    2aee:	9c 81       	ldd	r25, Y+4	; 0x04
    2af0:	fc 01       	movw	r30, r24
    2af2:	81 a1       	ldd	r24, Z+33	; 0x21
    2af4:	8a 83       	std	Y+2, r24	; 0x02
    2af6:	12 c0       	rjmp	.+36     	; 0x2b1c <prvUnlockQueue+0x94>
    2af8:	8b 81       	ldd	r24, Y+3	; 0x03
    2afa:	9c 81       	ldd	r25, Y+4	; 0x04
    2afc:	fc 01       	movw	r30, r24
    2afe:	80 85       	ldd	r24, Z+8	; 0x08
    2b00:	88 23       	and	r24, r24
    2b02:	81 f0       	breq	.+32     	; 0x2b24 <prvUnlockQueue+0x9c>
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
    2b06:	9c 81       	ldd	r25, Y+4	; 0x04
    2b08:	08 96       	adiw	r24, 0x08	; 8
    2b0a:	0e 94 fd 23 	call	0x47fa	; 0x47fa <xTaskRemoveFromEventList>
    2b0e:	88 23       	and	r24, r24
    2b10:	11 f0       	breq	.+4      	; 0x2b16 <prvUnlockQueue+0x8e>
    2b12:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <vTaskMissedYield>
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	81 50       	subi	r24, 0x01	; 1
    2b1a:	8a 83       	std	Y+2, r24	; 0x02
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	18 16       	cp	r1, r24
    2b20:	5c f3       	brlt	.-42     	; 0x2af8 <prvUnlockQueue+0x70>
    2b22:	01 c0       	rjmp	.+2      	; 0x2b26 <prvUnlockQueue+0x9e>
    2b24:	00 00       	nop
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	2f ef       	ldi	r18, 0xFF	; 255
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	21 a3       	std	Z+33, r18	; 0x21
    2b30:	0f 90       	pop	r0
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	00 00       	nop
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	08 95       	ret

00002b44 <prvIsQueueEmpty>:
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <prvIsQueueEmpty+0x6>
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	9b 83       	std	Y+3, r25	; 0x03
    2b50:	8a 83       	std	Y+2, r24	; 0x02
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	0f 92       	push	r0
    2b58:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b60:	88 23       	and	r24, r24
    2b62:	19 f4       	brne	.+6      	; 0x2b6a <prvIsQueueEmpty+0x26>
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	01 c0       	rjmp	.+2      	; 0x2b6c <prvIsQueueEmpty+0x28>
    2b6a:	19 82       	std	Y+1, r1	; 0x01
    2b6c:	0f 90       	pop	r0
    2b6e:	0f be       	out	0x3f, r0	; 63
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	0f 90       	pop	r0
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	08 95       	ret

00002b7e <prvIsQueueFull>:
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <prvIsQueueFull+0x6>
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	9b 83       	std	Y+3, r25	; 0x03
    2b8a:	8a 83       	std	Y+2, r24	; 0x02
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	0f 92       	push	r0
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	9b 81       	ldd	r25, Y+3	; 0x03
    2b96:	fc 01       	movw	r30, r24
    2b98:	26 8d       	ldd	r18, Z+30	; 0x1e
    2b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	87 8d       	ldd	r24, Z+31	; 0x1f
    2ba2:	28 17       	cp	r18, r24
    2ba4:	19 f4       	brne	.+6      	; 0x2bac <prvIsQueueFull+0x2e>
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	01 c0       	rjmp	.+2      	; 0x2bae <prvIsQueueFull+0x30>
    2bac:	19 82       	std	Y+1, r1	; 0x01
    2bae:	0f 90       	pop	r0
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	df 91       	pop	r29
    2bbc:	cf 91       	pop	r28
    2bbe:	08 95       	ret

00002bc0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	29 97       	sbiw	r28, 0x09	; 9
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	cd bf       	out	0x3d, r28	; 61
    2bd4:	9c 83       	std	Y+4, r25	; 0x04
    2bd6:	8b 83       	std	Y+3, r24	; 0x03
    2bd8:	4d 83       	std	Y+5, r20	; 0x05
    2bda:	5e 83       	std	Y+6, r21	; 0x06
    2bdc:	6f 83       	std	Y+7, r22	; 0x07
    2bde:	78 87       	std	Y+8, r23	; 0x08
    2be0:	29 87       	std	Y+9, r18	; 0x09
        Queue_t * const pxQueue = xQueue;
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	89 83       	std	Y+1, r24	; 0x01
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	0f 92       	push	r0
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	81 a1       	ldd	r24, Z+33	; 0x21
    2bf8:	8f 3f       	cpi	r24, 0xFF	; 255
    2bfa:	21 f4       	brne	.+8      	; 0x2c04 <vQueueWaitForMessageRestricted+0x44>
    2bfc:	89 81       	ldd	r24, Y+1	; 0x01
    2bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2c00:	fc 01       	movw	r30, r24
    2c02:	11 a2       	std	Z+33, r1	; 0x21
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	9a 81       	ldd	r25, Y+2	; 0x02
    2c08:	fc 01       	movw	r30, r24
    2c0a:	82 a1       	ldd	r24, Z+34	; 0x22
    2c0c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c0e:	21 f4       	brne	.+8      	; 0x2c18 <vQueueWaitForMessageRestricted+0x58>
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	9a 81       	ldd	r25, Y+2	; 0x02
    2c14:	fc 01       	movw	r30, r24
    2c16:	12 a2       	std	Z+34, r1	; 0x22
    2c18:	0f 90       	pop	r0
    2c1a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c20:	fc 01       	movw	r30, r24
    2c22:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c24:	88 23       	and	r24, r24
    2c26:	71 f4       	brne	.+28     	; 0x2c44 <vQueueWaitForMessageRestricted+0x84>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	73 96       	adiw	r30, 0x13	; 19
    2c30:	8d 81       	ldd	r24, Y+5	; 0x05
    2c32:	9e 81       	ldd	r25, Y+6	; 0x06
    2c34:	af 81       	ldd	r26, Y+7	; 0x07
    2c36:	b8 85       	ldd	r27, Y+8	; 0x08
    2c38:	29 85       	ldd	r18, Y+9	; 0x09
    2c3a:	ac 01       	movw	r20, r24
    2c3c:	bd 01       	movw	r22, r26
    2c3e:	cf 01       	movw	r24, r30
    2c40:	0e 94 86 23 	call	0x470c	; 0x470c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	9a 81       	ldd	r25, Y+2	; 0x02
    2c48:	1f df       	rcall	.-450    	; 0x2a88 <prvUnlockQueue>
    }
    2c4a:	00 00       	nop
    2c4c:	29 96       	adiw	r28, 0x09	; 9
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	08 95       	ret

00002c5e <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    2c5e:	0f 93       	push	r16
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	28 97       	sbiw	r28, 0x08	; 8
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	9d 83       	std	Y+5, r25	; 0x05
    2c76:	8c 83       	std	Y+4, r24	; 0x04
    2c78:	7f 83       	std	Y+7, r23	; 0x07
    2c7a:	6e 83       	std	Y+6, r22	; 0x06
    2c7c:	48 87       	std	Y+8, r20	; 0x08
    2c7e:	88 85       	ldd	r24, Y+8	; 0x08
    2c80:	81 30       	cpi	r24, 0x01	; 1
    2c82:	19 f4       	brne	.+6      	; 0x2c8a <xStreamBufferGenericCreate+0x2c>
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	8b 83       	std	Y+3, r24	; 0x03
    2c88:	01 c0       	rjmp	.+2      	; 0x2c8c <xStreamBufferGenericCreate+0x2e>
    2c8a:	1b 82       	std	Y+3, r1	; 0x03
    2c8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c90:	89 2b       	or	r24, r25
    2c92:	21 f4       	brne	.+8      	; 0x2c9c <xStreamBufferGenericCreate+0x3e>
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9f 83       	std	Y+7, r25	; 0x07
    2c9a:	8e 83       	std	Y+6, r24	; 0x06
    2c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca0:	9c 01       	movw	r18, r24
    2ca2:	20 5f       	subi	r18, 0xF0	; 240
    2ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    2caa:	82 17       	cp	r24, r18
    2cac:	93 07       	cpc	r25, r19
    2cae:	68 f4       	brcc	.+26     	; 0x2cca <xStreamBufferGenericCreate+0x6c>
    2cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb4:	01 96       	adiw	r24, 0x01	; 1
    2cb6:	9d 83       	std	Y+5, r25	; 0x05
    2cb8:	8c 83       	std	Y+4, r24	; 0x04
    2cba:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cbe:	0f 96       	adiw	r24, 0x0f	; 15
    2cc0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <pvPortMalloc>
    2cc4:	9a 83       	std	Y+2, r25	; 0x02
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <xStreamBufferGenericCreate+0x70>
    2cca:	1a 82       	std	Y+2, r1	; 0x02
    2ccc:	19 82       	std	Y+1, r1	; 0x01
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	89 2b       	or	r24, r25
    2cd4:	69 f0       	breq	.+26     	; 0x2cf0 <xStreamBufferGenericCreate+0x92>
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cda:	bc 01       	movw	r22, r24
    2cdc:	61 5f       	subi	r22, 0xF1	; 241
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ce2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ce4:	4c 81       	ldd	r20, Y+4	; 0x04
    2ce6:	5d 81       	ldd	r21, Y+5	; 0x05
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	0b 81       	ldd	r16, Y+3	; 0x03
    2cee:	38 d5       	rcall	.+2672   	; 0x3760 <prvInitialiseNewStreamBuffer>
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf4:	28 96       	adiw	r28, 0x08	; 8
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	df 91       	pop	r29
    2d02:	cf 91       	pop	r28
    2d04:	0f 91       	pop	r16
    2d06:	08 95       	ret

00002d08 <xStreamBufferReset>:
    2d08:	0f 93       	push	r16
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <xStreamBufferReset+0x8>
    2d10:	1f 92       	push	r1
    2d12:	1f 92       	push	r1
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	9d 83       	std	Y+5, r25	; 0x05
    2d1a:	8c 83       	std	Y+4, r24	; 0x04
    2d1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d20:	9b 83       	std	Y+3, r25	; 0x03
    2d22:	8a 83       	std	Y+2, r24	; 0x02
    2d24:	19 82       	std	Y+1, r1	; 0x01
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	0f 92       	push	r0
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d30:	dc 01       	movw	r26, r24
    2d32:	18 96       	adiw	r26, 0x08	; 8
    2d34:	8d 91       	ld	r24, X+
    2d36:	9c 91       	ld	r25, X
    2d38:	19 97       	sbiw	r26, 0x09	; 9
    2d3a:	89 2b       	or	r24, r25
    2d3c:	39 f5       	brne	.+78     	; 0x2d8c <xStreamBufferReset+0x84>
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	fc 01       	movw	r30, r24
    2d44:	82 85       	ldd	r24, Z+10	; 0x0a
    2d46:	93 85       	ldd	r25, Z+11	; 0x0b
    2d48:	89 2b       	or	r24, r25
    2d4a:	01 f5       	brne	.+64     	; 0x2d8c <xStreamBufferReset+0x84>
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d50:	dc 01       	movw	r26, r24
    2d52:	1e 96       	adiw	r26, 0x0e	; 14
    2d54:	ec 91       	ld	r30, X
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	16 96       	adiw	r26, 0x06	; 6
    2d5e:	2d 91       	ld	r18, X+
    2d60:	3c 91       	ld	r19, X
    2d62:	17 97       	sbiw	r26, 0x07	; 7
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	9b 81       	ldd	r25, Y+3	; 0x03
    2d68:	dc 01       	movw	r26, r24
    2d6a:	14 96       	adiw	r26, 0x04	; 4
    2d6c:	4d 91       	ld	r20, X+
    2d6e:	5c 91       	ld	r21, X
    2d70:	15 97       	sbiw	r26, 0x05	; 5
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	9b 81       	ldd	r25, Y+3	; 0x03
    2d76:	dc 01       	movw	r26, r24
    2d78:	1c 96       	adiw	r26, 0x0c	; 12
    2d7a:	6d 91       	ld	r22, X+
    2d7c:	7c 91       	ld	r23, X
    2d7e:	1d 97       	sbiw	r26, 0x0d	; 13
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	0e 2f       	mov	r16, r30
    2d86:	ec d4       	rcall	.+2520   	; 0x3760 <prvInitialiseNewStreamBuffer>
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	0f 90       	pop	r0
    2d8e:	0f be       	out	0x3f, r0	; 63
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	0f 91       	pop	r16
    2da2:	08 95       	ret

00002da4 <xStreamBufferSpacesAvailable>:
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <xStreamBufferSpacesAvailable+0x6>
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <xStreamBufferSpacesAvailable+0x8>
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	9c 83       	std	Y+4, r25	; 0x04
    2dba:	8b 83       	std	Y+3, r24	; 0x03
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc0:	fc 01       	movw	r30, r24
    2dc2:	24 81       	ldd	r18, Z+4	; 0x04
    2dc4:	35 81       	ldd	r19, Z+5	; 0x05
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	fc 01       	movw	r30, r24
    2dcc:	80 81       	ld	r24, Z
    2dce:	91 81       	ldd	r25, Z+1	; 0x01
    2dd0:	82 0f       	add	r24, r18
    2dd2:	93 1f       	adc	r25, r19
    2dd4:	9a 83       	std	Y+2, r25	; 0x02
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dda:	9c 81       	ldd	r25, Y+4	; 0x04
    2ddc:	fc 01       	movw	r30, r24
    2dde:	82 81       	ldd	r24, Z+2	; 0x02
    2de0:	93 81       	ldd	r25, Z+3	; 0x03
    2de2:	29 81       	ldd	r18, Y+1	; 0x01
    2de4:	3a 81       	ldd	r19, Y+2	; 0x02
    2de6:	a9 01       	movw	r20, r18
    2de8:	48 1b       	sub	r20, r24
    2dea:	59 0b       	sbc	r21, r25
    2dec:	ca 01       	movw	r24, r20
    2dee:	9a 83       	std	Y+2, r25	; 0x02
    2df0:	89 83       	std	Y+1, r24	; 0x01
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	9a 81       	ldd	r25, Y+2	; 0x02
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2e00:	fc 01       	movw	r30, r24
    2e02:	24 81       	ldd	r18, Z+4	; 0x04
    2e04:	35 81       	ldd	r19, Z+5	; 0x05
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0a:	82 17       	cp	r24, r18
    2e0c:	93 07       	cpc	r25, r19
    2e0e:	68 f0       	brcs	.+26     	; 0x2e2a <xStreamBufferSpacesAvailable+0x86>
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	fc 01       	movw	r30, r24
    2e16:	84 81       	ldd	r24, Z+4	; 0x04
    2e18:	95 81       	ldd	r25, Z+5	; 0x05
    2e1a:	29 81       	ldd	r18, Y+1	; 0x01
    2e1c:	3a 81       	ldd	r19, Y+2	; 0x02
    2e1e:	a9 01       	movw	r20, r18
    2e20:	48 1b       	sub	r20, r24
    2e22:	59 0b       	sbc	r21, r25
    2e24:	ca 01       	movw	r24, r20
    2e26:	9a 83       	std	Y+2, r25	; 0x02
    2e28:	89 83       	std	Y+1, r24	; 0x01
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2e:	26 96       	adiw	r28, 0x06	; 6
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	08 95       	ret

00002e40 <xStreamBufferSend>:
    2e40:	af 92       	push	r10
    2e42:	bf 92       	push	r11
    2e44:	cf 92       	push	r12
    2e46:	df 92       	push	r13
    2e48:	ef 92       	push	r14
    2e4a:	ff 92       	push	r15
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	cd b7       	in	r28, 0x3d	; 61
    2e56:	de b7       	in	r29, 0x3e	; 62
    2e58:	69 97       	sbiw	r28, 0x19	; 25
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	99 8b       	std	Y+17, r25	; 0x11
    2e66:	88 8b       	std	Y+16, r24	; 0x10
    2e68:	7b 8b       	std	Y+19, r23	; 0x13
    2e6a:	6a 8b       	std	Y+18, r22	; 0x12
    2e6c:	5d 8b       	std	Y+21, r21	; 0x15
    2e6e:	4c 8b       	std	Y+20, r20	; 0x14
    2e70:	0e 8b       	std	Y+22, r16	; 0x16
    2e72:	1f 8b       	std	Y+23, r17	; 0x17
    2e74:	28 8f       	std	Y+24, r18	; 0x18
    2e76:	39 8f       	std	Y+25, r19	; 0x19
    2e78:	88 89       	ldd	r24, Y+16	; 0x10
    2e7a:	99 89       	ldd	r25, Y+17	; 0x11
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	1a 82       	std	Y+2, r1	; 0x02
    2e82:	19 82       	std	Y+1, r1	; 0x01
    2e84:	8c 89       	ldd	r24, Y+20	; 0x14
    2e86:	9d 89       	ldd	r25, Y+21	; 0x15
    2e88:	9c 83       	std	Y+4, r25	; 0x04
    2e8a:	8b 83       	std	Y+3, r24	; 0x03
    2e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e90:	fc 01       	movw	r30, r24
    2e92:	84 81       	ldd	r24, Z+4	; 0x04
    2e94:	95 81       	ldd	r25, Z+5	; 0x05
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	98 87       	std	Y+8, r25	; 0x08
    2e9a:	8f 83       	std	Y+7, r24	; 0x07
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	86 85       	ldd	r24, Z+14	; 0x0e
    2ea4:	88 2f       	mov	r24, r24
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	81 70       	andi	r24, 0x01	; 1
    2eaa:	99 27       	eor	r25, r25
    2eac:	89 2b       	or	r24, r25
    2eae:	89 f0       	breq	.+34     	; 0x2ed2 <xStreamBufferSend+0x92>
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	02 96       	adiw	r24, 0x02	; 2
    2eb6:	9c 83       	std	Y+4, r25	; 0x04
    2eb8:	8b 83       	std	Y+3, r24	; 0x03
    2eba:	2b 81       	ldd	r18, Y+3	; 0x03
    2ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ebe:	8f 81       	ldd	r24, Y+7	; 0x07
    2ec0:	98 85       	ldd	r25, Y+8	; 0x08
    2ec2:	82 17       	cp	r24, r18
    2ec4:	93 07       	cpc	r25, r19
    2ec6:	80 f4       	brcc	.+32     	; 0x2ee8 <xStreamBufferSend+0xa8>
    2ec8:	1e 8a       	std	Y+22, r1	; 0x16
    2eca:	1f 8a       	std	Y+23, r1	; 0x17
    2ecc:	18 8e       	std	Y+24, r1	; 0x18
    2ece:	19 8e       	std	Y+25, r1	; 0x19
    2ed0:	0b c0       	rjmp	.+22     	; 0x2ee8 <xStreamBufferSend+0xa8>
    2ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ed6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed8:	98 85       	ldd	r25, Y+8	; 0x08
    2eda:	82 17       	cp	r24, r18
    2edc:	93 07       	cpc	r25, r19
    2ede:	20 f4       	brcc	.+8      	; 0x2ee8 <xStreamBufferSend+0xa8>
    2ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ee2:	98 85       	ldd	r25, Y+8	; 0x08
    2ee4:	9c 83       	std	Y+4, r25	; 0x04
    2ee6:	8b 83       	std	Y+3, r24	; 0x03
    2ee8:	8e 89       	ldd	r24, Y+22	; 0x16
    2eea:	9f 89       	ldd	r25, Y+23	; 0x17
    2eec:	a8 8d       	ldd	r26, Y+24	; 0x18
    2eee:	b9 8d       	ldd	r27, Y+25	; 0x19
    2ef0:	89 2b       	or	r24, r25
    2ef2:	8a 2b       	or	r24, r26
    2ef4:	8b 2b       	or	r24, r27
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <xStreamBufferSend+0xba>
    2ef8:	47 c0       	rjmp	.+142    	; 0x2f88 <xStreamBufferSend+0x148>
    2efa:	ce 01       	movw	r24, r28
    2efc:	0b 96       	adiw	r24, 0x0b	; 11
    2efe:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <vTaskSetTimeOutState>
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	0f 92       	push	r0
    2f08:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0c:	4b df       	rcall	.-362    	; 0x2da4 <xStreamBufferSpacesAvailable>
    2f0e:	9a 83       	std	Y+2, r25	; 0x02
    2f10:	89 83       	std	Y+1, r24	; 0x01
    2f12:	29 81       	ldd	r18, Y+1	; 0x01
    2f14:	3a 81       	ldd	r19, Y+2	; 0x02
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	28 17       	cp	r18, r24
    2f1c:	39 07       	cpc	r19, r25
    2f1e:	70 f4       	brcc	.+28     	; 0x2f3c <xStreamBufferSend+0xfc>
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <xTaskGenericNotifyStateClear>
    2f2a:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskGetCurrentTaskHandle>
    2f2e:	9c 01       	movw	r18, r24
    2f30:	8d 81       	ldd	r24, Y+5	; 0x05
    2f32:	9e 81       	ldd	r25, Y+6	; 0x06
    2f34:	fc 01       	movw	r30, r24
    2f36:	33 87       	std	Z+11, r19	; 0x0b
    2f38:	22 87       	std	Z+10, r18	; 0x0a
    2f3a:	03 c0       	rjmp	.+6      	; 0x2f42 <xStreamBufferSend+0x102>
    2f3c:	0f 90       	pop	r0
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	23 c0       	rjmp	.+70     	; 0x2f88 <xStreamBufferSend+0x148>
    2f42:	0f 90       	pop	r0
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	8e 89       	ldd	r24, Y+22	; 0x16
    2f48:	9f 89       	ldd	r25, Y+23	; 0x17
    2f4a:	a8 8d       	ldd	r26, Y+24	; 0x18
    2f4c:	b9 8d       	ldd	r27, Y+25	; 0x19
    2f4e:	5c 01       	movw	r10, r24
    2f50:	6d 01       	movw	r12, r26
    2f52:	e1 2c       	mov	r14, r1
    2f54:	f1 2c       	mov	r15, r1
    2f56:	00 e0       	ldi	r16, 0x00	; 0
    2f58:	10 e0       	ldi	r17, 0x00	; 0
    2f5a:	98 01       	movw	r18, r16
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	ba 01       	movw	r22, r20
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <xTaskGenericNotifyWait>
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	13 86       	std	Z+11, r1	; 0x0b
    2f70:	12 86       	std	Z+10, r1	; 0x0a
    2f72:	9e 01       	movw	r18, r28
    2f74:	2a 5e       	subi	r18, 0xEA	; 234
    2f76:	3f 4f       	sbci	r19, 0xFF	; 255
    2f78:	ce 01       	movw	r24, r28
    2f7a:	0b 96       	adiw	r24, 0x0b	; 11
    2f7c:	b9 01       	movw	r22, r18
    2f7e:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <xTaskCheckForTimeOut>
    2f82:	88 23       	and	r24, r24
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <xStreamBufferSend+0x148>
    2f86:	bd cf       	rjmp	.-134    	; 0x2f02 <xStreamBufferSend+0xc2>
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8c:	89 2b       	or	r24, r25
    2f8e:	29 f4       	brne	.+10     	; 0x2f9a <xStreamBufferSend+0x15a>
    2f90:	8d 81       	ldd	r24, Y+5	; 0x05
    2f92:	9e 81       	ldd	r25, Y+6	; 0x06
    2f94:	07 df       	rcall	.-498    	; 0x2da4 <xStreamBufferSpacesAvailable>
    2f96:	9a 83       	std	Y+2, r25	; 0x02
    2f98:	89 83       	std	Y+1, r24	; 0x01
    2f9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f9e:	29 81       	ldd	r18, Y+1	; 0x01
    2fa0:	3a 81       	ldd	r19, Y+2	; 0x02
    2fa2:	4c 89       	ldd	r20, Y+20	; 0x14
    2fa4:	5d 89       	ldd	r21, Y+21	; 0x15
    2fa6:	6a 89       	ldd	r22, Y+18	; 0x12
    2fa8:	7b 89       	ldd	r23, Y+19	; 0x13
    2faa:	8d 81       	ldd	r24, Y+5	; 0x05
    2fac:	9e 81       	ldd	r25, Y+6	; 0x06
    2fae:	8f 01       	movw	r16, r30
    2fb0:	c2 d0       	rcall	.+388    	; 0x3136 <prvWriteMessageToBuffer>
    2fb2:	9a 87       	std	Y+10, r25	; 0x0a
    2fb4:	89 87       	std	Y+9, r24	; 0x09
    2fb6:	89 85       	ldd	r24, Y+9	; 0x09
    2fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fba:	89 2b       	or	r24, r25
    2fbc:	41 f1       	breq	.+80     	; 0x300e <xStreamBufferSend+0x1ce>
    2fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc2:	8b d3       	rcall	.+1814   	; 0x36da <prvBytesInBuffer>
    2fc4:	9c 01       	movw	r18, r24
    2fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fca:	fc 01       	movw	r30, r24
    2fcc:	86 81       	ldd	r24, Z+6	; 0x06
    2fce:	97 81       	ldd	r25, Z+7	; 0x07
    2fd0:	28 17       	cp	r18, r24
    2fd2:	39 07       	cpc	r19, r25
    2fd4:	e0 f0       	brcs	.+56     	; 0x300e <xStreamBufferSend+0x1ce>
    2fd6:	a8 d6       	rcall	.+3408   	; 0x3d28 <vTaskSuspendAll>
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	fc 01       	movw	r30, r24
    2fde:	80 85       	ldd	r24, Z+8	; 0x08
    2fe0:	91 85       	ldd	r25, Z+9	; 0x09
    2fe2:	89 2b       	or	r24, r25
    2fe4:	99 f0       	breq	.+38     	; 0x300c <xStreamBufferSend+0x1cc>
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	fc 01       	movw	r30, r24
    2fec:	80 85       	ldd	r24, Z+8	; 0x08
    2fee:	91 85       	ldd	r25, Z+9	; 0x09
    2ff0:	e1 2c       	mov	r14, r1
    2ff2:	f1 2c       	mov	r15, r1
    2ff4:	00 e0       	ldi	r16, 0x00	; 0
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	a9 01       	movw	r20, r18
    2ffc:	60 e0       	ldi	r22, 0x00	; 0
    2ffe:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <xTaskGenericNotify>
    3002:	8d 81       	ldd	r24, Y+5	; 0x05
    3004:	9e 81       	ldd	r25, Y+6	; 0x06
    3006:	fc 01       	movw	r30, r24
    3008:	11 86       	std	Z+9, r1	; 0x09
    300a:	10 86       	std	Z+8, r1	; 0x08
    300c:	9a d6       	rcall	.+3380   	; 0x3d42 <xTaskResumeAll>
    300e:	89 85       	ldd	r24, Y+9	; 0x09
    3010:	9a 85       	ldd	r25, Y+10	; 0x0a
    3012:	69 96       	adiw	r28, 0x19	; 25
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	1f 91       	pop	r17
    3024:	0f 91       	pop	r16
    3026:	ff 90       	pop	r15
    3028:	ef 90       	pop	r14
    302a:	df 90       	pop	r13
    302c:	cf 90       	pop	r12
    302e:	bf 90       	pop	r11
    3030:	af 90       	pop	r10
    3032:	08 95       	ret

00003034 <xStreamBufferSendFromISR>:
    3034:	cf 92       	push	r12
    3036:	df 92       	push	r13
    3038:	ef 92       	push	r14
    303a:	ff 92       	push	r15
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	61 97       	sbiw	r28, 0x11	; 17
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	9b 87       	std	Y+11, r25	; 0x0b
    3056:	8a 87       	std	Y+10, r24	; 0x0a
    3058:	7d 87       	std	Y+13, r23	; 0x0d
    305a:	6c 87       	std	Y+12, r22	; 0x0c
    305c:	5f 87       	std	Y+15, r21	; 0x0f
    305e:	4e 87       	std	Y+14, r20	; 0x0e
    3060:	39 8b       	std	Y+17, r19	; 0x11
    3062:	28 8b       	std	Y+16, r18	; 0x10
    3064:	8a 85       	ldd	r24, Y+10	; 0x0a
    3066:	9b 85       	ldd	r25, Y+11	; 0x0b
    3068:	9c 83       	std	Y+4, r25	; 0x04
    306a:	8b 83       	std	Y+3, r24	; 0x03
    306c:	8e 85       	ldd	r24, Y+14	; 0x0e
    306e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3070:	9a 83       	std	Y+2, r25	; 0x02
    3072:	89 83       	std	Y+1, r24	; 0x01
    3074:	8b 81       	ldd	r24, Y+3	; 0x03
    3076:	9c 81       	ldd	r25, Y+4	; 0x04
    3078:	fc 01       	movw	r30, r24
    307a:	86 85       	ldd	r24, Z+14	; 0x0e
    307c:	88 2f       	mov	r24, r24
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	81 70       	andi	r24, 0x01	; 1
    3082:	99 27       	eor	r25, r25
    3084:	89 2b       	or	r24, r25
    3086:	29 f0       	breq	.+10     	; 0x3092 <xStreamBufferSendFromISR+0x5e>
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	9a 81       	ldd	r25, Y+2	; 0x02
    308c:	02 96       	adiw	r24, 0x02	; 2
    308e:	9a 83       	std	Y+2, r25	; 0x02
    3090:	89 83       	std	Y+1, r24	; 0x01
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	9c 81       	ldd	r25, Y+4	; 0x04
    3096:	86 de       	rcall	.-756    	; 0x2da4 <xStreamBufferSpacesAvailable>
    3098:	9e 83       	std	Y+6, r25	; 0x06
    309a:	8d 83       	std	Y+5, r24	; 0x05
    309c:	e9 81       	ldd	r30, Y+1	; 0x01
    309e:	fa 81       	ldd	r31, Y+2	; 0x02
    30a0:	2d 81       	ldd	r18, Y+5	; 0x05
    30a2:	3e 81       	ldd	r19, Y+6	; 0x06
    30a4:	4e 85       	ldd	r20, Y+14	; 0x0e
    30a6:	5f 85       	ldd	r21, Y+15	; 0x0f
    30a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    30aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	9c 81       	ldd	r25, Y+4	; 0x04
    30b0:	8f 01       	movw	r16, r30
    30b2:	41 d0       	rcall	.+130    	; 0x3136 <prvWriteMessageToBuffer>
    30b4:	98 87       	std	Y+8, r25	; 0x08
    30b6:	8f 83       	std	Y+7, r24	; 0x07
    30b8:	8f 81       	ldd	r24, Y+7	; 0x07
    30ba:	98 85       	ldd	r25, Y+8	; 0x08
    30bc:	89 2b       	or	r24, r25
    30be:	51 f1       	breq	.+84     	; 0x3114 <xStreamBufferSendFromISR+0xe0>
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	9c 81       	ldd	r25, Y+4	; 0x04
    30c4:	0a d3       	rcall	.+1556   	; 0x36da <prvBytesInBuffer>
    30c6:	9c 01       	movw	r18, r24
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	9c 81       	ldd	r25, Y+4	; 0x04
    30cc:	fc 01       	movw	r30, r24
    30ce:	86 81       	ldd	r24, Z+6	; 0x06
    30d0:	97 81       	ldd	r25, Z+7	; 0x07
    30d2:	28 17       	cp	r18, r24
    30d4:	39 07       	cpc	r19, r25
    30d6:	f0 f0       	brcs	.+60     	; 0x3114 <xStreamBufferSendFromISR+0xe0>
    30d8:	19 86       	std	Y+9, r1	; 0x09
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	9c 81       	ldd	r25, Y+4	; 0x04
    30de:	fc 01       	movw	r30, r24
    30e0:	80 85       	ldd	r24, Z+8	; 0x08
    30e2:	91 85       	ldd	r25, Z+9	; 0x09
    30e4:	89 2b       	or	r24, r25
    30e6:	b1 f0       	breq	.+44     	; 0x3114 <xStreamBufferSendFromISR+0xe0>
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	9c 81       	ldd	r25, Y+4	; 0x04
    30ec:	fc 01       	movw	r30, r24
    30ee:	80 85       	ldd	r24, Z+8	; 0x08
    30f0:	91 85       	ldd	r25, Z+9	; 0x09
    30f2:	28 89       	ldd	r18, Y+16	; 0x10
    30f4:	39 89       	ldd	r19, Y+17	; 0x11
    30f6:	69 01       	movw	r12, r18
    30f8:	e1 2c       	mov	r14, r1
    30fa:	f1 2c       	mov	r15, r1
    30fc:	00 e0       	ldi	r16, 0x00	; 0
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	a9 01       	movw	r20, r18
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <xTaskGenericNotifyFromISR>
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	9c 81       	ldd	r25, Y+4	; 0x04
    310e:	fc 01       	movw	r30, r24
    3110:	11 86       	std	Z+9, r1	; 0x09
    3112:	10 86       	std	Z+8, r1	; 0x08
    3114:	8f 81       	ldd	r24, Y+7	; 0x07
    3116:	98 85       	ldd	r25, Y+8	; 0x08
    3118:	61 96       	adiw	r28, 0x11	; 17
    311a:	0f b6       	in	r0, 0x3f	; 63
    311c:	f8 94       	cli
    311e:	de bf       	out	0x3e, r29	; 62
    3120:	0f be       	out	0x3f, r0	; 63
    3122:	cd bf       	out	0x3d, r28	; 61
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	1f 91       	pop	r17
    312a:	0f 91       	pop	r16
    312c:	ff 90       	pop	r15
    312e:	ef 90       	pop	r14
    3130:	df 90       	pop	r13
    3132:	cf 90       	pop	r12
    3134:	08 95       	ret

00003136 <prvWriteMessageToBuffer>:
    3136:	0f 93       	push	r16
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	61 97       	sbiw	r28, 0x11	; 17
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	99 87       	std	Y+9, r25	; 0x09
    3150:	88 87       	std	Y+8, r24	; 0x08
    3152:	7b 87       	std	Y+11, r23	; 0x0b
    3154:	6a 87       	std	Y+10, r22	; 0x0a
    3156:	5d 87       	std	Y+13, r21	; 0x0d
    3158:	4c 87       	std	Y+12, r20	; 0x0c
    315a:	3f 87       	std	Y+15, r19	; 0x0f
    315c:	2e 87       	std	Y+14, r18	; 0x0e
    315e:	19 8b       	std	Y+17, r17	; 0x11
    3160:	08 8b       	std	Y+16, r16	; 0x10
    3162:	8e 85       	ldd	r24, Y+14	; 0x0e
    3164:	9f 85       	ldd	r25, Y+15	; 0x0f
    3166:	89 2b       	or	r24, r25
    3168:	11 f4       	brne	.+4      	; 0x316e <prvWriteMessageToBuffer+0x38>
    316a:	19 82       	std	Y+1, r1	; 0x01
    316c:	33 c0       	rjmp	.+102    	; 0x31d4 <prvWriteMessageToBuffer+0x9e>
    316e:	88 85       	ldd	r24, Y+8	; 0x08
    3170:	99 85       	ldd	r25, Y+9	; 0x09
    3172:	fc 01       	movw	r30, r24
    3174:	86 85       	ldd	r24, Z+14	; 0x0e
    3176:	88 2f       	mov	r24, r24
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	81 70       	andi	r24, 0x01	; 1
    317c:	99 27       	eor	r25, r25
    317e:	89 2b       	or	r24, r25
    3180:	a9 f4       	brne	.+42     	; 0x31ac <prvWriteMessageToBuffer+0x76>
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	8c 85       	ldd	r24, Y+12	; 0x0c
    3188:	9d 85       	ldd	r25, Y+13	; 0x0d
    318a:	9d 83       	std	Y+5, r25	; 0x05
    318c:	8c 83       	std	Y+4, r24	; 0x04
    318e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3190:	9f 85       	ldd	r25, Y+15	; 0x0f
    3192:	9f 83       	std	Y+7, r25	; 0x07
    3194:	8e 83       	std	Y+6, r24	; 0x06
    3196:	2c 81       	ldd	r18, Y+4	; 0x04
    3198:	3d 81       	ldd	r19, Y+5	; 0x05
    319a:	8e 81       	ldd	r24, Y+6	; 0x06
    319c:	9f 81       	ldd	r25, Y+7	; 0x07
    319e:	28 17       	cp	r18, r24
    31a0:	39 07       	cpc	r19, r25
    31a2:	08 f4       	brcc	.+2      	; 0x31a6 <prvWriteMessageToBuffer+0x70>
    31a4:	c9 01       	movw	r24, r18
    31a6:	9d 87       	std	Y+13, r25	; 0x0d
    31a8:	8c 87       	std	Y+12, r24	; 0x0c
    31aa:	14 c0       	rjmp	.+40     	; 0x31d4 <prvWriteMessageToBuffer+0x9e>
    31ac:	2e 85       	ldd	r18, Y+14	; 0x0e
    31ae:	3f 85       	ldd	r19, Y+15	; 0x0f
    31b0:	88 89       	ldd	r24, Y+16	; 0x10
    31b2:	99 89       	ldd	r25, Y+17	; 0x11
    31b4:	28 17       	cp	r18, r24
    31b6:	39 07       	cpc	r19, r25
    31b8:	60 f0       	brcs	.+24     	; 0x31d2 <prvWriteMessageToBuffer+0x9c>
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	89 83       	std	Y+1, r24	; 0x01
    31be:	9e 01       	movw	r18, r28
    31c0:	24 5f       	subi	r18, 0xF4	; 244
    31c2:	3f 4f       	sbci	r19, 0xFF	; 255
    31c4:	88 85       	ldd	r24, Y+8	; 0x08
    31c6:	99 85       	ldd	r25, Y+9	; 0x09
    31c8:	42 e0       	ldi	r20, 0x02	; 2
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	b9 01       	movw	r22, r18
    31ce:	4f d1       	rcall	.+670    	; 0x346e <prvWriteBytesToBuffer>
    31d0:	01 c0       	rjmp	.+2      	; 0x31d4 <prvWriteMessageToBuffer+0x9e>
    31d2:	19 82       	std	Y+1, r1	; 0x01
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	88 23       	and	r24, r24
    31d8:	59 f0       	breq	.+22     	; 0x31f0 <prvWriteMessageToBuffer+0xba>
    31da:	4c 85       	ldd	r20, Y+12	; 0x0c
    31dc:	5d 85       	ldd	r21, Y+13	; 0x0d
    31de:	2a 85       	ldd	r18, Y+10	; 0x0a
    31e0:	3b 85       	ldd	r19, Y+11	; 0x0b
    31e2:	88 85       	ldd	r24, Y+8	; 0x08
    31e4:	99 85       	ldd	r25, Y+9	; 0x09
    31e6:	b9 01       	movw	r22, r18
    31e8:	42 d1       	rcall	.+644    	; 0x346e <prvWriteBytesToBuffer>
    31ea:	9b 83       	std	Y+3, r25	; 0x03
    31ec:	8a 83       	std	Y+2, r24	; 0x02
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <prvWriteMessageToBuffer+0xbe>
    31f0:	1b 82       	std	Y+3, r1	; 0x03
    31f2:	1a 82       	std	Y+2, r1	; 0x02
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	9b 81       	ldd	r25, Y+3	; 0x03
    31f8:	61 96       	adiw	r28, 0x11	; 17
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	0f 91       	pop	r16
    320c:	08 95       	ret

0000320e <xStreamBufferReceive>:
    320e:	af 92       	push	r10
    3210:	bf 92       	push	r11
    3212:	cf 92       	push	r12
    3214:	df 92       	push	r13
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	62 97       	sbiw	r28, 0x12	; 18
    3228:	0f b6       	in	r0, 0x3f	; 63
    322a:	f8 94       	cli
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	cd bf       	out	0x3d, r28	; 61
    3232:	9a 87       	std	Y+10, r25	; 0x0a
    3234:	89 87       	std	Y+9, r24	; 0x09
    3236:	7c 87       	std	Y+12, r23	; 0x0c
    3238:	6b 87       	std	Y+11, r22	; 0x0b
    323a:	5e 87       	std	Y+14, r21	; 0x0e
    323c:	4d 87       	std	Y+13, r20	; 0x0d
    323e:	0f 87       	std	Y+15, r16	; 0x0f
    3240:	18 8b       	std	Y+16, r17	; 0x10
    3242:	29 8b       	std	Y+17, r18	; 0x11
    3244:	3a 8b       	std	Y+18, r19	; 0x12
    3246:	89 85       	ldd	r24, Y+9	; 0x09
    3248:	9a 85       	ldd	r25, Y+10	; 0x0a
    324a:	98 87       	std	Y+8, r25	; 0x08
    324c:	8f 83       	std	Y+7, r24	; 0x07
    324e:	1a 82       	std	Y+2, r1	; 0x02
    3250:	19 82       	std	Y+1, r1	; 0x01
    3252:	8f 81       	ldd	r24, Y+7	; 0x07
    3254:	98 85       	ldd	r25, Y+8	; 0x08
    3256:	fc 01       	movw	r30, r24
    3258:	86 85       	ldd	r24, Z+14	; 0x0e
    325a:	88 2f       	mov	r24, r24
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	81 70       	andi	r24, 0x01	; 1
    3260:	99 27       	eor	r25, r25
    3262:	89 2b       	or	r24, r25
    3264:	29 f0       	breq	.+10     	; 0x3270 <xStreamBufferReceive+0x62>
    3266:	82 e0       	ldi	r24, 0x02	; 2
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	9e 83       	std	Y+6, r25	; 0x06
    326c:	8d 83       	std	Y+5, r24	; 0x05
    326e:	02 c0       	rjmp	.+4      	; 0x3274 <xStreamBufferReceive+0x66>
    3270:	1e 82       	std	Y+6, r1	; 0x06
    3272:	1d 82       	std	Y+5, r1	; 0x05
    3274:	8f 85       	ldd	r24, Y+15	; 0x0f
    3276:	98 89       	ldd	r25, Y+16	; 0x10
    3278:	a9 89       	ldd	r26, Y+17	; 0x11
    327a:	ba 89       	ldd	r27, Y+18	; 0x12
    327c:	89 2b       	or	r24, r25
    327e:	8a 2b       	or	r24, r26
    3280:	8b 2b       	or	r24, r27
    3282:	09 f4       	brne	.+2      	; 0x3286 <xStreamBufferReceive+0x78>
    3284:	41 c0       	rjmp	.+130    	; 0x3308 <xStreamBufferReceive+0xfa>
    3286:	0f b6       	in	r0, 0x3f	; 63
    3288:	f8 94       	cli
    328a:	0f 92       	push	r0
    328c:	8f 81       	ldd	r24, Y+7	; 0x07
    328e:	98 85       	ldd	r25, Y+8	; 0x08
    3290:	24 d2       	rcall	.+1096   	; 0x36da <prvBytesInBuffer>
    3292:	9c 83       	std	Y+4, r25	; 0x04
    3294:	8b 83       	std	Y+3, r24	; 0x03
    3296:	2b 81       	ldd	r18, Y+3	; 0x03
    3298:	3c 81       	ldd	r19, Y+4	; 0x04
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	9e 81       	ldd	r25, Y+6	; 0x06
    329e:	82 17       	cp	r24, r18
    32a0:	93 07       	cpc	r25, r19
    32a2:	68 f0       	brcs	.+26     	; 0x32be <xStreamBufferReceive+0xb0>
    32a4:	60 e0       	ldi	r22, 0x00	; 0
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <xTaskGenericNotifyStateClear>
    32ae:	0e 94 6f 28 	call	0x50de	; 0x50de <xTaskGetCurrentTaskHandle>
    32b2:	9c 01       	movw	r18, r24
    32b4:	8f 81       	ldd	r24, Y+7	; 0x07
    32b6:	98 85       	ldd	r25, Y+8	; 0x08
    32b8:	fc 01       	movw	r30, r24
    32ba:	31 87       	std	Z+9, r19	; 0x09
    32bc:	20 87       	std	Z+8, r18	; 0x08
    32be:	0f 90       	pop	r0
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	2b 81       	ldd	r18, Y+3	; 0x03
    32c4:	3c 81       	ldd	r19, Y+4	; 0x04
    32c6:	8d 81       	ldd	r24, Y+5	; 0x05
    32c8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ca:	82 17       	cp	r24, r18
    32cc:	93 07       	cpc	r25, r19
    32ce:	08 f1       	brcs	.+66     	; 0x3312 <xStreamBufferReceive+0x104>
    32d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d2:	98 89       	ldd	r25, Y+16	; 0x10
    32d4:	a9 89       	ldd	r26, Y+17	; 0x11
    32d6:	ba 89       	ldd	r27, Y+18	; 0x12
    32d8:	5c 01       	movw	r10, r24
    32da:	6d 01       	movw	r12, r26
    32dc:	e1 2c       	mov	r14, r1
    32de:	f1 2c       	mov	r15, r1
    32e0:	00 e0       	ldi	r16, 0x00	; 0
    32e2:	10 e0       	ldi	r17, 0x00	; 0
    32e4:	98 01       	movw	r18, r16
    32e6:	40 e0       	ldi	r20, 0x00	; 0
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	ba 01       	movw	r22, r20
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <xTaskGenericNotifyWait>
    32f2:	8f 81       	ldd	r24, Y+7	; 0x07
    32f4:	98 85       	ldd	r25, Y+8	; 0x08
    32f6:	fc 01       	movw	r30, r24
    32f8:	11 86       	std	Z+9, r1	; 0x09
    32fa:	10 86       	std	Z+8, r1	; 0x08
    32fc:	8f 81       	ldd	r24, Y+7	; 0x07
    32fe:	98 85       	ldd	r25, Y+8	; 0x08
    3300:	ec d1       	rcall	.+984    	; 0x36da <prvBytesInBuffer>
    3302:	9c 83       	std	Y+4, r25	; 0x04
    3304:	8b 83       	std	Y+3, r24	; 0x03
    3306:	05 c0       	rjmp	.+10     	; 0x3312 <xStreamBufferReceive+0x104>
    3308:	8f 81       	ldd	r24, Y+7	; 0x07
    330a:	98 85       	ldd	r25, Y+8	; 0x08
    330c:	e6 d1       	rcall	.+972    	; 0x36da <prvBytesInBuffer>
    330e:	9c 83       	std	Y+4, r25	; 0x04
    3310:	8b 83       	std	Y+3, r24	; 0x03
    3312:	2b 81       	ldd	r18, Y+3	; 0x03
    3314:	3c 81       	ldd	r19, Y+4	; 0x04
    3316:	8d 81       	ldd	r24, Y+5	; 0x05
    3318:	9e 81       	ldd	r25, Y+6	; 0x06
    331a:	82 17       	cp	r24, r18
    331c:	93 07       	cpc	r25, r19
    331e:	70 f5       	brcc	.+92     	; 0x337c <xStreamBufferReceive+0x16e>
    3320:	ed 81       	ldd	r30, Y+5	; 0x05
    3322:	fe 81       	ldd	r31, Y+6	; 0x06
    3324:	2b 81       	ldd	r18, Y+3	; 0x03
    3326:	3c 81       	ldd	r19, Y+4	; 0x04
    3328:	4d 85       	ldd	r20, Y+13	; 0x0d
    332a:	5e 85       	ldd	r21, Y+14	; 0x0e
    332c:	6b 85       	ldd	r22, Y+11	; 0x0b
    332e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3330:	8f 81       	ldd	r24, Y+7	; 0x07
    3332:	98 85       	ldd	r25, Y+8	; 0x08
    3334:	8f 01       	movw	r16, r30
    3336:	35 d0       	rcall	.+106    	; 0x33a2 <prvReadMessageFromBuffer>
    3338:	9a 83       	std	Y+2, r25	; 0x02
    333a:	89 83       	std	Y+1, r24	; 0x01
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	9a 81       	ldd	r25, Y+2	; 0x02
    3340:	89 2b       	or	r24, r25
    3342:	e1 f0       	breq	.+56     	; 0x337c <xStreamBufferReceive+0x16e>
    3344:	f1 d4       	rcall	.+2530   	; 0x3d28 <vTaskSuspendAll>
    3346:	8f 81       	ldd	r24, Y+7	; 0x07
    3348:	98 85       	ldd	r25, Y+8	; 0x08
    334a:	fc 01       	movw	r30, r24
    334c:	82 85       	ldd	r24, Z+10	; 0x0a
    334e:	93 85       	ldd	r25, Z+11	; 0x0b
    3350:	89 2b       	or	r24, r25
    3352:	99 f0       	breq	.+38     	; 0x337a <xStreamBufferReceive+0x16c>
    3354:	8f 81       	ldd	r24, Y+7	; 0x07
    3356:	98 85       	ldd	r25, Y+8	; 0x08
    3358:	fc 01       	movw	r30, r24
    335a:	82 85       	ldd	r24, Z+10	; 0x0a
    335c:	93 85       	ldd	r25, Z+11	; 0x0b
    335e:	e1 2c       	mov	r14, r1
    3360:	f1 2c       	mov	r15, r1
    3362:	00 e0       	ldi	r16, 0x00	; 0
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	a9 01       	movw	r20, r18
    336a:	60 e0       	ldi	r22, 0x00	; 0
    336c:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <xTaskGenericNotify>
    3370:	8f 81       	ldd	r24, Y+7	; 0x07
    3372:	98 85       	ldd	r25, Y+8	; 0x08
    3374:	fc 01       	movw	r30, r24
    3376:	13 86       	std	Z+11, r1	; 0x0b
    3378:	12 86       	std	Z+10, r1	; 0x0a
    337a:	e3 d4       	rcall	.+2502   	; 0x3d42 <xTaskResumeAll>
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	9a 81       	ldd	r25, Y+2	; 0x02
    3380:	62 96       	adiw	r28, 0x12	; 18
    3382:	0f b6       	in	r0, 0x3f	; 63
    3384:	f8 94       	cli
    3386:	de bf       	out	0x3e, r29	; 62
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	cd bf       	out	0x3d, r28	; 61
    338c:	df 91       	pop	r29
    338e:	cf 91       	pop	r28
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	ff 90       	pop	r15
    3396:	ef 90       	pop	r14
    3398:	df 90       	pop	r13
    339a:	cf 90       	pop	r12
    339c:	bf 90       	pop	r11
    339e:	af 90       	pop	r10
    33a0:	08 95       	ret

000033a2 <prvReadMessageFromBuffer>:
    33a2:	0f 93       	push	r16
    33a4:	1f 93       	push	r17
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	62 97       	sbiw	r28, 0x12	; 18
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	9a 87       	std	Y+10, r25	; 0x0a
    33bc:	89 87       	std	Y+9, r24	; 0x09
    33be:	7c 87       	std	Y+12, r23	; 0x0c
    33c0:	6b 87       	std	Y+11, r22	; 0x0b
    33c2:	5e 87       	std	Y+14, r21	; 0x0e
    33c4:	4d 87       	std	Y+13, r20	; 0x0d
    33c6:	38 8b       	std	Y+16, r19	; 0x10
    33c8:	2f 87       	std	Y+15, r18	; 0x0f
    33ca:	1a 8b       	std	Y+18, r17	; 0x12
    33cc:	09 8b       	std	Y+17, r16	; 0x11
    33ce:	89 89       	ldd	r24, Y+17	; 0x11
    33d0:	9a 89       	ldd	r25, Y+18	; 0x12
    33d2:	89 2b       	or	r24, r25
    33d4:	81 f1       	breq	.+96     	; 0x3436 <prvReadMessageFromBuffer+0x94>
    33d6:	89 85       	ldd	r24, Y+9	; 0x09
    33d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33da:	fc 01       	movw	r30, r24
    33dc:	80 81       	ld	r24, Z
    33de:	91 81       	ldd	r25, Z+1	; 0x01
    33e0:	9c 83       	std	Y+4, r25	; 0x04
    33e2:	8b 83       	std	Y+3, r24	; 0x03
    33e4:	2f 85       	ldd	r18, Y+15	; 0x0f
    33e6:	38 89       	ldd	r19, Y+16	; 0x10
    33e8:	49 89       	ldd	r20, Y+17	; 0x11
    33ea:	5a 89       	ldd	r21, Y+18	; 0x12
    33ec:	be 01       	movw	r22, r28
    33ee:	69 5f       	subi	r22, 0xF9	; 249
    33f0:	7f 4f       	sbci	r23, 0xFF	; 255
    33f2:	89 85       	ldd	r24, Y+9	; 0x09
    33f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f6:	ca d0       	rcall	.+404    	; 0x358c <prvReadBytesFromBuffer>
    33f8:	8f 81       	ldd	r24, Y+7	; 0x07
    33fa:	98 85       	ldd	r25, Y+8	; 0x08
    33fc:	9a 83       	std	Y+2, r25	; 0x02
    33fe:	89 83       	std	Y+1, r24	; 0x01
    3400:	2f 85       	ldd	r18, Y+15	; 0x0f
    3402:	38 89       	ldd	r19, Y+16	; 0x10
    3404:	89 89       	ldd	r24, Y+17	; 0x11
    3406:	9a 89       	ldd	r25, Y+18	; 0x12
    3408:	a9 01       	movw	r20, r18
    340a:	48 1b       	sub	r20, r24
    340c:	59 0b       	sbc	r21, r25
    340e:	ca 01       	movw	r24, r20
    3410:	98 8b       	std	Y+16, r25	; 0x10
    3412:	8f 87       	std	Y+15, r24	; 0x0f
    3414:	29 81       	ldd	r18, Y+1	; 0x01
    3416:	3a 81       	ldd	r19, Y+2	; 0x02
    3418:	8d 85       	ldd	r24, Y+13	; 0x0d
    341a:	9e 85       	ldd	r25, Y+14	; 0x0e
    341c:	82 17       	cp	r24, r18
    341e:	93 07       	cpc	r25, r19
    3420:	70 f4       	brcc	.+28     	; 0x343e <prvReadMessageFromBuffer+0x9c>
    3422:	89 85       	ldd	r24, Y+9	; 0x09
    3424:	9a 85       	ldd	r25, Y+10	; 0x0a
    3426:	2b 81       	ldd	r18, Y+3	; 0x03
    3428:	3c 81       	ldd	r19, Y+4	; 0x04
    342a:	fc 01       	movw	r30, r24
    342c:	31 83       	std	Z+1, r19	; 0x01
    342e:	20 83       	st	Z, r18
    3430:	1a 82       	std	Y+2, r1	; 0x02
    3432:	19 82       	std	Y+1, r1	; 0x01
    3434:	04 c0       	rjmp	.+8      	; 0x343e <prvReadMessageFromBuffer+0x9c>
    3436:	8d 85       	ldd	r24, Y+13	; 0x0d
    3438:	9e 85       	ldd	r25, Y+14	; 0x0e
    343a:	9a 83       	std	Y+2, r25	; 0x02
    343c:	89 83       	std	Y+1, r24	; 0x01
    343e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3440:	38 89       	ldd	r19, Y+16	; 0x10
    3442:	49 81       	ldd	r20, Y+1	; 0x01
    3444:	5a 81       	ldd	r21, Y+2	; 0x02
    3446:	6b 85       	ldd	r22, Y+11	; 0x0b
    3448:	7c 85       	ldd	r23, Y+12	; 0x0c
    344a:	89 85       	ldd	r24, Y+9	; 0x09
    344c:	9a 85       	ldd	r25, Y+10	; 0x0a
    344e:	9e d0       	rcall	.+316    	; 0x358c <prvReadBytesFromBuffer>
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
    3454:	8d 81       	ldd	r24, Y+5	; 0x05
    3456:	9e 81       	ldd	r25, Y+6	; 0x06
    3458:	62 96       	adiw	r28, 0x12	; 18
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	df 91       	pop	r29
    3466:	cf 91       	pop	r28
    3468:	1f 91       	pop	r17
    346a:	0f 91       	pop	r16
    346c:	08 95       	ret

0000346e <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	2e 97       	sbiw	r28, 0x0e	; 14
    3478:	0f b6       	in	r0, 0x3f	; 63
    347a:	f8 94       	cli
    347c:	de bf       	out	0x3e, r29	; 62
    347e:	0f be       	out	0x3f, r0	; 63
    3480:	cd bf       	out	0x3d, r28	; 61
    3482:	9a 87       	std	Y+10, r25	; 0x0a
    3484:	89 87       	std	Y+9, r24	; 0x09
    3486:	7c 87       	std	Y+12, r23	; 0x0c
    3488:	6b 87       	std	Y+11, r22	; 0x0b
    348a:	5e 87       	std	Y+14, r21	; 0x0e
    348c:	4d 87       	std	Y+13, r20	; 0x0d
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    348e:	89 85       	ldd	r24, Y+9	; 0x09
    3490:	9a 85       	ldd	r25, Y+10	; 0x0a
    3492:	fc 01       	movw	r30, r24
    3494:	82 81       	ldd	r24, Z+2	; 0x02
    3496:	93 81       	ldd	r25, Z+3	; 0x03
    3498:	9a 83       	std	Y+2, r25	; 0x02
    349a:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    349c:	89 85       	ldd	r24, Y+9	; 0x09
    349e:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a0:	fc 01       	movw	r30, r24
    34a2:	24 81       	ldd	r18, Z+4	; 0x04
    34a4:	35 81       	ldd	r19, Z+5	; 0x05
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	9a 81       	ldd	r25, Y+2	; 0x02
    34aa:	a9 01       	movw	r20, r18
    34ac:	48 1b       	sub	r20, r24
    34ae:	59 0b       	sbc	r21, r25
    34b0:	ca 01       	movw	r24, r20
    34b2:	9c 83       	std	Y+4, r25	; 0x04
    34b4:	8b 83       	std	Y+3, r24	; 0x03
    34b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ba:	9e 83       	std	Y+6, r25	; 0x06
    34bc:	8d 83       	std	Y+5, r24	; 0x05
    34be:	2b 81       	ldd	r18, Y+3	; 0x03
    34c0:	3c 81       	ldd	r19, Y+4	; 0x04
    34c2:	8d 81       	ldd	r24, Y+5	; 0x05
    34c4:	9e 81       	ldd	r25, Y+6	; 0x06
    34c6:	28 17       	cp	r18, r24
    34c8:	39 07       	cpc	r19, r25
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <prvWriteBytesToBuffer+0x60>
    34cc:	c9 01       	movw	r24, r18
    34ce:	98 87       	std	Y+8, r25	; 0x08
    34d0:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    34d2:	89 85       	ldd	r24, Y+9	; 0x09
    34d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d6:	fc 01       	movw	r30, r24
    34d8:	24 85       	ldd	r18, Z+12	; 0x0c
    34da:	35 85       	ldd	r19, Z+13	; 0x0d
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	9a 81       	ldd	r25, Y+2	; 0x02
    34e0:	82 0f       	add	r24, r18
    34e2:	93 1f       	adc	r25, r19
    34e4:	4f 81       	ldd	r20, Y+7	; 0x07
    34e6:	58 85       	ldd	r21, Y+8	; 0x08
    34e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    34ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    34ec:	b9 01       	movw	r22, r18
    34ee:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
    34f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    34f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    34f6:	8f 81       	ldd	r24, Y+7	; 0x07
    34f8:	98 85       	ldd	r25, Y+8	; 0x08
    34fa:	82 17       	cp	r24, r18
    34fc:	93 07       	cpc	r25, r19
    34fe:	a8 f4       	brcc	.+42     	; 0x352a <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3500:	2d 85       	ldd	r18, Y+13	; 0x0d
    3502:	3e 85       	ldd	r19, Y+14	; 0x0e
    3504:	8f 81       	ldd	r24, Y+7	; 0x07
    3506:	98 85       	ldd	r25, Y+8	; 0x08
    3508:	a9 01       	movw	r20, r18
    350a:	48 1b       	sub	r20, r24
    350c:	59 0b       	sbc	r21, r25
    350e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3510:	3c 85       	ldd	r19, Y+12	; 0x0c
    3512:	8f 81       	ldd	r24, Y+7	; 0x07
    3514:	98 85       	ldd	r25, Y+8	; 0x08
    3516:	28 0f       	add	r18, r24
    3518:	39 1f       	adc	r19, r25
    351a:	89 85       	ldd	r24, Y+9	; 0x09
    351c:	9a 85       	ldd	r25, Y+10	; 0x0a
    351e:	fc 01       	movw	r30, r24
    3520:	84 85       	ldd	r24, Z+12	; 0x0c
    3522:	95 85       	ldd	r25, Z+13	; 0x0d
    3524:	b9 01       	movw	r22, r18
    3526:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    352a:	29 81       	ldd	r18, Y+1	; 0x01
    352c:	3a 81       	ldd	r19, Y+2	; 0x02
    352e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3530:	9e 85       	ldd	r25, Y+14	; 0x0e
    3532:	82 0f       	add	r24, r18
    3534:	93 1f       	adc	r25, r19
    3536:	9a 83       	std	Y+2, r25	; 0x02
    3538:	89 83       	std	Y+1, r24	; 0x01

    if( xNextHead >= pxStreamBuffer->xLength )
    353a:	89 85       	ldd	r24, Y+9	; 0x09
    353c:	9a 85       	ldd	r25, Y+10	; 0x0a
    353e:	fc 01       	movw	r30, r24
    3540:	24 81       	ldd	r18, Z+4	; 0x04
    3542:	35 81       	ldd	r19, Z+5	; 0x05
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	82 17       	cp	r24, r18
    354a:	93 07       	cpc	r25, r19
    354c:	68 f0       	brcs	.+26     	; 0x3568 <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	fc 01       	movw	r30, r24
    3554:	84 81       	ldd	r24, Z+4	; 0x04
    3556:	95 81       	ldd	r25, Z+5	; 0x05
    3558:	29 81       	ldd	r18, Y+1	; 0x01
    355a:	3a 81       	ldd	r19, Y+2	; 0x02
    355c:	a9 01       	movw	r20, r18
    355e:	48 1b       	sub	r20, r24
    3560:	59 0b       	sbc	r21, r25
    3562:	ca 01       	movw	r24, r20
    3564:	9a 83       	std	Y+2, r25	; 0x02
    3566:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	9a 85       	ldd	r25, Y+10	; 0x0a
    356c:	29 81       	ldd	r18, Y+1	; 0x01
    356e:	3a 81       	ldd	r19, Y+2	; 0x02
    3570:	fc 01       	movw	r30, r24
    3572:	33 83       	std	Z+3, r19	; 0x03
    3574:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    3576:	8d 85       	ldd	r24, Y+13	; 0x0d
    3578:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    357a:	2e 96       	adiw	r28, 0x0e	; 14
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	de bf       	out	0x3e, r29	; 62
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	08 95       	ret

0000358c <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
    358c:	cf 93       	push	r28
    358e:	df 93       	push	r29
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
    3594:	66 97       	sbiw	r28, 0x16	; 22
    3596:	0f b6       	in	r0, 0x3f	; 63
    3598:	f8 94       	cli
    359a:	de bf       	out	0x3e, r29	; 62
    359c:	0f be       	out	0x3f, r0	; 63
    359e:	cd bf       	out	0x3d, r28	; 61
    35a0:	98 8b       	std	Y+16, r25	; 0x10
    35a2:	8f 87       	std	Y+15, r24	; 0x0f
    35a4:	7a 8b       	std	Y+18, r23	; 0x12
    35a6:	69 8b       	std	Y+17, r22	; 0x11
    35a8:	5c 8b       	std	Y+20, r21	; 0x14
    35aa:	4b 8b       	std	Y+19, r20	; 0x13
    35ac:	3e 8b       	std	Y+22, r19	; 0x16
    35ae:	2d 8b       	std	Y+21, r18	; 0x15
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    35b0:	8d 89       	ldd	r24, Y+21	; 0x15
    35b2:	9e 89       	ldd	r25, Y+22	; 0x16
    35b4:	9c 83       	std	Y+4, r25	; 0x04
    35b6:	8b 83       	std	Y+3, r24	; 0x03
    35b8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ba:	9c 89       	ldd	r25, Y+20	; 0x14
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	2b 81       	ldd	r18, Y+3	; 0x03
    35c2:	3c 81       	ldd	r19, Y+4	; 0x04
    35c4:	8d 81       	ldd	r24, Y+5	; 0x05
    35c6:	9e 81       	ldd	r25, Y+6	; 0x06
    35c8:	28 17       	cp	r18, r24
    35ca:	39 07       	cpc	r19, r25
    35cc:	08 f4       	brcc	.+2      	; 0x35d0 <prvReadBytesFromBuffer+0x44>
    35ce:	c9 01       	movw	r24, r18
    35d0:	98 87       	std	Y+8, r25	; 0x08
    35d2:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    35d4:	8f 81       	ldd	r24, Y+7	; 0x07
    35d6:	98 85       	ldd	r25, Y+8	; 0x08
    35d8:	89 2b       	or	r24, r25
    35da:	09 f4       	brne	.+2      	; 0x35de <prvReadBytesFromBuffer+0x52>
    35dc:	73 c0       	rjmp	.+230    	; 0x36c4 <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    35de:	8f 85       	ldd	r24, Y+15	; 0x0f
    35e0:	98 89       	ldd	r25, Y+16	; 0x10
    35e2:	fc 01       	movw	r30, r24
    35e4:	80 81       	ld	r24, Z
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	9a 83       	std	Y+2, r25	; 0x02
    35ea:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    35ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ee:	98 89       	ldd	r25, Y+16	; 0x10
    35f0:	fc 01       	movw	r30, r24
    35f2:	24 81       	ldd	r18, Z+4	; 0x04
    35f4:	35 81       	ldd	r19, Z+5	; 0x05
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	9a 81       	ldd	r25, Y+2	; 0x02
    35fa:	a9 01       	movw	r20, r18
    35fc:	48 1b       	sub	r20, r24
    35fe:	59 0b       	sbc	r21, r25
    3600:	ca 01       	movw	r24, r20
    3602:	9a 87       	std	Y+10, r25	; 0x0a
    3604:	89 87       	std	Y+9, r24	; 0x09
    3606:	8f 81       	ldd	r24, Y+7	; 0x07
    3608:	98 85       	ldd	r25, Y+8	; 0x08
    360a:	9c 87       	std	Y+12, r25	; 0x0c
    360c:	8b 87       	std	Y+11, r24	; 0x0b
    360e:	29 85       	ldd	r18, Y+9	; 0x09
    3610:	3a 85       	ldd	r19, Y+10	; 0x0a
    3612:	8b 85       	ldd	r24, Y+11	; 0x0b
    3614:	9c 85       	ldd	r25, Y+12	; 0x0c
    3616:	28 17       	cp	r18, r24
    3618:	39 07       	cpc	r19, r25
    361a:	08 f4       	brcc	.+2      	; 0x361e <prvReadBytesFromBuffer+0x92>
    361c:	c9 01       	movw	r24, r18
    361e:	9e 87       	std	Y+14, r25	; 0x0e
    3620:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3622:	8f 85       	ldd	r24, Y+15	; 0x0f
    3624:	98 89       	ldd	r25, Y+16	; 0x10
    3626:	fc 01       	movw	r30, r24
    3628:	24 85       	ldd	r18, Z+12	; 0x0c
    362a:	35 85       	ldd	r19, Z+13	; 0x0d
    362c:	89 81       	ldd	r24, Y+1	; 0x01
    362e:	9a 81       	ldd	r25, Y+2	; 0x02
    3630:	28 0f       	add	r18, r24
    3632:	39 1f       	adc	r19, r25
    3634:	4d 85       	ldd	r20, Y+13	; 0x0d
    3636:	5e 85       	ldd	r21, Y+14	; 0x0e
    3638:	89 89       	ldd	r24, Y+17	; 0x11
    363a:	9a 89       	ldd	r25, Y+18	; 0x12
    363c:	b9 01       	movw	r22, r18
    363e:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
    3642:	2f 81       	ldd	r18, Y+7	; 0x07
    3644:	38 85       	ldd	r19, Y+8	; 0x08
    3646:	8d 85       	ldd	r24, Y+13	; 0x0d
    3648:	9e 85       	ldd	r25, Y+14	; 0x0e
    364a:	82 17       	cp	r24, r18
    364c:	93 07       	cpc	r25, r19
    364e:	a0 f4       	brcc	.+40     	; 0x3678 <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3650:	2f 81       	ldd	r18, Y+7	; 0x07
    3652:	38 85       	ldd	r19, Y+8	; 0x08
    3654:	8d 85       	ldd	r24, Y+13	; 0x0d
    3656:	9e 85       	ldd	r25, Y+14	; 0x0e
    3658:	a9 01       	movw	r20, r18
    365a:	48 1b       	sub	r20, r24
    365c:	59 0b       	sbc	r21, r25
    365e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3660:	98 89       	ldd	r25, Y+16	; 0x10
    3662:	fc 01       	movw	r30, r24
    3664:	64 85       	ldd	r22, Z+12	; 0x0c
    3666:	75 85       	ldd	r23, Z+13	; 0x0d
    3668:	29 89       	ldd	r18, Y+17	; 0x11
    366a:	3a 89       	ldd	r19, Y+18	; 0x12
    366c:	8d 85       	ldd	r24, Y+13	; 0x0d
    366e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3670:	82 0f       	add	r24, r18
    3672:	93 1f       	adc	r25, r19
    3674:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
    3678:	29 81       	ldd	r18, Y+1	; 0x01
    367a:	3a 81       	ldd	r19, Y+2	; 0x02
    367c:	8f 81       	ldd	r24, Y+7	; 0x07
    367e:	98 85       	ldd	r25, Y+8	; 0x08
    3680:	82 0f       	add	r24, r18
    3682:	93 1f       	adc	r25, r19
    3684:	9a 83       	std	Y+2, r25	; 0x02
    3686:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    3688:	8f 85       	ldd	r24, Y+15	; 0x0f
    368a:	98 89       	ldd	r25, Y+16	; 0x10
    368c:	fc 01       	movw	r30, r24
    368e:	24 81       	ldd	r18, Z+4	; 0x04
    3690:	35 81       	ldd	r19, Z+5	; 0x05
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	9a 81       	ldd	r25, Y+2	; 0x02
    3696:	82 17       	cp	r24, r18
    3698:	93 07       	cpc	r25, r19
    369a:	68 f0       	brcs	.+26     	; 0x36b6 <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    369c:	8f 85       	ldd	r24, Y+15	; 0x0f
    369e:	98 89       	ldd	r25, Y+16	; 0x10
    36a0:	fc 01       	movw	r30, r24
    36a2:	84 81       	ldd	r24, Z+4	; 0x04
    36a4:	95 81       	ldd	r25, Z+5	; 0x05
    36a6:	29 81       	ldd	r18, Y+1	; 0x01
    36a8:	3a 81       	ldd	r19, Y+2	; 0x02
    36aa:	a9 01       	movw	r20, r18
    36ac:	48 1b       	sub	r20, r24
    36ae:	59 0b       	sbc	r21, r25
    36b0:	ca 01       	movw	r24, r20
    36b2:	9a 83       	std	Y+2, r25	; 0x02
    36b4:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    36b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36b8:	98 89       	ldd	r25, Y+16	; 0x10
    36ba:	29 81       	ldd	r18, Y+1	; 0x01
    36bc:	3a 81       	ldd	r19, Y+2	; 0x02
    36be:	fc 01       	movw	r30, r24
    36c0:	31 83       	std	Z+1, r19	; 0x01
    36c2:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    36c4:	8f 81       	ldd	r24, Y+7	; 0x07
    36c6:	98 85       	ldd	r25, Y+8	; 0x08
}
    36c8:	66 96       	adiw	r28, 0x16	; 22
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	08 95       	ret

000036da <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    36da:	cf 93       	push	r28
    36dc:	df 93       	push	r29
    36de:	00 d0       	rcall	.+0      	; 0x36e0 <prvBytesInBuffer+0x6>
    36e0:	1f 92       	push	r1
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	9c 83       	std	Y+4, r25	; 0x04
    36e8:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    36ea:	8b 81       	ldd	r24, Y+3	; 0x03
    36ec:	9c 81       	ldd	r25, Y+4	; 0x04
    36ee:	fc 01       	movw	r30, r24
    36f0:	24 81       	ldd	r18, Z+4	; 0x04
    36f2:	35 81       	ldd	r19, Z+5	; 0x05
    36f4:	8b 81       	ldd	r24, Y+3	; 0x03
    36f6:	9c 81       	ldd	r25, Y+4	; 0x04
    36f8:	fc 01       	movw	r30, r24
    36fa:	82 81       	ldd	r24, Z+2	; 0x02
    36fc:	93 81       	ldd	r25, Z+3	; 0x03
    36fe:	82 0f       	add	r24, r18
    3700:	93 1f       	adc	r25, r19
    3702:	9a 83       	std	Y+2, r25	; 0x02
    3704:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    3706:	8b 81       	ldd	r24, Y+3	; 0x03
    3708:	9c 81       	ldd	r25, Y+4	; 0x04
    370a:	fc 01       	movw	r30, r24
    370c:	80 81       	ld	r24, Z
    370e:	91 81       	ldd	r25, Z+1	; 0x01
    3710:	29 81       	ldd	r18, Y+1	; 0x01
    3712:	3a 81       	ldd	r19, Y+2	; 0x02
    3714:	a9 01       	movw	r20, r18
    3716:	48 1b       	sub	r20, r24
    3718:	59 0b       	sbc	r21, r25
    371a:	ca 01       	movw	r24, r20
    371c:	9a 83       	std	Y+2, r25	; 0x02
    371e:	89 83       	std	Y+1, r24	; 0x01

    if( xCount >= pxStreamBuffer->xLength )
    3720:	8b 81       	ldd	r24, Y+3	; 0x03
    3722:	9c 81       	ldd	r25, Y+4	; 0x04
    3724:	fc 01       	movw	r30, r24
    3726:	24 81       	ldd	r18, Z+4	; 0x04
    3728:	35 81       	ldd	r19, Z+5	; 0x05
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	9a 81       	ldd	r25, Y+2	; 0x02
    372e:	82 17       	cp	r24, r18
    3730:	93 07       	cpc	r25, r19
    3732:	68 f0       	brcs	.+26     	; 0x374e <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    3734:	8b 81       	ldd	r24, Y+3	; 0x03
    3736:	9c 81       	ldd	r25, Y+4	; 0x04
    3738:	fc 01       	movw	r30, r24
    373a:	84 81       	ldd	r24, Z+4	; 0x04
    373c:	95 81       	ldd	r25, Z+5	; 0x05
    373e:	29 81       	ldd	r18, Y+1	; 0x01
    3740:	3a 81       	ldd	r19, Y+2	; 0x02
    3742:	a9 01       	movw	r20, r18
    3744:	48 1b       	sub	r20, r24
    3746:	59 0b       	sbc	r21, r25
    3748:	ca 01       	movw	r24, r20
    374a:	9a 83       	std	Y+2, r25	; 0x02
    374c:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	df 91       	pop	r29
    375c:	cf 91       	pop	r28
    375e:	08 95       	ret

00003760 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    3760:	0f 93       	push	r16
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	29 97       	sbiw	r28, 0x09	; 9
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	9a 83       	std	Y+2, r25	; 0x02
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	7c 83       	std	Y+4, r23	; 0x04
    377c:	6b 83       	std	Y+3, r22	; 0x03
    377e:	5e 83       	std	Y+6, r21	; 0x06
    3780:	4d 83       	std	Y+5, r20	; 0x05
    3782:	38 87       	std	Y+8, r19	; 0x08
    3784:	2f 83       	std	Y+7, r18	; 0x07
    3786:	09 87       	std	Y+9, r16	; 0x09
            const BaseType_t xWriteValue = 0x55;
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	9a 81       	ldd	r25, Y+2	; 0x02
    378c:	4f e0       	ldi	r20, 0x0F	; 15
    378e:	50 e0       	ldi	r21, 0x00	; 0
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	70 e0       	ldi	r23, 0x00	; 0
    3794:	0e 94 81 46 	call	0x8d02	; 0x8d02 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	9a 81       	ldd	r25, Y+2	; 0x02
    379c:	2b 81       	ldd	r18, Y+3	; 0x03
    379e:	3c 81       	ldd	r19, Y+4	; 0x04
    37a0:	fc 01       	movw	r30, r24
    37a2:	35 87       	std	Z+13, r19	; 0x0d
    37a4:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
    37a8:	9a 81       	ldd	r25, Y+2	; 0x02
    37aa:	2d 81       	ldd	r18, Y+5	; 0x05
    37ac:	3e 81       	ldd	r19, Y+6	; 0x06
    37ae:	fc 01       	movw	r30, r24
    37b0:	35 83       	std	Z+5, r19	; 0x05
    37b2:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    37b4:	89 81       	ldd	r24, Y+1	; 0x01
    37b6:	9a 81       	ldd	r25, Y+2	; 0x02
    37b8:	2f 81       	ldd	r18, Y+7	; 0x07
    37ba:	38 85       	ldd	r19, Y+8	; 0x08
    37bc:	fc 01       	movw	r30, r24
    37be:	37 83       	std	Z+7, r19	; 0x07
    37c0:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	9a 81       	ldd	r25, Y+2	; 0x02
    37c6:	29 85       	ldd	r18, Y+9	; 0x09
    37c8:	fc 01       	movw	r30, r24
    37ca:	26 87       	std	Z+14, r18	; 0x0e
}
    37cc:	00 00       	nop
    37ce:	29 96       	adiw	r28, 0x09	; 9
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	df 91       	pop	r29
    37dc:	cf 91       	pop	r28
    37de:	0f 91       	pop	r16
    37e0:	08 95       	ret

000037e2 <xTaskCreate>:
    37e2:	af 92       	push	r10
    37e4:	bf 92       	push	r11
    37e6:	cf 92       	push	r12
    37e8:	df 92       	push	r13
    37ea:	ef 92       	push	r14
    37ec:	ff 92       	push	r15
    37ee:	0f 93       	push	r16
    37f0:	cf 93       	push	r28
    37f2:	df 93       	push	r29
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    37f8:	60 97       	sbiw	r28, 0x10	; 16
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	9f 83       	std	Y+7, r25	; 0x07
    3806:	8e 83       	std	Y+6, r24	; 0x06
    3808:	79 87       	std	Y+9, r23	; 0x09
    380a:	68 87       	std	Y+8, r22	; 0x08
    380c:	5b 87       	std	Y+11, r21	; 0x0b
    380e:	4a 87       	std	Y+10, r20	; 0x0a
    3810:	3d 87       	std	Y+13, r19	; 0x0d
    3812:	2c 87       	std	Y+12, r18	; 0x0c
    3814:	0e 87       	std	Y+14, r16	; 0x0e
    3816:	f8 8a       	std	Y+16, r15	; 0x10
    3818:	ef 86       	std	Y+15, r14	; 0x0f
    381a:	8a 85       	ldd	r24, Y+10	; 0x0a
    381c:	9b 85       	ldd	r25, Y+11	; 0x0b
    381e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <pvPortMalloc>
    3822:	9d 83       	std	Y+5, r25	; 0x05
    3824:	8c 83       	std	Y+4, r24	; 0x04
    3826:	8c 81       	ldd	r24, Y+4	; 0x04
    3828:	9d 81       	ldd	r25, Y+5	; 0x05
    382a:	89 2b       	or	r24, r25
    382c:	b9 f0       	breq	.+46     	; 0x385c <xTaskCreate+0x7a>
    382e:	84 e3       	ldi	r24, 0x34	; 52
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	0e 94 55 0a 	call	0x14aa	; 0x14aa <pvPortMalloc>
    3836:	9a 83       	std	Y+2, r25	; 0x02
    3838:	89 83       	std	Y+1, r24	; 0x01
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	9a 81       	ldd	r25, Y+2	; 0x02
    383e:	89 2b       	or	r24, r25
    3840:	41 f0       	breq	.+16     	; 0x3852 <xTaskCreate+0x70>
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	9a 81       	ldd	r25, Y+2	; 0x02
    3846:	2c 81       	ldd	r18, Y+4	; 0x04
    3848:	3d 81       	ldd	r19, Y+5	; 0x05
    384a:	fc 01       	movw	r30, r24
    384c:	34 8f       	std	Z+28, r19	; 0x1c
    384e:	23 8f       	std	Z+27, r18	; 0x1b
    3850:	07 c0       	rjmp	.+14     	; 0x3860 <xTaskCreate+0x7e>
    3852:	8c 81       	ldd	r24, Y+4	; 0x04
    3854:	9d 81       	ldd	r25, Y+5	; 0x05
    3856:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <vPortFree>
    385a:	02 c0       	rjmp	.+4      	; 0x3860 <xTaskCreate+0x7e>
    385c:	1a 82       	std	Y+2, r1	; 0x02
    385e:	19 82       	std	Y+1, r1	; 0x01
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	9a 81       	ldd	r25, Y+2	; 0x02
    3864:	89 2b       	or	r24, r25
    3866:	c1 f0       	breq	.+48     	; 0x3898 <xTaskCreate+0xb6>
    3868:	a9 81       	ldd	r26, Y+1	; 0x01
    386a:	ba 81       	ldd	r27, Y+2	; 0x02
    386c:	ef 85       	ldd	r30, Y+15	; 0x0f
    386e:	f8 89       	ldd	r31, Y+16	; 0x10
    3870:	2c 85       	ldd	r18, Y+12	; 0x0c
    3872:	3d 85       	ldd	r19, Y+13	; 0x0d
    3874:	4a 85       	ldd	r20, Y+10	; 0x0a
    3876:	5b 85       	ldd	r21, Y+11	; 0x0b
    3878:	68 85       	ldd	r22, Y+8	; 0x08
    387a:	79 85       	ldd	r23, Y+9	; 0x09
    387c:	8e 81       	ldd	r24, Y+6	; 0x06
    387e:	9f 81       	ldd	r25, Y+7	; 0x07
    3880:	a1 2c       	mov	r10, r1
    3882:	b1 2c       	mov	r11, r1
    3884:	6d 01       	movw	r12, r26
    3886:	7f 01       	movw	r14, r30
    3888:	0e 85       	ldd	r16, Y+14	; 0x0e
    388a:	19 d0       	rcall	.+50     	; 0x38be <prvInitialiseNewTask>
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	9a 81       	ldd	r25, Y+2	; 0x02
    3890:	05 d1       	rcall	.+522    	; 0x3a9c <prvAddNewTaskToReadyList>
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	8b 83       	std	Y+3, r24	; 0x03
    3896:	02 c0       	rjmp	.+4      	; 0x389c <xTaskCreate+0xba>
    3898:	8f ef       	ldi	r24, 0xFF	; 255
    389a:	8b 83       	std	Y+3, r24	; 0x03
    389c:	8b 81       	ldd	r24, Y+3	; 0x03
    389e:	60 96       	adiw	r28, 0x10	; 16
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	0f 91       	pop	r16
    38b0:	ff 90       	pop	r15
    38b2:	ef 90       	pop	r14
    38b4:	df 90       	pop	r13
    38b6:	cf 90       	pop	r12
    38b8:	bf 90       	pop	r11
    38ba:	af 90       	pop	r10
    38bc:	08 95       	ret

000038be <prvInitialiseNewTask>:
    38be:	af 92       	push	r10
    38c0:	bf 92       	push	r11
    38c2:	cf 92       	push	r12
    38c4:	df 92       	push	r13
    38c6:	ef 92       	push	r14
    38c8:	ff 92       	push	r15
    38ca:	0f 93       	push	r16
    38cc:	1f 93       	push	r17
    38ce:	cf 93       	push	r28
    38d0:	df 93       	push	r29
    38d2:	cd b7       	in	r28, 0x3d	; 61
    38d4:	de b7       	in	r29, 0x3e	; 62
    38d6:	62 97       	sbiw	r28, 0x12	; 18
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	de bf       	out	0x3e, r29	; 62
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	cd bf       	out	0x3d, r28	; 61
    38e2:	9d 83       	std	Y+5, r25	; 0x05
    38e4:	8c 83       	std	Y+4, r24	; 0x04
    38e6:	7f 83       	std	Y+7, r23	; 0x07
    38e8:	6e 83       	std	Y+6, r22	; 0x06
    38ea:	59 87       	std	Y+9, r21	; 0x09
    38ec:	48 87       	std	Y+8, r20	; 0x08
    38ee:	3b 87       	std	Y+11, r19	; 0x0b
    38f0:	2a 87       	std	Y+10, r18	; 0x0a
    38f2:	0c 87       	std	Y+12, r16	; 0x0c
    38f4:	fe 86       	std	Y+14, r15	; 0x0e
    38f6:	ed 86       	std	Y+13, r14	; 0x0d
    38f8:	d8 8a       	std	Y+16, r13	; 0x10
    38fa:	cf 86       	std	Y+15, r12	; 0x0f
    38fc:	ba 8a       	std	Y+18, r11	; 0x12
    38fe:	a9 8a       	std	Y+17, r10	; 0x11
    3900:	8f 85       	ldd	r24, Y+15	; 0x0f
    3902:	98 89       	ldd	r25, Y+16	; 0x10
    3904:	fc 01       	movw	r30, r24
    3906:	83 8d       	ldd	r24, Z+27	; 0x1b
    3908:	94 8d       	ldd	r25, Z+28	; 0x1c
    390a:	28 85       	ldd	r18, Y+8	; 0x08
    390c:	39 85       	ldd	r19, Y+9	; 0x09
    390e:	a9 01       	movw	r20, r18
    3910:	65 ea       	ldi	r22, 0xA5	; 165
    3912:	70 e0       	ldi	r23, 0x00	; 0
    3914:	0e 94 81 46 	call	0x8d02	; 0x8d02 <memset>
    3918:	8f 85       	ldd	r24, Y+15	; 0x0f
    391a:	98 89       	ldd	r25, Y+16	; 0x10
    391c:	fc 01       	movw	r30, r24
    391e:	23 8d       	ldd	r18, Z+27	; 0x1b
    3920:	34 8d       	ldd	r19, Z+28	; 0x1c
    3922:	88 85       	ldd	r24, Y+8	; 0x08
    3924:	99 85       	ldd	r25, Y+9	; 0x09
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	82 0f       	add	r24, r18
    392a:	93 1f       	adc	r25, r19
    392c:	9b 83       	std	Y+3, r25	; 0x03
    392e:	8a 83       	std	Y+2, r24	; 0x02
    3930:	8e 81       	ldd	r24, Y+6	; 0x06
    3932:	9f 81       	ldd	r25, Y+7	; 0x07
    3934:	89 2b       	or	r24, r25
    3936:	69 f1       	breq	.+90     	; 0x3992 <prvInitialiseNewTask+0xd4>
    3938:	19 82       	std	Y+1, r1	; 0x01
    393a:	21 c0       	rjmp	.+66     	; 0x397e <prvInitialiseNewTask+0xc0>
    393c:	89 81       	ldd	r24, Y+1	; 0x01
    393e:	88 2f       	mov	r24, r24
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	29 81       	ldd	r18, Y+1	; 0x01
    3944:	22 2f       	mov	r18, r18
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	4e 81       	ldd	r20, Y+6	; 0x06
    394a:	5f 81       	ldd	r21, Y+7	; 0x07
    394c:	24 0f       	add	r18, r20
    394e:	35 1f       	adc	r19, r21
    3950:	f9 01       	movw	r30, r18
    3952:	40 81       	ld	r20, Z
    3954:	2f 85       	ldd	r18, Y+15	; 0x0f
    3956:	38 89       	ldd	r19, Y+16	; 0x10
    3958:	82 0f       	add	r24, r18
    395a:	93 1f       	adc	r25, r19
    395c:	4d 96       	adiw	r24, 0x1d	; 29
    395e:	fc 01       	movw	r30, r24
    3960:	40 83       	st	Z, r20
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	88 2f       	mov	r24, r24
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	2e 81       	ldd	r18, Y+6	; 0x06
    396a:	3f 81       	ldd	r19, Y+7	; 0x07
    396c:	82 0f       	add	r24, r18
    396e:	93 1f       	adc	r25, r19
    3970:	fc 01       	movw	r30, r24
    3972:	80 81       	ld	r24, Z
    3974:	88 23       	and	r24, r24
    3976:	39 f0       	breq	.+14     	; 0x3986 <prvInitialiseNewTask+0xc8>
    3978:	89 81       	ldd	r24, Y+1	; 0x01
    397a:	8f 5f       	subi	r24, 0xFF	; 255
    397c:	89 83       	std	Y+1, r24	; 0x01
    397e:	89 81       	ldd	r24, Y+1	; 0x01
    3980:	80 31       	cpi	r24, 0x10	; 16
    3982:	e0 f2       	brcs	.-72     	; 0x393c <prvInitialiseNewTask+0x7e>
    3984:	01 c0       	rjmp	.+2      	; 0x3988 <prvInitialiseNewTask+0xca>
    3986:	00 00       	nop
    3988:	8f 85       	ldd	r24, Y+15	; 0x0f
    398a:	98 89       	ldd	r25, Y+16	; 0x10
    398c:	fc 01       	movw	r30, r24
    398e:	14 a6       	std	Z+44, r1	; 0x2c
    3990:	04 c0       	rjmp	.+8      	; 0x399a <prvInitialiseNewTask+0xdc>
    3992:	8f 85       	ldd	r24, Y+15	; 0x0f
    3994:	98 89       	ldd	r25, Y+16	; 0x10
    3996:	fc 01       	movw	r30, r24
    3998:	15 8e       	std	Z+29, r1	; 0x1d
    399a:	8c 85       	ldd	r24, Y+12	; 0x0c
    399c:	8a 30       	cpi	r24, 0x0A	; 10
    399e:	10 f0       	brcs	.+4      	; 0x39a4 <prvInitialiseNewTask+0xe6>
    39a0:	89 e0       	ldi	r24, 0x09	; 9
    39a2:	8c 87       	std	Y+12, r24	; 0x0c
    39a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a6:	98 89       	ldd	r25, Y+16	; 0x10
    39a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    39aa:	fc 01       	movw	r30, r24
    39ac:	22 8f       	std	Z+26, r18	; 0x1a
    39ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    39b0:	98 89       	ldd	r25, Y+16	; 0x10
    39b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    39b4:	fc 01       	movw	r30, r24
    39b6:	25 a7       	std	Z+45, r18	; 0x2d
    39b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ba:	98 89       	ldd	r25, Y+16	; 0x10
    39bc:	fc 01       	movw	r30, r24
    39be:	16 a6       	std	Z+46, r1	; 0x2e
    39c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    39c2:	98 89       	ldd	r25, Y+16	; 0x10
    39c4:	02 96       	adiw	r24, 0x02	; 2
    39c6:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <vListInitialiseItem>
    39ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    39cc:	98 89       	ldd	r25, Y+16	; 0x10
    39ce:	0e 96       	adiw	r24, 0x0e	; 14
    39d0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <vListInitialiseItem>
    39d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39d6:	98 89       	ldd	r25, Y+16	; 0x10
    39d8:	2f 85       	ldd	r18, Y+15	; 0x0f
    39da:	38 89       	ldd	r19, Y+16	; 0x10
    39dc:	fc 01       	movw	r30, r24
    39de:	33 87       	std	Z+11, r19	; 0x0b
    39e0:	22 87       	std	Z+10, r18	; 0x0a
    39e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    39e4:	88 2f       	mov	r24, r24
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	a0 e0       	ldi	r26, 0x00	; 0
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	2a e0       	ldi	r18, 0x0A	; 10
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e0       	ldi	r20, 0x00	; 0
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	79 01       	movw	r14, r18
    39f6:	8a 01       	movw	r16, r20
    39f8:	e8 1a       	sub	r14, r24
    39fa:	f9 0a       	sbc	r15, r25
    39fc:	0a 0b       	sbc	r16, r26
    39fe:	1b 0b       	sbc	r17, r27
    3a00:	d8 01       	movw	r26, r16
    3a02:	c7 01       	movw	r24, r14
    3a04:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a06:	38 89       	ldd	r19, Y+16	; 0x10
    3a08:	f9 01       	movw	r30, r18
    3a0a:	86 87       	std	Z+14, r24	; 0x0e
    3a0c:	97 87       	std	Z+15, r25	; 0x0f
    3a0e:	a0 8b       	std	Z+16, r26	; 0x10
    3a10:	b1 8b       	std	Z+17, r27	; 0x11
    3a12:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a14:	98 89       	ldd	r25, Y+16	; 0x10
    3a16:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a18:	38 89       	ldd	r19, Y+16	; 0x10
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	37 8b       	std	Z+23, r19	; 0x17
    3a1e:	26 8b       	std	Z+22, r18	; 0x16
    3a20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a22:	98 89       	ldd	r25, Y+16	; 0x10
    3a24:	8f 96       	adiw	r24, 0x2f	; 47
    3a26:	44 e0       	ldi	r20, 0x04	; 4
    3a28:	50 e0       	ldi	r21, 0x00	; 0
    3a2a:	60 e0       	ldi	r22, 0x00	; 0
    3a2c:	70 e0       	ldi	r23, 0x00	; 0
    3a2e:	0e 94 81 46 	call	0x8d02	; 0x8d02 <memset>
    3a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a34:	98 89       	ldd	r25, Y+16	; 0x10
    3a36:	c3 96       	adiw	r24, 0x33	; 51
    3a38:	41 e0       	ldi	r20, 0x01	; 1
    3a3a:	50 e0       	ldi	r21, 0x00	; 0
    3a3c:	60 e0       	ldi	r22, 0x00	; 0
    3a3e:	70 e0       	ldi	r23, 0x00	; 0
    3a40:	0e 94 81 46 	call	0x8d02	; 0x8d02 <memset>
    3a44:	4a 85       	ldd	r20, Y+10	; 0x0a
    3a46:	5b 85       	ldd	r21, Y+11	; 0x0b
    3a48:	2c 81       	ldd	r18, Y+4	; 0x04
    3a4a:	3d 81       	ldd	r19, Y+5	; 0x05
    3a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a50:	b9 01       	movw	r22, r18
    3a52:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <pxPortInitialiseStack>
    3a56:	9c 01       	movw	r18, r24
    3a58:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a5a:	98 89       	ldd	r25, Y+16	; 0x10
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	31 83       	std	Z+1, r19	; 0x01
    3a60:	20 83       	st	Z, r18
    3a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a66:	89 2b       	or	r24, r25
    3a68:	39 f0       	breq	.+14     	; 0x3a78 <prvInitialiseNewTask+0x1ba>
    3a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a6e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3a70:	38 89       	ldd	r19, Y+16	; 0x10
    3a72:	fc 01       	movw	r30, r24
    3a74:	31 83       	std	Z+1, r19	; 0x01
    3a76:	20 83       	st	Z, r18
    3a78:	00 00       	nop
    3a7a:	62 96       	adiw	r28, 0x12	; 18
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	df 91       	pop	r29
    3a88:	cf 91       	pop	r28
    3a8a:	1f 91       	pop	r17
    3a8c:	0f 91       	pop	r16
    3a8e:	ff 90       	pop	r15
    3a90:	ef 90       	pop	r14
    3a92:	df 90       	pop	r13
    3a94:	cf 90       	pop	r12
    3a96:	bf 90       	pop	r11
    3a98:	af 90       	pop	r10
    3a9a:	08 95       	ret

00003a9c <prvAddNewTaskToReadyList>:
    3a9c:	cf 93       	push	r28
    3a9e:	df 93       	push	r29
    3aa0:	00 d0       	rcall	.+0      	; 0x3aa2 <prvAddNewTaskToReadyList+0x6>
    3aa2:	1f 92       	push	r1
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	9c 83       	std	Y+4, r25	; 0x04
    3aaa:	8b 83       	std	Y+3, r24	; 0x03
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	f8 94       	cli
    3ab0:	0f 92       	push	r0
    3ab2:	80 91 3f 14 	lds	r24, 0x143F	; 0x80143f <uxCurrentNumberOfTasks>
    3ab6:	8f 5f       	subi	r24, 0xFF	; 255
    3ab8:	80 93 3f 14 	sts	0x143F, r24	; 0x80143f <uxCurrentNumberOfTasks>
    3abc:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    3ac0:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    3ac4:	89 2b       	or	r24, r25
    3ac6:	69 f4       	brne	.+26     	; 0x3ae2 <prvAddNewTaskToReadyList+0x46>
    3ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    3aca:	9c 81       	ldd	r25, Y+4	; 0x04
    3acc:	90 93 94 13 	sts	0x1394, r25	; 0x801394 <pxCurrentTCB+0x1>
    3ad0:	80 93 93 13 	sts	0x1393, r24	; 0x801393 <pxCurrentTCB>
    3ad4:	80 91 3f 14 	lds	r24, 0x143F	; 0x80143f <uxCurrentNumberOfTasks>
    3ad8:	81 30       	cpi	r24, 0x01	; 1
    3ada:	c9 f4       	brne	.+50     	; 0x3b0e <prvAddNewTaskToReadyList+0x72>
    3adc:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <prvInitialiseTaskLists>
    3ae0:	16 c0       	rjmp	.+44     	; 0x3b0e <prvAddNewTaskToReadyList+0x72>
    3ae2:	80 91 45 14 	lds	r24, 0x1445	; 0x801445 <xSchedulerRunning>
    3ae6:	88 23       	and	r24, r24
    3ae8:	91 f4       	brne	.+36     	; 0x3b0e <prvAddNewTaskToReadyList+0x72>
    3aea:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    3aee:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    3af2:	fc 01       	movw	r30, r24
    3af4:	22 8d       	ldd	r18, Z+26	; 0x1a
    3af6:	8b 81       	ldd	r24, Y+3	; 0x03
    3af8:	9c 81       	ldd	r25, Y+4	; 0x04
    3afa:	fc 01       	movw	r30, r24
    3afc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3afe:	82 17       	cp	r24, r18
    3b00:	30 f0       	brcs	.+12     	; 0x3b0e <prvAddNewTaskToReadyList+0x72>
    3b02:	8b 81       	ldd	r24, Y+3	; 0x03
    3b04:	9c 81       	ldd	r25, Y+4	; 0x04
    3b06:	90 93 94 13 	sts	0x1394, r25	; 0x801394 <pxCurrentTCB+0x1>
    3b0a:	80 93 93 13 	sts	0x1393, r24	; 0x801393 <pxCurrentTCB>
    3b0e:	80 91 4c 14 	lds	r24, 0x144C	; 0x80144c <uxTaskNumber>
    3b12:	8f 5f       	subi	r24, 0xFF	; 255
    3b14:	80 93 4c 14 	sts	0x144C, r24	; 0x80144c <uxTaskNumber>
    3b18:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3b20:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    3b24:	89 17       	cp	r24, r25
    3b26:	30 f4       	brcc	.+12     	; 0x3b34 <prvAddNewTaskToReadyList+0x98>
    3b28:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b30:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    3b34:	8b 81       	ldd	r24, Y+3	; 0x03
    3b36:	9c 81       	ldd	r25, Y+4	; 0x04
    3b38:	fc 01       	movw	r30, r24
    3b3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    3b3c:	28 2f       	mov	r18, r24
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	4b e0       	ldi	r20, 0x0B	; 11
    3b42:	42 9f       	mul	r20, r18
    3b44:	c0 01       	movw	r24, r0
    3b46:	43 9f       	mul	r20, r19
    3b48:	90 0d       	add	r25, r0
    3b4a:	11 24       	eor	r1, r1
    3b4c:	8a 56       	subi	r24, 0x6A	; 106
    3b4e:	9c 4e       	sbci	r25, 0xEC	; 236
    3b50:	fc 01       	movw	r30, r24
    3b52:	80 81       	ld	r24, Z
    3b54:	91 81       	ldd	r25, Z+1	; 0x01
    3b56:	9a 83       	std	Y+2, r25	; 0x02
    3b58:	89 83       	std	Y+1, r24	; 0x01
    3b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5e:	29 81       	ldd	r18, Y+1	; 0x01
    3b60:	3a 81       	ldd	r19, Y+2	; 0x02
    3b62:	fc 01       	movw	r30, r24
    3b64:	37 83       	std	Z+7, r19	; 0x07
    3b66:	26 83       	std	Z+6, r18	; 0x06
    3b68:	89 81       	ldd	r24, Y+1	; 0x01
    3b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	26 81       	ldd	r18, Z+6	; 0x06
    3b70:	37 81       	ldd	r19, Z+7	; 0x07
    3b72:	8b 81       	ldd	r24, Y+3	; 0x03
    3b74:	9c 81       	ldd	r25, Y+4	; 0x04
    3b76:	fc 01       	movw	r30, r24
    3b78:	31 87       	std	Z+9, r19	; 0x09
    3b7a:	20 87       	std	Z+8, r18	; 0x08
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b80:	fc 01       	movw	r30, r24
    3b82:	86 81       	ldd	r24, Z+6	; 0x06
    3b84:	97 81       	ldd	r25, Z+7	; 0x07
    3b86:	2b 81       	ldd	r18, Y+3	; 0x03
    3b88:	3c 81       	ldd	r19, Y+4	; 0x04
    3b8a:	2e 5f       	subi	r18, 0xFE	; 254
    3b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8e:	fc 01       	movw	r30, r24
    3b90:	35 83       	std	Z+5, r19	; 0x05
    3b92:	24 83       	std	Z+4, r18	; 0x04
    3b94:	8b 81       	ldd	r24, Y+3	; 0x03
    3b96:	9c 81       	ldd	r25, Y+4	; 0x04
    3b98:	9c 01       	movw	r18, r24
    3b9a:	2e 5f       	subi	r18, 0xFE	; 254
    3b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba2:	fc 01       	movw	r30, r24
    3ba4:	37 83       	std	Z+7, r19	; 0x07
    3ba6:	26 83       	std	Z+6, r18	; 0x06
    3ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    3baa:	9c 81       	ldd	r25, Y+4	; 0x04
    3bac:	fc 01       	movw	r30, r24
    3bae:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bb0:	28 2f       	mov	r18, r24
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	4b e0       	ldi	r20, 0x0B	; 11
    3bb6:	42 9f       	mul	r20, r18
    3bb8:	c0 01       	movw	r24, r0
    3bba:	43 9f       	mul	r20, r19
    3bbc:	90 0d       	add	r25, r0
    3bbe:	11 24       	eor	r1, r1
    3bc0:	9c 01       	movw	r18, r24
    3bc2:	2b 56       	subi	r18, 0x6B	; 107
    3bc4:	3c 4e       	sbci	r19, 0xEC	; 236
    3bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bca:	fc 01       	movw	r30, r24
    3bcc:	35 87       	std	Z+13, r19	; 0x0d
    3bce:	24 87       	std	Z+12, r18	; 0x0c
    3bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bd8:	88 2f       	mov	r24, r24
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	4b e0       	ldi	r20, 0x0B	; 11
    3bde:	48 9f       	mul	r20, r24
    3be0:	90 01       	movw	r18, r0
    3be2:	49 9f       	mul	r20, r25
    3be4:	30 0d       	add	r19, r0
    3be6:	11 24       	eor	r1, r1
    3be8:	2b 56       	subi	r18, 0x6B	; 107
    3bea:	3c 4e       	sbci	r19, 0xEC	; 236
    3bec:	f9 01       	movw	r30, r18
    3bee:	20 81       	ld	r18, Z
    3bf0:	41 e0       	ldi	r20, 0x01	; 1
    3bf2:	42 0f       	add	r20, r18
    3bf4:	5b e0       	ldi	r21, 0x0B	; 11
    3bf6:	58 9f       	mul	r21, r24
    3bf8:	90 01       	movw	r18, r0
    3bfa:	59 9f       	mul	r21, r25
    3bfc:	30 0d       	add	r19, r0
    3bfe:	11 24       	eor	r1, r1
    3c00:	c9 01       	movw	r24, r18
    3c02:	8b 56       	subi	r24, 0x6B	; 107
    3c04:	9c 4e       	sbci	r25, 0xEC	; 236
    3c06:	fc 01       	movw	r30, r24
    3c08:	40 83       	st	Z, r20
    3c0a:	0f 90       	pop	r0
    3c0c:	0f be       	out	0x3f, r0	; 63
    3c0e:	80 91 45 14 	lds	r24, 0x1445	; 0x801445 <xSchedulerRunning>
    3c12:	88 23       	and	r24, r24
    3c14:	71 f0       	breq	.+28     	; 0x3c32 <prvAddNewTaskToReadyList+0x196>
    3c16:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    3c1a:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    3c1e:	fc 01       	movw	r30, r24
    3c20:	22 8d       	ldd	r18, Z+26	; 0x1a
    3c22:	8b 81       	ldd	r24, Y+3	; 0x03
    3c24:	9c 81       	ldd	r25, Y+4	; 0x04
    3c26:	fc 01       	movw	r30, r24
    3c28:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c2a:	28 17       	cp	r18, r24
    3c2c:	10 f4       	brcc	.+4      	; 0x3c32 <prvAddNewTaskToReadyList+0x196>
    3c2e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vPortYield>
    3c32:	00 00       	nop
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	df 91       	pop	r29
    3c3e:	cf 91       	pop	r28
    3c40:	08 95       	ret

00003c42 <vTaskDelay>:
    3c42:	cf 93       	push	r28
    3c44:	df 93       	push	r29
    3c46:	00 d0       	rcall	.+0      	; 0x3c48 <vTaskDelay+0x6>
    3c48:	1f 92       	push	r1
    3c4a:	1f 92       	push	r1
    3c4c:	cd b7       	in	r28, 0x3d	; 61
    3c4e:	de b7       	in	r29, 0x3e	; 62
    3c50:	6a 83       	std	Y+2, r22	; 0x02
    3c52:	7b 83       	std	Y+3, r23	; 0x03
    3c54:	8c 83       	std	Y+4, r24	; 0x04
    3c56:	9d 83       	std	Y+5, r25	; 0x05
    3c58:	19 82       	std	Y+1, r1	; 0x01
    3c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5e:	ac 81       	ldd	r26, Y+4	; 0x04
    3c60:	bd 81       	ldd	r27, Y+5	; 0x05
    3c62:	89 2b       	or	r24, r25
    3c64:	8a 2b       	or	r24, r26
    3c66:	8b 2b       	or	r24, r27
    3c68:	61 f0       	breq	.+24     	; 0x3c82 <vTaskDelay+0x40>
    3c6a:	5e d0       	rcall	.+188    	; 0x3d28 <vTaskSuspendAll>
    3c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c70:	ac 81       	ldd	r26, Y+4	; 0x04
    3c72:	bd 81       	ldd	r27, Y+5	; 0x05
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	bc 01       	movw	r22, r24
    3c78:	cd 01       	movw	r24, r26
    3c7a:	0e 94 32 31 	call	0x6264	; 0x6264 <prvAddCurrentTaskToDelayedList>
    3c7e:	61 d0       	rcall	.+194    	; 0x3d42 <xTaskResumeAll>
    3c80:	89 83       	std	Y+1, r24	; 0x01
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	88 23       	and	r24, r24
    3c86:	11 f4       	brne	.+4      	; 0x3c8c <vTaskDelay+0x4a>
    3c88:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vPortYield>
    3c8c:	00 00       	nop
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	08 95       	ret

00003c9e <vTaskStartScheduler>:
    3c9e:	ef 92       	push	r14
    3ca0:	ff 92       	push	r15
    3ca2:	0f 93       	push	r16
    3ca4:	cf 93       	push	r28
    3ca6:	df 93       	push	r29
    3ca8:	1f 92       	push	r1
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	0f 2e       	mov	r0, r31
    3cb0:	f1 e5       	ldi	r31, 0x51	; 81
    3cb2:	ef 2e       	mov	r14, r31
    3cb4:	f4 e1       	ldi	r31, 0x14	; 20
    3cb6:	ff 2e       	mov	r15, r31
    3cb8:	f0 2d       	mov	r31, r0
    3cba:	00 e0       	ldi	r16, 0x00	; 0
    3cbc:	20 e0       	ldi	r18, 0x00	; 0
    3cbe:	30 e0       	ldi	r19, 0x00	; 0
    3cc0:	40 ec       	ldi	r20, 0xC0	; 192
    3cc2:	50 e0       	ldi	r21, 0x00	; 0
    3cc4:	64 e2       	ldi	r22, 0x24	; 36
    3cc6:	76 e0       	ldi	r23, 0x06	; 6
    3cc8:	8c e7       	ldi	r24, 0x7C	; 124
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	8a dd       	rcall	.-1260   	; 0x37e2 <xTaskCreate>
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	81 30       	cpi	r24, 0x01	; 1
    3cd4:	19 f4       	brne	.+6      	; 0x3cdc <vTaskStartScheduler+0x3e>
    3cd6:	0e 94 15 32 	call	0x642a	; 0x642a <xTimerCreateTimerTask>
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	81 30       	cpi	r24, 0x01	; 1
    3ce0:	c9 f4       	brne	.+50     	; 0x3d14 <vTaskStartScheduler+0x76>
    3ce2:	f8 94       	cli
    3ce4:	8f ef       	ldi	r24, 0xFF	; 255
    3ce6:	9f ef       	ldi	r25, 0xFF	; 255
    3ce8:	dc 01       	movw	r26, r24
    3cea:	80 93 4d 14 	sts	0x144D, r24	; 0x80144d <xNextTaskUnblockTime>
    3cee:	90 93 4e 14 	sts	0x144E, r25	; 0x80144e <xNextTaskUnblockTime+0x1>
    3cf2:	a0 93 4f 14 	sts	0x144F, r26	; 0x80144f <xNextTaskUnblockTime+0x2>
    3cf6:	b0 93 50 14 	sts	0x1450, r27	; 0x801450 <xNextTaskUnblockTime+0x3>
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	80 93 45 14 	sts	0x1445, r24	; 0x801445 <xSchedulerRunning>
    3d00:	10 92 40 14 	sts	0x1440, r1	; 0x801440 <xTickCount>
    3d04:	10 92 41 14 	sts	0x1441, r1	; 0x801441 <xTickCount+0x1>
    3d08:	10 92 42 14 	sts	0x1442, r1	; 0x801442 <xTickCount+0x2>
    3d0c:	10 92 43 14 	sts	0x1443, r1	; 0x801443 <xTickCount+0x3>
    3d10:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <xPortStartScheduler>
    3d14:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    3d18:	00 00       	nop
    3d1a:	0f 90       	pop	r0
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	0f 91       	pop	r16
    3d22:	ff 90       	pop	r15
    3d24:	ef 90       	pop	r14
    3d26:	08 95       	ret

00003d28 <vTaskSuspendAll>:
    3d28:	cf 93       	push	r28
    3d2a:	df 93       	push	r29
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <uxSchedulerSuspended>
    3d34:	8f 5f       	subi	r24, 0xFF	; 255
    3d36:	80 93 53 14 	sts	0x1453, r24	; 0x801453 <uxSchedulerSuspended>
    3d3a:	00 00       	nop
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	08 95       	ret

00003d42 <xTaskResumeAll>:
    3d42:	cf 93       	push	r28
    3d44:	df 93       	push	r29
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	2d 97       	sbiw	r28, 0x0d	; 13
    3d4c:	0f b6       	in	r0, 0x3f	; 63
    3d4e:	f8 94       	cli
    3d50:	de bf       	out	0x3e, r29	; 62
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	cd bf       	out	0x3d, r28	; 61
    3d56:	1a 82       	std	Y+2, r1	; 0x02
    3d58:	19 82       	std	Y+1, r1	; 0x01
    3d5a:	1b 82       	std	Y+3, r1	; 0x03
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	f8 94       	cli
    3d60:	0f 92       	push	r0
    3d62:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <uxSchedulerSuspended>
    3d66:	81 50       	subi	r24, 0x01	; 1
    3d68:	80 93 53 14 	sts	0x1453, r24	; 0x801453 <uxSchedulerSuspended>
    3d6c:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <uxSchedulerSuspended>
    3d70:	88 23       	and	r24, r24
    3d72:	09 f0       	breq	.+2      	; 0x3d76 <xTaskResumeAll+0x34>
    3d74:	69 c1       	rjmp	.+722    	; 0x4048 <xTaskResumeAll+0x306>
    3d76:	80 91 3f 14 	lds	r24, 0x143F	; 0x80143f <uxCurrentNumberOfTasks>
    3d7a:	88 23       	and	r24, r24
    3d7c:	09 f4       	brne	.+2      	; 0x3d80 <xTaskResumeAll+0x3e>
    3d7e:	64 c1       	rjmp	.+712    	; 0x4048 <xTaskResumeAll+0x306>
    3d80:	1b c1       	rjmp	.+566    	; 0x3fb8 <xTaskResumeAll+0x276>
    3d82:	80 91 24 14 	lds	r24, 0x1424	; 0x801424 <xPendingReadyList+0x7>
    3d86:	90 91 25 14 	lds	r25, 0x1425	; 0x801425 <xPendingReadyList+0x8>
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	80 85       	ldd	r24, Z+8	; 0x08
    3d8e:	91 85       	ldd	r25, Z+9	; 0x09
    3d90:	9a 83       	std	Y+2, r25	; 0x02
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	9a 81       	ldd	r25, Y+2	; 0x02
    3d98:	fc 01       	movw	r30, r24
    3d9a:	80 8d       	ldd	r24, Z+24	; 0x18
    3d9c:	91 8d       	ldd	r25, Z+25	; 0x19
    3d9e:	99 87       	std	Y+9, r25	; 0x09
    3da0:	88 87       	std	Y+8, r24	; 0x08
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	9a 81       	ldd	r25, Y+2	; 0x02
    3da6:	fc 01       	movw	r30, r24
    3da8:	82 89       	ldd	r24, Z+18	; 0x12
    3daa:	93 89       	ldd	r25, Z+19	; 0x13
    3dac:	29 81       	ldd	r18, Y+1	; 0x01
    3dae:	3a 81       	ldd	r19, Y+2	; 0x02
    3db0:	f9 01       	movw	r30, r18
    3db2:	24 89       	ldd	r18, Z+20	; 0x14
    3db4:	35 89       	ldd	r19, Z+21	; 0x15
    3db6:	fc 01       	movw	r30, r24
    3db8:	37 83       	std	Z+7, r19	; 0x07
    3dba:	26 83       	std	Z+6, r18	; 0x06
    3dbc:	89 81       	ldd	r24, Y+1	; 0x01
    3dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc0:	fc 01       	movw	r30, r24
    3dc2:	84 89       	ldd	r24, Z+20	; 0x14
    3dc4:	95 89       	ldd	r25, Z+21	; 0x15
    3dc6:	29 81       	ldd	r18, Y+1	; 0x01
    3dc8:	3a 81       	ldd	r19, Y+2	; 0x02
    3dca:	f9 01       	movw	r30, r18
    3dcc:	22 89       	ldd	r18, Z+18	; 0x12
    3dce:	33 89       	ldd	r19, Z+19	; 0x13
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	35 83       	std	Z+5, r19	; 0x05
    3dd4:	24 83       	std	Z+4, r18	; 0x04
    3dd6:	88 85       	ldd	r24, Y+8	; 0x08
    3dd8:	99 85       	ldd	r25, Y+9	; 0x09
    3dda:	fc 01       	movw	r30, r24
    3ddc:	21 81       	ldd	r18, Z+1	; 0x01
    3dde:	32 81       	ldd	r19, Z+2	; 0x02
    3de0:	89 81       	ldd	r24, Y+1	; 0x01
    3de2:	9a 81       	ldd	r25, Y+2	; 0x02
    3de4:	0e 96       	adiw	r24, 0x0e	; 14
    3de6:	28 17       	cp	r18, r24
    3de8:	39 07       	cpc	r19, r25
    3dea:	51 f4       	brne	.+20     	; 0x3e00 <xTaskResumeAll+0xbe>
    3dec:	89 81       	ldd	r24, Y+1	; 0x01
    3dee:	9a 81       	ldd	r25, Y+2	; 0x02
    3df0:	fc 01       	movw	r30, r24
    3df2:	24 89       	ldd	r18, Z+20	; 0x14
    3df4:	35 89       	ldd	r19, Z+21	; 0x15
    3df6:	88 85       	ldd	r24, Y+8	; 0x08
    3df8:	99 85       	ldd	r25, Y+9	; 0x09
    3dfa:	fc 01       	movw	r30, r24
    3dfc:	32 83       	std	Z+2, r19	; 0x02
    3dfe:	21 83       	std	Z+1, r18	; 0x01
    3e00:	89 81       	ldd	r24, Y+1	; 0x01
    3e02:	9a 81       	ldd	r25, Y+2	; 0x02
    3e04:	fc 01       	movw	r30, r24
    3e06:	11 8e       	std	Z+25, r1	; 0x19
    3e08:	10 8e       	std	Z+24, r1	; 0x18
    3e0a:	88 85       	ldd	r24, Y+8	; 0x08
    3e0c:	99 85       	ldd	r25, Y+9	; 0x09
    3e0e:	fc 01       	movw	r30, r24
    3e10:	80 81       	ld	r24, Z
    3e12:	2f ef       	ldi	r18, 0xFF	; 255
    3e14:	28 0f       	add	r18, r24
    3e16:	88 85       	ldd	r24, Y+8	; 0x08
    3e18:	99 85       	ldd	r25, Y+9	; 0x09
    3e1a:	fc 01       	movw	r30, r24
    3e1c:	20 83       	st	Z, r18
    3e1e:	89 81       	ldd	r24, Y+1	; 0x01
    3e20:	9a 81       	ldd	r25, Y+2	; 0x02
    3e22:	fc 01       	movw	r30, r24
    3e24:	84 85       	ldd	r24, Z+12	; 0x0c
    3e26:	95 85       	ldd	r25, Z+13	; 0x0d
    3e28:	9b 87       	std	Y+11, r25	; 0x0b
    3e2a:	8a 87       	std	Y+10, r24	; 0x0a
    3e2c:	89 81       	ldd	r24, Y+1	; 0x01
    3e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e30:	fc 01       	movw	r30, r24
    3e32:	86 81       	ldd	r24, Z+6	; 0x06
    3e34:	97 81       	ldd	r25, Z+7	; 0x07
    3e36:	29 81       	ldd	r18, Y+1	; 0x01
    3e38:	3a 81       	ldd	r19, Y+2	; 0x02
    3e3a:	f9 01       	movw	r30, r18
    3e3c:	20 85       	ldd	r18, Z+8	; 0x08
    3e3e:	31 85       	ldd	r19, Z+9	; 0x09
    3e40:	fc 01       	movw	r30, r24
    3e42:	37 83       	std	Z+7, r19	; 0x07
    3e44:	26 83       	std	Z+6, r18	; 0x06
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
    3e48:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	80 85       	ldd	r24, Z+8	; 0x08
    3e4e:	91 85       	ldd	r25, Z+9	; 0x09
    3e50:	29 81       	ldd	r18, Y+1	; 0x01
    3e52:	3a 81       	ldd	r19, Y+2	; 0x02
    3e54:	f9 01       	movw	r30, r18
    3e56:	26 81       	ldd	r18, Z+6	; 0x06
    3e58:	37 81       	ldd	r19, Z+7	; 0x07
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	35 83       	std	Z+5, r19	; 0x05
    3e5e:	24 83       	std	Z+4, r18	; 0x04
    3e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e64:	fc 01       	movw	r30, r24
    3e66:	21 81       	ldd	r18, Z+1	; 0x01
    3e68:	32 81       	ldd	r19, Z+2	; 0x02
    3e6a:	89 81       	ldd	r24, Y+1	; 0x01
    3e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6e:	02 96       	adiw	r24, 0x02	; 2
    3e70:	28 17       	cp	r18, r24
    3e72:	39 07       	cpc	r19, r25
    3e74:	51 f4       	brne	.+20     	; 0x3e8a <xTaskResumeAll+0x148>
    3e76:	89 81       	ldd	r24, Y+1	; 0x01
    3e78:	9a 81       	ldd	r25, Y+2	; 0x02
    3e7a:	fc 01       	movw	r30, r24
    3e7c:	20 85       	ldd	r18, Z+8	; 0x08
    3e7e:	31 85       	ldd	r19, Z+9	; 0x09
    3e80:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e82:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e84:	fc 01       	movw	r30, r24
    3e86:	32 83       	std	Z+2, r19	; 0x02
    3e88:	21 83       	std	Z+1, r18	; 0x01
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e8e:	fc 01       	movw	r30, r24
    3e90:	15 86       	std	Z+13, r1	; 0x0d
    3e92:	14 86       	std	Z+12, r1	; 0x0c
    3e94:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e96:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e98:	fc 01       	movw	r30, r24
    3e9a:	80 81       	ld	r24, Z
    3e9c:	2f ef       	ldi	r18, 0xFF	; 255
    3e9e:	28 0f       	add	r18, r24
    3ea0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ea2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ea4:	fc 01       	movw	r30, r24
    3ea6:	20 83       	st	Z, r18
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3eac:	fc 01       	movw	r30, r24
    3eae:	92 8d       	ldd	r25, Z+26	; 0x1a
    3eb0:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    3eb4:	89 17       	cp	r24, r25
    3eb6:	30 f4       	brcc	.+12     	; 0x3ec4 <xTaskResumeAll+0x182>
    3eb8:	89 81       	ldd	r24, Y+1	; 0x01
    3eba:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ec0:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    3ec4:	89 81       	ldd	r24, Y+1	; 0x01
    3ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ec8:	fc 01       	movw	r30, r24
    3eca:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ecc:	28 2f       	mov	r18, r24
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	4b e0       	ldi	r20, 0x0B	; 11
    3ed2:	42 9f       	mul	r20, r18
    3ed4:	c0 01       	movw	r24, r0
    3ed6:	43 9f       	mul	r20, r19
    3ed8:	90 0d       	add	r25, r0
    3eda:	11 24       	eor	r1, r1
    3edc:	8a 56       	subi	r24, 0x6A	; 106
    3ede:	9c 4e       	sbci	r25, 0xEC	; 236
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	80 81       	ld	r24, Z
    3ee4:	91 81       	ldd	r25, Z+1	; 0x01
    3ee6:	9d 87       	std	Y+13, r25	; 0x0d
    3ee8:	8c 87       	std	Y+12, r24	; 0x0c
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	9a 81       	ldd	r25, Y+2	; 0x02
    3eee:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ef0:	3d 85       	ldd	r19, Y+13	; 0x0d
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	37 83       	std	Z+7, r19	; 0x07
    3ef6:	26 83       	std	Z+6, r18	; 0x06
    3ef8:	8c 85       	ldd	r24, Y+12	; 0x0c
    3efa:	9d 85       	ldd	r25, Y+13	; 0x0d
    3efc:	fc 01       	movw	r30, r24
    3efe:	26 81       	ldd	r18, Z+6	; 0x06
    3f00:	37 81       	ldd	r19, Z+7	; 0x07
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
    3f04:	9a 81       	ldd	r25, Y+2	; 0x02
    3f06:	fc 01       	movw	r30, r24
    3f08:	31 87       	std	Z+9, r19	; 0x09
    3f0a:	20 87       	std	Z+8, r18	; 0x08
    3f0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f10:	fc 01       	movw	r30, r24
    3f12:	86 81       	ldd	r24, Z+6	; 0x06
    3f14:	97 81       	ldd	r25, Z+7	; 0x07
    3f16:	29 81       	ldd	r18, Y+1	; 0x01
    3f18:	3a 81       	ldd	r19, Y+2	; 0x02
    3f1a:	2e 5f       	subi	r18, 0xFE	; 254
    3f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1e:	fc 01       	movw	r30, r24
    3f20:	35 83       	std	Z+5, r19	; 0x05
    3f22:	24 83       	std	Z+4, r18	; 0x04
    3f24:	89 81       	ldd	r24, Y+1	; 0x01
    3f26:	9a 81       	ldd	r25, Y+2	; 0x02
    3f28:	9c 01       	movw	r18, r24
    3f2a:	2e 5f       	subi	r18, 0xFE	; 254
    3f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f30:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f32:	fc 01       	movw	r30, r24
    3f34:	37 83       	std	Z+7, r19	; 0x07
    3f36:	26 83       	std	Z+6, r18	; 0x06
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3c:	fc 01       	movw	r30, r24
    3f3e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f40:	28 2f       	mov	r18, r24
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	4b e0       	ldi	r20, 0x0B	; 11
    3f46:	42 9f       	mul	r20, r18
    3f48:	c0 01       	movw	r24, r0
    3f4a:	43 9f       	mul	r20, r19
    3f4c:	90 0d       	add	r25, r0
    3f4e:	11 24       	eor	r1, r1
    3f50:	9c 01       	movw	r18, r24
    3f52:	2b 56       	subi	r18, 0x6B	; 107
    3f54:	3c 4e       	sbci	r19, 0xEC	; 236
    3f56:	89 81       	ldd	r24, Y+1	; 0x01
    3f58:	9a 81       	ldd	r25, Y+2	; 0x02
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	35 87       	std	Z+13, r19	; 0x0d
    3f5e:	24 87       	std	Z+12, r18	; 0x0c
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	9a 81       	ldd	r25, Y+2	; 0x02
    3f64:	fc 01       	movw	r30, r24
    3f66:	82 8d       	ldd	r24, Z+26	; 0x1a
    3f68:	88 2f       	mov	r24, r24
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	4b e0       	ldi	r20, 0x0B	; 11
    3f6e:	48 9f       	mul	r20, r24
    3f70:	90 01       	movw	r18, r0
    3f72:	49 9f       	mul	r20, r25
    3f74:	30 0d       	add	r19, r0
    3f76:	11 24       	eor	r1, r1
    3f78:	2b 56       	subi	r18, 0x6B	; 107
    3f7a:	3c 4e       	sbci	r19, 0xEC	; 236
    3f7c:	f9 01       	movw	r30, r18
    3f7e:	20 81       	ld	r18, Z
    3f80:	41 e0       	ldi	r20, 0x01	; 1
    3f82:	42 0f       	add	r20, r18
    3f84:	5b e0       	ldi	r21, 0x0B	; 11
    3f86:	58 9f       	mul	r21, r24
    3f88:	90 01       	movw	r18, r0
    3f8a:	59 9f       	mul	r21, r25
    3f8c:	30 0d       	add	r19, r0
    3f8e:	11 24       	eor	r1, r1
    3f90:	c9 01       	movw	r24, r18
    3f92:	8b 56       	subi	r24, 0x6B	; 107
    3f94:	9c 4e       	sbci	r25, 0xEC	; 236
    3f96:	fc 01       	movw	r30, r24
    3f98:	40 83       	st	Z, r20
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	22 8d       	ldd	r18, Z+26	; 0x1a
    3fa2:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    3fa6:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    3faa:	fc 01       	movw	r30, r24
    3fac:	82 8d       	ldd	r24, Z+26	; 0x1a
    3fae:	28 17       	cp	r18, r24
    3fb0:	18 f0       	brcs	.+6      	; 0x3fb8 <xTaskResumeAll+0x276>
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	80 93 4a 14 	sts	0x144A, r24	; 0x80144a <xYieldPending>
    3fb8:	80 91 1d 14 	lds	r24, 0x141D	; 0x80141d <xPendingReadyList>
    3fbc:	88 23       	and	r24, r24
    3fbe:	09 f0       	breq	.+2      	; 0x3fc2 <xTaskResumeAll+0x280>
    3fc0:	e0 ce       	rjmp	.-576    	; 0x3d82 <xTaskResumeAll+0x40>
    3fc2:	89 81       	ldd	r24, Y+1	; 0x01
    3fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc6:	89 2b       	or	r24, r25
    3fc8:	11 f0       	breq	.+4      	; 0x3fce <xTaskResumeAll+0x28c>
    3fca:	0e 94 3f 28 	call	0x507e	; 0x507e <prvResetNextTaskUnblockTime>
    3fce:	80 91 46 14 	lds	r24, 0x1446	; 0x801446 <xPendedTicks>
    3fd2:	90 91 47 14 	lds	r25, 0x1447	; 0x801447 <xPendedTicks+0x1>
    3fd6:	a0 91 48 14 	lds	r26, 0x1448	; 0x801448 <xPendedTicks+0x2>
    3fda:	b0 91 49 14 	lds	r27, 0x1449	; 0x801449 <xPendedTicks+0x3>
    3fde:	8c 83       	std	Y+4, r24	; 0x04
    3fe0:	9d 83       	std	Y+5, r25	; 0x05
    3fe2:	ae 83       	std	Y+6, r26	; 0x06
    3fe4:	bf 83       	std	Y+7, r27	; 0x07
    3fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    3fea:	ae 81       	ldd	r26, Y+6	; 0x06
    3fec:	bf 81       	ldd	r27, Y+7	; 0x07
    3fee:	89 2b       	or	r24, r25
    3ff0:	8a 2b       	or	r24, r26
    3ff2:	8b 2b       	or	r24, r27
    3ff4:	09 f1       	breq	.+66     	; 0x4038 <xTaskResumeAll+0x2f6>
    3ff6:	58 d0       	rcall	.+176    	; 0x40a8 <xTaskIncrementTick>
    3ff8:	88 23       	and	r24, r24
    3ffa:	19 f0       	breq	.+6      	; 0x4002 <xTaskResumeAll+0x2c0>
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	80 93 4a 14 	sts	0x144A, r24	; 0x80144a <xYieldPending>
    4002:	8c 81       	ldd	r24, Y+4	; 0x04
    4004:	9d 81       	ldd	r25, Y+5	; 0x05
    4006:	ae 81       	ldd	r26, Y+6	; 0x06
    4008:	bf 81       	ldd	r27, Y+7	; 0x07
    400a:	01 97       	sbiw	r24, 0x01	; 1
    400c:	a1 09       	sbc	r26, r1
    400e:	b1 09       	sbc	r27, r1
    4010:	8c 83       	std	Y+4, r24	; 0x04
    4012:	9d 83       	std	Y+5, r25	; 0x05
    4014:	ae 83       	std	Y+6, r26	; 0x06
    4016:	bf 83       	std	Y+7, r27	; 0x07
    4018:	8c 81       	ldd	r24, Y+4	; 0x04
    401a:	9d 81       	ldd	r25, Y+5	; 0x05
    401c:	ae 81       	ldd	r26, Y+6	; 0x06
    401e:	bf 81       	ldd	r27, Y+7	; 0x07
    4020:	89 2b       	or	r24, r25
    4022:	8a 2b       	or	r24, r26
    4024:	8b 2b       	or	r24, r27
    4026:	39 f7       	brne	.-50     	; 0x3ff6 <xTaskResumeAll+0x2b4>
    4028:	10 92 46 14 	sts	0x1446, r1	; 0x801446 <xPendedTicks>
    402c:	10 92 47 14 	sts	0x1447, r1	; 0x801447 <xPendedTicks+0x1>
    4030:	10 92 48 14 	sts	0x1448, r1	; 0x801448 <xPendedTicks+0x2>
    4034:	10 92 49 14 	sts	0x1449, r1	; 0x801449 <xPendedTicks+0x3>
    4038:	80 91 4a 14 	lds	r24, 0x144A	; 0x80144a <xYieldPending>
    403c:	88 23       	and	r24, r24
    403e:	21 f0       	breq	.+8      	; 0x4048 <xTaskResumeAll+0x306>
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	8b 83       	std	Y+3, r24	; 0x03
    4044:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vPortYield>
    4048:	0f 90       	pop	r0
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	8b 81       	ldd	r24, Y+3	; 0x03
    404e:	2d 96       	adiw	r28, 0x0d	; 13
    4050:	0f b6       	in	r0, 0x3f	; 63
    4052:	f8 94       	cli
    4054:	de bf       	out	0x3e, r29	; 62
    4056:	0f be       	out	0x3f, r0	; 63
    4058:	cd bf       	out	0x3d, r28	; 61
    405a:	df 91       	pop	r29
    405c:	cf 91       	pop	r28
    405e:	08 95       	ret

00004060 <xTaskGetTickCount>:
    4060:	cf 93       	push	r28
    4062:	df 93       	push	r29
    4064:	00 d0       	rcall	.+0      	; 0x4066 <xTaskGetTickCount+0x6>
    4066:	1f 92       	push	r1
    4068:	cd b7       	in	r28, 0x3d	; 61
    406a:	de b7       	in	r29, 0x3e	; 62
    406c:	0f b6       	in	r0, 0x3f	; 63
    406e:	f8 94       	cli
    4070:	0f 92       	push	r0
    4072:	80 91 40 14 	lds	r24, 0x1440	; 0x801440 <xTickCount>
    4076:	90 91 41 14 	lds	r25, 0x1441	; 0x801441 <xTickCount+0x1>
    407a:	a0 91 42 14 	lds	r26, 0x1442	; 0x801442 <xTickCount+0x2>
    407e:	b0 91 43 14 	lds	r27, 0x1443	; 0x801443 <xTickCount+0x3>
    4082:	89 83       	std	Y+1, r24	; 0x01
    4084:	9a 83       	std	Y+2, r25	; 0x02
    4086:	ab 83       	std	Y+3, r26	; 0x03
    4088:	bc 83       	std	Y+4, r27	; 0x04
    408a:	0f 90       	pop	r0
    408c:	0f be       	out	0x3f, r0	; 63
    408e:	89 81       	ldd	r24, Y+1	; 0x01
    4090:	9a 81       	ldd	r25, Y+2	; 0x02
    4092:	ab 81       	ldd	r26, Y+3	; 0x03
    4094:	bc 81       	ldd	r27, Y+4	; 0x04
    4096:	bc 01       	movw	r22, r24
    4098:	cd 01       	movw	r24, r26
    409a:	0f 90       	pop	r0
    409c:	0f 90       	pop	r0
    409e:	0f 90       	pop	r0
    40a0:	0f 90       	pop	r0
    40a2:	df 91       	pop	r29
    40a4:	cf 91       	pop	r28
    40a6:	08 95       	ret

000040a8 <xTaskIncrementTick>:
    40a8:	cf 93       	push	r28
    40aa:	df 93       	push	r29
    40ac:	cd b7       	in	r28, 0x3d	; 61
    40ae:	de b7       	in	r29, 0x3e	; 62
    40b0:	63 97       	sbiw	r28, 0x13	; 19
    40b2:	0f b6       	in	r0, 0x3f	; 63
    40b4:	f8 94       	cli
    40b6:	de bf       	out	0x3e, r29	; 62
    40b8:	0f be       	out	0x3f, r0	; 63
    40ba:	cd bf       	out	0x3d, r28	; 61
    40bc:	19 82       	std	Y+1, r1	; 0x01
    40be:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <uxSchedulerSuspended>
    40c2:	88 23       	and	r24, r24
    40c4:	09 f0       	breq	.+2      	; 0x40c8 <xTaskIncrementTick+0x20>
    40c6:	cc c1       	rjmp	.+920    	; 0x4460 <xTaskIncrementTick+0x3b8>
    40c8:	80 91 40 14 	lds	r24, 0x1440	; 0x801440 <xTickCount>
    40cc:	90 91 41 14 	lds	r25, 0x1441	; 0x801441 <xTickCount+0x1>
    40d0:	a0 91 42 14 	lds	r26, 0x1442	; 0x801442 <xTickCount+0x2>
    40d4:	b0 91 43 14 	lds	r27, 0x1443	; 0x801443 <xTickCount+0x3>
    40d8:	01 96       	adiw	r24, 0x01	; 1
    40da:	a1 1d       	adc	r26, r1
    40dc:	b1 1d       	adc	r27, r1
    40de:	8a 83       	std	Y+2, r24	; 0x02
    40e0:	9b 83       	std	Y+3, r25	; 0x03
    40e2:	ac 83       	std	Y+4, r26	; 0x04
    40e4:	bd 83       	std	Y+5, r27	; 0x05
    40e6:	8a 81       	ldd	r24, Y+2	; 0x02
    40e8:	9b 81       	ldd	r25, Y+3	; 0x03
    40ea:	ac 81       	ldd	r26, Y+4	; 0x04
    40ec:	bd 81       	ldd	r27, Y+5	; 0x05
    40ee:	80 93 40 14 	sts	0x1440, r24	; 0x801440 <xTickCount>
    40f2:	90 93 41 14 	sts	0x1441, r25	; 0x801441 <xTickCount+0x1>
    40f6:	a0 93 42 14 	sts	0x1442, r26	; 0x801442 <xTickCount+0x2>
    40fa:	b0 93 43 14 	sts	0x1443, r27	; 0x801443 <xTickCount+0x3>
    40fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4100:	9b 81       	ldd	r25, Y+3	; 0x03
    4102:	ac 81       	ldd	r26, Y+4	; 0x04
    4104:	bd 81       	ldd	r27, Y+5	; 0x05
    4106:	89 2b       	or	r24, r25
    4108:	8a 2b       	or	r24, r26
    410a:	8b 2b       	or	r24, r27
    410c:	d1 f4       	brne	.+52     	; 0x4142 <xTaskIncrementTick+0x9a>
    410e:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <pxDelayedTaskList>
    4112:	90 91 1a 14 	lds	r25, 0x141A	; 0x80141a <pxDelayedTaskList+0x1>
    4116:	9f 83       	std	Y+7, r25	; 0x07
    4118:	8e 83       	std	Y+6, r24	; 0x06
    411a:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <pxOverflowDelayedTaskList>
    411e:	90 91 1c 14 	lds	r25, 0x141C	; 0x80141c <pxOverflowDelayedTaskList+0x1>
    4122:	90 93 1a 14 	sts	0x141A, r25	; 0x80141a <pxDelayedTaskList+0x1>
    4126:	80 93 19 14 	sts	0x1419, r24	; 0x801419 <pxDelayedTaskList>
    412a:	8e 81       	ldd	r24, Y+6	; 0x06
    412c:	9f 81       	ldd	r25, Y+7	; 0x07
    412e:	90 93 1c 14 	sts	0x141C, r25	; 0x80141c <pxOverflowDelayedTaskList+0x1>
    4132:	80 93 1b 14 	sts	0x141B, r24	; 0x80141b <pxOverflowDelayedTaskList>
    4136:	80 91 4b 14 	lds	r24, 0x144B	; 0x80144b <xNumOfOverflows>
    413a:	8f 5f       	subi	r24, 0xFF	; 255
    413c:	80 93 4b 14 	sts	0x144B, r24	; 0x80144b <xNumOfOverflows>
    4140:	9e d7       	rcall	.+3900   	; 0x507e <prvResetNextTaskUnblockTime>
    4142:	80 91 4d 14 	lds	r24, 0x144D	; 0x80144d <xNextTaskUnblockTime>
    4146:	90 91 4e 14 	lds	r25, 0x144E	; 0x80144e <xNextTaskUnblockTime+0x1>
    414a:	a0 91 4f 14 	lds	r26, 0x144F	; 0x80144f <xNextTaskUnblockTime+0x2>
    414e:	b0 91 50 14 	lds	r27, 0x1450	; 0x801450 <xNextTaskUnblockTime+0x3>
    4152:	2a 81       	ldd	r18, Y+2	; 0x02
    4154:	3b 81       	ldd	r19, Y+3	; 0x03
    4156:	4c 81       	ldd	r20, Y+4	; 0x04
    4158:	5d 81       	ldd	r21, Y+5	; 0x05
    415a:	28 17       	cp	r18, r24
    415c:	39 07       	cpc	r19, r25
    415e:	4a 07       	cpc	r20, r26
    4160:	5b 07       	cpc	r21, r27
    4162:	08 f4       	brcc	.+2      	; 0x4166 <xTaskIncrementTick+0xbe>
    4164:	60 c1       	rjmp	.+704    	; 0x4426 <xTaskIncrementTick+0x37e>
    4166:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <pxDelayedTaskList>
    416a:	90 91 1a 14 	lds	r25, 0x141A	; 0x80141a <pxDelayedTaskList+0x1>
    416e:	fc 01       	movw	r30, r24
    4170:	80 81       	ld	r24, Z
    4172:	88 23       	and	r24, r24
    4174:	61 f4       	brne	.+24     	; 0x418e <xTaskIncrementTick+0xe6>
    4176:	8f ef       	ldi	r24, 0xFF	; 255
    4178:	9f ef       	ldi	r25, 0xFF	; 255
    417a:	dc 01       	movw	r26, r24
    417c:	80 93 4d 14 	sts	0x144D, r24	; 0x80144d <xNextTaskUnblockTime>
    4180:	90 93 4e 14 	sts	0x144E, r25	; 0x80144e <xNextTaskUnblockTime+0x1>
    4184:	a0 93 4f 14 	sts	0x144F, r26	; 0x80144f <xNextTaskUnblockTime+0x2>
    4188:	b0 93 50 14 	sts	0x1450, r27	; 0x801450 <xNextTaskUnblockTime+0x3>
    418c:	4c c1       	rjmp	.+664    	; 0x4426 <xTaskIncrementTick+0x37e>
    418e:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <pxDelayedTaskList>
    4192:	90 91 1a 14 	lds	r25, 0x141A	; 0x80141a <pxDelayedTaskList+0x1>
    4196:	fc 01       	movw	r30, r24
    4198:	87 81       	ldd	r24, Z+7	; 0x07
    419a:	90 85       	ldd	r25, Z+8	; 0x08
    419c:	fc 01       	movw	r30, r24
    419e:	80 85       	ldd	r24, Z+8	; 0x08
    41a0:	91 85       	ldd	r25, Z+9	; 0x09
    41a2:	99 87       	std	Y+9, r25	; 0x09
    41a4:	88 87       	std	Y+8, r24	; 0x08
    41a6:	88 85       	ldd	r24, Y+8	; 0x08
    41a8:	99 85       	ldd	r25, Y+9	; 0x09
    41aa:	fc 01       	movw	r30, r24
    41ac:	82 81       	ldd	r24, Z+2	; 0x02
    41ae:	93 81       	ldd	r25, Z+3	; 0x03
    41b0:	a4 81       	ldd	r26, Z+4	; 0x04
    41b2:	b5 81       	ldd	r27, Z+5	; 0x05
    41b4:	8a 87       	std	Y+10, r24	; 0x0a
    41b6:	9b 87       	std	Y+11, r25	; 0x0b
    41b8:	ac 87       	std	Y+12, r26	; 0x0c
    41ba:	bd 87       	std	Y+13, r27	; 0x0d
    41bc:	2a 81       	ldd	r18, Y+2	; 0x02
    41be:	3b 81       	ldd	r19, Y+3	; 0x03
    41c0:	4c 81       	ldd	r20, Y+4	; 0x04
    41c2:	5d 81       	ldd	r21, Y+5	; 0x05
    41c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    41c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    41c8:	ac 85       	ldd	r26, Y+12	; 0x0c
    41ca:	bd 85       	ldd	r27, Y+13	; 0x0d
    41cc:	28 17       	cp	r18, r24
    41ce:	39 07       	cpc	r19, r25
    41d0:	4a 07       	cpc	r20, r26
    41d2:	5b 07       	cpc	r21, r27
    41d4:	68 f4       	brcc	.+26     	; 0x41f0 <xTaskIncrementTick+0x148>
    41d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    41d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    41da:	ac 85       	ldd	r26, Y+12	; 0x0c
    41dc:	bd 85       	ldd	r27, Y+13	; 0x0d
    41de:	80 93 4d 14 	sts	0x144D, r24	; 0x80144d <xNextTaskUnblockTime>
    41e2:	90 93 4e 14 	sts	0x144E, r25	; 0x80144e <xNextTaskUnblockTime+0x1>
    41e6:	a0 93 4f 14 	sts	0x144F, r26	; 0x80144f <xNextTaskUnblockTime+0x2>
    41ea:	b0 93 50 14 	sts	0x1450, r27	; 0x801450 <xNextTaskUnblockTime+0x3>
    41ee:	1b c1       	rjmp	.+566    	; 0x4426 <xTaskIncrementTick+0x37e>
    41f0:	88 85       	ldd	r24, Y+8	; 0x08
    41f2:	99 85       	ldd	r25, Y+9	; 0x09
    41f4:	fc 01       	movw	r30, r24
    41f6:	84 85       	ldd	r24, Z+12	; 0x0c
    41f8:	95 85       	ldd	r25, Z+13	; 0x0d
    41fa:	9f 87       	std	Y+15, r25	; 0x0f
    41fc:	8e 87       	std	Y+14, r24	; 0x0e
    41fe:	88 85       	ldd	r24, Y+8	; 0x08
    4200:	99 85       	ldd	r25, Y+9	; 0x09
    4202:	fc 01       	movw	r30, r24
    4204:	86 81       	ldd	r24, Z+6	; 0x06
    4206:	97 81       	ldd	r25, Z+7	; 0x07
    4208:	28 85       	ldd	r18, Y+8	; 0x08
    420a:	39 85       	ldd	r19, Y+9	; 0x09
    420c:	f9 01       	movw	r30, r18
    420e:	20 85       	ldd	r18, Z+8	; 0x08
    4210:	31 85       	ldd	r19, Z+9	; 0x09
    4212:	fc 01       	movw	r30, r24
    4214:	37 83       	std	Z+7, r19	; 0x07
    4216:	26 83       	std	Z+6, r18	; 0x06
    4218:	88 85       	ldd	r24, Y+8	; 0x08
    421a:	99 85       	ldd	r25, Y+9	; 0x09
    421c:	fc 01       	movw	r30, r24
    421e:	80 85       	ldd	r24, Z+8	; 0x08
    4220:	91 85       	ldd	r25, Z+9	; 0x09
    4222:	28 85       	ldd	r18, Y+8	; 0x08
    4224:	39 85       	ldd	r19, Y+9	; 0x09
    4226:	f9 01       	movw	r30, r18
    4228:	26 81       	ldd	r18, Z+6	; 0x06
    422a:	37 81       	ldd	r19, Z+7	; 0x07
    422c:	fc 01       	movw	r30, r24
    422e:	35 83       	std	Z+5, r19	; 0x05
    4230:	24 83       	std	Z+4, r18	; 0x04
    4232:	8e 85       	ldd	r24, Y+14	; 0x0e
    4234:	9f 85       	ldd	r25, Y+15	; 0x0f
    4236:	fc 01       	movw	r30, r24
    4238:	21 81       	ldd	r18, Z+1	; 0x01
    423a:	32 81       	ldd	r19, Z+2	; 0x02
    423c:	88 85       	ldd	r24, Y+8	; 0x08
    423e:	99 85       	ldd	r25, Y+9	; 0x09
    4240:	02 96       	adiw	r24, 0x02	; 2
    4242:	28 17       	cp	r18, r24
    4244:	39 07       	cpc	r19, r25
    4246:	51 f4       	brne	.+20     	; 0x425c <xTaskIncrementTick+0x1b4>
    4248:	88 85       	ldd	r24, Y+8	; 0x08
    424a:	99 85       	ldd	r25, Y+9	; 0x09
    424c:	fc 01       	movw	r30, r24
    424e:	20 85       	ldd	r18, Z+8	; 0x08
    4250:	31 85       	ldd	r19, Z+9	; 0x09
    4252:	8e 85       	ldd	r24, Y+14	; 0x0e
    4254:	9f 85       	ldd	r25, Y+15	; 0x0f
    4256:	fc 01       	movw	r30, r24
    4258:	32 83       	std	Z+2, r19	; 0x02
    425a:	21 83       	std	Z+1, r18	; 0x01
    425c:	88 85       	ldd	r24, Y+8	; 0x08
    425e:	99 85       	ldd	r25, Y+9	; 0x09
    4260:	fc 01       	movw	r30, r24
    4262:	15 86       	std	Z+13, r1	; 0x0d
    4264:	14 86       	std	Z+12, r1	; 0x0c
    4266:	8e 85       	ldd	r24, Y+14	; 0x0e
    4268:	9f 85       	ldd	r25, Y+15	; 0x0f
    426a:	fc 01       	movw	r30, r24
    426c:	80 81       	ld	r24, Z
    426e:	2f ef       	ldi	r18, 0xFF	; 255
    4270:	28 0f       	add	r18, r24
    4272:	8e 85       	ldd	r24, Y+14	; 0x0e
    4274:	9f 85       	ldd	r25, Y+15	; 0x0f
    4276:	fc 01       	movw	r30, r24
    4278:	20 83       	st	Z, r18
    427a:	88 85       	ldd	r24, Y+8	; 0x08
    427c:	99 85       	ldd	r25, Y+9	; 0x09
    427e:	fc 01       	movw	r30, r24
    4280:	80 8d       	ldd	r24, Z+24	; 0x18
    4282:	91 8d       	ldd	r25, Z+25	; 0x19
    4284:	89 2b       	or	r24, r25
    4286:	09 f4       	brne	.+2      	; 0x428a <xTaskIncrementTick+0x1e2>
    4288:	45 c0       	rjmp	.+138    	; 0x4314 <xTaskIncrementTick+0x26c>
    428a:	88 85       	ldd	r24, Y+8	; 0x08
    428c:	99 85       	ldd	r25, Y+9	; 0x09
    428e:	fc 01       	movw	r30, r24
    4290:	80 8d       	ldd	r24, Z+24	; 0x18
    4292:	91 8d       	ldd	r25, Z+25	; 0x19
    4294:	99 8b       	std	Y+17, r25	; 0x11
    4296:	88 8b       	std	Y+16, r24	; 0x10
    4298:	88 85       	ldd	r24, Y+8	; 0x08
    429a:	99 85       	ldd	r25, Y+9	; 0x09
    429c:	fc 01       	movw	r30, r24
    429e:	82 89       	ldd	r24, Z+18	; 0x12
    42a0:	93 89       	ldd	r25, Z+19	; 0x13
    42a2:	28 85       	ldd	r18, Y+8	; 0x08
    42a4:	39 85       	ldd	r19, Y+9	; 0x09
    42a6:	f9 01       	movw	r30, r18
    42a8:	24 89       	ldd	r18, Z+20	; 0x14
    42aa:	35 89       	ldd	r19, Z+21	; 0x15
    42ac:	fc 01       	movw	r30, r24
    42ae:	37 83       	std	Z+7, r19	; 0x07
    42b0:	26 83       	std	Z+6, r18	; 0x06
    42b2:	88 85       	ldd	r24, Y+8	; 0x08
    42b4:	99 85       	ldd	r25, Y+9	; 0x09
    42b6:	fc 01       	movw	r30, r24
    42b8:	84 89       	ldd	r24, Z+20	; 0x14
    42ba:	95 89       	ldd	r25, Z+21	; 0x15
    42bc:	28 85       	ldd	r18, Y+8	; 0x08
    42be:	39 85       	ldd	r19, Y+9	; 0x09
    42c0:	f9 01       	movw	r30, r18
    42c2:	22 89       	ldd	r18, Z+18	; 0x12
    42c4:	33 89       	ldd	r19, Z+19	; 0x13
    42c6:	fc 01       	movw	r30, r24
    42c8:	35 83       	std	Z+5, r19	; 0x05
    42ca:	24 83       	std	Z+4, r18	; 0x04
    42cc:	88 89       	ldd	r24, Y+16	; 0x10
    42ce:	99 89       	ldd	r25, Y+17	; 0x11
    42d0:	fc 01       	movw	r30, r24
    42d2:	21 81       	ldd	r18, Z+1	; 0x01
    42d4:	32 81       	ldd	r19, Z+2	; 0x02
    42d6:	88 85       	ldd	r24, Y+8	; 0x08
    42d8:	99 85       	ldd	r25, Y+9	; 0x09
    42da:	0e 96       	adiw	r24, 0x0e	; 14
    42dc:	28 17       	cp	r18, r24
    42de:	39 07       	cpc	r19, r25
    42e0:	51 f4       	brne	.+20     	; 0x42f6 <xTaskIncrementTick+0x24e>
    42e2:	88 85       	ldd	r24, Y+8	; 0x08
    42e4:	99 85       	ldd	r25, Y+9	; 0x09
    42e6:	fc 01       	movw	r30, r24
    42e8:	24 89       	ldd	r18, Z+20	; 0x14
    42ea:	35 89       	ldd	r19, Z+21	; 0x15
    42ec:	88 89       	ldd	r24, Y+16	; 0x10
    42ee:	99 89       	ldd	r25, Y+17	; 0x11
    42f0:	fc 01       	movw	r30, r24
    42f2:	32 83       	std	Z+2, r19	; 0x02
    42f4:	21 83       	std	Z+1, r18	; 0x01
    42f6:	88 85       	ldd	r24, Y+8	; 0x08
    42f8:	99 85       	ldd	r25, Y+9	; 0x09
    42fa:	fc 01       	movw	r30, r24
    42fc:	11 8e       	std	Z+25, r1	; 0x19
    42fe:	10 8e       	std	Z+24, r1	; 0x18
    4300:	88 89       	ldd	r24, Y+16	; 0x10
    4302:	99 89       	ldd	r25, Y+17	; 0x11
    4304:	fc 01       	movw	r30, r24
    4306:	80 81       	ld	r24, Z
    4308:	2f ef       	ldi	r18, 0xFF	; 255
    430a:	28 0f       	add	r18, r24
    430c:	88 89       	ldd	r24, Y+16	; 0x10
    430e:	99 89       	ldd	r25, Y+17	; 0x11
    4310:	fc 01       	movw	r30, r24
    4312:	20 83       	st	Z, r18
    4314:	88 85       	ldd	r24, Y+8	; 0x08
    4316:	99 85       	ldd	r25, Y+9	; 0x09
    4318:	fc 01       	movw	r30, r24
    431a:	92 8d       	ldd	r25, Z+26	; 0x1a
    431c:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    4320:	89 17       	cp	r24, r25
    4322:	30 f4       	brcc	.+12     	; 0x4330 <xTaskIncrementTick+0x288>
    4324:	88 85       	ldd	r24, Y+8	; 0x08
    4326:	99 85       	ldd	r25, Y+9	; 0x09
    4328:	fc 01       	movw	r30, r24
    432a:	82 8d       	ldd	r24, Z+26	; 0x1a
    432c:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    4330:	88 85       	ldd	r24, Y+8	; 0x08
    4332:	99 85       	ldd	r25, Y+9	; 0x09
    4334:	fc 01       	movw	r30, r24
    4336:	82 8d       	ldd	r24, Z+26	; 0x1a
    4338:	28 2f       	mov	r18, r24
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	4b e0       	ldi	r20, 0x0B	; 11
    433e:	42 9f       	mul	r20, r18
    4340:	c0 01       	movw	r24, r0
    4342:	43 9f       	mul	r20, r19
    4344:	90 0d       	add	r25, r0
    4346:	11 24       	eor	r1, r1
    4348:	8a 56       	subi	r24, 0x6A	; 106
    434a:	9c 4e       	sbci	r25, 0xEC	; 236
    434c:	fc 01       	movw	r30, r24
    434e:	80 81       	ld	r24, Z
    4350:	91 81       	ldd	r25, Z+1	; 0x01
    4352:	9b 8b       	std	Y+19, r25	; 0x13
    4354:	8a 8b       	std	Y+18, r24	; 0x12
    4356:	88 85       	ldd	r24, Y+8	; 0x08
    4358:	99 85       	ldd	r25, Y+9	; 0x09
    435a:	2a 89       	ldd	r18, Y+18	; 0x12
    435c:	3b 89       	ldd	r19, Y+19	; 0x13
    435e:	fc 01       	movw	r30, r24
    4360:	37 83       	std	Z+7, r19	; 0x07
    4362:	26 83       	std	Z+6, r18	; 0x06
    4364:	8a 89       	ldd	r24, Y+18	; 0x12
    4366:	9b 89       	ldd	r25, Y+19	; 0x13
    4368:	fc 01       	movw	r30, r24
    436a:	26 81       	ldd	r18, Z+6	; 0x06
    436c:	37 81       	ldd	r19, Z+7	; 0x07
    436e:	88 85       	ldd	r24, Y+8	; 0x08
    4370:	99 85       	ldd	r25, Y+9	; 0x09
    4372:	fc 01       	movw	r30, r24
    4374:	31 87       	std	Z+9, r19	; 0x09
    4376:	20 87       	std	Z+8, r18	; 0x08
    4378:	8a 89       	ldd	r24, Y+18	; 0x12
    437a:	9b 89       	ldd	r25, Y+19	; 0x13
    437c:	fc 01       	movw	r30, r24
    437e:	86 81       	ldd	r24, Z+6	; 0x06
    4380:	97 81       	ldd	r25, Z+7	; 0x07
    4382:	28 85       	ldd	r18, Y+8	; 0x08
    4384:	39 85       	ldd	r19, Y+9	; 0x09
    4386:	2e 5f       	subi	r18, 0xFE	; 254
    4388:	3f 4f       	sbci	r19, 0xFF	; 255
    438a:	fc 01       	movw	r30, r24
    438c:	35 83       	std	Z+5, r19	; 0x05
    438e:	24 83       	std	Z+4, r18	; 0x04
    4390:	88 85       	ldd	r24, Y+8	; 0x08
    4392:	99 85       	ldd	r25, Y+9	; 0x09
    4394:	9c 01       	movw	r18, r24
    4396:	2e 5f       	subi	r18, 0xFE	; 254
    4398:	3f 4f       	sbci	r19, 0xFF	; 255
    439a:	8a 89       	ldd	r24, Y+18	; 0x12
    439c:	9b 89       	ldd	r25, Y+19	; 0x13
    439e:	fc 01       	movw	r30, r24
    43a0:	37 83       	std	Z+7, r19	; 0x07
    43a2:	26 83       	std	Z+6, r18	; 0x06
    43a4:	88 85       	ldd	r24, Y+8	; 0x08
    43a6:	99 85       	ldd	r25, Y+9	; 0x09
    43a8:	fc 01       	movw	r30, r24
    43aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    43ac:	28 2f       	mov	r18, r24
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	4b e0       	ldi	r20, 0x0B	; 11
    43b2:	42 9f       	mul	r20, r18
    43b4:	c0 01       	movw	r24, r0
    43b6:	43 9f       	mul	r20, r19
    43b8:	90 0d       	add	r25, r0
    43ba:	11 24       	eor	r1, r1
    43bc:	9c 01       	movw	r18, r24
    43be:	2b 56       	subi	r18, 0x6B	; 107
    43c0:	3c 4e       	sbci	r19, 0xEC	; 236
    43c2:	88 85       	ldd	r24, Y+8	; 0x08
    43c4:	99 85       	ldd	r25, Y+9	; 0x09
    43c6:	fc 01       	movw	r30, r24
    43c8:	35 87       	std	Z+13, r19	; 0x0d
    43ca:	24 87       	std	Z+12, r18	; 0x0c
    43cc:	88 85       	ldd	r24, Y+8	; 0x08
    43ce:	99 85       	ldd	r25, Y+9	; 0x09
    43d0:	fc 01       	movw	r30, r24
    43d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    43d4:	88 2f       	mov	r24, r24
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	4b e0       	ldi	r20, 0x0B	; 11
    43da:	48 9f       	mul	r20, r24
    43dc:	90 01       	movw	r18, r0
    43de:	49 9f       	mul	r20, r25
    43e0:	30 0d       	add	r19, r0
    43e2:	11 24       	eor	r1, r1
    43e4:	2b 56       	subi	r18, 0x6B	; 107
    43e6:	3c 4e       	sbci	r19, 0xEC	; 236
    43e8:	f9 01       	movw	r30, r18
    43ea:	20 81       	ld	r18, Z
    43ec:	41 e0       	ldi	r20, 0x01	; 1
    43ee:	42 0f       	add	r20, r18
    43f0:	5b e0       	ldi	r21, 0x0B	; 11
    43f2:	58 9f       	mul	r21, r24
    43f4:	90 01       	movw	r18, r0
    43f6:	59 9f       	mul	r21, r25
    43f8:	30 0d       	add	r19, r0
    43fa:	11 24       	eor	r1, r1
    43fc:	c9 01       	movw	r24, r18
    43fe:	8b 56       	subi	r24, 0x6B	; 107
    4400:	9c 4e       	sbci	r25, 0xEC	; 236
    4402:	fc 01       	movw	r30, r24
    4404:	40 83       	st	Z, r20
    4406:	88 85       	ldd	r24, Y+8	; 0x08
    4408:	99 85       	ldd	r25, Y+9	; 0x09
    440a:	fc 01       	movw	r30, r24
    440c:	22 8d       	ldd	r18, Z+26	; 0x1a
    440e:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    4412:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    4416:	fc 01       	movw	r30, r24
    4418:	82 8d       	ldd	r24, Z+26	; 0x1a
    441a:	28 17       	cp	r18, r24
    441c:	08 f4       	brcc	.+2      	; 0x4420 <xTaskIncrementTick+0x378>
    441e:	a3 ce       	rjmp	.-698    	; 0x4166 <xTaskIncrementTick+0xbe>
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	89 83       	std	Y+1, r24	; 0x01
    4424:	a0 ce       	rjmp	.-704    	; 0x4166 <xTaskIncrementTick+0xbe>
    4426:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    442a:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    442e:	fc 01       	movw	r30, r24
    4430:	82 8d       	ldd	r24, Z+26	; 0x1a
    4432:	28 2f       	mov	r18, r24
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	4b e0       	ldi	r20, 0x0B	; 11
    4438:	42 9f       	mul	r20, r18
    443a:	c0 01       	movw	r24, r0
    443c:	43 9f       	mul	r20, r19
    443e:	90 0d       	add	r25, r0
    4440:	11 24       	eor	r1, r1
    4442:	8b 56       	subi	r24, 0x6B	; 107
    4444:	9c 4e       	sbci	r25, 0xEC	; 236
    4446:	fc 01       	movw	r30, r24
    4448:	80 81       	ld	r24, Z
    444a:	82 30       	cpi	r24, 0x02	; 2
    444c:	10 f0       	brcs	.+4      	; 0x4452 <xTaskIncrementTick+0x3aa>
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	89 83       	std	Y+1, r24	; 0x01
    4452:	80 91 4a 14 	lds	r24, 0x144A	; 0x80144a <xYieldPending>
    4456:	88 23       	and	r24, r24
    4458:	b1 f0       	breq	.+44     	; 0x4486 <xTaskIncrementTick+0x3de>
    445a:	81 e0       	ldi	r24, 0x01	; 1
    445c:	89 83       	std	Y+1, r24	; 0x01
    445e:	13 c0       	rjmp	.+38     	; 0x4486 <xTaskIncrementTick+0x3de>
    4460:	80 91 46 14 	lds	r24, 0x1446	; 0x801446 <xPendedTicks>
    4464:	90 91 47 14 	lds	r25, 0x1447	; 0x801447 <xPendedTicks+0x1>
    4468:	a0 91 48 14 	lds	r26, 0x1448	; 0x801448 <xPendedTicks+0x2>
    446c:	b0 91 49 14 	lds	r27, 0x1449	; 0x801449 <xPendedTicks+0x3>
    4470:	01 96       	adiw	r24, 0x01	; 1
    4472:	a1 1d       	adc	r26, r1
    4474:	b1 1d       	adc	r27, r1
    4476:	80 93 46 14 	sts	0x1446, r24	; 0x801446 <xPendedTicks>
    447a:	90 93 47 14 	sts	0x1447, r25	; 0x801447 <xPendedTicks+0x1>
    447e:	a0 93 48 14 	sts	0x1448, r26	; 0x801448 <xPendedTicks+0x2>
    4482:	b0 93 49 14 	sts	0x1449, r27	; 0x801449 <xPendedTicks+0x3>
    4486:	89 81       	ldd	r24, Y+1	; 0x01
    4488:	63 96       	adiw	r28, 0x13	; 19
    448a:	0f b6       	in	r0, 0x3f	; 63
    448c:	f8 94       	cli
    448e:	de bf       	out	0x3e, r29	; 62
    4490:	0f be       	out	0x3f, r0	; 63
    4492:	cd bf       	out	0x3d, r28	; 61
    4494:	df 91       	pop	r29
    4496:	cf 91       	pop	r28
    4498:	08 95       	ret

0000449a <vTaskSwitchContext>:
    449a:	cf 93       	push	r28
    449c:	df 93       	push	r29
    449e:	00 d0       	rcall	.+0      	; 0x44a0 <vTaskSwitchContext+0x6>
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
    44a4:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <uxSchedulerSuspended>
    44a8:	88 23       	and	r24, r24
    44aa:	21 f0       	breq	.+8      	; 0x44b4 <vTaskSwitchContext+0x1a>
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	80 93 4a 14 	sts	0x144A, r24	; 0x80144a <xYieldPending>
    44b2:	78 c0       	rjmp	.+240    	; 0x45a4 <vTaskSwitchContext+0x10a>
    44b4:	10 92 4a 14 	sts	0x144A, r1	; 0x80144a <xYieldPending>
    44b8:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    44bc:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    44c0:	fc 01       	movw	r30, r24
    44c2:	20 81       	ld	r18, Z
    44c4:	31 81       	ldd	r19, Z+1	; 0x01
    44c6:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    44ca:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    44ce:	fc 01       	movw	r30, r24
    44d0:	83 8d       	ldd	r24, Z+27	; 0x1b
    44d2:	94 8d       	ldd	r25, Z+28	; 0x1c
    44d4:	82 17       	cp	r24, r18
    44d6:	93 07       	cpc	r25, r19
    44d8:	70 f0       	brcs	.+28     	; 0x44f6 <vTaskSwitchContext+0x5c>
    44da:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    44de:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    44e2:	9c 01       	movw	r18, r24
    44e4:	23 5e       	subi	r18, 0xE3	; 227
    44e6:	3f 4f       	sbci	r19, 0xFF	; 255
    44e8:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    44ec:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    44f0:	b9 01       	movw	r22, r18
    44f2:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <vApplicationStackOverflowHook>
    44f6:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    44fa:	89 83       	std	Y+1, r24	; 0x01
    44fc:	03 c0       	rjmp	.+6      	; 0x4504 <vTaskSwitchContext+0x6a>
    44fe:	89 81       	ldd	r24, Y+1	; 0x01
    4500:	81 50       	subi	r24, 0x01	; 1
    4502:	89 83       	std	Y+1, r24	; 0x01
    4504:	89 81       	ldd	r24, Y+1	; 0x01
    4506:	28 2f       	mov	r18, r24
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	4b e0       	ldi	r20, 0x0B	; 11
    450c:	42 9f       	mul	r20, r18
    450e:	c0 01       	movw	r24, r0
    4510:	43 9f       	mul	r20, r19
    4512:	90 0d       	add	r25, r0
    4514:	11 24       	eor	r1, r1
    4516:	8b 56       	subi	r24, 0x6B	; 107
    4518:	9c 4e       	sbci	r25, 0xEC	; 236
    451a:	fc 01       	movw	r30, r24
    451c:	80 81       	ld	r24, Z
    451e:	88 23       	and	r24, r24
    4520:	71 f3       	breq	.-36     	; 0x44fe <vTaskSwitchContext+0x64>
    4522:	89 81       	ldd	r24, Y+1	; 0x01
    4524:	28 2f       	mov	r18, r24
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	4b e0       	ldi	r20, 0x0B	; 11
    452a:	42 9f       	mul	r20, r18
    452c:	c0 01       	movw	r24, r0
    452e:	43 9f       	mul	r20, r19
    4530:	90 0d       	add	r25, r0
    4532:	11 24       	eor	r1, r1
    4534:	8b 56       	subi	r24, 0x6B	; 107
    4536:	9c 4e       	sbci	r25, 0xEC	; 236
    4538:	9b 83       	std	Y+3, r25	; 0x03
    453a:	8a 83       	std	Y+2, r24	; 0x02
    453c:	8a 81       	ldd	r24, Y+2	; 0x02
    453e:	9b 81       	ldd	r25, Y+3	; 0x03
    4540:	fc 01       	movw	r30, r24
    4542:	81 81       	ldd	r24, Z+1	; 0x01
    4544:	92 81       	ldd	r25, Z+2	; 0x02
    4546:	fc 01       	movw	r30, r24
    4548:	24 81       	ldd	r18, Z+4	; 0x04
    454a:	35 81       	ldd	r19, Z+5	; 0x05
    454c:	8a 81       	ldd	r24, Y+2	; 0x02
    454e:	9b 81       	ldd	r25, Y+3	; 0x03
    4550:	fc 01       	movw	r30, r24
    4552:	32 83       	std	Z+2, r19	; 0x02
    4554:	21 83       	std	Z+1, r18	; 0x01
    4556:	8a 81       	ldd	r24, Y+2	; 0x02
    4558:	9b 81       	ldd	r25, Y+3	; 0x03
    455a:	fc 01       	movw	r30, r24
    455c:	21 81       	ldd	r18, Z+1	; 0x01
    455e:	32 81       	ldd	r19, Z+2	; 0x02
    4560:	8a 81       	ldd	r24, Y+2	; 0x02
    4562:	9b 81       	ldd	r25, Y+3	; 0x03
    4564:	03 96       	adiw	r24, 0x03	; 3
    4566:	28 17       	cp	r18, r24
    4568:	39 07       	cpc	r19, r25
    456a:	69 f4       	brne	.+26     	; 0x4586 <vTaskSwitchContext+0xec>
    456c:	8a 81       	ldd	r24, Y+2	; 0x02
    456e:	9b 81       	ldd	r25, Y+3	; 0x03
    4570:	fc 01       	movw	r30, r24
    4572:	81 81       	ldd	r24, Z+1	; 0x01
    4574:	92 81       	ldd	r25, Z+2	; 0x02
    4576:	fc 01       	movw	r30, r24
    4578:	24 81       	ldd	r18, Z+4	; 0x04
    457a:	35 81       	ldd	r19, Z+5	; 0x05
    457c:	8a 81       	ldd	r24, Y+2	; 0x02
    457e:	9b 81       	ldd	r25, Y+3	; 0x03
    4580:	fc 01       	movw	r30, r24
    4582:	32 83       	std	Z+2, r19	; 0x02
    4584:	21 83       	std	Z+1, r18	; 0x01
    4586:	8a 81       	ldd	r24, Y+2	; 0x02
    4588:	9b 81       	ldd	r25, Y+3	; 0x03
    458a:	fc 01       	movw	r30, r24
    458c:	81 81       	ldd	r24, Z+1	; 0x01
    458e:	92 81       	ldd	r25, Z+2	; 0x02
    4590:	fc 01       	movw	r30, r24
    4592:	80 85       	ldd	r24, Z+8	; 0x08
    4594:	91 85       	ldd	r25, Z+9	; 0x09
    4596:	90 93 94 13 	sts	0x1394, r25	; 0x801394 <pxCurrentTCB+0x1>
    459a:	80 93 93 13 	sts	0x1393, r24	; 0x801393 <pxCurrentTCB>
    459e:	89 81       	ldd	r24, Y+1	; 0x01
    45a0:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    45a4:	00 00       	nop
    45a6:	0f 90       	pop	r0
    45a8:	0f 90       	pop	r0
    45aa:	0f 90       	pop	r0
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	08 95       	ret

000045b2 <vTaskPlaceOnEventList>:
    45b2:	cf 93       	push	r28
    45b4:	df 93       	push	r29
    45b6:	00 d0       	rcall	.+0      	; 0x45b8 <vTaskPlaceOnEventList+0x6>
    45b8:	00 d0       	rcall	.+0      	; 0x45ba <vTaskPlaceOnEventList+0x8>
    45ba:	cd b7       	in	r28, 0x3d	; 61
    45bc:	de b7       	in	r29, 0x3e	; 62
    45be:	9a 83       	std	Y+2, r25	; 0x02
    45c0:	89 83       	std	Y+1, r24	; 0x01
    45c2:	4b 83       	std	Y+3, r20	; 0x03
    45c4:	5c 83       	std	Y+4, r21	; 0x04
    45c6:	6d 83       	std	Y+5, r22	; 0x05
    45c8:	7e 83       	std	Y+6, r23	; 0x06
    45ca:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    45ce:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    45d2:	9c 01       	movw	r18, r24
    45d4:	22 5f       	subi	r18, 0xF2	; 242
    45d6:	3f 4f       	sbci	r19, 0xFF	; 255
    45d8:	89 81       	ldd	r24, Y+1	; 0x01
    45da:	9a 81       	ldd	r25, Y+2	; 0x02
    45dc:	b9 01       	movw	r22, r18
    45de:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vListInsert>
    45e2:	8b 81       	ldd	r24, Y+3	; 0x03
    45e4:	9c 81       	ldd	r25, Y+4	; 0x04
    45e6:	ad 81       	ldd	r26, Y+5	; 0x05
    45e8:	be 81       	ldd	r27, Y+6	; 0x06
    45ea:	41 e0       	ldi	r20, 0x01	; 1
    45ec:	bc 01       	movw	r22, r24
    45ee:	cd 01       	movw	r24, r26
    45f0:	0e 94 32 31 	call	0x6264	; 0x6264 <prvAddCurrentTaskToDelayedList>
    45f4:	00 00       	nop
    45f6:	26 96       	adiw	r28, 0x06	; 6
    45f8:	0f b6       	in	r0, 0x3f	; 63
    45fa:	f8 94       	cli
    45fc:	de bf       	out	0x3e, r29	; 62
    45fe:	0f be       	out	0x3f, r0	; 63
    4600:	cd bf       	out	0x3d, r28	; 61
    4602:	df 91       	pop	r29
    4604:	cf 91       	pop	r28
    4606:	08 95       	ret

00004608 <vTaskPlaceOnUnorderedEventList>:
    4608:	0f 93       	push	r16
    460a:	1f 93       	push	r17
    460c:	cf 93       	push	r28
    460e:	df 93       	push	r29
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62
    4614:	2c 97       	sbiw	r28, 0x0c	; 12
    4616:	0f b6       	in	r0, 0x3f	; 63
    4618:	f8 94       	cli
    461a:	de bf       	out	0x3e, r29	; 62
    461c:	0f be       	out	0x3f, r0	; 63
    461e:	cd bf       	out	0x3d, r28	; 61
    4620:	9c 83       	std	Y+4, r25	; 0x04
    4622:	8b 83       	std	Y+3, r24	; 0x03
    4624:	4d 83       	std	Y+5, r20	; 0x05
    4626:	5e 83       	std	Y+6, r21	; 0x06
    4628:	6f 83       	std	Y+7, r22	; 0x07
    462a:	78 87       	std	Y+8, r23	; 0x08
    462c:	09 87       	std	Y+9, r16	; 0x09
    462e:	1a 87       	std	Y+10, r17	; 0x0a
    4630:	2b 87       	std	Y+11, r18	; 0x0b
    4632:	3c 87       	std	Y+12, r19	; 0x0c
    4634:	20 91 93 13 	lds	r18, 0x1393	; 0x801393 <pxCurrentTCB>
    4638:	30 91 94 13 	lds	r19, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    463c:	8d 81       	ldd	r24, Y+5	; 0x05
    463e:	9e 81       	ldd	r25, Y+6	; 0x06
    4640:	af 81       	ldd	r26, Y+7	; 0x07
    4642:	b8 85       	ldd	r27, Y+8	; 0x08
    4644:	b0 68       	ori	r27, 0x80	; 128
    4646:	f9 01       	movw	r30, r18
    4648:	86 87       	std	Z+14, r24	; 0x0e
    464a:	97 87       	std	Z+15, r25	; 0x0f
    464c:	a0 8b       	std	Z+16, r26	; 0x10
    464e:	b1 8b       	std	Z+17, r27	; 0x11
    4650:	8b 81       	ldd	r24, Y+3	; 0x03
    4652:	9c 81       	ldd	r25, Y+4	; 0x04
    4654:	fc 01       	movw	r30, r24
    4656:	81 81       	ldd	r24, Z+1	; 0x01
    4658:	92 81       	ldd	r25, Z+2	; 0x02
    465a:	9a 83       	std	Y+2, r25	; 0x02
    465c:	89 83       	std	Y+1, r24	; 0x01
    465e:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    4662:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    4666:	29 81       	ldd	r18, Y+1	; 0x01
    4668:	3a 81       	ldd	r19, Y+2	; 0x02
    466a:	fc 01       	movw	r30, r24
    466c:	33 8b       	std	Z+19, r19	; 0x13
    466e:	22 8b       	std	Z+18, r18	; 0x12
    4670:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    4674:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    4678:	29 81       	ldd	r18, Y+1	; 0x01
    467a:	3a 81       	ldd	r19, Y+2	; 0x02
    467c:	f9 01       	movw	r30, r18
    467e:	26 81       	ldd	r18, Z+6	; 0x06
    4680:	37 81       	ldd	r19, Z+7	; 0x07
    4682:	fc 01       	movw	r30, r24
    4684:	35 8b       	std	Z+21, r19	; 0x15
    4686:	24 8b       	std	Z+20, r18	; 0x14
    4688:	89 81       	ldd	r24, Y+1	; 0x01
    468a:	9a 81       	ldd	r25, Y+2	; 0x02
    468c:	fc 01       	movw	r30, r24
    468e:	86 81       	ldd	r24, Z+6	; 0x06
    4690:	97 81       	ldd	r25, Z+7	; 0x07
    4692:	20 91 93 13 	lds	r18, 0x1393	; 0x801393 <pxCurrentTCB>
    4696:	30 91 94 13 	lds	r19, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    469a:	22 5f       	subi	r18, 0xF2	; 242
    469c:	3f 4f       	sbci	r19, 0xFF	; 255
    469e:	fc 01       	movw	r30, r24
    46a0:	35 83       	std	Z+5, r19	; 0x05
    46a2:	24 83       	std	Z+4, r18	; 0x04
    46a4:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    46a8:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    46ac:	9c 01       	movw	r18, r24
    46ae:	22 5f       	subi	r18, 0xF2	; 242
    46b0:	3f 4f       	sbci	r19, 0xFF	; 255
    46b2:	89 81       	ldd	r24, Y+1	; 0x01
    46b4:	9a 81       	ldd	r25, Y+2	; 0x02
    46b6:	fc 01       	movw	r30, r24
    46b8:	37 83       	std	Z+7, r19	; 0x07
    46ba:	26 83       	std	Z+6, r18	; 0x06
    46bc:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    46c0:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    46c4:	2b 81       	ldd	r18, Y+3	; 0x03
    46c6:	3c 81       	ldd	r19, Y+4	; 0x04
    46c8:	fc 01       	movw	r30, r24
    46ca:	31 8f       	std	Z+25, r19	; 0x19
    46cc:	20 8f       	std	Z+24, r18	; 0x18
    46ce:	8b 81       	ldd	r24, Y+3	; 0x03
    46d0:	9c 81       	ldd	r25, Y+4	; 0x04
    46d2:	fc 01       	movw	r30, r24
    46d4:	80 81       	ld	r24, Z
    46d6:	21 e0       	ldi	r18, 0x01	; 1
    46d8:	28 0f       	add	r18, r24
    46da:	8b 81       	ldd	r24, Y+3	; 0x03
    46dc:	9c 81       	ldd	r25, Y+4	; 0x04
    46de:	fc 01       	movw	r30, r24
    46e0:	20 83       	st	Z, r18
    46e2:	89 85       	ldd	r24, Y+9	; 0x09
    46e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46e6:	ab 85       	ldd	r26, Y+11	; 0x0b
    46e8:	bc 85       	ldd	r27, Y+12	; 0x0c
    46ea:	41 e0       	ldi	r20, 0x01	; 1
    46ec:	bc 01       	movw	r22, r24
    46ee:	cd 01       	movw	r24, r26
    46f0:	0e 94 32 31 	call	0x6264	; 0x6264 <prvAddCurrentTaskToDelayedList>
    46f4:	00 00       	nop
    46f6:	2c 96       	adiw	r28, 0x0c	; 12
    46f8:	0f b6       	in	r0, 0x3f	; 63
    46fa:	f8 94       	cli
    46fc:	de bf       	out	0x3e, r29	; 62
    46fe:	0f be       	out	0x3f, r0	; 63
    4700:	cd bf       	out	0x3d, r28	; 61
    4702:	df 91       	pop	r29
    4704:	cf 91       	pop	r28
    4706:	1f 91       	pop	r17
    4708:	0f 91       	pop	r16
    470a:	08 95       	ret

0000470c <vTaskPlaceOnEventListRestricted>:
    470c:	cf 93       	push	r28
    470e:	df 93       	push	r29
    4710:	cd b7       	in	r28, 0x3d	; 61
    4712:	de b7       	in	r29, 0x3e	; 62
    4714:	29 97       	sbiw	r28, 0x09	; 9
    4716:	0f b6       	in	r0, 0x3f	; 63
    4718:	f8 94       	cli
    471a:	de bf       	out	0x3e, r29	; 62
    471c:	0f be       	out	0x3f, r0	; 63
    471e:	cd bf       	out	0x3d, r28	; 61
    4720:	9c 83       	std	Y+4, r25	; 0x04
    4722:	8b 83       	std	Y+3, r24	; 0x03
    4724:	4d 83       	std	Y+5, r20	; 0x05
    4726:	5e 83       	std	Y+6, r21	; 0x06
    4728:	6f 83       	std	Y+7, r22	; 0x07
    472a:	78 87       	std	Y+8, r23	; 0x08
    472c:	29 87       	std	Y+9, r18	; 0x09
    472e:	8b 81       	ldd	r24, Y+3	; 0x03
    4730:	9c 81       	ldd	r25, Y+4	; 0x04
    4732:	fc 01       	movw	r30, r24
    4734:	81 81       	ldd	r24, Z+1	; 0x01
    4736:	92 81       	ldd	r25, Z+2	; 0x02
    4738:	9a 83       	std	Y+2, r25	; 0x02
    473a:	89 83       	std	Y+1, r24	; 0x01
    473c:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    4740:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    4744:	29 81       	ldd	r18, Y+1	; 0x01
    4746:	3a 81       	ldd	r19, Y+2	; 0x02
    4748:	fc 01       	movw	r30, r24
    474a:	33 8b       	std	Z+19, r19	; 0x13
    474c:	22 8b       	std	Z+18, r18	; 0x12
    474e:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    4752:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    4756:	29 81       	ldd	r18, Y+1	; 0x01
    4758:	3a 81       	ldd	r19, Y+2	; 0x02
    475a:	f9 01       	movw	r30, r18
    475c:	26 81       	ldd	r18, Z+6	; 0x06
    475e:	37 81       	ldd	r19, Z+7	; 0x07
    4760:	fc 01       	movw	r30, r24
    4762:	35 8b       	std	Z+21, r19	; 0x15
    4764:	24 8b       	std	Z+20, r18	; 0x14
    4766:	89 81       	ldd	r24, Y+1	; 0x01
    4768:	9a 81       	ldd	r25, Y+2	; 0x02
    476a:	fc 01       	movw	r30, r24
    476c:	86 81       	ldd	r24, Z+6	; 0x06
    476e:	97 81       	ldd	r25, Z+7	; 0x07
    4770:	20 91 93 13 	lds	r18, 0x1393	; 0x801393 <pxCurrentTCB>
    4774:	30 91 94 13 	lds	r19, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    4778:	22 5f       	subi	r18, 0xF2	; 242
    477a:	3f 4f       	sbci	r19, 0xFF	; 255
    477c:	fc 01       	movw	r30, r24
    477e:	35 83       	std	Z+5, r19	; 0x05
    4780:	24 83       	std	Z+4, r18	; 0x04
    4782:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    4786:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    478a:	9c 01       	movw	r18, r24
    478c:	22 5f       	subi	r18, 0xF2	; 242
    478e:	3f 4f       	sbci	r19, 0xFF	; 255
    4790:	89 81       	ldd	r24, Y+1	; 0x01
    4792:	9a 81       	ldd	r25, Y+2	; 0x02
    4794:	fc 01       	movw	r30, r24
    4796:	37 83       	std	Z+7, r19	; 0x07
    4798:	26 83       	std	Z+6, r18	; 0x06
    479a:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    479e:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    47a2:	2b 81       	ldd	r18, Y+3	; 0x03
    47a4:	3c 81       	ldd	r19, Y+4	; 0x04
    47a6:	fc 01       	movw	r30, r24
    47a8:	31 8f       	std	Z+25, r19	; 0x19
    47aa:	20 8f       	std	Z+24, r18	; 0x18
    47ac:	8b 81       	ldd	r24, Y+3	; 0x03
    47ae:	9c 81       	ldd	r25, Y+4	; 0x04
    47b0:	fc 01       	movw	r30, r24
    47b2:	80 81       	ld	r24, Z
    47b4:	21 e0       	ldi	r18, 0x01	; 1
    47b6:	28 0f       	add	r18, r24
    47b8:	8b 81       	ldd	r24, Y+3	; 0x03
    47ba:	9c 81       	ldd	r25, Y+4	; 0x04
    47bc:	fc 01       	movw	r30, r24
    47be:	20 83       	st	Z, r18
    47c0:	89 85       	ldd	r24, Y+9	; 0x09
    47c2:	88 23       	and	r24, r24
    47c4:	39 f0       	breq	.+14     	; 0x47d4 <vTaskPlaceOnEventListRestricted+0xc8>
    47c6:	8f ef       	ldi	r24, 0xFF	; 255
    47c8:	9f ef       	ldi	r25, 0xFF	; 255
    47ca:	dc 01       	movw	r26, r24
    47cc:	8d 83       	std	Y+5, r24	; 0x05
    47ce:	9e 83       	std	Y+6, r25	; 0x06
    47d0:	af 83       	std	Y+7, r26	; 0x07
    47d2:	b8 87       	std	Y+8, r27	; 0x08
    47d4:	8d 81       	ldd	r24, Y+5	; 0x05
    47d6:	9e 81       	ldd	r25, Y+6	; 0x06
    47d8:	af 81       	ldd	r26, Y+7	; 0x07
    47da:	b8 85       	ldd	r27, Y+8	; 0x08
    47dc:	49 85       	ldd	r20, Y+9	; 0x09
    47de:	bc 01       	movw	r22, r24
    47e0:	cd 01       	movw	r24, r26
    47e2:	0e 94 32 31 	call	0x6264	; 0x6264 <prvAddCurrentTaskToDelayedList>
    47e6:	00 00       	nop
    47e8:	29 96       	adiw	r28, 0x09	; 9
    47ea:	0f b6       	in	r0, 0x3f	; 63
    47ec:	f8 94       	cli
    47ee:	de bf       	out	0x3e, r29	; 62
    47f0:	0f be       	out	0x3f, r0	; 63
    47f2:	cd bf       	out	0x3d, r28	; 61
    47f4:	df 91       	pop	r29
    47f6:	cf 91       	pop	r28
    47f8:	08 95       	ret

000047fa <xTaskRemoveFromEventList>:
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29
    47fe:	cd b7       	in	r28, 0x3d	; 61
    4800:	de b7       	in	r29, 0x3e	; 62
    4802:	2d 97       	sbiw	r28, 0x0d	; 13
    4804:	0f b6       	in	r0, 0x3f	; 63
    4806:	f8 94       	cli
    4808:	de bf       	out	0x3e, r29	; 62
    480a:	0f be       	out	0x3f, r0	; 63
    480c:	cd bf       	out	0x3d, r28	; 61
    480e:	9d 87       	std	Y+13, r25	; 0x0d
    4810:	8c 87       	std	Y+12, r24	; 0x0c
    4812:	8c 85       	ldd	r24, Y+12	; 0x0c
    4814:	9d 85       	ldd	r25, Y+13	; 0x0d
    4816:	fc 01       	movw	r30, r24
    4818:	87 81       	ldd	r24, Z+7	; 0x07
    481a:	90 85       	ldd	r25, Z+8	; 0x08
    481c:	fc 01       	movw	r30, r24
    481e:	80 85       	ldd	r24, Z+8	; 0x08
    4820:	91 85       	ldd	r25, Z+9	; 0x09
    4822:	9b 83       	std	Y+3, r25	; 0x03
    4824:	8a 83       	std	Y+2, r24	; 0x02
    4826:	8a 81       	ldd	r24, Y+2	; 0x02
    4828:	9b 81       	ldd	r25, Y+3	; 0x03
    482a:	fc 01       	movw	r30, r24
    482c:	80 8d       	ldd	r24, Z+24	; 0x18
    482e:	91 8d       	ldd	r25, Z+25	; 0x19
    4830:	9d 83       	std	Y+5, r25	; 0x05
    4832:	8c 83       	std	Y+4, r24	; 0x04
    4834:	8a 81       	ldd	r24, Y+2	; 0x02
    4836:	9b 81       	ldd	r25, Y+3	; 0x03
    4838:	fc 01       	movw	r30, r24
    483a:	82 89       	ldd	r24, Z+18	; 0x12
    483c:	93 89       	ldd	r25, Z+19	; 0x13
    483e:	2a 81       	ldd	r18, Y+2	; 0x02
    4840:	3b 81       	ldd	r19, Y+3	; 0x03
    4842:	f9 01       	movw	r30, r18
    4844:	24 89       	ldd	r18, Z+20	; 0x14
    4846:	35 89       	ldd	r19, Z+21	; 0x15
    4848:	fc 01       	movw	r30, r24
    484a:	37 83       	std	Z+7, r19	; 0x07
    484c:	26 83       	std	Z+6, r18	; 0x06
    484e:	8a 81       	ldd	r24, Y+2	; 0x02
    4850:	9b 81       	ldd	r25, Y+3	; 0x03
    4852:	fc 01       	movw	r30, r24
    4854:	84 89       	ldd	r24, Z+20	; 0x14
    4856:	95 89       	ldd	r25, Z+21	; 0x15
    4858:	2a 81       	ldd	r18, Y+2	; 0x02
    485a:	3b 81       	ldd	r19, Y+3	; 0x03
    485c:	f9 01       	movw	r30, r18
    485e:	22 89       	ldd	r18, Z+18	; 0x12
    4860:	33 89       	ldd	r19, Z+19	; 0x13
    4862:	fc 01       	movw	r30, r24
    4864:	35 83       	std	Z+5, r19	; 0x05
    4866:	24 83       	std	Z+4, r18	; 0x04
    4868:	8c 81       	ldd	r24, Y+4	; 0x04
    486a:	9d 81       	ldd	r25, Y+5	; 0x05
    486c:	fc 01       	movw	r30, r24
    486e:	21 81       	ldd	r18, Z+1	; 0x01
    4870:	32 81       	ldd	r19, Z+2	; 0x02
    4872:	8a 81       	ldd	r24, Y+2	; 0x02
    4874:	9b 81       	ldd	r25, Y+3	; 0x03
    4876:	0e 96       	adiw	r24, 0x0e	; 14
    4878:	28 17       	cp	r18, r24
    487a:	39 07       	cpc	r19, r25
    487c:	51 f4       	brne	.+20     	; 0x4892 <xTaskRemoveFromEventList+0x98>
    487e:	8a 81       	ldd	r24, Y+2	; 0x02
    4880:	9b 81       	ldd	r25, Y+3	; 0x03
    4882:	fc 01       	movw	r30, r24
    4884:	24 89       	ldd	r18, Z+20	; 0x14
    4886:	35 89       	ldd	r19, Z+21	; 0x15
    4888:	8c 81       	ldd	r24, Y+4	; 0x04
    488a:	9d 81       	ldd	r25, Y+5	; 0x05
    488c:	fc 01       	movw	r30, r24
    488e:	32 83       	std	Z+2, r19	; 0x02
    4890:	21 83       	std	Z+1, r18	; 0x01
    4892:	8a 81       	ldd	r24, Y+2	; 0x02
    4894:	9b 81       	ldd	r25, Y+3	; 0x03
    4896:	fc 01       	movw	r30, r24
    4898:	11 8e       	std	Z+25, r1	; 0x19
    489a:	10 8e       	std	Z+24, r1	; 0x18
    489c:	8c 81       	ldd	r24, Y+4	; 0x04
    489e:	9d 81       	ldd	r25, Y+5	; 0x05
    48a0:	fc 01       	movw	r30, r24
    48a2:	80 81       	ld	r24, Z
    48a4:	2f ef       	ldi	r18, 0xFF	; 255
    48a6:	28 0f       	add	r18, r24
    48a8:	8c 81       	ldd	r24, Y+4	; 0x04
    48aa:	9d 81       	ldd	r25, Y+5	; 0x05
    48ac:	fc 01       	movw	r30, r24
    48ae:	20 83       	st	Z, r18
    48b0:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <uxSchedulerSuspended>
    48b4:	88 23       	and	r24, r24
    48b6:	09 f0       	breq	.+2      	; 0x48ba <xTaskRemoveFromEventList+0xc0>
    48b8:	bf c0       	rjmp	.+382    	; 0x4a38 <xTaskRemoveFromEventList+0x23e>
    48ba:	8a 81       	ldd	r24, Y+2	; 0x02
    48bc:	9b 81       	ldd	r25, Y+3	; 0x03
    48be:	fc 01       	movw	r30, r24
    48c0:	84 85       	ldd	r24, Z+12	; 0x0c
    48c2:	95 85       	ldd	r25, Z+13	; 0x0d
    48c4:	9f 83       	std	Y+7, r25	; 0x07
    48c6:	8e 83       	std	Y+6, r24	; 0x06
    48c8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ca:	9b 81       	ldd	r25, Y+3	; 0x03
    48cc:	fc 01       	movw	r30, r24
    48ce:	86 81       	ldd	r24, Z+6	; 0x06
    48d0:	97 81       	ldd	r25, Z+7	; 0x07
    48d2:	2a 81       	ldd	r18, Y+2	; 0x02
    48d4:	3b 81       	ldd	r19, Y+3	; 0x03
    48d6:	f9 01       	movw	r30, r18
    48d8:	20 85       	ldd	r18, Z+8	; 0x08
    48da:	31 85       	ldd	r19, Z+9	; 0x09
    48dc:	fc 01       	movw	r30, r24
    48de:	37 83       	std	Z+7, r19	; 0x07
    48e0:	26 83       	std	Z+6, r18	; 0x06
    48e2:	8a 81       	ldd	r24, Y+2	; 0x02
    48e4:	9b 81       	ldd	r25, Y+3	; 0x03
    48e6:	fc 01       	movw	r30, r24
    48e8:	80 85       	ldd	r24, Z+8	; 0x08
    48ea:	91 85       	ldd	r25, Z+9	; 0x09
    48ec:	2a 81       	ldd	r18, Y+2	; 0x02
    48ee:	3b 81       	ldd	r19, Y+3	; 0x03
    48f0:	f9 01       	movw	r30, r18
    48f2:	26 81       	ldd	r18, Z+6	; 0x06
    48f4:	37 81       	ldd	r19, Z+7	; 0x07
    48f6:	fc 01       	movw	r30, r24
    48f8:	35 83       	std	Z+5, r19	; 0x05
    48fa:	24 83       	std	Z+4, r18	; 0x04
    48fc:	8e 81       	ldd	r24, Y+6	; 0x06
    48fe:	9f 81       	ldd	r25, Y+7	; 0x07
    4900:	fc 01       	movw	r30, r24
    4902:	21 81       	ldd	r18, Z+1	; 0x01
    4904:	32 81       	ldd	r19, Z+2	; 0x02
    4906:	8a 81       	ldd	r24, Y+2	; 0x02
    4908:	9b 81       	ldd	r25, Y+3	; 0x03
    490a:	02 96       	adiw	r24, 0x02	; 2
    490c:	28 17       	cp	r18, r24
    490e:	39 07       	cpc	r19, r25
    4910:	51 f4       	brne	.+20     	; 0x4926 <xTaskRemoveFromEventList+0x12c>
    4912:	8a 81       	ldd	r24, Y+2	; 0x02
    4914:	9b 81       	ldd	r25, Y+3	; 0x03
    4916:	fc 01       	movw	r30, r24
    4918:	20 85       	ldd	r18, Z+8	; 0x08
    491a:	31 85       	ldd	r19, Z+9	; 0x09
    491c:	8e 81       	ldd	r24, Y+6	; 0x06
    491e:	9f 81       	ldd	r25, Y+7	; 0x07
    4920:	fc 01       	movw	r30, r24
    4922:	32 83       	std	Z+2, r19	; 0x02
    4924:	21 83       	std	Z+1, r18	; 0x01
    4926:	8a 81       	ldd	r24, Y+2	; 0x02
    4928:	9b 81       	ldd	r25, Y+3	; 0x03
    492a:	fc 01       	movw	r30, r24
    492c:	15 86       	std	Z+13, r1	; 0x0d
    492e:	14 86       	std	Z+12, r1	; 0x0c
    4930:	8e 81       	ldd	r24, Y+6	; 0x06
    4932:	9f 81       	ldd	r25, Y+7	; 0x07
    4934:	fc 01       	movw	r30, r24
    4936:	80 81       	ld	r24, Z
    4938:	2f ef       	ldi	r18, 0xFF	; 255
    493a:	28 0f       	add	r18, r24
    493c:	8e 81       	ldd	r24, Y+6	; 0x06
    493e:	9f 81       	ldd	r25, Y+7	; 0x07
    4940:	fc 01       	movw	r30, r24
    4942:	20 83       	st	Z, r18
    4944:	8a 81       	ldd	r24, Y+2	; 0x02
    4946:	9b 81       	ldd	r25, Y+3	; 0x03
    4948:	fc 01       	movw	r30, r24
    494a:	92 8d       	ldd	r25, Z+26	; 0x1a
    494c:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    4950:	89 17       	cp	r24, r25
    4952:	30 f4       	brcc	.+12     	; 0x4960 <xTaskRemoveFromEventList+0x166>
    4954:	8a 81       	ldd	r24, Y+2	; 0x02
    4956:	9b 81       	ldd	r25, Y+3	; 0x03
    4958:	fc 01       	movw	r30, r24
    495a:	82 8d       	ldd	r24, Z+26	; 0x1a
    495c:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    4960:	8a 81       	ldd	r24, Y+2	; 0x02
    4962:	9b 81       	ldd	r25, Y+3	; 0x03
    4964:	fc 01       	movw	r30, r24
    4966:	82 8d       	ldd	r24, Z+26	; 0x1a
    4968:	28 2f       	mov	r18, r24
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	4b e0       	ldi	r20, 0x0B	; 11
    496e:	42 9f       	mul	r20, r18
    4970:	c0 01       	movw	r24, r0
    4972:	43 9f       	mul	r20, r19
    4974:	90 0d       	add	r25, r0
    4976:	11 24       	eor	r1, r1
    4978:	8a 56       	subi	r24, 0x6A	; 106
    497a:	9c 4e       	sbci	r25, 0xEC	; 236
    497c:	fc 01       	movw	r30, r24
    497e:	80 81       	ld	r24, Z
    4980:	91 81       	ldd	r25, Z+1	; 0x01
    4982:	99 87       	std	Y+9, r25	; 0x09
    4984:	88 87       	std	Y+8, r24	; 0x08
    4986:	8a 81       	ldd	r24, Y+2	; 0x02
    4988:	9b 81       	ldd	r25, Y+3	; 0x03
    498a:	28 85       	ldd	r18, Y+8	; 0x08
    498c:	39 85       	ldd	r19, Y+9	; 0x09
    498e:	fc 01       	movw	r30, r24
    4990:	37 83       	std	Z+7, r19	; 0x07
    4992:	26 83       	std	Z+6, r18	; 0x06
    4994:	88 85       	ldd	r24, Y+8	; 0x08
    4996:	99 85       	ldd	r25, Y+9	; 0x09
    4998:	fc 01       	movw	r30, r24
    499a:	26 81       	ldd	r18, Z+6	; 0x06
    499c:	37 81       	ldd	r19, Z+7	; 0x07
    499e:	8a 81       	ldd	r24, Y+2	; 0x02
    49a0:	9b 81       	ldd	r25, Y+3	; 0x03
    49a2:	fc 01       	movw	r30, r24
    49a4:	31 87       	std	Z+9, r19	; 0x09
    49a6:	20 87       	std	Z+8, r18	; 0x08
    49a8:	88 85       	ldd	r24, Y+8	; 0x08
    49aa:	99 85       	ldd	r25, Y+9	; 0x09
    49ac:	fc 01       	movw	r30, r24
    49ae:	86 81       	ldd	r24, Z+6	; 0x06
    49b0:	97 81       	ldd	r25, Z+7	; 0x07
    49b2:	2a 81       	ldd	r18, Y+2	; 0x02
    49b4:	3b 81       	ldd	r19, Y+3	; 0x03
    49b6:	2e 5f       	subi	r18, 0xFE	; 254
    49b8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ba:	fc 01       	movw	r30, r24
    49bc:	35 83       	std	Z+5, r19	; 0x05
    49be:	24 83       	std	Z+4, r18	; 0x04
    49c0:	8a 81       	ldd	r24, Y+2	; 0x02
    49c2:	9b 81       	ldd	r25, Y+3	; 0x03
    49c4:	9c 01       	movw	r18, r24
    49c6:	2e 5f       	subi	r18, 0xFE	; 254
    49c8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ca:	88 85       	ldd	r24, Y+8	; 0x08
    49cc:	99 85       	ldd	r25, Y+9	; 0x09
    49ce:	fc 01       	movw	r30, r24
    49d0:	37 83       	std	Z+7, r19	; 0x07
    49d2:	26 83       	std	Z+6, r18	; 0x06
    49d4:	8a 81       	ldd	r24, Y+2	; 0x02
    49d6:	9b 81       	ldd	r25, Y+3	; 0x03
    49d8:	fc 01       	movw	r30, r24
    49da:	82 8d       	ldd	r24, Z+26	; 0x1a
    49dc:	28 2f       	mov	r18, r24
    49de:	30 e0       	ldi	r19, 0x00	; 0
    49e0:	4b e0       	ldi	r20, 0x0B	; 11
    49e2:	42 9f       	mul	r20, r18
    49e4:	c0 01       	movw	r24, r0
    49e6:	43 9f       	mul	r20, r19
    49e8:	90 0d       	add	r25, r0
    49ea:	11 24       	eor	r1, r1
    49ec:	9c 01       	movw	r18, r24
    49ee:	2b 56       	subi	r18, 0x6B	; 107
    49f0:	3c 4e       	sbci	r19, 0xEC	; 236
    49f2:	8a 81       	ldd	r24, Y+2	; 0x02
    49f4:	9b 81       	ldd	r25, Y+3	; 0x03
    49f6:	fc 01       	movw	r30, r24
    49f8:	35 87       	std	Z+13, r19	; 0x0d
    49fa:	24 87       	std	Z+12, r18	; 0x0c
    49fc:	8a 81       	ldd	r24, Y+2	; 0x02
    49fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4a00:	fc 01       	movw	r30, r24
    4a02:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a04:	88 2f       	mov	r24, r24
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	4b e0       	ldi	r20, 0x0B	; 11
    4a0a:	48 9f       	mul	r20, r24
    4a0c:	90 01       	movw	r18, r0
    4a0e:	49 9f       	mul	r20, r25
    4a10:	30 0d       	add	r19, r0
    4a12:	11 24       	eor	r1, r1
    4a14:	2b 56       	subi	r18, 0x6B	; 107
    4a16:	3c 4e       	sbci	r19, 0xEC	; 236
    4a18:	f9 01       	movw	r30, r18
    4a1a:	20 81       	ld	r18, Z
    4a1c:	41 e0       	ldi	r20, 0x01	; 1
    4a1e:	42 0f       	add	r20, r18
    4a20:	5b e0       	ldi	r21, 0x0B	; 11
    4a22:	58 9f       	mul	r21, r24
    4a24:	90 01       	movw	r18, r0
    4a26:	59 9f       	mul	r21, r25
    4a28:	30 0d       	add	r19, r0
    4a2a:	11 24       	eor	r1, r1
    4a2c:	c9 01       	movw	r24, r18
    4a2e:	8b 56       	subi	r24, 0x6B	; 107
    4a30:	9c 4e       	sbci	r25, 0xEC	; 236
    4a32:	fc 01       	movw	r30, r24
    4a34:	40 83       	st	Z, r20
    4a36:	39 c0       	rjmp	.+114    	; 0x4aaa <xTaskRemoveFromEventList+0x2b0>
    4a38:	80 91 1e 14 	lds	r24, 0x141E	; 0x80141e <xPendingReadyList+0x1>
    4a3c:	90 91 1f 14 	lds	r25, 0x141F	; 0x80141f <xPendingReadyList+0x2>
    4a40:	9b 87       	std	Y+11, r25	; 0x0b
    4a42:	8a 87       	std	Y+10, r24	; 0x0a
    4a44:	8a 81       	ldd	r24, Y+2	; 0x02
    4a46:	9b 81       	ldd	r25, Y+3	; 0x03
    4a48:	2a 85       	ldd	r18, Y+10	; 0x0a
    4a4a:	3b 85       	ldd	r19, Y+11	; 0x0b
    4a4c:	fc 01       	movw	r30, r24
    4a4e:	33 8b       	std	Z+19, r19	; 0x13
    4a50:	22 8b       	std	Z+18, r18	; 0x12
    4a52:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a54:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a56:	fc 01       	movw	r30, r24
    4a58:	26 81       	ldd	r18, Z+6	; 0x06
    4a5a:	37 81       	ldd	r19, Z+7	; 0x07
    4a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    4a60:	fc 01       	movw	r30, r24
    4a62:	35 8b       	std	Z+21, r19	; 0x15
    4a64:	24 8b       	std	Z+20, r18	; 0x14
    4a66:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a68:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a6a:	fc 01       	movw	r30, r24
    4a6c:	86 81       	ldd	r24, Z+6	; 0x06
    4a6e:	97 81       	ldd	r25, Z+7	; 0x07
    4a70:	2a 81       	ldd	r18, Y+2	; 0x02
    4a72:	3b 81       	ldd	r19, Y+3	; 0x03
    4a74:	22 5f       	subi	r18, 0xF2	; 242
    4a76:	3f 4f       	sbci	r19, 0xFF	; 255
    4a78:	fc 01       	movw	r30, r24
    4a7a:	35 83       	std	Z+5, r19	; 0x05
    4a7c:	24 83       	std	Z+4, r18	; 0x04
    4a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a80:	9b 81       	ldd	r25, Y+3	; 0x03
    4a82:	9c 01       	movw	r18, r24
    4a84:	22 5f       	subi	r18, 0xF2	; 242
    4a86:	3f 4f       	sbci	r19, 0xFF	; 255
    4a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a8c:	fc 01       	movw	r30, r24
    4a8e:	37 83       	std	Z+7, r19	; 0x07
    4a90:	26 83       	std	Z+6, r18	; 0x06
    4a92:	8a 81       	ldd	r24, Y+2	; 0x02
    4a94:	9b 81       	ldd	r25, Y+3	; 0x03
    4a96:	2d e1       	ldi	r18, 0x1D	; 29
    4a98:	34 e1       	ldi	r19, 0x14	; 20
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	31 8f       	std	Z+25, r19	; 0x19
    4a9e:	20 8f       	std	Z+24, r18	; 0x18
    4aa0:	80 91 1d 14 	lds	r24, 0x141D	; 0x80141d <xPendingReadyList>
    4aa4:	8f 5f       	subi	r24, 0xFF	; 255
    4aa6:	80 93 1d 14 	sts	0x141D, r24	; 0x80141d <xPendingReadyList>
    4aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    4aac:	9b 81       	ldd	r25, Y+3	; 0x03
    4aae:	fc 01       	movw	r30, r24
    4ab0:	22 8d       	ldd	r18, Z+26	; 0x1a
    4ab2:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    4ab6:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    4aba:	fc 01       	movw	r30, r24
    4abc:	82 8d       	ldd	r24, Z+26	; 0x1a
    4abe:	82 17       	cp	r24, r18
    4ac0:	30 f4       	brcc	.+12     	; 0x4ace <xTaskRemoveFromEventList+0x2d4>
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	89 83       	std	Y+1, r24	; 0x01
    4ac6:	81 e0       	ldi	r24, 0x01	; 1
    4ac8:	80 93 4a 14 	sts	0x144A, r24	; 0x80144a <xYieldPending>
    4acc:	01 c0       	rjmp	.+2      	; 0x4ad0 <xTaskRemoveFromEventList+0x2d6>
    4ace:	19 82       	std	Y+1, r1	; 0x01
    4ad0:	89 81       	ldd	r24, Y+1	; 0x01
    4ad2:	2d 96       	adiw	r28, 0x0d	; 13
    4ad4:	0f b6       	in	r0, 0x3f	; 63
    4ad6:	f8 94       	cli
    4ad8:	de bf       	out	0x3e, r29	; 62
    4ada:	0f be       	out	0x3f, r0	; 63
    4adc:	cd bf       	out	0x3d, r28	; 61
    4ade:	df 91       	pop	r29
    4ae0:	cf 91       	pop	r28
    4ae2:	08 95       	ret

00004ae4 <vTaskRemoveFromUnorderedEventList>:
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
    4ae8:	cd b7       	in	r28, 0x3d	; 61
    4aea:	de b7       	in	r29, 0x3e	; 62
    4aec:	2e 97       	sbiw	r28, 0x0e	; 14
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	f8 94       	cli
    4af2:	de bf       	out	0x3e, r29	; 62
    4af4:	0f be       	out	0x3f, r0	; 63
    4af6:	cd bf       	out	0x3d, r28	; 61
    4af8:	9a 87       	std	Y+10, r25	; 0x0a
    4afa:	89 87       	std	Y+9, r24	; 0x09
    4afc:	4b 87       	std	Y+11, r20	; 0x0b
    4afe:	5c 87       	std	Y+12, r21	; 0x0c
    4b00:	6d 87       	std	Y+13, r22	; 0x0d
    4b02:	7e 87       	std	Y+14, r23	; 0x0e
    4b04:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b06:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b08:	ad 85       	ldd	r26, Y+13	; 0x0d
    4b0a:	be 85       	ldd	r27, Y+14	; 0x0e
    4b0c:	b0 68       	ori	r27, 0x80	; 128
    4b0e:	29 85       	ldd	r18, Y+9	; 0x09
    4b10:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b12:	f9 01       	movw	r30, r18
    4b14:	80 83       	st	Z, r24
    4b16:	91 83       	std	Z+1, r25	; 0x01
    4b18:	a2 83       	std	Z+2, r26	; 0x02
    4b1a:	b3 83       	std	Z+3, r27	; 0x03
    4b1c:	89 85       	ldd	r24, Y+9	; 0x09
    4b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b20:	fc 01       	movw	r30, r24
    4b22:	80 85       	ldd	r24, Z+8	; 0x08
    4b24:	91 85       	ldd	r25, Z+9	; 0x09
    4b26:	9a 83       	std	Y+2, r25	; 0x02
    4b28:	89 83       	std	Y+1, r24	; 0x01
    4b2a:	89 85       	ldd	r24, Y+9	; 0x09
    4b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b2e:	fc 01       	movw	r30, r24
    4b30:	82 85       	ldd	r24, Z+10	; 0x0a
    4b32:	93 85       	ldd	r25, Z+11	; 0x0b
    4b34:	9c 83       	std	Y+4, r25	; 0x04
    4b36:	8b 83       	std	Y+3, r24	; 0x03
    4b38:	89 85       	ldd	r24, Y+9	; 0x09
    4b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b3c:	fc 01       	movw	r30, r24
    4b3e:	84 81       	ldd	r24, Z+4	; 0x04
    4b40:	95 81       	ldd	r25, Z+5	; 0x05
    4b42:	29 85       	ldd	r18, Y+9	; 0x09
    4b44:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b46:	f9 01       	movw	r30, r18
    4b48:	26 81       	ldd	r18, Z+6	; 0x06
    4b4a:	37 81       	ldd	r19, Z+7	; 0x07
    4b4c:	fc 01       	movw	r30, r24
    4b4e:	37 83       	std	Z+7, r19	; 0x07
    4b50:	26 83       	std	Z+6, r18	; 0x06
    4b52:	89 85       	ldd	r24, Y+9	; 0x09
    4b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b56:	fc 01       	movw	r30, r24
    4b58:	86 81       	ldd	r24, Z+6	; 0x06
    4b5a:	97 81       	ldd	r25, Z+7	; 0x07
    4b5c:	29 85       	ldd	r18, Y+9	; 0x09
    4b5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b60:	f9 01       	movw	r30, r18
    4b62:	24 81       	ldd	r18, Z+4	; 0x04
    4b64:	35 81       	ldd	r19, Z+5	; 0x05
    4b66:	fc 01       	movw	r30, r24
    4b68:	35 83       	std	Z+5, r19	; 0x05
    4b6a:	24 83       	std	Z+4, r18	; 0x04
    4b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b70:	fc 01       	movw	r30, r24
    4b72:	21 81       	ldd	r18, Z+1	; 0x01
    4b74:	32 81       	ldd	r19, Z+2	; 0x02
    4b76:	89 85       	ldd	r24, Y+9	; 0x09
    4b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b7a:	28 17       	cp	r18, r24
    4b7c:	39 07       	cpc	r19, r25
    4b7e:	51 f4       	brne	.+20     	; 0x4b94 <vTaskRemoveFromUnorderedEventList+0xb0>
    4b80:	89 85       	ldd	r24, Y+9	; 0x09
    4b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b84:	fc 01       	movw	r30, r24
    4b86:	26 81       	ldd	r18, Z+6	; 0x06
    4b88:	37 81       	ldd	r19, Z+7	; 0x07
    4b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b8e:	fc 01       	movw	r30, r24
    4b90:	32 83       	std	Z+2, r19	; 0x02
    4b92:	21 83       	std	Z+1, r18	; 0x01
    4b94:	89 85       	ldd	r24, Y+9	; 0x09
    4b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b98:	fc 01       	movw	r30, r24
    4b9a:	13 86       	std	Z+11, r1	; 0x0b
    4b9c:	12 86       	std	Z+10, r1	; 0x0a
    4b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ba2:	fc 01       	movw	r30, r24
    4ba4:	80 81       	ld	r24, Z
    4ba6:	2f ef       	ldi	r18, 0xFF	; 255
    4ba8:	28 0f       	add	r18, r24
    4baa:	8b 81       	ldd	r24, Y+3	; 0x03
    4bac:	9c 81       	ldd	r25, Y+4	; 0x04
    4bae:	fc 01       	movw	r30, r24
    4bb0:	20 83       	st	Z, r18
    4bb2:	89 81       	ldd	r24, Y+1	; 0x01
    4bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb6:	fc 01       	movw	r30, r24
    4bb8:	84 85       	ldd	r24, Z+12	; 0x0c
    4bba:	95 85       	ldd	r25, Z+13	; 0x0d
    4bbc:	9e 83       	std	Y+6, r25	; 0x06
    4bbe:	8d 83       	std	Y+5, r24	; 0x05
    4bc0:	89 81       	ldd	r24, Y+1	; 0x01
    4bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc4:	fc 01       	movw	r30, r24
    4bc6:	86 81       	ldd	r24, Z+6	; 0x06
    4bc8:	97 81       	ldd	r25, Z+7	; 0x07
    4bca:	29 81       	ldd	r18, Y+1	; 0x01
    4bcc:	3a 81       	ldd	r19, Y+2	; 0x02
    4bce:	f9 01       	movw	r30, r18
    4bd0:	20 85       	ldd	r18, Z+8	; 0x08
    4bd2:	31 85       	ldd	r19, Z+9	; 0x09
    4bd4:	fc 01       	movw	r30, r24
    4bd6:	37 83       	std	Z+7, r19	; 0x07
    4bd8:	26 83       	std	Z+6, r18	; 0x06
    4bda:	89 81       	ldd	r24, Y+1	; 0x01
    4bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bde:	fc 01       	movw	r30, r24
    4be0:	80 85       	ldd	r24, Z+8	; 0x08
    4be2:	91 85       	ldd	r25, Z+9	; 0x09
    4be4:	29 81       	ldd	r18, Y+1	; 0x01
    4be6:	3a 81       	ldd	r19, Y+2	; 0x02
    4be8:	f9 01       	movw	r30, r18
    4bea:	26 81       	ldd	r18, Z+6	; 0x06
    4bec:	37 81       	ldd	r19, Z+7	; 0x07
    4bee:	fc 01       	movw	r30, r24
    4bf0:	35 83       	std	Z+5, r19	; 0x05
    4bf2:	24 83       	std	Z+4, r18	; 0x04
    4bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	21 81       	ldd	r18, Z+1	; 0x01
    4bfc:	32 81       	ldd	r19, Z+2	; 0x02
    4bfe:	89 81       	ldd	r24, Y+1	; 0x01
    4c00:	9a 81       	ldd	r25, Y+2	; 0x02
    4c02:	02 96       	adiw	r24, 0x02	; 2
    4c04:	28 17       	cp	r18, r24
    4c06:	39 07       	cpc	r19, r25
    4c08:	51 f4       	brne	.+20     	; 0x4c1e <vTaskRemoveFromUnorderedEventList+0x13a>
    4c0a:	89 81       	ldd	r24, Y+1	; 0x01
    4c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0e:	fc 01       	movw	r30, r24
    4c10:	20 85       	ldd	r18, Z+8	; 0x08
    4c12:	31 85       	ldd	r19, Z+9	; 0x09
    4c14:	8d 81       	ldd	r24, Y+5	; 0x05
    4c16:	9e 81       	ldd	r25, Y+6	; 0x06
    4c18:	fc 01       	movw	r30, r24
    4c1a:	32 83       	std	Z+2, r19	; 0x02
    4c1c:	21 83       	std	Z+1, r18	; 0x01
    4c1e:	89 81       	ldd	r24, Y+1	; 0x01
    4c20:	9a 81       	ldd	r25, Y+2	; 0x02
    4c22:	fc 01       	movw	r30, r24
    4c24:	15 86       	std	Z+13, r1	; 0x0d
    4c26:	14 86       	std	Z+12, r1	; 0x0c
    4c28:	8d 81       	ldd	r24, Y+5	; 0x05
    4c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c2c:	fc 01       	movw	r30, r24
    4c2e:	80 81       	ld	r24, Z
    4c30:	2f ef       	ldi	r18, 0xFF	; 255
    4c32:	28 0f       	add	r18, r24
    4c34:	8d 81       	ldd	r24, Y+5	; 0x05
    4c36:	9e 81       	ldd	r25, Y+6	; 0x06
    4c38:	fc 01       	movw	r30, r24
    4c3a:	20 83       	st	Z, r18
    4c3c:	89 81       	ldd	r24, Y+1	; 0x01
    4c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c40:	fc 01       	movw	r30, r24
    4c42:	92 8d       	ldd	r25, Z+26	; 0x1a
    4c44:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    4c48:	89 17       	cp	r24, r25
    4c4a:	30 f4       	brcc	.+12     	; 0x4c58 <vTaskRemoveFromUnorderedEventList+0x174>
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c50:	fc 01       	movw	r30, r24
    4c52:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c54:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    4c58:	89 81       	ldd	r24, Y+1	; 0x01
    4c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c60:	28 2f       	mov	r18, r24
    4c62:	30 e0       	ldi	r19, 0x00	; 0
    4c64:	4b e0       	ldi	r20, 0x0B	; 11
    4c66:	42 9f       	mul	r20, r18
    4c68:	c0 01       	movw	r24, r0
    4c6a:	43 9f       	mul	r20, r19
    4c6c:	90 0d       	add	r25, r0
    4c6e:	11 24       	eor	r1, r1
    4c70:	8a 56       	subi	r24, 0x6A	; 106
    4c72:	9c 4e       	sbci	r25, 0xEC	; 236
    4c74:	fc 01       	movw	r30, r24
    4c76:	80 81       	ld	r24, Z
    4c78:	91 81       	ldd	r25, Z+1	; 0x01
    4c7a:	98 87       	std	Y+8, r25	; 0x08
    4c7c:	8f 83       	std	Y+7, r24	; 0x07
    4c7e:	89 81       	ldd	r24, Y+1	; 0x01
    4c80:	9a 81       	ldd	r25, Y+2	; 0x02
    4c82:	2f 81       	ldd	r18, Y+7	; 0x07
    4c84:	38 85       	ldd	r19, Y+8	; 0x08
    4c86:	fc 01       	movw	r30, r24
    4c88:	37 83       	std	Z+7, r19	; 0x07
    4c8a:	26 83       	std	Z+6, r18	; 0x06
    4c8c:	8f 81       	ldd	r24, Y+7	; 0x07
    4c8e:	98 85       	ldd	r25, Y+8	; 0x08
    4c90:	fc 01       	movw	r30, r24
    4c92:	26 81       	ldd	r18, Z+6	; 0x06
    4c94:	37 81       	ldd	r19, Z+7	; 0x07
    4c96:	89 81       	ldd	r24, Y+1	; 0x01
    4c98:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9a:	fc 01       	movw	r30, r24
    4c9c:	31 87       	std	Z+9, r19	; 0x09
    4c9e:	20 87       	std	Z+8, r18	; 0x08
    4ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    4ca2:	98 85       	ldd	r25, Y+8	; 0x08
    4ca4:	fc 01       	movw	r30, r24
    4ca6:	86 81       	ldd	r24, Z+6	; 0x06
    4ca8:	97 81       	ldd	r25, Z+7	; 0x07
    4caa:	29 81       	ldd	r18, Y+1	; 0x01
    4cac:	3a 81       	ldd	r19, Y+2	; 0x02
    4cae:	2e 5f       	subi	r18, 0xFE	; 254
    4cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	35 83       	std	Z+5, r19	; 0x05
    4cb6:	24 83       	std	Z+4, r18	; 0x04
    4cb8:	89 81       	ldd	r24, Y+1	; 0x01
    4cba:	9a 81       	ldd	r25, Y+2	; 0x02
    4cbc:	9c 01       	movw	r18, r24
    4cbe:	2e 5f       	subi	r18, 0xFE	; 254
    4cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc2:	8f 81       	ldd	r24, Y+7	; 0x07
    4cc4:	98 85       	ldd	r25, Y+8	; 0x08
    4cc6:	fc 01       	movw	r30, r24
    4cc8:	37 83       	std	Z+7, r19	; 0x07
    4cca:	26 83       	std	Z+6, r18	; 0x06
    4ccc:	89 81       	ldd	r24, Y+1	; 0x01
    4cce:	9a 81       	ldd	r25, Y+2	; 0x02
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    4cd4:	28 2f       	mov	r18, r24
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	4b e0       	ldi	r20, 0x0B	; 11
    4cda:	42 9f       	mul	r20, r18
    4cdc:	c0 01       	movw	r24, r0
    4cde:	43 9f       	mul	r20, r19
    4ce0:	90 0d       	add	r25, r0
    4ce2:	11 24       	eor	r1, r1
    4ce4:	9c 01       	movw	r18, r24
    4ce6:	2b 56       	subi	r18, 0x6B	; 107
    4ce8:	3c 4e       	sbci	r19, 0xEC	; 236
    4cea:	89 81       	ldd	r24, Y+1	; 0x01
    4cec:	9a 81       	ldd	r25, Y+2	; 0x02
    4cee:	fc 01       	movw	r30, r24
    4cf0:	35 87       	std	Z+13, r19	; 0x0d
    4cf2:	24 87       	std	Z+12, r18	; 0x0c
    4cf4:	89 81       	ldd	r24, Y+1	; 0x01
    4cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	82 8d       	ldd	r24, Z+26	; 0x1a
    4cfc:	88 2f       	mov	r24, r24
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	4b e0       	ldi	r20, 0x0B	; 11
    4d02:	48 9f       	mul	r20, r24
    4d04:	90 01       	movw	r18, r0
    4d06:	49 9f       	mul	r20, r25
    4d08:	30 0d       	add	r19, r0
    4d0a:	11 24       	eor	r1, r1
    4d0c:	2b 56       	subi	r18, 0x6B	; 107
    4d0e:	3c 4e       	sbci	r19, 0xEC	; 236
    4d10:	f9 01       	movw	r30, r18
    4d12:	20 81       	ld	r18, Z
    4d14:	41 e0       	ldi	r20, 0x01	; 1
    4d16:	42 0f       	add	r20, r18
    4d18:	5b e0       	ldi	r21, 0x0B	; 11
    4d1a:	58 9f       	mul	r21, r24
    4d1c:	90 01       	movw	r18, r0
    4d1e:	59 9f       	mul	r21, r25
    4d20:	30 0d       	add	r19, r0
    4d22:	11 24       	eor	r1, r1
    4d24:	c9 01       	movw	r24, r18
    4d26:	8b 56       	subi	r24, 0x6B	; 107
    4d28:	9c 4e       	sbci	r25, 0xEC	; 236
    4d2a:	fc 01       	movw	r30, r24
    4d2c:	40 83       	st	Z, r20
    4d2e:	89 81       	ldd	r24, Y+1	; 0x01
    4d30:	9a 81       	ldd	r25, Y+2	; 0x02
    4d32:	fc 01       	movw	r30, r24
    4d34:	22 8d       	ldd	r18, Z+26	; 0x1a
    4d36:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    4d3a:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    4d3e:	fc 01       	movw	r30, r24
    4d40:	82 8d       	ldd	r24, Z+26	; 0x1a
    4d42:	82 17       	cp	r24, r18
    4d44:	18 f4       	brcc	.+6      	; 0x4d4c <vTaskRemoveFromUnorderedEventList+0x268>
    4d46:	81 e0       	ldi	r24, 0x01	; 1
    4d48:	80 93 4a 14 	sts	0x144A, r24	; 0x80144a <xYieldPending>
    4d4c:	00 00       	nop
    4d4e:	2e 96       	adiw	r28, 0x0e	; 14
    4d50:	0f b6       	in	r0, 0x3f	; 63
    4d52:	f8 94       	cli
    4d54:	de bf       	out	0x3e, r29	; 62
    4d56:	0f be       	out	0x3f, r0	; 63
    4d58:	cd bf       	out	0x3d, r28	; 61
    4d5a:	df 91       	pop	r29
    4d5c:	cf 91       	pop	r28
    4d5e:	08 95       	ret

00004d60 <vTaskSetTimeOutState>:
    4d60:	cf 93       	push	r28
    4d62:	df 93       	push	r29
    4d64:	1f 92       	push	r1
    4d66:	1f 92       	push	r1
    4d68:	cd b7       	in	r28, 0x3d	; 61
    4d6a:	de b7       	in	r29, 0x3e	; 62
    4d6c:	9a 83       	std	Y+2, r25	; 0x02
    4d6e:	89 83       	std	Y+1, r24	; 0x01
    4d70:	0f b6       	in	r0, 0x3f	; 63
    4d72:	f8 94       	cli
    4d74:	0f 92       	push	r0
    4d76:	20 91 4b 14 	lds	r18, 0x144B	; 0x80144b <xNumOfOverflows>
    4d7a:	89 81       	ldd	r24, Y+1	; 0x01
    4d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d7e:	fc 01       	movw	r30, r24
    4d80:	20 83       	st	Z, r18
    4d82:	80 91 40 14 	lds	r24, 0x1440	; 0x801440 <xTickCount>
    4d86:	90 91 41 14 	lds	r25, 0x1441	; 0x801441 <xTickCount+0x1>
    4d8a:	a0 91 42 14 	lds	r26, 0x1442	; 0x801442 <xTickCount+0x2>
    4d8e:	b0 91 43 14 	lds	r27, 0x1443	; 0x801443 <xTickCount+0x3>
    4d92:	29 81       	ldd	r18, Y+1	; 0x01
    4d94:	3a 81       	ldd	r19, Y+2	; 0x02
    4d96:	f9 01       	movw	r30, r18
    4d98:	81 83       	std	Z+1, r24	; 0x01
    4d9a:	92 83       	std	Z+2, r25	; 0x02
    4d9c:	a3 83       	std	Z+3, r26	; 0x03
    4d9e:	b4 83       	std	Z+4, r27	; 0x04
    4da0:	0f 90       	pop	r0
    4da2:	0f be       	out	0x3f, r0	; 63
    4da4:	00 00       	nop
    4da6:	0f 90       	pop	r0
    4da8:	0f 90       	pop	r0
    4daa:	df 91       	pop	r29
    4dac:	cf 91       	pop	r28
    4dae:	08 95       	ret

00004db0 <vTaskInternalSetTimeOutState>:
    4db0:	cf 93       	push	r28
    4db2:	df 93       	push	r29
    4db4:	1f 92       	push	r1
    4db6:	1f 92       	push	r1
    4db8:	cd b7       	in	r28, 0x3d	; 61
    4dba:	de b7       	in	r29, 0x3e	; 62
    4dbc:	9a 83       	std	Y+2, r25	; 0x02
    4dbe:	89 83       	std	Y+1, r24	; 0x01
    4dc0:	20 91 4b 14 	lds	r18, 0x144B	; 0x80144b <xNumOfOverflows>
    4dc4:	89 81       	ldd	r24, Y+1	; 0x01
    4dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc8:	fc 01       	movw	r30, r24
    4dca:	20 83       	st	Z, r18
    4dcc:	80 91 40 14 	lds	r24, 0x1440	; 0x801440 <xTickCount>
    4dd0:	90 91 41 14 	lds	r25, 0x1441	; 0x801441 <xTickCount+0x1>
    4dd4:	a0 91 42 14 	lds	r26, 0x1442	; 0x801442 <xTickCount+0x2>
    4dd8:	b0 91 43 14 	lds	r27, 0x1443	; 0x801443 <xTickCount+0x3>
    4ddc:	29 81       	ldd	r18, Y+1	; 0x01
    4dde:	3a 81       	ldd	r19, Y+2	; 0x02
    4de0:	f9 01       	movw	r30, r18
    4de2:	81 83       	std	Z+1, r24	; 0x01
    4de4:	92 83       	std	Z+2, r25	; 0x02
    4de6:	a3 83       	std	Z+3, r26	; 0x03
    4de8:	b4 83       	std	Z+4, r27	; 0x04
    4dea:	00 00       	nop
    4dec:	0f 90       	pop	r0
    4dee:	0f 90       	pop	r0
    4df0:	df 91       	pop	r29
    4df2:	cf 91       	pop	r28
    4df4:	08 95       	ret

00004df6 <xTaskCheckForTimeOut>:
    4df6:	ef 92       	push	r14
    4df8:	ff 92       	push	r15
    4dfa:	0f 93       	push	r16
    4dfc:	1f 93       	push	r17
    4dfe:	cf 93       	push	r28
    4e00:	df 93       	push	r29
    4e02:	cd b7       	in	r28, 0x3d	; 61
    4e04:	de b7       	in	r29, 0x3e	; 62
    4e06:	2d 97       	sbiw	r28, 0x0d	; 13
    4e08:	0f b6       	in	r0, 0x3f	; 63
    4e0a:	f8 94       	cli
    4e0c:	de bf       	out	0x3e, r29	; 62
    4e0e:	0f be       	out	0x3f, r0	; 63
    4e10:	cd bf       	out	0x3d, r28	; 61
    4e12:	9b 87       	std	Y+11, r25	; 0x0b
    4e14:	8a 87       	std	Y+10, r24	; 0x0a
    4e16:	7d 87       	std	Y+13, r23	; 0x0d
    4e18:	6c 87       	std	Y+12, r22	; 0x0c
    4e1a:	0f b6       	in	r0, 0x3f	; 63
    4e1c:	f8 94       	cli
    4e1e:	0f 92       	push	r0
    4e20:	80 91 40 14 	lds	r24, 0x1440	; 0x801440 <xTickCount>
    4e24:	90 91 41 14 	lds	r25, 0x1441	; 0x801441 <xTickCount+0x1>
    4e28:	a0 91 42 14 	lds	r26, 0x1442	; 0x801442 <xTickCount+0x2>
    4e2c:	b0 91 43 14 	lds	r27, 0x1443	; 0x801443 <xTickCount+0x3>
    4e30:	8a 83       	std	Y+2, r24	; 0x02
    4e32:	9b 83       	std	Y+3, r25	; 0x03
    4e34:	ac 83       	std	Y+4, r26	; 0x04
    4e36:	bd 83       	std	Y+5, r27	; 0x05
    4e38:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e3c:	fc 01       	movw	r30, r24
    4e3e:	81 81       	ldd	r24, Z+1	; 0x01
    4e40:	92 81       	ldd	r25, Z+2	; 0x02
    4e42:	a3 81       	ldd	r26, Z+3	; 0x03
    4e44:	b4 81       	ldd	r27, Z+4	; 0x04
    4e46:	2a 81       	ldd	r18, Y+2	; 0x02
    4e48:	3b 81       	ldd	r19, Y+3	; 0x03
    4e4a:	4c 81       	ldd	r20, Y+4	; 0x04
    4e4c:	5d 81       	ldd	r21, Y+5	; 0x05
    4e4e:	79 01       	movw	r14, r18
    4e50:	8a 01       	movw	r16, r20
    4e52:	e8 1a       	sub	r14, r24
    4e54:	f9 0a       	sbc	r15, r25
    4e56:	0a 0b       	sbc	r16, r26
    4e58:	1b 0b       	sbc	r17, r27
    4e5a:	d8 01       	movw	r26, r16
    4e5c:	c7 01       	movw	r24, r14
    4e5e:	8e 83       	std	Y+6, r24	; 0x06
    4e60:	9f 83       	std	Y+7, r25	; 0x07
    4e62:	a8 87       	std	Y+8, r26	; 0x08
    4e64:	b9 87       	std	Y+9, r27	; 0x09
    4e66:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e68:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e6a:	fc 01       	movw	r30, r24
    4e6c:	80 81       	ld	r24, Z
    4e6e:	91 81       	ldd	r25, Z+1	; 0x01
    4e70:	a2 81       	ldd	r26, Z+2	; 0x02
    4e72:	b3 81       	ldd	r27, Z+3	; 0x03
    4e74:	8f 3f       	cpi	r24, 0xFF	; 255
    4e76:	9f 4f       	sbci	r25, 0xFF	; 255
    4e78:	af 4f       	sbci	r26, 0xFF	; 255
    4e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    4e7c:	11 f4       	brne	.+4      	; 0x4e82 <xTaskCheckForTimeOut+0x8c>
    4e7e:	19 82       	std	Y+1, r1	; 0x01
    4e80:	5a c0       	rjmp	.+180    	; 0x4f36 <xTaskCheckForTimeOut+0x140>
    4e82:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e84:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e86:	fc 01       	movw	r30, r24
    4e88:	90 81       	ld	r25, Z
    4e8a:	80 91 4b 14 	lds	r24, 0x144B	; 0x80144b <xNumOfOverflows>
    4e8e:	98 17       	cp	r25, r24
    4e90:	d1 f0       	breq	.+52     	; 0x4ec6 <xTaskCheckForTimeOut+0xd0>
    4e92:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e94:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e96:	fc 01       	movw	r30, r24
    4e98:	21 81       	ldd	r18, Z+1	; 0x01
    4e9a:	32 81       	ldd	r19, Z+2	; 0x02
    4e9c:	43 81       	ldd	r20, Z+3	; 0x03
    4e9e:	54 81       	ldd	r21, Z+4	; 0x04
    4ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ea4:	ac 81       	ldd	r26, Y+4	; 0x04
    4ea6:	bd 81       	ldd	r27, Y+5	; 0x05
    4ea8:	82 17       	cp	r24, r18
    4eaa:	93 07       	cpc	r25, r19
    4eac:	a4 07       	cpc	r26, r20
    4eae:	b5 07       	cpc	r27, r21
    4eb0:	50 f0       	brcs	.+20     	; 0x4ec6 <xTaskCheckForTimeOut+0xd0>
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	89 83       	std	Y+1, r24	; 0x01
    4eb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    4eb8:	9d 85       	ldd	r25, Y+13	; 0x0d
    4eba:	fc 01       	movw	r30, r24
    4ebc:	10 82       	st	Z, r1
    4ebe:	11 82       	std	Z+1, r1	; 0x01
    4ec0:	12 82       	std	Z+2, r1	; 0x02
    4ec2:	13 82       	std	Z+3, r1	; 0x03
    4ec4:	38 c0       	rjmp	.+112    	; 0x4f36 <xTaskCheckForTimeOut+0x140>
    4ec6:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ec8:	9d 85       	ldd	r25, Y+13	; 0x0d
    4eca:	fc 01       	movw	r30, r24
    4ecc:	20 81       	ld	r18, Z
    4ece:	31 81       	ldd	r19, Z+1	; 0x01
    4ed0:	42 81       	ldd	r20, Z+2	; 0x02
    4ed2:	53 81       	ldd	r21, Z+3	; 0x03
    4ed4:	8e 81       	ldd	r24, Y+6	; 0x06
    4ed6:	9f 81       	ldd	r25, Y+7	; 0x07
    4ed8:	a8 85       	ldd	r26, Y+8	; 0x08
    4eda:	b9 85       	ldd	r27, Y+9	; 0x09
    4edc:	82 17       	cp	r24, r18
    4ede:	93 07       	cpc	r25, r19
    4ee0:	a4 07       	cpc	r26, r20
    4ee2:	b5 07       	cpc	r27, r21
    4ee4:	f8 f4       	brcc	.+62     	; 0x4f24 <xTaskCheckForTimeOut+0x12e>
    4ee6:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ee8:	9d 85       	ldd	r25, Y+13	; 0x0d
    4eea:	fc 01       	movw	r30, r24
    4eec:	20 81       	ld	r18, Z
    4eee:	31 81       	ldd	r19, Z+1	; 0x01
    4ef0:	42 81       	ldd	r20, Z+2	; 0x02
    4ef2:	53 81       	ldd	r21, Z+3	; 0x03
    4ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    4ef6:	9f 81       	ldd	r25, Y+7	; 0x07
    4ef8:	a8 85       	ldd	r26, Y+8	; 0x08
    4efa:	b9 85       	ldd	r27, Y+9	; 0x09
    4efc:	79 01       	movw	r14, r18
    4efe:	8a 01       	movw	r16, r20
    4f00:	e8 1a       	sub	r14, r24
    4f02:	f9 0a       	sbc	r15, r25
    4f04:	0a 0b       	sbc	r16, r26
    4f06:	1b 0b       	sbc	r17, r27
    4f08:	d8 01       	movw	r26, r16
    4f0a:	c7 01       	movw	r24, r14
    4f0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f0e:	3d 85       	ldd	r19, Y+13	; 0x0d
    4f10:	f9 01       	movw	r30, r18
    4f12:	80 83       	st	Z, r24
    4f14:	91 83       	std	Z+1, r25	; 0x01
    4f16:	a2 83       	std	Z+2, r26	; 0x02
    4f18:	b3 83       	std	Z+3, r27	; 0x03
    4f1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f1e:	48 df       	rcall	.-368    	; 0x4db0 <vTaskInternalSetTimeOutState>
    4f20:	19 82       	std	Y+1, r1	; 0x01
    4f22:	09 c0       	rjmp	.+18     	; 0x4f36 <xTaskCheckForTimeOut+0x140>
    4f24:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f26:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f28:	fc 01       	movw	r30, r24
    4f2a:	10 82       	st	Z, r1
    4f2c:	11 82       	std	Z+1, r1	; 0x01
    4f2e:	12 82       	std	Z+2, r1	; 0x02
    4f30:	13 82       	std	Z+3, r1	; 0x03
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	89 83       	std	Y+1, r24	; 0x01
    4f36:	0f 90       	pop	r0
    4f38:	0f be       	out	0x3f, r0	; 63
    4f3a:	89 81       	ldd	r24, Y+1	; 0x01
    4f3c:	2d 96       	adiw	r28, 0x0d	; 13
    4f3e:	0f b6       	in	r0, 0x3f	; 63
    4f40:	f8 94       	cli
    4f42:	de bf       	out	0x3e, r29	; 62
    4f44:	0f be       	out	0x3f, r0	; 63
    4f46:	cd bf       	out	0x3d, r28	; 61
    4f48:	df 91       	pop	r29
    4f4a:	cf 91       	pop	r28
    4f4c:	1f 91       	pop	r17
    4f4e:	0f 91       	pop	r16
    4f50:	ff 90       	pop	r15
    4f52:	ef 90       	pop	r14
    4f54:	08 95       	ret

00004f56 <vTaskMissedYield>:
    4f56:	cf 93       	push	r28
    4f58:	df 93       	push	r29
    4f5a:	cd b7       	in	r28, 0x3d	; 61
    4f5c:	de b7       	in	r29, 0x3e	; 62
    4f5e:	81 e0       	ldi	r24, 0x01	; 1
    4f60:	80 93 4a 14 	sts	0x144A, r24	; 0x80144a <xYieldPending>
    4f64:	00 00       	nop
    4f66:	df 91       	pop	r29
    4f68:	cf 91       	pop	r28
    4f6a:	08 95       	ret

00004f6c <prvInitialiseTaskLists>:
    4f6c:	cf 93       	push	r28
    4f6e:	df 93       	push	r29
    4f70:	1f 92       	push	r1
    4f72:	cd b7       	in	r28, 0x3d	; 61
    4f74:	de b7       	in	r29, 0x3e	; 62
    4f76:	19 82       	std	Y+1, r1	; 0x01
    4f78:	10 c0       	rjmp	.+32     	; 0x4f9a <prvInitialiseTaskLists+0x2e>
    4f7a:	89 81       	ldd	r24, Y+1	; 0x01
    4f7c:	28 2f       	mov	r18, r24
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	4b e0       	ldi	r20, 0x0B	; 11
    4f82:	42 9f       	mul	r20, r18
    4f84:	c0 01       	movw	r24, r0
    4f86:	43 9f       	mul	r20, r19
    4f88:	90 0d       	add	r25, r0
    4f8a:	11 24       	eor	r1, r1
    4f8c:	8b 56       	subi	r24, 0x6B	; 107
    4f8e:	9c 4e       	sbci	r25, 0xEC	; 236
    4f90:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vListInitialise>
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	8f 5f       	subi	r24, 0xFF	; 255
    4f98:	89 83       	std	Y+1, r24	; 0x01
    4f9a:	89 81       	ldd	r24, Y+1	; 0x01
    4f9c:	8a 30       	cpi	r24, 0x0A	; 10
    4f9e:	68 f3       	brcs	.-38     	; 0x4f7a <prvInitialiseTaskLists+0xe>
    4fa0:	83 e0       	ldi	r24, 0x03	; 3
    4fa2:	94 e1       	ldi	r25, 0x14	; 20
    4fa4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vListInitialise>
    4fa8:	8e e0       	ldi	r24, 0x0E	; 14
    4faa:	94 e1       	ldi	r25, 0x14	; 20
    4fac:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vListInitialise>
    4fb0:	8d e1       	ldi	r24, 0x1D	; 29
    4fb2:	94 e1       	ldi	r25, 0x14	; 20
    4fb4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vListInitialise>
    4fb8:	88 e2       	ldi	r24, 0x28	; 40
    4fba:	94 e1       	ldi	r25, 0x14	; 20
    4fbc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vListInitialise>
    4fc0:	84 e3       	ldi	r24, 0x34	; 52
    4fc2:	94 e1       	ldi	r25, 0x14	; 20
    4fc4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vListInitialise>
    4fc8:	83 e0       	ldi	r24, 0x03	; 3
    4fca:	94 e1       	ldi	r25, 0x14	; 20
    4fcc:	90 93 1a 14 	sts	0x141A, r25	; 0x80141a <pxDelayedTaskList+0x1>
    4fd0:	80 93 19 14 	sts	0x1419, r24	; 0x801419 <pxDelayedTaskList>
    4fd4:	8e e0       	ldi	r24, 0x0E	; 14
    4fd6:	94 e1       	ldi	r25, 0x14	; 20
    4fd8:	90 93 1c 14 	sts	0x141C, r25	; 0x80141c <pxOverflowDelayedTaskList+0x1>
    4fdc:	80 93 1b 14 	sts	0x141B, r24	; 0x80141b <pxOverflowDelayedTaskList>
    4fe0:	00 00       	nop
    4fe2:	0f 90       	pop	r0
    4fe4:	df 91       	pop	r29
    4fe6:	cf 91       	pop	r28
    4fe8:	08 95       	ret

00004fea <prvCheckTasksWaitingTermination>:
    4fea:	cf 93       	push	r28
    4fec:	df 93       	push	r29
    4fee:	1f 92       	push	r1
    4ff0:	1f 92       	push	r1
    4ff2:	cd b7       	in	r28, 0x3d	; 61
    4ff4:	de b7       	in	r29, 0x3e	; 62
    4ff6:	20 c0       	rjmp	.+64     	; 0x5038 <prvCheckTasksWaitingTermination+0x4e>
    4ff8:	0f b6       	in	r0, 0x3f	; 63
    4ffa:	f8 94       	cli
    4ffc:	0f 92       	push	r0
    4ffe:	80 91 2f 14 	lds	r24, 0x142F	; 0x80142f <xTasksWaitingTermination+0x7>
    5002:	90 91 30 14 	lds	r25, 0x1430	; 0x801430 <xTasksWaitingTermination+0x8>
    5006:	fc 01       	movw	r30, r24
    5008:	80 85       	ldd	r24, Z+8	; 0x08
    500a:	91 85       	ldd	r25, Z+9	; 0x09
    500c:	9a 83       	std	Y+2, r25	; 0x02
    500e:	89 83       	std	Y+1, r24	; 0x01
    5010:	89 81       	ldd	r24, Y+1	; 0x01
    5012:	9a 81       	ldd	r25, Y+2	; 0x02
    5014:	02 96       	adiw	r24, 0x02	; 2
    5016:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <uxListRemove>
    501a:	80 91 3f 14 	lds	r24, 0x143F	; 0x80143f <uxCurrentNumberOfTasks>
    501e:	81 50       	subi	r24, 0x01	; 1
    5020:	80 93 3f 14 	sts	0x143F, r24	; 0x80143f <uxCurrentNumberOfTasks>
    5024:	80 91 33 14 	lds	r24, 0x1433	; 0x801433 <uxDeletedTasksWaitingCleanUp>
    5028:	81 50       	subi	r24, 0x01	; 1
    502a:	80 93 33 14 	sts	0x1433, r24	; 0x801433 <uxDeletedTasksWaitingCleanUp>
    502e:	0f 90       	pop	r0
    5030:	0f be       	out	0x3f, r0	; 63
    5032:	89 81       	ldd	r24, Y+1	; 0x01
    5034:	9a 81       	ldd	r25, Y+2	; 0x02
    5036:	0a d0       	rcall	.+20     	; 0x504c <prvDeleteTCB>
    5038:	80 91 33 14 	lds	r24, 0x1433	; 0x801433 <uxDeletedTasksWaitingCleanUp>
    503c:	88 23       	and	r24, r24
    503e:	e1 f6       	brne	.-72     	; 0x4ff8 <prvCheckTasksWaitingTermination+0xe>
    5040:	00 00       	nop
    5042:	0f 90       	pop	r0
    5044:	0f 90       	pop	r0
    5046:	df 91       	pop	r29
    5048:	cf 91       	pop	r28
    504a:	08 95       	ret

0000504c <prvDeleteTCB>:
    504c:	cf 93       	push	r28
    504e:	df 93       	push	r29
    5050:	1f 92       	push	r1
    5052:	1f 92       	push	r1
    5054:	cd b7       	in	r28, 0x3d	; 61
    5056:	de b7       	in	r29, 0x3e	; 62
    5058:	9a 83       	std	Y+2, r25	; 0x02
    505a:	89 83       	std	Y+1, r24	; 0x01
    505c:	89 81       	ldd	r24, Y+1	; 0x01
    505e:	9a 81       	ldd	r25, Y+2	; 0x02
    5060:	fc 01       	movw	r30, r24
    5062:	83 8d       	ldd	r24, Z+27	; 0x1b
    5064:	94 8d       	ldd	r25, Z+28	; 0x1c
    5066:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <vPortFree>
    506a:	89 81       	ldd	r24, Y+1	; 0x01
    506c:	9a 81       	ldd	r25, Y+2	; 0x02
    506e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <vPortFree>
    5072:	00 00       	nop
    5074:	0f 90       	pop	r0
    5076:	0f 90       	pop	r0
    5078:	df 91       	pop	r29
    507a:	cf 91       	pop	r28
    507c:	08 95       	ret

0000507e <prvResetNextTaskUnblockTime>:
    507e:	cf 93       	push	r28
    5080:	df 93       	push	r29
    5082:	cd b7       	in	r28, 0x3d	; 61
    5084:	de b7       	in	r29, 0x3e	; 62
    5086:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <pxDelayedTaskList>
    508a:	90 91 1a 14 	lds	r25, 0x141A	; 0x80141a <pxDelayedTaskList+0x1>
    508e:	fc 01       	movw	r30, r24
    5090:	80 81       	ld	r24, Z
    5092:	88 23       	and	r24, r24
    5094:	61 f4       	brne	.+24     	; 0x50ae <prvResetNextTaskUnblockTime+0x30>
    5096:	8f ef       	ldi	r24, 0xFF	; 255
    5098:	9f ef       	ldi	r25, 0xFF	; 255
    509a:	dc 01       	movw	r26, r24
    509c:	80 93 4d 14 	sts	0x144D, r24	; 0x80144d <xNextTaskUnblockTime>
    50a0:	90 93 4e 14 	sts	0x144E, r25	; 0x80144e <xNextTaskUnblockTime+0x1>
    50a4:	a0 93 4f 14 	sts	0x144F, r26	; 0x80144f <xNextTaskUnblockTime+0x2>
    50a8:	b0 93 50 14 	sts	0x1450, r27	; 0x801450 <xNextTaskUnblockTime+0x3>
    50ac:	14 c0       	rjmp	.+40     	; 0x50d6 <prvResetNextTaskUnblockTime+0x58>
    50ae:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <pxDelayedTaskList>
    50b2:	90 91 1a 14 	lds	r25, 0x141A	; 0x80141a <pxDelayedTaskList+0x1>
    50b6:	fc 01       	movw	r30, r24
    50b8:	87 81       	ldd	r24, Z+7	; 0x07
    50ba:	90 85       	ldd	r25, Z+8	; 0x08
    50bc:	fc 01       	movw	r30, r24
    50be:	80 81       	ld	r24, Z
    50c0:	91 81       	ldd	r25, Z+1	; 0x01
    50c2:	a2 81       	ldd	r26, Z+2	; 0x02
    50c4:	b3 81       	ldd	r27, Z+3	; 0x03
    50c6:	80 93 4d 14 	sts	0x144D, r24	; 0x80144d <xNextTaskUnblockTime>
    50ca:	90 93 4e 14 	sts	0x144E, r25	; 0x80144e <xNextTaskUnblockTime+0x1>
    50ce:	a0 93 4f 14 	sts	0x144F, r26	; 0x80144f <xNextTaskUnblockTime+0x2>
    50d2:	b0 93 50 14 	sts	0x1450, r27	; 0x801450 <xNextTaskUnblockTime+0x3>
    50d6:	00 00       	nop
    50d8:	df 91       	pop	r29
    50da:	cf 91       	pop	r28
    50dc:	08 95       	ret

000050de <xTaskGetCurrentTaskHandle>:
    50de:	cf 93       	push	r28
    50e0:	df 93       	push	r29
    50e2:	1f 92       	push	r1
    50e4:	1f 92       	push	r1
    50e6:	cd b7       	in	r28, 0x3d	; 61
    50e8:	de b7       	in	r29, 0x3e	; 62
    50ea:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    50ee:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    50f2:	9a 83       	std	Y+2, r25	; 0x02
    50f4:	89 83       	std	Y+1, r24	; 0x01
    50f6:	89 81       	ldd	r24, Y+1	; 0x01
    50f8:	9a 81       	ldd	r25, Y+2	; 0x02
    50fa:	0f 90       	pop	r0
    50fc:	0f 90       	pop	r0
    50fe:	df 91       	pop	r29
    5100:	cf 91       	pop	r28
    5102:	08 95       	ret

00005104 <xTaskGetSchedulerState>:
    5104:	cf 93       	push	r28
    5106:	df 93       	push	r29
    5108:	1f 92       	push	r1
    510a:	cd b7       	in	r28, 0x3d	; 61
    510c:	de b7       	in	r29, 0x3e	; 62
    510e:	80 91 45 14 	lds	r24, 0x1445	; 0x801445 <xSchedulerRunning>
    5112:	88 23       	and	r24, r24
    5114:	19 f4       	brne	.+6      	; 0x511c <xTaskGetSchedulerState+0x18>
    5116:	81 e0       	ldi	r24, 0x01	; 1
    5118:	89 83       	std	Y+1, r24	; 0x01
    511a:	08 c0       	rjmp	.+16     	; 0x512c <xTaskGetSchedulerState+0x28>
    511c:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <uxSchedulerSuspended>
    5120:	88 23       	and	r24, r24
    5122:	19 f4       	brne	.+6      	; 0x512a <xTaskGetSchedulerState+0x26>
    5124:	82 e0       	ldi	r24, 0x02	; 2
    5126:	89 83       	std	Y+1, r24	; 0x01
    5128:	01 c0       	rjmp	.+2      	; 0x512c <xTaskGetSchedulerState+0x28>
    512a:	19 82       	std	Y+1, r1	; 0x01
    512c:	89 81       	ldd	r24, Y+1	; 0x01
    512e:	0f 90       	pop	r0
    5130:	df 91       	pop	r29
    5132:	cf 91       	pop	r28
    5134:	08 95       	ret

00005136 <xTaskPriorityInherit>:
    5136:	ef 92       	push	r14
    5138:	ff 92       	push	r15
    513a:	0f 93       	push	r16
    513c:	1f 93       	push	r17
    513e:	cf 93       	push	r28
    5140:	df 93       	push	r29
    5142:	cd b7       	in	r28, 0x3d	; 61
    5144:	de b7       	in	r29, 0x3e	; 62
    5146:	27 97       	sbiw	r28, 0x07	; 7
    5148:	0f b6       	in	r0, 0x3f	; 63
    514a:	f8 94       	cli
    514c:	de bf       	out	0x3e, r29	; 62
    514e:	0f be       	out	0x3f, r0	; 63
    5150:	cd bf       	out	0x3d, r28	; 61
    5152:	9f 83       	std	Y+7, r25	; 0x07
    5154:	8e 83       	std	Y+6, r24	; 0x06
    5156:	8e 81       	ldd	r24, Y+6	; 0x06
    5158:	9f 81       	ldd	r25, Y+7	; 0x07
    515a:	9b 83       	std	Y+3, r25	; 0x03
    515c:	8a 83       	std	Y+2, r24	; 0x02
    515e:	19 82       	std	Y+1, r1	; 0x01
    5160:	8e 81       	ldd	r24, Y+6	; 0x06
    5162:	9f 81       	ldd	r25, Y+7	; 0x07
    5164:	89 2b       	or	r24, r25
    5166:	09 f4       	brne	.+2      	; 0x516a <xTaskPriorityInherit+0x34>
    5168:	ee c0       	rjmp	.+476    	; 0x5346 <xTaskPriorityInherit+0x210>
    516a:	8a 81       	ldd	r24, Y+2	; 0x02
    516c:	9b 81       	ldd	r25, Y+3	; 0x03
    516e:	fc 01       	movw	r30, r24
    5170:	22 8d       	ldd	r18, Z+26	; 0x1a
    5172:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    5176:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    517a:	fc 01       	movw	r30, r24
    517c:	82 8d       	ldd	r24, Z+26	; 0x1a
    517e:	28 17       	cp	r18, r24
    5180:	08 f0       	brcs	.+2      	; 0x5184 <xTaskPriorityInherit+0x4e>
    5182:	d3 c0       	rjmp	.+422    	; 0x532a <xTaskPriorityInherit+0x1f4>
    5184:	8a 81       	ldd	r24, Y+2	; 0x02
    5186:	9b 81       	ldd	r25, Y+3	; 0x03
    5188:	fc 01       	movw	r30, r24
    518a:	86 85       	ldd	r24, Z+14	; 0x0e
    518c:	97 85       	ldd	r25, Z+15	; 0x0f
    518e:	a0 89       	ldd	r26, Z+16	; 0x10
    5190:	b1 89       	ldd	r27, Z+17	; 0x11
    5192:	bb 23       	and	r27, r27
    5194:	ec f0       	brlt	.+58     	; 0x51d0 <xTaskPriorityInherit+0x9a>
    5196:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    519a:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    519e:	fc 01       	movw	r30, r24
    51a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    51a2:	88 2f       	mov	r24, r24
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	a0 e0       	ldi	r26, 0x00	; 0
    51a8:	b0 e0       	ldi	r27, 0x00	; 0
    51aa:	2a e0       	ldi	r18, 0x0A	; 10
    51ac:	30 e0       	ldi	r19, 0x00	; 0
    51ae:	40 e0       	ldi	r20, 0x00	; 0
    51b0:	50 e0       	ldi	r21, 0x00	; 0
    51b2:	79 01       	movw	r14, r18
    51b4:	8a 01       	movw	r16, r20
    51b6:	e8 1a       	sub	r14, r24
    51b8:	f9 0a       	sbc	r15, r25
    51ba:	0a 0b       	sbc	r16, r26
    51bc:	1b 0b       	sbc	r17, r27
    51be:	d8 01       	movw	r26, r16
    51c0:	c7 01       	movw	r24, r14
    51c2:	2a 81       	ldd	r18, Y+2	; 0x02
    51c4:	3b 81       	ldd	r19, Y+3	; 0x03
    51c6:	f9 01       	movw	r30, r18
    51c8:	86 87       	std	Z+14, r24	; 0x0e
    51ca:	97 87       	std	Z+15, r25	; 0x0f
    51cc:	a0 8b       	std	Z+16, r26	; 0x10
    51ce:	b1 8b       	std	Z+17, r27	; 0x11
    51d0:	8a 81       	ldd	r24, Y+2	; 0x02
    51d2:	9b 81       	ldd	r25, Y+3	; 0x03
    51d4:	fc 01       	movw	r30, r24
    51d6:	24 85       	ldd	r18, Z+12	; 0x0c
    51d8:	35 85       	ldd	r19, Z+13	; 0x0d
    51da:	8a 81       	ldd	r24, Y+2	; 0x02
    51dc:	9b 81       	ldd	r25, Y+3	; 0x03
    51de:	fc 01       	movw	r30, r24
    51e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    51e2:	48 2f       	mov	r20, r24
    51e4:	50 e0       	ldi	r21, 0x00	; 0
    51e6:	6b e0       	ldi	r22, 0x0B	; 11
    51e8:	64 9f       	mul	r22, r20
    51ea:	c0 01       	movw	r24, r0
    51ec:	65 9f       	mul	r22, r21
    51ee:	90 0d       	add	r25, r0
    51f0:	11 24       	eor	r1, r1
    51f2:	8b 56       	subi	r24, 0x6B	; 107
    51f4:	9c 4e       	sbci	r25, 0xEC	; 236
    51f6:	28 17       	cp	r18, r24
    51f8:	39 07       	cpc	r19, r25
    51fa:	09 f0       	breq	.+2      	; 0x51fe <xTaskPriorityInherit+0xc8>
    51fc:	89 c0       	rjmp	.+274    	; 0x5310 <xTaskPriorityInherit+0x1da>
    51fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5200:	9b 81       	ldd	r25, Y+3	; 0x03
    5202:	02 96       	adiw	r24, 0x02	; 2
    5204:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <uxListRemove>
    5208:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    520c:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    5210:	fc 01       	movw	r30, r24
    5212:	22 8d       	ldd	r18, Z+26	; 0x1a
    5214:	8a 81       	ldd	r24, Y+2	; 0x02
    5216:	9b 81       	ldd	r25, Y+3	; 0x03
    5218:	fc 01       	movw	r30, r24
    521a:	22 8f       	std	Z+26, r18	; 0x1a
    521c:	8a 81       	ldd	r24, Y+2	; 0x02
    521e:	9b 81       	ldd	r25, Y+3	; 0x03
    5220:	fc 01       	movw	r30, r24
    5222:	92 8d       	ldd	r25, Z+26	; 0x1a
    5224:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    5228:	89 17       	cp	r24, r25
    522a:	30 f4       	brcc	.+12     	; 0x5238 <xTaskPriorityInherit+0x102>
    522c:	8a 81       	ldd	r24, Y+2	; 0x02
    522e:	9b 81       	ldd	r25, Y+3	; 0x03
    5230:	fc 01       	movw	r30, r24
    5232:	82 8d       	ldd	r24, Z+26	; 0x1a
    5234:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    5238:	8a 81       	ldd	r24, Y+2	; 0x02
    523a:	9b 81       	ldd	r25, Y+3	; 0x03
    523c:	fc 01       	movw	r30, r24
    523e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5240:	28 2f       	mov	r18, r24
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	4b e0       	ldi	r20, 0x0B	; 11
    5246:	42 9f       	mul	r20, r18
    5248:	c0 01       	movw	r24, r0
    524a:	43 9f       	mul	r20, r19
    524c:	90 0d       	add	r25, r0
    524e:	11 24       	eor	r1, r1
    5250:	8a 56       	subi	r24, 0x6A	; 106
    5252:	9c 4e       	sbci	r25, 0xEC	; 236
    5254:	fc 01       	movw	r30, r24
    5256:	80 81       	ld	r24, Z
    5258:	91 81       	ldd	r25, Z+1	; 0x01
    525a:	9d 83       	std	Y+5, r25	; 0x05
    525c:	8c 83       	std	Y+4, r24	; 0x04
    525e:	8a 81       	ldd	r24, Y+2	; 0x02
    5260:	9b 81       	ldd	r25, Y+3	; 0x03
    5262:	2c 81       	ldd	r18, Y+4	; 0x04
    5264:	3d 81       	ldd	r19, Y+5	; 0x05
    5266:	fc 01       	movw	r30, r24
    5268:	37 83       	std	Z+7, r19	; 0x07
    526a:	26 83       	std	Z+6, r18	; 0x06
    526c:	8c 81       	ldd	r24, Y+4	; 0x04
    526e:	9d 81       	ldd	r25, Y+5	; 0x05
    5270:	fc 01       	movw	r30, r24
    5272:	26 81       	ldd	r18, Z+6	; 0x06
    5274:	37 81       	ldd	r19, Z+7	; 0x07
    5276:	8a 81       	ldd	r24, Y+2	; 0x02
    5278:	9b 81       	ldd	r25, Y+3	; 0x03
    527a:	fc 01       	movw	r30, r24
    527c:	31 87       	std	Z+9, r19	; 0x09
    527e:	20 87       	std	Z+8, r18	; 0x08
    5280:	8c 81       	ldd	r24, Y+4	; 0x04
    5282:	9d 81       	ldd	r25, Y+5	; 0x05
    5284:	fc 01       	movw	r30, r24
    5286:	86 81       	ldd	r24, Z+6	; 0x06
    5288:	97 81       	ldd	r25, Z+7	; 0x07
    528a:	2a 81       	ldd	r18, Y+2	; 0x02
    528c:	3b 81       	ldd	r19, Y+3	; 0x03
    528e:	2e 5f       	subi	r18, 0xFE	; 254
    5290:	3f 4f       	sbci	r19, 0xFF	; 255
    5292:	fc 01       	movw	r30, r24
    5294:	35 83       	std	Z+5, r19	; 0x05
    5296:	24 83       	std	Z+4, r18	; 0x04
    5298:	8a 81       	ldd	r24, Y+2	; 0x02
    529a:	9b 81       	ldd	r25, Y+3	; 0x03
    529c:	9c 01       	movw	r18, r24
    529e:	2e 5f       	subi	r18, 0xFE	; 254
    52a0:	3f 4f       	sbci	r19, 0xFF	; 255
    52a2:	8c 81       	ldd	r24, Y+4	; 0x04
    52a4:	9d 81       	ldd	r25, Y+5	; 0x05
    52a6:	fc 01       	movw	r30, r24
    52a8:	37 83       	std	Z+7, r19	; 0x07
    52aa:	26 83       	std	Z+6, r18	; 0x06
    52ac:	8a 81       	ldd	r24, Y+2	; 0x02
    52ae:	9b 81       	ldd	r25, Y+3	; 0x03
    52b0:	fc 01       	movw	r30, r24
    52b2:	82 8d       	ldd	r24, Z+26	; 0x1a
    52b4:	28 2f       	mov	r18, r24
    52b6:	30 e0       	ldi	r19, 0x00	; 0
    52b8:	4b e0       	ldi	r20, 0x0B	; 11
    52ba:	42 9f       	mul	r20, r18
    52bc:	c0 01       	movw	r24, r0
    52be:	43 9f       	mul	r20, r19
    52c0:	90 0d       	add	r25, r0
    52c2:	11 24       	eor	r1, r1
    52c4:	9c 01       	movw	r18, r24
    52c6:	2b 56       	subi	r18, 0x6B	; 107
    52c8:	3c 4e       	sbci	r19, 0xEC	; 236
    52ca:	8a 81       	ldd	r24, Y+2	; 0x02
    52cc:	9b 81       	ldd	r25, Y+3	; 0x03
    52ce:	fc 01       	movw	r30, r24
    52d0:	35 87       	std	Z+13, r19	; 0x0d
    52d2:	24 87       	std	Z+12, r18	; 0x0c
    52d4:	8a 81       	ldd	r24, Y+2	; 0x02
    52d6:	9b 81       	ldd	r25, Y+3	; 0x03
    52d8:	fc 01       	movw	r30, r24
    52da:	82 8d       	ldd	r24, Z+26	; 0x1a
    52dc:	88 2f       	mov	r24, r24
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	4b e0       	ldi	r20, 0x0B	; 11
    52e2:	48 9f       	mul	r20, r24
    52e4:	90 01       	movw	r18, r0
    52e6:	49 9f       	mul	r20, r25
    52e8:	30 0d       	add	r19, r0
    52ea:	11 24       	eor	r1, r1
    52ec:	2b 56       	subi	r18, 0x6B	; 107
    52ee:	3c 4e       	sbci	r19, 0xEC	; 236
    52f0:	f9 01       	movw	r30, r18
    52f2:	20 81       	ld	r18, Z
    52f4:	41 e0       	ldi	r20, 0x01	; 1
    52f6:	42 0f       	add	r20, r18
    52f8:	5b e0       	ldi	r21, 0x0B	; 11
    52fa:	58 9f       	mul	r21, r24
    52fc:	90 01       	movw	r18, r0
    52fe:	59 9f       	mul	r21, r25
    5300:	30 0d       	add	r19, r0
    5302:	11 24       	eor	r1, r1
    5304:	c9 01       	movw	r24, r18
    5306:	8b 56       	subi	r24, 0x6B	; 107
    5308:	9c 4e       	sbci	r25, 0xEC	; 236
    530a:	fc 01       	movw	r30, r24
    530c:	40 83       	st	Z, r20
    530e:	0a c0       	rjmp	.+20     	; 0x5324 <xTaskPriorityInherit+0x1ee>
    5310:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    5314:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    5318:	fc 01       	movw	r30, r24
    531a:	22 8d       	ldd	r18, Z+26	; 0x1a
    531c:	8a 81       	ldd	r24, Y+2	; 0x02
    531e:	9b 81       	ldd	r25, Y+3	; 0x03
    5320:	fc 01       	movw	r30, r24
    5322:	22 8f       	std	Z+26, r18	; 0x1a
    5324:	81 e0       	ldi	r24, 0x01	; 1
    5326:	89 83       	std	Y+1, r24	; 0x01
    5328:	0e c0       	rjmp	.+28     	; 0x5346 <xTaskPriorityInherit+0x210>
    532a:	8a 81       	ldd	r24, Y+2	; 0x02
    532c:	9b 81       	ldd	r25, Y+3	; 0x03
    532e:	fc 01       	movw	r30, r24
    5330:	25 a5       	ldd	r18, Z+45	; 0x2d
    5332:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    5336:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    533a:	fc 01       	movw	r30, r24
    533c:	82 8d       	ldd	r24, Z+26	; 0x1a
    533e:	28 17       	cp	r18, r24
    5340:	10 f4       	brcc	.+4      	; 0x5346 <xTaskPriorityInherit+0x210>
    5342:	81 e0       	ldi	r24, 0x01	; 1
    5344:	89 83       	std	Y+1, r24	; 0x01
    5346:	89 81       	ldd	r24, Y+1	; 0x01
    5348:	27 96       	adiw	r28, 0x07	; 7
    534a:	0f b6       	in	r0, 0x3f	; 63
    534c:	f8 94       	cli
    534e:	de bf       	out	0x3e, r29	; 62
    5350:	0f be       	out	0x3f, r0	; 63
    5352:	cd bf       	out	0x3d, r28	; 61
    5354:	df 91       	pop	r29
    5356:	cf 91       	pop	r28
    5358:	1f 91       	pop	r17
    535a:	0f 91       	pop	r16
    535c:	ff 90       	pop	r15
    535e:	ef 90       	pop	r14
    5360:	08 95       	ret

00005362 <xTaskPriorityDisinherit>:
    5362:	ef 92       	push	r14
    5364:	ff 92       	push	r15
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	cd b7       	in	r28, 0x3d	; 61
    5370:	de b7       	in	r29, 0x3e	; 62
    5372:	27 97       	sbiw	r28, 0x07	; 7
    5374:	0f b6       	in	r0, 0x3f	; 63
    5376:	f8 94       	cli
    5378:	de bf       	out	0x3e, r29	; 62
    537a:	0f be       	out	0x3f, r0	; 63
    537c:	cd bf       	out	0x3d, r28	; 61
    537e:	9f 83       	std	Y+7, r25	; 0x07
    5380:	8e 83       	std	Y+6, r24	; 0x06
    5382:	8e 81       	ldd	r24, Y+6	; 0x06
    5384:	9f 81       	ldd	r25, Y+7	; 0x07
    5386:	9b 83       	std	Y+3, r25	; 0x03
    5388:	8a 83       	std	Y+2, r24	; 0x02
    538a:	19 82       	std	Y+1, r1	; 0x01
    538c:	8e 81       	ldd	r24, Y+6	; 0x06
    538e:	9f 81       	ldd	r25, Y+7	; 0x07
    5390:	89 2b       	or	r24, r25
    5392:	09 f4       	brne	.+2      	; 0x5396 <xTaskPriorityDisinherit+0x34>
    5394:	bf c0       	rjmp	.+382    	; 0x5514 <xTaskPriorityDisinherit+0x1b2>
    5396:	8a 81       	ldd	r24, Y+2	; 0x02
    5398:	9b 81       	ldd	r25, Y+3	; 0x03
    539a:	fc 01       	movw	r30, r24
    539c:	86 a5       	ldd	r24, Z+46	; 0x2e
    539e:	2f ef       	ldi	r18, 0xFF	; 255
    53a0:	28 0f       	add	r18, r24
    53a2:	8a 81       	ldd	r24, Y+2	; 0x02
    53a4:	9b 81       	ldd	r25, Y+3	; 0x03
    53a6:	fc 01       	movw	r30, r24
    53a8:	26 a7       	std	Z+46, r18	; 0x2e
    53aa:	8a 81       	ldd	r24, Y+2	; 0x02
    53ac:	9b 81       	ldd	r25, Y+3	; 0x03
    53ae:	fc 01       	movw	r30, r24
    53b0:	22 8d       	ldd	r18, Z+26	; 0x1a
    53b2:	8a 81       	ldd	r24, Y+2	; 0x02
    53b4:	9b 81       	ldd	r25, Y+3	; 0x03
    53b6:	fc 01       	movw	r30, r24
    53b8:	85 a5       	ldd	r24, Z+45	; 0x2d
    53ba:	28 17       	cp	r18, r24
    53bc:	09 f4       	brne	.+2      	; 0x53c0 <xTaskPriorityDisinherit+0x5e>
    53be:	aa c0       	rjmp	.+340    	; 0x5514 <xTaskPriorityDisinherit+0x1b2>
    53c0:	8a 81       	ldd	r24, Y+2	; 0x02
    53c2:	9b 81       	ldd	r25, Y+3	; 0x03
    53c4:	fc 01       	movw	r30, r24
    53c6:	86 a5       	ldd	r24, Z+46	; 0x2e
    53c8:	88 23       	and	r24, r24
    53ca:	09 f0       	breq	.+2      	; 0x53ce <xTaskPriorityDisinherit+0x6c>
    53cc:	a3 c0       	rjmp	.+326    	; 0x5514 <xTaskPriorityDisinherit+0x1b2>
    53ce:	8a 81       	ldd	r24, Y+2	; 0x02
    53d0:	9b 81       	ldd	r25, Y+3	; 0x03
    53d2:	02 96       	adiw	r24, 0x02	; 2
    53d4:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <uxListRemove>
    53d8:	8a 81       	ldd	r24, Y+2	; 0x02
    53da:	9b 81       	ldd	r25, Y+3	; 0x03
    53dc:	fc 01       	movw	r30, r24
    53de:	25 a5       	ldd	r18, Z+45	; 0x2d
    53e0:	8a 81       	ldd	r24, Y+2	; 0x02
    53e2:	9b 81       	ldd	r25, Y+3	; 0x03
    53e4:	fc 01       	movw	r30, r24
    53e6:	22 8f       	std	Z+26, r18	; 0x1a
    53e8:	8a 81       	ldd	r24, Y+2	; 0x02
    53ea:	9b 81       	ldd	r25, Y+3	; 0x03
    53ec:	fc 01       	movw	r30, r24
    53ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    53f0:	88 2f       	mov	r24, r24
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	a0 e0       	ldi	r26, 0x00	; 0
    53f6:	b0 e0       	ldi	r27, 0x00	; 0
    53f8:	2a e0       	ldi	r18, 0x0A	; 10
    53fa:	30 e0       	ldi	r19, 0x00	; 0
    53fc:	40 e0       	ldi	r20, 0x00	; 0
    53fe:	50 e0       	ldi	r21, 0x00	; 0
    5400:	79 01       	movw	r14, r18
    5402:	8a 01       	movw	r16, r20
    5404:	e8 1a       	sub	r14, r24
    5406:	f9 0a       	sbc	r15, r25
    5408:	0a 0b       	sbc	r16, r26
    540a:	1b 0b       	sbc	r17, r27
    540c:	d8 01       	movw	r26, r16
    540e:	c7 01       	movw	r24, r14
    5410:	2a 81       	ldd	r18, Y+2	; 0x02
    5412:	3b 81       	ldd	r19, Y+3	; 0x03
    5414:	f9 01       	movw	r30, r18
    5416:	86 87       	std	Z+14, r24	; 0x0e
    5418:	97 87       	std	Z+15, r25	; 0x0f
    541a:	a0 8b       	std	Z+16, r26	; 0x10
    541c:	b1 8b       	std	Z+17, r27	; 0x11
    541e:	8a 81       	ldd	r24, Y+2	; 0x02
    5420:	9b 81       	ldd	r25, Y+3	; 0x03
    5422:	fc 01       	movw	r30, r24
    5424:	92 8d       	ldd	r25, Z+26	; 0x1a
    5426:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    542a:	89 17       	cp	r24, r25
    542c:	30 f4       	brcc	.+12     	; 0x543a <xTaskPriorityDisinherit+0xd8>
    542e:	8a 81       	ldd	r24, Y+2	; 0x02
    5430:	9b 81       	ldd	r25, Y+3	; 0x03
    5432:	fc 01       	movw	r30, r24
    5434:	82 8d       	ldd	r24, Z+26	; 0x1a
    5436:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    543a:	8a 81       	ldd	r24, Y+2	; 0x02
    543c:	9b 81       	ldd	r25, Y+3	; 0x03
    543e:	fc 01       	movw	r30, r24
    5440:	82 8d       	ldd	r24, Z+26	; 0x1a
    5442:	28 2f       	mov	r18, r24
    5444:	30 e0       	ldi	r19, 0x00	; 0
    5446:	4b e0       	ldi	r20, 0x0B	; 11
    5448:	42 9f       	mul	r20, r18
    544a:	c0 01       	movw	r24, r0
    544c:	43 9f       	mul	r20, r19
    544e:	90 0d       	add	r25, r0
    5450:	11 24       	eor	r1, r1
    5452:	8a 56       	subi	r24, 0x6A	; 106
    5454:	9c 4e       	sbci	r25, 0xEC	; 236
    5456:	fc 01       	movw	r30, r24
    5458:	80 81       	ld	r24, Z
    545a:	91 81       	ldd	r25, Z+1	; 0x01
    545c:	9d 83       	std	Y+5, r25	; 0x05
    545e:	8c 83       	std	Y+4, r24	; 0x04
    5460:	8a 81       	ldd	r24, Y+2	; 0x02
    5462:	9b 81       	ldd	r25, Y+3	; 0x03
    5464:	2c 81       	ldd	r18, Y+4	; 0x04
    5466:	3d 81       	ldd	r19, Y+5	; 0x05
    5468:	fc 01       	movw	r30, r24
    546a:	37 83       	std	Z+7, r19	; 0x07
    546c:	26 83       	std	Z+6, r18	; 0x06
    546e:	8c 81       	ldd	r24, Y+4	; 0x04
    5470:	9d 81       	ldd	r25, Y+5	; 0x05
    5472:	fc 01       	movw	r30, r24
    5474:	26 81       	ldd	r18, Z+6	; 0x06
    5476:	37 81       	ldd	r19, Z+7	; 0x07
    5478:	8a 81       	ldd	r24, Y+2	; 0x02
    547a:	9b 81       	ldd	r25, Y+3	; 0x03
    547c:	fc 01       	movw	r30, r24
    547e:	31 87       	std	Z+9, r19	; 0x09
    5480:	20 87       	std	Z+8, r18	; 0x08
    5482:	8c 81       	ldd	r24, Y+4	; 0x04
    5484:	9d 81       	ldd	r25, Y+5	; 0x05
    5486:	fc 01       	movw	r30, r24
    5488:	86 81       	ldd	r24, Z+6	; 0x06
    548a:	97 81       	ldd	r25, Z+7	; 0x07
    548c:	2a 81       	ldd	r18, Y+2	; 0x02
    548e:	3b 81       	ldd	r19, Y+3	; 0x03
    5490:	2e 5f       	subi	r18, 0xFE	; 254
    5492:	3f 4f       	sbci	r19, 0xFF	; 255
    5494:	fc 01       	movw	r30, r24
    5496:	35 83       	std	Z+5, r19	; 0x05
    5498:	24 83       	std	Z+4, r18	; 0x04
    549a:	8a 81       	ldd	r24, Y+2	; 0x02
    549c:	9b 81       	ldd	r25, Y+3	; 0x03
    549e:	9c 01       	movw	r18, r24
    54a0:	2e 5f       	subi	r18, 0xFE	; 254
    54a2:	3f 4f       	sbci	r19, 0xFF	; 255
    54a4:	8c 81       	ldd	r24, Y+4	; 0x04
    54a6:	9d 81       	ldd	r25, Y+5	; 0x05
    54a8:	fc 01       	movw	r30, r24
    54aa:	37 83       	std	Z+7, r19	; 0x07
    54ac:	26 83       	std	Z+6, r18	; 0x06
    54ae:	8a 81       	ldd	r24, Y+2	; 0x02
    54b0:	9b 81       	ldd	r25, Y+3	; 0x03
    54b2:	fc 01       	movw	r30, r24
    54b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    54b6:	28 2f       	mov	r18, r24
    54b8:	30 e0       	ldi	r19, 0x00	; 0
    54ba:	4b e0       	ldi	r20, 0x0B	; 11
    54bc:	42 9f       	mul	r20, r18
    54be:	c0 01       	movw	r24, r0
    54c0:	43 9f       	mul	r20, r19
    54c2:	90 0d       	add	r25, r0
    54c4:	11 24       	eor	r1, r1
    54c6:	9c 01       	movw	r18, r24
    54c8:	2b 56       	subi	r18, 0x6B	; 107
    54ca:	3c 4e       	sbci	r19, 0xEC	; 236
    54cc:	8a 81       	ldd	r24, Y+2	; 0x02
    54ce:	9b 81       	ldd	r25, Y+3	; 0x03
    54d0:	fc 01       	movw	r30, r24
    54d2:	35 87       	std	Z+13, r19	; 0x0d
    54d4:	24 87       	std	Z+12, r18	; 0x0c
    54d6:	8a 81       	ldd	r24, Y+2	; 0x02
    54d8:	9b 81       	ldd	r25, Y+3	; 0x03
    54da:	fc 01       	movw	r30, r24
    54dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    54de:	88 2f       	mov	r24, r24
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	4b e0       	ldi	r20, 0x0B	; 11
    54e4:	48 9f       	mul	r20, r24
    54e6:	90 01       	movw	r18, r0
    54e8:	49 9f       	mul	r20, r25
    54ea:	30 0d       	add	r19, r0
    54ec:	11 24       	eor	r1, r1
    54ee:	2b 56       	subi	r18, 0x6B	; 107
    54f0:	3c 4e       	sbci	r19, 0xEC	; 236
    54f2:	f9 01       	movw	r30, r18
    54f4:	20 81       	ld	r18, Z
    54f6:	41 e0       	ldi	r20, 0x01	; 1
    54f8:	42 0f       	add	r20, r18
    54fa:	5b e0       	ldi	r21, 0x0B	; 11
    54fc:	58 9f       	mul	r21, r24
    54fe:	90 01       	movw	r18, r0
    5500:	59 9f       	mul	r21, r25
    5502:	30 0d       	add	r19, r0
    5504:	11 24       	eor	r1, r1
    5506:	c9 01       	movw	r24, r18
    5508:	8b 56       	subi	r24, 0x6B	; 107
    550a:	9c 4e       	sbci	r25, 0xEC	; 236
    550c:	fc 01       	movw	r30, r24
    550e:	40 83       	st	Z, r20
    5510:	81 e0       	ldi	r24, 0x01	; 1
    5512:	89 83       	std	Y+1, r24	; 0x01
    5514:	89 81       	ldd	r24, Y+1	; 0x01
    5516:	27 96       	adiw	r28, 0x07	; 7
    5518:	0f b6       	in	r0, 0x3f	; 63
    551a:	f8 94       	cli
    551c:	de bf       	out	0x3e, r29	; 62
    551e:	0f be       	out	0x3f, r0	; 63
    5520:	cd bf       	out	0x3d, r28	; 61
    5522:	df 91       	pop	r29
    5524:	cf 91       	pop	r28
    5526:	1f 91       	pop	r17
    5528:	0f 91       	pop	r16
    552a:	ff 90       	pop	r15
    552c:	ef 90       	pop	r14
    552e:	08 95       	ret

00005530 <vTaskPriorityDisinheritAfterTimeout>:
    5530:	ef 92       	push	r14
    5532:	ff 92       	push	r15
    5534:	0f 93       	push	r16
    5536:	1f 93       	push	r17
    5538:	cf 93       	push	r28
    553a:	df 93       	push	r29
    553c:	cd b7       	in	r28, 0x3d	; 61
    553e:	de b7       	in	r29, 0x3e	; 62
    5540:	2a 97       	sbiw	r28, 0x0a	; 10
    5542:	0f b6       	in	r0, 0x3f	; 63
    5544:	f8 94       	cli
    5546:	de bf       	out	0x3e, r29	; 62
    5548:	0f be       	out	0x3f, r0	; 63
    554a:	cd bf       	out	0x3d, r28	; 61
    554c:	99 87       	std	Y+9, r25	; 0x09
    554e:	88 87       	std	Y+8, r24	; 0x08
    5550:	6a 87       	std	Y+10, r22	; 0x0a
    5552:	88 85       	ldd	r24, Y+8	; 0x08
    5554:	99 85       	ldd	r25, Y+9	; 0x09
    5556:	9b 83       	std	Y+3, r25	; 0x03
    5558:	8a 83       	std	Y+2, r24	; 0x02
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	8c 83       	std	Y+4, r24	; 0x04
    555e:	88 85       	ldd	r24, Y+8	; 0x08
    5560:	99 85       	ldd	r25, Y+9	; 0x09
    5562:	89 2b       	or	r24, r25
    5564:	09 f4       	brne	.+2      	; 0x5568 <vTaskPriorityDisinheritAfterTimeout+0x38>
    5566:	dc c0       	rjmp	.+440    	; 0x5720 <vTaskPriorityDisinheritAfterTimeout+0x1f0>
    5568:	8a 81       	ldd	r24, Y+2	; 0x02
    556a:	9b 81       	ldd	r25, Y+3	; 0x03
    556c:	fc 01       	movw	r30, r24
    556e:	95 a5       	ldd	r25, Z+45	; 0x2d
    5570:	8a 85       	ldd	r24, Y+10	; 0x0a
    5572:	98 17       	cp	r25, r24
    5574:	18 f4       	brcc	.+6      	; 0x557c <vTaskPriorityDisinheritAfterTimeout+0x4c>
    5576:	8a 85       	ldd	r24, Y+10	; 0x0a
    5578:	89 83       	std	Y+1, r24	; 0x01
    557a:	05 c0       	rjmp	.+10     	; 0x5586 <vTaskPriorityDisinheritAfterTimeout+0x56>
    557c:	8a 81       	ldd	r24, Y+2	; 0x02
    557e:	9b 81       	ldd	r25, Y+3	; 0x03
    5580:	fc 01       	movw	r30, r24
    5582:	85 a5       	ldd	r24, Z+45	; 0x2d
    5584:	89 83       	std	Y+1, r24	; 0x01
    5586:	8a 81       	ldd	r24, Y+2	; 0x02
    5588:	9b 81       	ldd	r25, Y+3	; 0x03
    558a:	fc 01       	movw	r30, r24
    558c:	92 8d       	ldd	r25, Z+26	; 0x1a
    558e:	89 81       	ldd	r24, Y+1	; 0x01
    5590:	98 17       	cp	r25, r24
    5592:	09 f4       	brne	.+2      	; 0x5596 <vTaskPriorityDisinheritAfterTimeout+0x66>
    5594:	c5 c0       	rjmp	.+394    	; 0x5720 <vTaskPriorityDisinheritAfterTimeout+0x1f0>
    5596:	8a 81       	ldd	r24, Y+2	; 0x02
    5598:	9b 81       	ldd	r25, Y+3	; 0x03
    559a:	fc 01       	movw	r30, r24
    559c:	96 a5       	ldd	r25, Z+46	; 0x2e
    559e:	8c 81       	ldd	r24, Y+4	; 0x04
    55a0:	98 17       	cp	r25, r24
    55a2:	09 f0       	breq	.+2      	; 0x55a6 <vTaskPriorityDisinheritAfterTimeout+0x76>
    55a4:	bd c0       	rjmp	.+378    	; 0x5720 <vTaskPriorityDisinheritAfterTimeout+0x1f0>
    55a6:	8a 81       	ldd	r24, Y+2	; 0x02
    55a8:	9b 81       	ldd	r25, Y+3	; 0x03
    55aa:	fc 01       	movw	r30, r24
    55ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    55ae:	8d 83       	std	Y+5, r24	; 0x05
    55b0:	8a 81       	ldd	r24, Y+2	; 0x02
    55b2:	9b 81       	ldd	r25, Y+3	; 0x03
    55b4:	29 81       	ldd	r18, Y+1	; 0x01
    55b6:	fc 01       	movw	r30, r24
    55b8:	22 8f       	std	Z+26, r18	; 0x1a
    55ba:	8a 81       	ldd	r24, Y+2	; 0x02
    55bc:	9b 81       	ldd	r25, Y+3	; 0x03
    55be:	fc 01       	movw	r30, r24
    55c0:	86 85       	ldd	r24, Z+14	; 0x0e
    55c2:	97 85       	ldd	r25, Z+15	; 0x0f
    55c4:	a0 89       	ldd	r26, Z+16	; 0x10
    55c6:	b1 89       	ldd	r27, Z+17	; 0x11
    55c8:	bb 23       	and	r27, r27
    55ca:	c4 f0       	brlt	.+48     	; 0x55fc <vTaskPriorityDisinheritAfterTimeout+0xcc>
    55cc:	89 81       	ldd	r24, Y+1	; 0x01
    55ce:	88 2f       	mov	r24, r24
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	a0 e0       	ldi	r26, 0x00	; 0
    55d4:	b0 e0       	ldi	r27, 0x00	; 0
    55d6:	2a e0       	ldi	r18, 0x0A	; 10
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	40 e0       	ldi	r20, 0x00	; 0
    55dc:	50 e0       	ldi	r21, 0x00	; 0
    55de:	79 01       	movw	r14, r18
    55e0:	8a 01       	movw	r16, r20
    55e2:	e8 1a       	sub	r14, r24
    55e4:	f9 0a       	sbc	r15, r25
    55e6:	0a 0b       	sbc	r16, r26
    55e8:	1b 0b       	sbc	r17, r27
    55ea:	d8 01       	movw	r26, r16
    55ec:	c7 01       	movw	r24, r14
    55ee:	2a 81       	ldd	r18, Y+2	; 0x02
    55f0:	3b 81       	ldd	r19, Y+3	; 0x03
    55f2:	f9 01       	movw	r30, r18
    55f4:	86 87       	std	Z+14, r24	; 0x0e
    55f6:	97 87       	std	Z+15, r25	; 0x0f
    55f8:	a0 8b       	std	Z+16, r26	; 0x10
    55fa:	b1 8b       	std	Z+17, r27	; 0x11
    55fc:	8a 81       	ldd	r24, Y+2	; 0x02
    55fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5600:	fc 01       	movw	r30, r24
    5602:	24 85       	ldd	r18, Z+12	; 0x0c
    5604:	35 85       	ldd	r19, Z+13	; 0x0d
    5606:	8d 81       	ldd	r24, Y+5	; 0x05
    5608:	48 2f       	mov	r20, r24
    560a:	50 e0       	ldi	r21, 0x00	; 0
    560c:	6b e0       	ldi	r22, 0x0B	; 11
    560e:	64 9f       	mul	r22, r20
    5610:	c0 01       	movw	r24, r0
    5612:	65 9f       	mul	r22, r21
    5614:	90 0d       	add	r25, r0
    5616:	11 24       	eor	r1, r1
    5618:	8b 56       	subi	r24, 0x6B	; 107
    561a:	9c 4e       	sbci	r25, 0xEC	; 236
    561c:	28 17       	cp	r18, r24
    561e:	39 07       	cpc	r19, r25
    5620:	09 f0       	breq	.+2      	; 0x5624 <vTaskPriorityDisinheritAfterTimeout+0xf4>
    5622:	7e c0       	rjmp	.+252    	; 0x5720 <vTaskPriorityDisinheritAfterTimeout+0x1f0>
    5624:	8a 81       	ldd	r24, Y+2	; 0x02
    5626:	9b 81       	ldd	r25, Y+3	; 0x03
    5628:	02 96       	adiw	r24, 0x02	; 2
    562a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <uxListRemove>
    562e:	8a 81       	ldd	r24, Y+2	; 0x02
    5630:	9b 81       	ldd	r25, Y+3	; 0x03
    5632:	fc 01       	movw	r30, r24
    5634:	92 8d       	ldd	r25, Z+26	; 0x1a
    5636:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    563a:	89 17       	cp	r24, r25
    563c:	30 f4       	brcc	.+12     	; 0x564a <vTaskPriorityDisinheritAfterTimeout+0x11a>
    563e:	8a 81       	ldd	r24, Y+2	; 0x02
    5640:	9b 81       	ldd	r25, Y+3	; 0x03
    5642:	fc 01       	movw	r30, r24
    5644:	82 8d       	ldd	r24, Z+26	; 0x1a
    5646:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    564a:	8a 81       	ldd	r24, Y+2	; 0x02
    564c:	9b 81       	ldd	r25, Y+3	; 0x03
    564e:	fc 01       	movw	r30, r24
    5650:	82 8d       	ldd	r24, Z+26	; 0x1a
    5652:	28 2f       	mov	r18, r24
    5654:	30 e0       	ldi	r19, 0x00	; 0
    5656:	4b e0       	ldi	r20, 0x0B	; 11
    5658:	42 9f       	mul	r20, r18
    565a:	c0 01       	movw	r24, r0
    565c:	43 9f       	mul	r20, r19
    565e:	90 0d       	add	r25, r0
    5660:	11 24       	eor	r1, r1
    5662:	8a 56       	subi	r24, 0x6A	; 106
    5664:	9c 4e       	sbci	r25, 0xEC	; 236
    5666:	fc 01       	movw	r30, r24
    5668:	80 81       	ld	r24, Z
    566a:	91 81       	ldd	r25, Z+1	; 0x01
    566c:	9f 83       	std	Y+7, r25	; 0x07
    566e:	8e 83       	std	Y+6, r24	; 0x06
    5670:	8a 81       	ldd	r24, Y+2	; 0x02
    5672:	9b 81       	ldd	r25, Y+3	; 0x03
    5674:	2e 81       	ldd	r18, Y+6	; 0x06
    5676:	3f 81       	ldd	r19, Y+7	; 0x07
    5678:	fc 01       	movw	r30, r24
    567a:	37 83       	std	Z+7, r19	; 0x07
    567c:	26 83       	std	Z+6, r18	; 0x06
    567e:	8e 81       	ldd	r24, Y+6	; 0x06
    5680:	9f 81       	ldd	r25, Y+7	; 0x07
    5682:	fc 01       	movw	r30, r24
    5684:	26 81       	ldd	r18, Z+6	; 0x06
    5686:	37 81       	ldd	r19, Z+7	; 0x07
    5688:	8a 81       	ldd	r24, Y+2	; 0x02
    568a:	9b 81       	ldd	r25, Y+3	; 0x03
    568c:	fc 01       	movw	r30, r24
    568e:	31 87       	std	Z+9, r19	; 0x09
    5690:	20 87       	std	Z+8, r18	; 0x08
    5692:	8e 81       	ldd	r24, Y+6	; 0x06
    5694:	9f 81       	ldd	r25, Y+7	; 0x07
    5696:	fc 01       	movw	r30, r24
    5698:	86 81       	ldd	r24, Z+6	; 0x06
    569a:	97 81       	ldd	r25, Z+7	; 0x07
    569c:	2a 81       	ldd	r18, Y+2	; 0x02
    569e:	3b 81       	ldd	r19, Y+3	; 0x03
    56a0:	2e 5f       	subi	r18, 0xFE	; 254
    56a2:	3f 4f       	sbci	r19, 0xFF	; 255
    56a4:	fc 01       	movw	r30, r24
    56a6:	35 83       	std	Z+5, r19	; 0x05
    56a8:	24 83       	std	Z+4, r18	; 0x04
    56aa:	8a 81       	ldd	r24, Y+2	; 0x02
    56ac:	9b 81       	ldd	r25, Y+3	; 0x03
    56ae:	9c 01       	movw	r18, r24
    56b0:	2e 5f       	subi	r18, 0xFE	; 254
    56b2:	3f 4f       	sbci	r19, 0xFF	; 255
    56b4:	8e 81       	ldd	r24, Y+6	; 0x06
    56b6:	9f 81       	ldd	r25, Y+7	; 0x07
    56b8:	fc 01       	movw	r30, r24
    56ba:	37 83       	std	Z+7, r19	; 0x07
    56bc:	26 83       	std	Z+6, r18	; 0x06
    56be:	8a 81       	ldd	r24, Y+2	; 0x02
    56c0:	9b 81       	ldd	r25, Y+3	; 0x03
    56c2:	fc 01       	movw	r30, r24
    56c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    56c6:	28 2f       	mov	r18, r24
    56c8:	30 e0       	ldi	r19, 0x00	; 0
    56ca:	4b e0       	ldi	r20, 0x0B	; 11
    56cc:	42 9f       	mul	r20, r18
    56ce:	c0 01       	movw	r24, r0
    56d0:	43 9f       	mul	r20, r19
    56d2:	90 0d       	add	r25, r0
    56d4:	11 24       	eor	r1, r1
    56d6:	9c 01       	movw	r18, r24
    56d8:	2b 56       	subi	r18, 0x6B	; 107
    56da:	3c 4e       	sbci	r19, 0xEC	; 236
    56dc:	8a 81       	ldd	r24, Y+2	; 0x02
    56de:	9b 81       	ldd	r25, Y+3	; 0x03
    56e0:	fc 01       	movw	r30, r24
    56e2:	35 87       	std	Z+13, r19	; 0x0d
    56e4:	24 87       	std	Z+12, r18	; 0x0c
    56e6:	8a 81       	ldd	r24, Y+2	; 0x02
    56e8:	9b 81       	ldd	r25, Y+3	; 0x03
    56ea:	fc 01       	movw	r30, r24
    56ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    56ee:	88 2f       	mov	r24, r24
    56f0:	90 e0       	ldi	r25, 0x00	; 0
    56f2:	4b e0       	ldi	r20, 0x0B	; 11
    56f4:	48 9f       	mul	r20, r24
    56f6:	90 01       	movw	r18, r0
    56f8:	49 9f       	mul	r20, r25
    56fa:	30 0d       	add	r19, r0
    56fc:	11 24       	eor	r1, r1
    56fe:	2b 56       	subi	r18, 0x6B	; 107
    5700:	3c 4e       	sbci	r19, 0xEC	; 236
    5702:	f9 01       	movw	r30, r18
    5704:	20 81       	ld	r18, Z
    5706:	41 e0       	ldi	r20, 0x01	; 1
    5708:	42 0f       	add	r20, r18
    570a:	5b e0       	ldi	r21, 0x0B	; 11
    570c:	58 9f       	mul	r21, r24
    570e:	90 01       	movw	r18, r0
    5710:	59 9f       	mul	r21, r25
    5712:	30 0d       	add	r19, r0
    5714:	11 24       	eor	r1, r1
    5716:	c9 01       	movw	r24, r18
    5718:	8b 56       	subi	r24, 0x6B	; 107
    571a:	9c 4e       	sbci	r25, 0xEC	; 236
    571c:	fc 01       	movw	r30, r24
    571e:	40 83       	st	Z, r20
    5720:	00 00       	nop
    5722:	2a 96       	adiw	r28, 0x0a	; 10
    5724:	0f b6       	in	r0, 0x3f	; 63
    5726:	f8 94       	cli
    5728:	de bf       	out	0x3e, r29	; 62
    572a:	0f be       	out	0x3f, r0	; 63
    572c:	cd bf       	out	0x3d, r28	; 61
    572e:	df 91       	pop	r29
    5730:	cf 91       	pop	r28
    5732:	1f 91       	pop	r17
    5734:	0f 91       	pop	r16
    5736:	ff 90       	pop	r15
    5738:	ef 90       	pop	r14
    573a:	08 95       	ret

0000573c <uxTaskResetEventItemValue>:
    573c:	ef 92       	push	r14
    573e:	ff 92       	push	r15
    5740:	0f 93       	push	r16
    5742:	1f 93       	push	r17
    5744:	cf 93       	push	r28
    5746:	df 93       	push	r29
    5748:	00 d0       	rcall	.+0      	; 0x574a <uxTaskResetEventItemValue+0xe>
    574a:	1f 92       	push	r1
    574c:	cd b7       	in	r28, 0x3d	; 61
    574e:	de b7       	in	r29, 0x3e	; 62
    5750:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    5754:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    5758:	fc 01       	movw	r30, r24
    575a:	86 85       	ldd	r24, Z+14	; 0x0e
    575c:	97 85       	ldd	r25, Z+15	; 0x0f
    575e:	a0 89       	ldd	r26, Z+16	; 0x10
    5760:	b1 89       	ldd	r27, Z+17	; 0x11
    5762:	89 83       	std	Y+1, r24	; 0x01
    5764:	9a 83       	std	Y+2, r25	; 0x02
    5766:	ab 83       	std	Y+3, r26	; 0x03
    5768:	bc 83       	std	Y+4, r27	; 0x04
    576a:	60 91 93 13 	lds	r22, 0x1393	; 0x801393 <pxCurrentTCB>
    576e:	70 91 94 13 	lds	r23, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    5772:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    5776:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    577a:	fc 01       	movw	r30, r24
    577c:	82 8d       	ldd	r24, Z+26	; 0x1a
    577e:	88 2f       	mov	r24, r24
    5780:	90 e0       	ldi	r25, 0x00	; 0
    5782:	a0 e0       	ldi	r26, 0x00	; 0
    5784:	b0 e0       	ldi	r27, 0x00	; 0
    5786:	2a e0       	ldi	r18, 0x0A	; 10
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	40 e0       	ldi	r20, 0x00	; 0
    578c:	50 e0       	ldi	r21, 0x00	; 0
    578e:	79 01       	movw	r14, r18
    5790:	8a 01       	movw	r16, r20
    5792:	e8 1a       	sub	r14, r24
    5794:	f9 0a       	sbc	r15, r25
    5796:	0a 0b       	sbc	r16, r26
    5798:	1b 0b       	sbc	r17, r27
    579a:	d8 01       	movw	r26, r16
    579c:	c7 01       	movw	r24, r14
    579e:	fb 01       	movw	r30, r22
    57a0:	86 87       	std	Z+14, r24	; 0x0e
    57a2:	97 87       	std	Z+15, r25	; 0x0f
    57a4:	a0 8b       	std	Z+16, r26	; 0x10
    57a6:	b1 8b       	std	Z+17, r27	; 0x11
    57a8:	89 81       	ldd	r24, Y+1	; 0x01
    57aa:	9a 81       	ldd	r25, Y+2	; 0x02
    57ac:	ab 81       	ldd	r26, Y+3	; 0x03
    57ae:	bc 81       	ldd	r27, Y+4	; 0x04
    57b0:	bc 01       	movw	r22, r24
    57b2:	cd 01       	movw	r24, r26
    57b4:	0f 90       	pop	r0
    57b6:	0f 90       	pop	r0
    57b8:	0f 90       	pop	r0
    57ba:	0f 90       	pop	r0
    57bc:	df 91       	pop	r29
    57be:	cf 91       	pop	r28
    57c0:	1f 91       	pop	r17
    57c2:	0f 91       	pop	r16
    57c4:	ff 90       	pop	r15
    57c6:	ef 90       	pop	r14
    57c8:	08 95       	ret

000057ca <pvTaskIncrementMutexHeldCount>:
    57ca:	cf 93       	push	r28
    57cc:	df 93       	push	r29
    57ce:	cd b7       	in	r28, 0x3d	; 61
    57d0:	de b7       	in	r29, 0x3e	; 62
    57d2:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    57d6:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    57da:	89 2b       	or	r24, r25
    57dc:	49 f0       	breq	.+18     	; 0x57f0 <pvTaskIncrementMutexHeldCount+0x26>
    57de:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    57e2:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    57e6:	fc 01       	movw	r30, r24
    57e8:	26 a5       	ldd	r18, Z+46	; 0x2e
    57ea:	2f 5f       	subi	r18, 0xFF	; 255
    57ec:	fc 01       	movw	r30, r24
    57ee:	26 a7       	std	Z+46, r18	; 0x2e
    57f0:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    57f4:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    57f8:	df 91       	pop	r29
    57fa:	cf 91       	pop	r28
    57fc:	08 95       	ret

000057fe <xTaskGenericNotifyWait>:
    57fe:	af 92       	push	r10
    5800:	bf 92       	push	r11
    5802:	cf 92       	push	r12
    5804:	df 92       	push	r13
    5806:	ef 92       	push	r14
    5808:	ff 92       	push	r15
    580a:	0f 93       	push	r16
    580c:	1f 93       	push	r17
    580e:	cf 93       	push	r28
    5810:	df 93       	push	r29
    5812:	cd b7       	in	r28, 0x3d	; 61
    5814:	de b7       	in	r29, 0x3e	; 62
    5816:	60 97       	sbiw	r28, 0x10	; 16
    5818:	0f b6       	in	r0, 0x3f	; 63
    581a:	f8 94       	cli
    581c:	de bf       	out	0x3e, r29	; 62
    581e:	0f be       	out	0x3f, r0	; 63
    5820:	cd bf       	out	0x3d, r28	; 61
    5822:	8a 83       	std	Y+2, r24	; 0x02
    5824:	4b 83       	std	Y+3, r20	; 0x03
    5826:	5c 83       	std	Y+4, r21	; 0x04
    5828:	6d 83       	std	Y+5, r22	; 0x05
    582a:	7e 83       	std	Y+6, r23	; 0x06
    582c:	0f 83       	std	Y+7, r16	; 0x07
    582e:	18 87       	std	Y+8, r17	; 0x08
    5830:	29 87       	std	Y+9, r18	; 0x09
    5832:	3a 87       	std	Y+10, r19	; 0x0a
    5834:	fc 86       	std	Y+12, r15	; 0x0c
    5836:	eb 86       	std	Y+11, r14	; 0x0b
    5838:	ad 86       	std	Y+13, r10	; 0x0d
    583a:	be 86       	std	Y+14, r11	; 0x0e
    583c:	cf 86       	std	Y+15, r12	; 0x0f
    583e:	d8 8a       	std	Y+16, r13	; 0x10
    5840:	0f b6       	in	r0, 0x3f	; 63
    5842:	f8 94       	cli
    5844:	0f 92       	push	r0
    5846:	20 91 93 13 	lds	r18, 0x1393	; 0x801393 <pxCurrentTCB>
    584a:	30 91 94 13 	lds	r19, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    584e:	8a 81       	ldd	r24, Y+2	; 0x02
    5850:	88 2f       	mov	r24, r24
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	82 0f       	add	r24, r18
    5856:	93 1f       	adc	r25, r19
    5858:	c3 96       	adiw	r24, 0x33	; 51
    585a:	dc 01       	movw	r26, r24
    585c:	8c 91       	ld	r24, X
    585e:	82 30       	cpi	r24, 0x02	; 2
    5860:	09 f4       	brne	.+2      	; 0x5864 <xTaskGenericNotifyWait+0x66>
    5862:	4f c0       	rjmp	.+158    	; 0x5902 <xTaskGenericNotifyWait+0x104>
    5864:	60 91 93 13 	lds	r22, 0x1393	; 0x801393 <pxCurrentTCB>
    5868:	70 91 94 13 	lds	r23, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    586c:	8a 81       	ldd	r24, Y+2	; 0x02
    586e:	e8 2f       	mov	r30, r24
    5870:	f0 e0       	ldi	r31, 0x00	; 0
    5872:	8a 81       	ldd	r24, Y+2	; 0x02
    5874:	88 2f       	mov	r24, r24
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	88 0f       	add	r24, r24
    587a:	99 1f       	adc	r25, r25
    587c:	88 0f       	add	r24, r24
    587e:	99 1f       	adc	r25, r25
    5880:	86 0f       	add	r24, r22
    5882:	97 1f       	adc	r25, r23
    5884:	8f 96       	adiw	r24, 0x2f	; 47
    5886:	dc 01       	movw	r26, r24
    5888:	2d 91       	ld	r18, X+
    588a:	3d 91       	ld	r19, X+
    588c:	4d 91       	ld	r20, X+
    588e:	5c 91       	ld	r21, X
    5890:	8b 81       	ldd	r24, Y+3	; 0x03
    5892:	9c 81       	ldd	r25, Y+4	; 0x04
    5894:	ad 81       	ldd	r26, Y+5	; 0x05
    5896:	be 81       	ldd	r27, Y+6	; 0x06
    5898:	80 95       	com	r24
    589a:	90 95       	com	r25
    589c:	a0 95       	com	r26
    589e:	b0 95       	com	r27
    58a0:	82 23       	and	r24, r18
    58a2:	93 23       	and	r25, r19
    58a4:	a4 23       	and	r26, r20
    58a6:	b5 23       	and	r27, r21
    58a8:	9f 01       	movw	r18, r30
    58aa:	22 0f       	add	r18, r18
    58ac:	33 1f       	adc	r19, r19
    58ae:	22 0f       	add	r18, r18
    58b0:	33 1f       	adc	r19, r19
    58b2:	26 0f       	add	r18, r22
    58b4:	37 1f       	adc	r19, r23
    58b6:	21 5d       	subi	r18, 0xD1	; 209
    58b8:	3f 4f       	sbci	r19, 0xFF	; 255
    58ba:	f9 01       	movw	r30, r18
    58bc:	80 83       	st	Z, r24
    58be:	91 83       	std	Z+1, r25	; 0x01
    58c0:	a2 83       	std	Z+2, r26	; 0x02
    58c2:	b3 83       	std	Z+3, r27	; 0x03
    58c4:	20 91 93 13 	lds	r18, 0x1393	; 0x801393 <pxCurrentTCB>
    58c8:	30 91 94 13 	lds	r19, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    58cc:	8a 81       	ldd	r24, Y+2	; 0x02
    58ce:	88 2f       	mov	r24, r24
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	82 0f       	add	r24, r18
    58d4:	93 1f       	adc	r25, r19
    58d6:	c3 96       	adiw	r24, 0x33	; 51
    58d8:	21 e0       	ldi	r18, 0x01	; 1
    58da:	dc 01       	movw	r26, r24
    58dc:	2c 93       	st	X, r18
    58de:	8d 85       	ldd	r24, Y+13	; 0x0d
    58e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    58e2:	af 85       	ldd	r26, Y+15	; 0x0f
    58e4:	b8 89       	ldd	r27, Y+16	; 0x10
    58e6:	89 2b       	or	r24, r25
    58e8:	8a 2b       	or	r24, r26
    58ea:	8b 2b       	or	r24, r27
    58ec:	51 f0       	breq	.+20     	; 0x5902 <xTaskGenericNotifyWait+0x104>
    58ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    58f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    58f2:	af 85       	ldd	r26, Y+15	; 0x0f
    58f4:	b8 89       	ldd	r27, Y+16	; 0x10
    58f6:	41 e0       	ldi	r20, 0x01	; 1
    58f8:	bc 01       	movw	r22, r24
    58fa:	cd 01       	movw	r24, r26
    58fc:	b3 d4       	rcall	.+2406   	; 0x6264 <prvAddCurrentTaskToDelayedList>
    58fe:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vPortYield>
    5902:	0f 90       	pop	r0
    5904:	0f be       	out	0x3f, r0	; 63
    5906:	0f b6       	in	r0, 0x3f	; 63
    5908:	f8 94       	cli
    590a:	0f 92       	push	r0
    590c:	8b 85       	ldd	r24, Y+11	; 0x0b
    590e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5910:	89 2b       	or	r24, r25
    5912:	d1 f0       	breq	.+52     	; 0x5948 <xTaskGenericNotifyWait+0x14a>
    5914:	20 91 93 13 	lds	r18, 0x1393	; 0x801393 <pxCurrentTCB>
    5918:	30 91 94 13 	lds	r19, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    591c:	8a 81       	ldd	r24, Y+2	; 0x02
    591e:	88 2f       	mov	r24, r24
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	88 0f       	add	r24, r24
    5924:	99 1f       	adc	r25, r25
    5926:	88 0f       	add	r24, r24
    5928:	99 1f       	adc	r25, r25
    592a:	82 0f       	add	r24, r18
    592c:	93 1f       	adc	r25, r19
    592e:	8f 96       	adiw	r24, 0x2f	; 47
    5930:	fc 01       	movw	r30, r24
    5932:	80 81       	ld	r24, Z
    5934:	91 81       	ldd	r25, Z+1	; 0x01
    5936:	a2 81       	ldd	r26, Z+2	; 0x02
    5938:	b3 81       	ldd	r27, Z+3	; 0x03
    593a:	2b 85       	ldd	r18, Y+11	; 0x0b
    593c:	3c 85       	ldd	r19, Y+12	; 0x0c
    593e:	f9 01       	movw	r30, r18
    5940:	80 83       	st	Z, r24
    5942:	91 83       	std	Z+1, r25	; 0x01
    5944:	a2 83       	std	Z+2, r26	; 0x02
    5946:	b3 83       	std	Z+3, r27	; 0x03
    5948:	20 91 93 13 	lds	r18, 0x1393	; 0x801393 <pxCurrentTCB>
    594c:	30 91 94 13 	lds	r19, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    5950:	8a 81       	ldd	r24, Y+2	; 0x02
    5952:	88 2f       	mov	r24, r24
    5954:	90 e0       	ldi	r25, 0x00	; 0
    5956:	82 0f       	add	r24, r18
    5958:	93 1f       	adc	r25, r19
    595a:	c3 96       	adiw	r24, 0x33	; 51
    595c:	dc 01       	movw	r26, r24
    595e:	8c 91       	ld	r24, X
    5960:	82 30       	cpi	r24, 0x02	; 2
    5962:	11 f0       	breq	.+4      	; 0x5968 <xTaskGenericNotifyWait+0x16a>
    5964:	19 82       	std	Y+1, r1	; 0x01
    5966:	32 c0       	rjmp	.+100    	; 0x59cc <xTaskGenericNotifyWait+0x1ce>
    5968:	60 91 93 13 	lds	r22, 0x1393	; 0x801393 <pxCurrentTCB>
    596c:	70 91 94 13 	lds	r23, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    5970:	8a 81       	ldd	r24, Y+2	; 0x02
    5972:	e8 2f       	mov	r30, r24
    5974:	f0 e0       	ldi	r31, 0x00	; 0
    5976:	8a 81       	ldd	r24, Y+2	; 0x02
    5978:	88 2f       	mov	r24, r24
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	88 0f       	add	r24, r24
    597e:	99 1f       	adc	r25, r25
    5980:	88 0f       	add	r24, r24
    5982:	99 1f       	adc	r25, r25
    5984:	86 0f       	add	r24, r22
    5986:	97 1f       	adc	r25, r23
    5988:	8f 96       	adiw	r24, 0x2f	; 47
    598a:	dc 01       	movw	r26, r24
    598c:	2d 91       	ld	r18, X+
    598e:	3d 91       	ld	r19, X+
    5990:	4d 91       	ld	r20, X+
    5992:	5c 91       	ld	r21, X
    5994:	8f 81       	ldd	r24, Y+7	; 0x07
    5996:	98 85       	ldd	r25, Y+8	; 0x08
    5998:	a9 85       	ldd	r26, Y+9	; 0x09
    599a:	ba 85       	ldd	r27, Y+10	; 0x0a
    599c:	80 95       	com	r24
    599e:	90 95       	com	r25
    59a0:	a0 95       	com	r26
    59a2:	b0 95       	com	r27
    59a4:	82 23       	and	r24, r18
    59a6:	93 23       	and	r25, r19
    59a8:	a4 23       	and	r26, r20
    59aa:	b5 23       	and	r27, r21
    59ac:	9f 01       	movw	r18, r30
    59ae:	22 0f       	add	r18, r18
    59b0:	33 1f       	adc	r19, r19
    59b2:	22 0f       	add	r18, r18
    59b4:	33 1f       	adc	r19, r19
    59b6:	26 0f       	add	r18, r22
    59b8:	37 1f       	adc	r19, r23
    59ba:	21 5d       	subi	r18, 0xD1	; 209
    59bc:	3f 4f       	sbci	r19, 0xFF	; 255
    59be:	f9 01       	movw	r30, r18
    59c0:	80 83       	st	Z, r24
    59c2:	91 83       	std	Z+1, r25	; 0x01
    59c4:	a2 83       	std	Z+2, r26	; 0x02
    59c6:	b3 83       	std	Z+3, r27	; 0x03
    59c8:	81 e0       	ldi	r24, 0x01	; 1
    59ca:	89 83       	std	Y+1, r24	; 0x01
    59cc:	20 91 93 13 	lds	r18, 0x1393	; 0x801393 <pxCurrentTCB>
    59d0:	30 91 94 13 	lds	r19, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    59d4:	8a 81       	ldd	r24, Y+2	; 0x02
    59d6:	88 2f       	mov	r24, r24
    59d8:	90 e0       	ldi	r25, 0x00	; 0
    59da:	82 0f       	add	r24, r18
    59dc:	93 1f       	adc	r25, r19
    59de:	c3 96       	adiw	r24, 0x33	; 51
    59e0:	dc 01       	movw	r26, r24
    59e2:	1c 92       	st	X, r1
    59e4:	0f 90       	pop	r0
    59e6:	0f be       	out	0x3f, r0	; 63
    59e8:	89 81       	ldd	r24, Y+1	; 0x01
    59ea:	60 96       	adiw	r28, 0x10	; 16
    59ec:	0f b6       	in	r0, 0x3f	; 63
    59ee:	f8 94       	cli
    59f0:	de bf       	out	0x3e, r29	; 62
    59f2:	0f be       	out	0x3f, r0	; 63
    59f4:	cd bf       	out	0x3d, r28	; 61
    59f6:	df 91       	pop	r29
    59f8:	cf 91       	pop	r28
    59fa:	1f 91       	pop	r17
    59fc:	0f 91       	pop	r16
    59fe:	ff 90       	pop	r15
    5a00:	ef 90       	pop	r14
    5a02:	df 90       	pop	r13
    5a04:	cf 90       	pop	r12
    5a06:	bf 90       	pop	r11
    5a08:	af 90       	pop	r10
    5a0a:	08 95       	ret

00005a0c <xTaskGenericNotify>:
    5a0c:	ef 92       	push	r14
    5a0e:	ff 92       	push	r15
    5a10:	0f 93       	push	r16
    5a12:	cf 93       	push	r28
    5a14:	df 93       	push	r29
    5a16:	cd b7       	in	r28, 0x3d	; 61
    5a18:	de b7       	in	r29, 0x3e	; 62
    5a1a:	62 97       	sbiw	r28, 0x12	; 18
    5a1c:	0f b6       	in	r0, 0x3f	; 63
    5a1e:	f8 94       	cli
    5a20:	de bf       	out	0x3e, r29	; 62
    5a22:	0f be       	out	0x3f, r0	; 63
    5a24:	cd bf       	out	0x3d, r28	; 61
    5a26:	9a 87       	std	Y+10, r25	; 0x0a
    5a28:	89 87       	std	Y+9, r24	; 0x09
    5a2a:	6b 87       	std	Y+11, r22	; 0x0b
    5a2c:	2c 87       	std	Y+12, r18	; 0x0c
    5a2e:	3d 87       	std	Y+13, r19	; 0x0d
    5a30:	4e 87       	std	Y+14, r20	; 0x0e
    5a32:	5f 87       	std	Y+15, r21	; 0x0f
    5a34:	08 8b       	std	Y+16, r16	; 0x10
    5a36:	fa 8a       	std	Y+18, r15	; 0x12
    5a38:	e9 8a       	std	Y+17, r14	; 0x11
    5a3a:	81 e0       	ldi	r24, 0x01	; 1
    5a3c:	89 83       	std	Y+1, r24	; 0x01
    5a3e:	89 85       	ldd	r24, Y+9	; 0x09
    5a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a42:	9b 83       	std	Y+3, r25	; 0x03
    5a44:	8a 83       	std	Y+2, r24	; 0x02
    5a46:	0f b6       	in	r0, 0x3f	; 63
    5a48:	f8 94       	cli
    5a4a:	0f 92       	push	r0
    5a4c:	89 89       	ldd	r24, Y+17	; 0x11
    5a4e:	9a 89       	ldd	r25, Y+18	; 0x12
    5a50:	89 2b       	or	r24, r25
    5a52:	c1 f0       	breq	.+48     	; 0x5a84 <xTaskGenericNotify+0x78>
    5a54:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a56:	88 2f       	mov	r24, r24
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	2a 81       	ldd	r18, Y+2	; 0x02
    5a5c:	3b 81       	ldd	r19, Y+3	; 0x03
    5a5e:	88 0f       	add	r24, r24
    5a60:	99 1f       	adc	r25, r25
    5a62:	88 0f       	add	r24, r24
    5a64:	99 1f       	adc	r25, r25
    5a66:	82 0f       	add	r24, r18
    5a68:	93 1f       	adc	r25, r19
    5a6a:	8f 96       	adiw	r24, 0x2f	; 47
    5a6c:	fc 01       	movw	r30, r24
    5a6e:	80 81       	ld	r24, Z
    5a70:	91 81       	ldd	r25, Z+1	; 0x01
    5a72:	a2 81       	ldd	r26, Z+2	; 0x02
    5a74:	b3 81       	ldd	r27, Z+3	; 0x03
    5a76:	29 89       	ldd	r18, Y+17	; 0x11
    5a78:	3a 89       	ldd	r19, Y+18	; 0x12
    5a7a:	f9 01       	movw	r30, r18
    5a7c:	80 83       	st	Z, r24
    5a7e:	91 83       	std	Z+1, r25	; 0x01
    5a80:	a2 83       	std	Z+2, r26	; 0x02
    5a82:	b3 83       	std	Z+3, r27	; 0x03
    5a84:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a86:	88 2f       	mov	r24, r24
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	2a 81       	ldd	r18, Y+2	; 0x02
    5a8c:	3b 81       	ldd	r19, Y+3	; 0x03
    5a8e:	82 0f       	add	r24, r18
    5a90:	93 1f       	adc	r25, r19
    5a92:	c3 96       	adiw	r24, 0x33	; 51
    5a94:	fc 01       	movw	r30, r24
    5a96:	80 81       	ld	r24, Z
    5a98:	8c 83       	std	Y+4, r24	; 0x04
    5a9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a9c:	88 2f       	mov	r24, r24
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	2a 81       	ldd	r18, Y+2	; 0x02
    5aa2:	3b 81       	ldd	r19, Y+3	; 0x03
    5aa4:	82 0f       	add	r24, r18
    5aa6:	93 1f       	adc	r25, r19
    5aa8:	c3 96       	adiw	r24, 0x33	; 51
    5aaa:	22 e0       	ldi	r18, 0x02	; 2
    5aac:	fc 01       	movw	r30, r24
    5aae:	20 83       	st	Z, r18
    5ab0:	88 89       	ldd	r24, Y+16	; 0x10
    5ab2:	88 2f       	mov	r24, r24
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	82 30       	cpi	r24, 0x02	; 2
    5ab8:	91 05       	cpc	r25, r1
    5aba:	09 f4       	brne	.+2      	; 0x5abe <xTaskGenericNotify+0xb2>
    5abc:	3e c0       	rjmp	.+124    	; 0x5b3a <xTaskGenericNotify+0x12e>
    5abe:	83 30       	cpi	r24, 0x03	; 3
    5ac0:	91 05       	cpc	r25, r1
    5ac2:	34 f4       	brge	.+12     	; 0x5ad0 <xTaskGenericNotify+0xc4>
    5ac4:	00 97       	sbiw	r24, 0x00	; 0
    5ac6:	09 f4       	brne	.+2      	; 0x5aca <xTaskGenericNotify+0xbe>
    5ac8:	92 c0       	rjmp	.+292    	; 0x5bee <xTaskGenericNotify+0x1e2>
    5aca:	01 97       	sbiw	r24, 0x01	; 1
    5acc:	49 f0       	breq	.+18     	; 0x5ae0 <xTaskGenericNotify+0xd4>
    5ace:	90 c0       	rjmp	.+288    	; 0x5bf0 <xTaskGenericNotify+0x1e4>
    5ad0:	83 30       	cpi	r24, 0x03	; 3
    5ad2:	91 05       	cpc	r25, r1
    5ad4:	09 f4       	brne	.+2      	; 0x5ad8 <xTaskGenericNotify+0xcc>
    5ad6:	56 c0       	rjmp	.+172    	; 0x5b84 <xTaskGenericNotify+0x178>
    5ad8:	04 97       	sbiw	r24, 0x04	; 4
    5ada:	09 f4       	brne	.+2      	; 0x5ade <xTaskGenericNotify+0xd2>
    5adc:	6b c0       	rjmp	.+214    	; 0x5bb4 <xTaskGenericNotify+0x1a8>
    5ade:	88 c0       	rjmp	.+272    	; 0x5bf0 <xTaskGenericNotify+0x1e4>
    5ae0:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ae2:	68 2f       	mov	r22, r24
    5ae4:	70 e0       	ldi	r23, 0x00	; 0
    5ae6:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ae8:	88 2f       	mov	r24, r24
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	2a 81       	ldd	r18, Y+2	; 0x02
    5aee:	3b 81       	ldd	r19, Y+3	; 0x03
    5af0:	88 0f       	add	r24, r24
    5af2:	99 1f       	adc	r25, r25
    5af4:	88 0f       	add	r24, r24
    5af6:	99 1f       	adc	r25, r25
    5af8:	82 0f       	add	r24, r18
    5afa:	93 1f       	adc	r25, r19
    5afc:	8f 96       	adiw	r24, 0x2f	; 47
    5afe:	fc 01       	movw	r30, r24
    5b00:	20 81       	ld	r18, Z
    5b02:	31 81       	ldd	r19, Z+1	; 0x01
    5b04:	42 81       	ldd	r20, Z+2	; 0x02
    5b06:	53 81       	ldd	r21, Z+3	; 0x03
    5b08:	8c 85       	ldd	r24, Y+12	; 0x0c
    5b0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    5b0c:	ae 85       	ldd	r26, Y+14	; 0x0e
    5b0e:	bf 85       	ldd	r27, Y+15	; 0x0f
    5b10:	82 2b       	or	r24, r18
    5b12:	93 2b       	or	r25, r19
    5b14:	a4 2b       	or	r26, r20
    5b16:	b5 2b       	or	r27, r21
    5b18:	4a 81       	ldd	r20, Y+2	; 0x02
    5b1a:	5b 81       	ldd	r21, Y+3	; 0x03
    5b1c:	9b 01       	movw	r18, r22
    5b1e:	22 0f       	add	r18, r18
    5b20:	33 1f       	adc	r19, r19
    5b22:	22 0f       	add	r18, r18
    5b24:	33 1f       	adc	r19, r19
    5b26:	24 0f       	add	r18, r20
    5b28:	35 1f       	adc	r19, r21
    5b2a:	21 5d       	subi	r18, 0xD1	; 209
    5b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    5b2e:	f9 01       	movw	r30, r18
    5b30:	80 83       	st	Z, r24
    5b32:	91 83       	std	Z+1, r25	; 0x01
    5b34:	a2 83       	std	Z+2, r26	; 0x02
    5b36:	b3 83       	std	Z+3, r27	; 0x03
    5b38:	5b c0       	rjmp	.+182    	; 0x5bf0 <xTaskGenericNotify+0x1e4>
    5b3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b3c:	28 2f       	mov	r18, r24
    5b3e:	30 e0       	ldi	r19, 0x00	; 0
    5b40:	4a 81       	ldd	r20, Y+2	; 0x02
    5b42:	5b 81       	ldd	r21, Y+3	; 0x03
    5b44:	c9 01       	movw	r24, r18
    5b46:	88 0f       	add	r24, r24
    5b48:	99 1f       	adc	r25, r25
    5b4a:	88 0f       	add	r24, r24
    5b4c:	99 1f       	adc	r25, r25
    5b4e:	84 0f       	add	r24, r20
    5b50:	95 1f       	adc	r25, r21
    5b52:	8f 96       	adiw	r24, 0x2f	; 47
    5b54:	fc 01       	movw	r30, r24
    5b56:	80 81       	ld	r24, Z
    5b58:	91 81       	ldd	r25, Z+1	; 0x01
    5b5a:	a2 81       	ldd	r26, Z+2	; 0x02
    5b5c:	b3 81       	ldd	r27, Z+3	; 0x03
    5b5e:	01 96       	adiw	r24, 0x01	; 1
    5b60:	a1 1d       	adc	r26, r1
    5b62:	b1 1d       	adc	r27, r1
    5b64:	4a 81       	ldd	r20, Y+2	; 0x02
    5b66:	5b 81       	ldd	r21, Y+3	; 0x03
    5b68:	22 0f       	add	r18, r18
    5b6a:	33 1f       	adc	r19, r19
    5b6c:	22 0f       	add	r18, r18
    5b6e:	33 1f       	adc	r19, r19
    5b70:	24 0f       	add	r18, r20
    5b72:	35 1f       	adc	r19, r21
    5b74:	21 5d       	subi	r18, 0xD1	; 209
    5b76:	3f 4f       	sbci	r19, 0xFF	; 255
    5b78:	f9 01       	movw	r30, r18
    5b7a:	80 83       	st	Z, r24
    5b7c:	91 83       	std	Z+1, r25	; 0x01
    5b7e:	a2 83       	std	Z+2, r26	; 0x02
    5b80:	b3 83       	std	Z+3, r27	; 0x03
    5b82:	36 c0       	rjmp	.+108    	; 0x5bf0 <xTaskGenericNotify+0x1e4>
    5b84:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b86:	88 2f       	mov	r24, r24
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	2a 81       	ldd	r18, Y+2	; 0x02
    5b8c:	3b 81       	ldd	r19, Y+3	; 0x03
    5b8e:	88 0f       	add	r24, r24
    5b90:	99 1f       	adc	r25, r25
    5b92:	88 0f       	add	r24, r24
    5b94:	99 1f       	adc	r25, r25
    5b96:	82 0f       	add	r24, r18
    5b98:	93 1f       	adc	r25, r19
    5b9a:	9c 01       	movw	r18, r24
    5b9c:	21 5d       	subi	r18, 0xD1	; 209
    5b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    5ba0:	8c 85       	ldd	r24, Y+12	; 0x0c
    5ba2:	9d 85       	ldd	r25, Y+13	; 0x0d
    5ba4:	ae 85       	ldd	r26, Y+14	; 0x0e
    5ba6:	bf 85       	ldd	r27, Y+15	; 0x0f
    5ba8:	f9 01       	movw	r30, r18
    5baa:	80 83       	st	Z, r24
    5bac:	91 83       	std	Z+1, r25	; 0x01
    5bae:	a2 83       	std	Z+2, r26	; 0x02
    5bb0:	b3 83       	std	Z+3, r27	; 0x03
    5bb2:	1e c0       	rjmp	.+60     	; 0x5bf0 <xTaskGenericNotify+0x1e4>
    5bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    5bb6:	82 30       	cpi	r24, 0x02	; 2
    5bb8:	c1 f0       	breq	.+48     	; 0x5bea <xTaskGenericNotify+0x1de>
    5bba:	8b 85       	ldd	r24, Y+11	; 0x0b
    5bbc:	88 2f       	mov	r24, r24
    5bbe:	90 e0       	ldi	r25, 0x00	; 0
    5bc0:	2a 81       	ldd	r18, Y+2	; 0x02
    5bc2:	3b 81       	ldd	r19, Y+3	; 0x03
    5bc4:	88 0f       	add	r24, r24
    5bc6:	99 1f       	adc	r25, r25
    5bc8:	88 0f       	add	r24, r24
    5bca:	99 1f       	adc	r25, r25
    5bcc:	82 0f       	add	r24, r18
    5bce:	93 1f       	adc	r25, r19
    5bd0:	9c 01       	movw	r18, r24
    5bd2:	21 5d       	subi	r18, 0xD1	; 209
    5bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    5bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    5bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
    5bda:	ae 85       	ldd	r26, Y+14	; 0x0e
    5bdc:	bf 85       	ldd	r27, Y+15	; 0x0f
    5bde:	f9 01       	movw	r30, r18
    5be0:	80 83       	st	Z, r24
    5be2:	91 83       	std	Z+1, r25	; 0x01
    5be4:	a2 83       	std	Z+2, r26	; 0x02
    5be6:	b3 83       	std	Z+3, r27	; 0x03
    5be8:	03 c0       	rjmp	.+6      	; 0x5bf0 <xTaskGenericNotify+0x1e4>
    5bea:	19 82       	std	Y+1, r1	; 0x01
    5bec:	01 c0       	rjmp	.+2      	; 0x5bf0 <xTaskGenericNotify+0x1e4>
    5bee:	00 00       	nop
    5bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    5bf2:	81 30       	cpi	r24, 0x01	; 1
    5bf4:	09 f0       	breq	.+2      	; 0x5bf8 <xTaskGenericNotify+0x1ec>
    5bf6:	cc c0       	rjmp	.+408    	; 0x5d90 <xTaskGenericNotify+0x384>
    5bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    5bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    5bfc:	fc 01       	movw	r30, r24
    5bfe:	84 85       	ldd	r24, Z+12	; 0x0c
    5c00:	95 85       	ldd	r25, Z+13	; 0x0d
    5c02:	9e 83       	std	Y+6, r25	; 0x06
    5c04:	8d 83       	std	Y+5, r24	; 0x05
    5c06:	8a 81       	ldd	r24, Y+2	; 0x02
    5c08:	9b 81       	ldd	r25, Y+3	; 0x03
    5c0a:	fc 01       	movw	r30, r24
    5c0c:	86 81       	ldd	r24, Z+6	; 0x06
    5c0e:	97 81       	ldd	r25, Z+7	; 0x07
    5c10:	2a 81       	ldd	r18, Y+2	; 0x02
    5c12:	3b 81       	ldd	r19, Y+3	; 0x03
    5c14:	f9 01       	movw	r30, r18
    5c16:	20 85       	ldd	r18, Z+8	; 0x08
    5c18:	31 85       	ldd	r19, Z+9	; 0x09
    5c1a:	fc 01       	movw	r30, r24
    5c1c:	37 83       	std	Z+7, r19	; 0x07
    5c1e:	26 83       	std	Z+6, r18	; 0x06
    5c20:	8a 81       	ldd	r24, Y+2	; 0x02
    5c22:	9b 81       	ldd	r25, Y+3	; 0x03
    5c24:	fc 01       	movw	r30, r24
    5c26:	80 85       	ldd	r24, Z+8	; 0x08
    5c28:	91 85       	ldd	r25, Z+9	; 0x09
    5c2a:	2a 81       	ldd	r18, Y+2	; 0x02
    5c2c:	3b 81       	ldd	r19, Y+3	; 0x03
    5c2e:	f9 01       	movw	r30, r18
    5c30:	26 81       	ldd	r18, Z+6	; 0x06
    5c32:	37 81       	ldd	r19, Z+7	; 0x07
    5c34:	fc 01       	movw	r30, r24
    5c36:	35 83       	std	Z+5, r19	; 0x05
    5c38:	24 83       	std	Z+4, r18	; 0x04
    5c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c3e:	fc 01       	movw	r30, r24
    5c40:	21 81       	ldd	r18, Z+1	; 0x01
    5c42:	32 81       	ldd	r19, Z+2	; 0x02
    5c44:	8a 81       	ldd	r24, Y+2	; 0x02
    5c46:	9b 81       	ldd	r25, Y+3	; 0x03
    5c48:	02 96       	adiw	r24, 0x02	; 2
    5c4a:	28 17       	cp	r18, r24
    5c4c:	39 07       	cpc	r19, r25
    5c4e:	51 f4       	brne	.+20     	; 0x5c64 <xTaskGenericNotify+0x258>
    5c50:	8a 81       	ldd	r24, Y+2	; 0x02
    5c52:	9b 81       	ldd	r25, Y+3	; 0x03
    5c54:	fc 01       	movw	r30, r24
    5c56:	20 85       	ldd	r18, Z+8	; 0x08
    5c58:	31 85       	ldd	r19, Z+9	; 0x09
    5c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c5e:	fc 01       	movw	r30, r24
    5c60:	32 83       	std	Z+2, r19	; 0x02
    5c62:	21 83       	std	Z+1, r18	; 0x01
    5c64:	8a 81       	ldd	r24, Y+2	; 0x02
    5c66:	9b 81       	ldd	r25, Y+3	; 0x03
    5c68:	fc 01       	movw	r30, r24
    5c6a:	15 86       	std	Z+13, r1	; 0x0d
    5c6c:	14 86       	std	Z+12, r1	; 0x0c
    5c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    5c70:	9e 81       	ldd	r25, Y+6	; 0x06
    5c72:	fc 01       	movw	r30, r24
    5c74:	80 81       	ld	r24, Z
    5c76:	2f ef       	ldi	r18, 0xFF	; 255
    5c78:	28 0f       	add	r18, r24
    5c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c7e:	fc 01       	movw	r30, r24
    5c80:	20 83       	st	Z, r18
    5c82:	8a 81       	ldd	r24, Y+2	; 0x02
    5c84:	9b 81       	ldd	r25, Y+3	; 0x03
    5c86:	fc 01       	movw	r30, r24
    5c88:	92 8d       	ldd	r25, Z+26	; 0x1a
    5c8a:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    5c8e:	89 17       	cp	r24, r25
    5c90:	30 f4       	brcc	.+12     	; 0x5c9e <xTaskGenericNotify+0x292>
    5c92:	8a 81       	ldd	r24, Y+2	; 0x02
    5c94:	9b 81       	ldd	r25, Y+3	; 0x03
    5c96:	fc 01       	movw	r30, r24
    5c98:	82 8d       	ldd	r24, Z+26	; 0x1a
    5c9a:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    5c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    5ca2:	fc 01       	movw	r30, r24
    5ca4:	82 8d       	ldd	r24, Z+26	; 0x1a
    5ca6:	28 2f       	mov	r18, r24
    5ca8:	30 e0       	ldi	r19, 0x00	; 0
    5caa:	4b e0       	ldi	r20, 0x0B	; 11
    5cac:	42 9f       	mul	r20, r18
    5cae:	c0 01       	movw	r24, r0
    5cb0:	43 9f       	mul	r20, r19
    5cb2:	90 0d       	add	r25, r0
    5cb4:	11 24       	eor	r1, r1
    5cb6:	8a 56       	subi	r24, 0x6A	; 106
    5cb8:	9c 4e       	sbci	r25, 0xEC	; 236
    5cba:	fc 01       	movw	r30, r24
    5cbc:	80 81       	ld	r24, Z
    5cbe:	91 81       	ldd	r25, Z+1	; 0x01
    5cc0:	98 87       	std	Y+8, r25	; 0x08
    5cc2:	8f 83       	std	Y+7, r24	; 0x07
    5cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    5cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    5cc8:	2f 81       	ldd	r18, Y+7	; 0x07
    5cca:	38 85       	ldd	r19, Y+8	; 0x08
    5ccc:	fc 01       	movw	r30, r24
    5cce:	37 83       	std	Z+7, r19	; 0x07
    5cd0:	26 83       	std	Z+6, r18	; 0x06
    5cd2:	8f 81       	ldd	r24, Y+7	; 0x07
    5cd4:	98 85       	ldd	r25, Y+8	; 0x08
    5cd6:	fc 01       	movw	r30, r24
    5cd8:	26 81       	ldd	r18, Z+6	; 0x06
    5cda:	37 81       	ldd	r19, Z+7	; 0x07
    5cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    5cde:	9b 81       	ldd	r25, Y+3	; 0x03
    5ce0:	fc 01       	movw	r30, r24
    5ce2:	31 87       	std	Z+9, r19	; 0x09
    5ce4:	20 87       	std	Z+8, r18	; 0x08
    5ce6:	8f 81       	ldd	r24, Y+7	; 0x07
    5ce8:	98 85       	ldd	r25, Y+8	; 0x08
    5cea:	fc 01       	movw	r30, r24
    5cec:	86 81       	ldd	r24, Z+6	; 0x06
    5cee:	97 81       	ldd	r25, Z+7	; 0x07
    5cf0:	2a 81       	ldd	r18, Y+2	; 0x02
    5cf2:	3b 81       	ldd	r19, Y+3	; 0x03
    5cf4:	2e 5f       	subi	r18, 0xFE	; 254
    5cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    5cf8:	fc 01       	movw	r30, r24
    5cfa:	35 83       	std	Z+5, r19	; 0x05
    5cfc:	24 83       	std	Z+4, r18	; 0x04
    5cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    5d00:	9b 81       	ldd	r25, Y+3	; 0x03
    5d02:	9c 01       	movw	r18, r24
    5d04:	2e 5f       	subi	r18, 0xFE	; 254
    5d06:	3f 4f       	sbci	r19, 0xFF	; 255
    5d08:	8f 81       	ldd	r24, Y+7	; 0x07
    5d0a:	98 85       	ldd	r25, Y+8	; 0x08
    5d0c:	fc 01       	movw	r30, r24
    5d0e:	37 83       	std	Z+7, r19	; 0x07
    5d10:	26 83       	std	Z+6, r18	; 0x06
    5d12:	8a 81       	ldd	r24, Y+2	; 0x02
    5d14:	9b 81       	ldd	r25, Y+3	; 0x03
    5d16:	fc 01       	movw	r30, r24
    5d18:	82 8d       	ldd	r24, Z+26	; 0x1a
    5d1a:	28 2f       	mov	r18, r24
    5d1c:	30 e0       	ldi	r19, 0x00	; 0
    5d1e:	4b e0       	ldi	r20, 0x0B	; 11
    5d20:	42 9f       	mul	r20, r18
    5d22:	c0 01       	movw	r24, r0
    5d24:	43 9f       	mul	r20, r19
    5d26:	90 0d       	add	r25, r0
    5d28:	11 24       	eor	r1, r1
    5d2a:	9c 01       	movw	r18, r24
    5d2c:	2b 56       	subi	r18, 0x6B	; 107
    5d2e:	3c 4e       	sbci	r19, 0xEC	; 236
    5d30:	8a 81       	ldd	r24, Y+2	; 0x02
    5d32:	9b 81       	ldd	r25, Y+3	; 0x03
    5d34:	fc 01       	movw	r30, r24
    5d36:	35 87       	std	Z+13, r19	; 0x0d
    5d38:	24 87       	std	Z+12, r18	; 0x0c
    5d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    5d3e:	fc 01       	movw	r30, r24
    5d40:	82 8d       	ldd	r24, Z+26	; 0x1a
    5d42:	88 2f       	mov	r24, r24
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	4b e0       	ldi	r20, 0x0B	; 11
    5d48:	48 9f       	mul	r20, r24
    5d4a:	90 01       	movw	r18, r0
    5d4c:	49 9f       	mul	r20, r25
    5d4e:	30 0d       	add	r19, r0
    5d50:	11 24       	eor	r1, r1
    5d52:	2b 56       	subi	r18, 0x6B	; 107
    5d54:	3c 4e       	sbci	r19, 0xEC	; 236
    5d56:	f9 01       	movw	r30, r18
    5d58:	20 81       	ld	r18, Z
    5d5a:	41 e0       	ldi	r20, 0x01	; 1
    5d5c:	42 0f       	add	r20, r18
    5d5e:	5b e0       	ldi	r21, 0x0B	; 11
    5d60:	58 9f       	mul	r21, r24
    5d62:	90 01       	movw	r18, r0
    5d64:	59 9f       	mul	r21, r25
    5d66:	30 0d       	add	r19, r0
    5d68:	11 24       	eor	r1, r1
    5d6a:	c9 01       	movw	r24, r18
    5d6c:	8b 56       	subi	r24, 0x6B	; 107
    5d6e:	9c 4e       	sbci	r25, 0xEC	; 236
    5d70:	fc 01       	movw	r30, r24
    5d72:	40 83       	st	Z, r20
    5d74:	8a 81       	ldd	r24, Y+2	; 0x02
    5d76:	9b 81       	ldd	r25, Y+3	; 0x03
    5d78:	fc 01       	movw	r30, r24
    5d7a:	22 8d       	ldd	r18, Z+26	; 0x1a
    5d7c:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    5d80:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    5d84:	fc 01       	movw	r30, r24
    5d86:	82 8d       	ldd	r24, Z+26	; 0x1a
    5d88:	82 17       	cp	r24, r18
    5d8a:	10 f4       	brcc	.+4      	; 0x5d90 <xTaskGenericNotify+0x384>
    5d8c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vPortYield>
    5d90:	0f 90       	pop	r0
    5d92:	0f be       	out	0x3f, r0	; 63
    5d94:	89 81       	ldd	r24, Y+1	; 0x01
    5d96:	62 96       	adiw	r28, 0x12	; 18
    5d98:	0f b6       	in	r0, 0x3f	; 63
    5d9a:	f8 94       	cli
    5d9c:	de bf       	out	0x3e, r29	; 62
    5d9e:	0f be       	out	0x3f, r0	; 63
    5da0:	cd bf       	out	0x3d, r28	; 61
    5da2:	df 91       	pop	r29
    5da4:	cf 91       	pop	r28
    5da6:	0f 91       	pop	r16
    5da8:	ff 90       	pop	r15
    5daa:	ef 90       	pop	r14
    5dac:	08 95       	ret

00005dae <xTaskGenericNotifyFromISR>:
    5dae:	cf 92       	push	r12
    5db0:	df 92       	push	r13
    5db2:	ef 92       	push	r14
    5db4:	ff 92       	push	r15
    5db6:	0f 93       	push	r16
    5db8:	cf 93       	push	r28
    5dba:	df 93       	push	r29
    5dbc:	cd b7       	in	r28, 0x3d	; 61
    5dbe:	de b7       	in	r29, 0x3e	; 62
    5dc0:	67 97       	sbiw	r28, 0x17	; 23
    5dc2:	0f b6       	in	r0, 0x3f	; 63
    5dc4:	f8 94       	cli
    5dc6:	de bf       	out	0x3e, r29	; 62
    5dc8:	0f be       	out	0x3f, r0	; 63
    5dca:	cd bf       	out	0x3d, r28	; 61
    5dcc:	9d 87       	std	Y+13, r25	; 0x0d
    5dce:	8c 87       	std	Y+12, r24	; 0x0c
    5dd0:	6e 87       	std	Y+14, r22	; 0x0e
    5dd2:	2f 87       	std	Y+15, r18	; 0x0f
    5dd4:	38 8b       	std	Y+16, r19	; 0x10
    5dd6:	49 8b       	std	Y+17, r20	; 0x11
    5dd8:	5a 8b       	std	Y+18, r21	; 0x12
    5dda:	0b 8b       	std	Y+19, r16	; 0x13
    5ddc:	fd 8a       	std	Y+21, r15	; 0x15
    5dde:	ec 8a       	std	Y+20, r14	; 0x14
    5de0:	df 8a       	std	Y+23, r13	; 0x17
    5de2:	ce 8a       	std	Y+22, r12	; 0x16
    5de4:	81 e0       	ldi	r24, 0x01	; 1
    5de6:	89 83       	std	Y+1, r24	; 0x01
    5de8:	8c 85       	ldd	r24, Y+12	; 0x0c
    5dea:	9d 85       	ldd	r25, Y+13	; 0x0d
    5dec:	9b 83       	std	Y+3, r25	; 0x03
    5dee:	8a 83       	std	Y+2, r24	; 0x02
    5df0:	1c 82       	std	Y+4, r1	; 0x04
    5df2:	8c 89       	ldd	r24, Y+20	; 0x14
    5df4:	9d 89       	ldd	r25, Y+21	; 0x15
    5df6:	89 2b       	or	r24, r25
    5df8:	c1 f0       	breq	.+48     	; 0x5e2a <xTaskGenericNotifyFromISR+0x7c>
    5dfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    5dfc:	88 2f       	mov	r24, r24
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	2a 81       	ldd	r18, Y+2	; 0x02
    5e02:	3b 81       	ldd	r19, Y+3	; 0x03
    5e04:	88 0f       	add	r24, r24
    5e06:	99 1f       	adc	r25, r25
    5e08:	88 0f       	add	r24, r24
    5e0a:	99 1f       	adc	r25, r25
    5e0c:	82 0f       	add	r24, r18
    5e0e:	93 1f       	adc	r25, r19
    5e10:	8f 96       	adiw	r24, 0x2f	; 47
    5e12:	fc 01       	movw	r30, r24
    5e14:	80 81       	ld	r24, Z
    5e16:	91 81       	ldd	r25, Z+1	; 0x01
    5e18:	a2 81       	ldd	r26, Z+2	; 0x02
    5e1a:	b3 81       	ldd	r27, Z+3	; 0x03
    5e1c:	2c 89       	ldd	r18, Y+20	; 0x14
    5e1e:	3d 89       	ldd	r19, Y+21	; 0x15
    5e20:	f9 01       	movw	r30, r18
    5e22:	80 83       	st	Z, r24
    5e24:	91 83       	std	Z+1, r25	; 0x01
    5e26:	a2 83       	std	Z+2, r26	; 0x02
    5e28:	b3 83       	std	Z+3, r27	; 0x03
    5e2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e2c:	88 2f       	mov	r24, r24
    5e2e:	90 e0       	ldi	r25, 0x00	; 0
    5e30:	2a 81       	ldd	r18, Y+2	; 0x02
    5e32:	3b 81       	ldd	r19, Y+3	; 0x03
    5e34:	82 0f       	add	r24, r18
    5e36:	93 1f       	adc	r25, r19
    5e38:	c3 96       	adiw	r24, 0x33	; 51
    5e3a:	fc 01       	movw	r30, r24
    5e3c:	80 81       	ld	r24, Z
    5e3e:	8d 83       	std	Y+5, r24	; 0x05
    5e40:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e42:	88 2f       	mov	r24, r24
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	2a 81       	ldd	r18, Y+2	; 0x02
    5e48:	3b 81       	ldd	r19, Y+3	; 0x03
    5e4a:	82 0f       	add	r24, r18
    5e4c:	93 1f       	adc	r25, r19
    5e4e:	c3 96       	adiw	r24, 0x33	; 51
    5e50:	22 e0       	ldi	r18, 0x02	; 2
    5e52:	fc 01       	movw	r30, r24
    5e54:	20 83       	st	Z, r18
    5e56:	8b 89       	ldd	r24, Y+19	; 0x13
    5e58:	88 2f       	mov	r24, r24
    5e5a:	90 e0       	ldi	r25, 0x00	; 0
    5e5c:	82 30       	cpi	r24, 0x02	; 2
    5e5e:	91 05       	cpc	r25, r1
    5e60:	09 f4       	brne	.+2      	; 0x5e64 <xTaskGenericNotifyFromISR+0xb6>
    5e62:	3e c0       	rjmp	.+124    	; 0x5ee0 <xTaskGenericNotifyFromISR+0x132>
    5e64:	83 30       	cpi	r24, 0x03	; 3
    5e66:	91 05       	cpc	r25, r1
    5e68:	34 f4       	brge	.+12     	; 0x5e76 <xTaskGenericNotifyFromISR+0xc8>
    5e6a:	00 97       	sbiw	r24, 0x00	; 0
    5e6c:	09 f4       	brne	.+2      	; 0x5e70 <xTaskGenericNotifyFromISR+0xc2>
    5e6e:	92 c0       	rjmp	.+292    	; 0x5f94 <xTaskGenericNotifyFromISR+0x1e6>
    5e70:	01 97       	sbiw	r24, 0x01	; 1
    5e72:	49 f0       	breq	.+18     	; 0x5e86 <xTaskGenericNotifyFromISR+0xd8>
    5e74:	90 c0       	rjmp	.+288    	; 0x5f96 <xTaskGenericNotifyFromISR+0x1e8>
    5e76:	83 30       	cpi	r24, 0x03	; 3
    5e78:	91 05       	cpc	r25, r1
    5e7a:	09 f4       	brne	.+2      	; 0x5e7e <xTaskGenericNotifyFromISR+0xd0>
    5e7c:	56 c0       	rjmp	.+172    	; 0x5f2a <xTaskGenericNotifyFromISR+0x17c>
    5e7e:	04 97       	sbiw	r24, 0x04	; 4
    5e80:	09 f4       	brne	.+2      	; 0x5e84 <xTaskGenericNotifyFromISR+0xd6>
    5e82:	6b c0       	rjmp	.+214    	; 0x5f5a <xTaskGenericNotifyFromISR+0x1ac>
    5e84:	88 c0       	rjmp	.+272    	; 0x5f96 <xTaskGenericNotifyFromISR+0x1e8>
    5e86:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e88:	68 2f       	mov	r22, r24
    5e8a:	70 e0       	ldi	r23, 0x00	; 0
    5e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e8e:	88 2f       	mov	r24, r24
    5e90:	90 e0       	ldi	r25, 0x00	; 0
    5e92:	2a 81       	ldd	r18, Y+2	; 0x02
    5e94:	3b 81       	ldd	r19, Y+3	; 0x03
    5e96:	88 0f       	add	r24, r24
    5e98:	99 1f       	adc	r25, r25
    5e9a:	88 0f       	add	r24, r24
    5e9c:	99 1f       	adc	r25, r25
    5e9e:	82 0f       	add	r24, r18
    5ea0:	93 1f       	adc	r25, r19
    5ea2:	8f 96       	adiw	r24, 0x2f	; 47
    5ea4:	fc 01       	movw	r30, r24
    5ea6:	20 81       	ld	r18, Z
    5ea8:	31 81       	ldd	r19, Z+1	; 0x01
    5eaa:	42 81       	ldd	r20, Z+2	; 0x02
    5eac:	53 81       	ldd	r21, Z+3	; 0x03
    5eae:	8f 85       	ldd	r24, Y+15	; 0x0f
    5eb0:	98 89       	ldd	r25, Y+16	; 0x10
    5eb2:	a9 89       	ldd	r26, Y+17	; 0x11
    5eb4:	ba 89       	ldd	r27, Y+18	; 0x12
    5eb6:	82 2b       	or	r24, r18
    5eb8:	93 2b       	or	r25, r19
    5eba:	a4 2b       	or	r26, r20
    5ebc:	b5 2b       	or	r27, r21
    5ebe:	4a 81       	ldd	r20, Y+2	; 0x02
    5ec0:	5b 81       	ldd	r21, Y+3	; 0x03
    5ec2:	9b 01       	movw	r18, r22
    5ec4:	22 0f       	add	r18, r18
    5ec6:	33 1f       	adc	r19, r19
    5ec8:	22 0f       	add	r18, r18
    5eca:	33 1f       	adc	r19, r19
    5ecc:	24 0f       	add	r18, r20
    5ece:	35 1f       	adc	r19, r21
    5ed0:	21 5d       	subi	r18, 0xD1	; 209
    5ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ed4:	f9 01       	movw	r30, r18
    5ed6:	80 83       	st	Z, r24
    5ed8:	91 83       	std	Z+1, r25	; 0x01
    5eda:	a2 83       	std	Z+2, r26	; 0x02
    5edc:	b3 83       	std	Z+3, r27	; 0x03
    5ede:	5b c0       	rjmp	.+182    	; 0x5f96 <xTaskGenericNotifyFromISR+0x1e8>
    5ee0:	8e 85       	ldd	r24, Y+14	; 0x0e
    5ee2:	28 2f       	mov	r18, r24
    5ee4:	30 e0       	ldi	r19, 0x00	; 0
    5ee6:	4a 81       	ldd	r20, Y+2	; 0x02
    5ee8:	5b 81       	ldd	r21, Y+3	; 0x03
    5eea:	c9 01       	movw	r24, r18
    5eec:	88 0f       	add	r24, r24
    5eee:	99 1f       	adc	r25, r25
    5ef0:	88 0f       	add	r24, r24
    5ef2:	99 1f       	adc	r25, r25
    5ef4:	84 0f       	add	r24, r20
    5ef6:	95 1f       	adc	r25, r21
    5ef8:	8f 96       	adiw	r24, 0x2f	; 47
    5efa:	fc 01       	movw	r30, r24
    5efc:	80 81       	ld	r24, Z
    5efe:	91 81       	ldd	r25, Z+1	; 0x01
    5f00:	a2 81       	ldd	r26, Z+2	; 0x02
    5f02:	b3 81       	ldd	r27, Z+3	; 0x03
    5f04:	01 96       	adiw	r24, 0x01	; 1
    5f06:	a1 1d       	adc	r26, r1
    5f08:	b1 1d       	adc	r27, r1
    5f0a:	4a 81       	ldd	r20, Y+2	; 0x02
    5f0c:	5b 81       	ldd	r21, Y+3	; 0x03
    5f0e:	22 0f       	add	r18, r18
    5f10:	33 1f       	adc	r19, r19
    5f12:	22 0f       	add	r18, r18
    5f14:	33 1f       	adc	r19, r19
    5f16:	24 0f       	add	r18, r20
    5f18:	35 1f       	adc	r19, r21
    5f1a:	21 5d       	subi	r18, 0xD1	; 209
    5f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f1e:	f9 01       	movw	r30, r18
    5f20:	80 83       	st	Z, r24
    5f22:	91 83       	std	Z+1, r25	; 0x01
    5f24:	a2 83       	std	Z+2, r26	; 0x02
    5f26:	b3 83       	std	Z+3, r27	; 0x03
    5f28:	36 c0       	rjmp	.+108    	; 0x5f96 <xTaskGenericNotifyFromISR+0x1e8>
    5f2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f2c:	88 2f       	mov	r24, r24
    5f2e:	90 e0       	ldi	r25, 0x00	; 0
    5f30:	2a 81       	ldd	r18, Y+2	; 0x02
    5f32:	3b 81       	ldd	r19, Y+3	; 0x03
    5f34:	88 0f       	add	r24, r24
    5f36:	99 1f       	adc	r25, r25
    5f38:	88 0f       	add	r24, r24
    5f3a:	99 1f       	adc	r25, r25
    5f3c:	82 0f       	add	r24, r18
    5f3e:	93 1f       	adc	r25, r19
    5f40:	9c 01       	movw	r18, r24
    5f42:	21 5d       	subi	r18, 0xD1	; 209
    5f44:	3f 4f       	sbci	r19, 0xFF	; 255
    5f46:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f48:	98 89       	ldd	r25, Y+16	; 0x10
    5f4a:	a9 89       	ldd	r26, Y+17	; 0x11
    5f4c:	ba 89       	ldd	r27, Y+18	; 0x12
    5f4e:	f9 01       	movw	r30, r18
    5f50:	80 83       	st	Z, r24
    5f52:	91 83       	std	Z+1, r25	; 0x01
    5f54:	a2 83       	std	Z+2, r26	; 0x02
    5f56:	b3 83       	std	Z+3, r27	; 0x03
    5f58:	1e c0       	rjmp	.+60     	; 0x5f96 <xTaskGenericNotifyFromISR+0x1e8>
    5f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f5c:	82 30       	cpi	r24, 0x02	; 2
    5f5e:	c1 f0       	breq	.+48     	; 0x5f90 <xTaskGenericNotifyFromISR+0x1e2>
    5f60:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f62:	88 2f       	mov	r24, r24
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	2a 81       	ldd	r18, Y+2	; 0x02
    5f68:	3b 81       	ldd	r19, Y+3	; 0x03
    5f6a:	88 0f       	add	r24, r24
    5f6c:	99 1f       	adc	r25, r25
    5f6e:	88 0f       	add	r24, r24
    5f70:	99 1f       	adc	r25, r25
    5f72:	82 0f       	add	r24, r18
    5f74:	93 1f       	adc	r25, r19
    5f76:	9c 01       	movw	r18, r24
    5f78:	21 5d       	subi	r18, 0xD1	; 209
    5f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f7e:	98 89       	ldd	r25, Y+16	; 0x10
    5f80:	a9 89       	ldd	r26, Y+17	; 0x11
    5f82:	ba 89       	ldd	r27, Y+18	; 0x12
    5f84:	f9 01       	movw	r30, r18
    5f86:	80 83       	st	Z, r24
    5f88:	91 83       	std	Z+1, r25	; 0x01
    5f8a:	a2 83       	std	Z+2, r26	; 0x02
    5f8c:	b3 83       	std	Z+3, r27	; 0x03
    5f8e:	03 c0       	rjmp	.+6      	; 0x5f96 <xTaskGenericNotifyFromISR+0x1e8>
    5f90:	19 82       	std	Y+1, r1	; 0x01
    5f92:	01 c0       	rjmp	.+2      	; 0x5f96 <xTaskGenericNotifyFromISR+0x1e8>
    5f94:	00 00       	nop
    5f96:	8d 81       	ldd	r24, Y+5	; 0x05
    5f98:	81 30       	cpi	r24, 0x01	; 1
    5f9a:	09 f0       	breq	.+2      	; 0x5f9e <xTaskGenericNotifyFromISR+0x1f0>
    5f9c:	15 c1       	rjmp	.+554    	; 0x61c8 <xTaskGenericNotifyFromISR+0x41a>
    5f9e:	80 91 53 14 	lds	r24, 0x1453	; 0x801453 <uxSchedulerSuspended>
    5fa2:	88 23       	and	r24, r24
    5fa4:	09 f0       	breq	.+2      	; 0x5fa8 <xTaskGenericNotifyFromISR+0x1fa>
    5fa6:	bf c0       	rjmp	.+382    	; 0x6126 <xTaskGenericNotifyFromISR+0x378>
    5fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    5faa:	9b 81       	ldd	r25, Y+3	; 0x03
    5fac:	fc 01       	movw	r30, r24
    5fae:	84 85       	ldd	r24, Z+12	; 0x0c
    5fb0:	95 85       	ldd	r25, Z+13	; 0x0d
    5fb2:	9f 83       	std	Y+7, r25	; 0x07
    5fb4:	8e 83       	std	Y+6, r24	; 0x06
    5fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    5fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    5fba:	fc 01       	movw	r30, r24
    5fbc:	86 81       	ldd	r24, Z+6	; 0x06
    5fbe:	97 81       	ldd	r25, Z+7	; 0x07
    5fc0:	2a 81       	ldd	r18, Y+2	; 0x02
    5fc2:	3b 81       	ldd	r19, Y+3	; 0x03
    5fc4:	f9 01       	movw	r30, r18
    5fc6:	20 85       	ldd	r18, Z+8	; 0x08
    5fc8:	31 85       	ldd	r19, Z+9	; 0x09
    5fca:	fc 01       	movw	r30, r24
    5fcc:	37 83       	std	Z+7, r19	; 0x07
    5fce:	26 83       	std	Z+6, r18	; 0x06
    5fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    5fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    5fd4:	fc 01       	movw	r30, r24
    5fd6:	80 85       	ldd	r24, Z+8	; 0x08
    5fd8:	91 85       	ldd	r25, Z+9	; 0x09
    5fda:	2a 81       	ldd	r18, Y+2	; 0x02
    5fdc:	3b 81       	ldd	r19, Y+3	; 0x03
    5fde:	f9 01       	movw	r30, r18
    5fe0:	26 81       	ldd	r18, Z+6	; 0x06
    5fe2:	37 81       	ldd	r19, Z+7	; 0x07
    5fe4:	fc 01       	movw	r30, r24
    5fe6:	35 83       	std	Z+5, r19	; 0x05
    5fe8:	24 83       	std	Z+4, r18	; 0x04
    5fea:	8e 81       	ldd	r24, Y+6	; 0x06
    5fec:	9f 81       	ldd	r25, Y+7	; 0x07
    5fee:	fc 01       	movw	r30, r24
    5ff0:	21 81       	ldd	r18, Z+1	; 0x01
    5ff2:	32 81       	ldd	r19, Z+2	; 0x02
    5ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ff8:	02 96       	adiw	r24, 0x02	; 2
    5ffa:	28 17       	cp	r18, r24
    5ffc:	39 07       	cpc	r19, r25
    5ffe:	51 f4       	brne	.+20     	; 0x6014 <xTaskGenericNotifyFromISR+0x266>
    6000:	8a 81       	ldd	r24, Y+2	; 0x02
    6002:	9b 81       	ldd	r25, Y+3	; 0x03
    6004:	fc 01       	movw	r30, r24
    6006:	20 85       	ldd	r18, Z+8	; 0x08
    6008:	31 85       	ldd	r19, Z+9	; 0x09
    600a:	8e 81       	ldd	r24, Y+6	; 0x06
    600c:	9f 81       	ldd	r25, Y+7	; 0x07
    600e:	fc 01       	movw	r30, r24
    6010:	32 83       	std	Z+2, r19	; 0x02
    6012:	21 83       	std	Z+1, r18	; 0x01
    6014:	8a 81       	ldd	r24, Y+2	; 0x02
    6016:	9b 81       	ldd	r25, Y+3	; 0x03
    6018:	fc 01       	movw	r30, r24
    601a:	15 86       	std	Z+13, r1	; 0x0d
    601c:	14 86       	std	Z+12, r1	; 0x0c
    601e:	8e 81       	ldd	r24, Y+6	; 0x06
    6020:	9f 81       	ldd	r25, Y+7	; 0x07
    6022:	fc 01       	movw	r30, r24
    6024:	80 81       	ld	r24, Z
    6026:	2f ef       	ldi	r18, 0xFF	; 255
    6028:	28 0f       	add	r18, r24
    602a:	8e 81       	ldd	r24, Y+6	; 0x06
    602c:	9f 81       	ldd	r25, Y+7	; 0x07
    602e:	fc 01       	movw	r30, r24
    6030:	20 83       	st	Z, r18
    6032:	8a 81       	ldd	r24, Y+2	; 0x02
    6034:	9b 81       	ldd	r25, Y+3	; 0x03
    6036:	fc 01       	movw	r30, r24
    6038:	92 8d       	ldd	r25, Z+26	; 0x1a
    603a:	80 91 44 14 	lds	r24, 0x1444	; 0x801444 <uxTopReadyPriority>
    603e:	89 17       	cp	r24, r25
    6040:	30 f4       	brcc	.+12     	; 0x604e <xTaskGenericNotifyFromISR+0x2a0>
    6042:	8a 81       	ldd	r24, Y+2	; 0x02
    6044:	9b 81       	ldd	r25, Y+3	; 0x03
    6046:	fc 01       	movw	r30, r24
    6048:	82 8d       	ldd	r24, Z+26	; 0x1a
    604a:	80 93 44 14 	sts	0x1444, r24	; 0x801444 <uxTopReadyPriority>
    604e:	8a 81       	ldd	r24, Y+2	; 0x02
    6050:	9b 81       	ldd	r25, Y+3	; 0x03
    6052:	fc 01       	movw	r30, r24
    6054:	82 8d       	ldd	r24, Z+26	; 0x1a
    6056:	28 2f       	mov	r18, r24
    6058:	30 e0       	ldi	r19, 0x00	; 0
    605a:	4b e0       	ldi	r20, 0x0B	; 11
    605c:	42 9f       	mul	r20, r18
    605e:	c0 01       	movw	r24, r0
    6060:	43 9f       	mul	r20, r19
    6062:	90 0d       	add	r25, r0
    6064:	11 24       	eor	r1, r1
    6066:	8a 56       	subi	r24, 0x6A	; 106
    6068:	9c 4e       	sbci	r25, 0xEC	; 236
    606a:	fc 01       	movw	r30, r24
    606c:	80 81       	ld	r24, Z
    606e:	91 81       	ldd	r25, Z+1	; 0x01
    6070:	99 87       	std	Y+9, r25	; 0x09
    6072:	88 87       	std	Y+8, r24	; 0x08
    6074:	8a 81       	ldd	r24, Y+2	; 0x02
    6076:	9b 81       	ldd	r25, Y+3	; 0x03
    6078:	28 85       	ldd	r18, Y+8	; 0x08
    607a:	39 85       	ldd	r19, Y+9	; 0x09
    607c:	fc 01       	movw	r30, r24
    607e:	37 83       	std	Z+7, r19	; 0x07
    6080:	26 83       	std	Z+6, r18	; 0x06
    6082:	88 85       	ldd	r24, Y+8	; 0x08
    6084:	99 85       	ldd	r25, Y+9	; 0x09
    6086:	fc 01       	movw	r30, r24
    6088:	26 81       	ldd	r18, Z+6	; 0x06
    608a:	37 81       	ldd	r19, Z+7	; 0x07
    608c:	8a 81       	ldd	r24, Y+2	; 0x02
    608e:	9b 81       	ldd	r25, Y+3	; 0x03
    6090:	fc 01       	movw	r30, r24
    6092:	31 87       	std	Z+9, r19	; 0x09
    6094:	20 87       	std	Z+8, r18	; 0x08
    6096:	88 85       	ldd	r24, Y+8	; 0x08
    6098:	99 85       	ldd	r25, Y+9	; 0x09
    609a:	fc 01       	movw	r30, r24
    609c:	86 81       	ldd	r24, Z+6	; 0x06
    609e:	97 81       	ldd	r25, Z+7	; 0x07
    60a0:	2a 81       	ldd	r18, Y+2	; 0x02
    60a2:	3b 81       	ldd	r19, Y+3	; 0x03
    60a4:	2e 5f       	subi	r18, 0xFE	; 254
    60a6:	3f 4f       	sbci	r19, 0xFF	; 255
    60a8:	fc 01       	movw	r30, r24
    60aa:	35 83       	std	Z+5, r19	; 0x05
    60ac:	24 83       	std	Z+4, r18	; 0x04
    60ae:	8a 81       	ldd	r24, Y+2	; 0x02
    60b0:	9b 81       	ldd	r25, Y+3	; 0x03
    60b2:	9c 01       	movw	r18, r24
    60b4:	2e 5f       	subi	r18, 0xFE	; 254
    60b6:	3f 4f       	sbci	r19, 0xFF	; 255
    60b8:	88 85       	ldd	r24, Y+8	; 0x08
    60ba:	99 85       	ldd	r25, Y+9	; 0x09
    60bc:	fc 01       	movw	r30, r24
    60be:	37 83       	std	Z+7, r19	; 0x07
    60c0:	26 83       	std	Z+6, r18	; 0x06
    60c2:	8a 81       	ldd	r24, Y+2	; 0x02
    60c4:	9b 81       	ldd	r25, Y+3	; 0x03
    60c6:	fc 01       	movw	r30, r24
    60c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    60ca:	28 2f       	mov	r18, r24
    60cc:	30 e0       	ldi	r19, 0x00	; 0
    60ce:	4b e0       	ldi	r20, 0x0B	; 11
    60d0:	42 9f       	mul	r20, r18
    60d2:	c0 01       	movw	r24, r0
    60d4:	43 9f       	mul	r20, r19
    60d6:	90 0d       	add	r25, r0
    60d8:	11 24       	eor	r1, r1
    60da:	9c 01       	movw	r18, r24
    60dc:	2b 56       	subi	r18, 0x6B	; 107
    60de:	3c 4e       	sbci	r19, 0xEC	; 236
    60e0:	8a 81       	ldd	r24, Y+2	; 0x02
    60e2:	9b 81       	ldd	r25, Y+3	; 0x03
    60e4:	fc 01       	movw	r30, r24
    60e6:	35 87       	std	Z+13, r19	; 0x0d
    60e8:	24 87       	std	Z+12, r18	; 0x0c
    60ea:	8a 81       	ldd	r24, Y+2	; 0x02
    60ec:	9b 81       	ldd	r25, Y+3	; 0x03
    60ee:	fc 01       	movw	r30, r24
    60f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    60f2:	88 2f       	mov	r24, r24
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	4b e0       	ldi	r20, 0x0B	; 11
    60f8:	48 9f       	mul	r20, r24
    60fa:	90 01       	movw	r18, r0
    60fc:	49 9f       	mul	r20, r25
    60fe:	30 0d       	add	r19, r0
    6100:	11 24       	eor	r1, r1
    6102:	2b 56       	subi	r18, 0x6B	; 107
    6104:	3c 4e       	sbci	r19, 0xEC	; 236
    6106:	f9 01       	movw	r30, r18
    6108:	20 81       	ld	r18, Z
    610a:	41 e0       	ldi	r20, 0x01	; 1
    610c:	42 0f       	add	r20, r18
    610e:	5b e0       	ldi	r21, 0x0B	; 11
    6110:	58 9f       	mul	r21, r24
    6112:	90 01       	movw	r18, r0
    6114:	59 9f       	mul	r21, r25
    6116:	30 0d       	add	r19, r0
    6118:	11 24       	eor	r1, r1
    611a:	c9 01       	movw	r24, r18
    611c:	8b 56       	subi	r24, 0x6B	; 107
    611e:	9c 4e       	sbci	r25, 0xEC	; 236
    6120:	fc 01       	movw	r30, r24
    6122:	40 83       	st	Z, r20
    6124:	39 c0       	rjmp	.+114    	; 0x6198 <xTaskGenericNotifyFromISR+0x3ea>
    6126:	80 91 1e 14 	lds	r24, 0x141E	; 0x80141e <xPendingReadyList+0x1>
    612a:	90 91 1f 14 	lds	r25, 0x141F	; 0x80141f <xPendingReadyList+0x2>
    612e:	9b 87       	std	Y+11, r25	; 0x0b
    6130:	8a 87       	std	Y+10, r24	; 0x0a
    6132:	8a 81       	ldd	r24, Y+2	; 0x02
    6134:	9b 81       	ldd	r25, Y+3	; 0x03
    6136:	2a 85       	ldd	r18, Y+10	; 0x0a
    6138:	3b 85       	ldd	r19, Y+11	; 0x0b
    613a:	fc 01       	movw	r30, r24
    613c:	33 8b       	std	Z+19, r19	; 0x13
    613e:	22 8b       	std	Z+18, r18	; 0x12
    6140:	8a 85       	ldd	r24, Y+10	; 0x0a
    6142:	9b 85       	ldd	r25, Y+11	; 0x0b
    6144:	fc 01       	movw	r30, r24
    6146:	26 81       	ldd	r18, Z+6	; 0x06
    6148:	37 81       	ldd	r19, Z+7	; 0x07
    614a:	8a 81       	ldd	r24, Y+2	; 0x02
    614c:	9b 81       	ldd	r25, Y+3	; 0x03
    614e:	fc 01       	movw	r30, r24
    6150:	35 8b       	std	Z+21, r19	; 0x15
    6152:	24 8b       	std	Z+20, r18	; 0x14
    6154:	8a 85       	ldd	r24, Y+10	; 0x0a
    6156:	9b 85       	ldd	r25, Y+11	; 0x0b
    6158:	fc 01       	movw	r30, r24
    615a:	86 81       	ldd	r24, Z+6	; 0x06
    615c:	97 81       	ldd	r25, Z+7	; 0x07
    615e:	2a 81       	ldd	r18, Y+2	; 0x02
    6160:	3b 81       	ldd	r19, Y+3	; 0x03
    6162:	22 5f       	subi	r18, 0xF2	; 242
    6164:	3f 4f       	sbci	r19, 0xFF	; 255
    6166:	fc 01       	movw	r30, r24
    6168:	35 83       	std	Z+5, r19	; 0x05
    616a:	24 83       	std	Z+4, r18	; 0x04
    616c:	8a 81       	ldd	r24, Y+2	; 0x02
    616e:	9b 81       	ldd	r25, Y+3	; 0x03
    6170:	9c 01       	movw	r18, r24
    6172:	22 5f       	subi	r18, 0xF2	; 242
    6174:	3f 4f       	sbci	r19, 0xFF	; 255
    6176:	8a 85       	ldd	r24, Y+10	; 0x0a
    6178:	9b 85       	ldd	r25, Y+11	; 0x0b
    617a:	fc 01       	movw	r30, r24
    617c:	37 83       	std	Z+7, r19	; 0x07
    617e:	26 83       	std	Z+6, r18	; 0x06
    6180:	8a 81       	ldd	r24, Y+2	; 0x02
    6182:	9b 81       	ldd	r25, Y+3	; 0x03
    6184:	2d e1       	ldi	r18, 0x1D	; 29
    6186:	34 e1       	ldi	r19, 0x14	; 20
    6188:	fc 01       	movw	r30, r24
    618a:	31 8f       	std	Z+25, r19	; 0x19
    618c:	20 8f       	std	Z+24, r18	; 0x18
    618e:	80 91 1d 14 	lds	r24, 0x141D	; 0x80141d <xPendingReadyList>
    6192:	8f 5f       	subi	r24, 0xFF	; 255
    6194:	80 93 1d 14 	sts	0x141D, r24	; 0x80141d <xPendingReadyList>
    6198:	8a 81       	ldd	r24, Y+2	; 0x02
    619a:	9b 81       	ldd	r25, Y+3	; 0x03
    619c:	fc 01       	movw	r30, r24
    619e:	22 8d       	ldd	r18, Z+26	; 0x1a
    61a0:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    61a4:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    61a8:	fc 01       	movw	r30, r24
    61aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    61ac:	82 17       	cp	r24, r18
    61ae:	60 f4       	brcc	.+24     	; 0x61c8 <xTaskGenericNotifyFromISR+0x41a>
    61b0:	8e 89       	ldd	r24, Y+22	; 0x16
    61b2:	9f 89       	ldd	r25, Y+23	; 0x17
    61b4:	89 2b       	or	r24, r25
    61b6:	29 f0       	breq	.+10     	; 0x61c2 <xTaskGenericNotifyFromISR+0x414>
    61b8:	8e 89       	ldd	r24, Y+22	; 0x16
    61ba:	9f 89       	ldd	r25, Y+23	; 0x17
    61bc:	21 e0       	ldi	r18, 0x01	; 1
    61be:	fc 01       	movw	r30, r24
    61c0:	20 83       	st	Z, r18
    61c2:	81 e0       	ldi	r24, 0x01	; 1
    61c4:	80 93 4a 14 	sts	0x144A, r24	; 0x80144a <xYieldPending>
    61c8:	89 81       	ldd	r24, Y+1	; 0x01
    61ca:	67 96       	adiw	r28, 0x17	; 23
    61cc:	0f b6       	in	r0, 0x3f	; 63
    61ce:	f8 94       	cli
    61d0:	de bf       	out	0x3e, r29	; 62
    61d2:	0f be       	out	0x3f, r0	; 63
    61d4:	cd bf       	out	0x3d, r28	; 61
    61d6:	df 91       	pop	r29
    61d8:	cf 91       	pop	r28
    61da:	0f 91       	pop	r16
    61dc:	ff 90       	pop	r15
    61de:	ef 90       	pop	r14
    61e0:	df 90       	pop	r13
    61e2:	cf 90       	pop	r12
    61e4:	08 95       	ret

000061e6 <xTaskGenericNotifyStateClear>:
    61e6:	cf 93       	push	r28
    61e8:	df 93       	push	r29
    61ea:	00 d0       	rcall	.+0      	; 0x61ec <xTaskGenericNotifyStateClear+0x6>
    61ec:	00 d0       	rcall	.+0      	; 0x61ee <xTaskGenericNotifyStateClear+0x8>
    61ee:	cd b7       	in	r28, 0x3d	; 61
    61f0:	de b7       	in	r29, 0x3e	; 62
    61f2:	9d 83       	std	Y+5, r25	; 0x05
    61f4:	8c 83       	std	Y+4, r24	; 0x04
    61f6:	6e 83       	std	Y+6, r22	; 0x06
    61f8:	8c 81       	ldd	r24, Y+4	; 0x04
    61fa:	9d 81       	ldd	r25, Y+5	; 0x05
    61fc:	89 2b       	or	r24, r25
    61fe:	29 f4       	brne	.+10     	; 0x620a <xTaskGenericNotifyStateClear+0x24>
    6200:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    6204:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    6208:	02 c0       	rjmp	.+4      	; 0x620e <xTaskGenericNotifyStateClear+0x28>
    620a:	8c 81       	ldd	r24, Y+4	; 0x04
    620c:	9d 81       	ldd	r25, Y+5	; 0x05
    620e:	9b 83       	std	Y+3, r25	; 0x03
    6210:	8a 83       	std	Y+2, r24	; 0x02
    6212:	0f b6       	in	r0, 0x3f	; 63
    6214:	f8 94       	cli
    6216:	0f 92       	push	r0
    6218:	8e 81       	ldd	r24, Y+6	; 0x06
    621a:	88 2f       	mov	r24, r24
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	2a 81       	ldd	r18, Y+2	; 0x02
    6220:	3b 81       	ldd	r19, Y+3	; 0x03
    6222:	82 0f       	add	r24, r18
    6224:	93 1f       	adc	r25, r19
    6226:	c3 96       	adiw	r24, 0x33	; 51
    6228:	fc 01       	movw	r30, r24
    622a:	80 81       	ld	r24, Z
    622c:	82 30       	cpi	r24, 0x02	; 2
    622e:	69 f4       	brne	.+26     	; 0x624a <xTaskGenericNotifyStateClear+0x64>
    6230:	8e 81       	ldd	r24, Y+6	; 0x06
    6232:	88 2f       	mov	r24, r24
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	2a 81       	ldd	r18, Y+2	; 0x02
    6238:	3b 81       	ldd	r19, Y+3	; 0x03
    623a:	82 0f       	add	r24, r18
    623c:	93 1f       	adc	r25, r19
    623e:	c3 96       	adiw	r24, 0x33	; 51
    6240:	fc 01       	movw	r30, r24
    6242:	10 82       	st	Z, r1
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	89 83       	std	Y+1, r24	; 0x01
    6248:	01 c0       	rjmp	.+2      	; 0x624c <xTaskGenericNotifyStateClear+0x66>
    624a:	19 82       	std	Y+1, r1	; 0x01
    624c:	0f 90       	pop	r0
    624e:	0f be       	out	0x3f, r0	; 63
    6250:	89 81       	ldd	r24, Y+1	; 0x01
    6252:	26 96       	adiw	r28, 0x06	; 6
    6254:	0f b6       	in	r0, 0x3f	; 63
    6256:	f8 94       	cli
    6258:	de bf       	out	0x3e, r29	; 62
    625a:	0f be       	out	0x3f, r0	; 63
    625c:	cd bf       	out	0x3d, r28	; 61
    625e:	df 91       	pop	r29
    6260:	cf 91       	pop	r28
    6262:	08 95       	ret

00006264 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    6264:	cf 93       	push	r28
    6266:	df 93       	push	r29
    6268:	cd b7       	in	r28, 0x3d	; 61
    626a:	de b7       	in	r29, 0x3e	; 62
    626c:	2f 97       	sbiw	r28, 0x0f	; 15
    626e:	0f b6       	in	r0, 0x3f	; 63
    6270:	f8 94       	cli
    6272:	de bf       	out	0x3e, r29	; 62
    6274:	0f be       	out	0x3f, r0	; 63
    6276:	cd bf       	out	0x3d, r28	; 61
    6278:	6b 87       	std	Y+11, r22	; 0x0b
    627a:	7c 87       	std	Y+12, r23	; 0x0c
    627c:	8d 87       	std	Y+13, r24	; 0x0d
    627e:	9e 87       	std	Y+14, r25	; 0x0e
    6280:	4f 87       	std	Y+15, r20	; 0x0f
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    6282:	80 91 40 14 	lds	r24, 0x1440	; 0x801440 <xTickCount>
    6286:	90 91 41 14 	lds	r25, 0x1441	; 0x801441 <xTickCount+0x1>
    628a:	a0 91 42 14 	lds	r26, 0x1442	; 0x801442 <xTickCount+0x2>
    628e:	b0 91 43 14 	lds	r27, 0x1443	; 0x801443 <xTickCount+0x3>
    6292:	89 83       	std	Y+1, r24	; 0x01
    6294:	9a 83       	std	Y+2, r25	; 0x02
    6296:	ab 83       	std	Y+3, r26	; 0x03
    6298:	bc 83       	std	Y+4, r27	; 0x04
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    629a:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    629e:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    62a2:	02 96       	adiw	r24, 0x02	; 2
    62a4:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    62a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    62aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    62ac:	ad 85       	ldd	r26, Y+13	; 0x0d
    62ae:	be 85       	ldd	r27, Y+14	; 0x0e
    62b0:	8f 3f       	cpi	r24, 0xFF	; 255
    62b2:	9f 4f       	sbci	r25, 0xFF	; 255
    62b4:	af 4f       	sbci	r26, 0xFF	; 255
    62b6:	bf 4f       	sbci	r27, 0xFF	; 255
    62b8:	09 f0       	breq	.+2      	; 0x62bc <prvAddCurrentTaskToDelayedList+0x58>
    62ba:	49 c0       	rjmp	.+146    	; 0x634e <prvAddCurrentTaskToDelayedList+0xea>
    62bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    62be:	88 23       	and	r24, r24
    62c0:	09 f4       	brne	.+2      	; 0x62c4 <prvAddCurrentTaskToDelayedList+0x60>
    62c2:	45 c0       	rjmp	.+138    	; 0x634e <prvAddCurrentTaskToDelayedList+0xea>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    62c4:	80 91 35 14 	lds	r24, 0x1435	; 0x801435 <xSuspendedTaskList+0x1>
    62c8:	90 91 36 14 	lds	r25, 0x1436	; 0x801436 <xSuspendedTaskList+0x2>
    62cc:	9e 83       	std	Y+6, r25	; 0x06
    62ce:	8d 83       	std	Y+5, r24	; 0x05
    62d0:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    62d4:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    62d8:	2d 81       	ldd	r18, Y+5	; 0x05
    62da:	3e 81       	ldd	r19, Y+6	; 0x06
    62dc:	fc 01       	movw	r30, r24
    62de:	37 83       	std	Z+7, r19	; 0x07
    62e0:	26 83       	std	Z+6, r18	; 0x06
    62e2:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    62e6:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    62ea:	2d 81       	ldd	r18, Y+5	; 0x05
    62ec:	3e 81       	ldd	r19, Y+6	; 0x06
    62ee:	f9 01       	movw	r30, r18
    62f0:	26 81       	ldd	r18, Z+6	; 0x06
    62f2:	37 81       	ldd	r19, Z+7	; 0x07
    62f4:	fc 01       	movw	r30, r24
    62f6:	31 87       	std	Z+9, r19	; 0x09
    62f8:	20 87       	std	Z+8, r18	; 0x08
    62fa:	8d 81       	ldd	r24, Y+5	; 0x05
    62fc:	9e 81       	ldd	r25, Y+6	; 0x06
    62fe:	fc 01       	movw	r30, r24
    6300:	86 81       	ldd	r24, Z+6	; 0x06
    6302:	97 81       	ldd	r25, Z+7	; 0x07
    6304:	20 91 93 13 	lds	r18, 0x1393	; 0x801393 <pxCurrentTCB>
    6308:	30 91 94 13 	lds	r19, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    630c:	2e 5f       	subi	r18, 0xFE	; 254
    630e:	3f 4f       	sbci	r19, 0xFF	; 255
    6310:	fc 01       	movw	r30, r24
    6312:	35 83       	std	Z+5, r19	; 0x05
    6314:	24 83       	std	Z+4, r18	; 0x04
    6316:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    631a:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    631e:	9c 01       	movw	r18, r24
    6320:	2e 5f       	subi	r18, 0xFE	; 254
    6322:	3f 4f       	sbci	r19, 0xFF	; 255
    6324:	8d 81       	ldd	r24, Y+5	; 0x05
    6326:	9e 81       	ldd	r25, Y+6	; 0x06
    6328:	fc 01       	movw	r30, r24
    632a:	37 83       	std	Z+7, r19	; 0x07
    632c:	26 83       	std	Z+6, r18	; 0x06
    632e:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    6332:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    6336:	24 e3       	ldi	r18, 0x34	; 52
    6338:	34 e1       	ldi	r19, 0x14	; 20
    633a:	fc 01       	movw	r30, r24
    633c:	35 87       	std	Z+13, r19	; 0x0d
    633e:	24 87       	std	Z+12, r18	; 0x0c
    6340:	80 91 34 14 	lds	r24, 0x1434	; 0x801434 <xSuspendedTaskList>
    6344:	8f 5f       	subi	r24, 0xFF	; 255
    6346:	80 93 34 14 	sts	0x1434, r24	; 0x801434 <xSuspendedTaskList>
    634a:	00 00       	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    634c:	64 c0       	rjmp	.+200    	; 0x6416 <prvAddCurrentTaskToDelayedList+0x1b2>
            else
            {
                /* Calculate the time at which the task should be woken if the event
                 * does not occur.  This may overflow but this doesn't matter, the
                 * kernel will manage it correctly. */
                xTimeToWake = xConstTickCount + xTicksToWait;
    634e:	29 81       	ldd	r18, Y+1	; 0x01
    6350:	3a 81       	ldd	r19, Y+2	; 0x02
    6352:	4b 81       	ldd	r20, Y+3	; 0x03
    6354:	5c 81       	ldd	r21, Y+4	; 0x04
    6356:	8b 85       	ldd	r24, Y+11	; 0x0b
    6358:	9c 85       	ldd	r25, Y+12	; 0x0c
    635a:	ad 85       	ldd	r26, Y+13	; 0x0d
    635c:	be 85       	ldd	r27, Y+14	; 0x0e
    635e:	82 0f       	add	r24, r18
    6360:	93 1f       	adc	r25, r19
    6362:	a4 1f       	adc	r26, r20
    6364:	b5 1f       	adc	r27, r21
    6366:	8f 83       	std	Y+7, r24	; 0x07
    6368:	98 87       	std	Y+8, r25	; 0x08
    636a:	a9 87       	std	Y+9, r26	; 0x09
    636c:	ba 87       	std	Y+10, r27	; 0x0a

                /* The list item will be inserted in wake time order. */
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    636e:	20 91 93 13 	lds	r18, 0x1393	; 0x801393 <pxCurrentTCB>
    6372:	30 91 94 13 	lds	r19, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    6376:	8f 81       	ldd	r24, Y+7	; 0x07
    6378:	98 85       	ldd	r25, Y+8	; 0x08
    637a:	a9 85       	ldd	r26, Y+9	; 0x09
    637c:	ba 85       	ldd	r27, Y+10	; 0x0a
    637e:	f9 01       	movw	r30, r18
    6380:	82 83       	std	Z+2, r24	; 0x02
    6382:	93 83       	std	Z+3, r25	; 0x03
    6384:	a4 83       	std	Z+4, r26	; 0x04
    6386:	b5 83       	std	Z+5, r27	; 0x05

                if( xTimeToWake < xConstTickCount )
    6388:	2f 81       	ldd	r18, Y+7	; 0x07
    638a:	38 85       	ldd	r19, Y+8	; 0x08
    638c:	49 85       	ldd	r20, Y+9	; 0x09
    638e:	5a 85       	ldd	r21, Y+10	; 0x0a
    6390:	89 81       	ldd	r24, Y+1	; 0x01
    6392:	9a 81       	ldd	r25, Y+2	; 0x02
    6394:	ab 81       	ldd	r26, Y+3	; 0x03
    6396:	bc 81       	ldd	r27, Y+4	; 0x04
    6398:	28 17       	cp	r18, r24
    639a:	39 07       	cpc	r19, r25
    639c:	4a 07       	cpc	r20, r26
    639e:	5b 07       	cpc	r21, r27
    63a0:	78 f4       	brcc	.+30     	; 0x63c0 <prvAddCurrentTaskToDelayedList+0x15c>
                {
                    /* Wake time has overflowed.  Place this item in the overflow
                     * list. */
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    63a2:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    63a6:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    63aa:	9c 01       	movw	r18, r24
    63ac:	2e 5f       	subi	r18, 0xFE	; 254
    63ae:	3f 4f       	sbci	r19, 0xFF	; 255
    63b0:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <pxOverflowDelayedTaskList>
    63b4:	90 91 1c 14 	lds	r25, 0x141C	; 0x80141c <pxOverflowDelayedTaskList+0x1>
    63b8:	b9 01       	movw	r22, r18
    63ba:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vListInsert>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    63be:	2b c0       	rjmp	.+86     	; 0x6416 <prvAddCurrentTaskToDelayedList+0x1b2>
                }
                else
                {
                    /* The wake time has not overflowed, so the current block list
                     * is used. */
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    63c0:	80 91 93 13 	lds	r24, 0x1393	; 0x801393 <pxCurrentTCB>
    63c4:	90 91 94 13 	lds	r25, 0x1394	; 0x801394 <pxCurrentTCB+0x1>
    63c8:	9c 01       	movw	r18, r24
    63ca:	2e 5f       	subi	r18, 0xFE	; 254
    63cc:	3f 4f       	sbci	r19, 0xFF	; 255
    63ce:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <pxDelayedTaskList>
    63d2:	90 91 1a 14 	lds	r25, 0x141A	; 0x80141a <pxDelayedTaskList+0x1>
    63d6:	b9 01       	movw	r22, r18
    63d8:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vListInsert>

                    /* If the task entering the blocked state was placed at the
                     * head of the list of blocked tasks then xNextTaskUnblockTime
                     * needs to be updated too. */
                    if( xTimeToWake < xNextTaskUnblockTime )
    63dc:	80 91 4d 14 	lds	r24, 0x144D	; 0x80144d <xNextTaskUnblockTime>
    63e0:	90 91 4e 14 	lds	r25, 0x144E	; 0x80144e <xNextTaskUnblockTime+0x1>
    63e4:	a0 91 4f 14 	lds	r26, 0x144F	; 0x80144f <xNextTaskUnblockTime+0x2>
    63e8:	b0 91 50 14 	lds	r27, 0x1450	; 0x801450 <xNextTaskUnblockTime+0x3>
    63ec:	2f 81       	ldd	r18, Y+7	; 0x07
    63ee:	38 85       	ldd	r19, Y+8	; 0x08
    63f0:	49 85       	ldd	r20, Y+9	; 0x09
    63f2:	5a 85       	ldd	r21, Y+10	; 0x0a
    63f4:	28 17       	cp	r18, r24
    63f6:	39 07       	cpc	r19, r25
    63f8:	4a 07       	cpc	r20, r26
    63fa:	5b 07       	cpc	r21, r27
    63fc:	60 f4       	brcc	.+24     	; 0x6416 <prvAddCurrentTaskToDelayedList+0x1b2>
                    {
                        xNextTaskUnblockTime = xTimeToWake;
    63fe:	8f 81       	ldd	r24, Y+7	; 0x07
    6400:	98 85       	ldd	r25, Y+8	; 0x08
    6402:	a9 85       	ldd	r26, Y+9	; 0x09
    6404:	ba 85       	ldd	r27, Y+10	; 0x0a
    6406:	80 93 4d 14 	sts	0x144D, r24	; 0x80144d <xNextTaskUnblockTime>
    640a:	90 93 4e 14 	sts	0x144E, r25	; 0x80144e <xNextTaskUnblockTime+0x1>
    640e:	a0 93 4f 14 	sts	0x144F, r26	; 0x80144f <xNextTaskUnblockTime+0x2>
    6412:	b0 93 50 14 	sts	0x1450, r27	; 0x801450 <xNextTaskUnblockTime+0x3>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
    6416:	00 00       	nop
    6418:	2f 96       	adiw	r28, 0x0f	; 15
    641a:	0f b6       	in	r0, 0x3f	; 63
    641c:	f8 94       	cli
    641e:	de bf       	out	0x3e, r29	; 62
    6420:	0f be       	out	0x3f, r0	; 63
    6422:	cd bf       	out	0x3d, r28	; 61
    6424:	df 91       	pop	r29
    6426:	cf 91       	pop	r28
    6428:	08 95       	ret

0000642a <xTimerCreateTimerTask>:
    642a:	ef 92       	push	r14
    642c:	ff 92       	push	r15
    642e:	0f 93       	push	r16
    6430:	cf 93       	push	r28
    6432:	df 93       	push	r29
    6434:	1f 92       	push	r1
    6436:	cd b7       	in	r28, 0x3d	; 61
    6438:	de b7       	in	r29, 0x3e	; 62
    643a:	19 82       	std	Y+1, r1	; 0x01
    643c:	af d4       	rcall	.+2398   	; 0x6d9c <prvCheckForValidListAndQueue>
    643e:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <xTimerQueue>
    6442:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <xTimerQueue+0x1>
    6446:	89 2b       	or	r24, r25
    6448:	91 f0       	breq	.+36     	; 0x646e <xTimerCreateTimerTask+0x44>
    644a:	0f 2e       	mov	r0, r31
    644c:	f0 e7       	ldi	r31, 0x70	; 112
    644e:	ef 2e       	mov	r14, r31
    6450:	f4 e1       	ldi	r31, 0x14	; 20
    6452:	ff 2e       	mov	r15, r31
    6454:	f0 2d       	mov	r31, r0
    6456:	03 e0       	ldi	r16, 0x03	; 3
    6458:	20 e0       	ldi	r18, 0x00	; 0
    645a:	30 e0       	ldi	r19, 0x00	; 0
    645c:	40 ec       	ldi	r20, 0xC0	; 192
    645e:	50 e0       	ldi	r21, 0x00	; 0
    6460:	69 e2       	ldi	r22, 0x29	; 41
    6462:	76 e0       	ldi	r23, 0x06	; 6
    6464:	8f e8       	ldi	r24, 0x8F	; 143
    6466:	90 e0       	ldi	r25, 0x00	; 0
    6468:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xTaskCreate>
    646c:	89 83       	std	Y+1, r24	; 0x01
    646e:	89 81       	ldd	r24, Y+1	; 0x01
    6470:	0f 90       	pop	r0
    6472:	df 91       	pop	r29
    6474:	cf 91       	pop	r28
    6476:	0f 91       	pop	r16
    6478:	ff 90       	pop	r15
    647a:	ef 90       	pop	r14
    647c:	08 95       	ret

0000647e <xTimerGenericCommand>:
    647e:	cf 92       	push	r12
    6480:	df 92       	push	r13
    6482:	ef 92       	push	r14
    6484:	ff 92       	push	r15
    6486:	0f 93       	push	r16
    6488:	1f 93       	push	r17
    648a:	cf 93       	push	r28
    648c:	df 93       	push	r29
    648e:	cd b7       	in	r28, 0x3d	; 61
    6490:	de b7       	in	r29, 0x3e	; 62
    6492:	65 97       	sbiw	r28, 0x15	; 21
    6494:	0f b6       	in	r0, 0x3f	; 63
    6496:	f8 94       	cli
    6498:	de bf       	out	0x3e, r29	; 62
    649a:	0f be       	out	0x3f, r0	; 63
    649c:	cd bf       	out	0x3d, r28	; 61
    649e:	9a 87       	std	Y+10, r25	; 0x0a
    64a0:	89 87       	std	Y+9, r24	; 0x09
    64a2:	6b 87       	std	Y+11, r22	; 0x0b
    64a4:	2c 87       	std	Y+12, r18	; 0x0c
    64a6:	3d 87       	std	Y+13, r19	; 0x0d
    64a8:	4e 87       	std	Y+14, r20	; 0x0e
    64aa:	5f 87       	std	Y+15, r21	; 0x0f
    64ac:	19 8b       	std	Y+17, r17	; 0x11
    64ae:	08 8b       	std	Y+16, r16	; 0x10
    64b0:	ca 8a       	std	Y+18, r12	; 0x12
    64b2:	db 8a       	std	Y+19, r13	; 0x13
    64b4:	ec 8a       	std	Y+20, r14	; 0x14
    64b6:	fd 8a       	std	Y+21, r15	; 0x15
    64b8:	19 82       	std	Y+1, r1	; 0x01
    64ba:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <xTimerQueue>
    64be:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <xTimerQueue+0x1>
    64c2:	89 2b       	or	r24, r25
    64c4:	09 f4       	brne	.+2      	; 0x64c8 <xTimerGenericCommand+0x4a>
    64c6:	44 c0       	rjmp	.+136    	; 0x6550 <xTimerGenericCommand+0xd2>
    64c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    64ca:	8a 83       	std	Y+2, r24	; 0x02
    64cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    64ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    64d0:	ae 85       	ldd	r26, Y+14	; 0x0e
    64d2:	bf 85       	ldd	r27, Y+15	; 0x0f
    64d4:	8b 83       	std	Y+3, r24	; 0x03
    64d6:	9c 83       	std	Y+4, r25	; 0x04
    64d8:	ad 83       	std	Y+5, r26	; 0x05
    64da:	be 83       	std	Y+6, r27	; 0x06
    64dc:	89 85       	ldd	r24, Y+9	; 0x09
    64de:	9a 85       	ldd	r25, Y+10	; 0x0a
    64e0:	98 87       	std	Y+8, r25	; 0x08
    64e2:	8f 83       	std	Y+7, r24	; 0x07
    64e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    64e6:	86 30       	cpi	r24, 0x06	; 6
    64e8:	34 f5       	brge	.+76     	; 0x6536 <xTimerGenericCommand+0xb8>
    64ea:	0e 94 82 28 	call	0x5104	; 0x5104 <xTaskGetSchedulerState>
    64ee:	82 30       	cpi	r24, 0x02	; 2
    64f0:	99 f4       	brne	.+38     	; 0x6518 <xTimerGenericCommand+0x9a>
    64f2:	e0 91 6e 14 	lds	r30, 0x146E	; 0x80146e <xTimerQueue>
    64f6:	f0 91 6f 14 	lds	r31, 0x146F	; 0x80146f <xTimerQueue+0x1>
    64fa:	8a 89       	ldd	r24, Y+18	; 0x12
    64fc:	9b 89       	ldd	r25, Y+19	; 0x13
    64fe:	ac 89       	ldd	r26, Y+20	; 0x14
    6500:	bd 89       	ldd	r27, Y+21	; 0x15
    6502:	be 01       	movw	r22, r28
    6504:	6e 5f       	subi	r22, 0xFE	; 254
    6506:	7f 4f       	sbci	r23, 0xFF	; 255
    6508:	00 e0       	ldi	r16, 0x00	; 0
    650a:	9c 01       	movw	r18, r24
    650c:	ad 01       	movw	r20, r26
    650e:	cf 01       	movw	r24, r30
    6510:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
    6514:	89 83       	std	Y+1, r24	; 0x01
    6516:	1c c0       	rjmp	.+56     	; 0x6550 <xTimerGenericCommand+0xd2>
    6518:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <xTimerQueue>
    651c:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <xTimerQueue+0x1>
    6520:	be 01       	movw	r22, r28
    6522:	6e 5f       	subi	r22, 0xFE	; 254
    6524:	7f 4f       	sbci	r23, 0xFF	; 255
    6526:	00 e0       	ldi	r16, 0x00	; 0
    6528:	20 e0       	ldi	r18, 0x00	; 0
    652a:	30 e0       	ldi	r19, 0x00	; 0
    652c:	a9 01       	movw	r20, r18
    652e:	0e 94 4d 11 	call	0x229a	; 0x229a <xQueueGenericSend>
    6532:	89 83       	std	Y+1, r24	; 0x01
    6534:	0d c0       	rjmp	.+26     	; 0x6550 <xTimerGenericCommand+0xd2>
    6536:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <xTimerQueue>
    653a:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <xTimerQueue+0x1>
    653e:	48 89       	ldd	r20, Y+16	; 0x10
    6540:	59 89       	ldd	r21, Y+17	; 0x11
    6542:	be 01       	movw	r22, r28
    6544:	6e 5f       	subi	r22, 0xFE	; 254
    6546:	7f 4f       	sbci	r23, 0xFF	; 255
    6548:	20 e0       	ldi	r18, 0x00	; 0
    654a:	0e 94 03 12 	call	0x2406	; 0x2406 <xQueueGenericSendFromISR>
    654e:	89 83       	std	Y+1, r24	; 0x01
    6550:	89 81       	ldd	r24, Y+1	; 0x01
    6552:	65 96       	adiw	r28, 0x15	; 21
    6554:	0f b6       	in	r0, 0x3f	; 63
    6556:	f8 94       	cli
    6558:	de bf       	out	0x3e, r29	; 62
    655a:	0f be       	out	0x3f, r0	; 63
    655c:	cd bf       	out	0x3d, r28	; 61
    655e:	df 91       	pop	r29
    6560:	cf 91       	pop	r28
    6562:	1f 91       	pop	r17
    6564:	0f 91       	pop	r16
    6566:	ff 90       	pop	r15
    6568:	ef 90       	pop	r14
    656a:	df 90       	pop	r13
    656c:	cf 90       	pop	r12
    656e:	08 95       	ret

00006570 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    6570:	cf 92       	push	r12
    6572:	df 92       	push	r13
    6574:	ef 92       	push	r14
    6576:	ff 92       	push	r15
    6578:	0f 93       	push	r16
    657a:	1f 93       	push	r17
    657c:	cf 93       	push	r28
    657e:	df 93       	push	r29
    6580:	cd b7       	in	r28, 0x3d	; 61
    6582:	de b7       	in	r29, 0x3e	; 62
    6584:	2b 97       	sbiw	r28, 0x0b	; 11
    6586:	0f b6       	in	r0, 0x3f	; 63
    6588:	f8 94       	cli
    658a:	de bf       	out	0x3e, r29	; 62
    658c:	0f be       	out	0x3f, r0	; 63
    658e:	cd bf       	out	0x3d, r28	; 61
    6590:	6c 83       	std	Y+4, r22	; 0x04
    6592:	7d 83       	std	Y+5, r23	; 0x05
    6594:	8e 83       	std	Y+6, r24	; 0x06
    6596:	9f 83       	std	Y+7, r25	; 0x07
    6598:	28 87       	std	Y+8, r18	; 0x08
    659a:	39 87       	std	Y+9, r19	; 0x09
    659c:	4a 87       	std	Y+10, r20	; 0x0a
    659e:	5b 87       	std	Y+11, r21	; 0x0b
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    65a0:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <pxCurrentTimerList>
    65a4:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <pxCurrentTimerList+0x1>
    65a8:	fc 01       	movw	r30, r24
    65aa:	87 81       	ldd	r24, Z+7	; 0x07
    65ac:	90 85       	ldd	r25, Z+8	; 0x08
    65ae:	fc 01       	movw	r30, r24
    65b0:	80 85       	ldd	r24, Z+8	; 0x08
    65b2:	91 85       	ldd	r25, Z+9	; 0x09
    65b4:	9a 83       	std	Y+2, r25	; 0x02
    65b6:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    65b8:	89 81       	ldd	r24, Y+1	; 0x01
    65ba:	9a 81       	ldd	r25, Y+2	; 0x02
    65bc:	02 96       	adiw	r24, 0x02	; 2
    65be:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    65c2:	89 81       	ldd	r24, Y+1	; 0x01
    65c4:	9a 81       	ldd	r25, Y+2	; 0x02
    65c6:	fc 01       	movw	r30, r24
    65c8:	86 89       	ldd	r24, Z+22	; 0x16
    65ca:	88 2f       	mov	r24, r24
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	84 70       	andi	r24, 0x04	; 4
    65d0:	99 27       	eor	r25, r25
    65d2:	89 2b       	or	r24, r25
    65d4:	a9 f1       	breq	.+106    	; 0x6640 <prvProcessExpiredTimer+0xd0>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    65d6:	89 81       	ldd	r24, Y+1	; 0x01
    65d8:	9a 81       	ldd	r25, Y+2	; 0x02
    65da:	fc 01       	movw	r30, r24
    65dc:	26 85       	ldd	r18, Z+14	; 0x0e
    65de:	37 85       	ldd	r19, Z+15	; 0x0f
    65e0:	40 89       	ldd	r20, Z+16	; 0x10
    65e2:	51 89       	ldd	r21, Z+17	; 0x11
    65e4:	8c 81       	ldd	r24, Y+4	; 0x04
    65e6:	9d 81       	ldd	r25, Y+5	; 0x05
    65e8:	ae 81       	ldd	r26, Y+6	; 0x06
    65ea:	bf 81       	ldd	r27, Y+7	; 0x07
    65ec:	82 0f       	add	r24, r18
    65ee:	93 1f       	adc	r25, r19
    65f0:	a4 1f       	adc	r26, r20
    65f2:	b5 1f       	adc	r27, r21
    65f4:	ec 80       	ldd	r14, Y+4	; 0x04
    65f6:	fd 80       	ldd	r15, Y+5	; 0x05
    65f8:	0e 81       	ldd	r16, Y+6	; 0x06
    65fa:	1f 81       	ldd	r17, Y+7	; 0x07
    65fc:	28 85       	ldd	r18, Y+8	; 0x08
    65fe:	39 85       	ldd	r19, Y+9	; 0x09
    6600:	4a 85       	ldd	r20, Y+10	; 0x0a
    6602:	5b 85       	ldd	r21, Y+11	; 0x0b
    6604:	e9 81       	ldd	r30, Y+1	; 0x01
    6606:	fa 81       	ldd	r31, Y+2	; 0x02
    6608:	67 01       	movw	r12, r14
    660a:	78 01       	movw	r14, r16
    660c:	89 01       	movw	r16, r18
    660e:	9a 01       	movw	r18, r20
    6610:	ac 01       	movw	r20, r24
    6612:	bd 01       	movw	r22, r26
    6614:	cf 01       	movw	r24, r30
    6616:	3e d1       	rcall	.+636    	; 0x6894 <prvInsertTimerInActiveList>
    6618:	88 23       	and	r24, r24
    661a:	e1 f0       	breq	.+56     	; 0x6654 <prvProcessExpiredTimer+0xe4>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    661c:	8c 81       	ldd	r24, Y+4	; 0x04
    661e:	9d 81       	ldd	r25, Y+5	; 0x05
    6620:	ae 81       	ldd	r26, Y+6	; 0x06
    6622:	bf 81       	ldd	r27, Y+7	; 0x07
    6624:	e9 81       	ldd	r30, Y+1	; 0x01
    6626:	fa 81       	ldd	r31, Y+2	; 0x02
    6628:	c1 2c       	mov	r12, r1
    662a:	d1 2c       	mov	r13, r1
    662c:	76 01       	movw	r14, r12
    662e:	00 e0       	ldi	r16, 0x00	; 0
    6630:	10 e0       	ldi	r17, 0x00	; 0
    6632:	9c 01       	movw	r18, r24
    6634:	ad 01       	movw	r20, r26
    6636:	60 e0       	ldi	r22, 0x00	; 0
    6638:	cf 01       	movw	r24, r30
    663a:	21 df       	rcall	.-446    	; 0x647e <xTimerGenericCommand>
    663c:	8b 83       	std	Y+3, r24	; 0x03
    663e:	0a c0       	rjmp	.+20     	; 0x6654 <prvProcessExpiredTimer+0xe4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    6640:	89 81       	ldd	r24, Y+1	; 0x01
    6642:	9a 81       	ldd	r25, Y+2	; 0x02
    6644:	fc 01       	movw	r30, r24
    6646:	86 89       	ldd	r24, Z+22	; 0x16
    6648:	28 2f       	mov	r18, r24
    664a:	2e 7f       	andi	r18, 0xFE	; 254
    664c:	89 81       	ldd	r24, Y+1	; 0x01
    664e:	9a 81       	ldd	r25, Y+2	; 0x02
    6650:	fc 01       	movw	r30, r24
    6652:	26 8b       	std	Z+22, r18	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6654:	89 81       	ldd	r24, Y+1	; 0x01
    6656:	9a 81       	ldd	r25, Y+2	; 0x02
    6658:	fc 01       	movw	r30, r24
    665a:	24 89       	ldd	r18, Z+20	; 0x14
    665c:	35 89       	ldd	r19, Z+21	; 0x15
    665e:	89 81       	ldd	r24, Y+1	; 0x01
    6660:	9a 81       	ldd	r25, Y+2	; 0x02
    6662:	f9 01       	movw	r30, r18
    6664:	19 95       	eicall
    }
    6666:	00 00       	nop
    6668:	2b 96       	adiw	r28, 0x0b	; 11
    666a:	0f b6       	in	r0, 0x3f	; 63
    666c:	f8 94       	cli
    666e:	de bf       	out	0x3e, r29	; 62
    6670:	0f be       	out	0x3f, r0	; 63
    6672:	cd bf       	out	0x3d, r28	; 61
    6674:	df 91       	pop	r29
    6676:	cf 91       	pop	r28
    6678:	1f 91       	pop	r17
    667a:	0f 91       	pop	r16
    667c:	ff 90       	pop	r15
    667e:	ef 90       	pop	r14
    6680:	df 90       	pop	r13
    6682:	cf 90       	pop	r12
    6684:	08 95       	ret

00006686 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    6686:	ef 92       	push	r14
    6688:	ff 92       	push	r15
    668a:	0f 93       	push	r16
    668c:	1f 93       	push	r17
    668e:	cf 93       	push	r28
    6690:	df 93       	push	r29
    6692:	cd b7       	in	r28, 0x3d	; 61
    6694:	de b7       	in	r29, 0x3e	; 62
    6696:	2a 97       	sbiw	r28, 0x0a	; 10
    6698:	0f b6       	in	r0, 0x3f	; 63
    669a:	f8 94       	cli
    669c:	de bf       	out	0x3e, r29	; 62
    669e:	0f be       	out	0x3f, r0	; 63
    66a0:	cd bf       	out	0x3d, r28	; 61
    66a2:	6e 83       	std	Y+6, r22	; 0x06
    66a4:	7f 83       	std	Y+7, r23	; 0x07
    66a6:	88 87       	std	Y+8, r24	; 0x08
    66a8:	99 87       	std	Y+9, r25	; 0x09
    66aa:	4a 87       	std	Y+10, r20	; 0x0a
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    66ac:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    66b0:	ce 01       	movw	r24, r28
    66b2:	05 96       	adiw	r24, 0x05	; 5
    66b4:	a8 d0       	rcall	.+336    	; 0x6806 <prvSampleTimeNow>
    66b6:	dc 01       	movw	r26, r24
    66b8:	cb 01       	movw	r24, r22
    66ba:	89 83       	std	Y+1, r24	; 0x01
    66bc:	9a 83       	std	Y+2, r25	; 0x02
    66be:	ab 83       	std	Y+3, r26	; 0x03
    66c0:	bc 83       	std	Y+4, r27	; 0x04

            if( xTimerListsWereSwitched == pdFALSE )
    66c2:	8d 81       	ldd	r24, Y+5	; 0x05
    66c4:	88 23       	and	r24, r24
    66c6:	09 f0       	breq	.+2      	; 0x66ca <prvProcessTimerOrBlockTask+0x44>
    66c8:	4d c0       	rjmp	.+154    	; 0x6764 <prvProcessTimerOrBlockTask+0xde>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    66ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    66cc:	88 23       	and	r24, r24
    66ce:	d9 f4       	brne	.+54     	; 0x6706 <prvProcessTimerOrBlockTask+0x80>
    66d0:	2e 81       	ldd	r18, Y+6	; 0x06
    66d2:	3f 81       	ldd	r19, Y+7	; 0x07
    66d4:	48 85       	ldd	r20, Y+8	; 0x08
    66d6:	59 85       	ldd	r21, Y+9	; 0x09
    66d8:	89 81       	ldd	r24, Y+1	; 0x01
    66da:	9a 81       	ldd	r25, Y+2	; 0x02
    66dc:	ab 81       	ldd	r26, Y+3	; 0x03
    66de:	bc 81       	ldd	r27, Y+4	; 0x04
    66e0:	82 17       	cp	r24, r18
    66e2:	93 07       	cpc	r25, r19
    66e4:	a4 07       	cpc	r26, r20
    66e6:	b5 07       	cpc	r27, r21
    66e8:	70 f0       	brcs	.+28     	; 0x6706 <prvProcessTimerOrBlockTask+0x80>
                {
                    ( void ) xTaskResumeAll();
    66ea:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    66ee:	29 81       	ldd	r18, Y+1	; 0x01
    66f0:	3a 81       	ldd	r19, Y+2	; 0x02
    66f2:	4b 81       	ldd	r20, Y+3	; 0x03
    66f4:	5c 81       	ldd	r21, Y+4	; 0x04
    66f6:	8e 81       	ldd	r24, Y+6	; 0x06
    66f8:	9f 81       	ldd	r25, Y+7	; 0x07
    66fa:	a8 85       	ldd	r26, Y+8	; 0x08
    66fc:	b9 85       	ldd	r27, Y+9	; 0x09
    66fe:	bc 01       	movw	r22, r24
    6700:	cd 01       	movw	r24, r26
    6702:	36 df       	rcall	.-404    	; 0x6570 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    6704:	31 c0       	rjmp	.+98     	; 0x6768 <prvProcessTimerOrBlockTask+0xe2>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    6706:	8a 85       	ldd	r24, Y+10	; 0x0a
    6708:	88 23       	and	r24, r24
    670a:	59 f0       	breq	.+22     	; 0x6722 <prvProcessTimerOrBlockTask+0x9c>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    670c:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <pxOverflowTimerList>
    6710:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <pxOverflowTimerList+0x1>
    6714:	fc 01       	movw	r30, r24
    6716:	90 81       	ld	r25, Z
    6718:	81 e0       	ldi	r24, 0x01	; 1
    671a:	99 23       	and	r25, r25
    671c:	09 f0       	breq	.+2      	; 0x6720 <prvProcessTimerOrBlockTask+0x9a>
    671e:	80 e0       	ldi	r24, 0x00	; 0
    6720:	8a 87       	std	Y+10, r24	; 0x0a
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    6722:	2e 81       	ldd	r18, Y+6	; 0x06
    6724:	3f 81       	ldd	r19, Y+7	; 0x07
    6726:	48 85       	ldd	r20, Y+8	; 0x08
    6728:	59 85       	ldd	r21, Y+9	; 0x09
    672a:	89 81       	ldd	r24, Y+1	; 0x01
    672c:	9a 81       	ldd	r25, Y+2	; 0x02
    672e:	ab 81       	ldd	r26, Y+3	; 0x03
    6730:	bc 81       	ldd	r27, Y+4	; 0x04
    6732:	79 01       	movw	r14, r18
    6734:	8a 01       	movw	r16, r20
    6736:	e8 1a       	sub	r14, r24
    6738:	f9 0a       	sbc	r15, r25
    673a:	0a 0b       	sbc	r16, r26
    673c:	1b 0b       	sbc	r17, r27
    673e:	d8 01       	movw	r26, r16
    6740:	c7 01       	movw	r24, r14
    6742:	e0 91 6e 14 	lds	r30, 0x146E	; 0x80146e <xTimerQueue>
    6746:	f0 91 6f 14 	lds	r31, 0x146F	; 0x80146f <xTimerQueue+0x1>
    674a:	2a 85       	ldd	r18, Y+10	; 0x0a
    674c:	ac 01       	movw	r20, r24
    674e:	bd 01       	movw	r22, r26
    6750:	cf 01       	movw	r24, r30
    6752:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    6756:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
    675a:	88 23       	and	r24, r24
    675c:	29 f4       	brne	.+10     	; 0x6768 <prvProcessTimerOrBlockTask+0xe2>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    675e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vPortYield>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    6762:	02 c0       	rjmp	.+4      	; 0x6768 <prvProcessTimerOrBlockTask+0xe2>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    6764:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <xTaskResumeAll>
            }
        }
    }
    6768:	00 00       	nop
    676a:	2a 96       	adiw	r28, 0x0a	; 10
    676c:	0f b6       	in	r0, 0x3f	; 63
    676e:	f8 94       	cli
    6770:	de bf       	out	0x3e, r29	; 62
    6772:	0f be       	out	0x3f, r0	; 63
    6774:	cd bf       	out	0x3d, r28	; 61
    6776:	df 91       	pop	r29
    6778:	cf 91       	pop	r28
    677a:	1f 91       	pop	r17
    677c:	0f 91       	pop	r16
    677e:	ff 90       	pop	r15
    6780:	ef 90       	pop	r14
    6782:	08 95       	ret

00006784 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    6784:	cf 93       	push	r28
    6786:	df 93       	push	r29
    6788:	00 d0       	rcall	.+0      	; 0x678a <prvGetNextExpireTime+0x6>
    678a:	00 d0       	rcall	.+0      	; 0x678c <prvGetNextExpireTime+0x8>
    678c:	cd b7       	in	r28, 0x3d	; 61
    678e:	de b7       	in	r29, 0x3e	; 62
    6790:	9e 83       	std	Y+6, r25	; 0x06
    6792:	8d 83       	std	Y+5, r24	; 0x05
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    6794:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <pxCurrentTimerList>
    6798:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <pxCurrentTimerList+0x1>
    679c:	fc 01       	movw	r30, r24
    679e:	90 81       	ld	r25, Z
    67a0:	81 e0       	ldi	r24, 0x01	; 1
    67a2:	99 23       	and	r25, r25
    67a4:	09 f0       	breq	.+2      	; 0x67a8 <prvGetNextExpireTime+0x24>
    67a6:	80 e0       	ldi	r24, 0x00	; 0
    67a8:	28 2f       	mov	r18, r24
    67aa:	8d 81       	ldd	r24, Y+5	; 0x05
    67ac:	9e 81       	ldd	r25, Y+6	; 0x06
    67ae:	fc 01       	movw	r30, r24
    67b0:	20 83       	st	Z, r18

        if( *pxListWasEmpty == pdFALSE )
    67b2:	8d 81       	ldd	r24, Y+5	; 0x05
    67b4:	9e 81       	ldd	r25, Y+6	; 0x06
    67b6:	fc 01       	movw	r30, r24
    67b8:	80 81       	ld	r24, Z
    67ba:	88 23       	and	r24, r24
    67bc:	89 f4       	brne	.+34     	; 0x67e0 <prvGetNextExpireTime+0x5c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    67be:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <pxCurrentTimerList>
    67c2:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <pxCurrentTimerList+0x1>
    67c6:	fc 01       	movw	r30, r24
    67c8:	87 81       	ldd	r24, Z+7	; 0x07
    67ca:	90 85       	ldd	r25, Z+8	; 0x08
    67cc:	fc 01       	movw	r30, r24
    67ce:	80 81       	ld	r24, Z
    67d0:	91 81       	ldd	r25, Z+1	; 0x01
    67d2:	a2 81       	ldd	r26, Z+2	; 0x02
    67d4:	b3 81       	ldd	r27, Z+3	; 0x03
    67d6:	89 83       	std	Y+1, r24	; 0x01
    67d8:	9a 83       	std	Y+2, r25	; 0x02
    67da:	ab 83       	std	Y+3, r26	; 0x03
    67dc:	bc 83       	std	Y+4, r27	; 0x04
    67de:	04 c0       	rjmp	.+8      	; 0x67e8 <prvGetNextExpireTime+0x64>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    67e0:	19 82       	std	Y+1, r1	; 0x01
    67e2:	1a 82       	std	Y+2, r1	; 0x02
    67e4:	1b 82       	std	Y+3, r1	; 0x03
    67e6:	1c 82       	std	Y+4, r1	; 0x04
        }

        return xNextExpireTime;
    67e8:	89 81       	ldd	r24, Y+1	; 0x01
    67ea:	9a 81       	ldd	r25, Y+2	; 0x02
    67ec:	ab 81       	ldd	r26, Y+3	; 0x03
    67ee:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    67f0:	bc 01       	movw	r22, r24
    67f2:	cd 01       	movw	r24, r26
    67f4:	26 96       	adiw	r28, 0x06	; 6
    67f6:	0f b6       	in	r0, 0x3f	; 63
    67f8:	f8 94       	cli
    67fa:	de bf       	out	0x3e, r29	; 62
    67fc:	0f be       	out	0x3f, r0	; 63
    67fe:	cd bf       	out	0x3d, r28	; 61
    6800:	df 91       	pop	r29
    6802:	cf 91       	pop	r28
    6804:	08 95       	ret

00006806 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    6806:	cf 93       	push	r28
    6808:	df 93       	push	r29
    680a:	00 d0       	rcall	.+0      	; 0x680c <prvSampleTimeNow+0x6>
    680c:	00 d0       	rcall	.+0      	; 0x680e <prvSampleTimeNow+0x8>
    680e:	cd b7       	in	r28, 0x3d	; 61
    6810:	de b7       	in	r29, 0x3e	; 62
    6812:	9e 83       	std	Y+6, r25	; 0x06
    6814:	8d 83       	std	Y+5, r24	; 0x05
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    6816:	0e 94 30 20 	call	0x4060	; 0x4060 <xTaskGetTickCount>
    681a:	dc 01       	movw	r26, r24
    681c:	cb 01       	movw	r24, r22
    681e:	89 83       	std	Y+1, r24	; 0x01
    6820:	9a 83       	std	Y+2, r25	; 0x02
    6822:	ab 83       	std	Y+3, r26	; 0x03
    6824:	bc 83       	std	Y+4, r27	; 0x04

        if( xTimeNow < xLastTime )
    6826:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <xLastTime.2436>
    682a:	90 91 73 14 	lds	r25, 0x1473	; 0x801473 <xLastTime.2436+0x1>
    682e:	a0 91 74 14 	lds	r26, 0x1474	; 0x801474 <xLastTime.2436+0x2>
    6832:	b0 91 75 14 	lds	r27, 0x1475	; 0x801475 <xLastTime.2436+0x3>
    6836:	29 81       	ldd	r18, Y+1	; 0x01
    6838:	3a 81       	ldd	r19, Y+2	; 0x02
    683a:	4b 81       	ldd	r20, Y+3	; 0x03
    683c:	5c 81       	ldd	r21, Y+4	; 0x04
    683e:	28 17       	cp	r18, r24
    6840:	39 07       	cpc	r19, r25
    6842:	4a 07       	cpc	r20, r26
    6844:	5b 07       	cpc	r21, r27
    6846:	38 f4       	brcc	.+14     	; 0x6856 <prvSampleTimeNow+0x50>
        {
            prvSwitchTimerLists();
    6848:	e6 d1       	rcall	.+972    	; 0x6c16 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    684a:	8d 81       	ldd	r24, Y+5	; 0x05
    684c:	9e 81       	ldd	r25, Y+6	; 0x06
    684e:	21 e0       	ldi	r18, 0x01	; 1
    6850:	fc 01       	movw	r30, r24
    6852:	20 83       	st	Z, r18
    6854:	04 c0       	rjmp	.+8      	; 0x685e <prvSampleTimeNow+0x58>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    6856:	8d 81       	ldd	r24, Y+5	; 0x05
    6858:	9e 81       	ldd	r25, Y+6	; 0x06
    685a:	fc 01       	movw	r30, r24
    685c:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    685e:	89 81       	ldd	r24, Y+1	; 0x01
    6860:	9a 81       	ldd	r25, Y+2	; 0x02
    6862:	ab 81       	ldd	r26, Y+3	; 0x03
    6864:	bc 81       	ldd	r27, Y+4	; 0x04
    6866:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <xLastTime.2436>
    686a:	90 93 73 14 	sts	0x1473, r25	; 0x801473 <xLastTime.2436+0x1>
    686e:	a0 93 74 14 	sts	0x1474, r26	; 0x801474 <xLastTime.2436+0x2>
    6872:	b0 93 75 14 	sts	0x1475, r27	; 0x801475 <xLastTime.2436+0x3>

        return xTimeNow;
    6876:	89 81       	ldd	r24, Y+1	; 0x01
    6878:	9a 81       	ldd	r25, Y+2	; 0x02
    687a:	ab 81       	ldd	r26, Y+3	; 0x03
    687c:	bc 81       	ldd	r27, Y+4	; 0x04
    }
    687e:	bc 01       	movw	r22, r24
    6880:	cd 01       	movw	r24, r26
    6882:	26 96       	adiw	r28, 0x06	; 6
    6884:	0f b6       	in	r0, 0x3f	; 63
    6886:	f8 94       	cli
    6888:	de bf       	out	0x3e, r29	; 62
    688a:	0f be       	out	0x3f, r0	; 63
    688c:	cd bf       	out	0x3d, r28	; 61
    688e:	df 91       	pop	r29
    6890:	cf 91       	pop	r28
    6892:	08 95       	ret

00006894 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    6894:	cf 92       	push	r12
    6896:	df 92       	push	r13
    6898:	ef 92       	push	r14
    689a:	ff 92       	push	r15
    689c:	0f 93       	push	r16
    689e:	1f 93       	push	r17
    68a0:	cf 93       	push	r28
    68a2:	df 93       	push	r29
    68a4:	cd b7       	in	r28, 0x3d	; 61
    68a6:	de b7       	in	r29, 0x3e	; 62
    68a8:	2f 97       	sbiw	r28, 0x0f	; 15
    68aa:	0f b6       	in	r0, 0x3f	; 63
    68ac:	f8 94       	cli
    68ae:	de bf       	out	0x3e, r29	; 62
    68b0:	0f be       	out	0x3f, r0	; 63
    68b2:	cd bf       	out	0x3d, r28	; 61
    68b4:	9b 83       	std	Y+3, r25	; 0x03
    68b6:	8a 83       	std	Y+2, r24	; 0x02
    68b8:	4c 83       	std	Y+4, r20	; 0x04
    68ba:	5d 83       	std	Y+5, r21	; 0x05
    68bc:	6e 83       	std	Y+6, r22	; 0x06
    68be:	7f 83       	std	Y+7, r23	; 0x07
    68c0:	08 87       	std	Y+8, r16	; 0x08
    68c2:	19 87       	std	Y+9, r17	; 0x09
    68c4:	2a 87       	std	Y+10, r18	; 0x0a
    68c6:	3b 87       	std	Y+11, r19	; 0x0b
    68c8:	cc 86       	std	Y+12, r12	; 0x0c
    68ca:	dd 86       	std	Y+13, r13	; 0x0d
    68cc:	ee 86       	std	Y+14, r14	; 0x0e
    68ce:	ff 86       	std	Y+15, r15	; 0x0f
        BaseType_t xProcessTimerNow = pdFALSE;
    68d0:	19 82       	std	Y+1, r1	; 0x01

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    68d2:	2a 81       	ldd	r18, Y+2	; 0x02
    68d4:	3b 81       	ldd	r19, Y+3	; 0x03
    68d6:	8c 81       	ldd	r24, Y+4	; 0x04
    68d8:	9d 81       	ldd	r25, Y+5	; 0x05
    68da:	ae 81       	ldd	r26, Y+6	; 0x06
    68dc:	bf 81       	ldd	r27, Y+7	; 0x07
    68de:	f9 01       	movw	r30, r18
    68e0:	82 83       	std	Z+2, r24	; 0x02
    68e2:	93 83       	std	Z+3, r25	; 0x03
    68e4:	a4 83       	std	Z+4, r26	; 0x04
    68e6:	b5 83       	std	Z+5, r27	; 0x05
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    68e8:	8a 81       	ldd	r24, Y+2	; 0x02
    68ea:	9b 81       	ldd	r25, Y+3	; 0x03
    68ec:	2a 81       	ldd	r18, Y+2	; 0x02
    68ee:	3b 81       	ldd	r19, Y+3	; 0x03
    68f0:	fc 01       	movw	r30, r24
    68f2:	33 87       	std	Z+11, r19	; 0x0b
    68f4:	22 87       	std	Z+10, r18	; 0x0a

        if( xNextExpiryTime <= xTimeNow )
    68f6:	2c 81       	ldd	r18, Y+4	; 0x04
    68f8:	3d 81       	ldd	r19, Y+5	; 0x05
    68fa:	4e 81       	ldd	r20, Y+6	; 0x06
    68fc:	5f 81       	ldd	r21, Y+7	; 0x07
    68fe:	88 85       	ldd	r24, Y+8	; 0x08
    6900:	99 85       	ldd	r25, Y+9	; 0x09
    6902:	aa 85       	ldd	r26, Y+10	; 0x0a
    6904:	bb 85       	ldd	r27, Y+11	; 0x0b
    6906:	82 17       	cp	r24, r18
    6908:	93 07       	cpc	r25, r19
    690a:	a4 07       	cpc	r26, r20
    690c:	b5 07       	cpc	r27, r21
    690e:	40 f1       	brcs	.+80     	; 0x6960 <prvInsertTimerInActiveList+0xcc>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6910:	28 85       	ldd	r18, Y+8	; 0x08
    6912:	39 85       	ldd	r19, Y+9	; 0x09
    6914:	4a 85       	ldd	r20, Y+10	; 0x0a
    6916:	5b 85       	ldd	r21, Y+11	; 0x0b
    6918:	8c 85       	ldd	r24, Y+12	; 0x0c
    691a:	9d 85       	ldd	r25, Y+13	; 0x0d
    691c:	ae 85       	ldd	r26, Y+14	; 0x0e
    691e:	bf 85       	ldd	r27, Y+15	; 0x0f
    6920:	28 1b       	sub	r18, r24
    6922:	39 0b       	sbc	r19, r25
    6924:	4a 0b       	sbc	r20, r26
    6926:	5b 0b       	sbc	r21, r27
    6928:	8a 81       	ldd	r24, Y+2	; 0x02
    692a:	9b 81       	ldd	r25, Y+3	; 0x03
    692c:	fc 01       	movw	r30, r24
    692e:	86 85       	ldd	r24, Z+14	; 0x0e
    6930:	97 85       	ldd	r25, Z+15	; 0x0f
    6932:	a0 89       	ldd	r26, Z+16	; 0x10
    6934:	b1 89       	ldd	r27, Z+17	; 0x11
    6936:	28 17       	cp	r18, r24
    6938:	39 07       	cpc	r19, r25
    693a:	4a 07       	cpc	r20, r26
    693c:	5b 07       	cpc	r21, r27
    693e:	18 f0       	brcs	.+6      	; 0x6946 <prvInsertTimerInActiveList+0xb2>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    6940:	81 e0       	ldi	r24, 0x01	; 1
    6942:	89 83       	std	Y+1, r24	; 0x01
    6944:	36 c0       	rjmp	.+108    	; 0x69b2 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    6946:	8a 81       	ldd	r24, Y+2	; 0x02
    6948:	9b 81       	ldd	r25, Y+3	; 0x03
    694a:	9c 01       	movw	r18, r24
    694c:	2e 5f       	subi	r18, 0xFE	; 254
    694e:	3f 4f       	sbci	r19, 0xFF	; 255
    6950:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <pxOverflowTimerList>
    6954:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <pxOverflowTimerList+0x1>
    6958:	b9 01       	movw	r22, r18
    695a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vListInsert>
    695e:	29 c0       	rjmp	.+82     	; 0x69b2 <prvInsertTimerInActiveList+0x11e>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    6960:	28 85       	ldd	r18, Y+8	; 0x08
    6962:	39 85       	ldd	r19, Y+9	; 0x09
    6964:	4a 85       	ldd	r20, Y+10	; 0x0a
    6966:	5b 85       	ldd	r21, Y+11	; 0x0b
    6968:	8c 85       	ldd	r24, Y+12	; 0x0c
    696a:	9d 85       	ldd	r25, Y+13	; 0x0d
    696c:	ae 85       	ldd	r26, Y+14	; 0x0e
    696e:	bf 85       	ldd	r27, Y+15	; 0x0f
    6970:	28 17       	cp	r18, r24
    6972:	39 07       	cpc	r19, r25
    6974:	4a 07       	cpc	r20, r26
    6976:	5b 07       	cpc	r21, r27
    6978:	80 f4       	brcc	.+32     	; 0x699a <prvInsertTimerInActiveList+0x106>
    697a:	2c 81       	ldd	r18, Y+4	; 0x04
    697c:	3d 81       	ldd	r19, Y+5	; 0x05
    697e:	4e 81       	ldd	r20, Y+6	; 0x06
    6980:	5f 81       	ldd	r21, Y+7	; 0x07
    6982:	8c 85       	ldd	r24, Y+12	; 0x0c
    6984:	9d 85       	ldd	r25, Y+13	; 0x0d
    6986:	ae 85       	ldd	r26, Y+14	; 0x0e
    6988:	bf 85       	ldd	r27, Y+15	; 0x0f
    698a:	28 17       	cp	r18, r24
    698c:	39 07       	cpc	r19, r25
    698e:	4a 07       	cpc	r20, r26
    6990:	5b 07       	cpc	r21, r27
    6992:	18 f0       	brcs	.+6      	; 0x699a <prvInsertTimerInActiveList+0x106>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    6994:	81 e0       	ldi	r24, 0x01	; 1
    6996:	89 83       	std	Y+1, r24	; 0x01
    6998:	0c c0       	rjmp	.+24     	; 0x69b2 <prvInsertTimerInActiveList+0x11e>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    699a:	8a 81       	ldd	r24, Y+2	; 0x02
    699c:	9b 81       	ldd	r25, Y+3	; 0x03
    699e:	9c 01       	movw	r18, r24
    69a0:	2e 5f       	subi	r18, 0xFE	; 254
    69a2:	3f 4f       	sbci	r19, 0xFF	; 255
    69a4:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <pxCurrentTimerList>
    69a8:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <pxCurrentTimerList+0x1>
    69ac:	b9 01       	movw	r22, r18
    69ae:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vListInsert>
            }
        }

        return xProcessTimerNow;
    69b2:	89 81       	ldd	r24, Y+1	; 0x01
    }
    69b4:	2f 96       	adiw	r28, 0x0f	; 15
    69b6:	0f b6       	in	r0, 0x3f	; 63
    69b8:	f8 94       	cli
    69ba:	de bf       	out	0x3e, r29	; 62
    69bc:	0f be       	out	0x3f, r0	; 63
    69be:	cd bf       	out	0x3d, r28	; 61
    69c0:	df 91       	pop	r29
    69c2:	cf 91       	pop	r28
    69c4:	1f 91       	pop	r17
    69c6:	0f 91       	pop	r16
    69c8:	ff 90       	pop	r15
    69ca:	ef 90       	pop	r14
    69cc:	df 90       	pop	r13
    69ce:	cf 90       	pop	r12
    69d0:	08 95       	ret

000069d2 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    69d2:	cf 92       	push	r12
    69d4:	df 92       	push	r13
    69d6:	ef 92       	push	r14
    69d8:	ff 92       	push	r15
    69da:	0f 93       	push	r16
    69dc:	1f 93       	push	r17
    69de:	cf 93       	push	r28
    69e0:	df 93       	push	r29
    69e2:	cd b7       	in	r28, 0x3d	; 61
    69e4:	de b7       	in	r29, 0x3e	; 62
    69e6:	2f 97       	sbiw	r28, 0x0f	; 15
    69e8:	0f b6       	in	r0, 0x3f	; 63
    69ea:	f8 94       	cli
    69ec:	de bf       	out	0x3e, r29	; 62
    69ee:	0f be       	out	0x3f, r0	; 63
    69f0:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    69f2:	f2 c0       	rjmp	.+484    	; 0x6bd8 <prvProcessReceivedCommands+0x206>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    69f4:	88 85       	ldd	r24, Y+8	; 0x08
    69f6:	88 23       	and	r24, r24
    69f8:	0c f4       	brge	.+2      	; 0x69fc <prvProcessReceivedCommands+0x2a>
    69fa:	ee c0       	rjmp	.+476    	; 0x6bd8 <prvProcessReceivedCommands+0x206>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    69fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    69fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a00:	9a 83       	std	Y+2, r25	; 0x02
    6a02:	89 83       	std	Y+1, r24	; 0x01

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    6a04:	89 81       	ldd	r24, Y+1	; 0x01
    6a06:	9a 81       	ldd	r25, Y+2	; 0x02
    6a08:	fc 01       	movw	r30, r24
    6a0a:	84 85       	ldd	r24, Z+12	; 0x0c
    6a0c:	95 85       	ldd	r25, Z+13	; 0x0d
    6a0e:	89 2b       	or	r24, r25
    6a10:	29 f0       	breq	.+10     	; 0x6a1c <prvProcessReceivedCommands+0x4a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6a12:	89 81       	ldd	r24, Y+1	; 0x01
    6a14:	9a 81       	ldd	r25, Y+2	; 0x02
    6a16:	02 96       	adiw	r24, 0x02	; 2
    6a18:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    6a1c:	ce 01       	movw	r24, r28
    6a1e:	0f 96       	adiw	r24, 0x0f	; 15
    6a20:	f2 de       	rcall	.-540    	; 0x6806 <prvSampleTimeNow>
    6a22:	dc 01       	movw	r26, r24
    6a24:	cb 01       	movw	r24, r22
    6a26:	8b 83       	std	Y+3, r24	; 0x03
    6a28:	9c 83       	std	Y+4, r25	; 0x04
    6a2a:	ad 83       	std	Y+5, r26	; 0x05
    6a2c:	be 83       	std	Y+6, r27	; 0x06

                switch( xMessage.xMessageID )
    6a2e:	88 85       	ldd	r24, Y+8	; 0x08
    6a30:	08 2e       	mov	r0, r24
    6a32:	00 0c       	add	r0, r0
    6a34:	99 0b       	sbc	r25, r25
    6a36:	09 2e       	mov	r0, r25
    6a38:	00 0c       	add	r0, r0
    6a3a:	aa 0b       	sbc	r26, r26
    6a3c:	bb 0b       	sbc	r27, r27
    6a3e:	40 e0       	ldi	r20, 0x00	; 0
    6a40:	50 e0       	ldi	r21, 0x00	; 0
    6a42:	29 e0       	ldi	r18, 0x09	; 9
    6a44:	30 e0       	ldi	r19, 0x00	; 0
    6a46:	84 1b       	sub	r24, r20
    6a48:	95 0b       	sbc	r25, r21
    6a4a:	28 17       	cp	r18, r24
    6a4c:	39 07       	cpc	r19, r25
    6a4e:	08 f4       	brcc	.+2      	; 0x6a52 <prvProcessReceivedCommands+0x80>
    6a50:	c2 c0       	rjmp	.+388    	; 0x6bd6 <prvProcessReceivedCommands+0x204>
    6a52:	fc 01       	movw	r30, r24
    6a54:	88 27       	eor	r24, r24
    6a56:	ee 58       	subi	r30, 0x8E	; 142
    6a58:	ff 4f       	sbci	r31, 0xFF	; 255
    6a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    6a5c:	0c 94 4b 45 	jmp	0x8a96	; 0x8a96 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    6a60:	89 81       	ldd	r24, Y+1	; 0x01
    6a62:	9a 81       	ldd	r25, Y+2	; 0x02
    6a64:	fc 01       	movw	r30, r24
    6a66:	86 89       	ldd	r24, Z+22	; 0x16
    6a68:	28 2f       	mov	r18, r24
    6a6a:	21 60       	ori	r18, 0x01	; 1
    6a6c:	89 81       	ldd	r24, Y+1	; 0x01
    6a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a70:	fc 01       	movw	r30, r24
    6a72:	26 8b       	std	Z+22, r18	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    6a74:	e9 84       	ldd	r14, Y+9	; 0x09
    6a76:	fa 84       	ldd	r15, Y+10	; 0x0a
    6a78:	0b 85       	ldd	r16, Y+11	; 0x0b
    6a7a:	1c 85       	ldd	r17, Y+12	; 0x0c
    6a7c:	29 85       	ldd	r18, Y+9	; 0x09
    6a7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6a80:	4b 85       	ldd	r20, Y+11	; 0x0b
    6a82:	5c 85       	ldd	r21, Y+12	; 0x0c
    6a84:	89 81       	ldd	r24, Y+1	; 0x01
    6a86:	9a 81       	ldd	r25, Y+2	; 0x02
    6a88:	fc 01       	movw	r30, r24
    6a8a:	86 85       	ldd	r24, Z+14	; 0x0e
    6a8c:	97 85       	ldd	r25, Z+15	; 0x0f
    6a8e:	a0 89       	ldd	r26, Z+16	; 0x10
    6a90:	b1 89       	ldd	r27, Z+17	; 0x11
    6a92:	82 0f       	add	r24, r18
    6a94:	93 1f       	adc	r25, r19
    6a96:	a4 1f       	adc	r26, r20
    6a98:	b5 1f       	adc	r27, r21
    6a9a:	2b 81       	ldd	r18, Y+3	; 0x03
    6a9c:	3c 81       	ldd	r19, Y+4	; 0x04
    6a9e:	4d 81       	ldd	r20, Y+5	; 0x05
    6aa0:	5e 81       	ldd	r21, Y+6	; 0x06
    6aa2:	e9 81       	ldd	r30, Y+1	; 0x01
    6aa4:	fa 81       	ldd	r31, Y+2	; 0x02
    6aa6:	67 01       	movw	r12, r14
    6aa8:	78 01       	movw	r14, r16
    6aaa:	89 01       	movw	r16, r18
    6aac:	9a 01       	movw	r18, r20
    6aae:	ac 01       	movw	r20, r24
    6ab0:	bd 01       	movw	r22, r26
    6ab2:	cf 01       	movw	r24, r30
    6ab4:	ef de       	rcall	.-546    	; 0x6894 <prvInsertTimerInActiveList>
    6ab6:	88 23       	and	r24, r24
    6ab8:	09 f4       	brne	.+2      	; 0x6abc <prvProcessReceivedCommands+0xea>
    6aba:	8e c0       	rjmp	.+284    	; 0x6bd8 <prvProcessReceivedCommands+0x206>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6abc:	89 81       	ldd	r24, Y+1	; 0x01
    6abe:	9a 81       	ldd	r25, Y+2	; 0x02
    6ac0:	fc 01       	movw	r30, r24
    6ac2:	24 89       	ldd	r18, Z+20	; 0x14
    6ac4:	35 89       	ldd	r19, Z+21	; 0x15
    6ac6:	89 81       	ldd	r24, Y+1	; 0x01
    6ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    6aca:	f9 01       	movw	r30, r18
    6acc:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    6ace:	89 81       	ldd	r24, Y+1	; 0x01
    6ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ad2:	fc 01       	movw	r30, r24
    6ad4:	86 89       	ldd	r24, Z+22	; 0x16
    6ad6:	88 2f       	mov	r24, r24
    6ad8:	90 e0       	ldi	r25, 0x00	; 0
    6ada:	84 70       	andi	r24, 0x04	; 4
    6adc:	99 27       	eor	r25, r25
    6ade:	89 2b       	or	r24, r25
    6ae0:	09 f4       	brne	.+2      	; 0x6ae4 <prvProcessReceivedCommands+0x112>
    6ae2:	7a c0       	rjmp	.+244    	; 0x6bd8 <prvProcessReceivedCommands+0x206>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    6ae4:	29 85       	ldd	r18, Y+9	; 0x09
    6ae6:	3a 85       	ldd	r19, Y+10	; 0x0a
    6ae8:	4b 85       	ldd	r20, Y+11	; 0x0b
    6aea:	5c 85       	ldd	r21, Y+12	; 0x0c
    6aec:	89 81       	ldd	r24, Y+1	; 0x01
    6aee:	9a 81       	ldd	r25, Y+2	; 0x02
    6af0:	fc 01       	movw	r30, r24
    6af2:	86 85       	ldd	r24, Z+14	; 0x0e
    6af4:	97 85       	ldd	r25, Z+15	; 0x0f
    6af6:	a0 89       	ldd	r26, Z+16	; 0x10
    6af8:	b1 89       	ldd	r27, Z+17	; 0x11
    6afa:	82 0f       	add	r24, r18
    6afc:	93 1f       	adc	r25, r19
    6afe:	a4 1f       	adc	r26, r20
    6b00:	b5 1f       	adc	r27, r21
    6b02:	e9 81       	ldd	r30, Y+1	; 0x01
    6b04:	fa 81       	ldd	r31, Y+2	; 0x02
    6b06:	c1 2c       	mov	r12, r1
    6b08:	d1 2c       	mov	r13, r1
    6b0a:	76 01       	movw	r14, r12
    6b0c:	00 e0       	ldi	r16, 0x00	; 0
    6b0e:	10 e0       	ldi	r17, 0x00	; 0
    6b10:	9c 01       	movw	r18, r24
    6b12:	ad 01       	movw	r20, r26
    6b14:	60 e0       	ldi	r22, 0x00	; 0
    6b16:	cf 01       	movw	r24, r30
    6b18:	b2 dc       	rcall	.-1692   	; 0x647e <xTimerGenericCommand>
    6b1a:	8f 83       	std	Y+7, r24	; 0x07
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
    6b1c:	5d c0       	rjmp	.+186    	; 0x6bd8 <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    6b1e:	89 81       	ldd	r24, Y+1	; 0x01
    6b20:	9a 81       	ldd	r25, Y+2	; 0x02
    6b22:	fc 01       	movw	r30, r24
    6b24:	86 89       	ldd	r24, Z+22	; 0x16
    6b26:	28 2f       	mov	r18, r24
    6b28:	2e 7f       	andi	r18, 0xFE	; 254
    6b2a:	89 81       	ldd	r24, Y+1	; 0x01
    6b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    6b2e:	fc 01       	movw	r30, r24
    6b30:	26 8b       	std	Z+22, r18	; 0x16
                        break;
    6b32:	52 c0       	rjmp	.+164    	; 0x6bd8 <prvProcessReceivedCommands+0x206>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    6b34:	89 81       	ldd	r24, Y+1	; 0x01
    6b36:	9a 81       	ldd	r25, Y+2	; 0x02
    6b38:	fc 01       	movw	r30, r24
    6b3a:	86 89       	ldd	r24, Z+22	; 0x16
    6b3c:	28 2f       	mov	r18, r24
    6b3e:	21 60       	ori	r18, 0x01	; 1
    6b40:	89 81       	ldd	r24, Y+1	; 0x01
    6b42:	9a 81       	ldd	r25, Y+2	; 0x02
    6b44:	fc 01       	movw	r30, r24
    6b46:	26 8b       	std	Z+22, r18	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    6b48:	89 85       	ldd	r24, Y+9	; 0x09
    6b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b4c:	ab 85       	ldd	r26, Y+11	; 0x0b
    6b4e:	bc 85       	ldd	r27, Y+12	; 0x0c
    6b50:	29 81       	ldd	r18, Y+1	; 0x01
    6b52:	3a 81       	ldd	r19, Y+2	; 0x02
    6b54:	f9 01       	movw	r30, r18
    6b56:	86 87       	std	Z+14, r24	; 0x0e
    6b58:	97 87       	std	Z+15, r25	; 0x0f
    6b5a:	a0 8b       	std	Z+16, r26	; 0x10
    6b5c:	b1 8b       	std	Z+17, r27	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    6b5e:	89 81       	ldd	r24, Y+1	; 0x01
    6b60:	9a 81       	ldd	r25, Y+2	; 0x02
    6b62:	fc 01       	movw	r30, r24
    6b64:	26 85       	ldd	r18, Z+14	; 0x0e
    6b66:	37 85       	ldd	r19, Z+15	; 0x0f
    6b68:	40 89       	ldd	r20, Z+16	; 0x10
    6b6a:	51 89       	ldd	r21, Z+17	; 0x11
    6b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    6b70:	ad 81       	ldd	r26, Y+5	; 0x05
    6b72:	be 81       	ldd	r27, Y+6	; 0x06
    6b74:	82 0f       	add	r24, r18
    6b76:	93 1f       	adc	r25, r19
    6b78:	a4 1f       	adc	r26, r20
    6b7a:	b5 1f       	adc	r27, r21
    6b7c:	eb 80       	ldd	r14, Y+3	; 0x03
    6b7e:	fc 80       	ldd	r15, Y+4	; 0x04
    6b80:	0d 81       	ldd	r16, Y+5	; 0x05
    6b82:	1e 81       	ldd	r17, Y+6	; 0x06
    6b84:	2b 81       	ldd	r18, Y+3	; 0x03
    6b86:	3c 81       	ldd	r19, Y+4	; 0x04
    6b88:	4d 81       	ldd	r20, Y+5	; 0x05
    6b8a:	5e 81       	ldd	r21, Y+6	; 0x06
    6b8c:	e9 81       	ldd	r30, Y+1	; 0x01
    6b8e:	fa 81       	ldd	r31, Y+2	; 0x02
    6b90:	67 01       	movw	r12, r14
    6b92:	78 01       	movw	r14, r16
    6b94:	89 01       	movw	r16, r18
    6b96:	9a 01       	movw	r18, r20
    6b98:	ac 01       	movw	r20, r24
    6b9a:	bd 01       	movw	r22, r26
    6b9c:	cf 01       	movw	r24, r30
    6b9e:	7a de       	rcall	.-780    	; 0x6894 <prvInsertTimerInActiveList>
                        break;
    6ba0:	1b c0       	rjmp	.+54     	; 0x6bd8 <prvProcessReceivedCommands+0x206>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    6ba2:	89 81       	ldd	r24, Y+1	; 0x01
    6ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ba6:	fc 01       	movw	r30, r24
    6ba8:	86 89       	ldd	r24, Z+22	; 0x16
    6baa:	88 2f       	mov	r24, r24
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	82 70       	andi	r24, 0x02	; 2
    6bb0:	99 27       	eor	r25, r25
    6bb2:	89 2b       	or	r24, r25
    6bb4:	29 f4       	brne	.+10     	; 0x6bc0 <prvProcessReceivedCommands+0x1ee>
                                {
                                    vPortFree( pxTimer );
    6bb6:	89 81       	ldd	r24, Y+1	; 0x01
    6bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    6bba:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <vPortFree>
    6bbe:	0c c0       	rjmp	.+24     	; 0x6bd8 <prvProcessReceivedCommands+0x206>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    6bc0:	89 81       	ldd	r24, Y+1	; 0x01
    6bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    6bc4:	fc 01       	movw	r30, r24
    6bc6:	86 89       	ldd	r24, Z+22	; 0x16
    6bc8:	28 2f       	mov	r18, r24
    6bca:	2e 7f       	andi	r18, 0xFE	; 254
    6bcc:	89 81       	ldd	r24, Y+1	; 0x01
    6bce:	9a 81       	ldd	r25, Y+2	; 0x02
    6bd0:	fc 01       	movw	r30, r24
    6bd2:	26 8b       	std	Z+22, r18	; 0x16
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
    6bd4:	01 c0       	rjmp	.+2      	; 0x6bd8 <prvProcessReceivedCommands+0x206>

                    default:
                        /* Don't expect to get here. */
                        break;
    6bd6:	00 00       	nop
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    6bd8:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <xTimerQueue>
    6bdc:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <xTimerQueue+0x1>
    6be0:	be 01       	movw	r22, r28
    6be2:	68 5f       	subi	r22, 0xF8	; 248
    6be4:	7f 4f       	sbci	r23, 0xFF	; 255
    6be6:	20 e0       	ldi	r18, 0x00	; 0
    6be8:	30 e0       	ldi	r19, 0x00	; 0
    6bea:	a9 01       	movw	r20, r18
    6bec:	0e 94 66 12 	call	0x24cc	; 0x24cc <xQueueReceive>
    6bf0:	88 23       	and	r24, r24
    6bf2:	09 f0       	breq	.+2      	; 0x6bf6 <prvProcessReceivedCommands+0x224>
    6bf4:	ff ce       	rjmp	.-514    	; 0x69f4 <prvProcessReceivedCommands+0x22>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    6bf6:	00 00       	nop
    6bf8:	2f 96       	adiw	r28, 0x0f	; 15
    6bfa:	0f b6       	in	r0, 0x3f	; 63
    6bfc:	f8 94       	cli
    6bfe:	de bf       	out	0x3e, r29	; 62
    6c00:	0f be       	out	0x3f, r0	; 63
    6c02:	cd bf       	out	0x3d, r28	; 61
    6c04:	df 91       	pop	r29
    6c06:	cf 91       	pop	r28
    6c08:	1f 91       	pop	r17
    6c0a:	0f 91       	pop	r16
    6c0c:	ff 90       	pop	r15
    6c0e:	ef 90       	pop	r14
    6c10:	df 90       	pop	r13
    6c12:	cf 90       	pop	r12
    6c14:	08 95       	ret

00006c16 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    6c16:	cf 92       	push	r12
    6c18:	df 92       	push	r13
    6c1a:	ef 92       	push	r14
    6c1c:	ff 92       	push	r15
    6c1e:	0f 93       	push	r16
    6c20:	1f 93       	push	r17
    6c22:	cf 93       	push	r28
    6c24:	df 93       	push	r29
    6c26:	cd b7       	in	r28, 0x3d	; 61
    6c28:	de b7       	in	r29, 0x3e	; 62
    6c2a:	2d 97       	sbiw	r28, 0x0d	; 13
    6c2c:	0f b6       	in	r0, 0x3f	; 63
    6c2e:	f8 94       	cli
    6c30:	de bf       	out	0x3e, r29	; 62
    6c32:	0f be       	out	0x3f, r0	; 63
    6c34:	cd bf       	out	0x3d, r28	; 61

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    6c36:	85 c0       	rjmp	.+266    	; 0x6d42 <prvSwitchTimerLists+0x12c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    6c38:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <pxCurrentTimerList>
    6c3c:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <pxCurrentTimerList+0x1>
    6c40:	fc 01       	movw	r30, r24
    6c42:	87 81       	ldd	r24, Z+7	; 0x07
    6c44:	90 85       	ldd	r25, Z+8	; 0x08
    6c46:	fc 01       	movw	r30, r24
    6c48:	80 81       	ld	r24, Z
    6c4a:	91 81       	ldd	r25, Z+1	; 0x01
    6c4c:	a2 81       	ldd	r26, Z+2	; 0x02
    6c4e:	b3 81       	ldd	r27, Z+3	; 0x03
    6c50:	89 83       	std	Y+1, r24	; 0x01
    6c52:	9a 83       	std	Y+2, r25	; 0x02
    6c54:	ab 83       	std	Y+3, r26	; 0x03
    6c56:	bc 83       	std	Y+4, r27	; 0x04

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    6c58:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <pxCurrentTimerList>
    6c5c:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <pxCurrentTimerList+0x1>
    6c60:	fc 01       	movw	r30, r24
    6c62:	87 81       	ldd	r24, Z+7	; 0x07
    6c64:	90 85       	ldd	r25, Z+8	; 0x08
    6c66:	fc 01       	movw	r30, r24
    6c68:	80 85       	ldd	r24, Z+8	; 0x08
    6c6a:	91 85       	ldd	r25, Z+9	; 0x09
    6c6c:	9e 83       	std	Y+6, r25	; 0x06
    6c6e:	8d 83       	std	Y+5, r24	; 0x05
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    6c70:	8d 81       	ldd	r24, Y+5	; 0x05
    6c72:	9e 81       	ldd	r25, Y+6	; 0x06
    6c74:	02 96       	adiw	r24, 0x02	; 2
    6c76:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    6c7e:	fc 01       	movw	r30, r24
    6c80:	24 89       	ldd	r18, Z+20	; 0x14
    6c82:	35 89       	ldd	r19, Z+21	; 0x15
    6c84:	8d 81       	ldd	r24, Y+5	; 0x05
    6c86:	9e 81       	ldd	r25, Y+6	; 0x06
    6c88:	f9 01       	movw	r30, r18
    6c8a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    6c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    6c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    6c90:	fc 01       	movw	r30, r24
    6c92:	86 89       	ldd	r24, Z+22	; 0x16
    6c94:	88 2f       	mov	r24, r24
    6c96:	90 e0       	ldi	r25, 0x00	; 0
    6c98:	84 70       	andi	r24, 0x04	; 4
    6c9a:	99 27       	eor	r25, r25
    6c9c:	89 2b       	or	r24, r25
    6c9e:	09 f4       	brne	.+2      	; 0x6ca2 <prvSwitchTimerLists+0x8c>
    6ca0:	50 c0       	rjmp	.+160    	; 0x6d42 <prvSwitchTimerLists+0x12c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    6ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ca6:	fc 01       	movw	r30, r24
    6ca8:	26 85       	ldd	r18, Z+14	; 0x0e
    6caa:	37 85       	ldd	r19, Z+15	; 0x0f
    6cac:	40 89       	ldd	r20, Z+16	; 0x10
    6cae:	51 89       	ldd	r21, Z+17	; 0x11
    6cb0:	89 81       	ldd	r24, Y+1	; 0x01
    6cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    6cb4:	ab 81       	ldd	r26, Y+3	; 0x03
    6cb6:	bc 81       	ldd	r27, Y+4	; 0x04
    6cb8:	82 0f       	add	r24, r18
    6cba:	93 1f       	adc	r25, r19
    6cbc:	a4 1f       	adc	r26, r20
    6cbe:	b5 1f       	adc	r27, r21
    6cc0:	8f 83       	std	Y+7, r24	; 0x07
    6cc2:	98 87       	std	Y+8, r25	; 0x08
    6cc4:	a9 87       	std	Y+9, r26	; 0x09
    6cc6:	ba 87       	std	Y+10, r27	; 0x0a

                if( xReloadTime > xNextExpireTime )
    6cc8:	2f 81       	ldd	r18, Y+7	; 0x07
    6cca:	38 85       	ldd	r19, Y+8	; 0x08
    6ccc:	49 85       	ldd	r20, Y+9	; 0x09
    6cce:	5a 85       	ldd	r21, Y+10	; 0x0a
    6cd0:	89 81       	ldd	r24, Y+1	; 0x01
    6cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    6cd4:	ab 81       	ldd	r26, Y+3	; 0x03
    6cd6:	bc 81       	ldd	r27, Y+4	; 0x04
    6cd8:	82 17       	cp	r24, r18
    6cda:	93 07       	cpc	r25, r19
    6cdc:	a4 07       	cpc	r26, r20
    6cde:	b5 07       	cpc	r27, r21
    6ce0:	f8 f4       	brcc	.+62     	; 0x6d20 <prvSwitchTimerLists+0x10a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    6ce2:	2d 81       	ldd	r18, Y+5	; 0x05
    6ce4:	3e 81       	ldd	r19, Y+6	; 0x06
    6ce6:	8f 81       	ldd	r24, Y+7	; 0x07
    6ce8:	98 85       	ldd	r25, Y+8	; 0x08
    6cea:	a9 85       	ldd	r26, Y+9	; 0x09
    6cec:	ba 85       	ldd	r27, Y+10	; 0x0a
    6cee:	f9 01       	movw	r30, r18
    6cf0:	82 83       	std	Z+2, r24	; 0x02
    6cf2:	93 83       	std	Z+3, r25	; 0x03
    6cf4:	a4 83       	std	Z+4, r26	; 0x04
    6cf6:	b5 83       	std	Z+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    6cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    6cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    6cfc:	2d 81       	ldd	r18, Y+5	; 0x05
    6cfe:	3e 81       	ldd	r19, Y+6	; 0x06
    6d00:	fc 01       	movw	r30, r24
    6d02:	33 87       	std	Z+11, r19	; 0x0b
    6d04:	22 87       	std	Z+10, r18	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    6d06:	8d 81       	ldd	r24, Y+5	; 0x05
    6d08:	9e 81       	ldd	r25, Y+6	; 0x06
    6d0a:	9c 01       	movw	r18, r24
    6d0c:	2e 5f       	subi	r18, 0xFE	; 254
    6d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    6d10:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <pxCurrentTimerList>
    6d14:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <pxCurrentTimerList+0x1>
    6d18:	b9 01       	movw	r22, r18
    6d1a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <vListInsert>
    6d1e:	11 c0       	rjmp	.+34     	; 0x6d42 <prvSwitchTimerLists+0x12c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6d20:	89 81       	ldd	r24, Y+1	; 0x01
    6d22:	9a 81       	ldd	r25, Y+2	; 0x02
    6d24:	ab 81       	ldd	r26, Y+3	; 0x03
    6d26:	bc 81       	ldd	r27, Y+4	; 0x04
    6d28:	ed 81       	ldd	r30, Y+5	; 0x05
    6d2a:	fe 81       	ldd	r31, Y+6	; 0x06
    6d2c:	c1 2c       	mov	r12, r1
    6d2e:	d1 2c       	mov	r13, r1
    6d30:	76 01       	movw	r14, r12
    6d32:	00 e0       	ldi	r16, 0x00	; 0
    6d34:	10 e0       	ldi	r17, 0x00	; 0
    6d36:	9c 01       	movw	r18, r24
    6d38:	ad 01       	movw	r20, r26
    6d3a:	60 e0       	ldi	r22, 0x00	; 0
    6d3c:	cf 01       	movw	r24, r30
    6d3e:	9f db       	rcall	.-2242   	; 0x647e <xTimerGenericCommand>
    6d40:	8b 87       	std	Y+11, r24	; 0x0b

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    6d42:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <pxCurrentTimerList>
    6d46:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <pxCurrentTimerList+0x1>
    6d4a:	fc 01       	movw	r30, r24
    6d4c:	80 81       	ld	r24, Z
    6d4e:	88 23       	and	r24, r24
    6d50:	09 f0       	breq	.+2      	; 0x6d54 <prvSwitchTimerLists+0x13e>
    6d52:	72 cf       	rjmp	.-284    	; 0x6c38 <prvSwitchTimerLists+0x22>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
    6d54:	80 91 6a 14 	lds	r24, 0x146A	; 0x80146a <pxCurrentTimerList>
    6d58:	90 91 6b 14 	lds	r25, 0x146B	; 0x80146b <pxCurrentTimerList+0x1>
    6d5c:	9d 87       	std	Y+13, r25	; 0x0d
    6d5e:	8c 87       	std	Y+12, r24	; 0x0c
        pxCurrentTimerList = pxOverflowTimerList;
    6d60:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <pxOverflowTimerList>
    6d64:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <pxOverflowTimerList+0x1>
    6d68:	90 93 6b 14 	sts	0x146B, r25	; 0x80146b <pxCurrentTimerList+0x1>
    6d6c:	80 93 6a 14 	sts	0x146A, r24	; 0x80146a <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    6d70:	8c 85       	ldd	r24, Y+12	; 0x0c
    6d72:	9d 85       	ldd	r25, Y+13	; 0x0d
    6d74:	90 93 6d 14 	sts	0x146D, r25	; 0x80146d <pxOverflowTimerList+0x1>
    6d78:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <pxOverflowTimerList>
    }
    6d7c:	00 00       	nop
    6d7e:	2d 96       	adiw	r28, 0x0d	; 13
    6d80:	0f b6       	in	r0, 0x3f	; 63
    6d82:	f8 94       	cli
    6d84:	de bf       	out	0x3e, r29	; 62
    6d86:	0f be       	out	0x3f, r0	; 63
    6d88:	cd bf       	out	0x3d, r28	; 61
    6d8a:	df 91       	pop	r29
    6d8c:	cf 91       	pop	r28
    6d8e:	1f 91       	pop	r17
    6d90:	0f 91       	pop	r16
    6d92:	ff 90       	pop	r15
    6d94:	ef 90       	pop	r14
    6d96:	df 90       	pop	r13
    6d98:	cf 90       	pop	r12
    6d9a:	08 95       	ret

00006d9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    6d9c:	cf 93       	push	r28
    6d9e:	df 93       	push	r29
    6da0:	cd b7       	in	r28, 0x3d	; 61
    6da2:	de b7       	in	r29, 0x3e	; 62
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    6da4:	0f b6       	in	r0, 0x3f	; 63
    6da6:	f8 94       	cli
    6da8:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    6daa:	80 91 6e 14 	lds	r24, 0x146E	; 0x80146e <xTimerQueue>
    6dae:	90 91 6f 14 	lds	r25, 0x146F	; 0x80146f <xTimerQueue+0x1>
    6db2:	89 2b       	or	r24, r25
    6db4:	e9 f4       	brne	.+58     	; 0x6df0 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
    6db6:	84 e5       	ldi	r24, 0x54	; 84
    6db8:	94 e1       	ldi	r25, 0x14	; 20
    6dba:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    6dbe:	8f e5       	ldi	r24, 0x5F	; 95
    6dc0:	94 e1       	ldi	r25, 0x14	; 20
    6dc2:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    6dc6:	84 e5       	ldi	r24, 0x54	; 84
    6dc8:	94 e1       	ldi	r25, 0x14	; 20
    6dca:	90 93 6b 14 	sts	0x146B, r25	; 0x80146b <pxCurrentTimerList+0x1>
    6dce:	80 93 6a 14 	sts	0x146A, r24	; 0x80146a <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    6dd2:	8f e5       	ldi	r24, 0x5F	; 95
    6dd4:	94 e1       	ldi	r25, 0x14	; 20
    6dd6:	90 93 6d 14 	sts	0x146D, r25	; 0x80146d <pxOverflowTimerList+0x1>
    6dda:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <pxOverflowTimerList>

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    6dde:	40 e0       	ldi	r20, 0x00	; 0
    6de0:	67 e0       	ldi	r22, 0x07	; 7
    6de2:	8a e0       	ldi	r24, 0x0A	; 10
    6de4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <xQueueGenericCreate>
    6de8:	90 93 6f 14 	sts	0x146F, r25	; 0x80146f <xTimerQueue+0x1>
    6dec:	80 93 6e 14 	sts	0x146E, r24	; 0x80146e <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    6df0:	0f 90       	pop	r0
    6df2:	0f be       	out	0x3f, r0	; 63
    }
    6df4:	00 00       	nop
    6df6:	df 91       	pop	r29
    6df8:	cf 91       	pop	r28
    6dfa:	08 95       	ret

00006dfc <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    6dfc:	cf 93       	push	r28
    6dfe:	df 93       	push	r29
    6e00:	cd b7       	in	r28, 0x3d	; 61
    6e02:	de b7       	in	r29, 0x3e	; 62
}
    6e04:	00 00       	nop
    6e06:	df 91       	pop	r29
    6e08:	cf 91       	pop	r28
    6e0a:	08 95       	ret

00006e0c <prvSetMainLedOn>:

/**
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
    6e0c:	cf 93       	push	r28
    6e0e:	df 93       	push	r29
    6e10:	cd b7       	in	r28, 0x3d	; 61
    6e12:	de b7       	in	r29, 0x3e	; 62
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    6e14:	84 e2       	ldi	r24, 0x24	; 36
    6e16:	90 e0       	ldi	r25, 0x00	; 0
    6e18:	24 e2       	ldi	r18, 0x24	; 36
    6e1a:	30 e0       	ldi	r19, 0x00	; 0
    6e1c:	f9 01       	movw	r30, r18
    6e1e:	20 81       	ld	r18, Z
    6e20:	20 68       	ori	r18, 0x80	; 128
    6e22:	fc 01       	movw	r30, r24
    6e24:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    6e26:	85 e2       	ldi	r24, 0x25	; 37
    6e28:	90 e0       	ldi	r25, 0x00	; 0
    6e2a:	25 e2       	ldi	r18, 0x25	; 37
    6e2c:	30 e0       	ldi	r19, 0x00	; 0
    6e2e:	f9 01       	movw	r30, r18
    6e30:	20 81       	ld	r18, Z
    6e32:	20 68       	ori	r18, 0x80	; 128
    6e34:	fc 01       	movw	r30, r24
    6e36:	20 83       	st	Z, r18
    DDRC  |= _BV(DDC7);
    PORTC |= _BV(PORTC7);       // Main (red PC7) LED on. Main LED on.

#endif

}
    6e38:	00 00       	nop
    6e3a:	df 91       	pop	r29
    6e3c:	cf 91       	pop	r28
    6e3e:	08 95       	ret

00006e40 <prvBlinkMainLed>:

/**
 * Private function to blink board led to use it in application hooks
 */
void prvBlinkMainLed( void ) 
{
    6e40:	cf 93       	push	r28
    6e42:	df 93       	push	r29
    6e44:	cd b7       	in	r28, 0x3d	; 61
    6e46:	de b7       	in	r29, 0x3e	; 62

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    6e48:	83 e2       	ldi	r24, 0x23	; 35
    6e4a:	90 e0       	ldi	r25, 0x00	; 0
    6e4c:	23 e2       	ldi	r18, 0x23	; 35
    6e4e:	30 e0       	ldi	r19, 0x00	; 0
    6e50:	f9 01       	movw	r30, r18
    6e52:	20 81       	ld	r18, Z
    6e54:	20 68       	ori	r18, 0x80	; 128
    6e56:	fc 01       	movw	r30, r24
    6e58:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle.

#endif

}
    6e5a:	00 00       	nop
    6e5c:	df 91       	pop	r29
    6e5e:	cf 91       	pop	r28
    6e60:	08 95       	ret

00006e62 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    6e62:	cf 93       	push	r28
    6e64:	df 93       	push	r29
    6e66:	cd b7       	in	r28, 0x3d	; 61
    6e68:	de b7       	in	r29, 0x3e	; 62
    6e6a:	2e 97       	sbiw	r28, 0x0e	; 14
    6e6c:	0f b6       	in	r0, 0x3f	; 63
    6e6e:	f8 94       	cli
    6e70:	de bf       	out	0x3e, r29	; 62
    6e72:	0f be       	out	0x3f, r0	; 63
    6e74:	cd bf       	out	0x3d, r28	; 61
    prvSetMainLedOn(); // Main LED on.
    6e76:	ca df       	rcall	.-108    	; 0x6e0c <prvSetMainLedOn>
    6e78:	80 e0       	ldi	r24, 0x00	; 0
    6e7a:	90 e0       	ldi	r25, 0x00	; 0
    6e7c:	a8 e4       	ldi	r26, 0x48	; 72
    6e7e:	b2 e4       	ldi	r27, 0x42	; 66
    6e80:	89 83       	std	Y+1, r24	; 0x01
    6e82:	9a 83       	std	Y+2, r25	; 0x02
    6e84:	ab 83       	std	Y+3, r26	; 0x03
    6e86:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6e88:	20 e0       	ldi	r18, 0x00	; 0
    6e8a:	30 e0       	ldi	r19, 0x00	; 0
    6e8c:	4a e7       	ldi	r20, 0x7A	; 122
    6e8e:	55 e4       	ldi	r21, 0x45	; 69
    6e90:	69 81       	ldd	r22, Y+1	; 0x01
    6e92:	7a 81       	ldd	r23, Y+2	; 0x02
    6e94:	8b 81       	ldd	r24, Y+3	; 0x03
    6e96:	9c 81       	ldd	r25, Y+4	; 0x04
    6e98:	5b d1       	rcall	.+694    	; 0x7150 <__mulsf3>
    6e9a:	dc 01       	movw	r26, r24
    6e9c:	cb 01       	movw	r24, r22
    6e9e:	8d 83       	std	Y+5, r24	; 0x05
    6ea0:	9e 83       	std	Y+6, r25	; 0x06
    6ea2:	af 83       	std	Y+7, r26	; 0x07
    6ea4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6ea6:	20 e0       	ldi	r18, 0x00	; 0
    6ea8:	30 e0       	ldi	r19, 0x00	; 0
    6eaa:	40 e8       	ldi	r20, 0x80	; 128
    6eac:	5f e3       	ldi	r21, 0x3F	; 63
    6eae:	6d 81       	ldd	r22, Y+5	; 0x05
    6eb0:	7e 81       	ldd	r23, Y+6	; 0x06
    6eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    6eb4:	98 85       	ldd	r25, Y+8	; 0x08
    6eb6:	cb d0       	rcall	.+406    	; 0x704e <__cmpsf2>
    6eb8:	88 23       	and	r24, r24
    6eba:	2c f4       	brge	.+10     	; 0x6ec6 <vApplicationMallocFailedHook+0x64>
		__ticks = 1;
    6ebc:	81 e0       	ldi	r24, 0x01	; 1
    6ebe:	90 e0       	ldi	r25, 0x00	; 0
    6ec0:	9a 87       	std	Y+10, r25	; 0x0a
    6ec2:	89 87       	std	Y+9, r24	; 0x09
    6ec4:	3b c0       	rjmp	.+118    	; 0x6f3c <vApplicationMallocFailedHook+0xda>
	else if (__tmp > 65535)
    6ec6:	20 e0       	ldi	r18, 0x00	; 0
    6ec8:	3f ef       	ldi	r19, 0xFF	; 255
    6eca:	4f e7       	ldi	r20, 0x7F	; 127
    6ecc:	57 e4       	ldi	r21, 0x47	; 71
    6ece:	6d 81       	ldd	r22, Y+5	; 0x05
    6ed0:	7e 81       	ldd	r23, Y+6	; 0x06
    6ed2:	8f 81       	ldd	r24, Y+7	; 0x07
    6ed4:	98 85       	ldd	r25, Y+8	; 0x08
    6ed6:	38 d1       	rcall	.+624    	; 0x7148 <__gesf2>
    6ed8:	18 16       	cp	r1, r24
    6eda:	3c f5       	brge	.+78     	; 0x6f2a <vApplicationMallocFailedHook+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6edc:	20 e0       	ldi	r18, 0x00	; 0
    6ede:	30 e0       	ldi	r19, 0x00	; 0
    6ee0:	40 e2       	ldi	r20, 0x20	; 32
    6ee2:	51 e4       	ldi	r21, 0x41	; 65
    6ee4:	69 81       	ldd	r22, Y+1	; 0x01
    6ee6:	7a 81       	ldd	r23, Y+2	; 0x02
    6ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    6eea:	9c 81       	ldd	r25, Y+4	; 0x04
    6eec:	31 d1       	rcall	.+610    	; 0x7150 <__mulsf3>
    6eee:	dc 01       	movw	r26, r24
    6ef0:	cb 01       	movw	r24, r22
    6ef2:	bc 01       	movw	r22, r24
    6ef4:	cd 01       	movw	r24, r26
    6ef6:	af d0       	rcall	.+350    	; 0x7056 <__fixunssfsi>
    6ef8:	dc 01       	movw	r26, r24
    6efa:	cb 01       	movw	r24, r22
    6efc:	9a 87       	std	Y+10, r25	; 0x0a
    6efe:	89 87       	std	Y+9, r24	; 0x09
    6f00:	0f c0       	rjmp	.+30     	; 0x6f20 <vApplicationMallocFailedHook+0xbe>
    6f02:	80 e9       	ldi	r24, 0x90	; 144
    6f04:	91 e0       	ldi	r25, 0x01	; 1
    6f06:	9c 87       	std	Y+12, r25	; 0x0c
    6f08:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    6f0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    6f0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    6f0e:	01 97       	sbiw	r24, 0x01	; 1
    6f10:	f1 f7       	brne	.-4      	; 0x6f0e <vApplicationMallocFailedHook+0xac>
    6f12:	9c 87       	std	Y+12, r25	; 0x0c
    6f14:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f16:	89 85       	ldd	r24, Y+9	; 0x09
    6f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f1a:	01 97       	sbiw	r24, 0x01	; 1
    6f1c:	9a 87       	std	Y+10, r25	; 0x0a
    6f1e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f20:	89 85       	ldd	r24, Y+9	; 0x09
    6f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f24:	89 2b       	or	r24, r25
    6f26:	69 f7       	brne	.-38     	; 0x6f02 <vApplicationMallocFailedHook+0xa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f28:	13 c0       	rjmp	.+38     	; 0x6f50 <vApplicationMallocFailedHook+0xee>
    6f2a:	6d 81       	ldd	r22, Y+5	; 0x05
    6f2c:	7e 81       	ldd	r23, Y+6	; 0x06
    6f2e:	8f 81       	ldd	r24, Y+7	; 0x07
    6f30:	98 85       	ldd	r25, Y+8	; 0x08
    6f32:	91 d0       	rcall	.+290    	; 0x7056 <__fixunssfsi>
    6f34:	dc 01       	movw	r26, r24
    6f36:	cb 01       	movw	r24, r22
    6f38:	9a 87       	std	Y+10, r25	; 0x0a
    6f3a:	89 87       	std	Y+9, r24	; 0x09
    6f3c:	89 85       	ldd	r24, Y+9	; 0x09
    6f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f40:	9e 87       	std	Y+14, r25	; 0x0e
    6f42:	8d 87       	std	Y+13, r24	; 0x0d
    6f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f48:	01 97       	sbiw	r24, 0x01	; 1
    6f4a:	f1 f7       	brne	.-4      	; 0x6f48 <vApplicationMallocFailedHook+0xe6>
    6f4c:	9e 87       	std	Y+14, r25	; 0x0e
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    6f4e:	8d 87       	std	Y+13, r24	; 0x0d
    6f50:	77 df       	rcall	.-274    	; 0x6e40 <prvBlinkMainLed>
    }
    6f52:	92 cf       	rjmp	.-220    	; 0x6e78 <vApplicationMallocFailedHook+0x16>

00006f54 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                    char * pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{
    6f54:	cf 93       	push	r28
    6f56:	df 93       	push	r29
    6f58:	cd b7       	in	r28, 0x3d	; 61
    6f5a:	de b7       	in	r29, 0x3e	; 62
    6f5c:	62 97       	sbiw	r28, 0x12	; 18
    6f5e:	0f b6       	in	r0, 0x3f	; 63
    6f60:	f8 94       	cli
    6f62:	de bf       	out	0x3e, r29	; 62
    6f64:	0f be       	out	0x3f, r0	; 63
    6f66:	cd bf       	out	0x3d, r28	; 61
    6f68:	98 8b       	std	Y+16, r25	; 0x10
    6f6a:	8f 87       	std	Y+15, r24	; 0x0f
    6f6c:	7a 8b       	std	Y+18, r23	; 0x12
    6f6e:	69 8b       	std	Y+17, r22	; 0x11

    prvSetMainLedOn(); // Main LED on.
    6f70:	4d df       	rcall	.-358    	; 0x6e0c <prvSetMainLedOn>
    6f72:	80 e0       	ldi	r24, 0x00	; 0
    6f74:	90 e0       	ldi	r25, 0x00	; 0
    6f76:	aa ef       	ldi	r26, 0xFA	; 250
    6f78:	b4 e4       	ldi	r27, 0x44	; 68
    6f7a:	89 83       	std	Y+1, r24	; 0x01
    6f7c:	9a 83       	std	Y+2, r25	; 0x02
    6f7e:	ab 83       	std	Y+3, r26	; 0x03
    6f80:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    6f82:	20 e0       	ldi	r18, 0x00	; 0
    6f84:	30 e0       	ldi	r19, 0x00	; 0
    6f86:	4a e7       	ldi	r20, 0x7A	; 122
    6f88:	55 e4       	ldi	r21, 0x45	; 69
    6f8a:	69 81       	ldd	r22, Y+1	; 0x01
    6f8c:	7a 81       	ldd	r23, Y+2	; 0x02
    6f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    6f90:	9c 81       	ldd	r25, Y+4	; 0x04
    6f92:	de d0       	rcall	.+444    	; 0x7150 <__mulsf3>
    6f94:	dc 01       	movw	r26, r24
    6f96:	cb 01       	movw	r24, r22
    6f98:	8d 83       	std	Y+5, r24	; 0x05
    6f9a:	9e 83       	std	Y+6, r25	; 0x06
    6f9c:	af 83       	std	Y+7, r26	; 0x07
    6f9e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    6fa0:	20 e0       	ldi	r18, 0x00	; 0
    6fa2:	30 e0       	ldi	r19, 0x00	; 0
    6fa4:	40 e8       	ldi	r20, 0x80	; 128
    6fa6:	5f e3       	ldi	r21, 0x3F	; 63
    6fa8:	6d 81       	ldd	r22, Y+5	; 0x05
    6faa:	7e 81       	ldd	r23, Y+6	; 0x06
    6fac:	8f 81       	ldd	r24, Y+7	; 0x07
    6fae:	98 85       	ldd	r25, Y+8	; 0x08
    6fb0:	4e d0       	rcall	.+156    	; 0x704e <__cmpsf2>
    6fb2:	88 23       	and	r24, r24
    6fb4:	2c f4       	brge	.+10     	; 0x6fc0 <vApplicationStackOverflowHook+0x6c>
		__ticks = 1;
    6fb6:	81 e0       	ldi	r24, 0x01	; 1
    6fb8:	90 e0       	ldi	r25, 0x00	; 0
    6fba:	9a 87       	std	Y+10, r25	; 0x0a
    6fbc:	89 87       	std	Y+9, r24	; 0x09
    6fbe:	3b c0       	rjmp	.+118    	; 0x7036 <vApplicationStackOverflowHook+0xe2>
	else if (__tmp > 65535)
    6fc0:	20 e0       	ldi	r18, 0x00	; 0
    6fc2:	3f ef       	ldi	r19, 0xFF	; 255
    6fc4:	4f e7       	ldi	r20, 0x7F	; 127
    6fc6:	57 e4       	ldi	r21, 0x47	; 71
    6fc8:	6d 81       	ldd	r22, Y+5	; 0x05
    6fca:	7e 81       	ldd	r23, Y+6	; 0x06
    6fcc:	8f 81       	ldd	r24, Y+7	; 0x07
    6fce:	98 85       	ldd	r25, Y+8	; 0x08
    6fd0:	bb d0       	rcall	.+374    	; 0x7148 <__gesf2>
    6fd2:	18 16       	cp	r1, r24
    6fd4:	3c f5       	brge	.+78     	; 0x7024 <vApplicationStackOverflowHook+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fd6:	20 e0       	ldi	r18, 0x00	; 0
    6fd8:	30 e0       	ldi	r19, 0x00	; 0
    6fda:	40 e2       	ldi	r20, 0x20	; 32
    6fdc:	51 e4       	ldi	r21, 0x41	; 65
    6fde:	69 81       	ldd	r22, Y+1	; 0x01
    6fe0:	7a 81       	ldd	r23, Y+2	; 0x02
    6fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    6fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    6fe6:	b4 d0       	rcall	.+360    	; 0x7150 <__mulsf3>
    6fe8:	dc 01       	movw	r26, r24
    6fea:	cb 01       	movw	r24, r22
    6fec:	bc 01       	movw	r22, r24
    6fee:	cd 01       	movw	r24, r26
    6ff0:	32 d0       	rcall	.+100    	; 0x7056 <__fixunssfsi>
    6ff2:	dc 01       	movw	r26, r24
    6ff4:	cb 01       	movw	r24, r22
    6ff6:	9a 87       	std	Y+10, r25	; 0x0a
    6ff8:	89 87       	std	Y+9, r24	; 0x09
    6ffa:	0f c0       	rjmp	.+30     	; 0x701a <vApplicationStackOverflowHook+0xc6>
    6ffc:	80 e9       	ldi	r24, 0x90	; 144
    6ffe:	91 e0       	ldi	r25, 0x01	; 1
    7000:	9c 87       	std	Y+12, r25	; 0x0c
    7002:	8b 87       	std	Y+11, r24	; 0x0b
    7004:	8b 85       	ldd	r24, Y+11	; 0x0b
    7006:	9c 85       	ldd	r25, Y+12	; 0x0c
    7008:	01 97       	sbiw	r24, 0x01	; 1
    700a:	f1 f7       	brne	.-4      	; 0x7008 <vApplicationStackOverflowHook+0xb4>
    700c:	9c 87       	std	Y+12, r25	; 0x0c
    700e:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7010:	89 85       	ldd	r24, Y+9	; 0x09
    7012:	9a 85       	ldd	r25, Y+10	; 0x0a
    7014:	01 97       	sbiw	r24, 0x01	; 1
    7016:	9a 87       	std	Y+10, r25	; 0x0a
    7018:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    701a:	89 85       	ldd	r24, Y+9	; 0x09
    701c:	9a 85       	ldd	r25, Y+10	; 0x0a
    701e:	89 2b       	or	r24, r25
    7020:	69 f7       	brne	.-38     	; 0x6ffc <vApplicationStackOverflowHook+0xa8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7022:	13 c0       	rjmp	.+38     	; 0x704a <vApplicationStackOverflowHook+0xf6>
    7024:	6d 81       	ldd	r22, Y+5	; 0x05
    7026:	7e 81       	ldd	r23, Y+6	; 0x06
    7028:	8f 81       	ldd	r24, Y+7	; 0x07
    702a:	98 85       	ldd	r25, Y+8	; 0x08
    702c:	14 d0       	rcall	.+40     	; 0x7056 <__fixunssfsi>
    702e:	dc 01       	movw	r26, r24
    7030:	cb 01       	movw	r24, r22
    7032:	9a 87       	std	Y+10, r25	; 0x0a
    7034:	89 87       	std	Y+9, r24	; 0x09
    7036:	89 85       	ldd	r24, Y+9	; 0x09
    7038:	9a 85       	ldd	r25, Y+10	; 0x0a
    703a:	9e 87       	std	Y+14, r25	; 0x0e
    703c:	8d 87       	std	Y+13, r24	; 0x0d
    703e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7040:	9e 85       	ldd	r25, Y+14	; 0x0e
    7042:	01 97       	sbiw	r24, 0x01	; 1
    7044:	f1 f7       	brne	.-4      	; 0x7042 <vApplicationStackOverflowHook+0xee>
    7046:	9e 87       	std	Y+14, r25	; 0x0e

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    7048:	8d 87       	std	Y+13, r24	; 0x0d
    704a:	fa de       	rcall	.-524    	; 0x6e40 <prvBlinkMainLed>
    }
    704c:	92 cf       	rjmp	.-220    	; 0x6f72 <vApplicationStackOverflowHook+0x1e>

0000704e <__cmpsf2>:
    704e:	2f d0       	rcall	.+94     	; 0x70ae <__fp_cmp>
    7050:	08 f4       	brcc	.+2      	; 0x7054 <__cmpsf2+0x6>
    7052:	81 e0       	ldi	r24, 0x01	; 1
    7054:	08 95       	ret

00007056 <__fixunssfsi>:
    7056:	57 d0       	rcall	.+174    	; 0x7106 <__fp_splitA>
    7058:	88 f0       	brcs	.+34     	; 0x707c <__fixunssfsi+0x26>
    705a:	9f 57       	subi	r25, 0x7F	; 127
    705c:	90 f0       	brcs	.+36     	; 0x7082 <__fixunssfsi+0x2c>
    705e:	b9 2f       	mov	r27, r25
    7060:	99 27       	eor	r25, r25
    7062:	b7 51       	subi	r27, 0x17	; 23
    7064:	a0 f0       	brcs	.+40     	; 0x708e <__fixunssfsi+0x38>
    7066:	d1 f0       	breq	.+52     	; 0x709c <__fixunssfsi+0x46>
    7068:	66 0f       	add	r22, r22
    706a:	77 1f       	adc	r23, r23
    706c:	88 1f       	adc	r24, r24
    706e:	99 1f       	adc	r25, r25
    7070:	1a f0       	brmi	.+6      	; 0x7078 <__fixunssfsi+0x22>
    7072:	ba 95       	dec	r27
    7074:	c9 f7       	brne	.-14     	; 0x7068 <__fixunssfsi+0x12>
    7076:	12 c0       	rjmp	.+36     	; 0x709c <__fixunssfsi+0x46>
    7078:	b1 30       	cpi	r27, 0x01	; 1
    707a:	81 f0       	breq	.+32     	; 0x709c <__fixunssfsi+0x46>
    707c:	5e d0       	rcall	.+188    	; 0x713a <__fp_zero>
    707e:	b1 e0       	ldi	r27, 0x01	; 1
    7080:	08 95       	ret
    7082:	5b c0       	rjmp	.+182    	; 0x713a <__fp_zero>
    7084:	67 2f       	mov	r22, r23
    7086:	78 2f       	mov	r23, r24
    7088:	88 27       	eor	r24, r24
    708a:	b8 5f       	subi	r27, 0xF8	; 248
    708c:	39 f0       	breq	.+14     	; 0x709c <__fixunssfsi+0x46>
    708e:	b9 3f       	cpi	r27, 0xF9	; 249
    7090:	cc f3       	brlt	.-14     	; 0x7084 <__fixunssfsi+0x2e>
    7092:	86 95       	lsr	r24
    7094:	77 95       	ror	r23
    7096:	67 95       	ror	r22
    7098:	b3 95       	inc	r27
    709a:	d9 f7       	brne	.-10     	; 0x7092 <__fixunssfsi+0x3c>
    709c:	3e f4       	brtc	.+14     	; 0x70ac <__fixunssfsi+0x56>
    709e:	90 95       	com	r25
    70a0:	80 95       	com	r24
    70a2:	70 95       	com	r23
    70a4:	61 95       	neg	r22
    70a6:	7f 4f       	sbci	r23, 0xFF	; 255
    70a8:	8f 4f       	sbci	r24, 0xFF	; 255
    70aa:	9f 4f       	sbci	r25, 0xFF	; 255
    70ac:	08 95       	ret

000070ae <__fp_cmp>:
    70ae:	99 0f       	add	r25, r25
    70b0:	00 08       	sbc	r0, r0
    70b2:	55 0f       	add	r21, r21
    70b4:	aa 0b       	sbc	r26, r26
    70b6:	e0 e8       	ldi	r30, 0x80	; 128
    70b8:	fe ef       	ldi	r31, 0xFE	; 254
    70ba:	16 16       	cp	r1, r22
    70bc:	17 06       	cpc	r1, r23
    70be:	e8 07       	cpc	r30, r24
    70c0:	f9 07       	cpc	r31, r25
    70c2:	c0 f0       	brcs	.+48     	; 0x70f4 <__fp_cmp+0x46>
    70c4:	12 16       	cp	r1, r18
    70c6:	13 06       	cpc	r1, r19
    70c8:	e4 07       	cpc	r30, r20
    70ca:	f5 07       	cpc	r31, r21
    70cc:	98 f0       	brcs	.+38     	; 0x70f4 <__fp_cmp+0x46>
    70ce:	62 1b       	sub	r22, r18
    70d0:	73 0b       	sbc	r23, r19
    70d2:	84 0b       	sbc	r24, r20
    70d4:	95 0b       	sbc	r25, r21
    70d6:	39 f4       	brne	.+14     	; 0x70e6 <__fp_cmp+0x38>
    70d8:	0a 26       	eor	r0, r26
    70da:	61 f0       	breq	.+24     	; 0x70f4 <__fp_cmp+0x46>
    70dc:	23 2b       	or	r18, r19
    70de:	24 2b       	or	r18, r20
    70e0:	25 2b       	or	r18, r21
    70e2:	21 f4       	brne	.+8      	; 0x70ec <__fp_cmp+0x3e>
    70e4:	08 95       	ret
    70e6:	0a 26       	eor	r0, r26
    70e8:	09 f4       	brne	.+2      	; 0x70ec <__fp_cmp+0x3e>
    70ea:	a1 40       	sbci	r26, 0x01	; 1
    70ec:	a6 95       	lsr	r26
    70ee:	8f ef       	ldi	r24, 0xFF	; 255
    70f0:	81 1d       	adc	r24, r1
    70f2:	81 1d       	adc	r24, r1
    70f4:	08 95       	ret

000070f6 <__fp_split3>:
    70f6:	57 fd       	sbrc	r21, 7
    70f8:	90 58       	subi	r25, 0x80	; 128
    70fa:	44 0f       	add	r20, r20
    70fc:	55 1f       	adc	r21, r21
    70fe:	59 f0       	breq	.+22     	; 0x7116 <__fp_splitA+0x10>
    7100:	5f 3f       	cpi	r21, 0xFF	; 255
    7102:	71 f0       	breq	.+28     	; 0x7120 <__fp_splitA+0x1a>
    7104:	47 95       	ror	r20

00007106 <__fp_splitA>:
    7106:	88 0f       	add	r24, r24
    7108:	97 fb       	bst	r25, 7
    710a:	99 1f       	adc	r25, r25
    710c:	61 f0       	breq	.+24     	; 0x7126 <__fp_splitA+0x20>
    710e:	9f 3f       	cpi	r25, 0xFF	; 255
    7110:	79 f0       	breq	.+30     	; 0x7130 <__fp_splitA+0x2a>
    7112:	87 95       	ror	r24
    7114:	08 95       	ret
    7116:	12 16       	cp	r1, r18
    7118:	13 06       	cpc	r1, r19
    711a:	14 06       	cpc	r1, r20
    711c:	55 1f       	adc	r21, r21
    711e:	f2 cf       	rjmp	.-28     	; 0x7104 <__fp_split3+0xe>
    7120:	46 95       	lsr	r20
    7122:	f1 df       	rcall	.-30     	; 0x7106 <__fp_splitA>
    7124:	08 c0       	rjmp	.+16     	; 0x7136 <__fp_splitA+0x30>
    7126:	16 16       	cp	r1, r22
    7128:	17 06       	cpc	r1, r23
    712a:	18 06       	cpc	r1, r24
    712c:	99 1f       	adc	r25, r25
    712e:	f1 cf       	rjmp	.-30     	; 0x7112 <__fp_splitA+0xc>
    7130:	86 95       	lsr	r24
    7132:	71 05       	cpc	r23, r1
    7134:	61 05       	cpc	r22, r1
    7136:	08 94       	sec
    7138:	08 95       	ret

0000713a <__fp_zero>:
    713a:	e8 94       	clt

0000713c <__fp_szero>:
    713c:	bb 27       	eor	r27, r27
    713e:	66 27       	eor	r22, r22
    7140:	77 27       	eor	r23, r23
    7142:	cb 01       	movw	r24, r22
    7144:	97 f9       	bld	r25, 7
    7146:	08 95       	ret

00007148 <__gesf2>:
    7148:	b2 df       	rcall	.-156    	; 0x70ae <__fp_cmp>
    714a:	08 f4       	brcc	.+2      	; 0x714e <__gesf2+0x6>
    714c:	8f ef       	ldi	r24, 0xFF	; 255
    714e:	08 95       	ret

00007150 <__mulsf3>:
    7150:	0b d0       	rcall	.+22     	; 0x7168 <__mulsf3x>
    7152:	78 c0       	rjmp	.+240    	; 0x7244 <__fp_round>
    7154:	69 d0       	rcall	.+210    	; 0x7228 <__fp_pscA>
    7156:	28 f0       	brcs	.+10     	; 0x7162 <__mulsf3+0x12>
    7158:	6e d0       	rcall	.+220    	; 0x7236 <__fp_pscB>
    715a:	18 f0       	brcs	.+6      	; 0x7162 <__mulsf3+0x12>
    715c:	95 23       	and	r25, r21
    715e:	09 f0       	breq	.+2      	; 0x7162 <__mulsf3+0x12>
    7160:	5a c0       	rjmp	.+180    	; 0x7216 <__fp_inf>
    7162:	5f c0       	rjmp	.+190    	; 0x7222 <__fp_nan>
    7164:	11 24       	eor	r1, r1
    7166:	ea cf       	rjmp	.-44     	; 0x713c <__fp_szero>

00007168 <__mulsf3x>:
    7168:	c6 df       	rcall	.-116    	; 0x70f6 <__fp_split3>
    716a:	a0 f3       	brcs	.-24     	; 0x7154 <__mulsf3+0x4>

0000716c <__mulsf3_pse>:
    716c:	95 9f       	mul	r25, r21
    716e:	d1 f3       	breq	.-12     	; 0x7164 <__mulsf3+0x14>
    7170:	95 0f       	add	r25, r21
    7172:	50 e0       	ldi	r21, 0x00	; 0
    7174:	55 1f       	adc	r21, r21
    7176:	62 9f       	mul	r22, r18
    7178:	f0 01       	movw	r30, r0
    717a:	72 9f       	mul	r23, r18
    717c:	bb 27       	eor	r27, r27
    717e:	f0 0d       	add	r31, r0
    7180:	b1 1d       	adc	r27, r1
    7182:	63 9f       	mul	r22, r19
    7184:	aa 27       	eor	r26, r26
    7186:	f0 0d       	add	r31, r0
    7188:	b1 1d       	adc	r27, r1
    718a:	aa 1f       	adc	r26, r26
    718c:	64 9f       	mul	r22, r20
    718e:	66 27       	eor	r22, r22
    7190:	b0 0d       	add	r27, r0
    7192:	a1 1d       	adc	r26, r1
    7194:	66 1f       	adc	r22, r22
    7196:	82 9f       	mul	r24, r18
    7198:	22 27       	eor	r18, r18
    719a:	b0 0d       	add	r27, r0
    719c:	a1 1d       	adc	r26, r1
    719e:	62 1f       	adc	r22, r18
    71a0:	73 9f       	mul	r23, r19
    71a2:	b0 0d       	add	r27, r0
    71a4:	a1 1d       	adc	r26, r1
    71a6:	62 1f       	adc	r22, r18
    71a8:	83 9f       	mul	r24, r19
    71aa:	a0 0d       	add	r26, r0
    71ac:	61 1d       	adc	r22, r1
    71ae:	22 1f       	adc	r18, r18
    71b0:	74 9f       	mul	r23, r20
    71b2:	33 27       	eor	r19, r19
    71b4:	a0 0d       	add	r26, r0
    71b6:	61 1d       	adc	r22, r1
    71b8:	23 1f       	adc	r18, r19
    71ba:	84 9f       	mul	r24, r20
    71bc:	60 0d       	add	r22, r0
    71be:	21 1d       	adc	r18, r1
    71c0:	82 2f       	mov	r24, r18
    71c2:	76 2f       	mov	r23, r22
    71c4:	6a 2f       	mov	r22, r26
    71c6:	11 24       	eor	r1, r1
    71c8:	9f 57       	subi	r25, 0x7F	; 127
    71ca:	50 40       	sbci	r21, 0x00	; 0
    71cc:	8a f0       	brmi	.+34     	; 0x71f0 <__mulsf3_pse+0x84>
    71ce:	e1 f0       	breq	.+56     	; 0x7208 <__mulsf3_pse+0x9c>
    71d0:	88 23       	and	r24, r24
    71d2:	4a f0       	brmi	.+18     	; 0x71e6 <__mulsf3_pse+0x7a>
    71d4:	ee 0f       	add	r30, r30
    71d6:	ff 1f       	adc	r31, r31
    71d8:	bb 1f       	adc	r27, r27
    71da:	66 1f       	adc	r22, r22
    71dc:	77 1f       	adc	r23, r23
    71de:	88 1f       	adc	r24, r24
    71e0:	91 50       	subi	r25, 0x01	; 1
    71e2:	50 40       	sbci	r21, 0x00	; 0
    71e4:	a9 f7       	brne	.-22     	; 0x71d0 <__mulsf3_pse+0x64>
    71e6:	9e 3f       	cpi	r25, 0xFE	; 254
    71e8:	51 05       	cpc	r21, r1
    71ea:	70 f0       	brcs	.+28     	; 0x7208 <__mulsf3_pse+0x9c>
    71ec:	14 c0       	rjmp	.+40     	; 0x7216 <__fp_inf>
    71ee:	a6 cf       	rjmp	.-180    	; 0x713c <__fp_szero>
    71f0:	5f 3f       	cpi	r21, 0xFF	; 255
    71f2:	ec f3       	brlt	.-6      	; 0x71ee <__mulsf3_pse+0x82>
    71f4:	98 3e       	cpi	r25, 0xE8	; 232
    71f6:	dc f3       	brlt	.-10     	; 0x71ee <__mulsf3_pse+0x82>
    71f8:	86 95       	lsr	r24
    71fa:	77 95       	ror	r23
    71fc:	67 95       	ror	r22
    71fe:	b7 95       	ror	r27
    7200:	f7 95       	ror	r31
    7202:	e7 95       	ror	r30
    7204:	9f 5f       	subi	r25, 0xFF	; 255
    7206:	c1 f7       	brne	.-16     	; 0x71f8 <__mulsf3_pse+0x8c>
    7208:	fe 2b       	or	r31, r30
    720a:	88 0f       	add	r24, r24
    720c:	91 1d       	adc	r25, r1
    720e:	96 95       	lsr	r25
    7210:	87 95       	ror	r24
    7212:	97 f9       	bld	r25, 7
    7214:	08 95       	ret

00007216 <__fp_inf>:
    7216:	97 f9       	bld	r25, 7
    7218:	9f 67       	ori	r25, 0x7F	; 127
    721a:	80 e8       	ldi	r24, 0x80	; 128
    721c:	70 e0       	ldi	r23, 0x00	; 0
    721e:	60 e0       	ldi	r22, 0x00	; 0
    7220:	08 95       	ret

00007222 <__fp_nan>:
    7222:	9f ef       	ldi	r25, 0xFF	; 255
    7224:	80 ec       	ldi	r24, 0xC0	; 192
    7226:	08 95       	ret

00007228 <__fp_pscA>:
    7228:	00 24       	eor	r0, r0
    722a:	0a 94       	dec	r0
    722c:	16 16       	cp	r1, r22
    722e:	17 06       	cpc	r1, r23
    7230:	18 06       	cpc	r1, r24
    7232:	09 06       	cpc	r0, r25
    7234:	08 95       	ret

00007236 <__fp_pscB>:
    7236:	00 24       	eor	r0, r0
    7238:	0a 94       	dec	r0
    723a:	12 16       	cp	r1, r18
    723c:	13 06       	cpc	r1, r19
    723e:	14 06       	cpc	r1, r20
    7240:	05 06       	cpc	r0, r21
    7242:	08 95       	ret

00007244 <__fp_round>:
    7244:	09 2e       	mov	r0, r25
    7246:	03 94       	inc	r0
    7248:	00 0c       	add	r0, r0
    724a:	11 f4       	brne	.+4      	; 0x7250 <__fp_round+0xc>
    724c:	88 23       	and	r24, r24
    724e:	52 f0       	brmi	.+20     	; 0x7264 <__fp_round+0x20>
    7250:	bb 0f       	add	r27, r27
    7252:	40 f4       	brcc	.+16     	; 0x7264 <__fp_round+0x20>
    7254:	bf 2b       	or	r27, r31
    7256:	11 f4       	brne	.+4      	; 0x725c <__fp_round+0x18>
    7258:	60 ff       	sbrs	r22, 0
    725a:	04 c0       	rjmp	.+8      	; 0x7264 <__fp_round+0x20>
    725c:	6f 5f       	subi	r22, 0xFF	; 255
    725e:	7f 4f       	sbci	r23, 0xFF	; 255
    7260:	8f 4f       	sbci	r24, 0xFF	; 255
    7262:	9f 4f       	sbci	r25, 0xFF	; 255
    7264:	08 95       	ret

00007266 <_serialCallBack>:
    7266:	0f 93       	push	r16
    7268:	1f 93       	push	r17
    726a:	cf 93       	push	r28
    726c:	df 93       	push	r29
    726e:	1f 92       	push	r1
    7270:	1f 92       	push	r1
    7272:	cd b7       	in	r28, 0x3d	; 61
    7274:	de b7       	in	r29, 0x3e	; 62
    7276:	8c 01       	movw	r16, r24
    7278:	19 82       	std	Y+1, r1	; 0x01
    727a:	2d c0       	rjmp	.+90     	; 0x72d6 <_serialCallBack+0x70>
    727c:	e0 91 da 14 	lds	r30, 0x14DA	; 0x8014da <rec_buf_inp.2878>
    7280:	ec 32       	cpi	r30, 0x2C	; 44
    7282:	50 f4       	brcc	.+20     	; 0x7298 <_serialCallBack+0x32>
    7284:	81 e0       	ldi	r24, 0x01	; 1
    7286:	8e 0f       	add	r24, r30
    7288:	80 93 da 14 	sts	0x14DA, r24	; 0x8014da <rec_buf_inp.2878>
    728c:	f0 e0       	ldi	r31, 0x00	; 0
    728e:	e4 5f       	subi	r30, 0xF4	; 244
    7290:	fa 4e       	sbci	r31, 0xEA	; 234
    7292:	8a 81       	ldd	r24, Y+2	; 0x02
    7294:	80 83       	st	Z, r24
    7296:	02 c0       	rjmp	.+4      	; 0x729c <_serialCallBack+0x36>
    7298:	10 92 da 14 	sts	0x14DA, r1	; 0x8014da <rec_buf_inp.2878>
    729c:	8a 81       	ldd	r24, Y+2	; 0x02
    729e:	8a 30       	cpi	r24, 0x0A	; 10
    72a0:	d1 f4       	brne	.+52     	; 0x72d6 <_serialCallBack+0x70>
    72a2:	40 91 da 14 	lds	r20, 0x14DA	; 0x8014da <rec_buf_inp.2878>
    72a6:	50 e0       	ldi	r21, 0x00	; 0
    72a8:	fa 01       	movw	r30, r20
    72aa:	e6 5f       	subi	r30, 0xF6	; 246
    72ac:	fa 4e       	sbci	r31, 0xEA	; 234
    72ae:	10 82       	st	Z, r1
    72b0:	41 50       	subi	r20, 0x01	; 1
    72b2:	51 09       	sbc	r21, r1
    72b4:	9e 01       	movw	r18, r28
    72b6:	2f 5f       	subi	r18, 0xFF	; 255
    72b8:	3f 4f       	sbci	r19, 0xFF	; 255
    72ba:	6c e0       	ldi	r22, 0x0C	; 12
    72bc:	75 e1       	ldi	r23, 0x15	; 21
    72be:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <_serialReplyBufferHandle>
    72c2:	90 91 de 14 	lds	r25, 0x14DE	; 0x8014de <_serialReplyBufferHandle+0x1>
    72c6:	0e 94 1a 18 	call	0x3034	; 0x3034 <xStreamBufferSendFromISR>
    72ca:	89 81       	ldd	r24, Y+1	; 0x01
    72cc:	81 11       	cpse	r24, r1
    72ce:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <vPortYield>
    72d2:	10 92 da 14 	sts	0x14DA, r1	; 0x8014da <rec_buf_inp.2878>
    72d6:	be 01       	movw	r22, r28
    72d8:	6e 5f       	subi	r22, 0xFE	; 254
    72da:	7f 4f       	sbci	r23, 0xFF	; 255
    72dc:	c8 01       	movw	r24, r16
    72de:	32 d6       	rcall	.+3172   	; 0x7f44 <serial_getByte>
    72e0:	88 23       	and	r24, r24
    72e2:	61 f2       	breq	.-104    	; 0x727c <_serialCallBack+0x16>
    72e4:	0f 90       	pop	r0
    72e6:	0f 90       	pop	r0
    72e8:	df 91       	pop	r29
    72ea:	cf 91       	pop	r28
    72ec:	1f 91       	pop	r17
    72ee:	0f 91       	pop	r16
    72f0:	08 95       	ret

000072f2 <_uploadMessage>:
    72f2:	0f 93       	push	r16
    72f4:	1f 93       	push	r17
    72f6:	cf 93       	push	r28
    72f8:	df 93       	push	r29
    72fa:	8c 01       	movw	r16, r24
    72fc:	eb 01       	movw	r28, r22
    72fe:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <_serialReplyBufferHandle>
    7302:	90 91 de 14 	lds	r25, 0x14DE	; 0x8014de <_serialReplyBufferHandle+0x1>
    7306:	0e 94 84 16 	call	0x2d08	; 0x2d08 <xStreamBufferReset>
    730a:	b8 01       	movw	r22, r16
    730c:	86 e7       	ldi	r24, 0x76	; 118
    730e:	94 e1       	ldi	r25, 0x14	; 20
    7310:	0e 94 b8 46 	call	0x8d70	; 0x8d70 <strcpy>
    7314:	20 97       	sbiw	r28, 0x00	; 0
    7316:	79 f0       	breq	.+30     	; 0x7336 <_uploadMessage+0x44>
    7318:	e6 e7       	ldi	r30, 0x76	; 118
    731a:	f4 e1       	ldi	r31, 0x14	; 20
    731c:	01 90       	ld	r0, Z+
    731e:	00 20       	and	r0, r0
    7320:	e9 f7       	brne	.-6      	; 0x731c <_uploadMessage+0x2a>
    7322:	31 97       	sbiw	r30, 0x01	; 1
    7324:	80 e2       	ldi	r24, 0x20	; 32
    7326:	90 e0       	ldi	r25, 0x00	; 0
    7328:	91 83       	std	Z+1, r25	; 0x01
    732a:	80 83       	st	Z, r24
    732c:	be 01       	movw	r22, r28
    732e:	86 e7       	ldi	r24, 0x76	; 118
    7330:	94 e1       	ldi	r25, 0x14	; 20
    7332:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <strcat>
    7336:	e6 e7       	ldi	r30, 0x76	; 118
    7338:	f4 e1       	ldi	r31, 0x14	; 20
    733a:	df 01       	movw	r26, r30
    733c:	0d 90       	ld	r0, X+
    733e:	00 20       	and	r0, r0
    7340:	e9 f7       	brne	.-6      	; 0x733c <_uploadMessage+0x4a>
    7342:	11 97       	sbiw	r26, 0x01	; 1
    7344:	8d e0       	ldi	r24, 0x0D	; 13
    7346:	9a e0       	ldi	r25, 0x0A	; 10
    7348:	11 96       	adiw	r26, 0x01	; 1
    734a:	9c 93       	st	X, r25
    734c:	8e 93       	st	-X, r24
    734e:	12 96       	adiw	r26, 0x02	; 2
    7350:	1c 92       	st	X, r1
    7352:	01 90       	ld	r0, Z+
    7354:	00 20       	and	r0, r0
    7356:	e9 f7       	brne	.-6      	; 0x7352 <_uploadMessage+0x60>
    7358:	31 97       	sbiw	r30, 0x01	; 1
    735a:	e6 57       	subi	r30, 0x76	; 118
    735c:	f4 41       	sbci	r31, 0x14	; 20
    735e:	ae 2f       	mov	r26, r30
    7360:	86 e7       	ldi	r24, 0x76	; 118
    7362:	94 e1       	ldi	r25, 0x14	; 20
    7364:	ac 01       	movw	r20, r24
    7366:	6a 2f       	mov	r22, r26
    7368:	80 91 df 14 	lds	r24, 0x14DF	; 0x8014df <_rn2483_serial>
    736c:	90 91 e0 14 	lds	r25, 0x14E0	; 0x8014e0 <_rn2483_serial+0x1>
    7370:	94 d5       	rcall	.+2856   	; 0x7e9a <serial_sendBytes>
    7372:	81 11       	cpse	r24, r1
    7374:	11 c0       	rjmp	.+34     	; 0x7398 <_uploadMessage+0xa6>
    7376:	08 e2       	ldi	r16, 0x28	; 40
    7378:	15 e0       	ldi	r17, 0x05	; 5
    737a:	20 e0       	ldi	r18, 0x00	; 0
    737c:	30 e0       	ldi	r19, 0x00	; 0
    737e:	4d e2       	ldi	r20, 0x2D	; 45
    7380:	50 e0       	ldi	r21, 0x00	; 0
    7382:	66 e6       	ldi	r22, 0x66	; 102
    7384:	75 e1       	ldi	r23, 0x15	; 21
    7386:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <_serialReplyBufferHandle>
    738a:	90 91 de 14 	lds	r25, 0x14DE	; 0x8014de <_serialReplyBufferHandle+0x1>
    738e:	0e 94 07 19 	call	0x320e	; 0x320e <xStreamBufferReceive>
    7392:	86 e6       	ldi	r24, 0x66	; 102
    7394:	95 e1       	ldi	r25, 0x15	; 21
    7396:	02 c0       	rjmp	.+4      	; 0x739c <_uploadMessage+0xaa>
    7398:	80 e0       	ldi	r24, 0x00	; 0
    739a:	90 e0       	ldi	r25, 0x00	; 0
    739c:	df 91       	pop	r29
    739e:	cf 91       	pop	r28
    73a0:	1f 91       	pop	r17
    73a2:	0f 91       	pop	r16
    73a4:	08 95       	ret

000073a6 <_reply2ReturnCode>:
    73a6:	2f 92       	push	r2
    73a8:	3f 92       	push	r3
    73aa:	4f 92       	push	r4
    73ac:	5f 92       	push	r5
    73ae:	6f 92       	push	r6
    73b0:	7f 92       	push	r7
    73b2:	8f 92       	push	r8
    73b4:	9f 92       	push	r9
    73b6:	af 92       	push	r10
    73b8:	bf 92       	push	r11
    73ba:	cf 92       	push	r12
    73bc:	df 92       	push	r13
    73be:	ef 92       	push	r14
    73c0:	ff 92       	push	r15
    73c2:	0f 93       	push	r16
    73c4:	1f 93       	push	r17
    73c6:	cf 93       	push	r28
    73c8:	df 93       	push	r29
    73ca:	5c 01       	movw	r10, r24
    73cc:	fc 01       	movw	r30, r24
    73ce:	01 90       	ld	r0, Z+
    73d0:	00 20       	and	r0, r0
    73d2:	e9 f7       	brne	.-6      	; 0x73ce <_reply2ReturnCode+0x28>
    73d4:	31 97       	sbiw	r30, 0x01	; 1
    73d6:	6f 01       	movw	r12, r30
    73d8:	c8 1a       	sub	r12, r24
    73da:	d9 0a       	sbc	r13, r25
    73dc:	5c 2c       	mov	r5, r12
    73de:	0f 2e       	mov	r0, r31
    73e0:	f7 e1       	ldi	r31, 0x17	; 23
    73e2:	8f 2e       	mov	r8, r31
    73e4:	f9 e0       	ldi	r31, 0x09	; 9
    73e6:	9f 2e       	mov	r9, r31
    73e8:	f0 2d       	mov	r31, r0
    73ea:	e1 2c       	mov	r14, r1
    73ec:	f1 2c       	mov	r15, r1
    73ee:	4c 2c       	mov	r4, r12
    73f0:	37 01       	movw	r6, r14
    73f2:	f4 01       	movw	r30, r8
    73f4:	01 81       	ldd	r16, Z+1	; 0x01
    73f6:	12 81       	ldd	r17, Z+2	; 0x02
    73f8:	e8 01       	movw	r28, r16
    73fa:	09 90       	ld	r0, Y+
    73fc:	00 20       	and	r0, r0
    73fe:	e9 f7       	brne	.-6      	; 0x73fa <_reply2ReturnCode+0x54>
    7400:	21 97       	sbiw	r28, 0x01	; 1
    7402:	c0 1b       	sub	r28, r16
    7404:	d1 0b       	sbc	r29, r17
    7406:	3c 2e       	mov	r3, r28
    7408:	f9 e0       	ldi	r31, 0x09	; 9
    740a:	cf 16       	cp	r12, r31
    740c:	d1 04       	cpc	r13, r1
    740e:	58 f0       	brcs	.+22     	; 0x7426 <_reply2ReturnCode+0x80>
    7410:	f4 01       	movw	r30, r8
    7412:	20 80       	ld	r2, Z
    7414:	fe e0       	ldi	r31, 0x0E	; 14
    7416:	2f 12       	cpse	r2, r31
    7418:	06 c0       	rjmp	.+12     	; 0x7426 <_reply2ReturnCode+0x80>
    741a:	b8 01       	movw	r22, r16
    741c:	c5 01       	movw	r24, r10
    741e:	0e 94 88 46 	call	0x8d10	; 0x8d10 <strcasestr>
    7422:	89 2b       	or	r24, r25
    7424:	09 f5       	brne	.+66     	; 0x7468 <_reply2ReturnCode+0xc2>
    7426:	44 2d       	mov	r20, r4
    7428:	35 14       	cp	r3, r5
    742a:	08 f4       	brcc	.+2      	; 0x742e <_reply2ReturnCode+0x88>
    742c:	4c 2f       	mov	r20, r28
    742e:	50 e0       	ldi	r21, 0x00	; 0
    7430:	b8 01       	movw	r22, r16
    7432:	c5 01       	movw	r24, r10
    7434:	0e 94 bf 46 	call	0x8d7e	; 0x8d7e <strncasecmp>
    7438:	89 2b       	or	r24, r25
    743a:	49 f4       	brne	.+18     	; 0x744e <_reply2ReturnCode+0xa8>
    743c:	f3 01       	movw	r30, r6
    743e:	ee 0f       	add	r30, r30
    7440:	ff 1f       	adc	r31, r31
    7442:	e6 0d       	add	r30, r6
    7444:	f7 1d       	adc	r31, r7
    7446:	e9 5e       	subi	r30, 0xE9	; 233
    7448:	f6 4f       	sbci	r31, 0xF6	; 246
    744a:	20 80       	ld	r2, Z
    744c:	0d c0       	rjmp	.+26     	; 0x7468 <_reply2ReturnCode+0xc2>
    744e:	8f ef       	ldi	r24, 0xFF	; 255
    7450:	e8 1a       	sub	r14, r24
    7452:	f8 0a       	sbc	r15, r24
    7454:	e3 e0       	ldi	r30, 0x03	; 3
    7456:	8e 0e       	add	r8, r30
    7458:	91 1c       	adc	r9, r1
    745a:	f1 e1       	ldi	r31, 0x11	; 17
    745c:	ef 16       	cp	r14, r31
    745e:	f1 04       	cpc	r15, r1
    7460:	39 f6       	brne	.-114    	; 0x73f0 <_reply2ReturnCode+0x4a>
    7462:	68 94       	set
    7464:	22 24       	eor	r2, r2
    7466:	24 f8       	bld	r2, 4
    7468:	82 2d       	mov	r24, r2
    746a:	df 91       	pop	r29
    746c:	cf 91       	pop	r28
    746e:	1f 91       	pop	r17
    7470:	0f 91       	pop	r16
    7472:	ff 90       	pop	r15
    7474:	ef 90       	pop	r14
    7476:	df 90       	pop	r13
    7478:	cf 90       	pop	r12
    747a:	bf 90       	pop	r11
    747c:	af 90       	pop	r10
    747e:	9f 90       	pop	r9
    7480:	8f 90       	pop	r8
    7482:	7f 90       	pop	r7
    7484:	6f 90       	pop	r6
    7486:	5f 90       	pop	r5
    7488:	4f 90       	pop	r4
    748a:	3f 90       	pop	r3
    748c:	2f 90       	pop	r2
    748e:	08 95       	ret

00007490 <_uploadMessageRc>:
    7490:	30 df       	rcall	.-416    	; 0x72f2 <_uploadMessage>
    7492:	89 cf       	rjmp	.-238    	; 0x73a6 <_reply2ReturnCode>
    7494:	08 95       	ret

00007496 <lora_driver_flushBuffers>:
    7496:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <_serialReplyBufferHandle>
    749a:	90 91 de 14 	lds	r25, 0x14DE	; 0x8014de <_serialReplyBufferHandle+0x1>
    749e:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <xStreamBufferReset>
    74a2:	08 95       	ret

000074a4 <lora_driver_initialise>:
    74a4:	8f 92       	push	r8
    74a6:	9f 92       	push	r9
    74a8:	af 92       	push	r10
    74aa:	cf 92       	push	r12
    74ac:	ef 92       	push	r14
    74ae:	0f 93       	push	r16
    74b0:	1f 93       	push	r17
    74b2:	cf 93       	push	r28
    74b4:	c8 2f       	mov	r28, r24
    74b6:	8b 01       	movw	r16, r22
    74b8:	41 e0       	ldi	r20, 0x01	; 1
    74ba:	60 e0       	ldi	r22, 0x00	; 0
    74bc:	70 e0       	ldi	r23, 0x00	; 0
    74be:	88 ec       	ldi	r24, 0xC8	; 200
    74c0:	90 e0       	ldi	r25, 0x00	; 0
    74c2:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <xStreamBufferGenericCreate>
    74c6:	90 93 de 14 	sts	0x14DE, r25	; 0x8014de <_serialReplyBufferHandle+0x1>
    74ca:	80 93 dd 14 	sts	0x14DD, r24	; 0x8014dd <_serialReplyBufferHandle>
    74ce:	10 93 dc 14 	sts	0x14DC, r17	; 0x8014dc <_downlinkMessageBuffer+0x1>
    74d2:	00 93 db 14 	sts	0x14DB, r16	; 0x8014db <_downlinkMessageBuffer>
    74d6:	0f 2e       	mov	r0, r31
    74d8:	f3 e3       	ldi	r31, 0x33	; 51
    74da:	8f 2e       	mov	r8, r31
    74dc:	f9 e3       	ldi	r31, 0x39	; 57
    74de:	9f 2e       	mov	r9, r31
    74e0:	f0 2d       	mov	r31, r0
    74e2:	68 94       	set
    74e4:	aa 24       	eor	r10, r10
    74e6:	a6 f8       	bld	r10, 6
    74e8:	68 94       	set
    74ea:	cc 24       	eor	r12, r12
    74ec:	c6 f8       	bld	r12, 6
    74ee:	e1 2c       	mov	r14, r1
    74f0:	00 e0       	ldi	r16, 0x00	; 0
    74f2:	23 e0       	ldi	r18, 0x03	; 3
    74f4:	40 e0       	ldi	r20, 0x00	; 0
    74f6:	51 ee       	ldi	r21, 0xE1	; 225
    74f8:	60 e0       	ldi	r22, 0x00	; 0
    74fa:	70 e0       	ldi	r23, 0x00	; 0
    74fc:	8c 2f       	mov	r24, r28
    74fe:	06 d4       	rcall	.+2060   	; 0x7d0c <serial_create>
    7500:	90 93 e0 14 	sts	0x14E0, r25	; 0x8014e0 <_rn2483_serial+0x1>
    7504:	80 93 df 14 	sts	0x14DF, r24	; 0x8014df <_rn2483_serial>
    7508:	e7 e0       	ldi	r30, 0x07	; 7
    750a:	f1 e0       	ldi	r31, 0x01	; 1
    750c:	80 81       	ld	r24, Z
    750e:	80 61       	ori	r24, 0x10	; 16
    7510:	80 83       	st	Z, r24
    7512:	cf 91       	pop	r28
    7514:	1f 91       	pop	r17
    7516:	0f 91       	pop	r16
    7518:	ef 90       	pop	r14
    751a:	cf 90       	pop	r12
    751c:	af 90       	pop	r10
    751e:	9f 90       	pop	r9
    7520:	8f 90       	pop	r8
    7522:	08 95       	ret

00007524 <lora_driver_resetRn2483>:
    7524:	88 23       	and	r24, r24
    7526:	31 f0       	breq	.+12     	; 0x7534 <lora_driver_resetRn2483+0x10>
    7528:	e8 e0       	ldi	r30, 0x08	; 8
    752a:	f1 e0       	ldi	r31, 0x01	; 1
    752c:	80 81       	ld	r24, Z
    752e:	8f 7e       	andi	r24, 0xEF	; 239
    7530:	80 83       	st	Z, r24
    7532:	08 95       	ret
    7534:	e8 e0       	ldi	r30, 0x08	; 8
    7536:	f1 e0       	ldi	r31, 0x01	; 1
    7538:	80 81       	ld	r24, Z
    753a:	80 61       	ori	r24, 0x10	; 16
    753c:	80 83       	st	Z, r24
    753e:	08 95       	ret

00007540 <lora_driver_rn2483FactoryReset>:
    7540:	60 e0       	ldi	r22, 0x00	; 0
    7542:	70 e0       	ldi	r23, 0x00	; 0
    7544:	8d e9       	ldi	r24, 0x9D	; 157
    7546:	96 e0       	ldi	r25, 0x06	; 6
    7548:	d4 de       	rcall	.-600    	; 0x72f2 <_uploadMessage>
    754a:	e6 e6       	ldi	r30, 0x66	; 102
    754c:	f5 e1       	ldi	r31, 0x15	; 21
    754e:	01 90       	ld	r0, Z+
    7550:	00 20       	and	r0, r0
    7552:	e9 f7       	brne	.-6      	; 0x754e <lora_driver_rn2483FactoryReset+0xe>
    7554:	31 97       	sbiw	r30, 0x01	; 1
    7556:	e6 56       	subi	r30, 0x66	; 102
    7558:	f5 41       	sbci	r31, 0x15	; 21
    755a:	81 e0       	ldi	r24, 0x01	; 1
    755c:	75 97       	sbiw	r30, 0x15	; 21
    755e:	08 f0       	brcs	.+2      	; 0x7562 <lora_driver_rn2483FactoryReset+0x22>
    7560:	80 e0       	ldi	r24, 0x00	; 0
    7562:	08 95       	ret

00007564 <lora_driver_getRn2483Hweui>:
    7564:	cf 93       	push	r28
    7566:	df 93       	push	r29
    7568:	ec 01       	movw	r28, r24
    756a:	60 e0       	ldi	r22, 0x00	; 0
    756c:	70 e0       	ldi	r23, 0x00	; 0
    756e:	8e ea       	ldi	r24, 0xAE	; 174
    7570:	96 e0       	ldi	r25, 0x06	; 6
    7572:	bf de       	rcall	.-642    	; 0x72f2 <_uploadMessage>
    7574:	e6 e6       	ldi	r30, 0x66	; 102
    7576:	f5 e1       	ldi	r31, 0x15	; 21
    7578:	01 90       	ld	r0, Z+
    757a:	00 20       	and	r0, r0
    757c:	e9 f7       	brne	.-6      	; 0x7578 <lora_driver_getRn2483Hweui+0x14>
    757e:	e7 57       	subi	r30, 0x77	; 119
    7580:	f5 41       	sbci	r31, 0x15	; 21
    7582:	39 f4       	brne	.+14     	; 0x7592 <lora_driver_getRn2483Hweui+0x2e>
    7584:	66 e6       	ldi	r22, 0x66	; 102
    7586:	75 e1       	ldi	r23, 0x15	; 21
    7588:	ce 01       	movw	r24, r28
    758a:	0e 94 b8 46 	call	0x8d70	; 0x8d70 <strcpy>
    758e:	80 e0       	ldi	r24, 0x00	; 0
    7590:	02 c0       	rjmp	.+4      	; 0x7596 <lora_driver_getRn2483Hweui+0x32>
    7592:	18 82       	st	Y, r1
    7594:	81 e0       	ldi	r24, 0x01	; 1
    7596:	df 91       	pop	r29
    7598:	cf 91       	pop	r28
    759a:	08 95       	ret

0000759c <lora_driver_setDeviceIdentifier>:
    759c:	fc 01       	movw	r30, r24
    759e:	01 90       	ld	r0, Z+
    75a0:	00 20       	and	r0, r0
    75a2:	e9 f7       	brne	.-6      	; 0x759e <lora_driver_setDeviceIdentifier+0x2>
    75a4:	9f 01       	movw	r18, r30
    75a6:	21 51       	subi	r18, 0x11	; 17
    75a8:	31 09       	sbc	r19, r1
    75aa:	28 17       	cp	r18, r24
    75ac:	39 07       	cpc	r19, r25
    75ae:	29 f4       	brne	.+10     	; 0x75ba <lora_driver_setDeviceIdentifier+0x1e>
    75b0:	bc 01       	movw	r22, r24
    75b2:	8c ed       	ldi	r24, 0xDC	; 220
    75b4:	96 e0       	ldi	r25, 0x06	; 6
    75b6:	6c cf       	rjmp	.-296    	; 0x7490 <_uploadMessageRc>
    75b8:	08 95       	ret
    75ba:	89 e0       	ldi	r24, 0x09	; 9
    75bc:	08 95       	ret

000075be <lora_driver_setApplicationIdentifier>:
    75be:	fc 01       	movw	r30, r24
    75c0:	01 90       	ld	r0, Z+
    75c2:	00 20       	and	r0, r0
    75c4:	e9 f7       	brne	.-6      	; 0x75c0 <lora_driver_setApplicationIdentifier+0x2>
    75c6:	9f 01       	movw	r18, r30
    75c8:	21 51       	subi	r18, 0x11	; 17
    75ca:	31 09       	sbc	r19, r1
    75cc:	28 17       	cp	r18, r24
    75ce:	39 07       	cpc	r19, r25
    75d0:	29 f4       	brne	.+10     	; 0x75dc <lora_driver_setApplicationIdentifier+0x1e>
    75d2:	bc 01       	movw	r22, r24
    75d4:	8b ee       	ldi	r24, 0xEB	; 235
    75d6:	96 e0       	ldi	r25, 0x06	; 6
    75d8:	5b cf       	rjmp	.-330    	; 0x7490 <_uploadMessageRc>
    75da:	08 95       	ret
    75dc:	89 e0       	ldi	r24, 0x09	; 9
    75de:	08 95       	ret

000075e0 <lora_driver_setApplicationKey>:
    75e0:	fc 01       	movw	r30, r24
    75e2:	01 90       	ld	r0, Z+
    75e4:	00 20       	and	r0, r0
    75e6:	e9 f7       	brne	.-6      	; 0x75e2 <lora_driver_setApplicationKey+0x2>
    75e8:	9f 01       	movw	r18, r30
    75ea:	21 52       	subi	r18, 0x21	; 33
    75ec:	31 09       	sbc	r19, r1
    75ee:	28 17       	cp	r18, r24
    75f0:	39 07       	cpc	r19, r25
    75f2:	29 f4       	brne	.+10     	; 0x75fe <lora_driver_setApplicationKey+0x1e>
    75f4:	bc 01       	movw	r22, r24
    75f6:	8a ef       	ldi	r24, 0xFA	; 250
    75f8:	96 e0       	ldi	r25, 0x06	; 6
    75fa:	4a cf       	rjmp	.-364    	; 0x7490 <_uploadMessageRc>
    75fc:	08 95       	ret
    75fe:	89 e0       	ldi	r24, 0x09	; 9
    7600:	08 95       	ret

00007602 <lora_driver_saveMac>:
    7602:	60 e0       	ldi	r22, 0x00	; 0
    7604:	70 e0       	ldi	r23, 0x00	; 0
    7606:	89 e3       	ldi	r24, 0x39	; 57
    7608:	97 e0       	ldi	r25, 0x07	; 7
    760a:	42 cf       	rjmp	.-380    	; 0x7490 <_uploadMessageRc>
    760c:	08 95       	ret

0000760e <lora_driver_join>:
    760e:	0f 93       	push	r16
    7610:	1f 93       	push	r17
    7612:	e8 2f       	mov	r30, r24
    7614:	f0 e0       	ldi	r31, 0x00	; 0
    7616:	ee 0f       	add	r30, r30
    7618:	ff 1f       	adc	r31, r31
    761a:	ed 5e       	subi	r30, 0xED	; 237
    761c:	f6 4f       	sbci	r31, 0xF6	; 246
    761e:	60 81       	ld	r22, Z
    7620:	71 81       	ldd	r23, Z+1	; 0x01
    7622:	82 e4       	ldi	r24, 0x42	; 66
    7624:	97 e0       	ldi	r25, 0x07	; 7
    7626:	34 df       	rcall	.-408    	; 0x7490 <_uploadMessageRc>
    7628:	81 11       	cpse	r24, r1
    762a:	14 c0       	rjmp	.+40     	; 0x7654 <lora_driver_join+0x46>
    762c:	08 e2       	ldi	r16, 0x28	; 40
    762e:	15 e0       	ldi	r17, 0x05	; 5
    7630:	20 e0       	ldi	r18, 0x00	; 0
    7632:	30 e0       	ldi	r19, 0x00	; 0
    7634:	4d e2       	ldi	r20, 0x2D	; 45
    7636:	50 e0       	ldi	r21, 0x00	; 0
    7638:	66 e6       	ldi	r22, 0x66	; 102
    763a:	75 e1       	ldi	r23, 0x15	; 21
    763c:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <_serialReplyBufferHandle>
    7640:	90 91 de 14 	lds	r25, 0x14DE	; 0x8014de <_serialReplyBufferHandle+0x1>
    7644:	0e 94 07 19 	call	0x320e	; 0x320e <xStreamBufferReceive>
    7648:	88 23       	and	r24, r24
    764a:	21 f0       	breq	.+8      	; 0x7654 <lora_driver_join+0x46>
    764c:	86 e6       	ldi	r24, 0x66	; 102
    764e:	95 e1       	ldi	r25, 0x15	; 21
    7650:	aa de       	rcall	.-684    	; 0x73a6 <_reply2ReturnCode>
    7652:	03 c0       	rjmp	.+6      	; 0x765a <lora_driver_join+0x4c>
    7654:	86 e6       	ldi	r24, 0x66	; 102
    7656:	95 e1       	ldi	r25, 0x15	; 21
    7658:	a6 de       	rcall	.-692    	; 0x73a6 <_reply2ReturnCode>
    765a:	1f 91       	pop	r17
    765c:	0f 91       	pop	r16
    765e:	08 95       	ret

00007660 <lora_driver_sendUploadMessage>:
    7660:	0f 93       	push	r16
    7662:	1f 93       	push	r17
    7664:	cf 93       	push	r28
    7666:	df 93       	push	r29
    7668:	1f 92       	push	r1
    766a:	cd b7       	in	r28, 0x3d	; 61
    766c:	de b7       	in	r29, 0x3e	; 62
    766e:	db 01       	movw	r26, r22
    7670:	11 96       	adiw	r26, 0x01	; 1
    7672:	9c 91       	ld	r25, X
    7674:	11 97       	sbiw	r26, 0x01	; 1
    7676:	95 31       	cpi	r25, 0x15	; 21
    7678:	08 f0       	brcs	.+2      	; 0x767c <lora_driver_sendUploadMessage+0x1c>
    767a:	b4 c0       	rjmp	.+360    	; 0x77e4 <lora_driver_sendUploadMessage+0x184>
    767c:	99 23       	and	r25, r25
    767e:	81 f1       	breq	.+96     	; 0x76e0 <lora_driver_sendUploadMessage+0x80>
    7680:	60 e0       	ldi	r22, 0x00	; 0
    7682:	70 e0       	ldi	r23, 0x00	; 0
    7684:	27 2f       	mov	r18, r23
    7686:	30 e0       	ldi	r19, 0x00	; 0
    7688:	46 2f       	mov	r20, r22
    768a:	50 e0       	ldi	r21, 0x00	; 0
    768c:	fd 01       	movw	r30, r26
    768e:	e4 0f       	add	r30, r20
    7690:	f5 1f       	adc	r31, r21
    7692:	92 81       	ldd	r25, Z+2	; 0x02
    7694:	92 95       	swap	r25
    7696:	9f 70       	andi	r25, 0x0F	; 15
    7698:	9a 30       	cpi	r25, 0x0A	; 10
    769a:	10 f0       	brcs	.+4      	; 0x76a0 <lora_driver_sendUploadMessage+0x40>
    769c:	99 5c       	subi	r25, 0xC9	; 201
    769e:	01 c0       	rjmp	.+2      	; 0x76a2 <lora_driver_sendUploadMessage+0x42>
    76a0:	90 5d       	subi	r25, 0xD0	; 208
    76a2:	f9 01       	movw	r30, r18
    76a4:	e9 50       	subi	r30, 0x09	; 9
    76a6:	fb 4e       	sbci	r31, 0xEB	; 235
    76a8:	90 83       	st	Z, r25
    76aa:	2f 5f       	subi	r18, 0xFF	; 255
    76ac:	3f 4f       	sbci	r19, 0xFF	; 255
    76ae:	fd 01       	movw	r30, r26
    76b0:	e4 0f       	add	r30, r20
    76b2:	f5 1f       	adc	r31, r21
    76b4:	92 81       	ldd	r25, Z+2	; 0x02
    76b6:	9f 70       	andi	r25, 0x0F	; 15
    76b8:	49 2f       	mov	r20, r25
    76ba:	50 e0       	ldi	r21, 0x00	; 0
    76bc:	4a 30       	cpi	r20, 0x0A	; 10
    76be:	51 05       	cpc	r21, r1
    76c0:	14 f0       	brlt	.+4      	; 0x76c6 <lora_driver_sendUploadMessage+0x66>
    76c2:	99 5c       	subi	r25, 0xC9	; 201
    76c4:	01 c0       	rjmp	.+2      	; 0x76c8 <lora_driver_sendUploadMessage+0x68>
    76c6:	90 5d       	subi	r25, 0xD0	; 208
    76c8:	f9 01       	movw	r30, r18
    76ca:	e9 50       	subi	r30, 0x09	; 9
    76cc:	fb 4e       	sbci	r31, 0xEB	; 235
    76ce:	90 83       	st	Z, r25
    76d0:	7e 5f       	subi	r23, 0xFE	; 254
    76d2:	6f 5f       	subi	r22, 0xFF	; 255
    76d4:	11 96       	adiw	r26, 0x01	; 1
    76d6:	9c 91       	ld	r25, X
    76d8:	11 97       	sbiw	r26, 0x01	; 1
    76da:	69 17       	cp	r22, r25
    76dc:	98 f2       	brcs	.-90     	; 0x7684 <lora_driver_sendUploadMessage+0x24>
    76de:	01 c0       	rjmp	.+2      	; 0x76e2 <lora_driver_sendUploadMessage+0x82>
    76e0:	70 e0       	ldi	r23, 0x00	; 0
    76e2:	e7 2f       	mov	r30, r23
    76e4:	f0 e0       	ldi	r31, 0x00	; 0
    76e6:	e9 50       	subi	r30, 0x09	; 9
    76e8:	fb 4e       	sbci	r31, 0xEB	; 235
    76ea:	10 82       	st	Z, r1
    76ec:	4c 91       	ld	r20, X
    76ee:	81 11       	cpse	r24, r1
    76f0:	03 c0       	rjmp	.+6      	; 0x76f8 <lora_driver_sendUploadMessage+0x98>
    76f2:	8b e4       	ldi	r24, 0x4B	; 75
    76f4:	97 e0       	ldi	r25, 0x07	; 7
    76f6:	02 c0       	rjmp	.+4      	; 0x76fc <lora_driver_sendUploadMessage+0x9c>
    76f8:	8d e4       	ldi	r24, 0x4D	; 77
    76fa:	97 e0       	ldi	r25, 0x07	; 7
    76fc:	27 ef       	ldi	r18, 0xF7	; 247
    76fe:	34 e1       	ldi	r19, 0x14	; 20
    7700:	3f 93       	push	r19
    7702:	2f 93       	push	r18
    7704:	1f 92       	push	r1
    7706:	4f 93       	push	r20
    7708:	9f 93       	push	r25
    770a:	8f 93       	push	r24
    770c:	81 e5       	ldi	r24, 0x51	; 81
    770e:	97 e0       	ldi	r25, 0x07	; 7
    7710:	9f 93       	push	r25
    7712:	8f 93       	push	r24
    7714:	89 e3       	ldi	r24, 0x39	; 57
    7716:	95 e1       	ldi	r25, 0x15	; 21
    7718:	9f 93       	push	r25
    771a:	8f 93       	push	r24
    771c:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <sprintf>
    7720:	60 e0       	ldi	r22, 0x00	; 0
    7722:	70 e0       	ldi	r23, 0x00	; 0
    7724:	89 e3       	ldi	r24, 0x39	; 57
    7726:	95 e1       	ldi	r25, 0x15	; 21
    7728:	b3 de       	rcall	.-666    	; 0x7490 <_uploadMessageRc>
    772a:	0f b6       	in	r0, 0x3f	; 63
    772c:	f8 94       	cli
    772e:	de bf       	out	0x3e, r29	; 62
    7730:	0f be       	out	0x3f, r0	; 63
    7732:	cd bf       	out	0x3d, r28	; 61
    7734:	81 11       	cpse	r24, r1
    7736:	59 c0       	rjmp	.+178    	; 0x77ea <lora_driver_sendUploadMessage+0x18a>
    7738:	08 e2       	ldi	r16, 0x28	; 40
    773a:	15 e0       	ldi	r17, 0x05	; 5
    773c:	20 e0       	ldi	r18, 0x00	; 0
    773e:	30 e0       	ldi	r19, 0x00	; 0
    7740:	4d e2       	ldi	r20, 0x2D	; 45
    7742:	50 e0       	ldi	r21, 0x00	; 0
    7744:	66 e6       	ldi	r22, 0x66	; 102
    7746:	75 e1       	ldi	r23, 0x15	; 21
    7748:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <_serialReplyBufferHandle>
    774c:	90 91 de 14 	lds	r25, 0x14DE	; 0x8014de <_serialReplyBufferHandle+0x1>
    7750:	0e 94 07 19 	call	0x320e	; 0x320e <xStreamBufferReceive>
    7754:	88 23       	and	r24, r24
    7756:	09 f4       	brne	.+2      	; 0x775a <lora_driver_sendUploadMessage+0xfa>
    7758:	47 c0       	rjmp	.+142    	; 0x77e8 <lora_driver_sendUploadMessage+0x188>
    775a:	86 e6       	ldi	r24, 0x66	; 102
    775c:	95 e1       	ldi	r25, 0x15	; 21
    775e:	23 de       	rcall	.-954    	; 0x73a6 <_reply2ReturnCode>
    7760:	8e 30       	cpi	r24, 0x0E	; 14
    7762:	09 f0       	breq	.+2      	; 0x7766 <lora_driver_sendUploadMessage+0x106>
    7764:	42 c0       	rjmp	.+132    	; 0x77ea <lora_driver_sendUploadMessage+0x18a>
    7766:	87 e0       	ldi	r24, 0x07	; 7
    7768:	89 83       	std	Y+1, r24	; 0x01
    776a:	80 91 db 14 	lds	r24, 0x14DB	; 0x8014db <_downlinkMessageBuffer>
    776e:	90 91 dc 14 	lds	r25, 0x14DC	; 0x8014dc <_downlinkMessageBuffer+0x1>
    7772:	89 2b       	or	r24, r25
    7774:	a9 f1       	breq	.+106    	; 0x77e0 <lora_driver_sendUploadMessage+0x180>
    7776:	be 01       	movw	r22, r28
    7778:	6f 5f       	subi	r22, 0xFF	; 255
    777a:	7f 4f       	sbci	r23, 0xFF	; 255
    777c:	86 e6       	ldi	r24, 0x66	; 102
    777e:	95 e1       	ldi	r25, 0x15	; 21
    7780:	68 d1       	rcall	.+720    	; 0x7a52 <decode_port_no>
    7782:	80 93 e1 14 	sts	0x14E1, r24	; 0x8014e1 <_downlinkPayload>
    7786:	e9 81       	ldd	r30, Y+1	; 0x01
    7788:	f0 e0       	ldi	r31, 0x00	; 0
    778a:	ea 59       	subi	r30, 0x9A	; 154
    778c:	fa 4e       	sbci	r31, 0xEA	; 234
    778e:	df 01       	movw	r26, r30
    7790:	0d 90       	ld	r0, X+
    7792:	00 20       	and	r0, r0
    7794:	e9 f7       	brne	.-6      	; 0x7790 <lora_driver_sendUploadMessage+0x130>
    7796:	11 97       	sbiw	r26, 0x01	; 1
    7798:	ae 1b       	sub	r26, r30
    779a:	bf 0b       	sbc	r27, r31
    779c:	aa 23       	and	r26, r26
    779e:	91 f0       	breq	.+36     	; 0x77c4 <lora_driver_sendUploadMessage+0x164>
    77a0:	bb 27       	eor	r27, r27
    77a2:	cd 01       	movw	r24, r26
    77a4:	01 97       	sbiw	r24, 0x01	; 1
    77a6:	9c 01       	movw	r18, r24
    77a8:	12 f4       	brpl	.+4      	; 0x77ae <lora_driver_sendUploadMessage+0x14e>
    77aa:	2f 5f       	subi	r18, 0xFF	; 255
    77ac:	3f 4f       	sbci	r19, 0xFF	; 255
    77ae:	35 95       	asr	r19
    77b0:	27 95       	ror	r18
    77b2:	20 93 e2 14 	sts	0x14E2, r18	; 0x8014e2 <_downlinkPayload+0x1>
    77b6:	af 01       	movw	r20, r30
    77b8:	4f 5f       	subi	r20, 0xFF	; 255
    77ba:	5f 4f       	sbci	r21, 0xFF	; 255
    77bc:	64 e1       	ldi	r22, 0x14	; 20
    77be:	83 ee       	ldi	r24, 0xE3	; 227
    77c0:	94 e1       	ldi	r25, 0x14	; 20
    77c2:	73 d1       	rcall	.+742    	; 0x7aaa <decode_hexadecimal_string_bytes>
    77c4:	01 e0       	ldi	r16, 0x01	; 1
    77c6:	10 e0       	ldi	r17, 0x00	; 0
    77c8:	20 e0       	ldi	r18, 0x00	; 0
    77ca:	30 e0       	ldi	r19, 0x00	; 0
    77cc:	46 e1       	ldi	r20, 0x16	; 22
    77ce:	50 e0       	ldi	r21, 0x00	; 0
    77d0:	61 ee       	ldi	r22, 0xE1	; 225
    77d2:	74 e1       	ldi	r23, 0x14	; 20
    77d4:	80 91 db 14 	lds	r24, 0x14DB	; 0x8014db <_downlinkMessageBuffer>
    77d8:	90 91 dc 14 	lds	r25, 0x14DC	; 0x8014dc <_downlinkMessageBuffer+0x1>
    77dc:	0e 94 20 17 	call	0x2e40	; 0x2e40 <xStreamBufferSend>
    77e0:	8e e0       	ldi	r24, 0x0E	; 14
    77e2:	03 c0       	rjmp	.+6      	; 0x77ea <lora_driver_sendUploadMessage+0x18a>
    77e4:	84 e1       	ldi	r24, 0x14	; 20
    77e6:	01 c0       	rjmp	.+2      	; 0x77ea <lora_driver_sendUploadMessage+0x18a>
    77e8:	80 e0       	ldi	r24, 0x00	; 0
    77ea:	0f 90       	pop	r0
    77ec:	df 91       	pop	r29
    77ee:	cf 91       	pop	r28
    77f0:	1f 91       	pop	r17
    77f2:	0f 91       	pop	r16
    77f4:	08 95       	ret

000077f6 <lora_driver_setAdaptiveDataRate>:
    77f6:	81 30       	cpi	r24, 0x01	; 1
    77f8:	19 f0       	breq	.+6      	; 0x7800 <lora_driver_setAdaptiveDataRate+0xa>
    77fa:	61 e6       	ldi	r22, 0x61	; 97
    77fc:	77 e0       	ldi	r23, 0x07	; 7
    77fe:	02 c0       	rjmp	.+4      	; 0x7804 <lora_driver_setAdaptiveDataRate+0xe>
    7800:	6a e3       	ldi	r22, 0x3A	; 58
    7802:	78 e0       	ldi	r23, 0x08	; 8
    7804:	85 e6       	ldi	r24, 0x65	; 101
    7806:	97 e0       	ldi	r25, 0x07	; 7
    7808:	43 ce       	rjmp	.-890    	; 0x7490 <_uploadMessageRc>
    780a:	08 95       	ret

0000780c <lora_driver_setReceiveDelay>:
    780c:	9f 93       	push	r25
    780e:	8f 93       	push	r24
    7810:	86 e9       	ldi	r24, 0x96	; 150
    7812:	97 e0       	ldi	r25, 0x07	; 7
    7814:	9f 93       	push	r25
    7816:	8f 93       	push	r24
    7818:	89 e3       	ldi	r24, 0x39	; 57
    781a:	95 e1       	ldi	r25, 0x15	; 21
    781c:	9f 93       	push	r25
    781e:	8f 93       	push	r24
    7820:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <sprintf>
    7824:	60 e0       	ldi	r22, 0x00	; 0
    7826:	70 e0       	ldi	r23, 0x00	; 0
    7828:	89 e3       	ldi	r24, 0x39	; 57
    782a:	95 e1       	ldi	r25, 0x15	; 21
    782c:	31 de       	rcall	.-926    	; 0x7490 <_uploadMessageRc>
    782e:	0f 90       	pop	r0
    7830:	0f 90       	pop	r0
    7832:	0f 90       	pop	r0
    7834:	0f 90       	pop	r0
    7836:	0f 90       	pop	r0
    7838:	0f 90       	pop	r0
    783a:	08 95       	ret

0000783c <lora_driver_configureToEu868>:
    783c:	2f 92       	push	r2
    783e:	3f 92       	push	r3
    7840:	4f 92       	push	r4
    7842:	5f 92       	push	r5
    7844:	6f 92       	push	r6
    7846:	7f 92       	push	r7
    7848:	8f 92       	push	r8
    784a:	9f 92       	push	r9
    784c:	af 92       	push	r10
    784e:	bf 92       	push	r11
    7850:	cf 92       	push	r12
    7852:	df 92       	push	r13
    7854:	ef 92       	push	r14
    7856:	ff 92       	push	r15
    7858:	0f 93       	push	r16
    785a:	1f 93       	push	r17
    785c:	cf 93       	push	r28
    785e:	df 93       	push	r29
    7860:	cd b7       	in	r28, 0x3d	; 61
    7862:	de b7       	in	r29, 0x3e	; 62
    7864:	a0 97       	sbiw	r28, 0x20	; 32
    7866:	0f b6       	in	r0, 0x3f	; 63
    7868:	f8 94       	cli
    786a:	de bf       	out	0x3e, r29	; 62
    786c:	0f be       	out	0x3f, r0	; 63
    786e:	cd bf       	out	0x3d, r28	; 61
    7870:	63 ec       	ldi	r22, 0xC3	; 195
    7872:	77 e0       	ldi	r23, 0x07	; 7
    7874:	8f ec       	ldi	r24, 0xCF	; 207
    7876:	97 e0       	ldi	r25, 0x07	; 7
    7878:	3c dd       	rcall	.-1416   	; 0x72f2 <_uploadMessage>
    787a:	95 dd       	rcall	.-1238   	; 0x73a6 <_reply2ReturnCode>
    787c:	81 11       	cpse	r24, r1
    787e:	a3 c0       	rjmp	.+326    	; 0x79c6 <lora_driver_configureToEu868+0x18a>
    7880:	80 e2       	ldi	r24, 0x20	; 32
    7882:	e1 e3       	ldi	r30, 0x31	; 49
    7884:	f6 e0       	ldi	r31, 0x06	; 6
    7886:	de 01       	movw	r26, r28
    7888:	11 96       	adiw	r26, 0x01	; 1
    788a:	01 90       	ld	r0, Z+
    788c:	0d 92       	st	X+, r0
    788e:	8a 95       	dec	r24
    7890:	e1 f7       	brne	.-8      	; 0x788a <lora_driver_configureToEu868+0x4e>
    7892:	9e 01       	movw	r18, r28
    7894:	2f 5f       	subi	r18, 0xFF	; 255
    7896:	3f 4f       	sbci	r19, 0xFF	; 255
    7898:	69 01       	movw	r12, r18
    789a:	e1 2c       	mov	r14, r1
    789c:	f1 2c       	mov	r15, r1
    789e:	0f 2e       	mov	r0, r31
    78a0:	fb ed       	ldi	r31, 0xDB	; 219
    78a2:	af 2e       	mov	r10, r31
    78a4:	f7 e0       	ldi	r31, 0x07	; 7
    78a6:	bf 2e       	mov	r11, r31
    78a8:	f0 2d       	mov	r31, r0
    78aa:	09 e3       	ldi	r16, 0x39	; 57
    78ac:	15 e1       	ldi	r17, 0x15	; 21
    78ae:	0f 2e       	mov	r0, r31
    78b0:	f4 ef       	ldi	r31, 0xF4	; 244
    78b2:	4f 2e       	mov	r4, r31
    78b4:	f7 e0       	ldi	r31, 0x07	; 7
    78b6:	5f 2e       	mov	r5, r31
    78b8:	f0 2d       	mov	r31, r0
    78ba:	0f 2e       	mov	r0, r31
    78bc:	fb e0       	ldi	r31, 0x0B	; 11
    78be:	8f 2e       	mov	r8, r31
    78c0:	f8 e0       	ldi	r31, 0x08	; 8
    78c2:	9f 2e       	mov	r9, r31
    78c4:	f0 2d       	mov	r31, r0
    78c6:	0f 2e       	mov	r0, r31
    78c8:	f5 e2       	ldi	r31, 0x25	; 37
    78ca:	6f 2e       	mov	r6, r31
    78cc:	f8 e0       	ldi	r31, 0x08	; 8
    78ce:	7f 2e       	mov	r7, r31
    78d0:	f0 2d       	mov	r31, r0
    78d2:	3e 2c       	mov	r3, r14
    78d4:	2f 2c       	mov	r2, r15
    78d6:	ff 92       	push	r15
    78d8:	ef 92       	push	r14
    78da:	bf 92       	push	r11
    78dc:	af 92       	push	r10
    78de:	1f 93       	push	r17
    78e0:	0f 93       	push	r16
    78e2:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <sprintf>
    78e6:	60 e0       	ldi	r22, 0x00	; 0
    78e8:	70 e0       	ldi	r23, 0x00	; 0
    78ea:	c8 01       	movw	r24, r16
    78ec:	02 dd       	rcall	.-1532   	; 0x72f2 <_uploadMessage>
    78ee:	5b dd       	rcall	.-1354   	; 0x73a6 <_reply2ReturnCode>
    78f0:	0f 90       	pop	r0
    78f2:	0f 90       	pop	r0
    78f4:	0f 90       	pop	r0
    78f6:	0f 90       	pop	r0
    78f8:	0f 90       	pop	r0
    78fa:	0f 90       	pop	r0
    78fc:	81 11       	cpse	r24, r1
    78fe:	63 c0       	rjmp	.+198    	; 0x79c6 <lora_driver_configureToEu868+0x18a>
    7900:	32 e0       	ldi	r19, 0x02	; 2
    7902:	3e 15       	cp	r19, r14
    7904:	e8 f4       	brcc	.+58     	; 0x7940 <lora_driver_configureToEu868+0x104>
    7906:	f6 01       	movw	r30, r12
    7908:	83 81       	ldd	r24, Z+3	; 0x03
    790a:	8f 93       	push	r24
    790c:	82 81       	ldd	r24, Z+2	; 0x02
    790e:	8f 93       	push	r24
    7910:	81 81       	ldd	r24, Z+1	; 0x01
    7912:	8f 93       	push	r24
    7914:	80 81       	ld	r24, Z
    7916:	8f 93       	push	r24
    7918:	ff 92       	push	r15
    791a:	ef 92       	push	r14
    791c:	5f 92       	push	r5
    791e:	4f 92       	push	r4
    7920:	1f 93       	push	r17
    7922:	0f 93       	push	r16
    7924:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <sprintf>
    7928:	60 e0       	ldi	r22, 0x00	; 0
    792a:	70 e0       	ldi	r23, 0x00	; 0
    792c:	c8 01       	movw	r24, r16
    792e:	e1 dc       	rcall	.-1598   	; 0x72f2 <_uploadMessage>
    7930:	3a dd       	rcall	.-1420   	; 0x73a6 <_reply2ReturnCode>
    7932:	0f b6       	in	r0, 0x3f	; 63
    7934:	f8 94       	cli
    7936:	de bf       	out	0x3e, r29	; 62
    7938:	0f be       	out	0x3f, r0	; 63
    793a:	cd bf       	out	0x3d, r28	; 61
    793c:	81 11       	cpse	r24, r1
    793e:	43 c0       	rjmp	.+134    	; 0x79c6 <lora_driver_configureToEu868+0x18a>
    7940:	2f 92       	push	r2
    7942:	3f 92       	push	r3
    7944:	9f 92       	push	r9
    7946:	8f 92       	push	r8
    7948:	1f 93       	push	r17
    794a:	0f 93       	push	r16
    794c:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <sprintf>
    7950:	60 e0       	ldi	r22, 0x00	; 0
    7952:	70 e0       	ldi	r23, 0x00	; 0
    7954:	c8 01       	movw	r24, r16
    7956:	cd dc       	rcall	.-1638   	; 0x72f2 <_uploadMessage>
    7958:	26 dd       	rcall	.-1460   	; 0x73a6 <_reply2ReturnCode>
    795a:	0f 90       	pop	r0
    795c:	0f 90       	pop	r0
    795e:	0f 90       	pop	r0
    7960:	0f 90       	pop	r0
    7962:	0f 90       	pop	r0
    7964:	0f 90       	pop	r0
    7966:	81 11       	cpse	r24, r1
    7968:	2e c0       	rjmp	.+92     	; 0x79c6 <lora_driver_configureToEu868+0x18a>
    796a:	2f 92       	push	r2
    796c:	3f 92       	push	r3
    796e:	7f 92       	push	r7
    7970:	6f 92       	push	r6
    7972:	1f 93       	push	r17
    7974:	0f 93       	push	r16
    7976:	0e 94 1a 47 	call	0x8e34	; 0x8e34 <sprintf>
    797a:	60 e0       	ldi	r22, 0x00	; 0
    797c:	70 e0       	ldi	r23, 0x00	; 0
    797e:	c8 01       	movw	r24, r16
    7980:	b8 dc       	rcall	.-1680   	; 0x72f2 <_uploadMessage>
    7982:	11 dd       	rcall	.-1502   	; 0x73a6 <_reply2ReturnCode>
    7984:	0f 90       	pop	r0
    7986:	0f 90       	pop	r0
    7988:	0f 90       	pop	r0
    798a:	0f 90       	pop	r0
    798c:	0f 90       	pop	r0
    798e:	0f 90       	pop	r0
    7990:	81 11       	cpse	r24, r1
    7992:	19 c0       	rjmp	.+50     	; 0x79c6 <lora_driver_configureToEu868+0x18a>
    7994:	3f ef       	ldi	r19, 0xFF	; 255
    7996:	e3 1a       	sub	r14, r19
    7998:	f3 0a       	sbc	r15, r19
    799a:	84 e0       	ldi	r24, 0x04	; 4
    799c:	c8 0e       	add	r12, r24
    799e:	d1 1c       	adc	r13, r1
    79a0:	98 e0       	ldi	r25, 0x08	; 8
    79a2:	e9 16       	cp	r14, r25
    79a4:	f1 04       	cpc	r15, r1
    79a6:	09 f0       	breq	.+2      	; 0x79aa <lora_driver_configureToEu868+0x16e>
    79a8:	94 cf       	rjmp	.-216    	; 0x78d2 <lora_driver_configureToEu868+0x96>
    79aa:	60 e0       	ldi	r22, 0x00	; 0
    79ac:	70 e0       	ldi	r23, 0x00	; 0
    79ae:	8d e3       	ldi	r24, 0x3D	; 61
    79b0:	98 e0       	ldi	r25, 0x08	; 8
    79b2:	9f dc       	rcall	.-1730   	; 0x72f2 <_uploadMessage>
    79b4:	f8 dc       	rcall	.-1552   	; 0x73a6 <_reply2ReturnCode>
    79b6:	81 11       	cpse	r24, r1
    79b8:	06 c0       	rjmp	.+12     	; 0x79c6 <lora_driver_configureToEu868+0x18a>
    79ba:	60 e0       	ldi	r22, 0x00	; 0
    79bc:	70 e0       	ldi	r23, 0x00	; 0
    79be:	8e e4       	ldi	r24, 0x4E	; 78
    79c0:	98 e0       	ldi	r25, 0x08	; 8
    79c2:	97 dc       	rcall	.-1746   	; 0x72f2 <_uploadMessage>
    79c4:	f0 dc       	rcall	.-1568   	; 0x73a6 <_reply2ReturnCode>
    79c6:	a0 96       	adiw	r28, 0x20	; 32
    79c8:	0f b6       	in	r0, 0x3f	; 63
    79ca:	f8 94       	cli
    79cc:	de bf       	out	0x3e, r29	; 62
    79ce:	0f be       	out	0x3f, r0	; 63
    79d0:	cd bf       	out	0x3d, r28	; 61
    79d2:	df 91       	pop	r29
    79d4:	cf 91       	pop	r28
    79d6:	1f 91       	pop	r17
    79d8:	0f 91       	pop	r16
    79da:	ff 90       	pop	r15
    79dc:	ef 90       	pop	r14
    79de:	df 90       	pop	r13
    79e0:	cf 90       	pop	r12
    79e2:	bf 90       	pop	r11
    79e4:	af 90       	pop	r10
    79e6:	9f 90       	pop	r9
    79e8:	8f 90       	pop	r8
    79ea:	7f 90       	pop	r7
    79ec:	6f 90       	pop	r6
    79ee:	5f 90       	pop	r5
    79f0:	4f 90       	pop	r4
    79f2:	3f 90       	pop	r3
    79f4:	2f 90       	pop	r2
    79f6:	08 95       	ret

000079f8 <lora_driver_setOtaaIdentity>:
    79f8:	ef 92       	push	r14
    79fa:	ff 92       	push	r15
    79fc:	0f 93       	push	r16
    79fe:	1f 93       	push	r17
    7a00:	cf 93       	push	r28
    7a02:	df 93       	push	r29
    7a04:	ec 01       	movw	r28, r24
    7a06:	8b 01       	movw	r16, r22
    7a08:	7a 01       	movw	r14, r20
    7a0a:	81 e0       	ldi	r24, 0x01	; 1
    7a0c:	f4 de       	rcall	.-536    	; 0x77f6 <lora_driver_setAdaptiveDataRate>
    7a0e:	81 11       	cpse	r24, r1
    7a10:	0d c0       	rjmp	.+26     	; 0x7a2c <lora_driver_setOtaaIdentity+0x34>
    7a12:	ce 01       	movw	r24, r28
    7a14:	d4 dd       	rcall	.-1112   	; 0x75be <lora_driver_setApplicationIdentifier>
    7a16:	81 11       	cpse	r24, r1
    7a18:	09 c0       	rjmp	.+18     	; 0x7a2c <lora_driver_setOtaaIdentity+0x34>
    7a1a:	c8 01       	movw	r24, r16
    7a1c:	e1 dd       	rcall	.-1086   	; 0x75e0 <lora_driver_setApplicationKey>
    7a1e:	81 11       	cpse	r24, r1
    7a20:	05 c0       	rjmp	.+10     	; 0x7a2c <lora_driver_setOtaaIdentity+0x34>
    7a22:	c7 01       	movw	r24, r14
    7a24:	bb dd       	rcall	.-1162   	; 0x759c <lora_driver_setDeviceIdentifier>
    7a26:	81 11       	cpse	r24, r1
    7a28:	01 c0       	rjmp	.+2      	; 0x7a2c <lora_driver_setOtaaIdentity+0x34>
    7a2a:	eb dd       	rcall	.-1066   	; 0x7602 <lora_driver_saveMac>
    7a2c:	df 91       	pop	r29
    7a2e:	cf 91       	pop	r28
    7a30:	1f 91       	pop	r17
    7a32:	0f 91       	pop	r16
    7a34:	ff 90       	pop	r15
    7a36:	ef 90       	pop	r14
    7a38:	08 95       	ret

00007a3a <lora_driver_mapReturnCodeToText>:
    7a3a:	90 e0       	ldi	r25, 0x00	; 0
    7a3c:	fc 01       	movw	r30, r24
    7a3e:	ee 0f       	add	r30, r30
    7a40:	ff 1f       	adc	r31, r31
    7a42:	8e 0f       	add	r24, r30
    7a44:	9f 1f       	adc	r25, r31
    7a46:	fc 01       	movw	r30, r24
    7a48:	e9 5e       	subi	r30, 0xE9	; 233
    7a4a:	f6 4f       	sbci	r31, 0xF6	; 246
    7a4c:	81 81       	ldd	r24, Z+1	; 0x01
    7a4e:	92 81       	ldd	r25, Z+2	; 0x02
    7a50:	08 95       	ret

00007a52 <decode_port_no>:
    7a52:	dc 01       	movw	r26, r24
    7a54:	00 97       	sbiw	r24, 0x00	; 0
    7a56:	29 f1       	breq	.+74     	; 0x7aa2 <decode_port_no+0x50>
    7a58:	fb 01       	movw	r30, r22
    7a5a:	20 81       	ld	r18, Z
    7a5c:	fc 01       	movw	r30, r24
    7a5e:	01 90       	ld	r0, Z+
    7a60:	00 20       	and	r0, r0
    7a62:	e9 f7       	brne	.-6      	; 0x7a5e <decode_port_no+0xc>
    7a64:	31 97       	sbiw	r30, 0x01	; 1
    7a66:	e8 1b       	sub	r30, r24
    7a68:	f9 0b       	sbc	r31, r25
    7a6a:	82 2f       	mov	r24, r18
    7a6c:	90 e0       	ldi	r25, 0x00	; 0
    7a6e:	e8 17       	cp	r30, r24
    7a70:	f9 07       	cpc	r31, r25
    7a72:	c8 f0       	brcs	.+50     	; 0x7aa6 <decode_port_no+0x54>
    7a74:	80 e0       	ldi	r24, 0x00	; 0
    7a76:	08 c0       	rjmp	.+16     	; 0x7a88 <decode_port_no+0x36>
    7a78:	88 0f       	add	r24, r24
    7a7a:	38 2f       	mov	r19, r24
    7a7c:	33 0f       	add	r19, r19
    7a7e:	33 0f       	add	r19, r19
    7a80:	83 0f       	add	r24, r19
    7a82:	80 53       	subi	r24, 0x30	; 48
    7a84:	89 0f       	add	r24, r25
    7a86:	2f 5f       	subi	r18, 0xFF	; 255
    7a88:	fd 01       	movw	r30, r26
    7a8a:	e2 0f       	add	r30, r18
    7a8c:	f1 1d       	adc	r31, r1
    7a8e:	90 81       	ld	r25, Z
    7a90:	30 ed       	ldi	r19, 0xD0	; 208
    7a92:	39 0f       	add	r19, r25
    7a94:	3a 30       	cpi	r19, 0x0A	; 10
    7a96:	10 f4       	brcc	.+4      	; 0x7a9c <decode_port_no+0x4a>
    7a98:	91 11       	cpse	r25, r1
    7a9a:	ee cf       	rjmp	.-36     	; 0x7a78 <decode_port_no+0x26>
    7a9c:	fb 01       	movw	r30, r22
    7a9e:	20 83       	st	Z, r18
    7aa0:	08 95       	ret
    7aa2:	80 e0       	ldi	r24, 0x00	; 0
    7aa4:	08 95       	ret
    7aa6:	80 e0       	ldi	r24, 0x00	; 0
    7aa8:	08 95       	ret

00007aaa <decode_hexadecimal_string_bytes>:
    7aaa:	0f 93       	push	r16
    7aac:	1f 93       	push	r17
    7aae:	cf 93       	push	r28
    7ab0:	df 93       	push	r29
    7ab2:	dc 01       	movw	r26, r24
    7ab4:	ea 01       	movw	r28, r20
    7ab6:	20 97       	sbiw	r28, 0x00	; 0
    7ab8:	e1 f1       	breq	.+120    	; 0x7b32 <decode_hexadecimal_string_bytes+0x88>
    7aba:	fa 01       	movw	r30, r20
    7abc:	01 90       	ld	r0, Z+
    7abe:	00 20       	and	r0, r0
    7ac0:	e9 f7       	brne	.-6      	; 0x7abc <decode_hexadecimal_string_bytes+0x12>
    7ac2:	31 97       	sbiw	r30, 0x01	; 1
    7ac4:	e4 1b       	sub	r30, r20
    7ac6:	f5 0b       	sbc	r31, r21
    7ac8:	32 97       	sbiw	r30, 0x02	; 2
    7aca:	10 f5       	brcc	.+68     	; 0x7b10 <decode_hexadecimal_string_bytes+0x66>
    7acc:	32 c0       	rjmp	.+100    	; 0x7b32 <decode_hexadecimal_string_bytes+0x88>
    7ace:	8d 01       	movw	r16, r26
    7ad0:	04 0f       	add	r16, r20
    7ad2:	15 1f       	adc	r17, r21
    7ad4:	30 e0       	ldi	r19, 0x00	; 0
    7ad6:	ae 01       	movw	r20, r28
    7ad8:	42 0f       	add	r20, r18
    7ada:	53 1f       	adc	r21, r19
    7adc:	fa 01       	movw	r30, r20
    7ade:	90 81       	ld	r25, Z
    7ae0:	91 34       	cpi	r25, 0x41	; 65
    7ae2:	28 f0       	brcs	.+10     	; 0x7aee <decode_hexadecimal_string_bytes+0x44>
    7ae4:	97 53       	subi	r25, 0x37	; 55
    7ae6:	59 2f       	mov	r21, r25
    7ae8:	52 95       	swap	r21
    7aea:	50 7f       	andi	r21, 0xF0	; 240
    7aec:	03 c0       	rjmp	.+6      	; 0x7af4 <decode_hexadecimal_string_bytes+0x4a>
    7aee:	59 2f       	mov	r21, r25
    7af0:	52 95       	swap	r21
    7af2:	50 7f       	andi	r21, 0xF0	; 240
    7af4:	2c 0f       	add	r18, r28
    7af6:	3d 1f       	adc	r19, r29
    7af8:	f9 01       	movw	r30, r18
    7afa:	91 81       	ldd	r25, Z+1	; 0x01
    7afc:	91 34       	cpi	r25, 0x41	; 65
    7afe:	10 f0       	brcs	.+4      	; 0x7b04 <decode_hexadecimal_string_bytes+0x5a>
    7b00:	97 53       	subi	r25, 0x37	; 55
    7b02:	01 c0       	rjmp	.+2      	; 0x7b06 <decode_hexadecimal_string_bytes+0x5c>
    7b04:	90 53       	subi	r25, 0x30	; 48
    7b06:	95 0f       	add	r25, r21
    7b08:	f8 01       	movw	r30, r16
    7b0a:	90 83       	st	Z, r25
    7b0c:	8f 5f       	subi	r24, 0xFF	; 255
    7b0e:	01 c0       	rjmp	.+2      	; 0x7b12 <decode_hexadecimal_string_bytes+0x68>
    7b10:	80 e0       	ldi	r24, 0x00	; 0
    7b12:	28 2f       	mov	r18, r24
    7b14:	22 0f       	add	r18, r18
    7b16:	48 2f       	mov	r20, r24
    7b18:	50 e0       	ldi	r21, 0x00	; 0
    7b1a:	fe 01       	movw	r30, r28
    7b1c:	01 90       	ld	r0, Z+
    7b1e:	00 20       	and	r0, r0
    7b20:	e9 f7       	brne	.-6      	; 0x7b1c <decode_hexadecimal_string_bytes+0x72>
    7b22:	31 97       	sbiw	r30, 0x01	; 1
    7b24:	ec 1b       	sub	r30, r28
    7b26:	fd 0b       	sbc	r31, r29
    7b28:	4e 17       	cp	r20, r30
    7b2a:	5f 07       	cpc	r21, r31
    7b2c:	10 f4       	brcc	.+4      	; 0x7b32 <decode_hexadecimal_string_bytes+0x88>
    7b2e:	86 13       	cpse	r24, r22
    7b30:	ce cf       	rjmp	.-100    	; 0x7ace <decode_hexadecimal_string_bytes+0x24>
    7b32:	df 91       	pop	r29
    7b34:	cf 91       	pop	r28
    7b36:	1f 91       	pop	r17
    7b38:	0f 91       	pop	r16
    7b3a:	08 95       	ret

00007b3c <_serialCallBack>:
    7b3c:	80 91 96 15 	lds	r24, 0x1596	; 0x801596 <crc_sum.1945>
    7b40:	86 0f       	add	r24, r22
    7b42:	80 93 96 15 	sts	0x1596, r24	; 0x801596 <crc_sum.1945>
    7b46:	90 91 99 15 	lds	r25, 0x1599	; 0x801599 <_mh_state>
    7b4a:	91 30       	cpi	r25, 0x01	; 1
    7b4c:	79 f0       	breq	.+30     	; 0x7b6c <_serialCallBack+0x30>
    7b4e:	28 f0       	brcs	.+10     	; 0x7b5a <_serialCallBack+0x1e>
    7b50:	92 30       	cpi	r25, 0x02	; 2
    7b52:	a9 f0       	breq	.+42     	; 0x7b7e <_serialCallBack+0x42>
    7b54:	93 30       	cpi	r25, 0x03	; 3
    7b56:	19 f1       	breq	.+70     	; 0x7b9e <_serialCallBack+0x62>
    7b58:	08 95       	ret
    7b5a:	6f 3f       	cpi	r22, 0xFF	; 255
    7b5c:	09 f0       	breq	.+2      	; 0x7b60 <_serialCallBack+0x24>
    7b5e:	48 c0       	rjmp	.+144    	; 0x7bf0 <_serialCallBack+0xb4>
    7b60:	10 92 96 15 	sts	0x1596, r1	; 0x801596 <crc_sum.1945>
    7b64:	81 e0       	ldi	r24, 0x01	; 1
    7b66:	80 93 99 15 	sts	0x1599, r24	; 0x801599 <_mh_state>
    7b6a:	08 95       	ret
    7b6c:	66 38       	cpi	r22, 0x86	; 134
    7b6e:	09 f0       	breq	.+2      	; 0x7b72 <_serialCallBack+0x36>
    7b70:	3f c0       	rjmp	.+126    	; 0x7bf0 <_serialCallBack+0xb4>
    7b72:	10 92 95 15 	sts	0x1595, r1	; 0x801595 <inDex.1943>
    7b76:	82 e0       	ldi	r24, 0x02	; 2
    7b78:	80 93 99 15 	sts	0x1599, r24	; 0x801599 <_mh_state>
    7b7c:	08 95       	ret
    7b7e:	e0 91 95 15 	lds	r30, 0x1595	; 0x801595 <inDex.1943>
    7b82:	81 e0       	ldi	r24, 0x01	; 1
    7b84:	8e 0f       	add	r24, r30
    7b86:	80 93 95 15 	sts	0x1595, r24	; 0x801595 <inDex.1943>
    7b8a:	f0 e0       	ldi	r31, 0x00	; 0
    7b8c:	ed 56       	subi	r30, 0x6D	; 109
    7b8e:	fa 4e       	sbci	r31, 0xEA	; 234
    7b90:	60 83       	st	Z, r22
    7b92:	82 30       	cpi	r24, 0x02	; 2
    7b94:	69 f5       	brne	.+90     	; 0x7bf0 <_serialCallBack+0xb4>
    7b96:	83 e0       	ldi	r24, 0x03	; 3
    7b98:	80 93 99 15 	sts	0x1599, r24	; 0x801599 <_mh_state>
    7b9c:	08 95       	ret
    7b9e:	90 91 95 15 	lds	r25, 0x1595	; 0x801595 <inDex.1943>
    7ba2:	21 e0       	ldi	r18, 0x01	; 1
    7ba4:	29 0f       	add	r18, r25
    7ba6:	20 93 95 15 	sts	0x1595, r18	; 0x801595 <inDex.1943>
    7baa:	96 30       	cpi	r25, 0x06	; 6
    7bac:	09 f5       	brne	.+66     	; 0x7bf0 <_serialCallBack+0xb4>
    7bae:	81 11       	cpse	r24, r1
    7bb0:	0e c0       	rjmp	.+28     	; 0x7bce <_serialCallBack+0x92>
    7bb2:	e3 e9       	ldi	r30, 0x93	; 147
    7bb4:	f5 e1       	ldi	r31, 0x15	; 21
    7bb6:	80 81       	ld	r24, Z
    7bb8:	90 e0       	ldi	r25, 0x00	; 0
    7bba:	98 2f       	mov	r25, r24
    7bbc:	88 27       	eor	r24, r24
    7bbe:	21 81       	ldd	r18, Z+1	; 0x01
    7bc0:	82 0f       	add	r24, r18
    7bc2:	91 1d       	adc	r25, r1
    7bc4:	90 93 9b 15 	sts	0x159B, r25	; 0x80159b <_ppm+0x1>
    7bc8:	80 93 9a 15 	sts	0x159A, r24	; 0x80159a <_ppm>
    7bcc:	04 c0       	rjmp	.+8      	; 0x7bd6 <_serialCallBack+0x9a>
    7bce:	10 92 9b 15 	sts	0x159B, r1	; 0x80159b <_ppm+0x1>
    7bd2:	10 92 9a 15 	sts	0x159A, r1	; 0x80159a <_ppm>
    7bd6:	10 92 99 15 	sts	0x1599, r1	; 0x801599 <_mh_state>
    7bda:	e0 91 97 15 	lds	r30, 0x1597	; 0x801597 <_appCallBack>
    7bde:	f0 91 98 15 	lds	r31, 0x1598	; 0x801598 <_appCallBack+0x1>
    7be2:	30 97       	sbiw	r30, 0x00	; 0
    7be4:	29 f0       	breq	.+10     	; 0x7bf0 <_serialCallBack+0xb4>
    7be6:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <_ppm>
    7bea:	90 91 9b 15 	lds	r25, 0x159B	; 0x80159b <_ppm+0x1>
    7bee:	19 95       	eicall
    7bf0:	08 95       	ret

00007bf2 <mh_z19_initialise>:
    7bf2:	8f 92       	push	r8
    7bf4:	9f 92       	push	r9
    7bf6:	af 92       	push	r10
    7bf8:	cf 92       	push	r12
    7bfa:	ef 92       	push	r14
    7bfc:	0f 93       	push	r16
    7bfe:	0f 2e       	mov	r0, r31
    7c00:	fe e9       	ldi	r31, 0x9E	; 158
    7c02:	8f 2e       	mov	r8, r31
    7c04:	fd e3       	ldi	r31, 0x3D	; 61
    7c06:	9f 2e       	mov	r9, r31
    7c08:	f0 2d       	mov	r31, r0
    7c0a:	68 94       	set
    7c0c:	aa 24       	eor	r10, r10
    7c0e:	a4 f8       	bld	r10, 4
    7c10:	68 94       	set
    7c12:	cc 24       	eor	r12, r12
    7c14:	c4 f8       	bld	r12, 4
    7c16:	e1 2c       	mov	r14, r1
    7c18:	00 e0       	ldi	r16, 0x00	; 0
    7c1a:	23 e0       	ldi	r18, 0x03	; 3
    7c1c:	40 e8       	ldi	r20, 0x80	; 128
    7c1e:	55 e2       	ldi	r21, 0x25	; 37
    7c20:	60 e0       	ldi	r22, 0x00	; 0
    7c22:	70 e0       	ldi	r23, 0x00	; 0
    7c24:	73 d0       	rcall	.+230    	; 0x7d0c <serial_create>
    7c26:	90 93 9d 15 	sts	0x159D, r25	; 0x80159d <_serial+0x1>
    7c2a:	80 93 9c 15 	sts	0x159C, r24	; 0x80159c <_serial>
    7c2e:	0f 91       	pop	r16
    7c30:	ef 90       	pop	r14
    7c32:	cf 90       	pop	r12
    7c34:	af 90       	pop	r10
    7c36:	9f 90       	pop	r9
    7c38:	8f 90       	pop	r8
    7c3a:	08 95       	ret

00007c3c <mh_z19_injectCallBack>:
    7c3c:	90 93 98 15 	sts	0x1598, r25	; 0x801598 <_appCallBack+0x1>
    7c40:	80 93 97 15 	sts	0x1597, r24	; 0x801597 <_appCallBack>
    7c44:	08 95       	ret

00007c46 <mh_z19_takeMeassuring>:
    7c46:	cf 93       	push	r28
    7c48:	df 93       	push	r29
    7c4a:	cd b7       	in	r28, 0x3d	; 61
    7c4c:	de b7       	in	r29, 0x3e	; 62
    7c4e:	29 97       	sbiw	r28, 0x09	; 9
    7c50:	0f b6       	in	r0, 0x3f	; 63
    7c52:	f8 94       	cli
    7c54:	de bf       	out	0x3e, r29	; 62
    7c56:	0f be       	out	0x3f, r0	; 63
    7c58:	cd bf       	out	0x3d, r28	; 61
    7c5a:	89 e0       	ldi	r24, 0x09	; 9
    7c5c:	e1 e5       	ldi	r30, 0x51	; 81
    7c5e:	f6 e0       	ldi	r31, 0x06	; 6
    7c60:	9e 01       	movw	r18, r28
    7c62:	2f 5f       	subi	r18, 0xFF	; 255
    7c64:	3f 4f       	sbci	r19, 0xFF	; 255
    7c66:	d9 01       	movw	r26, r18
    7c68:	01 90       	ld	r0, Z+
    7c6a:	0d 92       	st	X+, r0
    7c6c:	8a 95       	dec	r24
    7c6e:	e1 f7       	brne	.-8      	; 0x7c68 <mh_z19_takeMeassuring+0x22>
    7c70:	10 92 9b 15 	sts	0x159B, r1	; 0x80159b <_ppm+0x1>
    7c74:	10 92 9a 15 	sts	0x159A, r1	; 0x80159a <_ppm>
    7c78:	80 91 9c 15 	lds	r24, 0x159C	; 0x80159c <_serial>
    7c7c:	90 91 9d 15 	lds	r25, 0x159D	; 0x80159d <_serial+0x1>
    7c80:	00 97       	sbiw	r24, 0x00	; 0
    7c82:	31 f0       	breq	.+12     	; 0x7c90 <mh_z19_takeMeassuring+0x4a>
    7c84:	42 2f       	mov	r20, r18
    7c86:	53 2f       	mov	r21, r19
    7c88:	69 e0       	ldi	r22, 0x09	; 9
    7c8a:	07 d1       	rcall	.+526    	; 0x7e9a <serial_sendBytes>
    7c8c:	80 e0       	ldi	r24, 0x00	; 0
    7c8e:	01 c0       	rjmp	.+2      	; 0x7c92 <mh_z19_takeMeassuring+0x4c>
    7c90:	82 e0       	ldi	r24, 0x02	; 2
    7c92:	29 96       	adiw	r28, 0x09	; 9
    7c94:	0f b6       	in	r0, 0x3f	; 63
    7c96:	f8 94       	cli
    7c98:	de bf       	out	0x3e, r29	; 62
    7c9a:	0f be       	out	0x3f, r0	; 63
    7c9c:	cd bf       	out	0x3d, r28	; 61
    7c9e:	df 91       	pop	r29
    7ca0:	cf 91       	pop	r28
    7ca2:	08 95       	ret

00007ca4 <rc_servo_setPosition>:
    7ca4:	65 36       	cpi	r22, 0x65	; 101
    7ca6:	0c f0       	brlt	.+2      	; 0x7caa <rc_servo_setPosition+0x6>
    7ca8:	64 e6       	ldi	r22, 0x64	; 100
    7caa:	6c 39       	cpi	r22, 0x9C	; 156
    7cac:	0c f4       	brge	.+2      	; 0x7cb0 <rc_servo_setPosition+0xc>
    7cae:	6c e9       	ldi	r22, 0x9C	; 156
    7cb0:	96 ef       	ldi	r25, 0xF6	; 246
    7cb2:	69 02       	muls	r22, r25
    7cb4:	b0 01       	movw	r22, r0
    7cb6:	11 24       	eor	r1, r1
    7cb8:	68 54       	subi	r22, 0x48	; 72
    7cba:	74 4f       	sbci	r23, 0xF4	; 244
    7cbc:	81 11       	cpse	r24, r1
    7cbe:	05 c0       	rjmp	.+10     	; 0x7cca <rc_servo_setPosition+0x26>
    7cc0:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x7c0129>
    7cc4:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x7c0128>
    7cc8:	08 95       	ret
    7cca:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x7c012b>
    7cce:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x7c012a>
    7cd2:	08 95       	ret

00007cd4 <rc_servo_initialise>:
    7cd4:	ea e0       	ldi	r30, 0x0A	; 10
    7cd6:	f1 e0       	ldi	r31, 0x01	; 1
    7cd8:	80 81       	ld	r24, Z
    7cda:	88 61       	ori	r24, 0x18	; 24
    7cdc:	80 83       	st	Z, r24
    7cde:	8f e3       	ldi	r24, 0x3F	; 63
    7ce0:	9c e9       	ldi	r25, 0x9C	; 156
    7ce2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x7c0127>
    7ce6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x7c0126>
    7cea:	60 e0       	ldi	r22, 0x00	; 0
    7cec:	80 e0       	ldi	r24, 0x00	; 0
    7cee:	da df       	rcall	.-76     	; 0x7ca4 <rc_servo_setPosition>
    7cf0:	60 e0       	ldi	r22, 0x00	; 0
    7cf2:	81 e0       	ldi	r24, 0x01	; 1
    7cf4:	d7 df       	rcall	.-82     	; 0x7ca4 <rc_servo_setPosition>
    7cf6:	e0 e2       	ldi	r30, 0x20	; 32
    7cf8:	f1 e0       	ldi	r31, 0x01	; 1
    7cfa:	80 81       	ld	r24, Z
    7cfc:	82 6a       	ori	r24, 0xA2	; 162
    7cfe:	80 83       	st	Z, r24
    7d00:	e1 e2       	ldi	r30, 0x21	; 33
    7d02:	f1 e0       	ldi	r31, 0x01	; 1
    7d04:	80 81       	ld	r24, Z
    7d06:	8a 61       	ori	r24, 0x1A	; 26
    7d08:	80 83       	st	Z, r24
    7d0a:	08 95       	ret

00007d0c <serial_create>:
    7d0c:	2f 92       	push	r2
    7d0e:	3f 92       	push	r3
    7d10:	4f 92       	push	r4
    7d12:	5f 92       	push	r5
    7d14:	6f 92       	push	r6
    7d16:	7f 92       	push	r7
    7d18:	8f 92       	push	r8
    7d1a:	9f 92       	push	r9
    7d1c:	af 92       	push	r10
    7d1e:	cf 92       	push	r12
    7d20:	ef 92       	push	r14
    7d22:	ff 92       	push	r15
    7d24:	0f 93       	push	r16
    7d26:	1f 93       	push	r17
    7d28:	cf 93       	push	r28
    7d2a:	df 93       	push	r29
    7d2c:	cd b7       	in	r28, 0x3d	; 61
    7d2e:	de b7       	in	r29, 0x3e	; 62
    7d30:	f8 2e       	mov	r15, r24
    7d32:	2a 01       	movw	r4, r20
    7d34:	3b 01       	movw	r6, r22
    7d36:	88 e0       	ldi	r24, 0x08	; 8
    7d38:	90 e0       	ldi	r25, 0x00	; 0
    7d3a:	b5 d6       	rcall	.+3434   	; 0x8aa6 <malloc>
    7d3c:	8c 01       	movw	r16, r24
    7d3e:	8f 2d       	mov	r24, r15
    7d40:	90 e0       	ldi	r25, 0x00	; 0
    7d42:	fc 01       	movw	r30, r24
    7d44:	ee 0f       	add	r30, r30
    7d46:	ff 1f       	adc	r31, r31
    7d48:	e2 56       	subi	r30, 0x62	; 98
    7d4a:	fa 4e       	sbci	r31, 0xEA	; 234
    7d4c:	11 83       	std	Z+1, r17	; 0x01
    7d4e:	00 83       	st	Z, r16
    7d50:	01 15       	cp	r16, r1
    7d52:	11 05       	cpc	r17, r1
    7d54:	09 f4       	brne	.+2      	; 0x7d58 <serial_create+0x4c>
    7d56:	64 c0       	rjmp	.+200    	; 0x7e20 <serial_create+0x114>
    7d58:	88 0f       	add	r24, r24
    7d5a:	99 1f       	adc	r25, r25
    7d5c:	fc 01       	movw	r30, r24
    7d5e:	e9 5f       	subi	r30, 0xF9	; 249
    7d60:	fd 4f       	sbci	r31, 0xFD	; 253
    7d62:	80 81       	ld	r24, Z
    7d64:	91 81       	ldd	r25, Z+1	; 0x01
    7d66:	d8 01       	movw	r26, r16
    7d68:	8d 93       	st	X+, r24
    7d6a:	9c 93       	st	X, r25
    7d6c:	8c 2d       	mov	r24, r12
    7d6e:	90 e0       	ldi	r25, 0x00	; 0
    7d70:	88 0f       	add	r24, r24
    7d72:	99 1f       	adc	r25, r25
    7d74:	88 0f       	add	r24, r24
    7d76:	99 1f       	adc	r25, r25
    7d78:	96 d6       	rcall	.+3372   	; 0x8aa6 <malloc>
    7d7a:	1c 01       	movw	r2, r24
    7d7c:	86 e0       	ldi	r24, 0x06	; 6
    7d7e:	90 e0       	ldi	r25, 0x00	; 0
    7d80:	92 d6       	rcall	.+3364   	; 0x8aa6 <malloc>
    7d82:	7c 01       	movw	r14, r24
    7d84:	4c 2d       	mov	r20, r12
    7d86:	b1 01       	movw	r22, r2
    7d88:	50 d5       	rcall	.+2720   	; 0x882a <fifo_init>
    7d8a:	f8 01       	movw	r30, r16
    7d8c:	f5 82       	std	Z+5, r15	; 0x05
    7d8e:	e4 82       	std	Z+4, r14	; 0x04
    7d90:	8a 2d       	mov	r24, r10
    7d92:	90 e0       	ldi	r25, 0x00	; 0
    7d94:	88 0f       	add	r24, r24
    7d96:	99 1f       	adc	r25, r25
    7d98:	88 0f       	add	r24, r24
    7d9a:	99 1f       	adc	r25, r25
    7d9c:	84 d6       	rcall	.+3336   	; 0x8aa6 <malloc>
    7d9e:	1c 01       	movw	r2, r24
    7da0:	86 e0       	ldi	r24, 0x06	; 6
    7da2:	90 e0       	ldi	r25, 0x00	; 0
    7da4:	80 d6       	rcall	.+3328   	; 0x8aa6 <malloc>
    7da6:	7c 01       	movw	r14, r24
    7da8:	4a 2d       	mov	r20, r10
    7daa:	b1 01       	movw	r22, r2
    7dac:	3e d5       	rcall	.+2684   	; 0x882a <fifo_init>
    7dae:	d8 01       	movw	r26, r16
    7db0:	13 96       	adiw	r26, 0x03	; 3
    7db2:	fc 92       	st	X, r15
    7db4:	ee 92       	st	-X, r14
    7db6:	12 97       	sbiw	r26, 0x02	; 2
    7db8:	17 96       	adiw	r26, 0x07	; 7
    7dba:	9c 92       	st	X, r9
    7dbc:	8e 92       	st	-X, r8
    7dbe:	16 97       	sbiw	r26, 0x06	; 6
    7dc0:	ff b6       	in	r15, 0x3f	; 63
    7dc2:	f8 94       	cli
    7dc4:	ed 91       	ld	r30, X+
    7dc6:	fc 91       	ld	r31, X
    7dc8:	11 97       	sbiw	r26, 0x01	; 1
    7dca:	36 97       	sbiw	r30, 0x06	; 6
    7dcc:	80 81       	ld	r24, Z
    7dce:	82 60       	ori	r24, 0x02	; 2
    7dd0:	80 83       	st	Z, r24
    7dd2:	8d 90       	ld	r8, X+
    7dd4:	9c 90       	ld	r9, X
    7dd6:	c3 01       	movw	r24, r6
    7dd8:	b2 01       	movw	r22, r4
    7dda:	20 d6       	rcall	.+3136   	; 0x8a1c <__floatunsisf>
    7ddc:	20 e0       	ldi	r18, 0x00	; 0
    7dde:	30 e0       	ldi	r19, 0x00	; 0
    7de0:	40 e0       	ldi	r20, 0x00	; 0
    7de2:	51 e4       	ldi	r21, 0x41	; 65
    7de4:	b5 d9       	rcall	.-3222   	; 0x7150 <__mulsf3>
    7de6:	9b 01       	movw	r18, r22
    7de8:	ac 01       	movw	r20, r24
    7dea:	60 e0       	ldi	r22, 0x00	; 0
    7dec:	74 e2       	ldi	r23, 0x24	; 36
    7dee:	84 e7       	ldi	r24, 0x74	; 116
    7df0:	9b e4       	ldi	r25, 0x4B	; 75
    7df2:	a3 d5       	rcall	.+2886   	; 0x893a <__divsf3>
    7df4:	20 e0       	ldi	r18, 0x00	; 0
    7df6:	30 e0       	ldi	r19, 0x00	; 0
    7df8:	40 e8       	ldi	r20, 0x80	; 128
    7dfa:	5f e3       	ldi	r21, 0x3F	; 63
    7dfc:	32 d5       	rcall	.+2660   	; 0x8862 <__subsf3>
    7dfe:	2b d9       	rcall	.-3498   	; 0x7056 <__fixunssfsi>
    7e00:	f4 01       	movw	r30, r8
    7e02:	32 97       	sbiw	r30, 0x02	; 2
    7e04:	60 83       	st	Z, r22
    7e06:	d8 01       	movw	r26, r16
    7e08:	ed 91       	ld	r30, X+
    7e0a:	fc 91       	ld	r31, X
    7e0c:	11 97       	sbiw	r26, 0x01	; 1
    7e0e:	35 97       	sbiw	r30, 0x05	; 5
    7e10:	88 e9       	ldi	r24, 0x98	; 152
    7e12:	80 83       	st	Z, r24
    7e14:	ed 91       	ld	r30, X+
    7e16:	fc 91       	ld	r31, X
    7e18:	34 97       	sbiw	r30, 0x04	; 4
    7e1a:	86 e0       	ldi	r24, 0x06	; 6
    7e1c:	80 83       	st	Z, r24
    7e1e:	ff be       	out	0x3f, r15	; 63
    7e20:	c8 01       	movw	r24, r16
    7e22:	df 91       	pop	r29
    7e24:	cf 91       	pop	r28
    7e26:	1f 91       	pop	r17
    7e28:	0f 91       	pop	r16
    7e2a:	ff 90       	pop	r15
    7e2c:	ef 90       	pop	r14
    7e2e:	cf 90       	pop	r12
    7e30:	af 90       	pop	r10
    7e32:	9f 90       	pop	r9
    7e34:	8f 90       	pop	r8
    7e36:	7f 90       	pop	r7
    7e38:	6f 90       	pop	r6
    7e3a:	5f 90       	pop	r5
    7e3c:	4f 90       	pop	r4
    7e3e:	3f 90       	pop	r3
    7e40:	2f 90       	pop	r2
    7e42:	08 95       	ret

00007e44 <serial_sendByte>:
    7e44:	cf 93       	push	r28
    7e46:	df 93       	push	r29
    7e48:	dc 01       	movw	r26, r24
    7e4a:	89 2b       	or	r24, r25
    7e4c:	01 f1       	breq	.+64     	; 0x7e8e <serial_sendByte+0x4a>
    7e4e:	12 96       	adiw	r26, 0x02	; 2
    7e50:	ed 91       	ld	r30, X+
    7e52:	fc 91       	ld	r31, X
    7e54:	13 97       	sbiw	r26, 0x03	; 3
    7e56:	93 81       	ldd	r25, Z+3	; 0x03
    7e58:	82 81       	ldd	r24, Z+2	; 0x02
    7e5a:	25 81       	ldd	r18, Z+5	; 0x05
    7e5c:	98 1b       	sub	r25, r24
    7e5e:	92 23       	and	r25, r18
    7e60:	84 81       	ldd	r24, Z+4	; 0x04
    7e62:	98 17       	cp	r25, r24
    7e64:	b1 f0       	breq	.+44     	; 0x7e92 <serial_sendByte+0x4e>
    7e66:	83 81       	ldd	r24, Z+3	; 0x03
    7e68:	26 95       	lsr	r18
    7e6a:	28 23       	and	r18, r24
    7e6c:	c0 81       	ld	r28, Z
    7e6e:	d1 81       	ldd	r29, Z+1	; 0x01
    7e70:	c2 0f       	add	r28, r18
    7e72:	d1 1d       	adc	r29, r1
    7e74:	68 83       	st	Y, r22
    7e76:	8f 5f       	subi	r24, 0xFF	; 255
    7e78:	95 81       	ldd	r25, Z+5	; 0x05
    7e7a:	89 23       	and	r24, r25
    7e7c:	83 83       	std	Z+3, r24	; 0x03
    7e7e:	ed 91       	ld	r30, X+
    7e80:	fc 91       	ld	r31, X
    7e82:	35 97       	sbiw	r30, 0x05	; 5
    7e84:	80 81       	ld	r24, Z
    7e86:	80 62       	ori	r24, 0x20	; 32
    7e88:	80 83       	st	Z, r24
    7e8a:	80 e0       	ldi	r24, 0x00	; 0
    7e8c:	03 c0       	rjmp	.+6      	; 0x7e94 <serial_sendByte+0x50>
    7e8e:	81 e0       	ldi	r24, 0x01	; 1
    7e90:	01 c0       	rjmp	.+2      	; 0x7e94 <serial_sendByte+0x50>
    7e92:	82 e0       	ldi	r24, 0x02	; 2
    7e94:	df 91       	pop	r29
    7e96:	cf 91       	pop	r28
    7e98:	08 95       	ret

00007e9a <serial_sendBytes>:
    7e9a:	ef 92       	push	r14
    7e9c:	ff 92       	push	r15
    7e9e:	0f 93       	push	r16
    7ea0:	1f 93       	push	r17
    7ea2:	cf 93       	push	r28
    7ea4:	df 93       	push	r29
    7ea6:	7c 01       	movw	r14, r24
    7ea8:	00 97       	sbiw	r24, 0x00	; 0
    7eaa:	09 f4       	brne	.+2      	; 0x7eae <serial_sendBytes+0x14>
    7eac:	41 c0       	rjmp	.+130    	; 0x7f30 <serial_sendBytes+0x96>
    7eae:	dc 01       	movw	r26, r24
    7eb0:	12 96       	adiw	r26, 0x02	; 2
    7eb2:	ed 91       	ld	r30, X+
    7eb4:	fc 91       	ld	r31, X
    7eb6:	13 97       	sbiw	r26, 0x03	; 3
    7eb8:	93 81       	ldd	r25, Z+3	; 0x03
    7eba:	82 81       	ldd	r24, Z+2	; 0x02
    7ebc:	98 1b       	sub	r25, r24
    7ebe:	85 81       	ldd	r24, Z+5	; 0x05
    7ec0:	98 23       	and	r25, r24
    7ec2:	84 81       	ldd	r24, Z+4	; 0x04
    7ec4:	89 1b       	sub	r24, r25
    7ec6:	86 17       	cp	r24, r22
    7ec8:	a8 f1       	brcs	.+106    	; 0x7f34 <serial_sendBytes+0x9a>
    7eca:	66 23       	and	r22, r22
    7ecc:	41 f1       	breq	.+80     	; 0x7f1e <serial_sendBytes+0x84>
    7ece:	84 2f       	mov	r24, r20
    7ed0:	95 2f       	mov	r25, r21
    7ed2:	dc 01       	movw	r26, r24
    7ed4:	61 50       	subi	r22, 0x01	; 1
    7ed6:	46 2f       	mov	r20, r22
    7ed8:	50 e0       	ldi	r21, 0x00	; 0
    7eda:	4f 5f       	subi	r20, 0xFF	; 255
    7edc:	5f 4f       	sbci	r21, 0xFF	; 255
    7ede:	48 0f       	add	r20, r24
    7ee0:	59 1f       	adc	r21, r25
    7ee2:	e7 01       	movw	r28, r14
    7ee4:	ea 81       	ldd	r30, Y+2	; 0x02
    7ee6:	fb 81       	ldd	r31, Y+3	; 0x03
    7ee8:	93 81       	ldd	r25, Z+3	; 0x03
    7eea:	82 81       	ldd	r24, Z+2	; 0x02
    7eec:	25 81       	ldd	r18, Z+5	; 0x05
    7eee:	98 1b       	sub	r25, r24
    7ef0:	92 23       	and	r25, r18
    7ef2:	84 81       	ldd	r24, Z+4	; 0x04
    7ef4:	98 17       	cp	r25, r24
    7ef6:	79 f0       	breq	.+30     	; 0x7f16 <serial_sendBytes+0x7c>
    7ef8:	8c 91       	ld	r24, X
    7efa:	93 81       	ldd	r25, Z+3	; 0x03
    7efc:	26 95       	lsr	r18
    7efe:	29 23       	and	r18, r25
    7f00:	60 81       	ld	r22, Z
    7f02:	71 81       	ldd	r23, Z+1	; 0x01
    7f04:	8b 01       	movw	r16, r22
    7f06:	02 0f       	add	r16, r18
    7f08:	11 1d       	adc	r17, r1
    7f0a:	e8 01       	movw	r28, r16
    7f0c:	88 83       	st	Y, r24
    7f0e:	9f 5f       	subi	r25, 0xFF	; 255
    7f10:	85 81       	ldd	r24, Z+5	; 0x05
    7f12:	98 23       	and	r25, r24
    7f14:	93 83       	std	Z+3, r25	; 0x03
    7f16:	11 96       	adiw	r26, 0x01	; 1
    7f18:	a4 17       	cp	r26, r20
    7f1a:	b5 07       	cpc	r27, r21
    7f1c:	11 f7       	brne	.-60     	; 0x7ee2 <serial_sendBytes+0x48>
    7f1e:	d7 01       	movw	r26, r14
    7f20:	ed 91       	ld	r30, X+
    7f22:	fc 91       	ld	r31, X
    7f24:	35 97       	sbiw	r30, 0x05	; 5
    7f26:	80 81       	ld	r24, Z
    7f28:	80 62       	ori	r24, 0x20	; 32
    7f2a:	80 83       	st	Z, r24
    7f2c:	80 e0       	ldi	r24, 0x00	; 0
    7f2e:	03 c0       	rjmp	.+6      	; 0x7f36 <serial_sendBytes+0x9c>
    7f30:	81 e0       	ldi	r24, 0x01	; 1
    7f32:	01 c0       	rjmp	.+2      	; 0x7f36 <serial_sendBytes+0x9c>
    7f34:	82 e0       	ldi	r24, 0x02	; 2
    7f36:	df 91       	pop	r29
    7f38:	cf 91       	pop	r28
    7f3a:	1f 91       	pop	r17
    7f3c:	0f 91       	pop	r16
    7f3e:	ff 90       	pop	r15
    7f40:	ef 90       	pop	r14
    7f42:	08 95       	ret

00007f44 <serial_getByte>:
    7f44:	00 97       	sbiw	r24, 0x00	; 0
    7f46:	d1 f0       	breq	.+52     	; 0x7f7c <serial_getByte+0x38>
    7f48:	dc 01       	movw	r26, r24
    7f4a:	14 96       	adiw	r26, 0x04	; 4
    7f4c:	ed 91       	ld	r30, X+
    7f4e:	fc 91       	ld	r31, X
    7f50:	15 97       	sbiw	r26, 0x05	; 5
    7f52:	93 81       	ldd	r25, Z+3	; 0x03
    7f54:	82 81       	ldd	r24, Z+2	; 0x02
    7f56:	98 17       	cp	r25, r24
    7f58:	99 f0       	breq	.+38     	; 0x7f80 <serial_getByte+0x3c>
    7f5a:	92 81       	ldd	r25, Z+2	; 0x02
    7f5c:	85 81       	ldd	r24, Z+5	; 0x05
    7f5e:	86 95       	lsr	r24
    7f60:	89 23       	and	r24, r25
    7f62:	a0 81       	ld	r26, Z
    7f64:	b1 81       	ldd	r27, Z+1	; 0x01
    7f66:	a8 0f       	add	r26, r24
    7f68:	b1 1d       	adc	r27, r1
    7f6a:	8c 91       	ld	r24, X
    7f6c:	db 01       	movw	r26, r22
    7f6e:	8c 93       	st	X, r24
    7f70:	9f 5f       	subi	r25, 0xFF	; 255
    7f72:	85 81       	ldd	r24, Z+5	; 0x05
    7f74:	98 23       	and	r25, r24
    7f76:	92 83       	std	Z+2, r25	; 0x02
    7f78:	80 e0       	ldi	r24, 0x00	; 0
    7f7a:	08 95       	ret
    7f7c:	81 e0       	ldi	r24, 0x01	; 1
    7f7e:	08 95       	ret
    7f80:	83 e0       	ldi	r24, 0x03	; 3
    7f82:	08 95       	ret

00007f84 <__vector_25>:
    7f84:	1f 92       	push	r1
    7f86:	0f 92       	push	r0
    7f88:	0f b6       	in	r0, 0x3f	; 63
    7f8a:	0f 92       	push	r0
    7f8c:	11 24       	eor	r1, r1
    7f8e:	0b b6       	in	r0, 0x3b	; 59
    7f90:	0f 92       	push	r0
    7f92:	2f 93       	push	r18
    7f94:	3f 93       	push	r19
    7f96:	4f 93       	push	r20
    7f98:	5f 93       	push	r21
    7f9a:	6f 93       	push	r22
    7f9c:	7f 93       	push	r23
    7f9e:	8f 93       	push	r24
    7fa0:	9f 93       	push	r25
    7fa2:	af 93       	push	r26
    7fa4:	bf 93       	push	r27
    7fa6:	cf 93       	push	r28
    7fa8:	df 93       	push	r29
    7faa:	ef 93       	push	r30
    7fac:	ff 93       	push	r31
    7fae:	a0 91 9e 15 	lds	r26, 0x159E	; 0x80159e <_ser_handle>
    7fb2:	b0 91 9f 15 	lds	r27, 0x159F	; 0x80159f <_ser_handle+0x1>
    7fb6:	10 97       	sbiw	r26, 0x00	; 0
    7fb8:	11 f1       	breq	.+68     	; 0x7ffe <__vector_25+0x7a>
    7fba:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    7fbe:	14 96       	adiw	r26, 0x04	; 4
    7fc0:	ed 91       	ld	r30, X+
    7fc2:	fc 91       	ld	r31, X
    7fc4:	15 97       	sbiw	r26, 0x05	; 5
    7fc6:	93 81       	ldd	r25, Z+3	; 0x03
    7fc8:	82 81       	ldd	r24, Z+2	; 0x02
    7fca:	25 81       	ldd	r18, Z+5	; 0x05
    7fcc:	98 1b       	sub	r25, r24
    7fce:	92 23       	and	r25, r18
    7fd0:	84 81       	ldd	r24, Z+4	; 0x04
    7fd2:	98 17       	cp	r25, r24
    7fd4:	61 f0       	breq	.+24     	; 0x7fee <__vector_25+0x6a>
    7fd6:	83 81       	ldd	r24, Z+3	; 0x03
    7fd8:	26 95       	lsr	r18
    7fda:	28 23       	and	r18, r24
    7fdc:	c0 81       	ld	r28, Z
    7fde:	d1 81       	ldd	r29, Z+1	; 0x01
    7fe0:	c2 0f       	add	r28, r18
    7fe2:	d1 1d       	adc	r29, r1
    7fe4:	68 83       	st	Y, r22
    7fe6:	8f 5f       	subi	r24, 0xFF	; 255
    7fe8:	95 81       	ldd	r25, Z+5	; 0x05
    7fea:	89 23       	and	r24, r25
    7fec:	83 83       	std	Z+3, r24	; 0x03
    7fee:	16 96       	adiw	r26, 0x06	; 6
    7ff0:	ed 91       	ld	r30, X+
    7ff2:	fc 91       	ld	r31, X
    7ff4:	17 97       	sbiw	r26, 0x07	; 7
    7ff6:	30 97       	sbiw	r30, 0x00	; 0
    7ff8:	11 f0       	breq	.+4      	; 0x7ffe <__vector_25+0x7a>
    7ffa:	cd 01       	movw	r24, r26
    7ffc:	19 95       	eicall
    7ffe:	ff 91       	pop	r31
    8000:	ef 91       	pop	r30
    8002:	df 91       	pop	r29
    8004:	cf 91       	pop	r28
    8006:	bf 91       	pop	r27
    8008:	af 91       	pop	r26
    800a:	9f 91       	pop	r25
    800c:	8f 91       	pop	r24
    800e:	7f 91       	pop	r23
    8010:	6f 91       	pop	r22
    8012:	5f 91       	pop	r21
    8014:	4f 91       	pop	r20
    8016:	3f 91       	pop	r19
    8018:	2f 91       	pop	r18
    801a:	0f 90       	pop	r0
    801c:	0b be       	out	0x3b, r0	; 59
    801e:	0f 90       	pop	r0
    8020:	0f be       	out	0x3f, r0	; 63
    8022:	0f 90       	pop	r0
    8024:	1f 90       	pop	r1
    8026:	18 95       	reti

00008028 <__vector_26>:
    8028:	1f 92       	push	r1
    802a:	0f 92       	push	r0
    802c:	0f b6       	in	r0, 0x3f	; 63
    802e:	0f 92       	push	r0
    8030:	11 24       	eor	r1, r1
    8032:	0b b6       	in	r0, 0x3b	; 59
    8034:	0f 92       	push	r0
    8036:	2f 93       	push	r18
    8038:	8f 93       	push	r24
    803a:	9f 93       	push	r25
    803c:	af 93       	push	r26
    803e:	bf 93       	push	r27
    8040:	ef 93       	push	r30
    8042:	ff 93       	push	r31
    8044:	e0 91 9e 15 	lds	r30, 0x159E	; 0x80159e <_ser_handle>
    8048:	f0 91 9f 15 	lds	r31, 0x159F	; 0x80159f <_ser_handle+0x1>
    804c:	30 97       	sbiw	r30, 0x00	; 0
    804e:	b9 f0       	breq	.+46     	; 0x807e <__vector_26+0x56>
    8050:	02 80       	ldd	r0, Z+2	; 0x02
    8052:	f3 81       	ldd	r31, Z+3	; 0x03
    8054:	e0 2d       	mov	r30, r0
    8056:	93 81       	ldd	r25, Z+3	; 0x03
    8058:	82 81       	ldd	r24, Z+2	; 0x02
    805a:	98 17       	cp	r25, r24
    805c:	b1 f0       	breq	.+44     	; 0x808a <__vector_26+0x62>
    805e:	92 81       	ldd	r25, Z+2	; 0x02
    8060:	85 81       	ldd	r24, Z+5	; 0x05
    8062:	28 2f       	mov	r18, r24
    8064:	26 95       	lsr	r18
    8066:	29 23       	and	r18, r25
    8068:	a0 81       	ld	r26, Z
    806a:	b1 81       	ldd	r27, Z+1	; 0x01
    806c:	a2 0f       	add	r26, r18
    806e:	b1 1d       	adc	r27, r1
    8070:	2c 91       	ld	r18, X
    8072:	9f 5f       	subi	r25, 0xFF	; 255
    8074:	89 23       	and	r24, r25
    8076:	82 83       	std	Z+2, r24	; 0x02
    8078:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    807c:	0b c0       	rjmp	.+22     	; 0x8094 <__vector_26+0x6c>
    807e:	e1 ec       	ldi	r30, 0xC1	; 193
    8080:	f0 e0       	ldi	r31, 0x00	; 0
    8082:	80 81       	ld	r24, Z
    8084:	8f 7d       	andi	r24, 0xDF	; 223
    8086:	80 83       	st	Z, r24
    8088:	05 c0       	rjmp	.+10     	; 0x8094 <__vector_26+0x6c>
    808a:	e1 ec       	ldi	r30, 0xC1	; 193
    808c:	f0 e0       	ldi	r31, 0x00	; 0
    808e:	80 81       	ld	r24, Z
    8090:	8f 7d       	andi	r24, 0xDF	; 223
    8092:	80 83       	st	Z, r24
    8094:	ff 91       	pop	r31
    8096:	ef 91       	pop	r30
    8098:	bf 91       	pop	r27
    809a:	af 91       	pop	r26
    809c:	9f 91       	pop	r25
    809e:	8f 91       	pop	r24
    80a0:	2f 91       	pop	r18
    80a2:	0f 90       	pop	r0
    80a4:	0b be       	out	0x3b, r0	; 59
    80a6:	0f 90       	pop	r0
    80a8:	0f be       	out	0x3f, r0	; 63
    80aa:	0f 90       	pop	r0
    80ac:	1f 90       	pop	r1
    80ae:	18 95       	reti

000080b0 <__vector_36>:
    80b0:	1f 92       	push	r1
    80b2:	0f 92       	push	r0
    80b4:	0f b6       	in	r0, 0x3f	; 63
    80b6:	0f 92       	push	r0
    80b8:	11 24       	eor	r1, r1
    80ba:	0b b6       	in	r0, 0x3b	; 59
    80bc:	0f 92       	push	r0
    80be:	2f 93       	push	r18
    80c0:	3f 93       	push	r19
    80c2:	4f 93       	push	r20
    80c4:	5f 93       	push	r21
    80c6:	6f 93       	push	r22
    80c8:	7f 93       	push	r23
    80ca:	8f 93       	push	r24
    80cc:	9f 93       	push	r25
    80ce:	af 93       	push	r26
    80d0:	bf 93       	push	r27
    80d2:	cf 93       	push	r28
    80d4:	df 93       	push	r29
    80d6:	ef 93       	push	r30
    80d8:	ff 93       	push	r31
    80da:	a0 91 a0 15 	lds	r26, 0x15A0	; 0x8015a0 <_ser_handle+0x2>
    80de:	b0 91 a1 15 	lds	r27, 0x15A1	; 0x8015a1 <_ser_handle+0x3>
    80e2:	10 97       	sbiw	r26, 0x00	; 0
    80e4:	11 f1       	breq	.+68     	; 0x812a <__vector_36+0x7a>
    80e6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    80ea:	14 96       	adiw	r26, 0x04	; 4
    80ec:	ed 91       	ld	r30, X+
    80ee:	fc 91       	ld	r31, X
    80f0:	15 97       	sbiw	r26, 0x05	; 5
    80f2:	93 81       	ldd	r25, Z+3	; 0x03
    80f4:	82 81       	ldd	r24, Z+2	; 0x02
    80f6:	25 81       	ldd	r18, Z+5	; 0x05
    80f8:	98 1b       	sub	r25, r24
    80fa:	92 23       	and	r25, r18
    80fc:	84 81       	ldd	r24, Z+4	; 0x04
    80fe:	98 17       	cp	r25, r24
    8100:	61 f0       	breq	.+24     	; 0x811a <__vector_36+0x6a>
    8102:	83 81       	ldd	r24, Z+3	; 0x03
    8104:	26 95       	lsr	r18
    8106:	28 23       	and	r18, r24
    8108:	c0 81       	ld	r28, Z
    810a:	d1 81       	ldd	r29, Z+1	; 0x01
    810c:	c2 0f       	add	r28, r18
    810e:	d1 1d       	adc	r29, r1
    8110:	68 83       	st	Y, r22
    8112:	8f 5f       	subi	r24, 0xFF	; 255
    8114:	95 81       	ldd	r25, Z+5	; 0x05
    8116:	89 23       	and	r24, r25
    8118:	83 83       	std	Z+3, r24	; 0x03
    811a:	16 96       	adiw	r26, 0x06	; 6
    811c:	ed 91       	ld	r30, X+
    811e:	fc 91       	ld	r31, X
    8120:	17 97       	sbiw	r26, 0x07	; 7
    8122:	30 97       	sbiw	r30, 0x00	; 0
    8124:	11 f0       	breq	.+4      	; 0x812a <__vector_36+0x7a>
    8126:	cd 01       	movw	r24, r26
    8128:	19 95       	eicall
    812a:	ff 91       	pop	r31
    812c:	ef 91       	pop	r30
    812e:	df 91       	pop	r29
    8130:	cf 91       	pop	r28
    8132:	bf 91       	pop	r27
    8134:	af 91       	pop	r26
    8136:	9f 91       	pop	r25
    8138:	8f 91       	pop	r24
    813a:	7f 91       	pop	r23
    813c:	6f 91       	pop	r22
    813e:	5f 91       	pop	r21
    8140:	4f 91       	pop	r20
    8142:	3f 91       	pop	r19
    8144:	2f 91       	pop	r18
    8146:	0f 90       	pop	r0
    8148:	0b be       	out	0x3b, r0	; 59
    814a:	0f 90       	pop	r0
    814c:	0f be       	out	0x3f, r0	; 63
    814e:	0f 90       	pop	r0
    8150:	1f 90       	pop	r1
    8152:	18 95       	reti

00008154 <__vector_37>:
    8154:	1f 92       	push	r1
    8156:	0f 92       	push	r0
    8158:	0f b6       	in	r0, 0x3f	; 63
    815a:	0f 92       	push	r0
    815c:	11 24       	eor	r1, r1
    815e:	0b b6       	in	r0, 0x3b	; 59
    8160:	0f 92       	push	r0
    8162:	2f 93       	push	r18
    8164:	8f 93       	push	r24
    8166:	9f 93       	push	r25
    8168:	af 93       	push	r26
    816a:	bf 93       	push	r27
    816c:	ef 93       	push	r30
    816e:	ff 93       	push	r31
    8170:	e0 91 a0 15 	lds	r30, 0x15A0	; 0x8015a0 <_ser_handle+0x2>
    8174:	f0 91 a1 15 	lds	r31, 0x15A1	; 0x8015a1 <_ser_handle+0x3>
    8178:	30 97       	sbiw	r30, 0x00	; 0
    817a:	b9 f0       	breq	.+46     	; 0x81aa <__vector_37+0x56>
    817c:	02 80       	ldd	r0, Z+2	; 0x02
    817e:	f3 81       	ldd	r31, Z+3	; 0x03
    8180:	e0 2d       	mov	r30, r0
    8182:	93 81       	ldd	r25, Z+3	; 0x03
    8184:	82 81       	ldd	r24, Z+2	; 0x02
    8186:	98 17       	cp	r25, r24
    8188:	b1 f0       	breq	.+44     	; 0x81b6 <__vector_37+0x62>
    818a:	92 81       	ldd	r25, Z+2	; 0x02
    818c:	85 81       	ldd	r24, Z+5	; 0x05
    818e:	28 2f       	mov	r18, r24
    8190:	26 95       	lsr	r18
    8192:	29 23       	and	r18, r25
    8194:	a0 81       	ld	r26, Z
    8196:	b1 81       	ldd	r27, Z+1	; 0x01
    8198:	a2 0f       	add	r26, r18
    819a:	b1 1d       	adc	r27, r1
    819c:	2c 91       	ld	r18, X
    819e:	9f 5f       	subi	r25, 0xFF	; 255
    81a0:	89 23       	and	r24, r25
    81a2:	82 83       	std	Z+2, r24	; 0x02
    81a4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    81a8:	0b c0       	rjmp	.+22     	; 0x81c0 <__vector_37+0x6c>
    81aa:	e9 ec       	ldi	r30, 0xC9	; 201
    81ac:	f0 e0       	ldi	r31, 0x00	; 0
    81ae:	80 81       	ld	r24, Z
    81b0:	8f 7d       	andi	r24, 0xDF	; 223
    81b2:	80 83       	st	Z, r24
    81b4:	05 c0       	rjmp	.+10     	; 0x81c0 <__vector_37+0x6c>
    81b6:	e9 ec       	ldi	r30, 0xC9	; 201
    81b8:	f0 e0       	ldi	r31, 0x00	; 0
    81ba:	80 81       	ld	r24, Z
    81bc:	8f 7d       	andi	r24, 0xDF	; 223
    81be:	80 83       	st	Z, r24
    81c0:	ff 91       	pop	r31
    81c2:	ef 91       	pop	r30
    81c4:	bf 91       	pop	r27
    81c6:	af 91       	pop	r26
    81c8:	9f 91       	pop	r25
    81ca:	8f 91       	pop	r24
    81cc:	2f 91       	pop	r18
    81ce:	0f 90       	pop	r0
    81d0:	0b be       	out	0x3b, r0	; 59
    81d2:	0f 90       	pop	r0
    81d4:	0f be       	out	0x3f, r0	; 63
    81d6:	0f 90       	pop	r0
    81d8:	1f 90       	pop	r1
    81da:	18 95       	reti

000081dc <__vector_51>:
    81dc:	1f 92       	push	r1
    81de:	0f 92       	push	r0
    81e0:	0f b6       	in	r0, 0x3f	; 63
    81e2:	0f 92       	push	r0
    81e4:	11 24       	eor	r1, r1
    81e6:	0b b6       	in	r0, 0x3b	; 59
    81e8:	0f 92       	push	r0
    81ea:	2f 93       	push	r18
    81ec:	3f 93       	push	r19
    81ee:	4f 93       	push	r20
    81f0:	5f 93       	push	r21
    81f2:	6f 93       	push	r22
    81f4:	7f 93       	push	r23
    81f6:	8f 93       	push	r24
    81f8:	9f 93       	push	r25
    81fa:	af 93       	push	r26
    81fc:	bf 93       	push	r27
    81fe:	cf 93       	push	r28
    8200:	df 93       	push	r29
    8202:	ef 93       	push	r30
    8204:	ff 93       	push	r31
    8206:	a0 91 a2 15 	lds	r26, 0x15A2	; 0x8015a2 <_ser_handle+0x4>
    820a:	b0 91 a3 15 	lds	r27, 0x15A3	; 0x8015a3 <_ser_handle+0x5>
    820e:	10 97       	sbiw	r26, 0x00	; 0
    8210:	11 f1       	breq	.+68     	; 0x8256 <__vector_51+0x7a>
    8212:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    8216:	14 96       	adiw	r26, 0x04	; 4
    8218:	ed 91       	ld	r30, X+
    821a:	fc 91       	ld	r31, X
    821c:	15 97       	sbiw	r26, 0x05	; 5
    821e:	93 81       	ldd	r25, Z+3	; 0x03
    8220:	82 81       	ldd	r24, Z+2	; 0x02
    8222:	25 81       	ldd	r18, Z+5	; 0x05
    8224:	98 1b       	sub	r25, r24
    8226:	92 23       	and	r25, r18
    8228:	84 81       	ldd	r24, Z+4	; 0x04
    822a:	98 17       	cp	r25, r24
    822c:	61 f0       	breq	.+24     	; 0x8246 <__vector_51+0x6a>
    822e:	83 81       	ldd	r24, Z+3	; 0x03
    8230:	26 95       	lsr	r18
    8232:	28 23       	and	r18, r24
    8234:	c0 81       	ld	r28, Z
    8236:	d1 81       	ldd	r29, Z+1	; 0x01
    8238:	c2 0f       	add	r28, r18
    823a:	d1 1d       	adc	r29, r1
    823c:	68 83       	st	Y, r22
    823e:	8f 5f       	subi	r24, 0xFF	; 255
    8240:	95 81       	ldd	r25, Z+5	; 0x05
    8242:	89 23       	and	r24, r25
    8244:	83 83       	std	Z+3, r24	; 0x03
    8246:	16 96       	adiw	r26, 0x06	; 6
    8248:	ed 91       	ld	r30, X+
    824a:	fc 91       	ld	r31, X
    824c:	17 97       	sbiw	r26, 0x07	; 7
    824e:	30 97       	sbiw	r30, 0x00	; 0
    8250:	11 f0       	breq	.+4      	; 0x8256 <__vector_51+0x7a>
    8252:	cd 01       	movw	r24, r26
    8254:	19 95       	eicall
    8256:	ff 91       	pop	r31
    8258:	ef 91       	pop	r30
    825a:	df 91       	pop	r29
    825c:	cf 91       	pop	r28
    825e:	bf 91       	pop	r27
    8260:	af 91       	pop	r26
    8262:	9f 91       	pop	r25
    8264:	8f 91       	pop	r24
    8266:	7f 91       	pop	r23
    8268:	6f 91       	pop	r22
    826a:	5f 91       	pop	r21
    826c:	4f 91       	pop	r20
    826e:	3f 91       	pop	r19
    8270:	2f 91       	pop	r18
    8272:	0f 90       	pop	r0
    8274:	0b be       	out	0x3b, r0	; 59
    8276:	0f 90       	pop	r0
    8278:	0f be       	out	0x3f, r0	; 63
    827a:	0f 90       	pop	r0
    827c:	1f 90       	pop	r1
    827e:	18 95       	reti

00008280 <__vector_52>:
    8280:	1f 92       	push	r1
    8282:	0f 92       	push	r0
    8284:	0f b6       	in	r0, 0x3f	; 63
    8286:	0f 92       	push	r0
    8288:	11 24       	eor	r1, r1
    828a:	0b b6       	in	r0, 0x3b	; 59
    828c:	0f 92       	push	r0
    828e:	2f 93       	push	r18
    8290:	8f 93       	push	r24
    8292:	9f 93       	push	r25
    8294:	af 93       	push	r26
    8296:	bf 93       	push	r27
    8298:	ef 93       	push	r30
    829a:	ff 93       	push	r31
    829c:	e0 91 a2 15 	lds	r30, 0x15A2	; 0x8015a2 <_ser_handle+0x4>
    82a0:	f0 91 a3 15 	lds	r31, 0x15A3	; 0x8015a3 <_ser_handle+0x5>
    82a4:	30 97       	sbiw	r30, 0x00	; 0
    82a6:	b9 f0       	breq	.+46     	; 0x82d6 <__vector_52+0x56>
    82a8:	02 80       	ldd	r0, Z+2	; 0x02
    82aa:	f3 81       	ldd	r31, Z+3	; 0x03
    82ac:	e0 2d       	mov	r30, r0
    82ae:	93 81       	ldd	r25, Z+3	; 0x03
    82b0:	82 81       	ldd	r24, Z+2	; 0x02
    82b2:	98 17       	cp	r25, r24
    82b4:	b1 f0       	breq	.+44     	; 0x82e2 <__vector_52+0x62>
    82b6:	92 81       	ldd	r25, Z+2	; 0x02
    82b8:	85 81       	ldd	r24, Z+5	; 0x05
    82ba:	28 2f       	mov	r18, r24
    82bc:	26 95       	lsr	r18
    82be:	29 23       	and	r18, r25
    82c0:	a0 81       	ld	r26, Z
    82c2:	b1 81       	ldd	r27, Z+1	; 0x01
    82c4:	a2 0f       	add	r26, r18
    82c6:	b1 1d       	adc	r27, r1
    82c8:	2c 91       	ld	r18, X
    82ca:	9f 5f       	subi	r25, 0xFF	; 255
    82cc:	89 23       	and	r24, r25
    82ce:	82 83       	std	Z+2, r24	; 0x02
    82d0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    82d4:	0b c0       	rjmp	.+22     	; 0x82ec <__vector_52+0x6c>
    82d6:	e1 ed       	ldi	r30, 0xD1	; 209
    82d8:	f0 e0       	ldi	r31, 0x00	; 0
    82da:	80 81       	ld	r24, Z
    82dc:	8f 7d       	andi	r24, 0xDF	; 223
    82de:	80 83       	st	Z, r24
    82e0:	05 c0       	rjmp	.+10     	; 0x82ec <__vector_52+0x6c>
    82e2:	e1 ed       	ldi	r30, 0xD1	; 209
    82e4:	f0 e0       	ldi	r31, 0x00	; 0
    82e6:	80 81       	ld	r24, Z
    82e8:	8f 7d       	andi	r24, 0xDF	; 223
    82ea:	80 83       	st	Z, r24
    82ec:	ff 91       	pop	r31
    82ee:	ef 91       	pop	r30
    82f0:	bf 91       	pop	r27
    82f2:	af 91       	pop	r26
    82f4:	9f 91       	pop	r25
    82f6:	8f 91       	pop	r24
    82f8:	2f 91       	pop	r18
    82fa:	0f 90       	pop	r0
    82fc:	0b be       	out	0x3b, r0	; 59
    82fe:	0f 90       	pop	r0
    8300:	0f be       	out	0x3f, r0	; 63
    8302:	0f 90       	pop	r0
    8304:	1f 90       	pop	r1
    8306:	18 95       	reti

00008308 <__vector_54>:
    8308:	1f 92       	push	r1
    830a:	0f 92       	push	r0
    830c:	0f b6       	in	r0, 0x3f	; 63
    830e:	0f 92       	push	r0
    8310:	11 24       	eor	r1, r1
    8312:	0b b6       	in	r0, 0x3b	; 59
    8314:	0f 92       	push	r0
    8316:	2f 93       	push	r18
    8318:	3f 93       	push	r19
    831a:	4f 93       	push	r20
    831c:	5f 93       	push	r21
    831e:	6f 93       	push	r22
    8320:	7f 93       	push	r23
    8322:	8f 93       	push	r24
    8324:	9f 93       	push	r25
    8326:	af 93       	push	r26
    8328:	bf 93       	push	r27
    832a:	cf 93       	push	r28
    832c:	df 93       	push	r29
    832e:	ef 93       	push	r30
    8330:	ff 93       	push	r31
    8332:	a0 91 a4 15 	lds	r26, 0x15A4	; 0x8015a4 <_ser_handle+0x6>
    8336:	b0 91 a5 15 	lds	r27, 0x15A5	; 0x8015a5 <_ser_handle+0x7>
    833a:	10 97       	sbiw	r26, 0x00	; 0
    833c:	11 f1       	breq	.+68     	; 0x8382 <__vector_54+0x7a>
    833e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    8342:	14 96       	adiw	r26, 0x04	; 4
    8344:	ed 91       	ld	r30, X+
    8346:	fc 91       	ld	r31, X
    8348:	15 97       	sbiw	r26, 0x05	; 5
    834a:	93 81       	ldd	r25, Z+3	; 0x03
    834c:	82 81       	ldd	r24, Z+2	; 0x02
    834e:	25 81       	ldd	r18, Z+5	; 0x05
    8350:	98 1b       	sub	r25, r24
    8352:	92 23       	and	r25, r18
    8354:	84 81       	ldd	r24, Z+4	; 0x04
    8356:	98 17       	cp	r25, r24
    8358:	61 f0       	breq	.+24     	; 0x8372 <__vector_54+0x6a>
    835a:	83 81       	ldd	r24, Z+3	; 0x03
    835c:	26 95       	lsr	r18
    835e:	28 23       	and	r18, r24
    8360:	c0 81       	ld	r28, Z
    8362:	d1 81       	ldd	r29, Z+1	; 0x01
    8364:	c2 0f       	add	r28, r18
    8366:	d1 1d       	adc	r29, r1
    8368:	68 83       	st	Y, r22
    836a:	8f 5f       	subi	r24, 0xFF	; 255
    836c:	95 81       	ldd	r25, Z+5	; 0x05
    836e:	89 23       	and	r24, r25
    8370:	83 83       	std	Z+3, r24	; 0x03
    8372:	16 96       	adiw	r26, 0x06	; 6
    8374:	ed 91       	ld	r30, X+
    8376:	fc 91       	ld	r31, X
    8378:	17 97       	sbiw	r26, 0x07	; 7
    837a:	30 97       	sbiw	r30, 0x00	; 0
    837c:	11 f0       	breq	.+4      	; 0x8382 <__vector_54+0x7a>
    837e:	cd 01       	movw	r24, r26
    8380:	19 95       	eicall
    8382:	ff 91       	pop	r31
    8384:	ef 91       	pop	r30
    8386:	df 91       	pop	r29
    8388:	cf 91       	pop	r28
    838a:	bf 91       	pop	r27
    838c:	af 91       	pop	r26
    838e:	9f 91       	pop	r25
    8390:	8f 91       	pop	r24
    8392:	7f 91       	pop	r23
    8394:	6f 91       	pop	r22
    8396:	5f 91       	pop	r21
    8398:	4f 91       	pop	r20
    839a:	3f 91       	pop	r19
    839c:	2f 91       	pop	r18
    839e:	0f 90       	pop	r0
    83a0:	0b be       	out	0x3b, r0	; 59
    83a2:	0f 90       	pop	r0
    83a4:	0f be       	out	0x3f, r0	; 63
    83a6:	0f 90       	pop	r0
    83a8:	1f 90       	pop	r1
    83aa:	18 95       	reti

000083ac <__vector_55>:
    83ac:	1f 92       	push	r1
    83ae:	0f 92       	push	r0
    83b0:	0f b6       	in	r0, 0x3f	; 63
    83b2:	0f 92       	push	r0
    83b4:	11 24       	eor	r1, r1
    83b6:	0b b6       	in	r0, 0x3b	; 59
    83b8:	0f 92       	push	r0
    83ba:	2f 93       	push	r18
    83bc:	8f 93       	push	r24
    83be:	9f 93       	push	r25
    83c0:	af 93       	push	r26
    83c2:	bf 93       	push	r27
    83c4:	ef 93       	push	r30
    83c6:	ff 93       	push	r31
    83c8:	e0 91 a4 15 	lds	r30, 0x15A4	; 0x8015a4 <_ser_handle+0x6>
    83cc:	f0 91 a5 15 	lds	r31, 0x15A5	; 0x8015a5 <_ser_handle+0x7>
    83d0:	30 97       	sbiw	r30, 0x00	; 0
    83d2:	b9 f0       	breq	.+46     	; 0x8402 <__vector_55+0x56>
    83d4:	02 80       	ldd	r0, Z+2	; 0x02
    83d6:	f3 81       	ldd	r31, Z+3	; 0x03
    83d8:	e0 2d       	mov	r30, r0
    83da:	93 81       	ldd	r25, Z+3	; 0x03
    83dc:	82 81       	ldd	r24, Z+2	; 0x02
    83de:	98 17       	cp	r25, r24
    83e0:	b1 f0       	breq	.+44     	; 0x840e <__vector_55+0x62>
    83e2:	92 81       	ldd	r25, Z+2	; 0x02
    83e4:	85 81       	ldd	r24, Z+5	; 0x05
    83e6:	28 2f       	mov	r18, r24
    83e8:	26 95       	lsr	r18
    83ea:	29 23       	and	r18, r25
    83ec:	a0 81       	ld	r26, Z
    83ee:	b1 81       	ldd	r27, Z+1	; 0x01
    83f0:	a2 0f       	add	r26, r18
    83f2:	b1 1d       	adc	r27, r1
    83f4:	2c 91       	ld	r18, X
    83f6:	9f 5f       	subi	r25, 0xFF	; 255
    83f8:	89 23       	and	r24, r25
    83fa:	82 83       	std	Z+2, r24	; 0x02
    83fc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    8400:	0b c0       	rjmp	.+22     	; 0x8418 <__vector_55+0x6c>
    8402:	e1 e3       	ldi	r30, 0x31	; 49
    8404:	f1 e0       	ldi	r31, 0x01	; 1
    8406:	80 81       	ld	r24, Z
    8408:	8f 7d       	andi	r24, 0xDF	; 223
    840a:	80 83       	st	Z, r24
    840c:	05 c0       	rjmp	.+10     	; 0x8418 <__vector_55+0x6c>
    840e:	e1 e3       	ldi	r30, 0x31	; 49
    8410:	f1 e0       	ldi	r31, 0x01	; 1
    8412:	80 81       	ld	r24, Z
    8414:	8f 7d       	andi	r24, 0xDF	; 223
    8416:	80 83       	st	Z, r24
    8418:	ff 91       	pop	r31
    841a:	ef 91       	pop	r30
    841c:	bf 91       	pop	r27
    841e:	af 91       	pop	r26
    8420:	9f 91       	pop	r25
    8422:	8f 91       	pop	r24
    8424:	2f 91       	pop	r18
    8426:	0f 90       	pop	r0
    8428:	0b be       	out	0x3b, r0	; 59
    842a:	0f 90       	pop	r0
    842c:	0f be       	out	0x3f, r0	; 63
    842e:	0f 90       	pop	r0
    8430:	1f 90       	pop	r1
    8432:	18 95       	reti

00008434 <usart_getchar>:
    8434:	cf 93       	push	r28
    8436:	df 93       	push	r29
    8438:	1f 92       	push	r1
    843a:	cd b7       	in	r28, 0x3d	; 61
    843c:	de b7       	in	r29, 0x3e	; 62
    843e:	be 01       	movw	r22, r28
    8440:	6f 5f       	subi	r22, 0xFF	; 255
    8442:	7f 4f       	sbci	r23, 0xFF	; 255
    8444:	80 91 a6 15 	lds	r24, 0x15A6	; 0x8015a6 <_com_serial_instance>
    8448:	90 91 a7 15 	lds	r25, 0x15A7	; 0x8015a7 <_com_serial_instance+0x1>
    844c:	7b dd       	rcall	.-1290   	; 0x7f44 <serial_getByte>
    844e:	81 11       	cpse	r24, r1
    8450:	f6 cf       	rjmp	.-20     	; 0x843e <usart_getchar+0xa>
    8452:	89 81       	ldd	r24, Y+1	; 0x01
    8454:	90 e0       	ldi	r25, 0x00	; 0
    8456:	0f 90       	pop	r0
    8458:	df 91       	pop	r29
    845a:	cf 91       	pop	r28
    845c:	08 95       	ret

0000845e <usart_putchar>:
    845e:	68 2f       	mov	r22, r24
    8460:	80 91 a6 15 	lds	r24, 0x15A6	; 0x8015a6 <_com_serial_instance>
    8464:	90 91 a7 15 	lds	r25, 0x15A7	; 0x8015a7 <_com_serial_instance+0x1>
    8468:	ed dc       	rcall	.-1574   	; 0x7e44 <serial_sendByte>
    846a:	80 e0       	ldi	r24, 0x00	; 0
    846c:	90 e0       	ldi	r25, 0x00	; 0
    846e:	08 95       	ret

00008470 <stdio_initialise>:
    8470:	8f 92       	push	r8
    8472:	9f 92       	push	r9
    8474:	af 92       	push	r10
    8476:	cf 92       	push	r12
    8478:	ef 92       	push	r14
    847a:	0f 93       	push	r16
    847c:	81 2c       	mov	r8, r1
    847e:	91 2c       	mov	r9, r1
    8480:	68 94       	set
    8482:	aa 24       	eor	r10, r10
    8484:	a7 f8       	bld	r10, 7
    8486:	68 94       	set
    8488:	cc 24       	eor	r12, r12
    848a:	c7 f8       	bld	r12, 7
    848c:	e1 2c       	mov	r14, r1
    848e:	00 e0       	ldi	r16, 0x00	; 0
    8490:	23 e0       	ldi	r18, 0x03	; 3
    8492:	40 e0       	ldi	r20, 0x00	; 0
    8494:	51 ee       	ldi	r21, 0xE1	; 225
    8496:	60 e0       	ldi	r22, 0x00	; 0
    8498:	70 e0       	ldi	r23, 0x00	; 0
    849a:	38 dc       	rcall	.-1936   	; 0x7d0c <serial_create>
    849c:	90 93 a7 15 	sts	0x15A7, r25	; 0x8015a7 <_com_serial_instance+0x1>
    84a0:	80 93 a6 15 	sts	0x15A6, r24	; 0x8015a6 <_com_serial_instance>
    84a4:	e0 e2       	ldi	r30, 0x20	; 32
    84a6:	f6 e1       	ldi	r31, 0x16	; 22
    84a8:	8f e0       	ldi	r24, 0x0F	; 15
    84aa:	92 e0       	ldi	r25, 0x02	; 2
    84ac:	91 83       	std	Z+1, r25	; 0x01
    84ae:	80 83       	st	Z, r24
    84b0:	93 83       	std	Z+3, r25	; 0x03
    84b2:	82 83       	std	Z+2, r24	; 0x02
    84b4:	0f 91       	pop	r16
    84b6:	ef 90       	pop	r14
    84b8:	cf 90       	pop	r12
    84ba:	af 90       	pop	r10
    84bc:	9f 90       	pop	r9
    84be:	8f 90       	pop	r8
    84c0:	08 95       	ret

000084c2 <_turn_off>:
    84c2:	90 e0       	ldi	r25, 0x00	; 0
    84c4:	fc 01       	movw	r30, r24
    84c6:	ee 0f       	add	r30, r30
    84c8:	ff 1f       	adc	r31, r31
    84ca:	e8 0f       	add	r30, r24
    84cc:	f9 1f       	adc	r31, r25
    84ce:	ee 0f       	add	r30, r30
    84d0:	ff 1f       	adc	r31, r31
    84d2:	e8 55       	subi	r30, 0x58	; 88
    84d4:	fa 4e       	sbci	r31, 0xEA	; 234
    84d6:	23 81       	ldd	r18, Z+3	; 0x03
    84d8:	21 11       	cpse	r18, r1
    84da:	1f c0       	rjmp	.+62     	; 0x851a <_turn_off+0x58>
    84dc:	9c 01       	movw	r18, r24
    84de:	22 0f       	add	r18, r18
    84e0:	33 1f       	adc	r19, r19
    84e2:	f9 01       	movw	r30, r18
    84e4:	e8 0f       	add	r30, r24
    84e6:	f9 1f       	adc	r31, r25
    84e8:	ee 0f       	add	r30, r30
    84ea:	ff 1f       	adc	r31, r31
    84ec:	e8 55       	subi	r30, 0x58	; 88
    84ee:	fa 4e       	sbci	r31, 0xEA	; 234
    84f0:	a0 81       	ld	r26, Z
    84f2:	b1 81       	ldd	r27, Z+1	; 0x01
    84f4:	4c 91       	ld	r20, X
    84f6:	f9 01       	movw	r30, r18
    84f8:	e8 0f       	add	r30, r24
    84fa:	f9 1f       	adc	r31, r25
    84fc:	ee 0f       	add	r30, r30
    84fe:	ff 1f       	adc	r31, r31
    8500:	e8 55       	subi	r30, 0x58	; 88
    8502:	fa 4e       	sbci	r31, 0xEA	; 234
    8504:	81 e0       	ldi	r24, 0x01	; 1
    8506:	90 e0       	ldi	r25, 0x00	; 0
    8508:	02 80       	ldd	r0, Z+2	; 0x02
    850a:	02 c0       	rjmp	.+4      	; 0x8510 <_turn_off+0x4e>
    850c:	88 0f       	add	r24, r24
    850e:	99 1f       	adc	r25, r25
    8510:	0a 94       	dec	r0
    8512:	e2 f7       	brpl	.-8      	; 0x850c <_turn_off+0x4a>
    8514:	84 2b       	or	r24, r20
    8516:	8c 93       	st	X, r24
    8518:	08 95       	ret
    851a:	fc 01       	movw	r30, r24
    851c:	ee 0f       	add	r30, r30
    851e:	ff 1f       	adc	r31, r31
    8520:	df 01       	movw	r26, r30
    8522:	a8 0f       	add	r26, r24
    8524:	b9 1f       	adc	r27, r25
    8526:	aa 0f       	add	r26, r26
    8528:	bb 1f       	adc	r27, r27
    852a:	a8 55       	subi	r26, 0x58	; 88
    852c:	ba 4e       	sbci	r27, 0xEA	; 234
    852e:	0d 90       	ld	r0, X+
    8530:	bc 91       	ld	r27, X
    8532:	a0 2d       	mov	r26, r0
    8534:	2c 91       	ld	r18, X
    8536:	e8 0f       	add	r30, r24
    8538:	f9 1f       	adc	r31, r25
    853a:	ee 0f       	add	r30, r30
    853c:	ff 1f       	adc	r31, r31
    853e:	e8 55       	subi	r30, 0x58	; 88
    8540:	fa 4e       	sbci	r31, 0xEA	; 234
    8542:	81 e0       	ldi	r24, 0x01	; 1
    8544:	90 e0       	ldi	r25, 0x00	; 0
    8546:	02 80       	ldd	r0, Z+2	; 0x02
    8548:	02 c0       	rjmp	.+4      	; 0x854e <_turn_off+0x8c>
    854a:	88 0f       	add	r24, r24
    854c:	99 1f       	adc	r25, r25
    854e:	0a 94       	dec	r0
    8550:	e2 f7       	brpl	.-8      	; 0x854a <_turn_off+0x88>
    8552:	80 95       	com	r24
    8554:	82 23       	and	r24, r18
    8556:	8c 93       	st	X, r24
    8558:	08 95       	ret

0000855a <_turn_on>:
    855a:	90 e0       	ldi	r25, 0x00	; 0
    855c:	fc 01       	movw	r30, r24
    855e:	ee 0f       	add	r30, r30
    8560:	ff 1f       	adc	r31, r31
    8562:	e8 0f       	add	r30, r24
    8564:	f9 1f       	adc	r31, r25
    8566:	ee 0f       	add	r30, r30
    8568:	ff 1f       	adc	r31, r31
    856a:	e8 55       	subi	r30, 0x58	; 88
    856c:	fa 4e       	sbci	r31, 0xEA	; 234
    856e:	23 81       	ldd	r18, Z+3	; 0x03
    8570:	21 11       	cpse	r18, r1
    8572:	20 c0       	rjmp	.+64     	; 0x85b4 <_turn_on+0x5a>
    8574:	9c 01       	movw	r18, r24
    8576:	22 0f       	add	r18, r18
    8578:	33 1f       	adc	r19, r19
    857a:	f9 01       	movw	r30, r18
    857c:	e8 0f       	add	r30, r24
    857e:	f9 1f       	adc	r31, r25
    8580:	ee 0f       	add	r30, r30
    8582:	ff 1f       	adc	r31, r31
    8584:	e8 55       	subi	r30, 0x58	; 88
    8586:	fa 4e       	sbci	r31, 0xEA	; 234
    8588:	a0 81       	ld	r26, Z
    858a:	b1 81       	ldd	r27, Z+1	; 0x01
    858c:	4c 91       	ld	r20, X
    858e:	f9 01       	movw	r30, r18
    8590:	e8 0f       	add	r30, r24
    8592:	f9 1f       	adc	r31, r25
    8594:	ee 0f       	add	r30, r30
    8596:	ff 1f       	adc	r31, r31
    8598:	e8 55       	subi	r30, 0x58	; 88
    859a:	fa 4e       	sbci	r31, 0xEA	; 234
    859c:	81 e0       	ldi	r24, 0x01	; 1
    859e:	90 e0       	ldi	r25, 0x00	; 0
    85a0:	02 80       	ldd	r0, Z+2	; 0x02
    85a2:	02 c0       	rjmp	.+4      	; 0x85a8 <_turn_on+0x4e>
    85a4:	88 0f       	add	r24, r24
    85a6:	99 1f       	adc	r25, r25
    85a8:	0a 94       	dec	r0
    85aa:	e2 f7       	brpl	.-8      	; 0x85a4 <_turn_on+0x4a>
    85ac:	80 95       	com	r24
    85ae:	84 23       	and	r24, r20
    85b0:	8c 93       	st	X, r24
    85b2:	08 95       	ret
    85b4:	fc 01       	movw	r30, r24
    85b6:	ee 0f       	add	r30, r30
    85b8:	ff 1f       	adc	r31, r31
    85ba:	df 01       	movw	r26, r30
    85bc:	a8 0f       	add	r26, r24
    85be:	b9 1f       	adc	r27, r25
    85c0:	aa 0f       	add	r26, r26
    85c2:	bb 1f       	adc	r27, r27
    85c4:	a8 55       	subi	r26, 0x58	; 88
    85c6:	ba 4e       	sbci	r27, 0xEA	; 234
    85c8:	0d 90       	ld	r0, X+
    85ca:	bc 91       	ld	r27, X
    85cc:	a0 2d       	mov	r26, r0
    85ce:	2c 91       	ld	r18, X
    85d0:	e8 0f       	add	r30, r24
    85d2:	f9 1f       	adc	r31, r25
    85d4:	ee 0f       	add	r30, r30
    85d6:	ff 1f       	adc	r31, r31
    85d8:	e8 55       	subi	r30, 0x58	; 88
    85da:	fa 4e       	sbci	r31, 0xEA	; 234
    85dc:	81 e0       	ldi	r24, 0x01	; 1
    85de:	90 e0       	ldi	r25, 0x00	; 0
    85e0:	02 80       	ldd	r0, Z+2	; 0x02
    85e2:	02 c0       	rjmp	.+4      	; 0x85e8 <_turn_on+0x8e>
    85e4:	88 0f       	add	r24, r24
    85e6:	99 1f       	adc	r25, r25
    85e8:	0a 94       	dec	r0
    85ea:	e2 f7       	brpl	.-8      	; 0x85e4 <_turn_on+0x8a>
    85ec:	82 2b       	or	r24, r18
    85ee:	8c 93       	st	X, r24
    85f0:	08 95       	ret

000085f2 <_hal_led_task>:
    85f2:	cc 24       	eor	r12, r12
    85f4:	c3 94       	inc	r12
    85f6:	d1 2c       	mov	r13, r1
    85f8:	68 94       	set
    85fa:	bb 24       	eor	r11, r11
    85fc:	b2 f8       	bld	r11, 2
    85fe:	c8 ea       	ldi	r28, 0xA8	; 168
    8600:	d5 e1       	ldi	r29, 0x15	; 21
    8602:	10 e0       	ldi	r17, 0x00	; 0
    8604:	8c 81       	ldd	r24, Y+4	; 0x04
    8606:	81 30       	cpi	r24, 0x01	; 1
    8608:	81 f0       	breq	.+32     	; 0x862a <_hal_led_task+0x38>
    860a:	18 f1       	brcs	.+70     	; 0x8652 <_hal_led_task+0x60>
    860c:	82 30       	cpi	r24, 0x02	; 2
    860e:	61 f5       	brne	.+88     	; 0x8668 <_hal_led_task+0x76>
    8610:	e8 81       	ld	r30, Y
    8612:	f9 81       	ldd	r31, Y+1	; 0x01
    8614:	20 81       	ld	r18, Z
    8616:	c6 01       	movw	r24, r12
    8618:	0a 80       	ldd	r0, Y+2	; 0x02
    861a:	02 c0       	rjmp	.+4      	; 0x8620 <_hal_led_task+0x2e>
    861c:	88 0f       	add	r24, r24
    861e:	99 1f       	adc	r25, r25
    8620:	0a 94       	dec	r0
    8622:	e2 f7       	brpl	.-8      	; 0x861c <_hal_led_task+0x2a>
    8624:	82 27       	eor	r24, r18
    8626:	80 83       	st	Z, r24
    8628:	1f c0       	rjmp	.+62     	; 0x8668 <_hal_led_task+0x76>
    862a:	8d 81       	ldd	r24, Y+5	; 0x05
    862c:	8f 5f       	subi	r24, 0xFF	; 255
    862e:	8a 30       	cpi	r24, 0x0A	; 10
    8630:	10 f4       	brcc	.+4      	; 0x8636 <_hal_led_task+0x44>
    8632:	8d 83       	std	Y+5, r24	; 0x05
    8634:	19 c0       	rjmp	.+50     	; 0x8668 <_hal_led_task+0x76>
    8636:	1d 82       	std	Y+5, r1	; 0x05
    8638:	e8 81       	ld	r30, Y
    863a:	f9 81       	ldd	r31, Y+1	; 0x01
    863c:	20 81       	ld	r18, Z
    863e:	c6 01       	movw	r24, r12
    8640:	0a 80       	ldd	r0, Y+2	; 0x02
    8642:	02 c0       	rjmp	.+4      	; 0x8648 <_hal_led_task+0x56>
    8644:	88 0f       	add	r24, r24
    8646:	99 1f       	adc	r25, r25
    8648:	0a 94       	dec	r0
    864a:	e2 f7       	brpl	.-8      	; 0x8644 <_hal_led_task+0x52>
    864c:	82 27       	eor	r24, r18
    864e:	80 83       	st	Z, r24
    8650:	0b c0       	rjmp	.+22     	; 0x8668 <_hal_led_task+0x76>
    8652:	0d 81       	ldd	r16, Y+5	; 0x05
    8654:	00 23       	and	r16, r16
    8656:	29 f0       	breq	.+10     	; 0x8662 <_hal_led_task+0x70>
    8658:	81 2f       	mov	r24, r17
    865a:	7f df       	rcall	.-258    	; 0x855a <_turn_on>
    865c:	01 50       	subi	r16, 0x01	; 1
    865e:	0d 83       	std	Y+5, r16	; 0x05
    8660:	03 c0       	rjmp	.+6      	; 0x8668 <_hal_led_task+0x76>
    8662:	bc 82       	std	Y+4, r11	; 0x04
    8664:	81 2f       	mov	r24, r17
    8666:	2d df       	rcall	.-422    	; 0x84c2 <_turn_off>
    8668:	1f 5f       	subi	r17, 0xFF	; 255
    866a:	26 96       	adiw	r28, 0x06	; 6
    866c:	14 30       	cpi	r17, 0x04	; 4
    866e:	51 f6       	brne	.-108    	; 0x8604 <_hal_led_task+0x12>
    8670:	65 e0       	ldi	r22, 0x05	; 5
    8672:	70 e0       	ldi	r23, 0x00	; 0
    8674:	80 e0       	ldi	r24, 0x00	; 0
    8676:	90 e0       	ldi	r25, 0x00	; 0
    8678:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <vTaskDelay>
    867c:	c0 cf       	rjmp	.-128    	; 0x85fe <_hal_led_task+0xc>

0000867e <status_leds_initialise>:
    867e:	ef 92       	push	r14
    8680:	ff 92       	push	r15
    8682:	0f 93       	push	r16
    8684:	1f 93       	push	r17
    8686:	cf 93       	push	r28
    8688:	df 93       	push	r29
    868a:	08 2f       	mov	r16, r24
    868c:	80 e4       	ldi	r24, 0x40	; 64
    868e:	87 b9       	out	0x07, r24	; 7
    8690:	c8 ea       	ldi	r28, 0xA8	; 168
    8692:	d5 e1       	ldi	r29, 0x15	; 21
    8694:	0f 2e       	mov	r0, r31
    8696:	f8 e2       	ldi	r31, 0x28	; 40
    8698:	ef 2e       	mov	r14, r31
    869a:	f1 2c       	mov	r15, r1
    869c:	f0 2d       	mov	r31, r0
    869e:	f9 82       	std	Y+1, r15	; 0x01
    86a0:	e8 82       	st	Y, r14
    86a2:	86 e0       	ldi	r24, 0x06	; 6
    86a4:	8a 83       	std	Y+2, r24	; 0x02
    86a6:	1b 82       	std	Y+3, r1	; 0x03
    86a8:	14 e0       	ldi	r17, 0x04	; 4
    86aa:	1c 83       	std	Y+4, r17	; 0x04
    86ac:	80 e0       	ldi	r24, 0x00	; 0
    86ae:	09 df       	rcall	.-494    	; 0x84c2 <_turn_off>
    86b0:	80 e8       	ldi	r24, 0x80	; 128
    86b2:	87 b9       	out	0x07, r24	; 7
    86b4:	ff 82       	std	Y+7, r15	; 0x07
    86b6:	ee 82       	std	Y+6, r14	; 0x06
    86b8:	87 e0       	ldi	r24, 0x07	; 7
    86ba:	88 87       	std	Y+8, r24	; 0x08
    86bc:	19 86       	std	Y+9, r1	; 0x09
    86be:	1a 87       	std	Y+10, r17	; 0x0a
    86c0:	81 e0       	ldi	r24, 0x01	; 1
    86c2:	ff de       	rcall	.-514    	; 0x84c2 <_turn_off>
    86c4:	80 e2       	ldi	r24, 0x20	; 32
    86c6:	83 bb       	out	0x13, r24	; 19
    86c8:	84 e3       	ldi	r24, 0x34	; 52
    86ca:	90 e0       	ldi	r25, 0x00	; 0
    86cc:	9d 87       	std	Y+13, r25	; 0x0d
    86ce:	8c 87       	std	Y+12, r24	; 0x0c
    86d0:	85 e0       	ldi	r24, 0x05	; 5
    86d2:	8e 87       	std	Y+14, r24	; 0x0e
    86d4:	1f 86       	std	Y+15, r1	; 0x0f
    86d6:	18 8b       	std	Y+16, r17	; 0x10
    86d8:	82 e0       	ldi	r24, 0x02	; 2
    86da:	f3 de       	rcall	.-538    	; 0x84c2 <_turn_off>
    86dc:	80 e1       	ldi	r24, 0x10	; 16
    86de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    86e2:	82 e0       	ldi	r24, 0x02	; 2
    86e4:	91 e0       	ldi	r25, 0x01	; 1
    86e6:	9b 8b       	std	Y+19, r25	; 0x13
    86e8:	8a 8b       	std	Y+18, r24	; 0x12
    86ea:	1c 8b       	std	Y+20, r17	; 0x14
    86ec:	1d 8a       	std	Y+21, r1	; 0x15
    86ee:	1e 8b       	std	Y+22, r17	; 0x16
    86f0:	83 e0       	ldi	r24, 0x03	; 3
    86f2:	e7 de       	rcall	.-562    	; 0x84c2 <_turn_off>
    86f4:	e1 2c       	mov	r14, r1
    86f6:	f1 2c       	mov	r15, r1
    86f8:	20 e0       	ldi	r18, 0x00	; 0
    86fa:	30 e0       	ldi	r19, 0x00	; 0
    86fc:	40 ec       	ldi	r20, 0xC0	; 192
    86fe:	50 e0       	ldi	r21, 0x00	; 0
    8700:	6a e4       	ldi	r22, 0x4A	; 74
    8702:	79 e0       	ldi	r23, 0x09	; 9
    8704:	89 ef       	ldi	r24, 0xF9	; 249
    8706:	92 e4       	ldi	r25, 0x42	; 66
    8708:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xTaskCreate>
    870c:	df 91       	pop	r29
    870e:	cf 91       	pop	r28
    8710:	1f 91       	pop	r17
    8712:	0f 91       	pop	r16
    8714:	ff 90       	pop	r15
    8716:	ef 90       	pop	r14
    8718:	08 95       	ret

0000871a <status_leds_slowBlink>:
    871a:	cf 93       	push	r28
    871c:	df 93       	push	r29
    871e:	90 e0       	ldi	r25, 0x00	; 0
    8720:	fc 01       	movw	r30, r24
    8722:	ee 0f       	add	r30, r30
    8724:	ff 1f       	adc	r31, r31
    8726:	df 01       	movw	r26, r30
    8728:	a8 0f       	add	r26, r24
    872a:	b9 1f       	adc	r27, r25
    872c:	aa 0f       	add	r26, r26
    872e:	bb 1f       	adc	r27, r27
    8730:	a8 55       	subi	r26, 0x58	; 88
    8732:	ba 4e       	sbci	r27, 0xEA	; 234
    8734:	cd 91       	ld	r28, X+
    8736:	dc 91       	ld	r29, X
    8738:	11 97       	sbiw	r26, 0x01	; 1
    873a:	48 81       	ld	r20, Y
    873c:	21 e0       	ldi	r18, 0x01	; 1
    873e:	30 e0       	ldi	r19, 0x00	; 0
    8740:	12 96       	adiw	r26, 0x02	; 2
    8742:	0c 90       	ld	r0, X
    8744:	12 97       	sbiw	r26, 0x02	; 2
    8746:	02 c0       	rjmp	.+4      	; 0x874c <status_leds_slowBlink+0x32>
    8748:	22 0f       	add	r18, r18
    874a:	33 1f       	adc	r19, r19
    874c:	0a 94       	dec	r0
    874e:	e2 f7       	brpl	.-8      	; 0x8748 <status_leds_slowBlink+0x2e>
    8750:	24 27       	eor	r18, r20
    8752:	28 83       	st	Y, r18
    8754:	fd 01       	movw	r30, r26
    8756:	81 e0       	ldi	r24, 0x01	; 1
    8758:	84 83       	std	Z+4, r24	; 0x04
    875a:	df 91       	pop	r29
    875c:	cf 91       	pop	r28
    875e:	08 95       	ret

00008760 <status_leds_fastBlink>:
    8760:	cf 93       	push	r28
    8762:	df 93       	push	r29
    8764:	90 e0       	ldi	r25, 0x00	; 0
    8766:	fc 01       	movw	r30, r24
    8768:	ee 0f       	add	r30, r30
    876a:	ff 1f       	adc	r31, r31
    876c:	df 01       	movw	r26, r30
    876e:	a8 0f       	add	r26, r24
    8770:	b9 1f       	adc	r27, r25
    8772:	aa 0f       	add	r26, r26
    8774:	bb 1f       	adc	r27, r27
    8776:	a8 55       	subi	r26, 0x58	; 88
    8778:	ba 4e       	sbci	r27, 0xEA	; 234
    877a:	cd 91       	ld	r28, X+
    877c:	dc 91       	ld	r29, X
    877e:	11 97       	sbiw	r26, 0x01	; 1
    8780:	48 81       	ld	r20, Y
    8782:	21 e0       	ldi	r18, 0x01	; 1
    8784:	30 e0       	ldi	r19, 0x00	; 0
    8786:	12 96       	adiw	r26, 0x02	; 2
    8788:	0c 90       	ld	r0, X
    878a:	12 97       	sbiw	r26, 0x02	; 2
    878c:	02 c0       	rjmp	.+4      	; 0x8792 <status_leds_fastBlink+0x32>
    878e:	22 0f       	add	r18, r18
    8790:	33 1f       	adc	r19, r19
    8792:	0a 94       	dec	r0
    8794:	e2 f7       	brpl	.-8      	; 0x878e <status_leds_fastBlink+0x2e>
    8796:	24 27       	eor	r18, r20
    8798:	28 83       	st	Y, r18
    879a:	fd 01       	movw	r30, r26
    879c:	82 e0       	ldi	r24, 0x02	; 2
    879e:	84 83       	std	Z+4, r24	; 0x04
    87a0:	df 91       	pop	r29
    87a2:	cf 91       	pop	r28
    87a4:	08 95       	ret

000087a6 <status_leds_ledOn>:
    87a6:	28 2f       	mov	r18, r24
    87a8:	30 e0       	ldi	r19, 0x00	; 0
    87aa:	f9 01       	movw	r30, r18
    87ac:	ee 0f       	add	r30, r30
    87ae:	ff 1f       	adc	r31, r31
    87b0:	e2 0f       	add	r30, r18
    87b2:	f3 1f       	adc	r31, r19
    87b4:	ee 0f       	add	r30, r30
    87b6:	ff 1f       	adc	r31, r31
    87b8:	e8 55       	subi	r30, 0x58	; 88
    87ba:	fa 4e       	sbci	r31, 0xEA	; 234
    87bc:	93 e0       	ldi	r25, 0x03	; 3
    87be:	94 83       	std	Z+4, r25	; 0x04
    87c0:	cc ce       	rjmp	.-616    	; 0x855a <_turn_on>
    87c2:	08 95       	ret

000087c4 <status_leds_ledOff>:
    87c4:	28 2f       	mov	r18, r24
    87c6:	30 e0       	ldi	r19, 0x00	; 0
    87c8:	f9 01       	movw	r30, r18
    87ca:	ee 0f       	add	r30, r30
    87cc:	ff 1f       	adc	r31, r31
    87ce:	e2 0f       	add	r30, r18
    87d0:	f3 1f       	adc	r31, r19
    87d2:	ee 0f       	add	r30, r30
    87d4:	ff 1f       	adc	r31, r31
    87d6:	e8 55       	subi	r30, 0x58	; 88
    87d8:	fa 4e       	sbci	r31, 0xEA	; 234
    87da:	94 e0       	ldi	r25, 0x04	; 4
    87dc:	94 83       	std	Z+4, r25	; 0x04
    87de:	71 ce       	rjmp	.-798    	; 0x84c2 <_turn_off>
    87e0:	08 95       	ret

000087e2 <status_leds_longPuls>:
    87e2:	90 e0       	ldi	r25, 0x00	; 0
    87e4:	fc 01       	movw	r30, r24
    87e6:	ee 0f       	add	r30, r30
    87e8:	ff 1f       	adc	r31, r31
    87ea:	df 01       	movw	r26, r30
    87ec:	a8 0f       	add	r26, r24
    87ee:	b9 1f       	adc	r27, r25
    87f0:	aa 0f       	add	r26, r26
    87f2:	bb 1f       	adc	r27, r27
    87f4:	a8 55       	subi	r26, 0x58	; 88
    87f6:	ba 4e       	sbci	r27, 0xEA	; 234
    87f8:	24 e0       	ldi	r18, 0x04	; 4
    87fa:	15 96       	adiw	r26, 0x05	; 5
    87fc:	2c 93       	st	X, r18
    87fe:	15 97       	sbiw	r26, 0x05	; 5
    8800:	fd 01       	movw	r30, r26
    8802:	14 82       	std	Z+4, r1	; 0x04
    8804:	08 95       	ret

00008806 <status_leds_shortPuls>:
    8806:	90 e0       	ldi	r25, 0x00	; 0
    8808:	fc 01       	movw	r30, r24
    880a:	ee 0f       	add	r30, r30
    880c:	ff 1f       	adc	r31, r31
    880e:	df 01       	movw	r26, r30
    8810:	a8 0f       	add	r26, r24
    8812:	b9 1f       	adc	r27, r25
    8814:	aa 0f       	add	r26, r26
    8816:	bb 1f       	adc	r27, r27
    8818:	a8 55       	subi	r26, 0x58	; 88
    881a:	ba 4e       	sbci	r27, 0xEA	; 234
    881c:	21 e0       	ldi	r18, 0x01	; 1
    881e:	15 96       	adiw	r26, 0x05	; 5
    8820:	2c 93       	st	X, r18
    8822:	15 97       	sbiw	r26, 0x05	; 5
    8824:	fd 01       	movw	r30, r26
    8826:	14 82       	std	Z+4, r1	; 0x04
    8828:	08 95       	ret

0000882a <fifo_init>:
    882a:	fc 01       	movw	r30, r24
    882c:	41 11       	cpse	r20, r1
    882e:	01 c0       	rjmp	.+2      	; 0x8832 <fifo_init+0x8>
    8830:	5b d2       	rcall	.+1206   	; 0x8ce8 <abort>
    8832:	84 2f       	mov	r24, r20
    8834:	90 e0       	ldi	r25, 0x00	; 0
    8836:	9c 01       	movw	r18, r24
    8838:	21 50       	subi	r18, 0x01	; 1
    883a:	31 09       	sbc	r19, r1
    883c:	82 23       	and	r24, r18
    883e:	93 23       	and	r25, r19
    8840:	89 2b       	or	r24, r25
    8842:	09 f0       	breq	.+2      	; 0x8846 <fifo_init+0x1c>
    8844:	51 d2       	rcall	.+1186   	; 0x8ce8 <abort>
    8846:	41 38       	cpi	r20, 0x81	; 129
    8848:	08 f0       	brcs	.+2      	; 0x884c <fifo_init+0x22>
    884a:	4e d2       	rcall	.+1180   	; 0x8ce8 <abort>
    884c:	12 82       	std	Z+2, r1	; 0x02
    884e:	13 82       	std	Z+3, r1	; 0x03
    8850:	44 83       	std	Z+4, r20	; 0x04
    8852:	44 0f       	add	r20, r20
    8854:	41 50       	subi	r20, 0x01	; 1
    8856:	45 83       	std	Z+5, r20	; 0x05
    8858:	71 83       	std	Z+1, r23	; 0x01
    885a:	60 83       	st	Z, r22
    885c:	80 e0       	ldi	r24, 0x00	; 0
    885e:	90 e0       	ldi	r25, 0x00	; 0
    8860:	08 95       	ret

00008862 <__subsf3>:
    8862:	50 58       	subi	r21, 0x80	; 128

00008864 <__addsf3>:
    8864:	bb 27       	eor	r27, r27
    8866:	aa 27       	eor	r26, r26
    8868:	13 d0       	rcall	.+38     	; 0x8890 <__addsf3x>
    886a:	0c 94 22 39 	jmp	0x7244	; 0x7244 <__fp_round>
    886e:	0e 94 14 39 	call	0x7228	; 0x7228 <__fp_pscA>
    8872:	38 f0       	brcs	.+14     	; 0x8882 <__addsf3+0x1e>
    8874:	0e 94 1b 39 	call	0x7236	; 0x7236 <__fp_pscB>
    8878:	20 f0       	brcs	.+8      	; 0x8882 <__addsf3+0x1e>
    887a:	39 f4       	brne	.+14     	; 0x888a <__addsf3+0x26>
    887c:	9f 3f       	cpi	r25, 0xFF	; 255
    887e:	19 f4       	brne	.+6      	; 0x8886 <__addsf3+0x22>
    8880:	26 f4       	brtc	.+8      	; 0x888a <__addsf3+0x26>
    8882:	0c 94 11 39 	jmp	0x7222	; 0x7222 <__fp_nan>
    8886:	0e f4       	brtc	.+2      	; 0x888a <__addsf3+0x26>
    8888:	e0 95       	com	r30
    888a:	e7 fb       	bst	r30, 7
    888c:	0c 94 0b 39 	jmp	0x7216	; 0x7216 <__fp_inf>

00008890 <__addsf3x>:
    8890:	e9 2f       	mov	r30, r25
    8892:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <__fp_split3>
    8896:	58 f3       	brcs	.-42     	; 0x886e <__addsf3+0xa>
    8898:	ba 17       	cp	r27, r26
    889a:	62 07       	cpc	r22, r18
    889c:	73 07       	cpc	r23, r19
    889e:	84 07       	cpc	r24, r20
    88a0:	95 07       	cpc	r25, r21
    88a2:	20 f0       	brcs	.+8      	; 0x88ac <__addsf3x+0x1c>
    88a4:	79 f4       	brne	.+30     	; 0x88c4 <__addsf3x+0x34>
    88a6:	a6 f5       	brtc	.+104    	; 0x8910 <__addsf3x+0x80>
    88a8:	0c 94 9d 38 	jmp	0x713a	; 0x713a <__fp_zero>
    88ac:	0e f4       	brtc	.+2      	; 0x88b0 <__addsf3x+0x20>
    88ae:	e0 95       	com	r30
    88b0:	0b 2e       	mov	r0, r27
    88b2:	ba 2f       	mov	r27, r26
    88b4:	a0 2d       	mov	r26, r0
    88b6:	0b 01       	movw	r0, r22
    88b8:	b9 01       	movw	r22, r18
    88ba:	90 01       	movw	r18, r0
    88bc:	0c 01       	movw	r0, r24
    88be:	ca 01       	movw	r24, r20
    88c0:	a0 01       	movw	r20, r0
    88c2:	11 24       	eor	r1, r1
    88c4:	ff 27       	eor	r31, r31
    88c6:	59 1b       	sub	r21, r25
    88c8:	99 f0       	breq	.+38     	; 0x88f0 <__addsf3x+0x60>
    88ca:	59 3f       	cpi	r21, 0xF9	; 249
    88cc:	50 f4       	brcc	.+20     	; 0x88e2 <__addsf3x+0x52>
    88ce:	50 3e       	cpi	r21, 0xE0	; 224
    88d0:	68 f1       	brcs	.+90     	; 0x892c <__addsf3x+0x9c>
    88d2:	1a 16       	cp	r1, r26
    88d4:	f0 40       	sbci	r31, 0x00	; 0
    88d6:	a2 2f       	mov	r26, r18
    88d8:	23 2f       	mov	r18, r19
    88da:	34 2f       	mov	r19, r20
    88dc:	44 27       	eor	r20, r20
    88de:	58 5f       	subi	r21, 0xF8	; 248
    88e0:	f3 cf       	rjmp	.-26     	; 0x88c8 <__addsf3x+0x38>
    88e2:	46 95       	lsr	r20
    88e4:	37 95       	ror	r19
    88e6:	27 95       	ror	r18
    88e8:	a7 95       	ror	r26
    88ea:	f0 40       	sbci	r31, 0x00	; 0
    88ec:	53 95       	inc	r21
    88ee:	c9 f7       	brne	.-14     	; 0x88e2 <__addsf3x+0x52>
    88f0:	7e f4       	brtc	.+30     	; 0x8910 <__addsf3x+0x80>
    88f2:	1f 16       	cp	r1, r31
    88f4:	ba 0b       	sbc	r27, r26
    88f6:	62 0b       	sbc	r22, r18
    88f8:	73 0b       	sbc	r23, r19
    88fa:	84 0b       	sbc	r24, r20
    88fc:	ba f0       	brmi	.+46     	; 0x892c <__addsf3x+0x9c>
    88fe:	91 50       	subi	r25, 0x01	; 1
    8900:	a1 f0       	breq	.+40     	; 0x892a <__addsf3x+0x9a>
    8902:	ff 0f       	add	r31, r31
    8904:	bb 1f       	adc	r27, r27
    8906:	66 1f       	adc	r22, r22
    8908:	77 1f       	adc	r23, r23
    890a:	88 1f       	adc	r24, r24
    890c:	c2 f7       	brpl	.-16     	; 0x88fe <__addsf3x+0x6e>
    890e:	0e c0       	rjmp	.+28     	; 0x892c <__addsf3x+0x9c>
    8910:	ba 0f       	add	r27, r26
    8912:	62 1f       	adc	r22, r18
    8914:	73 1f       	adc	r23, r19
    8916:	84 1f       	adc	r24, r20
    8918:	48 f4       	brcc	.+18     	; 0x892c <__addsf3x+0x9c>
    891a:	87 95       	ror	r24
    891c:	77 95       	ror	r23
    891e:	67 95       	ror	r22
    8920:	b7 95       	ror	r27
    8922:	f7 95       	ror	r31
    8924:	9e 3f       	cpi	r25, 0xFE	; 254
    8926:	08 f0       	brcs	.+2      	; 0x892a <__addsf3x+0x9a>
    8928:	b0 cf       	rjmp	.-160    	; 0x888a <__addsf3+0x26>
    892a:	93 95       	inc	r25
    892c:	88 0f       	add	r24, r24
    892e:	08 f0       	brcs	.+2      	; 0x8932 <__addsf3x+0xa2>
    8930:	99 27       	eor	r25, r25
    8932:	ee 0f       	add	r30, r30
    8934:	97 95       	ror	r25
    8936:	87 95       	ror	r24
    8938:	08 95       	ret

0000893a <__divsf3>:
    893a:	12 d0       	rcall	.+36     	; 0x8960 <__divsf3x>
    893c:	0c 94 22 39 	jmp	0x7244	; 0x7244 <__fp_round>
    8940:	0e 94 1b 39 	call	0x7236	; 0x7236 <__fp_pscB>
    8944:	58 f0       	brcs	.+22     	; 0x895c <__divsf3+0x22>
    8946:	0e 94 14 39 	call	0x7228	; 0x7228 <__fp_pscA>
    894a:	40 f0       	brcs	.+16     	; 0x895c <__divsf3+0x22>
    894c:	29 f4       	brne	.+10     	; 0x8958 <__divsf3+0x1e>
    894e:	5f 3f       	cpi	r21, 0xFF	; 255
    8950:	29 f0       	breq	.+10     	; 0x895c <__divsf3+0x22>
    8952:	0c 94 0b 39 	jmp	0x7216	; 0x7216 <__fp_inf>
    8956:	51 11       	cpse	r21, r1
    8958:	0c 94 9e 38 	jmp	0x713c	; 0x713c <__fp_szero>
    895c:	0c 94 11 39 	jmp	0x7222	; 0x7222 <__fp_nan>

00008960 <__divsf3x>:
    8960:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <__fp_split3>
    8964:	68 f3       	brcs	.-38     	; 0x8940 <__divsf3+0x6>

00008966 <__divsf3_pse>:
    8966:	99 23       	and	r25, r25
    8968:	b1 f3       	breq	.-20     	; 0x8956 <__divsf3+0x1c>
    896a:	55 23       	and	r21, r21
    896c:	91 f3       	breq	.-28     	; 0x8952 <__divsf3+0x18>
    896e:	95 1b       	sub	r25, r21
    8970:	55 0b       	sbc	r21, r21
    8972:	bb 27       	eor	r27, r27
    8974:	aa 27       	eor	r26, r26
    8976:	62 17       	cp	r22, r18
    8978:	73 07       	cpc	r23, r19
    897a:	84 07       	cpc	r24, r20
    897c:	38 f0       	brcs	.+14     	; 0x898c <__divsf3_pse+0x26>
    897e:	9f 5f       	subi	r25, 0xFF	; 255
    8980:	5f 4f       	sbci	r21, 0xFF	; 255
    8982:	22 0f       	add	r18, r18
    8984:	33 1f       	adc	r19, r19
    8986:	44 1f       	adc	r20, r20
    8988:	aa 1f       	adc	r26, r26
    898a:	a9 f3       	breq	.-22     	; 0x8976 <__divsf3_pse+0x10>
    898c:	35 d0       	rcall	.+106    	; 0x89f8 <__divsf3_pse+0x92>
    898e:	0e 2e       	mov	r0, r30
    8990:	3a f0       	brmi	.+14     	; 0x89a0 <__divsf3_pse+0x3a>
    8992:	e0 e8       	ldi	r30, 0x80	; 128
    8994:	32 d0       	rcall	.+100    	; 0x89fa <__divsf3_pse+0x94>
    8996:	91 50       	subi	r25, 0x01	; 1
    8998:	50 40       	sbci	r21, 0x00	; 0
    899a:	e6 95       	lsr	r30
    899c:	00 1c       	adc	r0, r0
    899e:	ca f7       	brpl	.-14     	; 0x8992 <__divsf3_pse+0x2c>
    89a0:	2b d0       	rcall	.+86     	; 0x89f8 <__divsf3_pse+0x92>
    89a2:	fe 2f       	mov	r31, r30
    89a4:	29 d0       	rcall	.+82     	; 0x89f8 <__divsf3_pse+0x92>
    89a6:	66 0f       	add	r22, r22
    89a8:	77 1f       	adc	r23, r23
    89aa:	88 1f       	adc	r24, r24
    89ac:	bb 1f       	adc	r27, r27
    89ae:	26 17       	cp	r18, r22
    89b0:	37 07       	cpc	r19, r23
    89b2:	48 07       	cpc	r20, r24
    89b4:	ab 07       	cpc	r26, r27
    89b6:	b0 e8       	ldi	r27, 0x80	; 128
    89b8:	09 f0       	breq	.+2      	; 0x89bc <__divsf3_pse+0x56>
    89ba:	bb 0b       	sbc	r27, r27
    89bc:	80 2d       	mov	r24, r0
    89be:	bf 01       	movw	r22, r30
    89c0:	ff 27       	eor	r31, r31
    89c2:	93 58       	subi	r25, 0x83	; 131
    89c4:	5f 4f       	sbci	r21, 0xFF	; 255
    89c6:	3a f0       	brmi	.+14     	; 0x89d6 <__divsf3_pse+0x70>
    89c8:	9e 3f       	cpi	r25, 0xFE	; 254
    89ca:	51 05       	cpc	r21, r1
    89cc:	78 f0       	brcs	.+30     	; 0x89ec <__divsf3_pse+0x86>
    89ce:	0c 94 0b 39 	jmp	0x7216	; 0x7216 <__fp_inf>
    89d2:	0c 94 9e 38 	jmp	0x713c	; 0x713c <__fp_szero>
    89d6:	5f 3f       	cpi	r21, 0xFF	; 255
    89d8:	e4 f3       	brlt	.-8      	; 0x89d2 <__divsf3_pse+0x6c>
    89da:	98 3e       	cpi	r25, 0xE8	; 232
    89dc:	d4 f3       	brlt	.-12     	; 0x89d2 <__divsf3_pse+0x6c>
    89de:	86 95       	lsr	r24
    89e0:	77 95       	ror	r23
    89e2:	67 95       	ror	r22
    89e4:	b7 95       	ror	r27
    89e6:	f7 95       	ror	r31
    89e8:	9f 5f       	subi	r25, 0xFF	; 255
    89ea:	c9 f7       	brne	.-14     	; 0x89de <__divsf3_pse+0x78>
    89ec:	88 0f       	add	r24, r24
    89ee:	91 1d       	adc	r25, r1
    89f0:	96 95       	lsr	r25
    89f2:	87 95       	ror	r24
    89f4:	97 f9       	bld	r25, 7
    89f6:	08 95       	ret
    89f8:	e1 e0       	ldi	r30, 0x01	; 1
    89fa:	66 0f       	add	r22, r22
    89fc:	77 1f       	adc	r23, r23
    89fe:	88 1f       	adc	r24, r24
    8a00:	bb 1f       	adc	r27, r27
    8a02:	62 17       	cp	r22, r18
    8a04:	73 07       	cpc	r23, r19
    8a06:	84 07       	cpc	r24, r20
    8a08:	ba 07       	cpc	r27, r26
    8a0a:	20 f0       	brcs	.+8      	; 0x8a14 <__divsf3_pse+0xae>
    8a0c:	62 1b       	sub	r22, r18
    8a0e:	73 0b       	sbc	r23, r19
    8a10:	84 0b       	sbc	r24, r20
    8a12:	ba 0b       	sbc	r27, r26
    8a14:	ee 1f       	adc	r30, r30
    8a16:	88 f7       	brcc	.-30     	; 0x89fa <__divsf3_pse+0x94>
    8a18:	e0 95       	com	r30
    8a1a:	08 95       	ret

00008a1c <__floatunsisf>:
    8a1c:	e8 94       	clt
    8a1e:	09 c0       	rjmp	.+18     	; 0x8a32 <__floatsisf+0x12>

00008a20 <__floatsisf>:
    8a20:	97 fb       	bst	r25, 7
    8a22:	3e f4       	brtc	.+14     	; 0x8a32 <__floatsisf+0x12>
    8a24:	90 95       	com	r25
    8a26:	80 95       	com	r24
    8a28:	70 95       	com	r23
    8a2a:	61 95       	neg	r22
    8a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    8a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    8a30:	9f 4f       	sbci	r25, 0xFF	; 255
    8a32:	99 23       	and	r25, r25
    8a34:	a9 f0       	breq	.+42     	; 0x8a60 <__floatsisf+0x40>
    8a36:	f9 2f       	mov	r31, r25
    8a38:	96 e9       	ldi	r25, 0x96	; 150
    8a3a:	bb 27       	eor	r27, r27
    8a3c:	93 95       	inc	r25
    8a3e:	f6 95       	lsr	r31
    8a40:	87 95       	ror	r24
    8a42:	77 95       	ror	r23
    8a44:	67 95       	ror	r22
    8a46:	b7 95       	ror	r27
    8a48:	f1 11       	cpse	r31, r1
    8a4a:	f8 cf       	rjmp	.-16     	; 0x8a3c <__floatsisf+0x1c>
    8a4c:	fa f4       	brpl	.+62     	; 0x8a8c <__floatsisf+0x6c>
    8a4e:	bb 0f       	add	r27, r27
    8a50:	11 f4       	brne	.+4      	; 0x8a56 <__floatsisf+0x36>
    8a52:	60 ff       	sbrs	r22, 0
    8a54:	1b c0       	rjmp	.+54     	; 0x8a8c <__floatsisf+0x6c>
    8a56:	6f 5f       	subi	r22, 0xFF	; 255
    8a58:	7f 4f       	sbci	r23, 0xFF	; 255
    8a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    8a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    8a5e:	16 c0       	rjmp	.+44     	; 0x8a8c <__floatsisf+0x6c>
    8a60:	88 23       	and	r24, r24
    8a62:	11 f0       	breq	.+4      	; 0x8a68 <__floatsisf+0x48>
    8a64:	96 e9       	ldi	r25, 0x96	; 150
    8a66:	11 c0       	rjmp	.+34     	; 0x8a8a <__floatsisf+0x6a>
    8a68:	77 23       	and	r23, r23
    8a6a:	21 f0       	breq	.+8      	; 0x8a74 <__floatsisf+0x54>
    8a6c:	9e e8       	ldi	r25, 0x8E	; 142
    8a6e:	87 2f       	mov	r24, r23
    8a70:	76 2f       	mov	r23, r22
    8a72:	05 c0       	rjmp	.+10     	; 0x8a7e <__floatsisf+0x5e>
    8a74:	66 23       	and	r22, r22
    8a76:	71 f0       	breq	.+28     	; 0x8a94 <__floatsisf+0x74>
    8a78:	96 e8       	ldi	r25, 0x86	; 134
    8a7a:	86 2f       	mov	r24, r22
    8a7c:	70 e0       	ldi	r23, 0x00	; 0
    8a7e:	60 e0       	ldi	r22, 0x00	; 0
    8a80:	2a f0       	brmi	.+10     	; 0x8a8c <__floatsisf+0x6c>
    8a82:	9a 95       	dec	r25
    8a84:	66 0f       	add	r22, r22
    8a86:	77 1f       	adc	r23, r23
    8a88:	88 1f       	adc	r24, r24
    8a8a:	da f7       	brpl	.-10     	; 0x8a82 <__floatsisf+0x62>
    8a8c:	88 0f       	add	r24, r24
    8a8e:	96 95       	lsr	r25
    8a90:	87 95       	ror	r24
    8a92:	97 f9       	bld	r25, 7
    8a94:	08 95       	ret

00008a96 <__tablejump2__>:
    8a96:	ee 0f       	add	r30, r30
    8a98:	ff 1f       	adc	r31, r31
    8a9a:	88 1f       	adc	r24, r24
    8a9c:	8b bf       	out	0x3b, r24	; 59
    8a9e:	07 90       	elpm	r0, Z+
    8aa0:	f6 91       	elpm	r31, Z
    8aa2:	e0 2d       	mov	r30, r0
    8aa4:	19 94       	eijmp

00008aa6 <malloc>:
    8aa6:	0f 93       	push	r16
    8aa8:	1f 93       	push	r17
    8aaa:	cf 93       	push	r28
    8aac:	df 93       	push	r29
    8aae:	82 30       	cpi	r24, 0x02	; 2
    8ab0:	91 05       	cpc	r25, r1
    8ab2:	10 f4       	brcc	.+4      	; 0x8ab8 <malloc+0x12>
    8ab4:	82 e0       	ldi	r24, 0x02	; 2
    8ab6:	90 e0       	ldi	r25, 0x00	; 0
    8ab8:	e0 91 1e 16 	lds	r30, 0x161E	; 0x80161e <__flp>
    8abc:	f0 91 1f 16 	lds	r31, 0x161F	; 0x80161f <__flp+0x1>
    8ac0:	20 e0       	ldi	r18, 0x00	; 0
    8ac2:	30 e0       	ldi	r19, 0x00	; 0
    8ac4:	a0 e0       	ldi	r26, 0x00	; 0
    8ac6:	b0 e0       	ldi	r27, 0x00	; 0
    8ac8:	30 97       	sbiw	r30, 0x00	; 0
    8aca:	19 f1       	breq	.+70     	; 0x8b12 <malloc+0x6c>
    8acc:	40 81       	ld	r20, Z
    8ace:	51 81       	ldd	r21, Z+1	; 0x01
    8ad0:	02 81       	ldd	r16, Z+2	; 0x02
    8ad2:	13 81       	ldd	r17, Z+3	; 0x03
    8ad4:	48 17       	cp	r20, r24
    8ad6:	59 07       	cpc	r21, r25
    8ad8:	c8 f0       	brcs	.+50     	; 0x8b0c <malloc+0x66>
    8ada:	84 17       	cp	r24, r20
    8adc:	95 07       	cpc	r25, r21
    8ade:	69 f4       	brne	.+26     	; 0x8afa <malloc+0x54>
    8ae0:	10 97       	sbiw	r26, 0x00	; 0
    8ae2:	31 f0       	breq	.+12     	; 0x8af0 <malloc+0x4a>
    8ae4:	12 96       	adiw	r26, 0x02	; 2
    8ae6:	0c 93       	st	X, r16
    8ae8:	12 97       	sbiw	r26, 0x02	; 2
    8aea:	13 96       	adiw	r26, 0x03	; 3
    8aec:	1c 93       	st	X, r17
    8aee:	27 c0       	rjmp	.+78     	; 0x8b3e <malloc+0x98>
    8af0:	00 93 1e 16 	sts	0x161E, r16	; 0x80161e <__flp>
    8af4:	10 93 1f 16 	sts	0x161F, r17	; 0x80161f <__flp+0x1>
    8af8:	22 c0       	rjmp	.+68     	; 0x8b3e <malloc+0x98>
    8afa:	21 15       	cp	r18, r1
    8afc:	31 05       	cpc	r19, r1
    8afe:	19 f0       	breq	.+6      	; 0x8b06 <malloc+0x60>
    8b00:	42 17       	cp	r20, r18
    8b02:	53 07       	cpc	r21, r19
    8b04:	18 f4       	brcc	.+6      	; 0x8b0c <malloc+0x66>
    8b06:	9a 01       	movw	r18, r20
    8b08:	bd 01       	movw	r22, r26
    8b0a:	ef 01       	movw	r28, r30
    8b0c:	df 01       	movw	r26, r30
    8b0e:	f8 01       	movw	r30, r16
    8b10:	db cf       	rjmp	.-74     	; 0x8ac8 <malloc+0x22>
    8b12:	21 15       	cp	r18, r1
    8b14:	31 05       	cpc	r19, r1
    8b16:	f9 f0       	breq	.+62     	; 0x8b56 <malloc+0xb0>
    8b18:	28 1b       	sub	r18, r24
    8b1a:	39 0b       	sbc	r19, r25
    8b1c:	24 30       	cpi	r18, 0x04	; 4
    8b1e:	31 05       	cpc	r19, r1
    8b20:	80 f4       	brcc	.+32     	; 0x8b42 <malloc+0x9c>
    8b22:	8a 81       	ldd	r24, Y+2	; 0x02
    8b24:	9b 81       	ldd	r25, Y+3	; 0x03
    8b26:	61 15       	cp	r22, r1
    8b28:	71 05       	cpc	r23, r1
    8b2a:	21 f0       	breq	.+8      	; 0x8b34 <malloc+0x8e>
    8b2c:	fb 01       	movw	r30, r22
    8b2e:	93 83       	std	Z+3, r25	; 0x03
    8b30:	82 83       	std	Z+2, r24	; 0x02
    8b32:	04 c0       	rjmp	.+8      	; 0x8b3c <malloc+0x96>
    8b34:	90 93 1f 16 	sts	0x161F, r25	; 0x80161f <__flp+0x1>
    8b38:	80 93 1e 16 	sts	0x161E, r24	; 0x80161e <__flp>
    8b3c:	fe 01       	movw	r30, r28
    8b3e:	32 96       	adiw	r30, 0x02	; 2
    8b40:	44 c0       	rjmp	.+136    	; 0x8bca <malloc+0x124>
    8b42:	fe 01       	movw	r30, r28
    8b44:	e2 0f       	add	r30, r18
    8b46:	f3 1f       	adc	r31, r19
    8b48:	81 93       	st	Z+, r24
    8b4a:	91 93       	st	Z+, r25
    8b4c:	22 50       	subi	r18, 0x02	; 2
    8b4e:	31 09       	sbc	r19, r1
    8b50:	39 83       	std	Y+1, r19	; 0x01
    8b52:	28 83       	st	Y, r18
    8b54:	3a c0       	rjmp	.+116    	; 0x8bca <malloc+0x124>
    8b56:	20 91 1c 16 	lds	r18, 0x161C	; 0x80161c <__brkval>
    8b5a:	30 91 1d 16 	lds	r19, 0x161D	; 0x80161d <__brkval+0x1>
    8b5e:	23 2b       	or	r18, r19
    8b60:	41 f4       	brne	.+16     	; 0x8b72 <malloc+0xcc>
    8b62:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    8b66:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    8b6a:	30 93 1d 16 	sts	0x161D, r19	; 0x80161d <__brkval+0x1>
    8b6e:	20 93 1c 16 	sts	0x161C, r18	; 0x80161c <__brkval>
    8b72:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    8b76:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    8b7a:	21 15       	cp	r18, r1
    8b7c:	31 05       	cpc	r19, r1
    8b7e:	41 f4       	brne	.+16     	; 0x8b90 <malloc+0xea>
    8b80:	2d b7       	in	r18, 0x3d	; 61
    8b82:	3e b7       	in	r19, 0x3e	; 62
    8b84:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    8b88:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    8b8c:	24 1b       	sub	r18, r20
    8b8e:	35 0b       	sbc	r19, r21
    8b90:	e0 91 1c 16 	lds	r30, 0x161C	; 0x80161c <__brkval>
    8b94:	f0 91 1d 16 	lds	r31, 0x161D	; 0x80161d <__brkval+0x1>
    8b98:	e2 17       	cp	r30, r18
    8b9a:	f3 07       	cpc	r31, r19
    8b9c:	a0 f4       	brcc	.+40     	; 0x8bc6 <malloc+0x120>
    8b9e:	2e 1b       	sub	r18, r30
    8ba0:	3f 0b       	sbc	r19, r31
    8ba2:	28 17       	cp	r18, r24
    8ba4:	39 07       	cpc	r19, r25
    8ba6:	78 f0       	brcs	.+30     	; 0x8bc6 <malloc+0x120>
    8ba8:	ac 01       	movw	r20, r24
    8baa:	4e 5f       	subi	r20, 0xFE	; 254
    8bac:	5f 4f       	sbci	r21, 0xFF	; 255
    8bae:	24 17       	cp	r18, r20
    8bb0:	35 07       	cpc	r19, r21
    8bb2:	48 f0       	brcs	.+18     	; 0x8bc6 <malloc+0x120>
    8bb4:	4e 0f       	add	r20, r30
    8bb6:	5f 1f       	adc	r21, r31
    8bb8:	50 93 1d 16 	sts	0x161D, r21	; 0x80161d <__brkval+0x1>
    8bbc:	40 93 1c 16 	sts	0x161C, r20	; 0x80161c <__brkval>
    8bc0:	81 93       	st	Z+, r24
    8bc2:	91 93       	st	Z+, r25
    8bc4:	02 c0       	rjmp	.+4      	; 0x8bca <malloc+0x124>
    8bc6:	e0 e0       	ldi	r30, 0x00	; 0
    8bc8:	f0 e0       	ldi	r31, 0x00	; 0
    8bca:	cf 01       	movw	r24, r30
    8bcc:	df 91       	pop	r29
    8bce:	cf 91       	pop	r28
    8bd0:	1f 91       	pop	r17
    8bd2:	0f 91       	pop	r16
    8bd4:	08 95       	ret

00008bd6 <free>:
    8bd6:	cf 93       	push	r28
    8bd8:	df 93       	push	r29
    8bda:	00 97       	sbiw	r24, 0x00	; 0
    8bdc:	09 f4       	brne	.+2      	; 0x8be0 <free+0xa>
    8bde:	81 c0       	rjmp	.+258    	; 0x8ce2 <free+0x10c>
    8be0:	fc 01       	movw	r30, r24
    8be2:	32 97       	sbiw	r30, 0x02	; 2
    8be4:	13 82       	std	Z+3, r1	; 0x03
    8be6:	12 82       	std	Z+2, r1	; 0x02
    8be8:	a0 91 1e 16 	lds	r26, 0x161E	; 0x80161e <__flp>
    8bec:	b0 91 1f 16 	lds	r27, 0x161F	; 0x80161f <__flp+0x1>
    8bf0:	10 97       	sbiw	r26, 0x00	; 0
    8bf2:	81 f4       	brne	.+32     	; 0x8c14 <free+0x3e>
    8bf4:	20 81       	ld	r18, Z
    8bf6:	31 81       	ldd	r19, Z+1	; 0x01
    8bf8:	82 0f       	add	r24, r18
    8bfa:	93 1f       	adc	r25, r19
    8bfc:	20 91 1c 16 	lds	r18, 0x161C	; 0x80161c <__brkval>
    8c00:	30 91 1d 16 	lds	r19, 0x161D	; 0x80161d <__brkval+0x1>
    8c04:	28 17       	cp	r18, r24
    8c06:	39 07       	cpc	r19, r25
    8c08:	51 f5       	brne	.+84     	; 0x8c5e <free+0x88>
    8c0a:	f0 93 1d 16 	sts	0x161D, r31	; 0x80161d <__brkval+0x1>
    8c0e:	e0 93 1c 16 	sts	0x161C, r30	; 0x80161c <__brkval>
    8c12:	67 c0       	rjmp	.+206    	; 0x8ce2 <free+0x10c>
    8c14:	ed 01       	movw	r28, r26
    8c16:	20 e0       	ldi	r18, 0x00	; 0
    8c18:	30 e0       	ldi	r19, 0x00	; 0
    8c1a:	ce 17       	cp	r28, r30
    8c1c:	df 07       	cpc	r29, r31
    8c1e:	40 f4       	brcc	.+16     	; 0x8c30 <free+0x5a>
    8c20:	4a 81       	ldd	r20, Y+2	; 0x02
    8c22:	5b 81       	ldd	r21, Y+3	; 0x03
    8c24:	9e 01       	movw	r18, r28
    8c26:	41 15       	cp	r20, r1
    8c28:	51 05       	cpc	r21, r1
    8c2a:	f1 f0       	breq	.+60     	; 0x8c68 <free+0x92>
    8c2c:	ea 01       	movw	r28, r20
    8c2e:	f5 cf       	rjmp	.-22     	; 0x8c1a <free+0x44>
    8c30:	d3 83       	std	Z+3, r29	; 0x03
    8c32:	c2 83       	std	Z+2, r28	; 0x02
    8c34:	40 81       	ld	r20, Z
    8c36:	51 81       	ldd	r21, Z+1	; 0x01
    8c38:	84 0f       	add	r24, r20
    8c3a:	95 1f       	adc	r25, r21
    8c3c:	c8 17       	cp	r28, r24
    8c3e:	d9 07       	cpc	r29, r25
    8c40:	59 f4       	brne	.+22     	; 0x8c58 <free+0x82>
    8c42:	88 81       	ld	r24, Y
    8c44:	99 81       	ldd	r25, Y+1	; 0x01
    8c46:	84 0f       	add	r24, r20
    8c48:	95 1f       	adc	r25, r21
    8c4a:	02 96       	adiw	r24, 0x02	; 2
    8c4c:	91 83       	std	Z+1, r25	; 0x01
    8c4e:	80 83       	st	Z, r24
    8c50:	8a 81       	ldd	r24, Y+2	; 0x02
    8c52:	9b 81       	ldd	r25, Y+3	; 0x03
    8c54:	93 83       	std	Z+3, r25	; 0x03
    8c56:	82 83       	std	Z+2, r24	; 0x02
    8c58:	21 15       	cp	r18, r1
    8c5a:	31 05       	cpc	r19, r1
    8c5c:	29 f4       	brne	.+10     	; 0x8c68 <free+0x92>
    8c5e:	f0 93 1f 16 	sts	0x161F, r31	; 0x80161f <__flp+0x1>
    8c62:	e0 93 1e 16 	sts	0x161E, r30	; 0x80161e <__flp>
    8c66:	3d c0       	rjmp	.+122    	; 0x8ce2 <free+0x10c>
    8c68:	e9 01       	movw	r28, r18
    8c6a:	fb 83       	std	Y+3, r31	; 0x03
    8c6c:	ea 83       	std	Y+2, r30	; 0x02
    8c6e:	49 91       	ld	r20, Y+
    8c70:	59 91       	ld	r21, Y+
    8c72:	c4 0f       	add	r28, r20
    8c74:	d5 1f       	adc	r29, r21
    8c76:	ec 17       	cp	r30, r28
    8c78:	fd 07       	cpc	r31, r29
    8c7a:	61 f4       	brne	.+24     	; 0x8c94 <free+0xbe>
    8c7c:	80 81       	ld	r24, Z
    8c7e:	91 81       	ldd	r25, Z+1	; 0x01
    8c80:	84 0f       	add	r24, r20
    8c82:	95 1f       	adc	r25, r21
    8c84:	02 96       	adiw	r24, 0x02	; 2
    8c86:	e9 01       	movw	r28, r18
    8c88:	99 83       	std	Y+1, r25	; 0x01
    8c8a:	88 83       	st	Y, r24
    8c8c:	82 81       	ldd	r24, Z+2	; 0x02
    8c8e:	93 81       	ldd	r25, Z+3	; 0x03
    8c90:	9b 83       	std	Y+3, r25	; 0x03
    8c92:	8a 83       	std	Y+2, r24	; 0x02
    8c94:	e0 e0       	ldi	r30, 0x00	; 0
    8c96:	f0 e0       	ldi	r31, 0x00	; 0
    8c98:	12 96       	adiw	r26, 0x02	; 2
    8c9a:	8d 91       	ld	r24, X+
    8c9c:	9c 91       	ld	r25, X
    8c9e:	13 97       	sbiw	r26, 0x03	; 3
    8ca0:	00 97       	sbiw	r24, 0x00	; 0
    8ca2:	19 f0       	breq	.+6      	; 0x8caa <free+0xd4>
    8ca4:	fd 01       	movw	r30, r26
    8ca6:	dc 01       	movw	r26, r24
    8ca8:	f7 cf       	rjmp	.-18     	; 0x8c98 <free+0xc2>
    8caa:	8d 91       	ld	r24, X+
    8cac:	9c 91       	ld	r25, X
    8cae:	11 97       	sbiw	r26, 0x01	; 1
    8cb0:	9d 01       	movw	r18, r26
    8cb2:	2e 5f       	subi	r18, 0xFE	; 254
    8cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    8cb6:	82 0f       	add	r24, r18
    8cb8:	93 1f       	adc	r25, r19
    8cba:	20 91 1c 16 	lds	r18, 0x161C	; 0x80161c <__brkval>
    8cbe:	30 91 1d 16 	lds	r19, 0x161D	; 0x80161d <__brkval+0x1>
    8cc2:	28 17       	cp	r18, r24
    8cc4:	39 07       	cpc	r19, r25
    8cc6:	69 f4       	brne	.+26     	; 0x8ce2 <free+0x10c>
    8cc8:	30 97       	sbiw	r30, 0x00	; 0
    8cca:	29 f4       	brne	.+10     	; 0x8cd6 <free+0x100>
    8ccc:	10 92 1f 16 	sts	0x161F, r1	; 0x80161f <__flp+0x1>
    8cd0:	10 92 1e 16 	sts	0x161E, r1	; 0x80161e <__flp>
    8cd4:	02 c0       	rjmp	.+4      	; 0x8cda <free+0x104>
    8cd6:	13 82       	std	Z+3, r1	; 0x03
    8cd8:	12 82       	std	Z+2, r1	; 0x02
    8cda:	b0 93 1d 16 	sts	0x161D, r27	; 0x80161d <__brkval+0x1>
    8cde:	a0 93 1c 16 	sts	0x161C, r26	; 0x80161c <__brkval>
    8ce2:	df 91       	pop	r29
    8ce4:	cf 91       	pop	r28
    8ce6:	08 95       	ret

00008ce8 <abort>:
    8ce8:	81 e0       	ldi	r24, 0x01	; 1
    8cea:	90 e0       	ldi	r25, 0x00	; 0
    8cec:	f8 94       	cli
    8cee:	7d c3       	rjmp	.+1786   	; 0x93ea <_exit>

00008cf0 <memcpy>:
    8cf0:	fb 01       	movw	r30, r22
    8cf2:	dc 01       	movw	r26, r24
    8cf4:	02 c0       	rjmp	.+4      	; 0x8cfa <memcpy+0xa>
    8cf6:	01 90       	ld	r0, Z+
    8cf8:	0d 92       	st	X+, r0
    8cfa:	41 50       	subi	r20, 0x01	; 1
    8cfc:	50 40       	sbci	r21, 0x00	; 0
    8cfe:	d8 f7       	brcc	.-10     	; 0x8cf6 <memcpy+0x6>
    8d00:	08 95       	ret

00008d02 <memset>:
    8d02:	dc 01       	movw	r26, r24
    8d04:	01 c0       	rjmp	.+2      	; 0x8d08 <memset+0x6>
    8d06:	6d 93       	st	X+, r22
    8d08:	41 50       	subi	r20, 0x01	; 1
    8d0a:	50 40       	sbci	r21, 0x00	; 0
    8d0c:	e0 f7       	brcc	.-8      	; 0x8d06 <memset+0x4>
    8d0e:	08 95       	ret

00008d10 <strcasestr>:
    8d10:	fb 01       	movw	r30, r22
    8d12:	51 91       	ld	r21, Z+
    8d14:	55 23       	and	r21, r21
    8d16:	b1 f0       	breq	.+44     	; 0x8d44 <strcasestr+0x34>
    8d18:	bf 01       	movw	r22, r30
    8d1a:	dc 01       	movw	r26, r24
    8d1c:	05 2e       	mov	r0, r21
    8d1e:	4d 91       	ld	r20, X+
    8d20:	44 23       	and	r20, r20
    8d22:	69 f0       	breq	.+26     	; 0x8d3e <strcasestr+0x2e>
    8d24:	10 d0       	rcall	.+32     	; 0x8d46 <strcasestr+0x36>
    8d26:	d9 f7       	brne	.-10     	; 0x8d1e <strcasestr+0xe>
    8d28:	cd 01       	movw	r24, r26
    8d2a:	01 90       	ld	r0, Z+
    8d2c:	00 20       	and	r0, r0
    8d2e:	49 f0       	breq	.+18     	; 0x8d42 <strcasestr+0x32>
    8d30:	4d 91       	ld	r20, X+
    8d32:	41 11       	cpse	r20, r1
    8d34:	08 d0       	rcall	.+16     	; 0x8d46 <strcasestr+0x36>
    8d36:	c9 f3       	breq	.-14     	; 0x8d2a <strcasestr+0x1a>
    8d38:	fb 01       	movw	r30, r22
    8d3a:	41 11       	cpse	r20, r1
    8d3c:	ee cf       	rjmp	.-36     	; 0x8d1a <strcasestr+0xa>
    8d3e:	81 e0       	ldi	r24, 0x01	; 1
    8d40:	90 e0       	ldi	r25, 0x00	; 0
    8d42:	01 97       	sbiw	r24, 0x01	; 1
    8d44:	08 95       	ret
    8d46:	40 25       	eor	r20, r0
    8d48:	39 f0       	breq	.+14     	; 0x8d58 <strcasestr+0x48>
    8d4a:	40 32       	cpi	r20, 0x20	; 32
    8d4c:	29 f4       	brne	.+10     	; 0x8d58 <strcasestr+0x48>
    8d4e:	40 29       	or	r20, r0
    8d50:	4b 57       	subi	r20, 0x7B	; 123
    8d52:	46 5e       	subi	r20, 0xE6	; 230
    8d54:	08 f0       	brcs	.+2      	; 0x8d58 <strcasestr+0x48>
    8d56:	18 94       	sez
    8d58:	08 95       	ret

00008d5a <strcat>:
    8d5a:	fb 01       	movw	r30, r22
    8d5c:	dc 01       	movw	r26, r24
    8d5e:	0d 90       	ld	r0, X+
    8d60:	00 20       	and	r0, r0
    8d62:	e9 f7       	brne	.-6      	; 0x8d5e <strcat+0x4>
    8d64:	11 97       	sbiw	r26, 0x01	; 1
    8d66:	01 90       	ld	r0, Z+
    8d68:	0d 92       	st	X+, r0
    8d6a:	00 20       	and	r0, r0
    8d6c:	e1 f7       	brne	.-8      	; 0x8d66 <strcat+0xc>
    8d6e:	08 95       	ret

00008d70 <strcpy>:
    8d70:	fb 01       	movw	r30, r22
    8d72:	dc 01       	movw	r26, r24
    8d74:	01 90       	ld	r0, Z+
    8d76:	0d 92       	st	X+, r0
    8d78:	00 20       	and	r0, r0
    8d7a:	e1 f7       	brne	.-8      	; 0x8d74 <strcpy+0x4>
    8d7c:	08 95       	ret

00008d7e <strncasecmp>:
    8d7e:	fb 01       	movw	r30, r22
    8d80:	dc 01       	movw	r26, r24
    8d82:	41 50       	subi	r20, 0x01	; 1
    8d84:	50 40       	sbci	r21, 0x00	; 0
    8d86:	88 f0       	brcs	.+34     	; 0x8daa <strncasecmp+0x2c>
    8d88:	8d 91       	ld	r24, X+
    8d8a:	81 34       	cpi	r24, 0x41	; 65
    8d8c:	1c f0       	brlt	.+6      	; 0x8d94 <strncasecmp+0x16>
    8d8e:	8b 35       	cpi	r24, 0x5B	; 91
    8d90:	0c f4       	brge	.+2      	; 0x8d94 <strncasecmp+0x16>
    8d92:	80 5e       	subi	r24, 0xE0	; 224
    8d94:	61 91       	ld	r22, Z+
    8d96:	61 34       	cpi	r22, 0x41	; 65
    8d98:	1c f0       	brlt	.+6      	; 0x8da0 <strncasecmp+0x22>
    8d9a:	6b 35       	cpi	r22, 0x5B	; 91
    8d9c:	0c f4       	brge	.+2      	; 0x8da0 <strncasecmp+0x22>
    8d9e:	60 5e       	subi	r22, 0xE0	; 224
    8da0:	86 1b       	sub	r24, r22
    8da2:	61 11       	cpse	r22, r1
    8da4:	71 f3       	breq	.-36     	; 0x8d82 <strncasecmp+0x4>
    8da6:	99 0b       	sbc	r25, r25
    8da8:	08 95       	ret
    8daa:	88 1b       	sub	r24, r24
    8dac:	fc cf       	rjmp	.-8      	; 0x8da6 <strncasecmp+0x28>

00008dae <printf>:
    8dae:	cf 93       	push	r28
    8db0:	df 93       	push	r29
    8db2:	cd b7       	in	r28, 0x3d	; 61
    8db4:	de b7       	in	r29, 0x3e	; 62
    8db6:	ae 01       	movw	r20, r28
    8db8:	4a 5f       	subi	r20, 0xFA	; 250
    8dba:	5f 4f       	sbci	r21, 0xFF	; 255
    8dbc:	fa 01       	movw	r30, r20
    8dbe:	61 91       	ld	r22, Z+
    8dc0:	71 91       	ld	r23, Z+
    8dc2:	af 01       	movw	r20, r30
    8dc4:	80 91 22 16 	lds	r24, 0x1622	; 0x801622 <__iob+0x2>
    8dc8:	90 91 23 16 	lds	r25, 0x1623	; 0x801623 <__iob+0x3>
    8dcc:	61 d0       	rcall	.+194    	; 0x8e90 <vfprintf>
    8dce:	df 91       	pop	r29
    8dd0:	cf 91       	pop	r28
    8dd2:	08 95       	ret

00008dd4 <puts>:
    8dd4:	0f 93       	push	r16
    8dd6:	1f 93       	push	r17
    8dd8:	cf 93       	push	r28
    8dda:	df 93       	push	r29
    8ddc:	e0 91 22 16 	lds	r30, 0x1622	; 0x801622 <__iob+0x2>
    8de0:	f0 91 23 16 	lds	r31, 0x1623	; 0x801623 <__iob+0x3>
    8de4:	23 81       	ldd	r18, Z+3	; 0x03
    8de6:	21 ff       	sbrs	r18, 1
    8de8:	1b c0       	rjmp	.+54     	; 0x8e20 <puts+0x4c>
    8dea:	8c 01       	movw	r16, r24
    8dec:	d0 e0       	ldi	r29, 0x00	; 0
    8dee:	c0 e0       	ldi	r28, 0x00	; 0
    8df0:	f8 01       	movw	r30, r16
    8df2:	81 91       	ld	r24, Z+
    8df4:	8f 01       	movw	r16, r30
    8df6:	60 91 22 16 	lds	r22, 0x1622	; 0x801622 <__iob+0x2>
    8dfa:	70 91 23 16 	lds	r23, 0x1623	; 0x801623 <__iob+0x3>
    8dfe:	db 01       	movw	r26, r22
    8e00:	18 96       	adiw	r26, 0x08	; 8
    8e02:	ed 91       	ld	r30, X+
    8e04:	fc 91       	ld	r31, X
    8e06:	19 97       	sbiw	r26, 0x09	; 9
    8e08:	88 23       	and	r24, r24
    8e0a:	31 f0       	breq	.+12     	; 0x8e18 <puts+0x44>
    8e0c:	19 95       	eicall
    8e0e:	89 2b       	or	r24, r25
    8e10:	79 f3       	breq	.-34     	; 0x8df0 <puts+0x1c>
    8e12:	df ef       	ldi	r29, 0xFF	; 255
    8e14:	cf ef       	ldi	r28, 0xFF	; 255
    8e16:	ec cf       	rjmp	.-40     	; 0x8df0 <puts+0x1c>
    8e18:	8a e0       	ldi	r24, 0x0A	; 10
    8e1a:	19 95       	eicall
    8e1c:	89 2b       	or	r24, r25
    8e1e:	19 f0       	breq	.+6      	; 0x8e26 <puts+0x52>
    8e20:	8f ef       	ldi	r24, 0xFF	; 255
    8e22:	9f ef       	ldi	r25, 0xFF	; 255
    8e24:	02 c0       	rjmp	.+4      	; 0x8e2a <puts+0x56>
    8e26:	8d 2f       	mov	r24, r29
    8e28:	9c 2f       	mov	r25, r28
    8e2a:	df 91       	pop	r29
    8e2c:	cf 91       	pop	r28
    8e2e:	1f 91       	pop	r17
    8e30:	0f 91       	pop	r16
    8e32:	08 95       	ret

00008e34 <sprintf>:
    8e34:	0f 93       	push	r16
    8e36:	1f 93       	push	r17
    8e38:	cf 93       	push	r28
    8e3a:	df 93       	push	r29
    8e3c:	cd b7       	in	r28, 0x3d	; 61
    8e3e:	de b7       	in	r29, 0x3e	; 62
    8e40:	2e 97       	sbiw	r28, 0x0e	; 14
    8e42:	0f b6       	in	r0, 0x3f	; 63
    8e44:	f8 94       	cli
    8e46:	de bf       	out	0x3e, r29	; 62
    8e48:	0f be       	out	0x3f, r0	; 63
    8e4a:	cd bf       	out	0x3d, r28	; 61
    8e4c:	0e 89       	ldd	r16, Y+22	; 0x16
    8e4e:	1f 89       	ldd	r17, Y+23	; 0x17
    8e50:	86 e0       	ldi	r24, 0x06	; 6
    8e52:	8c 83       	std	Y+4, r24	; 0x04
    8e54:	1a 83       	std	Y+2, r17	; 0x02
    8e56:	09 83       	std	Y+1, r16	; 0x01
    8e58:	8f ef       	ldi	r24, 0xFF	; 255
    8e5a:	9f e7       	ldi	r25, 0x7F	; 127
    8e5c:	9e 83       	std	Y+6, r25	; 0x06
    8e5e:	8d 83       	std	Y+5, r24	; 0x05
    8e60:	ae 01       	movw	r20, r28
    8e62:	46 5e       	subi	r20, 0xE6	; 230
    8e64:	5f 4f       	sbci	r21, 0xFF	; 255
    8e66:	68 8d       	ldd	r22, Y+24	; 0x18
    8e68:	79 8d       	ldd	r23, Y+25	; 0x19
    8e6a:	ce 01       	movw	r24, r28
    8e6c:	01 96       	adiw	r24, 0x01	; 1
    8e6e:	10 d0       	rcall	.+32     	; 0x8e90 <vfprintf>
    8e70:	ef 81       	ldd	r30, Y+7	; 0x07
    8e72:	f8 85       	ldd	r31, Y+8	; 0x08
    8e74:	e0 0f       	add	r30, r16
    8e76:	f1 1f       	adc	r31, r17
    8e78:	10 82       	st	Z, r1
    8e7a:	2e 96       	adiw	r28, 0x0e	; 14
    8e7c:	0f b6       	in	r0, 0x3f	; 63
    8e7e:	f8 94       	cli
    8e80:	de bf       	out	0x3e, r29	; 62
    8e82:	0f be       	out	0x3f, r0	; 63
    8e84:	cd bf       	out	0x3d, r28	; 61
    8e86:	df 91       	pop	r29
    8e88:	cf 91       	pop	r28
    8e8a:	1f 91       	pop	r17
    8e8c:	0f 91       	pop	r16
    8e8e:	08 95       	ret

00008e90 <vfprintf>:
    8e90:	2f 92       	push	r2
    8e92:	3f 92       	push	r3
    8e94:	4f 92       	push	r4
    8e96:	5f 92       	push	r5
    8e98:	6f 92       	push	r6
    8e9a:	7f 92       	push	r7
    8e9c:	8f 92       	push	r8
    8e9e:	9f 92       	push	r9
    8ea0:	af 92       	push	r10
    8ea2:	bf 92       	push	r11
    8ea4:	cf 92       	push	r12
    8ea6:	df 92       	push	r13
    8ea8:	ef 92       	push	r14
    8eaa:	ff 92       	push	r15
    8eac:	0f 93       	push	r16
    8eae:	1f 93       	push	r17
    8eb0:	cf 93       	push	r28
    8eb2:	df 93       	push	r29
    8eb4:	cd b7       	in	r28, 0x3d	; 61
    8eb6:	de b7       	in	r29, 0x3e	; 62
    8eb8:	2b 97       	sbiw	r28, 0x0b	; 11
    8eba:	0f b6       	in	r0, 0x3f	; 63
    8ebc:	f8 94       	cli
    8ebe:	de bf       	out	0x3e, r29	; 62
    8ec0:	0f be       	out	0x3f, r0	; 63
    8ec2:	cd bf       	out	0x3d, r28	; 61
    8ec4:	6c 01       	movw	r12, r24
    8ec6:	7b 01       	movw	r14, r22
    8ec8:	8a 01       	movw	r16, r20
    8eca:	fc 01       	movw	r30, r24
    8ecc:	17 82       	std	Z+7, r1	; 0x07
    8ece:	16 82       	std	Z+6, r1	; 0x06
    8ed0:	83 81       	ldd	r24, Z+3	; 0x03
    8ed2:	81 ff       	sbrs	r24, 1
    8ed4:	bf c1       	rjmp	.+894    	; 0x9254 <vfprintf+0x3c4>
    8ed6:	ce 01       	movw	r24, r28
    8ed8:	01 96       	adiw	r24, 0x01	; 1
    8eda:	3c 01       	movw	r6, r24
    8edc:	f6 01       	movw	r30, r12
    8ede:	93 81       	ldd	r25, Z+3	; 0x03
    8ee0:	f7 01       	movw	r30, r14
    8ee2:	93 fd       	sbrc	r25, 3
    8ee4:	85 91       	lpm	r24, Z+
    8ee6:	93 ff       	sbrs	r25, 3
    8ee8:	81 91       	ld	r24, Z+
    8eea:	7f 01       	movw	r14, r30
    8eec:	88 23       	and	r24, r24
    8eee:	09 f4       	brne	.+2      	; 0x8ef2 <vfprintf+0x62>
    8ef0:	ad c1       	rjmp	.+858    	; 0x924c <vfprintf+0x3bc>
    8ef2:	85 32       	cpi	r24, 0x25	; 37
    8ef4:	39 f4       	brne	.+14     	; 0x8f04 <vfprintf+0x74>
    8ef6:	93 fd       	sbrc	r25, 3
    8ef8:	85 91       	lpm	r24, Z+
    8efa:	93 ff       	sbrs	r25, 3
    8efc:	81 91       	ld	r24, Z+
    8efe:	7f 01       	movw	r14, r30
    8f00:	85 32       	cpi	r24, 0x25	; 37
    8f02:	21 f4       	brne	.+8      	; 0x8f0c <vfprintf+0x7c>
    8f04:	b6 01       	movw	r22, r12
    8f06:	90 e0       	ldi	r25, 0x00	; 0
    8f08:	d6 d1       	rcall	.+940    	; 0x92b6 <fputc>
    8f0a:	e8 cf       	rjmp	.-48     	; 0x8edc <vfprintf+0x4c>
    8f0c:	91 2c       	mov	r9, r1
    8f0e:	21 2c       	mov	r2, r1
    8f10:	31 2c       	mov	r3, r1
    8f12:	ff e1       	ldi	r31, 0x1F	; 31
    8f14:	f3 15       	cp	r31, r3
    8f16:	d8 f0       	brcs	.+54     	; 0x8f4e <vfprintf+0xbe>
    8f18:	8b 32       	cpi	r24, 0x2B	; 43
    8f1a:	79 f0       	breq	.+30     	; 0x8f3a <vfprintf+0xaa>
    8f1c:	38 f4       	brcc	.+14     	; 0x8f2c <vfprintf+0x9c>
    8f1e:	80 32       	cpi	r24, 0x20	; 32
    8f20:	79 f0       	breq	.+30     	; 0x8f40 <vfprintf+0xb0>
    8f22:	83 32       	cpi	r24, 0x23	; 35
    8f24:	a1 f4       	brne	.+40     	; 0x8f4e <vfprintf+0xbe>
    8f26:	23 2d       	mov	r18, r3
    8f28:	20 61       	ori	r18, 0x10	; 16
    8f2a:	1d c0       	rjmp	.+58     	; 0x8f66 <vfprintf+0xd6>
    8f2c:	8d 32       	cpi	r24, 0x2D	; 45
    8f2e:	61 f0       	breq	.+24     	; 0x8f48 <vfprintf+0xb8>
    8f30:	80 33       	cpi	r24, 0x30	; 48
    8f32:	69 f4       	brne	.+26     	; 0x8f4e <vfprintf+0xbe>
    8f34:	23 2d       	mov	r18, r3
    8f36:	21 60       	ori	r18, 0x01	; 1
    8f38:	16 c0       	rjmp	.+44     	; 0x8f66 <vfprintf+0xd6>
    8f3a:	83 2d       	mov	r24, r3
    8f3c:	82 60       	ori	r24, 0x02	; 2
    8f3e:	38 2e       	mov	r3, r24
    8f40:	e3 2d       	mov	r30, r3
    8f42:	e4 60       	ori	r30, 0x04	; 4
    8f44:	3e 2e       	mov	r3, r30
    8f46:	2a c0       	rjmp	.+84     	; 0x8f9c <vfprintf+0x10c>
    8f48:	f3 2d       	mov	r31, r3
    8f4a:	f8 60       	ori	r31, 0x08	; 8
    8f4c:	1d c0       	rjmp	.+58     	; 0x8f88 <vfprintf+0xf8>
    8f4e:	37 fc       	sbrc	r3, 7
    8f50:	2d c0       	rjmp	.+90     	; 0x8fac <vfprintf+0x11c>
    8f52:	20 ed       	ldi	r18, 0xD0	; 208
    8f54:	28 0f       	add	r18, r24
    8f56:	2a 30       	cpi	r18, 0x0A	; 10
    8f58:	40 f0       	brcs	.+16     	; 0x8f6a <vfprintf+0xda>
    8f5a:	8e 32       	cpi	r24, 0x2E	; 46
    8f5c:	b9 f4       	brne	.+46     	; 0x8f8c <vfprintf+0xfc>
    8f5e:	36 fc       	sbrc	r3, 6
    8f60:	75 c1       	rjmp	.+746    	; 0x924c <vfprintf+0x3bc>
    8f62:	23 2d       	mov	r18, r3
    8f64:	20 64       	ori	r18, 0x40	; 64
    8f66:	32 2e       	mov	r3, r18
    8f68:	19 c0       	rjmp	.+50     	; 0x8f9c <vfprintf+0x10c>
    8f6a:	36 fe       	sbrs	r3, 6
    8f6c:	06 c0       	rjmp	.+12     	; 0x8f7a <vfprintf+0xea>
    8f6e:	8a e0       	ldi	r24, 0x0A	; 10
    8f70:	98 9e       	mul	r9, r24
    8f72:	20 0d       	add	r18, r0
    8f74:	11 24       	eor	r1, r1
    8f76:	92 2e       	mov	r9, r18
    8f78:	11 c0       	rjmp	.+34     	; 0x8f9c <vfprintf+0x10c>
    8f7a:	ea e0       	ldi	r30, 0x0A	; 10
    8f7c:	2e 9e       	mul	r2, r30
    8f7e:	20 0d       	add	r18, r0
    8f80:	11 24       	eor	r1, r1
    8f82:	22 2e       	mov	r2, r18
    8f84:	f3 2d       	mov	r31, r3
    8f86:	f0 62       	ori	r31, 0x20	; 32
    8f88:	3f 2e       	mov	r3, r31
    8f8a:	08 c0       	rjmp	.+16     	; 0x8f9c <vfprintf+0x10c>
    8f8c:	8c 36       	cpi	r24, 0x6C	; 108
    8f8e:	21 f4       	brne	.+8      	; 0x8f98 <vfprintf+0x108>
    8f90:	83 2d       	mov	r24, r3
    8f92:	80 68       	ori	r24, 0x80	; 128
    8f94:	38 2e       	mov	r3, r24
    8f96:	02 c0       	rjmp	.+4      	; 0x8f9c <vfprintf+0x10c>
    8f98:	88 36       	cpi	r24, 0x68	; 104
    8f9a:	41 f4       	brne	.+16     	; 0x8fac <vfprintf+0x11c>
    8f9c:	f7 01       	movw	r30, r14
    8f9e:	93 fd       	sbrc	r25, 3
    8fa0:	85 91       	lpm	r24, Z+
    8fa2:	93 ff       	sbrs	r25, 3
    8fa4:	81 91       	ld	r24, Z+
    8fa6:	7f 01       	movw	r14, r30
    8fa8:	81 11       	cpse	r24, r1
    8faa:	b3 cf       	rjmp	.-154    	; 0x8f12 <vfprintf+0x82>
    8fac:	98 2f       	mov	r25, r24
    8fae:	9f 7d       	andi	r25, 0xDF	; 223
    8fb0:	95 54       	subi	r25, 0x45	; 69
    8fb2:	93 30       	cpi	r25, 0x03	; 3
    8fb4:	28 f4       	brcc	.+10     	; 0x8fc0 <vfprintf+0x130>
    8fb6:	0c 5f       	subi	r16, 0xFC	; 252
    8fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    8fba:	9f e3       	ldi	r25, 0x3F	; 63
    8fbc:	99 83       	std	Y+1, r25	; 0x01
    8fbe:	0d c0       	rjmp	.+26     	; 0x8fda <vfprintf+0x14a>
    8fc0:	83 36       	cpi	r24, 0x63	; 99
    8fc2:	31 f0       	breq	.+12     	; 0x8fd0 <vfprintf+0x140>
    8fc4:	83 37       	cpi	r24, 0x73	; 115
    8fc6:	71 f0       	breq	.+28     	; 0x8fe4 <vfprintf+0x154>
    8fc8:	83 35       	cpi	r24, 0x53	; 83
    8fca:	09 f0       	breq	.+2      	; 0x8fce <vfprintf+0x13e>
    8fcc:	55 c0       	rjmp	.+170    	; 0x9078 <vfprintf+0x1e8>
    8fce:	20 c0       	rjmp	.+64     	; 0x9010 <vfprintf+0x180>
    8fd0:	f8 01       	movw	r30, r16
    8fd2:	80 81       	ld	r24, Z
    8fd4:	89 83       	std	Y+1, r24	; 0x01
    8fd6:	0e 5f       	subi	r16, 0xFE	; 254
    8fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    8fda:	88 24       	eor	r8, r8
    8fdc:	83 94       	inc	r8
    8fde:	91 2c       	mov	r9, r1
    8fe0:	53 01       	movw	r10, r6
    8fe2:	12 c0       	rjmp	.+36     	; 0x9008 <vfprintf+0x178>
    8fe4:	28 01       	movw	r4, r16
    8fe6:	f2 e0       	ldi	r31, 0x02	; 2
    8fe8:	4f 0e       	add	r4, r31
    8fea:	51 1c       	adc	r5, r1
    8fec:	f8 01       	movw	r30, r16
    8fee:	a0 80       	ld	r10, Z
    8ff0:	b1 80       	ldd	r11, Z+1	; 0x01
    8ff2:	36 fe       	sbrs	r3, 6
    8ff4:	03 c0       	rjmp	.+6      	; 0x8ffc <vfprintf+0x16c>
    8ff6:	69 2d       	mov	r22, r9
    8ff8:	70 e0       	ldi	r23, 0x00	; 0
    8ffa:	02 c0       	rjmp	.+4      	; 0x9000 <vfprintf+0x170>
    8ffc:	6f ef       	ldi	r22, 0xFF	; 255
    8ffe:	7f ef       	ldi	r23, 0xFF	; 255
    9000:	c5 01       	movw	r24, r10
    9002:	4e d1       	rcall	.+668    	; 0x92a0 <strnlen>
    9004:	4c 01       	movw	r8, r24
    9006:	82 01       	movw	r16, r4
    9008:	f3 2d       	mov	r31, r3
    900a:	ff 77       	andi	r31, 0x7F	; 127
    900c:	3f 2e       	mov	r3, r31
    900e:	15 c0       	rjmp	.+42     	; 0x903a <vfprintf+0x1aa>
    9010:	28 01       	movw	r4, r16
    9012:	22 e0       	ldi	r18, 0x02	; 2
    9014:	42 0e       	add	r4, r18
    9016:	51 1c       	adc	r5, r1
    9018:	f8 01       	movw	r30, r16
    901a:	a0 80       	ld	r10, Z
    901c:	b1 80       	ldd	r11, Z+1	; 0x01
    901e:	36 fe       	sbrs	r3, 6
    9020:	03 c0       	rjmp	.+6      	; 0x9028 <vfprintf+0x198>
    9022:	69 2d       	mov	r22, r9
    9024:	70 e0       	ldi	r23, 0x00	; 0
    9026:	02 c0       	rjmp	.+4      	; 0x902c <vfprintf+0x19c>
    9028:	6f ef       	ldi	r22, 0xFF	; 255
    902a:	7f ef       	ldi	r23, 0xFF	; 255
    902c:	c5 01       	movw	r24, r10
    902e:	2d d1       	rcall	.+602    	; 0x928a <strnlen_P>
    9030:	4c 01       	movw	r8, r24
    9032:	f3 2d       	mov	r31, r3
    9034:	f0 68       	ori	r31, 0x80	; 128
    9036:	3f 2e       	mov	r3, r31
    9038:	82 01       	movw	r16, r4
    903a:	33 fc       	sbrc	r3, 3
    903c:	19 c0       	rjmp	.+50     	; 0x9070 <vfprintf+0x1e0>
    903e:	82 2d       	mov	r24, r2
    9040:	90 e0       	ldi	r25, 0x00	; 0
    9042:	88 16       	cp	r8, r24
    9044:	99 06       	cpc	r9, r25
    9046:	a0 f4       	brcc	.+40     	; 0x9070 <vfprintf+0x1e0>
    9048:	b6 01       	movw	r22, r12
    904a:	80 e2       	ldi	r24, 0x20	; 32
    904c:	90 e0       	ldi	r25, 0x00	; 0
    904e:	33 d1       	rcall	.+614    	; 0x92b6 <fputc>
    9050:	2a 94       	dec	r2
    9052:	f5 cf       	rjmp	.-22     	; 0x903e <vfprintf+0x1ae>
    9054:	f5 01       	movw	r30, r10
    9056:	37 fc       	sbrc	r3, 7
    9058:	85 91       	lpm	r24, Z+
    905a:	37 fe       	sbrs	r3, 7
    905c:	81 91       	ld	r24, Z+
    905e:	5f 01       	movw	r10, r30
    9060:	b6 01       	movw	r22, r12
    9062:	90 e0       	ldi	r25, 0x00	; 0
    9064:	28 d1       	rcall	.+592    	; 0x92b6 <fputc>
    9066:	21 10       	cpse	r2, r1
    9068:	2a 94       	dec	r2
    906a:	21 e0       	ldi	r18, 0x01	; 1
    906c:	82 1a       	sub	r8, r18
    906e:	91 08       	sbc	r9, r1
    9070:	81 14       	cp	r8, r1
    9072:	91 04       	cpc	r9, r1
    9074:	79 f7       	brne	.-34     	; 0x9054 <vfprintf+0x1c4>
    9076:	e1 c0       	rjmp	.+450    	; 0x923a <vfprintf+0x3aa>
    9078:	84 36       	cpi	r24, 0x64	; 100
    907a:	11 f0       	breq	.+4      	; 0x9080 <vfprintf+0x1f0>
    907c:	89 36       	cpi	r24, 0x69	; 105
    907e:	39 f5       	brne	.+78     	; 0x90ce <vfprintf+0x23e>
    9080:	f8 01       	movw	r30, r16
    9082:	37 fe       	sbrs	r3, 7
    9084:	07 c0       	rjmp	.+14     	; 0x9094 <vfprintf+0x204>
    9086:	60 81       	ld	r22, Z
    9088:	71 81       	ldd	r23, Z+1	; 0x01
    908a:	82 81       	ldd	r24, Z+2	; 0x02
    908c:	93 81       	ldd	r25, Z+3	; 0x03
    908e:	0c 5f       	subi	r16, 0xFC	; 252
    9090:	1f 4f       	sbci	r17, 0xFF	; 255
    9092:	08 c0       	rjmp	.+16     	; 0x90a4 <vfprintf+0x214>
    9094:	60 81       	ld	r22, Z
    9096:	71 81       	ldd	r23, Z+1	; 0x01
    9098:	07 2e       	mov	r0, r23
    909a:	00 0c       	add	r0, r0
    909c:	88 0b       	sbc	r24, r24
    909e:	99 0b       	sbc	r25, r25
    90a0:	0e 5f       	subi	r16, 0xFE	; 254
    90a2:	1f 4f       	sbci	r17, 0xFF	; 255
    90a4:	f3 2d       	mov	r31, r3
    90a6:	ff 76       	andi	r31, 0x6F	; 111
    90a8:	3f 2e       	mov	r3, r31
    90aa:	97 ff       	sbrs	r25, 7
    90ac:	09 c0       	rjmp	.+18     	; 0x90c0 <vfprintf+0x230>
    90ae:	90 95       	com	r25
    90b0:	80 95       	com	r24
    90b2:	70 95       	com	r23
    90b4:	61 95       	neg	r22
    90b6:	7f 4f       	sbci	r23, 0xFF	; 255
    90b8:	8f 4f       	sbci	r24, 0xFF	; 255
    90ba:	9f 4f       	sbci	r25, 0xFF	; 255
    90bc:	f0 68       	ori	r31, 0x80	; 128
    90be:	3f 2e       	mov	r3, r31
    90c0:	2a e0       	ldi	r18, 0x0A	; 10
    90c2:	30 e0       	ldi	r19, 0x00	; 0
    90c4:	a3 01       	movw	r20, r6
    90c6:	33 d1       	rcall	.+614    	; 0x932e <__ultoa_invert>
    90c8:	88 2e       	mov	r8, r24
    90ca:	86 18       	sub	r8, r6
    90cc:	44 c0       	rjmp	.+136    	; 0x9156 <vfprintf+0x2c6>
    90ce:	85 37       	cpi	r24, 0x75	; 117
    90d0:	31 f4       	brne	.+12     	; 0x90de <vfprintf+0x24e>
    90d2:	23 2d       	mov	r18, r3
    90d4:	2f 7e       	andi	r18, 0xEF	; 239
    90d6:	b2 2e       	mov	r11, r18
    90d8:	2a e0       	ldi	r18, 0x0A	; 10
    90da:	30 e0       	ldi	r19, 0x00	; 0
    90dc:	25 c0       	rjmp	.+74     	; 0x9128 <vfprintf+0x298>
    90de:	93 2d       	mov	r25, r3
    90e0:	99 7f       	andi	r25, 0xF9	; 249
    90e2:	b9 2e       	mov	r11, r25
    90e4:	8f 36       	cpi	r24, 0x6F	; 111
    90e6:	c1 f0       	breq	.+48     	; 0x9118 <vfprintf+0x288>
    90e8:	18 f4       	brcc	.+6      	; 0x90f0 <vfprintf+0x260>
    90ea:	88 35       	cpi	r24, 0x58	; 88
    90ec:	79 f0       	breq	.+30     	; 0x910c <vfprintf+0x27c>
    90ee:	ae c0       	rjmp	.+348    	; 0x924c <vfprintf+0x3bc>
    90f0:	80 37       	cpi	r24, 0x70	; 112
    90f2:	19 f0       	breq	.+6      	; 0x90fa <vfprintf+0x26a>
    90f4:	88 37       	cpi	r24, 0x78	; 120
    90f6:	21 f0       	breq	.+8      	; 0x9100 <vfprintf+0x270>
    90f8:	a9 c0       	rjmp	.+338    	; 0x924c <vfprintf+0x3bc>
    90fa:	e9 2f       	mov	r30, r25
    90fc:	e0 61       	ori	r30, 0x10	; 16
    90fe:	be 2e       	mov	r11, r30
    9100:	b4 fe       	sbrs	r11, 4
    9102:	0d c0       	rjmp	.+26     	; 0x911e <vfprintf+0x28e>
    9104:	fb 2d       	mov	r31, r11
    9106:	f4 60       	ori	r31, 0x04	; 4
    9108:	bf 2e       	mov	r11, r31
    910a:	09 c0       	rjmp	.+18     	; 0x911e <vfprintf+0x28e>
    910c:	34 fe       	sbrs	r3, 4
    910e:	0a c0       	rjmp	.+20     	; 0x9124 <vfprintf+0x294>
    9110:	29 2f       	mov	r18, r25
    9112:	26 60       	ori	r18, 0x06	; 6
    9114:	b2 2e       	mov	r11, r18
    9116:	06 c0       	rjmp	.+12     	; 0x9124 <vfprintf+0x294>
    9118:	28 e0       	ldi	r18, 0x08	; 8
    911a:	30 e0       	ldi	r19, 0x00	; 0
    911c:	05 c0       	rjmp	.+10     	; 0x9128 <vfprintf+0x298>
    911e:	20 e1       	ldi	r18, 0x10	; 16
    9120:	30 e0       	ldi	r19, 0x00	; 0
    9122:	02 c0       	rjmp	.+4      	; 0x9128 <vfprintf+0x298>
    9124:	20 e1       	ldi	r18, 0x10	; 16
    9126:	32 e0       	ldi	r19, 0x02	; 2
    9128:	f8 01       	movw	r30, r16
    912a:	b7 fe       	sbrs	r11, 7
    912c:	07 c0       	rjmp	.+14     	; 0x913c <vfprintf+0x2ac>
    912e:	60 81       	ld	r22, Z
    9130:	71 81       	ldd	r23, Z+1	; 0x01
    9132:	82 81       	ldd	r24, Z+2	; 0x02
    9134:	93 81       	ldd	r25, Z+3	; 0x03
    9136:	0c 5f       	subi	r16, 0xFC	; 252
    9138:	1f 4f       	sbci	r17, 0xFF	; 255
    913a:	06 c0       	rjmp	.+12     	; 0x9148 <vfprintf+0x2b8>
    913c:	60 81       	ld	r22, Z
    913e:	71 81       	ldd	r23, Z+1	; 0x01
    9140:	80 e0       	ldi	r24, 0x00	; 0
    9142:	90 e0       	ldi	r25, 0x00	; 0
    9144:	0e 5f       	subi	r16, 0xFE	; 254
    9146:	1f 4f       	sbci	r17, 0xFF	; 255
    9148:	a3 01       	movw	r20, r6
    914a:	f1 d0       	rcall	.+482    	; 0x932e <__ultoa_invert>
    914c:	88 2e       	mov	r8, r24
    914e:	86 18       	sub	r8, r6
    9150:	fb 2d       	mov	r31, r11
    9152:	ff 77       	andi	r31, 0x7F	; 127
    9154:	3f 2e       	mov	r3, r31
    9156:	36 fe       	sbrs	r3, 6
    9158:	0d c0       	rjmp	.+26     	; 0x9174 <vfprintf+0x2e4>
    915a:	23 2d       	mov	r18, r3
    915c:	2e 7f       	andi	r18, 0xFE	; 254
    915e:	a2 2e       	mov	r10, r18
    9160:	89 14       	cp	r8, r9
    9162:	58 f4       	brcc	.+22     	; 0x917a <vfprintf+0x2ea>
    9164:	34 fe       	sbrs	r3, 4
    9166:	0b c0       	rjmp	.+22     	; 0x917e <vfprintf+0x2ee>
    9168:	32 fc       	sbrc	r3, 2
    916a:	09 c0       	rjmp	.+18     	; 0x917e <vfprintf+0x2ee>
    916c:	83 2d       	mov	r24, r3
    916e:	8e 7e       	andi	r24, 0xEE	; 238
    9170:	a8 2e       	mov	r10, r24
    9172:	05 c0       	rjmp	.+10     	; 0x917e <vfprintf+0x2ee>
    9174:	b8 2c       	mov	r11, r8
    9176:	a3 2c       	mov	r10, r3
    9178:	03 c0       	rjmp	.+6      	; 0x9180 <vfprintf+0x2f0>
    917a:	b8 2c       	mov	r11, r8
    917c:	01 c0       	rjmp	.+2      	; 0x9180 <vfprintf+0x2f0>
    917e:	b9 2c       	mov	r11, r9
    9180:	a4 fe       	sbrs	r10, 4
    9182:	0f c0       	rjmp	.+30     	; 0x91a2 <vfprintf+0x312>
    9184:	fe 01       	movw	r30, r28
    9186:	e8 0d       	add	r30, r8
    9188:	f1 1d       	adc	r31, r1
    918a:	80 81       	ld	r24, Z
    918c:	80 33       	cpi	r24, 0x30	; 48
    918e:	21 f4       	brne	.+8      	; 0x9198 <vfprintf+0x308>
    9190:	9a 2d       	mov	r25, r10
    9192:	99 7e       	andi	r25, 0xE9	; 233
    9194:	a9 2e       	mov	r10, r25
    9196:	09 c0       	rjmp	.+18     	; 0x91aa <vfprintf+0x31a>
    9198:	a2 fe       	sbrs	r10, 2
    919a:	06 c0       	rjmp	.+12     	; 0x91a8 <vfprintf+0x318>
    919c:	b3 94       	inc	r11
    919e:	b3 94       	inc	r11
    91a0:	04 c0       	rjmp	.+8      	; 0x91aa <vfprintf+0x31a>
    91a2:	8a 2d       	mov	r24, r10
    91a4:	86 78       	andi	r24, 0x86	; 134
    91a6:	09 f0       	breq	.+2      	; 0x91aa <vfprintf+0x31a>
    91a8:	b3 94       	inc	r11
    91aa:	a3 fc       	sbrc	r10, 3
    91ac:	10 c0       	rjmp	.+32     	; 0x91ce <vfprintf+0x33e>
    91ae:	a0 fe       	sbrs	r10, 0
    91b0:	06 c0       	rjmp	.+12     	; 0x91be <vfprintf+0x32e>
    91b2:	b2 14       	cp	r11, r2
    91b4:	80 f4       	brcc	.+32     	; 0x91d6 <vfprintf+0x346>
    91b6:	28 0c       	add	r2, r8
    91b8:	92 2c       	mov	r9, r2
    91ba:	9b 18       	sub	r9, r11
    91bc:	0d c0       	rjmp	.+26     	; 0x91d8 <vfprintf+0x348>
    91be:	b2 14       	cp	r11, r2
    91c0:	58 f4       	brcc	.+22     	; 0x91d8 <vfprintf+0x348>
    91c2:	b6 01       	movw	r22, r12
    91c4:	80 e2       	ldi	r24, 0x20	; 32
    91c6:	90 e0       	ldi	r25, 0x00	; 0
    91c8:	76 d0       	rcall	.+236    	; 0x92b6 <fputc>
    91ca:	b3 94       	inc	r11
    91cc:	f8 cf       	rjmp	.-16     	; 0x91be <vfprintf+0x32e>
    91ce:	b2 14       	cp	r11, r2
    91d0:	18 f4       	brcc	.+6      	; 0x91d8 <vfprintf+0x348>
    91d2:	2b 18       	sub	r2, r11
    91d4:	02 c0       	rjmp	.+4      	; 0x91da <vfprintf+0x34a>
    91d6:	98 2c       	mov	r9, r8
    91d8:	21 2c       	mov	r2, r1
    91da:	a4 fe       	sbrs	r10, 4
    91dc:	0f c0       	rjmp	.+30     	; 0x91fc <vfprintf+0x36c>
    91de:	b6 01       	movw	r22, r12
    91e0:	80 e3       	ldi	r24, 0x30	; 48
    91e2:	90 e0       	ldi	r25, 0x00	; 0
    91e4:	68 d0       	rcall	.+208    	; 0x92b6 <fputc>
    91e6:	a2 fe       	sbrs	r10, 2
    91e8:	16 c0       	rjmp	.+44     	; 0x9216 <vfprintf+0x386>
    91ea:	a1 fc       	sbrc	r10, 1
    91ec:	03 c0       	rjmp	.+6      	; 0x91f4 <vfprintf+0x364>
    91ee:	88 e7       	ldi	r24, 0x78	; 120
    91f0:	90 e0       	ldi	r25, 0x00	; 0
    91f2:	02 c0       	rjmp	.+4      	; 0x91f8 <vfprintf+0x368>
    91f4:	88 e5       	ldi	r24, 0x58	; 88
    91f6:	90 e0       	ldi	r25, 0x00	; 0
    91f8:	b6 01       	movw	r22, r12
    91fa:	0c c0       	rjmp	.+24     	; 0x9214 <vfprintf+0x384>
    91fc:	8a 2d       	mov	r24, r10
    91fe:	86 78       	andi	r24, 0x86	; 134
    9200:	51 f0       	breq	.+20     	; 0x9216 <vfprintf+0x386>
    9202:	a1 fe       	sbrs	r10, 1
    9204:	02 c0       	rjmp	.+4      	; 0x920a <vfprintf+0x37a>
    9206:	8b e2       	ldi	r24, 0x2B	; 43
    9208:	01 c0       	rjmp	.+2      	; 0x920c <vfprintf+0x37c>
    920a:	80 e2       	ldi	r24, 0x20	; 32
    920c:	a7 fc       	sbrc	r10, 7
    920e:	8d e2       	ldi	r24, 0x2D	; 45
    9210:	b6 01       	movw	r22, r12
    9212:	90 e0       	ldi	r25, 0x00	; 0
    9214:	50 d0       	rcall	.+160    	; 0x92b6 <fputc>
    9216:	89 14       	cp	r8, r9
    9218:	30 f4       	brcc	.+12     	; 0x9226 <vfprintf+0x396>
    921a:	b6 01       	movw	r22, r12
    921c:	80 e3       	ldi	r24, 0x30	; 48
    921e:	90 e0       	ldi	r25, 0x00	; 0
    9220:	4a d0       	rcall	.+148    	; 0x92b6 <fputc>
    9222:	9a 94       	dec	r9
    9224:	f8 cf       	rjmp	.-16     	; 0x9216 <vfprintf+0x386>
    9226:	8a 94       	dec	r8
    9228:	f3 01       	movw	r30, r6
    922a:	e8 0d       	add	r30, r8
    922c:	f1 1d       	adc	r31, r1
    922e:	80 81       	ld	r24, Z
    9230:	b6 01       	movw	r22, r12
    9232:	90 e0       	ldi	r25, 0x00	; 0
    9234:	40 d0       	rcall	.+128    	; 0x92b6 <fputc>
    9236:	81 10       	cpse	r8, r1
    9238:	f6 cf       	rjmp	.-20     	; 0x9226 <vfprintf+0x396>
    923a:	22 20       	and	r2, r2
    923c:	09 f4       	brne	.+2      	; 0x9240 <vfprintf+0x3b0>
    923e:	4e ce       	rjmp	.-868    	; 0x8edc <vfprintf+0x4c>
    9240:	b6 01       	movw	r22, r12
    9242:	80 e2       	ldi	r24, 0x20	; 32
    9244:	90 e0       	ldi	r25, 0x00	; 0
    9246:	37 d0       	rcall	.+110    	; 0x92b6 <fputc>
    9248:	2a 94       	dec	r2
    924a:	f7 cf       	rjmp	.-18     	; 0x923a <vfprintf+0x3aa>
    924c:	f6 01       	movw	r30, r12
    924e:	86 81       	ldd	r24, Z+6	; 0x06
    9250:	97 81       	ldd	r25, Z+7	; 0x07
    9252:	02 c0       	rjmp	.+4      	; 0x9258 <vfprintf+0x3c8>
    9254:	8f ef       	ldi	r24, 0xFF	; 255
    9256:	9f ef       	ldi	r25, 0xFF	; 255
    9258:	2b 96       	adiw	r28, 0x0b	; 11
    925a:	0f b6       	in	r0, 0x3f	; 63
    925c:	f8 94       	cli
    925e:	de bf       	out	0x3e, r29	; 62
    9260:	0f be       	out	0x3f, r0	; 63
    9262:	cd bf       	out	0x3d, r28	; 61
    9264:	df 91       	pop	r29
    9266:	cf 91       	pop	r28
    9268:	1f 91       	pop	r17
    926a:	0f 91       	pop	r16
    926c:	ff 90       	pop	r15
    926e:	ef 90       	pop	r14
    9270:	df 90       	pop	r13
    9272:	cf 90       	pop	r12
    9274:	bf 90       	pop	r11
    9276:	af 90       	pop	r10
    9278:	9f 90       	pop	r9
    927a:	8f 90       	pop	r8
    927c:	7f 90       	pop	r7
    927e:	6f 90       	pop	r6
    9280:	5f 90       	pop	r5
    9282:	4f 90       	pop	r4
    9284:	3f 90       	pop	r3
    9286:	2f 90       	pop	r2
    9288:	08 95       	ret

0000928a <strnlen_P>:
    928a:	fc 01       	movw	r30, r24
    928c:	05 90       	lpm	r0, Z+
    928e:	61 50       	subi	r22, 0x01	; 1
    9290:	70 40       	sbci	r23, 0x00	; 0
    9292:	01 10       	cpse	r0, r1
    9294:	d8 f7       	brcc	.-10     	; 0x928c <strnlen_P+0x2>
    9296:	80 95       	com	r24
    9298:	90 95       	com	r25
    929a:	8e 0f       	add	r24, r30
    929c:	9f 1f       	adc	r25, r31
    929e:	08 95       	ret

000092a0 <strnlen>:
    92a0:	fc 01       	movw	r30, r24
    92a2:	61 50       	subi	r22, 0x01	; 1
    92a4:	70 40       	sbci	r23, 0x00	; 0
    92a6:	01 90       	ld	r0, Z+
    92a8:	01 10       	cpse	r0, r1
    92aa:	d8 f7       	brcc	.-10     	; 0x92a2 <strnlen+0x2>
    92ac:	80 95       	com	r24
    92ae:	90 95       	com	r25
    92b0:	8e 0f       	add	r24, r30
    92b2:	9f 1f       	adc	r25, r31
    92b4:	08 95       	ret

000092b6 <fputc>:
    92b6:	0f 93       	push	r16
    92b8:	1f 93       	push	r17
    92ba:	cf 93       	push	r28
    92bc:	df 93       	push	r29
    92be:	fb 01       	movw	r30, r22
    92c0:	23 81       	ldd	r18, Z+3	; 0x03
    92c2:	21 fd       	sbrc	r18, 1
    92c4:	03 c0       	rjmp	.+6      	; 0x92cc <fputc+0x16>
    92c6:	8f ef       	ldi	r24, 0xFF	; 255
    92c8:	9f ef       	ldi	r25, 0xFF	; 255
    92ca:	2c c0       	rjmp	.+88     	; 0x9324 <fputc+0x6e>
    92cc:	22 ff       	sbrs	r18, 2
    92ce:	16 c0       	rjmp	.+44     	; 0x92fc <fputc+0x46>
    92d0:	46 81       	ldd	r20, Z+6	; 0x06
    92d2:	57 81       	ldd	r21, Z+7	; 0x07
    92d4:	24 81       	ldd	r18, Z+4	; 0x04
    92d6:	35 81       	ldd	r19, Z+5	; 0x05
    92d8:	42 17       	cp	r20, r18
    92da:	53 07       	cpc	r21, r19
    92dc:	44 f4       	brge	.+16     	; 0x92ee <fputc+0x38>
    92de:	a0 81       	ld	r26, Z
    92e0:	b1 81       	ldd	r27, Z+1	; 0x01
    92e2:	9d 01       	movw	r18, r26
    92e4:	2f 5f       	subi	r18, 0xFF	; 255
    92e6:	3f 4f       	sbci	r19, 0xFF	; 255
    92e8:	31 83       	std	Z+1, r19	; 0x01
    92ea:	20 83       	st	Z, r18
    92ec:	8c 93       	st	X, r24
    92ee:	26 81       	ldd	r18, Z+6	; 0x06
    92f0:	37 81       	ldd	r19, Z+7	; 0x07
    92f2:	2f 5f       	subi	r18, 0xFF	; 255
    92f4:	3f 4f       	sbci	r19, 0xFF	; 255
    92f6:	37 83       	std	Z+7, r19	; 0x07
    92f8:	26 83       	std	Z+6, r18	; 0x06
    92fa:	14 c0       	rjmp	.+40     	; 0x9324 <fputc+0x6e>
    92fc:	8b 01       	movw	r16, r22
    92fe:	ec 01       	movw	r28, r24
    9300:	fb 01       	movw	r30, r22
    9302:	00 84       	ldd	r0, Z+8	; 0x08
    9304:	f1 85       	ldd	r31, Z+9	; 0x09
    9306:	e0 2d       	mov	r30, r0
    9308:	19 95       	eicall
    930a:	89 2b       	or	r24, r25
    930c:	e1 f6       	brne	.-72     	; 0x92c6 <fputc+0x10>
    930e:	d8 01       	movw	r26, r16
    9310:	16 96       	adiw	r26, 0x06	; 6
    9312:	8d 91       	ld	r24, X+
    9314:	9c 91       	ld	r25, X
    9316:	17 97       	sbiw	r26, 0x07	; 7
    9318:	01 96       	adiw	r24, 0x01	; 1
    931a:	17 96       	adiw	r26, 0x07	; 7
    931c:	9c 93       	st	X, r25
    931e:	8e 93       	st	-X, r24
    9320:	16 97       	sbiw	r26, 0x06	; 6
    9322:	ce 01       	movw	r24, r28
    9324:	df 91       	pop	r29
    9326:	cf 91       	pop	r28
    9328:	1f 91       	pop	r17
    932a:	0f 91       	pop	r16
    932c:	08 95       	ret

0000932e <__ultoa_invert>:
    932e:	fa 01       	movw	r30, r20
    9330:	aa 27       	eor	r26, r26
    9332:	28 30       	cpi	r18, 0x08	; 8
    9334:	51 f1       	breq	.+84     	; 0x938a <__ultoa_invert+0x5c>
    9336:	20 31       	cpi	r18, 0x10	; 16
    9338:	81 f1       	breq	.+96     	; 0x939a <__ultoa_invert+0x6c>
    933a:	e8 94       	clt
    933c:	6f 93       	push	r22
    933e:	6e 7f       	andi	r22, 0xFE	; 254
    9340:	6e 5f       	subi	r22, 0xFE	; 254
    9342:	7f 4f       	sbci	r23, 0xFF	; 255
    9344:	8f 4f       	sbci	r24, 0xFF	; 255
    9346:	9f 4f       	sbci	r25, 0xFF	; 255
    9348:	af 4f       	sbci	r26, 0xFF	; 255
    934a:	b1 e0       	ldi	r27, 0x01	; 1
    934c:	3e d0       	rcall	.+124    	; 0x93ca <__ultoa_invert+0x9c>
    934e:	b4 e0       	ldi	r27, 0x04	; 4
    9350:	3c d0       	rcall	.+120    	; 0x93ca <__ultoa_invert+0x9c>
    9352:	67 0f       	add	r22, r23
    9354:	78 1f       	adc	r23, r24
    9356:	89 1f       	adc	r24, r25
    9358:	9a 1f       	adc	r25, r26
    935a:	a1 1d       	adc	r26, r1
    935c:	68 0f       	add	r22, r24
    935e:	79 1f       	adc	r23, r25
    9360:	8a 1f       	adc	r24, r26
    9362:	91 1d       	adc	r25, r1
    9364:	a1 1d       	adc	r26, r1
    9366:	6a 0f       	add	r22, r26
    9368:	71 1d       	adc	r23, r1
    936a:	81 1d       	adc	r24, r1
    936c:	91 1d       	adc	r25, r1
    936e:	a1 1d       	adc	r26, r1
    9370:	20 d0       	rcall	.+64     	; 0x93b2 <__ultoa_invert+0x84>
    9372:	09 f4       	brne	.+2      	; 0x9376 <__ultoa_invert+0x48>
    9374:	68 94       	set
    9376:	3f 91       	pop	r19
    9378:	2a e0       	ldi	r18, 0x0A	; 10
    937a:	26 9f       	mul	r18, r22
    937c:	11 24       	eor	r1, r1
    937e:	30 19       	sub	r19, r0
    9380:	30 5d       	subi	r19, 0xD0	; 208
    9382:	31 93       	st	Z+, r19
    9384:	de f6       	brtc	.-74     	; 0x933c <__ultoa_invert+0xe>
    9386:	cf 01       	movw	r24, r30
    9388:	08 95       	ret
    938a:	46 2f       	mov	r20, r22
    938c:	47 70       	andi	r20, 0x07	; 7
    938e:	40 5d       	subi	r20, 0xD0	; 208
    9390:	41 93       	st	Z+, r20
    9392:	b3 e0       	ldi	r27, 0x03	; 3
    9394:	0f d0       	rcall	.+30     	; 0x93b4 <__ultoa_invert+0x86>
    9396:	c9 f7       	brne	.-14     	; 0x938a <__ultoa_invert+0x5c>
    9398:	f6 cf       	rjmp	.-20     	; 0x9386 <__ultoa_invert+0x58>
    939a:	46 2f       	mov	r20, r22
    939c:	4f 70       	andi	r20, 0x0F	; 15
    939e:	40 5d       	subi	r20, 0xD0	; 208
    93a0:	4a 33       	cpi	r20, 0x3A	; 58
    93a2:	18 f0       	brcs	.+6      	; 0x93aa <__ultoa_invert+0x7c>
    93a4:	49 5d       	subi	r20, 0xD9	; 217
    93a6:	31 fd       	sbrc	r19, 1
    93a8:	40 52       	subi	r20, 0x20	; 32
    93aa:	41 93       	st	Z+, r20
    93ac:	02 d0       	rcall	.+4      	; 0x93b2 <__ultoa_invert+0x84>
    93ae:	a9 f7       	brne	.-22     	; 0x939a <__ultoa_invert+0x6c>
    93b0:	ea cf       	rjmp	.-44     	; 0x9386 <__ultoa_invert+0x58>
    93b2:	b4 e0       	ldi	r27, 0x04	; 4
    93b4:	a6 95       	lsr	r26
    93b6:	97 95       	ror	r25
    93b8:	87 95       	ror	r24
    93ba:	77 95       	ror	r23
    93bc:	67 95       	ror	r22
    93be:	ba 95       	dec	r27
    93c0:	c9 f7       	brne	.-14     	; 0x93b4 <__ultoa_invert+0x86>
    93c2:	00 97       	sbiw	r24, 0x00	; 0
    93c4:	61 05       	cpc	r22, r1
    93c6:	71 05       	cpc	r23, r1
    93c8:	08 95       	ret
    93ca:	9b 01       	movw	r18, r22
    93cc:	ac 01       	movw	r20, r24
    93ce:	0a 2e       	mov	r0, r26
    93d0:	06 94       	lsr	r0
    93d2:	57 95       	ror	r21
    93d4:	47 95       	ror	r20
    93d6:	37 95       	ror	r19
    93d8:	27 95       	ror	r18
    93da:	ba 95       	dec	r27
    93dc:	c9 f7       	brne	.-14     	; 0x93d0 <__ultoa_invert+0xa2>
    93de:	62 0f       	add	r22, r18
    93e0:	73 1f       	adc	r23, r19
    93e2:	84 1f       	adc	r24, r20
    93e4:	95 1f       	adc	r25, r21
    93e6:	a0 1d       	adc	r26, r0
    93e8:	08 95       	ret

000093ea <_exit>:
    93ea:	f8 94       	cli

000093ec <__stop_program>:
    93ec:	ff cf       	rjmp	.-2      	; 0x93ec <__stop_program>
